{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/pure/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/pure/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","path":"images/xingqiu-qrcode.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","path":"images/donate/wechatpayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","path":"images/favatar/SzsFox-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"0921dce0665fa8071633e0d0450f83a70a161c54","modified":1626947854808},{"_id":"source/404/index.md","hash":"8d493f624fdd29c8d0266767e56f343d549e16d8","modified":1626935935268},{"_id":"source/_posts/ElasticSearch.md","hash":"7856a67deb72d8e984bd5d807939f9234021204c","modified":1627024696836},{"_id":"source/_posts/java8特性.md","hash":"e131784f7f059292a487e61bb567d169eeb389cd","modified":1627024696842},{"_id":"source/_posts/lock01.md","hash":"303d0d0410521eb9e88b5e2997811b2b83036474","modified":1627024696845},{"_id":"source/_posts/nginx.md","hash":"8c1a2f6291cbcf8515d7f2bee6c5ef1448940a48","modified":1627022952823},{"_id":"source/_posts/vue.md","hash":"ab8fa68d65f23a9e70d1f37df77556bd4caf8bfe","modified":1627024696840},{"_id":"source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1626935935268},{"_id":"source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1626935935269},{"_id":"source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1626935935268},{"_id":"source/about/index.md","hash":"9c95cabb533409d06daefc4295021ad199761efc","modified":1626935935268},{"_id":"source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1626935935269},{"_id":"source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1626935935269},{"_id":"source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1626935935270},{"_id":"source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1626935935270},{"_id":"source/_posts/ElasticSearch/image-20200806170145844.png","hash":"c98bc90ae0f0f216dd7fec89b7b712e055ed2ad1","modified":1596704506000},{"_id":"source/_posts/ElasticSearch/image-20201211095101816.png","hash":"ab9071ebe82c1cb6b352e96b946573c234812f1a","modified":1607651462000},{"_id":"source/_posts/ElasticSearch/image-20201211095258901.png","hash":"c9b64529bc173cdb220e8ed4dc085914b91f93a4","modified":1607651578000},{"_id":"source/_posts/lock01/read_writer_Lock1.png","hash":"c313df303034ea20d7755e1c852508078989d8fb","modified":1606726928000},{"_id":"source/_posts/nginx/image-20201210100736952.png","hash":"1212b42387d66bd9b65c94512385a4c182c5679f","modified":1607566056000},{"_id":"source/_posts/nginx/image-20201210103251475.png","hash":"bcc1327d5b4046748d82e10628040e1bf09c91bc","modified":1607567572000},{"_id":"source/_posts/ElasticSearch/image-20200807093208470.png","hash":"5975509b668fef3322a88c368dfbe3a0cb22c4d5","modified":1596763928000},{"_id":"source/_posts/ElasticSearch/image-20200807093309761.png","hash":"d95ac7aaea31cd9322f5f7d8c8a704d76b7e503c","modified":1596763990000},{"_id":"themes/pure/README.cn.md","hash":"a634af4addbb57088935e060e8ec6035ea7bab76","modified":1626935935267},{"_id":"themes/pure/README.md","hash":"5861cec81712af9197a210fd5212d007aad8b0de","modified":1626935935267},{"_id":"themes/pure/.gitignore","hash":"dbb41a2f30c98cb9de173d82736c46266c901cda","modified":1626935935267},{"_id":"themes/pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1626935935267},{"_id":"themes/pure/_config.yml","hash":"b18b070e878ad7cccfcb094bb305e5c76e738f8e","modified":1627026290902},{"_id":"themes/pure/_config.yml.example","hash":"4b9f637f5b1ccb64afe406a10300baba783a8dc0","modified":1627006682410},{"_id":"themes/pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1626935935283},{"_id":"themes/pure/_source/favicon.ico","hash":"d49cc39708a0623a83fdeaefb46de268b818f318","modified":1615282315981},{"_id":"themes/pure/languages/en.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1626935935271},{"_id":"themes/pure/languages/default.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1626935935270},{"_id":"themes/pure/languages/zh-CN.yml","hash":"057ebc043f09449af9768791c89c86dfc2938365","modified":1626935935271},{"_id":"themes/pure/languages/zh-TW.yml","hash":"6d27c3114be539b8783ffce944f68b2e26a8c3b9","modified":1626935935271},{"_id":"themes/pure/layout/archive.ejs","hash":"ded5d953b35666e30f4c6e48e2d2c62af8d95ebf","modified":1626935935282},{"_id":"themes/pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1626935935281},{"_id":"themes/pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1626935935282},{"_id":"themes/pure/layout/categories.ejs","hash":"22a2bc1712dd9ba1a3027e875d636132d334fb00","modified":1626938917539},{"_id":"themes/pure/layout/category.ejs","hash":"3ca5651bbce7b0c280c906468f2eb18c2e55ebcb","modified":1626938917539},{"_id":"themes/pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1626935935282},{"_id":"themes/pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1626935935282},{"_id":"themes/pure/layout/layout.ejs","hash":"a29ab2e881954a252bfc0dc1a7eb5aa52768dd2a","modified":1626935935282},{"_id":"themes/pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1626935935283},{"_id":"themes/pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1626935935283},{"_id":"themes/pure/layout/tags.ejs","hash":"29f19a6ed10f8b1f069259a7aeaaacddcfaa2ed4","modified":1626938917540},{"_id":"themes/pure/layout/tag.ejs","hash":"df60564c162f7ad3422f8959dfea19351857a7cd","modified":1626938917540},{"_id":"themes/pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1626935935283},{"_id":"themes/pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1626935935295},{"_id":"themes/pure/source/favicon.ico","hash":"d49cc39708a0623a83fdeaefb46de268b818f318","modified":1615282315981},{"_id":"themes/pure/source/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1626935935297},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/bug_report.md","hash":"83d211c67c12e8c1f6e9f796cfd0cecbf5160e15","modified":1626938917537},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/custom.md","hash":"84208538d48505ee8e49812cb336eb9882e08dc7","modified":1626938917537},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1626938917537},{"_id":"themes/pure/_source/404/index.md","hash":"8d493f624fdd29c8d0266767e56f343d549e16d8","modified":1626935935268},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1626935935268},{"_id":"themes/pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1626935935268},{"_id":"themes/pure/_source/about/index.md","hash":"9bfd778bc72255f6a98efbb3d8abe688833e866b","modified":1627022375488},{"_id":"themes/pure/_source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1626935935269},{"_id":"themes/pure/_source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1626935935269},{"_id":"themes/pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1626935935269},{"_id":"themes/pure/_source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1626935935270},{"_id":"themes/pure/_source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1626935935270},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"977f97f3636947006ad738e502858c46d4cd5ec7","modified":1626935935273},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1626935935273},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1626935935273},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"c66c86d6a6a90e00494c380603426fc0f4006311","modified":1626935935274},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"13039fec017332029122ef99901755fcecbfc8ea","modified":1626935935274},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"e39dc762d9fe238cede462532e40eaa3d8651122","modified":1626935935274},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1626935935274},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"4d6793f50d41fbd47dc50aa36b24d496006bba6c","modified":1626935935274},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"7b80319daeb63401d1745b81cd9a6d1d21a4fb60","modified":1626935935275},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"0f9b71de0087d1f777d92c5a0f3873971aec5a5b","modified":1627024571297},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"9f755b0da1ea928dece32c2050d8a04b3a9fb13b","modified":1626935935275},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"41a319642da5af07d6cfb8525796aa610b721879","modified":1626935935275},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"152538ceceb0fdef65c46470ebf0189f7b891c5b","modified":1626935935277},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"46da1ee327b8af107335146bd8fc131eee6c9c4f","modified":1626938917538},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1626935935277},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"cdc48ec70d9202b947f2a9334234d038d7014a7d","modified":1626935935271},{"_id":"themes/pure/layout/_common/head.ejs","hash":"a48ef0fa22712b29ec044b9e5134461f3a21c10d","modified":1626935935272},{"_id":"themes/pure/layout/_common/header.ejs","hash":"3d739d1e2b2991927c08ec222db123830a44a519","modified":1626935935272},{"_id":"themes/pure/layout/_common/script.ejs","hash":"0031114d2a58f8601c2869f78ceedc75a10be90d","modified":1626935935272},{"_id":"themes/pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1626935935273},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"acd27451be52703e670ce0b313f2da6fa24071e4","modified":1626935935281},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1626935935281},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1626935935281},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1626935935281},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1626935935281},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1626935935281},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1626935935280},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1626935935280},{"_id":"themes/pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1626935935280},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1626935935280},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1626935935280},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"e756a81f8c20a187fb863b9689f2f1fa15e2f4e1","modified":1626935935279},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"6f951510bab9dc15474b6664e0329defccf29a30","modified":1626935935279},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"ee21c4e7ccac26ff2ab6d1d178447fd11fea4d7e","modified":1626938917539},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"8f1be01e70a15b2c31ae57d8c6bce54622ebf8a7","modified":1626935935279},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1626935935279},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"fb9b5f16029f2ccef4b83cf4facfdcdd748b65b4","modified":1626935935279},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"14f2e7d4c1055ff6a5f5867dc0e9a9f6f4c28fe1","modified":1626938917539},{"_id":"themes/pure/layout/_script/search.ejs","hash":"7be33dc260ce788aa1a2cd3bd0386d95057533cb","modified":1626935935280},{"_id":"themes/pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1626935935297},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1626935935298},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1626935935299},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1626935935299},{"_id":"themes/pure/source/images/avatar.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1626935935300},{"_id":"themes/pure/source/images/favicon.ico","hash":"d49cc39708a0623a83fdeaefb46de268b818f318","modified":1615282315981},{"_id":"themes/pure/source/images/logo.png","hash":"8e6dc6af4dda2ceb1eb72b3609479f3cb4aca13f","modified":1615282315981},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1626935935301},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1626938917541},{"_id":"themes/pure/source/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1626935935301},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1626935935301},{"_id":"themes/pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1626935935301},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"0a99c99992fb1e97bf5a57e05179f5680d69dcc8","modified":1626938917538},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"3c0da69fcea6ccfd97b82d50e740107a88eec5c4","modified":1626935935276},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"7d4979652998abf92a64bfae8157b70d6e514057","modified":1626935935276},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"a251dc34d660601a2e8b7d98b3bfe2b9023dbbce","modified":1626935935276},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1626935935276},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1626935935276},{"_id":"themes/pure/layout/_partial/post/gitalk.ejs","hash":"353b1dafc0b9a6efb66d195e74127e3bfb73d74a","modified":1627024296972},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"95eabc0fe4033ec61b240a16eeaf7dc62a9e3da1","modified":1626935935276},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"ec3ccf322432afc2761f860c5a3000ac34d46e4c","modified":1626935935276},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1626935935277},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1626935935277},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1626935935277},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1626935935277},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1626935935278},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1626935935278},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"77defb41a1613a758ff5a6a5128c6107fc584190","modified":1626935935278},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"a051e3eddc75586e69131c29ab8c89d69626e0fd","modified":1626935935278},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"fb01f1631c3ae7fe6211dc03233506cb344229be","modified":1626935935278},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"a64852076483395738a398deb4c10bdb0f3b7b71","modified":1626935935278},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"5ab997d5ee4475d2f89f882fab4a52648dbe0e30","modified":1626935935278},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"acf81f9a59dc45f197d723f70484de5fcd166577","modified":1626935935278},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"095649a173573d03b5845c2e331ec7be976b152a","modified":1626935935278},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1626935935279},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1626935935279},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1626938917540},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1626935935300},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1626935935301},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1626935935284},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1626935935285},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1626935935286},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1626935935286},{"_id":"themes/pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1626935935302},{"_id":"themes/pure/source/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1626935935303},{"_id":"themes/pure/source/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1626935935305},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1626935935284},{"_id":"themes/pure/source/css/style.css","hash":"3b693ce41c2e35ece4773593e94b4c17aeaee02f","modified":1626935935296},{"_id":"themes/pure/source/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1626935935297},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1626935935299},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1626935935304},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"4b5dcdc366cf96737e582094267b6f177c15bb44","modified":1627010946859},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"e881a9e141da37ca46258e9d8fada3b51cd11046","modified":1627010908253},{"_id":"themes/pure/source/images/avatar.png","hash":"ebde5ecfd529edecfab55788e99ffcb22df93730","modified":1627008292802},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1626935935295},{"_id":"public/feed.xml","hash":"e997d1464b6ba1b16194463747e211ede0395bb2","modified":1627026475975},{"_id":"public/baidusitemap.xml","hash":"03b89d18c1243b6faf9bad316f9ea68c62b8cd14","modified":1627026475975},{"_id":"public/content.json","hash":"514795e817510cb9be1689e55ffd7732cdfaf7c1","modified":1627026475975},{"_id":"public/search.xml","hash":"16b7e941f3ac9c9980d1b9986a1796a608a60741","modified":1627026475975},{"_id":"public/sitemap.xml","hash":"007a56b662d4fbf8999e7ff7e0fa7e60c47cc044","modified":1627026475975},{"_id":"public/categories/index.html","hash":"e0e4f6514f1f4faf6c22a3a874aa2e1d13b084d2","modified":1627026475975},{"_id":"public/links/index.html","hash":"bfe71c8c5eae342e77f16cc39b91dc7b7703e306","modified":1627026475975},{"_id":"public/archives/index.html","hash":"dc9bf5fd08cddee84cf6862e7c65d8133849471b","modified":1627026475975},{"_id":"public/archives/2020/index.html","hash":"ed559b8978be95798edd9d1026f54ae5b52988ee","modified":1627026475975},{"_id":"public/archives/2020/04/index.html","hash":"cdf565ef4786ee8c9d1b56e088774ec751959daf","modified":1627026475975},{"_id":"public/archives/2021/index.html","hash":"acbb2c14f631816729b760e095952ddfb16cf343","modified":1627026475975},{"_id":"public/archives/2021/07/index.html","hash":"f17a39603ac3717b077ac758317ca3cbf4da1609","modified":1627026475975},{"_id":"public/tags/lock/index.html","hash":"f7bdbc99a1b402bad7f65966c96febc654fdca1c","modified":1627026475975},{"_id":"public/tags/elasticSearch-kibana/index.html","hash":"eca59e89bbd1ef0d40fb0092000eb1f32b2b25a9","modified":1627026475975},{"_id":"public/tags/Optional/index.html","hash":"a642f4a52bb8bd29c638510f668b6dd3f7b41c8d","modified":1627026475975},{"_id":"public/tags/nginx/index.html","hash":"faef1e8651cf8ea149cc72c190fd0f117a95ac9d","modified":1627026475975},{"_id":"public/tags/vue/index.html","hash":"5d89ea2bf567b5ecd1ea6b1f80e383632625e18f","modified":1627026475975},{"_id":"public/404.html","hash":"7724ca670a1ffc10dd68263a6ed49c19ed913526","modified":1627026475975},{"_id":"public/books/index.html","hash":"d83b4c0723496be225d80f5196bb9feaaf671d7e","modified":1627026475975},{"_id":"public/about/index.html","hash":"05ea460853ee8514ae2310a75486faccda96f35b","modified":1627026475975},{"_id":"public/repository/index.html","hash":"26812fd5615feb4ef98c563bbc9e0faea5299f54","modified":1627026475975},{"_id":"public/tags/index.html","hash":"077a151919d1096a6a8c078c4a2cb735d3fa463f","modified":1627026475975},{"_id":"public/2021/07/23/lock01/index.html","hash":"413b37708b17146d031277fc9eed1b516ef80af9","modified":1627026475975},{"_id":"public/2021/07/23/ElasticSearch/index.html","hash":"dd53c78fae49abc2beb75ea1bec2940a7baae539","modified":1627026475975},{"_id":"public/2021/07/23/nginx/index.html","hash":"7c63f9a24faf692c53fb0a2b55959bfda5c68473","modified":1627026475975},{"_id":"public/2021/07/23/vue/index.html","hash":"8804daa17f0e9b7bce3b614f9d1efab3d8ef3f0d","modified":1627026475975},{"_id":"public/2020/04/23/java8特性/index.html","hash":"2814bf97b4b7cd38618ca9acb0685f57dd3ffda2","modified":1627026475975},{"_id":"public/index.html","hash":"dc605325be5342f4a62171add3c470e0d782281d","modified":1627026475975},{"_id":"public/CNAME","hash":"0921dce0665fa8071633e0d0450f83a70a161c54","modified":1627026475975},{"_id":"public/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1627026475975},{"_id":"public/favicon.ico","hash":"d49cc39708a0623a83fdeaefb46de268b818f318","modified":1627026475975},{"_id":"public/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1627026475975},{"_id":"public/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1627026475975},{"_id":"public/images/favicon.ico","hash":"d49cc39708a0623a83fdeaefb46de268b818f318","modified":1627026475975},{"_id":"public/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1627026475975},{"_id":"public/images/avatar.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1627026475975},{"_id":"public/images/logo.png","hash":"8e6dc6af4dda2ceb1eb72b3609479f3cb4aca13f","modified":1627026475975},{"_id":"public/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1627026475975},{"_id":"public/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1627026475975},{"_id":"public/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1627026475975},{"_id":"public/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1627026475975},{"_id":"public/2021/07/23/ElasticSearch/image-20200806170145844.png","hash":"c98bc90ae0f0f216dd7fec89b7b712e055ed2ad1","modified":1627026475975},{"_id":"public/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1627026475975},{"_id":"public/2021/07/23/ElasticSearch/image-20201211095101816.png","hash":"ab9071ebe82c1cb6b352e96b946573c234812f1a","modified":1627026475975},{"_id":"public/2021/07/23/lock01/read_writer_Lock1.png","hash":"c313df303034ea20d7755e1c852508078989d8fb","modified":1627026475975},{"_id":"public/2021/07/23/nginx/image-20201210100736952.png","hash":"1212b42387d66bd9b65c94512385a4c182c5679f","modified":1627026475975},{"_id":"public/2021/07/23/nginx/image-20201210103251475.png","hash":"bcc1327d5b4046748d82e10628040e1bf09c91bc","modified":1627026475975},{"_id":"public/2021/07/23/ElasticSearch/image-20201211095258901.png","hash":"c9b64529bc173cdb220e8ed4dc085914b91f93a4","modified":1627026475975},{"_id":"public/2021/07/23/ElasticSearch/image-20200807093208470.png","hash":"5975509b668fef3322a88c368dfbe3a0cb22c4d5","modified":1627026475975},{"_id":"public/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1627026475975},{"_id":"public/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1627026475975},{"_id":"public/fonts/README.html","hash":"3b9daaf126709e3bbce5926e15d599f1fe877921","modified":1627026475975},{"_id":"public/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1627026475975},{"_id":"public/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1627026475975},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1627026475975},{"_id":"public/images/donate/alipayimg.png","hash":"4b5dcdc366cf96737e582094267b6f177c15bb44","modified":1627026475975},{"_id":"public/2021/07/23/ElasticSearch/image-20200807093309761.png","hash":"d95ac7aaea31cd9322f5f7d8c8a704d76b7e503c","modified":1627026475975},{"_id":"public/images/donate/wechatpayimg.png","hash":"e881a9e141da37ca46258e9d8fada3b51cd11046","modified":1627026475975},{"_id":"public/images/avatar.png","hash":"ebde5ecfd529edecfab55788e99ffcb22df93730","modified":1627026475975},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1627026475975},{"_id":"public/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1627026475975},{"_id":"public/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1627026475975},{"_id":"public/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1627026475975},{"_id":"public/css/style.css","hash":"3b693ce41c2e35ece4773593e94b4c17aeaee02f","modified":1627026475975}],"Category":[],"Data":[{"_id":"gallery","data":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}},{"_id":"links","data":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}],"Page":[{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"_content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n","date":"2021-07-23T07:41:11.701Z","updated":"2021-07-22T06:38:55.268Z","path":"/404.html","layout":"page","_id":"ckrg1jzte0000dw3q1a4m8hip","content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"<%- config.url %>\" homepagename=\"回到我的主页\"></script>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"<%- config.url %>\" homepagename=\"回到我的主页\"></script>\n"},{"title":"书单","layout":"books","comments":0,"sidebar":"none","_content":"","source":"books/index.md","raw":"---\ntitle: 书单\nlayout: books\ncomments: false\nsidebar: none\n---","date":"2021-07-23T02:45:32.458Z","updated":"2021-07-22T06:38:55.269Z","path":"books/index.html","_id":"ckrg1jztj0002dw3q56fndtv6","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"关于","description":"个人简介","layout":"about","comments":0,"sidebar":"custom","_content":"个人详细介绍","source":"about/index.md","raw":"---\ntitle: 关于\ndescription: 个人简介\nlayout: about\ncomments: false\nsidebar: custom\n---\n个人详细介绍","date":"2021-07-23T02:45:32.455Z","updated":"2021-07-22T06:38:55.268Z","path":"about/index.html","_id":"ckrg1jztm0005dw3q0cd0go1n","content":"<p>个人详细介绍</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>个人详细介绍</p>\n"},{"title":"分类","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nlayout: categories\ncomments: false\n---\n","date":"2021-07-23T02:45:32.460Z","updated":"2021-07-22T06:38:55.269Z","path":"categories/index.html","_id":"ckrg1jztn0007dw3qdvqxaz3v","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"友情链接","layout":"links","comments":1,"sidebar":"none","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\nlayout: links\ncomments: true\nsidebar: none\n---","date":"2021-07-23T02:45:32.463Z","updated":"2021-07-22T06:38:55.269Z","path":"links/index.html","_id":"ckrg1jzto0009dw3q740qgbpr","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"Repositories","layout":"repository","comments":0,"sidebar":"none","_content":"","source":"repository/index.md","raw":"---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n","date":"2021-07-23T02:45:32.464Z","updated":"2021-07-22T06:38:55.270Z","path":"repository/index.html","_id":"ckrg1jztp000cdw3q3mae27k6","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"标签","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nlayout: tags\ncomments: false\n---\n","date":"2021-07-23T02:45:32.467Z","updated":"2021-07-22T06:38:55.270Z","path":"tags/index.html","_id":"ckrg1jztq000ddw3q30549e4p","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""}],"Post":[{"title":"ElasticSearch安装","date":"2021-07-23T05:41:24.000Z","comments":0,"_content":"## 1. JDK14安装\n\n1. 下载jdk14：  https://jdk.java.net/14/\n\n2. 将文件存放在linux系统某文件夹内\n\n3. 解压\n\n    ```shell\n     tar -zxvf openjdk-14.0.2_linux-x64_bin.tar.gz\n    ```\n\n4. 配置环境变量\n\n    ```shell\n    vim /etc/profile\n    ##在文件最末尾添加，其中JAVA_HOME是jdk解压后的文件路径\n    JAVA_HOME=/usr/lib/tools/jdk-14.0.2\n    PATH=$JAVA_HOME/bin:$PATH\n    CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar\n    export PATH JAVA_HOME CLASSPATH\n    ```\n\n5. 保存后，更新配置文件\n\n    ```shell\n    source /etc/profile\n    ```\n\n6. 查看JDK是否配置完成\n\n    ```shell\n    java -version\n    ```\n\n   出现下图表示安装成功！\n\n   ![image-20200806170145844](./ElasticSearch/image-20200806170145844.png)\n\n\n\n## 2. ElasticSearch安装\n\n1. 解压tar.gz包\n\n    ```shell\n    tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz\n    ```\n\n2. 添加elasticsearch用户\n\n    ```shell\n    useradd elastic\n    ```\n\n3. 赋予elastic search操作文件夹的权限\n\n    ```shell\n    chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*\n    ```\n\n4. 查看本机的hostname\n\n    ```shell\n    hostname\n    #localhost.localdomain\n    ```\n\n5. 修改elastic search配置\n\n    ```shell\n    cd ./elasticsearch-7.8.0/config\n   vim elasticsearch.yml\n    ```\n\n   **elasticsearch.yml**\n\n    ```yml\n      # ======================== Elasticsearch Configuration =========================\n      #\n      # NOTE: Elasticsearch comes with reasonable defaults for most settings.\n      #       Before you set out to tweak and tune the configuration, make sure you\n      #       understand what are you trying to accomplish and the consequences.\n      #\n      # The primary way of configuring a node is via this file. This template lists\n      # the most important settings you may want to configure for a production cluster.\n      #\n      # Please consult the documentation for further information on configuration options:\n      # https://www.elastic.co/guide/en/elasticsearch/reference/index.html\n      #\n      # ---------------------------------- Cluster -----------------------------------\n      #\n      # Use a descriptive name for your cluster:\n      #集群名称，默认可以不修改，此处 xiaoyuge\n      cluster.name: xiaoyuge\n      # ------------------------------------ Node ------------------------------------\n      #\n      # Use a descriptive name for the node:\n      #节点名称，必须修改 ，默认修改为当前机器名称，若是多实例则需要区分\n      node.name: xiaoyuge-local1\n      #\n      # Add custom attributes to the node:\n      #\n      #node.attr.rack: r1\n      #\n      # ----------------------------------- Paths ------------------------------------\n      #\n      # Path to directory where to store the data (separate multiple locations by comma):\n      ##数据目录与日志目录，默认在当前运行程序下，生产环境需要指定\n      #path.data: /path/to/data\n      #\n      # Path to log files:\n      #\n      #path.logs: /path/to/logs\n      #\n      # ----------------------------------- Memory -----------------------------------\n      #\n      # Lock the memory on startup:\n      #内存交换锁定，此处需要操作系统设置才生效\n      #bootstrap.memory_lock: true\n      #\n      # Make sure that the heap size is set to about half the memory available\n      # on the system and that the owner of the process is allowed to use this\n      # limit.\n      #\n      # Elasticsearch performs poorly when the system is swapping the memory.\n      #\n      # ---------------------------------- Network -----------------------------------\n      #\n      # Set the bind address to a specific IP (IPv4 or IPv6):\n      #IP 地址，默认是 local，仅限本机访问，外网不可访问，设置 0.0.0.0 通用做法\n      network.host: 192.168.135.111\n      #\n      # Set a custom port for HTTP:\n      #访问端口，默认 9200，9300，建议明确指定\n      http.port: 9200\n      transport.port: 9300\n      #\n      # For more information, consult the network module documentation.\n      #\n      # --------------------------------- Discovery ----------------------------------\n      #\n      # Pass an initial list of hosts to perform discovery when this node is started:\n      # The default list of hosts is [\"127.0.0.1\", \"[::1]\"]\n      ## 集群发现配置\n      discovery.seed_hosts: [\"192.168.135.111:9300\"]\n      #\n      # Bootstrap the cluster using an initial set of master-eligible nodes:\n      #\n      cluster.initial_master_nodes: [\"192.168.135.111:9300\"]\n      #\n      # For more information, consult the discovery and cluster formation module documentation.\n      #\n      # ---------------------------------- Gateway -----------------------------------\n      #\n      # Block initial recovery after a full cluster restart until N nodes are started:\n      #\n      #gateway.recover_after_nodes: 3\n      #\n      # For more information, consult the gateway module documentation.\n      #\n      # ---------------------------------- Various -----------------------------------\n      #\n      # Require explicit names when deleting indices:\n      ##防止批量删除索引\n      action.destructive_requires_name: true\n      #设置密码\n      xpack.security.enabled: true\n      xpack.license.self_generated.type: trial\n      xpack.security.transport.ssl.enabled: true\n      http.cors.enabled: true\n      http.cors.allow-origin: \"*\"\n      http.cors.allow-headers: Authorization\n    ```\n\n6. 切换为elastic search用户，然后启动elastic search\n\n    ```shell\n    su elastic\t\t\t#切换用户\n    ./bin/elasticsearch -d      #后台启动\n    ```\n\n7. 设置密码\n\n    ```shell\n      ./bin/elasticsearch-setup-passwords interactive\n\n      #执行设置用户名和密码的命令,这里需要为4个用户分别设置密码，elastic, kibana, logstash_system,beats_system\n      Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.\n      You will be prompted to enter passwords as the process progresses.\n      Please confirm that you would like to continue [y/N]y\n      Enter password for [elastic]:\n      passwords must be at least [6] characters long\n      Try again.\n      Enter password for [elastic]:\n      Reenter password for [elastic]:\n      Passwords do not match.\n      Try again.\n      Enter password for [elastic]:\n      Reenter password for [elastic]:\n      Enter password for [kibana]:\n      Reenter password for [kibana]:\n      Enter password for [logstash_system]:\n      Reenter password for [logstash_system]:\n      Enter password for [beats_system]:\n      Reenter password for [beats_system]:\n      Changed password for user [kibana]\n      Changed password for user [logstash_system]\n      Changed password for user [beats_system]\n      Changed password for user [elastic]\n    ```\n\n\n**常见异常：**\n\n```shell\n    #java.lang.RuntimeException: can not run elasticsearch as root\n    #切换为elastic search用户，不能用root项目启动\n  \n   su elastic\n```\n\n```shell\n   #Exception in thread \"main\" java.nio.file.AccessDeniedException: /usr/lib/tools/elasticsearch-7.8.0/config/elasticsearch.keystore\n   #elastic search用户没有操作该文件夹的权限\n  \n   su root\n   chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*\n   ```\n\n```shell\n    ERROR: [2] bootstrap checks failed\n    [1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]\n    [2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\n   \n    #分配内存不够\n    #1. 修改 /etc/security/limits.conf\n    sudo vi /etc/security/limits.conf\n    #在文件末尾加上\n    * soft nofile 65536\n    * hard nofile 65536\n    * soft nproc 4096\n    * hard nproc 4096\n    #2. 修改 /etc/sysctl.conf\n    sudo vi /etc/sysctl.conf\n    #在文件末尾增加\n    vm.max_map_count=262144\n    #3. 配置重新生效\n    sysctl -p\n```\n  \n**效果如下：**\n\n![image-20200807093208470](./ElasticSearch/image-20200807093208470.png)\n\n## 3. Kibana安装\n\n1. 解压文件\n\n    ```shell\n    tar -zxvf kibana-7.8.0-linux-x86_64.tar.gz\n    ```\n\n2. 修改配置文件\n\n    ```shell\n    vim ./config/kibana.yml\n    ```\n\n   **kibana.yml:**\n\n    ```yml\n      # Kibana is served by a back end server. This setting specifies the port to use.\n      ##访问端口，默认无需修改\n      server.port: 5601\n      \n      # Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.\n      # The default is 'localhost', which usually means remote machines will not be able to connect.\n      # To allow connections from remote users, set this parameter to a non-loopback address.\n      #访问地址 IP，默认本地 ;如果需要外网访问，则配置0.0.0.0\n      server.host: \"0.0.0.0\"\n      \n      # Enables you to specify a path to mount Kibana at if you are running behind a proxy.\n      # Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath\n      # from requests it receives, and to prevent a deprecation warning at startup.\n      # This setting cannot end in a slash.\n      #server.basePath: \"\"\n      \n      # Specifies whether Kibana should rewrite requests that are prefixed with\n      # `server.basePath` or require that they are rewritten by your reverse proxy.\n      # This setting was effectively always `false` before Kibana 6.3 and will\n      # default to `true` starting in Kibana 7.0.\n      #server.rewriteBasePath: false\n      \n      # The maximum payload size in bytes for incoming server requests.\n      #server.maxPayloadBytes: 1048576\n      \n      # The Kibana server's name.  This is used for display purposes.\n      #server.name: \"your-hostname\"\n      \n      # The URLs of the Elasticsearch instances to use for all your queries.\n      # ES 服务指向，集群下配置多个\n      elasticsearch.hosts: [\"http://192.168.135.111:9200\"]\n      \n      # When this setting's value is true Kibana uses the hostname specified in the server.host\n      # setting. When the value of this setting is false, Kibana uses the hostname of the host\n      # that connects to this Kibana instance.\n      #elasticsearch.preserveHost: true\n      \n      # Kibana uses an index in Elasticsearch to store saved searches, visualizations and\n      # dashboards. Kibana creates a new index if the index doesn't already exist.\n      # Kibana 元数据存储索引名字，默认.kibana 无需修改\n      #kibana.index: \".kibana\"\n      \n      # The default application to load.\n      #kibana.defaultAppId: \"home\"\n      \n      # If your Elasticsearch is protected with basic authentication, these settings provide\n      # the username and password that the Kibana server uses to perform maintenance on the Kibana\n    ```\n\n3. 启动\n\n    ```shell\n    # 当前窗口内启动\n    ./bin/kibana# \n   #后台进程启动\n   nohup ./bin/kibana &\n    ```\n\n   **效果如下**\n\n   ![image-20200807093309761](./ElasticSearch/image-20200807093309761.png)\n\n**遇见问题：**\n\n- root启动报错![image-20201211095101816](./ElasticSearch/image-20201211095101816.png)\n\n    ```shell\n    #切换到elastic账户\n    su xiaoyuge\n    ```\n- elastic用户权限不足 **Babel could not write cache to file: /usr/share/kibana/optimize/.babel_register_cache.json**![image-20201211095258901](./ElasticSearch/image-20201211095258901.png)\n\n    ```shell\n    #切换到root用户\n    su root \n    #赋予elastic账户 xiaoyuge操作权限\n    chown -R xiaoyuge /usr/local/kibana-7.7.1-linux-x86_64\n    #切换为elastic账户\n    su xiaoyuge\n    #再次启动即可\n    ```\n\n    ","source":"_posts/ElasticSearch.md","raw":"---\ntitle: ElasticSearch安装\ndate: 2021-07-23 13:41:24\ntags: elasticSearch,kibana\ncomments: false\n---\n## 1. JDK14安装\n\n1. 下载jdk14：  https://jdk.java.net/14/\n\n2. 将文件存放在linux系统某文件夹内\n\n3. 解压\n\n    ```shell\n     tar -zxvf openjdk-14.0.2_linux-x64_bin.tar.gz\n    ```\n\n4. 配置环境变量\n\n    ```shell\n    vim /etc/profile\n    ##在文件最末尾添加，其中JAVA_HOME是jdk解压后的文件路径\n    JAVA_HOME=/usr/lib/tools/jdk-14.0.2\n    PATH=$JAVA_HOME/bin:$PATH\n    CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar\n    export PATH JAVA_HOME CLASSPATH\n    ```\n\n5. 保存后，更新配置文件\n\n    ```shell\n    source /etc/profile\n    ```\n\n6. 查看JDK是否配置完成\n\n    ```shell\n    java -version\n    ```\n\n   出现下图表示安装成功！\n\n   ![image-20200806170145844](./ElasticSearch/image-20200806170145844.png)\n\n\n\n## 2. ElasticSearch安装\n\n1. 解压tar.gz包\n\n    ```shell\n    tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz\n    ```\n\n2. 添加elasticsearch用户\n\n    ```shell\n    useradd elastic\n    ```\n\n3. 赋予elastic search操作文件夹的权限\n\n    ```shell\n    chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*\n    ```\n\n4. 查看本机的hostname\n\n    ```shell\n    hostname\n    #localhost.localdomain\n    ```\n\n5. 修改elastic search配置\n\n    ```shell\n    cd ./elasticsearch-7.8.0/config\n   vim elasticsearch.yml\n    ```\n\n   **elasticsearch.yml**\n\n    ```yml\n      # ======================== Elasticsearch Configuration =========================\n      #\n      # NOTE: Elasticsearch comes with reasonable defaults for most settings.\n      #       Before you set out to tweak and tune the configuration, make sure you\n      #       understand what are you trying to accomplish and the consequences.\n      #\n      # The primary way of configuring a node is via this file. This template lists\n      # the most important settings you may want to configure for a production cluster.\n      #\n      # Please consult the documentation for further information on configuration options:\n      # https://www.elastic.co/guide/en/elasticsearch/reference/index.html\n      #\n      # ---------------------------------- Cluster -----------------------------------\n      #\n      # Use a descriptive name for your cluster:\n      #集群名称，默认可以不修改，此处 xiaoyuge\n      cluster.name: xiaoyuge\n      # ------------------------------------ Node ------------------------------------\n      #\n      # Use a descriptive name for the node:\n      #节点名称，必须修改 ，默认修改为当前机器名称，若是多实例则需要区分\n      node.name: xiaoyuge-local1\n      #\n      # Add custom attributes to the node:\n      #\n      #node.attr.rack: r1\n      #\n      # ----------------------------------- Paths ------------------------------------\n      #\n      # Path to directory where to store the data (separate multiple locations by comma):\n      ##数据目录与日志目录，默认在当前运行程序下，生产环境需要指定\n      #path.data: /path/to/data\n      #\n      # Path to log files:\n      #\n      #path.logs: /path/to/logs\n      #\n      # ----------------------------------- Memory -----------------------------------\n      #\n      # Lock the memory on startup:\n      #内存交换锁定，此处需要操作系统设置才生效\n      #bootstrap.memory_lock: true\n      #\n      # Make sure that the heap size is set to about half the memory available\n      # on the system and that the owner of the process is allowed to use this\n      # limit.\n      #\n      # Elasticsearch performs poorly when the system is swapping the memory.\n      #\n      # ---------------------------------- Network -----------------------------------\n      #\n      # Set the bind address to a specific IP (IPv4 or IPv6):\n      #IP 地址，默认是 local，仅限本机访问，外网不可访问，设置 0.0.0.0 通用做法\n      network.host: 192.168.135.111\n      #\n      # Set a custom port for HTTP:\n      #访问端口，默认 9200，9300，建议明确指定\n      http.port: 9200\n      transport.port: 9300\n      #\n      # For more information, consult the network module documentation.\n      #\n      # --------------------------------- Discovery ----------------------------------\n      #\n      # Pass an initial list of hosts to perform discovery when this node is started:\n      # The default list of hosts is [\"127.0.0.1\", \"[::1]\"]\n      ## 集群发现配置\n      discovery.seed_hosts: [\"192.168.135.111:9300\"]\n      #\n      # Bootstrap the cluster using an initial set of master-eligible nodes:\n      #\n      cluster.initial_master_nodes: [\"192.168.135.111:9300\"]\n      #\n      # For more information, consult the discovery and cluster formation module documentation.\n      #\n      # ---------------------------------- Gateway -----------------------------------\n      #\n      # Block initial recovery after a full cluster restart until N nodes are started:\n      #\n      #gateway.recover_after_nodes: 3\n      #\n      # For more information, consult the gateway module documentation.\n      #\n      # ---------------------------------- Various -----------------------------------\n      #\n      # Require explicit names when deleting indices:\n      ##防止批量删除索引\n      action.destructive_requires_name: true\n      #设置密码\n      xpack.security.enabled: true\n      xpack.license.self_generated.type: trial\n      xpack.security.transport.ssl.enabled: true\n      http.cors.enabled: true\n      http.cors.allow-origin: \"*\"\n      http.cors.allow-headers: Authorization\n    ```\n\n6. 切换为elastic search用户，然后启动elastic search\n\n    ```shell\n    su elastic\t\t\t#切换用户\n    ./bin/elasticsearch -d      #后台启动\n    ```\n\n7. 设置密码\n\n    ```shell\n      ./bin/elasticsearch-setup-passwords interactive\n\n      #执行设置用户名和密码的命令,这里需要为4个用户分别设置密码，elastic, kibana, logstash_system,beats_system\n      Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.\n      You will be prompted to enter passwords as the process progresses.\n      Please confirm that you would like to continue [y/N]y\n      Enter password for [elastic]:\n      passwords must be at least [6] characters long\n      Try again.\n      Enter password for [elastic]:\n      Reenter password for [elastic]:\n      Passwords do not match.\n      Try again.\n      Enter password for [elastic]:\n      Reenter password for [elastic]:\n      Enter password for [kibana]:\n      Reenter password for [kibana]:\n      Enter password for [logstash_system]:\n      Reenter password for [logstash_system]:\n      Enter password for [beats_system]:\n      Reenter password for [beats_system]:\n      Changed password for user [kibana]\n      Changed password for user [logstash_system]\n      Changed password for user [beats_system]\n      Changed password for user [elastic]\n    ```\n\n\n**常见异常：**\n\n```shell\n    #java.lang.RuntimeException: can not run elasticsearch as root\n    #切换为elastic search用户，不能用root项目启动\n  \n   su elastic\n```\n\n```shell\n   #Exception in thread \"main\" java.nio.file.AccessDeniedException: /usr/lib/tools/elasticsearch-7.8.0/config/elasticsearch.keystore\n   #elastic search用户没有操作该文件夹的权限\n  \n   su root\n   chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*\n   ```\n\n```shell\n    ERROR: [2] bootstrap checks failed\n    [1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]\n    [2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\n   \n    #分配内存不够\n    #1. 修改 /etc/security/limits.conf\n    sudo vi /etc/security/limits.conf\n    #在文件末尾加上\n    * soft nofile 65536\n    * hard nofile 65536\n    * soft nproc 4096\n    * hard nproc 4096\n    #2. 修改 /etc/sysctl.conf\n    sudo vi /etc/sysctl.conf\n    #在文件末尾增加\n    vm.max_map_count=262144\n    #3. 配置重新生效\n    sysctl -p\n```\n  \n**效果如下：**\n\n![image-20200807093208470](./ElasticSearch/image-20200807093208470.png)\n\n## 3. Kibana安装\n\n1. 解压文件\n\n    ```shell\n    tar -zxvf kibana-7.8.0-linux-x86_64.tar.gz\n    ```\n\n2. 修改配置文件\n\n    ```shell\n    vim ./config/kibana.yml\n    ```\n\n   **kibana.yml:**\n\n    ```yml\n      # Kibana is served by a back end server. This setting specifies the port to use.\n      ##访问端口，默认无需修改\n      server.port: 5601\n      \n      # Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.\n      # The default is 'localhost', which usually means remote machines will not be able to connect.\n      # To allow connections from remote users, set this parameter to a non-loopback address.\n      #访问地址 IP，默认本地 ;如果需要外网访问，则配置0.0.0.0\n      server.host: \"0.0.0.0\"\n      \n      # Enables you to specify a path to mount Kibana at if you are running behind a proxy.\n      # Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath\n      # from requests it receives, and to prevent a deprecation warning at startup.\n      # This setting cannot end in a slash.\n      #server.basePath: \"\"\n      \n      # Specifies whether Kibana should rewrite requests that are prefixed with\n      # `server.basePath` or require that they are rewritten by your reverse proxy.\n      # This setting was effectively always `false` before Kibana 6.3 and will\n      # default to `true` starting in Kibana 7.0.\n      #server.rewriteBasePath: false\n      \n      # The maximum payload size in bytes for incoming server requests.\n      #server.maxPayloadBytes: 1048576\n      \n      # The Kibana server's name.  This is used for display purposes.\n      #server.name: \"your-hostname\"\n      \n      # The URLs of the Elasticsearch instances to use for all your queries.\n      # ES 服务指向，集群下配置多个\n      elasticsearch.hosts: [\"http://192.168.135.111:9200\"]\n      \n      # When this setting's value is true Kibana uses the hostname specified in the server.host\n      # setting. When the value of this setting is false, Kibana uses the hostname of the host\n      # that connects to this Kibana instance.\n      #elasticsearch.preserveHost: true\n      \n      # Kibana uses an index in Elasticsearch to store saved searches, visualizations and\n      # dashboards. Kibana creates a new index if the index doesn't already exist.\n      # Kibana 元数据存储索引名字，默认.kibana 无需修改\n      #kibana.index: \".kibana\"\n      \n      # The default application to load.\n      #kibana.defaultAppId: \"home\"\n      \n      # If your Elasticsearch is protected with basic authentication, these settings provide\n      # the username and password that the Kibana server uses to perform maintenance on the Kibana\n    ```\n\n3. 启动\n\n    ```shell\n    # 当前窗口内启动\n    ./bin/kibana# \n   #后台进程启动\n   nohup ./bin/kibana &\n    ```\n\n   **效果如下**\n\n   ![image-20200807093309761](./ElasticSearch/image-20200807093309761.png)\n\n**遇见问题：**\n\n- root启动报错![image-20201211095101816](./ElasticSearch/image-20201211095101816.png)\n\n    ```shell\n    #切换到elastic账户\n    su xiaoyuge\n    ```\n- elastic用户权限不足 **Babel could not write cache to file: /usr/share/kibana/optimize/.babel_register_cache.json**![image-20201211095258901](./ElasticSearch/image-20201211095258901.png)\n\n    ```shell\n    #切换到root用户\n    su root \n    #赋予elastic账户 xiaoyuge操作权限\n    chown -R xiaoyuge /usr/local/kibana-7.7.1-linux-x86_64\n    #切换为elastic账户\n    su xiaoyuge\n    #再次启动即可\n    ```\n\n    ","slug":"ElasticSearch","published":1,"updated":"2021-07-23T07:18:16.836Z","layout":"post","photos":[],"link":"","_id":"ckrg1jztg0001dw3q620shtph","content":"<h2 id=\"1-JDK14安装\"><a href=\"#1-JDK14安装\" class=\"headerlink\" title=\"1. JDK14安装\"></a>1. JDK14安装</h2><ol>\n<li><p>下载jdk14：  <a href=\"https://jdk.java.net/14/\">https://jdk.java.net/14/</a></p>\n</li>\n<li><p>将文件存放在linux系统某文件夹内</p>\n</li>\n<li><p>解压</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf openjdk-14.0.2_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li><p>配置环境变量</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#在文件最末尾添加，其中JAVA_HOME是jdk解压后的文件路径</span></span></span><br><span class=\"line\">JAVA_HOME=/usr/lib/tools/jdk-14.0.2</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure></li>\n<li><p>保存后，更新配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></li>\n<li><p>查看JDK是否配置完成</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<p>出现下图表示安装成功！</p>\n<p><img src=\"/2021/07/23/ElasticSearch/image-20200806170145844.png\" alt=\"image-20200806170145844\"></p>\n</li>\n</ol>\n<h2 id=\"2-ElasticSearch安装\"><a href=\"#2-ElasticSearch安装\" class=\"headerlink\" title=\"2. ElasticSearch安装\"></a>2. ElasticSearch安装</h2><ol>\n<li><p>解压tar.gz包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li><p>添加elasticsearch用户</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd elastic</span><br></pre></td></tr></table></figure></li>\n<li><p>赋予elastic search操作文件夹的权限</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure></li>\n<li><p>查看本机的hostname</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostname</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">localhost.localdomain</span></span><br></pre></td></tr></table></figure></li>\n<li><p>修改elastic search配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> cd ./elasticsearch-7.8.0/config</span><br><span class=\"line\">vim elasticsearch.yml</span><br></pre></td></tr></table></figure>\n\n<p><strong>elasticsearch.yml</strong></p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ======================== Elasticsearch Configuration =========================</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Elasticsearch comes with reasonable defaults for most settings.</span></span><br><span class=\"line\"><span class=\"comment\">#       Before you set out to tweak and tune the configuration, make sure you</span></span><br><span class=\"line\"><span class=\"comment\">#       understand what are you trying to accomplish and the consequences.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The primary way of configuring a node is via this file. This template lists</span></span><br><span class=\"line\"><span class=\"comment\"># the most important settings you may want to configure for a production cluster.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Please consult the documentation for further information on configuration options:</span></span><br><span class=\"line\"><span class=\"comment\"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Cluster -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Use a descriptive name for your cluster:</span></span><br><span class=\"line\"><span class=\"comment\">#集群名称，默认可以不修改，此处 xiaoyuge</span></span><br><span class=\"line\"><span class=\"attr\">cluster.name:</span> <span class=\"string\">xiaoyuge</span></span><br><span class=\"line\"><span class=\"comment\"># ------------------------------------ Node ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Use a descriptive name for the node:</span></span><br><span class=\"line\"><span class=\"comment\">#节点名称，必须修改 ，默认修改为当前机器名称，若是多实例则需要区分</span></span><br><span class=\"line\"><span class=\"attr\">node.name:</span> <span class=\"string\">xiaoyuge-local1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Add custom attributes to the node:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#node.attr.rack: r1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------------- Paths ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Path to directory where to store the data (separate multiple locations by comma):</span></span><br><span class=\"line\"><span class=\"comment\">##数据目录与日志目录，默认在当前运行程序下，生产环境需要指定</span></span><br><span class=\"line\"><span class=\"comment\">#path.data: /path/to/data</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Path to log files:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#path.logs: /path/to/logs</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------------- Memory -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Lock the memory on startup:</span></span><br><span class=\"line\"><span class=\"comment\">#内存交换锁定，此处需要操作系统设置才生效</span></span><br><span class=\"line\"><span class=\"comment\">#bootstrap.memory_lock: true</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure that the heap size is set to about half the memory available</span></span><br><span class=\"line\"><span class=\"comment\"># on the system and that the owner of the process is allowed to use this</span></span><br><span class=\"line\"><span class=\"comment\"># limit.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Elasticsearch performs poorly when the system is swapping the memory.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Network -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set the bind address to a specific IP (IPv4 or IPv6):</span></span><br><span class=\"line\"><span class=\"comment\">#IP 地址，默认是 local，仅限本机访问，外网不可访问，设置 0.0.0.0 通用做法</span></span><br><span class=\"line\"><span class=\"attr\">network.host:</span> <span class=\"number\">192.168</span><span class=\"number\">.135</span><span class=\"number\">.111</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set a custom port for HTTP:</span></span><br><span class=\"line\"><span class=\"comment\">#访问端口，默认 9200，9300，建议明确指定</span></span><br><span class=\"line\"><span class=\"attr\">http.port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"><span class=\"attr\">transport.port:</span> <span class=\"number\">9300</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the network module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># --------------------------------- Discovery ----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Pass an initial list of hosts to perform discovery when this node is started:</span></span><br><span class=\"line\"><span class=\"comment\"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">## 集群发现配置</span></span><br><span class=\"line\"><span class=\"attr\">discovery.seed_hosts:</span> [<span class=\"string\">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Bootstrap the cluster using an initial set of master-eligible nodes:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">cluster.initial_master_nodes:</span> [<span class=\"string\">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the discovery and cluster formation module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Gateway -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Block initial recovery after a full cluster restart until N nodes are started:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#gateway.recover_after_nodes: 3</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the gateway module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Various -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Require explicit names when deleting indices:</span></span><br><span class=\"line\"><span class=\"comment\">##防止批量删除索引</span></span><br><span class=\"line\"><span class=\"attr\">action.destructive_requires_name:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">#设置密码</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.license.self_generated.type:</span> <span class=\"string\">trial</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-origin:</span> <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-headers:</span> <span class=\"string\">Authorization</span></span><br></pre></td></tr></table></figure></li>\n<li><p>切换为elastic search用户，然后启动elastic search</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su elastic\t\t\t#切换用户</span><br><span class=\"line\">./bin/elasticsearch -d      #后台启动</span><br></pre></td></tr></table></figure></li>\n<li><p>设置密码</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/elasticsearch-setup-passwords interactive</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">执行设置用户名和密码的命令,这里需要为4个用户分别设置密码，elastic, kibana, logstash_system,beats_system</span></span><br><span class=\"line\">Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.</span><br><span class=\"line\">You will be prompted to enter passwords as the process progresses.</span><br><span class=\"line\">Please confirm that you would like to continue [y/N]y</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">passwords must be at least [6] characters long</span><br><span class=\"line\">Try again.</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">Reenter password for [elastic]:</span><br><span class=\"line\">Passwords do not match.</span><br><span class=\"line\">Try again.</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">Reenter password for [elastic]:</span><br><span class=\"line\">Enter password for [kibana]:</span><br><span class=\"line\">Reenter password for [kibana]:</span><br><span class=\"line\">Enter password for [logstash_system]:</span><br><span class=\"line\">Reenter password for [logstash_system]:</span><br><span class=\"line\">Enter password for [beats_system]:</span><br><span class=\"line\">Reenter password for [beats_system]:</span><br><span class=\"line\">Changed password for user [kibana]</span><br><span class=\"line\">Changed password for user [logstash_system]</span><br><span class=\"line\">Changed password for user [beats_system]</span><br><span class=\"line\">Changed password for user [elastic]</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>常见异常：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">java.lang.RuntimeException: can not run elasticsearch as root</span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">切换为elastic search用户，不能用root项目启动</span></span><br><span class=\"line\">  </span><br><span class=\"line\">su elastic</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;main&quot;</span> java.nio.file.AccessDeniedException: /usr/lib/tools/elasticsearch-7.8.0/config/elasticsearch.keystore</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">elastic search用户没有操作该文件夹的权限</span></span><br><span class=\"line\">  </span><br><span class=\"line\">su root</span><br><span class=\"line\">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: [2] bootstrap checks failed</span><br><span class=\"line\">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</span><br><span class=\"line\">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">分配内存不够</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1. 修改 /etc/security/limits.conf</span></span><br><span class=\"line\">sudo vi /etc/security/limits.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在文件末尾加上</span></span><br><span class=\"line\">* soft nofile 65536</span><br><span class=\"line\">* hard nofile 65536</span><br><span class=\"line\">* soft nproc 4096</span><br><span class=\"line\">* hard nproc 4096</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2. 修改 /etc/sysctl.conf</span></span><br><span class=\"line\">sudo vi /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在文件末尾增加</span></span><br><span class=\"line\">vm.max_map_count=262144</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3. 配置重新生效</span></span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n<p><strong>效果如下：</strong></p>\n<p><img src=\"/2021/07/23/ElasticSearch/image-20200807093208470.png\" alt=\"image-20200807093208470\"></p>\n<h2 id=\"3-Kibana安装\"><a href=\"#3-Kibana安装\" class=\"headerlink\" title=\"3. Kibana安装\"></a>3. Kibana安装</h2><ol>\n<li><p>解压文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf kibana-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li><p>修改配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ./config/kibana.yml</span><br></pre></td></tr></table></figure>\n\n<p><strong>kibana.yml:</strong></p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Kibana is served by a back end server. This setting specifies the port to use.</span></span><br><span class=\"line\"><span class=\"comment\">##访问端口，默认无需修改</span></span><br><span class=\"line\"><span class=\"attr\">server.port:</span> <span class=\"number\">5601</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span></span><br><span class=\"line\"><span class=\"comment\"># The default is &#x27;localhost&#x27;, which usually means remote machines will not be able to connect.</span></span><br><span class=\"line\"><span class=\"comment\"># To allow connections from remote users, set this parameter to a non-loopback address.</span></span><br><span class=\"line\"><span class=\"comment\">#访问地址 IP，默认本地 ;如果需要外网访问，则配置0.0.0.0</span></span><br><span class=\"line\"><span class=\"attr\">server.host:</span> <span class=\"string\">&quot;0.0.0.0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enables you to specify a path to mount Kibana at if you are running behind a proxy.</span></span><br><span class=\"line\"><span class=\"comment\"># Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath</span></span><br><span class=\"line\"><span class=\"comment\"># from requests it receives, and to prevent a deprecation warning at startup.</span></span><br><span class=\"line\"><span class=\"comment\"># This setting cannot end in a slash.</span></span><br><span class=\"line\"><span class=\"comment\">#server.basePath: &quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Specifies whether Kibana should rewrite requests that are prefixed with</span></span><br><span class=\"line\"><span class=\"comment\"># `server.basePath` or require that they are rewritten by your reverse proxy.</span></span><br><span class=\"line\"><span class=\"comment\"># This setting was effectively always `false` before Kibana 6.3 and will</span></span><br><span class=\"line\"><span class=\"comment\"># default to `true` starting in Kibana 7.0.</span></span><br><span class=\"line\"><span class=\"comment\">#server.rewriteBasePath: false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The maximum payload size in bytes for incoming server requests.</span></span><br><span class=\"line\"><span class=\"comment\">#server.maxPayloadBytes: 1048576</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Kibana server&#x27;s name.  This is used for display purposes.</span></span><br><span class=\"line\"><span class=\"comment\">#server.name: &quot;your-hostname&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The URLs of the Elasticsearch instances to use for all your queries.</span></span><br><span class=\"line\"><span class=\"comment\"># ES 服务指向，集群下配置多个</span></span><br><span class=\"line\"><span class=\"attr\">elasticsearch.hosts:</span> [<span class=\"string\">&quot;http://192.168.135.111:9200&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># When this setting&#x27;s value is true Kibana uses the hostname specified in the server.host</span></span><br><span class=\"line\"><span class=\"comment\"># setting. When the value of this setting is false, Kibana uses the hostname of the host</span></span><br><span class=\"line\"><span class=\"comment\"># that connects to this Kibana instance.</span></span><br><span class=\"line\"><span class=\"comment\">#elasticsearch.preserveHost: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Kibana uses an index in Elasticsearch to store saved searches, visualizations and</span></span><br><span class=\"line\"><span class=\"comment\"># dashboards. Kibana creates a new index if the index doesn&#x27;t already exist.</span></span><br><span class=\"line\"><span class=\"comment\"># Kibana 元数据存储索引名字，默认.kibana 无需修改</span></span><br><span class=\"line\"><span class=\"comment\">#kibana.index: &quot;.kibana&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The default application to load.</span></span><br><span class=\"line\"><span class=\"comment\">#kibana.defaultAppId: &quot;home&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If your Elasticsearch is protected with basic authentication, these settings provide</span></span><br><span class=\"line\"><span class=\"comment\"># the username and password that the Kibana server uses to perform maintenance on the Kibana</span></span><br></pre></td></tr></table></figure></li>\n<li><p>启动</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 当前窗口内启动</span></span><br><span class=\"line\"> ./bin/kibana# </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">后台进程启动</span></span><br><span class=\"line\">nohup ./bin/kibana &amp;</span><br></pre></td></tr></table></figure>\n\n<p><strong>效果如下</strong></p>\n<p><img src=\"/2021/07/23/ElasticSearch/image-20200807093309761.png\" alt=\"image-20200807093309761\"></p>\n</li>\n</ol>\n<p><strong>遇见问题：</strong></p>\n<ul>\n<li><p>root启动报错<img src=\"/2021/07/23/ElasticSearch/image-20201211095101816.png\" alt=\"image-20201211095101816\"></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换到elastic账户</span></span><br><span class=\"line\">su xiaoyuge</span><br></pre></td></tr></table></figure></li>\n<li><p>elastic用户权限不足 <strong>Babel could not write cache to file: /usr/share/kibana/optimize/.babel_register_cache.json</strong><img src=\"/2021/07/23/ElasticSearch/image-20201211095258901.png\" alt=\"image-20201211095258901\"></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换到root用户</span></span><br><span class=\"line\">su root </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">赋予elastic账户 xiaoyuge操作权限</span></span><br><span class=\"line\">chown -R xiaoyuge /usr/local/kibana-7.7.1-linux-x86_64</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换为elastic账户</span></span><br><span class=\"line\">su xiaoyuge</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再次启动即可</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1-JDK14安装\"><a href=\"#1-JDK14安装\" class=\"headerlink\" title=\"1. JDK14安装\"></a>1. JDK14安装</h2><ol>\n<li><p>下载jdk14：  <a href=\"https://jdk.java.net/14/\">https://jdk.java.net/14/</a></p>\n</li>\n<li><p>将文件存放在linux系统某文件夹内</p>\n</li>\n<li><p>解压</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf openjdk-14.0.2_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li><p>配置环境变量</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#在文件最末尾添加，其中JAVA_HOME是jdk解压后的文件路径</span></span></span><br><span class=\"line\">JAVA_HOME=/usr/lib/tools/jdk-14.0.2</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure></li>\n<li><p>保存后，更新配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></li>\n<li><p>查看JDK是否配置完成</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<p>出现下图表示安装成功！</p>\n<p><img src=\"/2021/07/23/ElasticSearch/image-20200806170145844.png\" alt=\"image-20200806170145844\"></p>\n</li>\n</ol>\n<h2 id=\"2-ElasticSearch安装\"><a href=\"#2-ElasticSearch安装\" class=\"headerlink\" title=\"2. ElasticSearch安装\"></a>2. ElasticSearch安装</h2><ol>\n<li><p>解压tar.gz包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li><p>添加elasticsearch用户</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd elastic</span><br></pre></td></tr></table></figure></li>\n<li><p>赋予elastic search操作文件夹的权限</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure></li>\n<li><p>查看本机的hostname</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostname</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">localhost.localdomain</span></span><br></pre></td></tr></table></figure></li>\n<li><p>修改elastic search配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> cd ./elasticsearch-7.8.0/config</span><br><span class=\"line\">vim elasticsearch.yml</span><br></pre></td></tr></table></figure>\n\n<p><strong>elasticsearch.yml</strong></p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ======================== Elasticsearch Configuration =========================</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Elasticsearch comes with reasonable defaults for most settings.</span></span><br><span class=\"line\"><span class=\"comment\">#       Before you set out to tweak and tune the configuration, make sure you</span></span><br><span class=\"line\"><span class=\"comment\">#       understand what are you trying to accomplish and the consequences.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The primary way of configuring a node is via this file. This template lists</span></span><br><span class=\"line\"><span class=\"comment\"># the most important settings you may want to configure for a production cluster.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Please consult the documentation for further information on configuration options:</span></span><br><span class=\"line\"><span class=\"comment\"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Cluster -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Use a descriptive name for your cluster:</span></span><br><span class=\"line\"><span class=\"comment\">#集群名称，默认可以不修改，此处 xiaoyuge</span></span><br><span class=\"line\"><span class=\"attr\">cluster.name:</span> <span class=\"string\">xiaoyuge</span></span><br><span class=\"line\"><span class=\"comment\"># ------------------------------------ Node ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Use a descriptive name for the node:</span></span><br><span class=\"line\"><span class=\"comment\">#节点名称，必须修改 ，默认修改为当前机器名称，若是多实例则需要区分</span></span><br><span class=\"line\"><span class=\"attr\">node.name:</span> <span class=\"string\">xiaoyuge-local1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Add custom attributes to the node:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#node.attr.rack: r1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------------- Paths ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Path to directory where to store the data (separate multiple locations by comma):</span></span><br><span class=\"line\"><span class=\"comment\">##数据目录与日志目录，默认在当前运行程序下，生产环境需要指定</span></span><br><span class=\"line\"><span class=\"comment\">#path.data: /path/to/data</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Path to log files:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#path.logs: /path/to/logs</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------------- Memory -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Lock the memory on startup:</span></span><br><span class=\"line\"><span class=\"comment\">#内存交换锁定，此处需要操作系统设置才生效</span></span><br><span class=\"line\"><span class=\"comment\">#bootstrap.memory_lock: true</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure that the heap size is set to about half the memory available</span></span><br><span class=\"line\"><span class=\"comment\"># on the system and that the owner of the process is allowed to use this</span></span><br><span class=\"line\"><span class=\"comment\"># limit.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Elasticsearch performs poorly when the system is swapping the memory.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Network -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set the bind address to a specific IP (IPv4 or IPv6):</span></span><br><span class=\"line\"><span class=\"comment\">#IP 地址，默认是 local，仅限本机访问，外网不可访问，设置 0.0.0.0 通用做法</span></span><br><span class=\"line\"><span class=\"attr\">network.host:</span> <span class=\"number\">192.168</span><span class=\"number\">.135</span><span class=\"number\">.111</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set a custom port for HTTP:</span></span><br><span class=\"line\"><span class=\"comment\">#访问端口，默认 9200，9300，建议明确指定</span></span><br><span class=\"line\"><span class=\"attr\">http.port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"><span class=\"attr\">transport.port:</span> <span class=\"number\">9300</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the network module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># --------------------------------- Discovery ----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Pass an initial list of hosts to perform discovery when this node is started:</span></span><br><span class=\"line\"><span class=\"comment\"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">## 集群发现配置</span></span><br><span class=\"line\"><span class=\"attr\">discovery.seed_hosts:</span> [<span class=\"string\">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Bootstrap the cluster using an initial set of master-eligible nodes:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">cluster.initial_master_nodes:</span> [<span class=\"string\">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the discovery and cluster formation module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Gateway -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Block initial recovery after a full cluster restart until N nodes are started:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#gateway.recover_after_nodes: 3</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the gateway module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Various -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Require explicit names when deleting indices:</span></span><br><span class=\"line\"><span class=\"comment\">##防止批量删除索引</span></span><br><span class=\"line\"><span class=\"attr\">action.destructive_requires_name:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">#设置密码</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.license.self_generated.type:</span> <span class=\"string\">trial</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-origin:</span> <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-headers:</span> <span class=\"string\">Authorization</span></span><br></pre></td></tr></table></figure></li>\n<li><p>切换为elastic search用户，然后启动elastic search</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su elastic\t\t\t#切换用户</span><br><span class=\"line\">./bin/elasticsearch -d      #后台启动</span><br></pre></td></tr></table></figure></li>\n<li><p>设置密码</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/elasticsearch-setup-passwords interactive</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">执行设置用户名和密码的命令,这里需要为4个用户分别设置密码，elastic, kibana, logstash_system,beats_system</span></span><br><span class=\"line\">Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.</span><br><span class=\"line\">You will be prompted to enter passwords as the process progresses.</span><br><span class=\"line\">Please confirm that you would like to continue [y/N]y</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">passwords must be at least [6] characters long</span><br><span class=\"line\">Try again.</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">Reenter password for [elastic]:</span><br><span class=\"line\">Passwords do not match.</span><br><span class=\"line\">Try again.</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">Reenter password for [elastic]:</span><br><span class=\"line\">Enter password for [kibana]:</span><br><span class=\"line\">Reenter password for [kibana]:</span><br><span class=\"line\">Enter password for [logstash_system]:</span><br><span class=\"line\">Reenter password for [logstash_system]:</span><br><span class=\"line\">Enter password for [beats_system]:</span><br><span class=\"line\">Reenter password for [beats_system]:</span><br><span class=\"line\">Changed password for user [kibana]</span><br><span class=\"line\">Changed password for user [logstash_system]</span><br><span class=\"line\">Changed password for user [beats_system]</span><br><span class=\"line\">Changed password for user [elastic]</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>常见异常：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">java.lang.RuntimeException: can not run elasticsearch as root</span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">切换为elastic search用户，不能用root项目启动</span></span><br><span class=\"line\">  </span><br><span class=\"line\">su elastic</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;main&quot;</span> java.nio.file.AccessDeniedException: /usr/lib/tools/elasticsearch-7.8.0/config/elasticsearch.keystore</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">elastic search用户没有操作该文件夹的权限</span></span><br><span class=\"line\">  </span><br><span class=\"line\">su root</span><br><span class=\"line\">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: [2] bootstrap checks failed</span><br><span class=\"line\">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</span><br><span class=\"line\">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">分配内存不够</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1. 修改 /etc/security/limits.conf</span></span><br><span class=\"line\">sudo vi /etc/security/limits.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在文件末尾加上</span></span><br><span class=\"line\">* soft nofile 65536</span><br><span class=\"line\">* hard nofile 65536</span><br><span class=\"line\">* soft nproc 4096</span><br><span class=\"line\">* hard nproc 4096</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2. 修改 /etc/sysctl.conf</span></span><br><span class=\"line\">sudo vi /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在文件末尾增加</span></span><br><span class=\"line\">vm.max_map_count=262144</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3. 配置重新生效</span></span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n<p><strong>效果如下：</strong></p>\n<p><img src=\"/2021/07/23/ElasticSearch/image-20200807093208470.png\" alt=\"image-20200807093208470\"></p>\n<h2 id=\"3-Kibana安装\"><a href=\"#3-Kibana安装\" class=\"headerlink\" title=\"3. Kibana安装\"></a>3. Kibana安装</h2><ol>\n<li><p>解压文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf kibana-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li><p>修改配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ./config/kibana.yml</span><br></pre></td></tr></table></figure>\n\n<p><strong>kibana.yml:</strong></p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Kibana is served by a back end server. This setting specifies the port to use.</span></span><br><span class=\"line\"><span class=\"comment\">##访问端口，默认无需修改</span></span><br><span class=\"line\"><span class=\"attr\">server.port:</span> <span class=\"number\">5601</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span></span><br><span class=\"line\"><span class=\"comment\"># The default is &#x27;localhost&#x27;, which usually means remote machines will not be able to connect.</span></span><br><span class=\"line\"><span class=\"comment\"># To allow connections from remote users, set this parameter to a non-loopback address.</span></span><br><span class=\"line\"><span class=\"comment\">#访问地址 IP，默认本地 ;如果需要外网访问，则配置0.0.0.0</span></span><br><span class=\"line\"><span class=\"attr\">server.host:</span> <span class=\"string\">&quot;0.0.0.0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enables you to specify a path to mount Kibana at if you are running behind a proxy.</span></span><br><span class=\"line\"><span class=\"comment\"># Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath</span></span><br><span class=\"line\"><span class=\"comment\"># from requests it receives, and to prevent a deprecation warning at startup.</span></span><br><span class=\"line\"><span class=\"comment\"># This setting cannot end in a slash.</span></span><br><span class=\"line\"><span class=\"comment\">#server.basePath: &quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Specifies whether Kibana should rewrite requests that are prefixed with</span></span><br><span class=\"line\"><span class=\"comment\"># `server.basePath` or require that they are rewritten by your reverse proxy.</span></span><br><span class=\"line\"><span class=\"comment\"># This setting was effectively always `false` before Kibana 6.3 and will</span></span><br><span class=\"line\"><span class=\"comment\"># default to `true` starting in Kibana 7.0.</span></span><br><span class=\"line\"><span class=\"comment\">#server.rewriteBasePath: false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The maximum payload size in bytes for incoming server requests.</span></span><br><span class=\"line\"><span class=\"comment\">#server.maxPayloadBytes: 1048576</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Kibana server&#x27;s name.  This is used for display purposes.</span></span><br><span class=\"line\"><span class=\"comment\">#server.name: &quot;your-hostname&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The URLs of the Elasticsearch instances to use for all your queries.</span></span><br><span class=\"line\"><span class=\"comment\"># ES 服务指向，集群下配置多个</span></span><br><span class=\"line\"><span class=\"attr\">elasticsearch.hosts:</span> [<span class=\"string\">&quot;http://192.168.135.111:9200&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># When this setting&#x27;s value is true Kibana uses the hostname specified in the server.host</span></span><br><span class=\"line\"><span class=\"comment\"># setting. When the value of this setting is false, Kibana uses the hostname of the host</span></span><br><span class=\"line\"><span class=\"comment\"># that connects to this Kibana instance.</span></span><br><span class=\"line\"><span class=\"comment\">#elasticsearch.preserveHost: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Kibana uses an index in Elasticsearch to store saved searches, visualizations and</span></span><br><span class=\"line\"><span class=\"comment\"># dashboards. Kibana creates a new index if the index doesn&#x27;t already exist.</span></span><br><span class=\"line\"><span class=\"comment\"># Kibana 元数据存储索引名字，默认.kibana 无需修改</span></span><br><span class=\"line\"><span class=\"comment\">#kibana.index: &quot;.kibana&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The default application to load.</span></span><br><span class=\"line\"><span class=\"comment\">#kibana.defaultAppId: &quot;home&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If your Elasticsearch is protected with basic authentication, these settings provide</span></span><br><span class=\"line\"><span class=\"comment\"># the username and password that the Kibana server uses to perform maintenance on the Kibana</span></span><br></pre></td></tr></table></figure></li>\n<li><p>启动</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 当前窗口内启动</span></span><br><span class=\"line\"> ./bin/kibana# </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">后台进程启动</span></span><br><span class=\"line\">nohup ./bin/kibana &amp;</span><br></pre></td></tr></table></figure>\n\n<p><strong>效果如下</strong></p>\n<p><img src=\"/2021/07/23/ElasticSearch/image-20200807093309761.png\" alt=\"image-20200807093309761\"></p>\n</li>\n</ol>\n<p><strong>遇见问题：</strong></p>\n<ul>\n<li><p>root启动报错<img src=\"/2021/07/23/ElasticSearch/image-20201211095101816.png\" alt=\"image-20201211095101816\"></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换到elastic账户</span></span><br><span class=\"line\">su xiaoyuge</span><br></pre></td></tr></table></figure></li>\n<li><p>elastic用户权限不足 <strong>Babel could not write cache to file: /usr/share/kibana/optimize/.babel_register_cache.json</strong><img src=\"/2021/07/23/ElasticSearch/image-20201211095258901.png\" alt=\"image-20201211095258901\"></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换到root用户</span></span><br><span class=\"line\">su root </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">赋予elastic账户 xiaoyuge操作权限</span></span><br><span class=\"line\">chown -R xiaoyuge /usr/local/kibana-7.7.1-linux-x86_64</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换为elastic账户</span></span><br><span class=\"line\">su xiaoyuge</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再次启动即可</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n"},{"title":"Java 8学习","date":"2020-04-23T06:04:02.000Z","comments":0,"_content":"\n## 1. Optional\n\n### 1.1. optional构造方式\n\n- Optional.of(T)\n\n    该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。\n\n- Optional.ofNullable(T)\n\n    该方式的入参可以为null，当入参不确定为非null时使用。\n\n- Optional.empty()\n\n    这种方式是返回一个空Optional，等效Optional.ofNullable(null)\n\n### 1.2. 如何正确的使用Optional\n\n- 尽量避免使用的地方\n\n    1. 避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null != obj没有区别，这样用就没什么意义了。\n\n    2. 避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。\n\n    3. 避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。\n\n    4. 避免使用Optional作为方法的参数，原因同3。\n\n- 正确使用方式\n\n    1. 实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse/orElseGet方式：\n\n        ```java\n        //存在则返回\n        User king = new User(1, \"king\");\n        Optional<User> userOpt = Optional.of(king);\n        User user =  userOpt.orElse(null);\n        System.out.println(user.getName());\n        \n        //不存在提供默认值\n        User user2 = null;\n        Optional<User> userOpt2 = Optional.ofNullable(user2);\n        User user3 = userOpt2.orElse(unknown);\n        System.out.println(user3.getName());\n        \n        //通过方法提供值\n        User user4 = userOpt2.orElseGet(() -> new User(0, \"DEFAULT\")); \n        System.out.println(user4.getName())\n            \n         //不建议下面这种使用\n        if(userOpt.isPresent()) {\n            System.out.println(userOpt.get().getName());\n        } else {\n            //。。。\n        }\n        ```\n\n    2. 使用ifPresent()来进行对象操作，存在则操作，否则不操作。\n\n        ```java\n        //实例存在则操作，否则不操作\n        userOpt.ifPresent(u -> System.out.println(u.getName()));\n        userOpt2.ifPresent(u -> System.out.println(u.getName()));\n        ```\n\n    3. 使用map/flatMap来获取关联数据\n\n        ```java\n        //使用map方法获取关联数据\n        System.out.println(userOpt.map(u -> u.getName()).orElse(\"Unknown\"));\n        System.out.println(userOpt2.map(u -> u.getName()).orElse(\"Default\"));\n        //使用flatMap方法获取关联数据\n        List<String> interests = new ArrayList<String>();\n        interests.add(\"a\");interests.add(\"b\");interests.add(\"c\");\n        user.setInterests(interests);\n        List<String> interests2 = Optional.of(user)\n            .flatMap(u -> Optional.ofNullable(u.getInterests()))\n            .orElse(Collections.emptyList());\n        System.out.println(interests2.isEmpty());\n        ```\n\n        \n\n### 1.3.Optional判断第三方接口\n\n使用java8的optional可以减少很多的NPE，再也不用当心别人的接口返回值问题了，也不用满屏的if（a != null）这种判断，下面是使用过程中遇到的问题以及如何使用Optional解决。\n\n#### 1.3.1. 接口返回参数问题\n\n1. 在微服务中使用feign调用其他接口，总担心别人返回的参数是否符合标准\n2. 参数符合标准后，然后再进行数据判断，先判断是否code为200，然后判断数据存不存在，这样冗余的代码就很多\n\n这是我们期望的返回格式\n\n```json\n{\n\t\"code\": \"200\",\n\t\"msg\": \"调用成功!\",\n\t\"data\": []\n}\n```\n\n```java\n//模拟接口调用方法\nMap<String,Object> map = serviceImpl.queryList();\n//即使map为空也能正常返回，配合map直接映射数据值\nreturn Optional.ofNullable(map).map(r-> r.get(\"data\")).orElseGet(ArrayList:: new)\n    \n //JSONObject 判断是否返回成功，如果成功返回200， 不成功返回400   \nJSONObject jsonObject = service.updateDate();\nOptional.ofNullable(jsonObject).map(r->r.getInteger(\"code\")).orElse(400)\n```\n\n#### 1.3.2. 避免判断风暴\n\n对象层层嵌套，为了逻辑严谨必须要进行空判断\n\n```java\n//对于一个对象里面嵌套对象，那么需要层层去判断非空\nSchool school = null;\nif(school != null){\n    Clazz clazz = school.getClazz();\n    if(clazz != null){\n        Student student = clazz.getStudent();\n        if(student != null){\n            String name = student.getName();\n            if(name == null || \"\".equals(name)){\n                name = \"学生的姓名为空\";\n            }\n        }\n    }\n}\n//使用Optional后\n String name = Optional.ofNullable(school)\n                .map(School::getClazz)\n                .map(Clazz::getStudent)\n                .map(Student::getName)\n                .orElse(\"学生的姓名为空\");\n```\n\n## 2. Stream\n\n```java\n//找出某一个字段等于某个值的那一条数据\nJaponicaRiceCheck1 streamCheck = listItemRice.stream()\n.filter(o -> o.getSYS_PARENTID().equals(check.getSYS_ID())).findAny().orElse(null);\n```\n\n","source":"_posts/java8特性.md","raw":"---\ntitle: Java 8学习\ndate: 2020-04-23 14:04:02\ntags: Optional\ncomments: false\n---\n\n## 1. Optional\n\n### 1.1. optional构造方式\n\n- Optional.of(T)\n\n    该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。\n\n- Optional.ofNullable(T)\n\n    该方式的入参可以为null，当入参不确定为非null时使用。\n\n- Optional.empty()\n\n    这种方式是返回一个空Optional，等效Optional.ofNullable(null)\n\n### 1.2. 如何正确的使用Optional\n\n- 尽量避免使用的地方\n\n    1. 避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null != obj没有区别，这样用就没什么意义了。\n\n    2. 避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。\n\n    3. 避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。\n\n    4. 避免使用Optional作为方法的参数，原因同3。\n\n- 正确使用方式\n\n    1. 实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse/orElseGet方式：\n\n        ```java\n        //存在则返回\n        User king = new User(1, \"king\");\n        Optional<User> userOpt = Optional.of(king);\n        User user =  userOpt.orElse(null);\n        System.out.println(user.getName());\n        \n        //不存在提供默认值\n        User user2 = null;\n        Optional<User> userOpt2 = Optional.ofNullable(user2);\n        User user3 = userOpt2.orElse(unknown);\n        System.out.println(user3.getName());\n        \n        //通过方法提供值\n        User user4 = userOpt2.orElseGet(() -> new User(0, \"DEFAULT\")); \n        System.out.println(user4.getName())\n            \n         //不建议下面这种使用\n        if(userOpt.isPresent()) {\n            System.out.println(userOpt.get().getName());\n        } else {\n            //。。。\n        }\n        ```\n\n    2. 使用ifPresent()来进行对象操作，存在则操作，否则不操作。\n\n        ```java\n        //实例存在则操作，否则不操作\n        userOpt.ifPresent(u -> System.out.println(u.getName()));\n        userOpt2.ifPresent(u -> System.out.println(u.getName()));\n        ```\n\n    3. 使用map/flatMap来获取关联数据\n\n        ```java\n        //使用map方法获取关联数据\n        System.out.println(userOpt.map(u -> u.getName()).orElse(\"Unknown\"));\n        System.out.println(userOpt2.map(u -> u.getName()).orElse(\"Default\"));\n        //使用flatMap方法获取关联数据\n        List<String> interests = new ArrayList<String>();\n        interests.add(\"a\");interests.add(\"b\");interests.add(\"c\");\n        user.setInterests(interests);\n        List<String> interests2 = Optional.of(user)\n            .flatMap(u -> Optional.ofNullable(u.getInterests()))\n            .orElse(Collections.emptyList());\n        System.out.println(interests2.isEmpty());\n        ```\n\n        \n\n### 1.3.Optional判断第三方接口\n\n使用java8的optional可以减少很多的NPE，再也不用当心别人的接口返回值问题了，也不用满屏的if（a != null）这种判断，下面是使用过程中遇到的问题以及如何使用Optional解决。\n\n#### 1.3.1. 接口返回参数问题\n\n1. 在微服务中使用feign调用其他接口，总担心别人返回的参数是否符合标准\n2. 参数符合标准后，然后再进行数据判断，先判断是否code为200，然后判断数据存不存在，这样冗余的代码就很多\n\n这是我们期望的返回格式\n\n```json\n{\n\t\"code\": \"200\",\n\t\"msg\": \"调用成功!\",\n\t\"data\": []\n}\n```\n\n```java\n//模拟接口调用方法\nMap<String,Object> map = serviceImpl.queryList();\n//即使map为空也能正常返回，配合map直接映射数据值\nreturn Optional.ofNullable(map).map(r-> r.get(\"data\")).orElseGet(ArrayList:: new)\n    \n //JSONObject 判断是否返回成功，如果成功返回200， 不成功返回400   \nJSONObject jsonObject = service.updateDate();\nOptional.ofNullable(jsonObject).map(r->r.getInteger(\"code\")).orElse(400)\n```\n\n#### 1.3.2. 避免判断风暴\n\n对象层层嵌套，为了逻辑严谨必须要进行空判断\n\n```java\n//对于一个对象里面嵌套对象，那么需要层层去判断非空\nSchool school = null;\nif(school != null){\n    Clazz clazz = school.getClazz();\n    if(clazz != null){\n        Student student = clazz.getStudent();\n        if(student != null){\n            String name = student.getName();\n            if(name == null || \"\".equals(name)){\n                name = \"学生的姓名为空\";\n            }\n        }\n    }\n}\n//使用Optional后\n String name = Optional.ofNullable(school)\n                .map(School::getClazz)\n                .map(Clazz::getStudent)\n                .map(Student::getName)\n                .orElse(\"学生的姓名为空\");\n```\n\n## 2. Stream\n\n```java\n//找出某一个字段等于某个值的那一条数据\nJaponicaRiceCheck1 streamCheck = listItemRice.stream()\n.filter(o -> o.getSYS_PARENTID().equals(check.getSYS_ID())).findAny().orElse(null);\n```\n\n","slug":"java8特性","published":1,"updated":"2021-07-23T07:18:16.842Z","layout":"post","photos":[],"link":"","_id":"ckrg1jztj0003dw3q1tf3gwrh","content":"<h2 id=\"1-Optional\"><a href=\"#1-Optional\" class=\"headerlink\" title=\"1. Optional\"></a>1. Optional</h2><h3 id=\"1-1-optional构造方式\"><a href=\"#1-1-optional构造方式\" class=\"headerlink\" title=\"1.1. optional构造方式\"></a>1.1. optional构造方式</h3><ul>\n<li><p>Optional.of(T)</p>\n<p>  该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。</p>\n</li>\n<li><p>Optional.ofNullable(T)</p>\n<p>  该方式的入参可以为null，当入参不确定为非null时使用。</p>\n</li>\n<li><p>Optional.empty()</p>\n<p>  这种方式是返回一个空Optional，等效Optional.ofNullable(null)</p>\n</li>\n</ul>\n<h3 id=\"1-2-如何正确的使用Optional\"><a href=\"#1-2-如何正确的使用Optional\" class=\"headerlink\" title=\"1.2. 如何正确的使用Optional\"></a>1.2. 如何正确的使用Optional</h3><ul>\n<li><p>尽量避免使用的地方</p>\n<ol>\n<li><p>避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null != obj没有区别，这样用就没什么意义了。</p>\n</li>\n<li><p>避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。</p>\n</li>\n<li><p>避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。</p>\n</li>\n<li><p>避免使用Optional作为方法的参数，原因同3。</p>\n</li>\n</ol>\n</li>\n<li><p>正确使用方式</p>\n<ol>\n<li><p>实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse/orElseGet方式：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//存在则返回</span></span><br><span class=\"line\">User king = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">&quot;king&quot;</span>);</span><br><span class=\"line\">Optional&lt;User&gt; userOpt = Optional.of(king);</span><br><span class=\"line\">User user =  userOpt.orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">System.out.println(user.getName());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不存在提供默认值</span></span><br><span class=\"line\">User user2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">Optional&lt;User&gt; userOpt2 = Optional.ofNullable(user2);</span><br><span class=\"line\">User user3 = userOpt2.orElse(unknown);</span><br><span class=\"line\">System.out.println(user3.getName());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过方法提供值</span></span><br><span class=\"line\">User user4 = userOpt2.orElseGet(() -&gt; <span class=\"keyword\">new</span> User(<span class=\"number\">0</span>, <span class=\"string\">&quot;DEFAULT&quot;</span>)); </span><br><span class=\"line\">System.out.println(user4.getName())</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\">//不建议下面这种使用</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(userOpt.isPresent()) &#123;</span><br><span class=\"line\">    System.out.println(userOpt.get().getName());</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//。。。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用ifPresent()来进行对象操作，存在则操作，否则不操作。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例存在则操作，否则不操作</span></span><br><span class=\"line\">userOpt.ifPresent(u -&gt; System.out.println(u.getName()));</span><br><span class=\"line\">userOpt2.ifPresent(u -&gt; System.out.println(u.getName()));</span><br></pre></td></tr></table></figure></li>\n<li><p>使用map/flatMap来获取关联数据</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用map方法获取关联数据</span></span><br><span class=\"line\">System.out.println(userOpt.map(u -&gt; u.getName()).orElse(<span class=\"string\">&quot;Unknown&quot;</span>));</span><br><span class=\"line\">System.out.println(userOpt2.map(u -&gt; u.getName()).orElse(<span class=\"string\">&quot;Default&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">//使用flatMap方法获取关联数据</span></span><br><span class=\"line\">List&lt;String&gt; interests = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">interests.add(<span class=\"string\">&quot;a&quot;</span>);interests.add(<span class=\"string\">&quot;b&quot;</span>);interests.add(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">user.setInterests(interests);</span><br><span class=\"line\">List&lt;String&gt; interests2 = Optional.of(user)</span><br><span class=\"line\">    .flatMap(u -&gt; Optional.ofNullable(u.getInterests()))</span><br><span class=\"line\">    .orElse(Collections.emptyList());</span><br><span class=\"line\">System.out.println(interests2.isEmpty());</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"1-3-Optional判断第三方接口\"><a href=\"#1-3-Optional判断第三方接口\" class=\"headerlink\" title=\"1.3.Optional判断第三方接口\"></a>1.3.Optional判断第三方接口</h3><p>使用java8的optional可以减少很多的NPE，再也不用当心别人的接口返回值问题了，也不用满屏的if（a != null）这种判断，下面是使用过程中遇到的问题以及如何使用Optional解决。</p>\n<h4 id=\"1-3-1-接口返回参数问题\"><a href=\"#1-3-1-接口返回参数问题\" class=\"headerlink\" title=\"1.3.1. 接口返回参数问题\"></a>1.3.1. 接口返回参数问题</h4><ol>\n<li>在微服务中使用feign调用其他接口，总担心别人返回的参数是否符合标准</li>\n<li>参数符合标准后，然后再进行数据判断，先判断是否code为200，然后判断数据存不存在，这样冗余的代码就很多</li>\n</ol>\n<p>这是我们期望的返回格式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;code&quot;</span>: <span class=\"string\">&quot;200&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;msg&quot;</span>: <span class=\"string\">&quot;调用成功!&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;data&quot;</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟接口调用方法</span></span><br><span class=\"line\">Map&lt;String,Object&gt; map = serviceImpl.queryList();</span><br><span class=\"line\"><span class=\"comment\">//即使map为空也能正常返回，配合map直接映射数据值</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> Optional.ofNullable(map).map(r-&gt; r.get(<span class=\"string\">&quot;data&quot;</span>)).orElseGet(ArrayList:: <span class=\"keyword\">new</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\">//JSONObject 判断是否返回成功，如果成功返回200， 不成功返回400   </span></span><br><span class=\"line\">JSONObject jsonObject = service.updateDate();</span><br><span class=\"line\">Optional.ofNullable(jsonObject).map(r-&gt;r.getInteger(<span class=\"string\">&quot;code&quot;</span>)).orElse(<span class=\"number\">400</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-2-避免判断风暴\"><a href=\"#1-3-2-避免判断风暴\" class=\"headerlink\" title=\"1.3.2. 避免判断风暴\"></a>1.3.2. 避免判断风暴</h4><p>对象层层嵌套，为了逻辑严谨必须要进行空判断</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对于一个对象里面嵌套对象，那么需要层层去判断非空</span></span><br><span class=\"line\">School school = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(school != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    Clazz clazz = school.getClazz();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(clazz != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Student student = clazz.getStudent();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(student != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            String name = student.getName();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(name == <span class=\"keyword\">null</span> || <span class=\"string\">&quot;&quot;</span>.equals(name))&#123;</span><br><span class=\"line\">                name = <span class=\"string\">&quot;学生的姓名为空&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用Optional后</span></span><br><span class=\"line\"> String name = Optional.ofNullable(school)</span><br><span class=\"line\">                .map(School::getClazz)</span><br><span class=\"line\">                .map(Clazz::getStudent)</span><br><span class=\"line\">                .map(Student::getName)</span><br><span class=\"line\">                .orElse(<span class=\"string\">&quot;学生的姓名为空&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Stream\"><a href=\"#2-Stream\" class=\"headerlink\" title=\"2. Stream\"></a>2. Stream</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//找出某一个字段等于某个值的那一条数据</span></span><br><span class=\"line\">JaponicaRiceCheck1 streamCheck = listItemRice.stream()</span><br><span class=\"line\">.filter(o -&gt; o.getSYS_PARENTID().equals(check.getSYS_ID())).findAny().orElse(<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1-Optional\"><a href=\"#1-Optional\" class=\"headerlink\" title=\"1. Optional\"></a>1. Optional</h2><h3 id=\"1-1-optional构造方式\"><a href=\"#1-1-optional构造方式\" class=\"headerlink\" title=\"1.1. optional构造方式\"></a>1.1. optional构造方式</h3><ul>\n<li><p>Optional.of(T)</p>\n<p>  该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。</p>\n</li>\n<li><p>Optional.ofNullable(T)</p>\n<p>  该方式的入参可以为null，当入参不确定为非null时使用。</p>\n</li>\n<li><p>Optional.empty()</p>\n<p>  这种方式是返回一个空Optional，等效Optional.ofNullable(null)</p>\n</li>\n</ul>\n<h3 id=\"1-2-如何正确的使用Optional\"><a href=\"#1-2-如何正确的使用Optional\" class=\"headerlink\" title=\"1.2. 如何正确的使用Optional\"></a>1.2. 如何正确的使用Optional</h3><ul>\n<li><p>尽量避免使用的地方</p>\n<ol>\n<li><p>避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null != obj没有区别，这样用就没什么意义了。</p>\n</li>\n<li><p>避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。</p>\n</li>\n<li><p>避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。</p>\n</li>\n<li><p>避免使用Optional作为方法的参数，原因同3。</p>\n</li>\n</ol>\n</li>\n<li><p>正确使用方式</p>\n<ol>\n<li><p>实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse/orElseGet方式：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//存在则返回</span></span><br><span class=\"line\">User king = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">&quot;king&quot;</span>);</span><br><span class=\"line\">Optional&lt;User&gt; userOpt = Optional.of(king);</span><br><span class=\"line\">User user =  userOpt.orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">System.out.println(user.getName());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不存在提供默认值</span></span><br><span class=\"line\">User user2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">Optional&lt;User&gt; userOpt2 = Optional.ofNullable(user2);</span><br><span class=\"line\">User user3 = userOpt2.orElse(unknown);</span><br><span class=\"line\">System.out.println(user3.getName());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过方法提供值</span></span><br><span class=\"line\">User user4 = userOpt2.orElseGet(() -&gt; <span class=\"keyword\">new</span> User(<span class=\"number\">0</span>, <span class=\"string\">&quot;DEFAULT&quot;</span>)); </span><br><span class=\"line\">System.out.println(user4.getName())</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\">//不建议下面这种使用</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(userOpt.isPresent()) &#123;</span><br><span class=\"line\">    System.out.println(userOpt.get().getName());</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//。。。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用ifPresent()来进行对象操作，存在则操作，否则不操作。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例存在则操作，否则不操作</span></span><br><span class=\"line\">userOpt.ifPresent(u -&gt; System.out.println(u.getName()));</span><br><span class=\"line\">userOpt2.ifPresent(u -&gt; System.out.println(u.getName()));</span><br></pre></td></tr></table></figure></li>\n<li><p>使用map/flatMap来获取关联数据</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用map方法获取关联数据</span></span><br><span class=\"line\">System.out.println(userOpt.map(u -&gt; u.getName()).orElse(<span class=\"string\">&quot;Unknown&quot;</span>));</span><br><span class=\"line\">System.out.println(userOpt2.map(u -&gt; u.getName()).orElse(<span class=\"string\">&quot;Default&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">//使用flatMap方法获取关联数据</span></span><br><span class=\"line\">List&lt;String&gt; interests = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">interests.add(<span class=\"string\">&quot;a&quot;</span>);interests.add(<span class=\"string\">&quot;b&quot;</span>);interests.add(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">user.setInterests(interests);</span><br><span class=\"line\">List&lt;String&gt; interests2 = Optional.of(user)</span><br><span class=\"line\">    .flatMap(u -&gt; Optional.ofNullable(u.getInterests()))</span><br><span class=\"line\">    .orElse(Collections.emptyList());</span><br><span class=\"line\">System.out.println(interests2.isEmpty());</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"1-3-Optional判断第三方接口\"><a href=\"#1-3-Optional判断第三方接口\" class=\"headerlink\" title=\"1.3.Optional判断第三方接口\"></a>1.3.Optional判断第三方接口</h3><p>使用java8的optional可以减少很多的NPE，再也不用当心别人的接口返回值问题了，也不用满屏的if（a != null）这种判断，下面是使用过程中遇到的问题以及如何使用Optional解决。</p>\n<h4 id=\"1-3-1-接口返回参数问题\"><a href=\"#1-3-1-接口返回参数问题\" class=\"headerlink\" title=\"1.3.1. 接口返回参数问题\"></a>1.3.1. 接口返回参数问题</h4><ol>\n<li>在微服务中使用feign调用其他接口，总担心别人返回的参数是否符合标准</li>\n<li>参数符合标准后，然后再进行数据判断，先判断是否code为200，然后判断数据存不存在，这样冗余的代码就很多</li>\n</ol>\n<p>这是我们期望的返回格式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;code&quot;</span>: <span class=\"string\">&quot;200&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;msg&quot;</span>: <span class=\"string\">&quot;调用成功!&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;data&quot;</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟接口调用方法</span></span><br><span class=\"line\">Map&lt;String,Object&gt; map = serviceImpl.queryList();</span><br><span class=\"line\"><span class=\"comment\">//即使map为空也能正常返回，配合map直接映射数据值</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> Optional.ofNullable(map).map(r-&gt; r.get(<span class=\"string\">&quot;data&quot;</span>)).orElseGet(ArrayList:: <span class=\"keyword\">new</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\">//JSONObject 判断是否返回成功，如果成功返回200， 不成功返回400   </span></span><br><span class=\"line\">JSONObject jsonObject = service.updateDate();</span><br><span class=\"line\">Optional.ofNullable(jsonObject).map(r-&gt;r.getInteger(<span class=\"string\">&quot;code&quot;</span>)).orElse(<span class=\"number\">400</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-2-避免判断风暴\"><a href=\"#1-3-2-避免判断风暴\" class=\"headerlink\" title=\"1.3.2. 避免判断风暴\"></a>1.3.2. 避免判断风暴</h4><p>对象层层嵌套，为了逻辑严谨必须要进行空判断</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对于一个对象里面嵌套对象，那么需要层层去判断非空</span></span><br><span class=\"line\">School school = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(school != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    Clazz clazz = school.getClazz();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(clazz != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Student student = clazz.getStudent();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(student != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            String name = student.getName();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(name == <span class=\"keyword\">null</span> || <span class=\"string\">&quot;&quot;</span>.equals(name))&#123;</span><br><span class=\"line\">                name = <span class=\"string\">&quot;学生的姓名为空&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用Optional后</span></span><br><span class=\"line\"> String name = Optional.ofNullable(school)</span><br><span class=\"line\">                .map(School::getClazz)</span><br><span class=\"line\">                .map(Clazz::getStudent)</span><br><span class=\"line\">                .map(Student::getName)</span><br><span class=\"line\">                .orElse(<span class=\"string\">&quot;学生的姓名为空&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Stream\"><a href=\"#2-Stream\" class=\"headerlink\" title=\"2. Stream\"></a>2. Stream</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//找出某一个字段等于某个值的那一条数据</span></span><br><span class=\"line\">JaponicaRiceCheck1 streamCheck = listItemRice.stream()</span><br><span class=\"line\">.filter(o -&gt; o.getSYS_PARENTID().equals(check.getSYS_ID())).findAny().orElse(<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n\n"},{"title":"锁优化","date":"2021-07-23T06:04:02.000Z","comments":0,"_content":" \n\n## 1. 优化思路以及方法\n\n- 减少锁持有时间\n- 减小锁粒度\n- 锁分离\n- 锁粗化\n- 锁消除\n\n### 1.1 减少锁持有时间\n\n```java\npublic synchronized void syncMethod(){\n    othercode1();\n    mutextMethod();\n    othercode2();\n}\n```\n\n像上述代码，在进入方法前就要得到锁，其他线程就要在外面等待。\n\n分析：锁里面的资源在同一时间只允许一个线程执行，我们不仅要减少其他线程等待的时间，也要尽力减少线程在锁里面的执行时间，所以，尽量只有在有线程安全要求的程序代码上加锁。\n\n```java\npublic void syncMethod(){\n    othercode1();\n    synchronized(this){\n        metextMethod();\n    }\n    othercode2();\n}\n```\n\n### 1.2 减小锁粒度\n\n将大对象（这个对象可能会被很多线程访问）拆成小对象，大大增加并行度。\n\n降低锁竞争，那么偏向锁、轻量级锁成功率才会提高。\n\n最最典型的减小锁粒度的案例就是ConcurrentHashMap。在HashMap的基础上进行优化，使用了cas与synchronized来确保安全性，在保证安全性的基础上为了充分利用线程资源，更是巧妙的设计了多线程同扩容的模式。\n\n\n\n### 1.3 锁分离\n\n最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁。这样读读不互斥，读写互斥，写写互斥。既保证了线程安全，又提高了性能。\n\n分析：读写分离这种思想可以延伸到我们其他的设计中，只要操作上互不影响，那锁就可以进行分离，比如：LinkedBlockingQueue\n\n<img src=\"..\\images/read_writer_Lock1.png\" alt=\"read_writer_Lock1\" style=\"zoom: 67%;\" />\n\n从头部获取数据，从尾部放入数据，使用两把锁。\n\n\n\n### 1.4 锁粗化\n\n通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁，只有这样，等待在这个锁上的其他线程才能尽早的获取资源执行任务；但是凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化。\n\n```java\npublic void demoMethod(){\n    synchronized{\n    \t//dow sth.\n\t}\n    //....做其他不需要同步的工作，但能很快执行完毕\n    synchronized{\n        //do sth.\n    }\n}\n```\n\n这种情况，根据锁粗化的思想，应该合并：\n\n```java\npublic void demoMethod(){\n    //整合成一次锁请求,前提时中间哪些不需要同步的工作很快就执行完成\n    synchronized(lock){\n        //do sth.\n        //....做其他不需要同步的工作，但能很快执行完毕\n    }\n}\n```\n\n再举一个极端的例子：\n\n```java\nfor(int i =0; i < circle; i++){\n    synchronized(lock){\n        //.....\n    }\n}\n```\n\n在一个循环内不同得获得锁。虽然JDK内部会对这个代码做些优化，但是还不如直接写成：\n\n```java\nsynchronized(lock){\n    for(int i =0; i < circle; i++){\n    }\n}\n```\n\n当然如果有需求说，这样的循环太久，需要给其他线程不要等待太久，那只能写成上面那种。如果没有这样类似的需求，还是直接写成后者那种比较好。\n**分析**: 锁粗化是JVM默认启动的一种机制，锁粗化针对的是对连续的区域进行分段加锁这种场景，JVM会自发进行优化。但作为开发者而言在满足业务的情况下，应该减少锁的使用。\n\n### 1.5 锁消除\n\n锁消除是在编译器级别的事情。在即时编译器(JIT)时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。也许你会觉得奇怪，既然有些对象不可能被多线程访问，那为什么要加锁呢？写代码时直接不加锁不就好了。\n但是有时，这些锁并不是程序员所写的，有的是JDK实现中就有锁的，比如Vector和StringBuffer这样的类，它们中的很多方法都是有锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。\n\n```java\npublic static void main(String args[]) throws InterrruptedException{\n    long start = System.currentTimeTimeMillis();\n    for(int i = 0;i < 20000; i++){\n        createStringBuffer(\"JVM\",\"asdfasdfasdf\");\n    }\n    long bufferCost = System.currentTimeTimeMillis() - start;\n    System.out.println(\"createStringBuffer:\"+bufferCost+\"ms\");\n}\npublic static String createStringBuffer(String s1, String s2){\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb.toString();\n}\n```\n\n上述代码中的StringBuffer.append是一个同步操作，但是StringBuffer却是一个局部变量，并且方法也并没有把StringBuffer返回，所以不可能会有多线程去访问它。那么此时StringBuffer中的同步操作就是没有意义的。\n开启锁消除是在JVM参数上设置的，当然需要在server模式下：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks\n```\n\n并且要开启逃逸分析。 逃逸分析的作用呢，就是看看变量是否有可能逃出作用域的范围。\n比如上述的StringBuffer，上述代码中craeteStringBuffer的返回是一个String，所以这个局部变量StringBuffer在其他地方都不会被使用。如果将craeteStringBuffer改成\n\n```java\npublic static StringBuffer createStringBuffer(String s1, String s2){\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb;\n}\n```\n\n那么这个 StringBuffer被返回后，是有可能被任何其他地方所使用的（譬如被主函数将返回结果put进map啊等等）。那么JVM的逃逸分析可以分析出，这个局部变量 StringBuffer逃出了它的作用域。\n所以基于逃逸分析，JVM可以判断，如果这个局部变量StringBuffer并没有逃出它的作用域，那么可以确定这个StringBuffer并不会被多线程所访问，那么就可以把这些多余的锁给去掉来提高性能。\n当JVM参数为：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks\n```\n\n输出：\n\n```tex\ncreateStringBuffer: 302ms\n```\n\nJVM参数为：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:-EliminateLocks\n```\n\n输出：\n\n```tex\ncreateStringBuffer: 660ms\n```\n\n显然，锁消除的效果还是很明显的。","source":"_posts/lock01.md","raw":"---\ntitle: 锁优化\ndate: 2021-07-23 14:04:02\ntags: lock\ncomments: false\n--- \n\n## 1. 优化思路以及方法\n\n- 减少锁持有时间\n- 减小锁粒度\n- 锁分离\n- 锁粗化\n- 锁消除\n\n### 1.1 减少锁持有时间\n\n```java\npublic synchronized void syncMethod(){\n    othercode1();\n    mutextMethod();\n    othercode2();\n}\n```\n\n像上述代码，在进入方法前就要得到锁，其他线程就要在外面等待。\n\n分析：锁里面的资源在同一时间只允许一个线程执行，我们不仅要减少其他线程等待的时间，也要尽力减少线程在锁里面的执行时间，所以，尽量只有在有线程安全要求的程序代码上加锁。\n\n```java\npublic void syncMethod(){\n    othercode1();\n    synchronized(this){\n        metextMethod();\n    }\n    othercode2();\n}\n```\n\n### 1.2 减小锁粒度\n\n将大对象（这个对象可能会被很多线程访问）拆成小对象，大大增加并行度。\n\n降低锁竞争，那么偏向锁、轻量级锁成功率才会提高。\n\n最最典型的减小锁粒度的案例就是ConcurrentHashMap。在HashMap的基础上进行优化，使用了cas与synchronized来确保安全性，在保证安全性的基础上为了充分利用线程资源，更是巧妙的设计了多线程同扩容的模式。\n\n\n\n### 1.3 锁分离\n\n最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁。这样读读不互斥，读写互斥，写写互斥。既保证了线程安全，又提高了性能。\n\n分析：读写分离这种思想可以延伸到我们其他的设计中，只要操作上互不影响，那锁就可以进行分离，比如：LinkedBlockingQueue\n\n<img src=\"..\\images/read_writer_Lock1.png\" alt=\"read_writer_Lock1\" style=\"zoom: 67%;\" />\n\n从头部获取数据，从尾部放入数据，使用两把锁。\n\n\n\n### 1.4 锁粗化\n\n通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁，只有这样，等待在这个锁上的其他线程才能尽早的获取资源执行任务；但是凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化。\n\n```java\npublic void demoMethod(){\n    synchronized{\n    \t//dow sth.\n\t}\n    //....做其他不需要同步的工作，但能很快执行完毕\n    synchronized{\n        //do sth.\n    }\n}\n```\n\n这种情况，根据锁粗化的思想，应该合并：\n\n```java\npublic void demoMethod(){\n    //整合成一次锁请求,前提时中间哪些不需要同步的工作很快就执行完成\n    synchronized(lock){\n        //do sth.\n        //....做其他不需要同步的工作，但能很快执行完毕\n    }\n}\n```\n\n再举一个极端的例子：\n\n```java\nfor(int i =0; i < circle; i++){\n    synchronized(lock){\n        //.....\n    }\n}\n```\n\n在一个循环内不同得获得锁。虽然JDK内部会对这个代码做些优化，但是还不如直接写成：\n\n```java\nsynchronized(lock){\n    for(int i =0; i < circle; i++){\n    }\n}\n```\n\n当然如果有需求说，这样的循环太久，需要给其他线程不要等待太久，那只能写成上面那种。如果没有这样类似的需求，还是直接写成后者那种比较好。\n**分析**: 锁粗化是JVM默认启动的一种机制，锁粗化针对的是对连续的区域进行分段加锁这种场景，JVM会自发进行优化。但作为开发者而言在满足业务的情况下，应该减少锁的使用。\n\n### 1.5 锁消除\n\n锁消除是在编译器级别的事情。在即时编译器(JIT)时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。也许你会觉得奇怪，既然有些对象不可能被多线程访问，那为什么要加锁呢？写代码时直接不加锁不就好了。\n但是有时，这些锁并不是程序员所写的，有的是JDK实现中就有锁的，比如Vector和StringBuffer这样的类，它们中的很多方法都是有锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。\n\n```java\npublic static void main(String args[]) throws InterrruptedException{\n    long start = System.currentTimeTimeMillis();\n    for(int i = 0;i < 20000; i++){\n        createStringBuffer(\"JVM\",\"asdfasdfasdf\");\n    }\n    long bufferCost = System.currentTimeTimeMillis() - start;\n    System.out.println(\"createStringBuffer:\"+bufferCost+\"ms\");\n}\npublic static String createStringBuffer(String s1, String s2){\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb.toString();\n}\n```\n\n上述代码中的StringBuffer.append是一个同步操作，但是StringBuffer却是一个局部变量，并且方法也并没有把StringBuffer返回，所以不可能会有多线程去访问它。那么此时StringBuffer中的同步操作就是没有意义的。\n开启锁消除是在JVM参数上设置的，当然需要在server模式下：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks\n```\n\n并且要开启逃逸分析。 逃逸分析的作用呢，就是看看变量是否有可能逃出作用域的范围。\n比如上述的StringBuffer，上述代码中craeteStringBuffer的返回是一个String，所以这个局部变量StringBuffer在其他地方都不会被使用。如果将craeteStringBuffer改成\n\n```java\npublic static StringBuffer createStringBuffer(String s1, String s2){\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb;\n}\n```\n\n那么这个 StringBuffer被返回后，是有可能被任何其他地方所使用的（譬如被主函数将返回结果put进map啊等等）。那么JVM的逃逸分析可以分析出，这个局部变量 StringBuffer逃出了它的作用域。\n所以基于逃逸分析，JVM可以判断，如果这个局部变量StringBuffer并没有逃出它的作用域，那么可以确定这个StringBuffer并不会被多线程所访问，那么就可以把这些多余的锁给去掉来提高性能。\n当JVM参数为：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks\n```\n\n输出：\n\n```tex\ncreateStringBuffer: 302ms\n```\n\nJVM参数为：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:-EliminateLocks\n```\n\n输出：\n\n```tex\ncreateStringBuffer: 660ms\n```\n\n显然，锁消除的效果还是很明显的。","slug":"lock01","published":1,"updated":"2021-07-23T07:18:16.845Z","layout":"post","photos":[],"link":"","_id":"ckrg1jztm0006dw3qcdsu1x5g","content":"<h2 id=\"1-优化思路以及方法\"><a href=\"#1-优化思路以及方法\" class=\"headerlink\" title=\"1. 优化思路以及方法\"></a>1. 优化思路以及方法</h2><ul>\n<li>减少锁持有时间</li>\n<li>减小锁粒度</li>\n<li>锁分离</li>\n<li>锁粗化</li>\n<li>锁消除</li>\n</ul>\n<h3 id=\"1-1-减少锁持有时间\"><a href=\"#1-1-减少锁持有时间\" class=\"headerlink\" title=\"1.1 减少锁持有时间\"></a>1.1 减少锁持有时间</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">syncMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    othercode1();</span><br><span class=\"line\">    mutextMethod();</span><br><span class=\"line\">    othercode2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>像上述代码，在进入方法前就要得到锁，其他线程就要在外面等待。</p>\n<p>分析：锁里面的资源在同一时间只允许一个线程执行，我们不仅要减少其他线程等待的时间，也要尽力减少线程在锁里面的执行时间，所以，尽量只有在有线程安全要求的程序代码上加锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">syncMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    othercode1();</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">        metextMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    othercode2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-减小锁粒度\"><a href=\"#1-2-减小锁粒度\" class=\"headerlink\" title=\"1.2 减小锁粒度\"></a>1.2 减小锁粒度</h3><p>将大对象（这个对象可能会被很多线程访问）拆成小对象，大大增加并行度。</p>\n<p>降低锁竞争，那么偏向锁、轻量级锁成功率才会提高。</p>\n<p>最最典型的减小锁粒度的案例就是ConcurrentHashMap。在HashMap的基础上进行优化，使用了cas与synchronized来确保安全性，在保证安全性的基础上为了充分利用线程资源，更是巧妙的设计了多线程同扩容的模式。</p>\n<h3 id=\"1-3-锁分离\"><a href=\"#1-3-锁分离\" class=\"headerlink\" title=\"1.3 锁分离\"></a>1.3 锁分离</h3><p>最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁。这样读读不互斥，读写互斥，写写互斥。既保证了线程安全，又提高了性能。</p>\n<p>分析：读写分离这种思想可以延伸到我们其他的设计中，只要操作上互不影响，那锁就可以进行分离，比如：LinkedBlockingQueue</p>\n<img src=\"/2021/07/23/lock01/images/read_writer_Lock1.png\" alt=\"read_writer_Lock1\" style=\"zoom: 67%;\">\n\n<p>从头部获取数据，从尾部放入数据，使用两把锁。</p>\n<h3 id=\"1-4-锁粗化\"><a href=\"#1-4-锁粗化\" class=\"headerlink\" title=\"1.4 锁粗化\"></a>1.4 锁粗化</h3><p>通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁，只有这样，等待在这个锁上的其他线程才能尽早的获取资源执行任务；但是凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//dow sth.</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种情况，根据锁粗化的思想，应该合并：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//整合成一次锁请求,前提时中间哪些不需要同步的工作很快就执行完成</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">        <span class=\"comment\">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再举一个极端的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; circle; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//.....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在一个循环内不同得获得锁。虽然JDK内部会对这个代码做些优化，但是还不如直接写成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; circle; i++)&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然如果有需求说，这样的循环太久，需要给其他线程不要等待太久，那只能写成上面那种。如果没有这样类似的需求，还是直接写成后者那种比较好。<br><strong>分析</strong>: 锁粗化是JVM默认启动的一种机制，锁粗化针对的是对连续的区域进行分段加锁这种场景，JVM会自发进行优化。但作为开发者而言在满足业务的情况下，应该减少锁的使用。</p>\n<h3 id=\"1-5-锁消除\"><a href=\"#1-5-锁消除\" class=\"headerlink\" title=\"1.5 锁消除\"></a>1.5 锁消除</h3><p>锁消除是在编译器级别的事情。在即时编译器(JIT)时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。也许你会觉得奇怪，既然有些对象不可能被多线程访问，那为什么要加锁呢？写代码时直接不加锁不就好了。<br>但是有时，这些锁并不是程序员所写的，有的是JDK实现中就有锁的，比如Vector和StringBuffer这样的类，它们中的很多方法都是有锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> InterrruptedException</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> start = System.currentTimeTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">20000</span>; i++)&#123;</span><br><span class=\"line\">        createStringBuffer(<span class=\"string\">&quot;JVM&quot;</span>,<span class=\"string\">&quot;asdfasdfasdf&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> bufferCost = System.currentTimeTimeMillis() - start;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;createStringBuffer:&quot;</span>+bufferCost+<span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span></span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    sb.append(s1);</span><br><span class=\"line\">    sb.append(s2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中的StringBuffer.append是一个同步操作，但是StringBuffer却是一个局部变量，并且方法也并没有把StringBuffer返回，所以不可能会有多线程去访问它。那么此时StringBuffer中的同步操作就是没有意义的。<br>开启锁消除是在JVM参数上设置的，当然需要在server模式下：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>\n\n<p>并且要开启逃逸分析。 逃逸分析的作用呢，就是看看变量是否有可能逃出作用域的范围。<br>比如上述的StringBuffer，上述代码中craeteStringBuffer的返回是一个String，所以这个局部变量StringBuffer在其他地方都不会被使用。如果将craeteStringBuffer改成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> StringBuffer <span class=\"title\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span></span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    sb.append(s1);</span><br><span class=\"line\">    sb.append(s2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么这个 StringBuffer被返回后，是有可能被任何其他地方所使用的（譬如被主函数将返回结果put进map啊等等）。那么JVM的逃逸分析可以分析出，这个局部变量 StringBuffer逃出了它的作用域。<br>所以基于逃逸分析，JVM可以判断，如果这个局部变量StringBuffer并没有逃出它的作用域，那么可以确定这个StringBuffer并不会被多线程所访问，那么就可以把这些多余的锁给去掉来提高性能。<br>当JVM参数为：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createStringBuffer: 302ms</span><br></pre></td></tr></table></figure>\n\n<p>JVM参数为：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:-EliminateLocks</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createStringBuffer: 660ms</span><br></pre></td></tr></table></figure>\n\n<p>显然，锁消除的效果还是很明显的。</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1-优化思路以及方法\"><a href=\"#1-优化思路以及方法\" class=\"headerlink\" title=\"1. 优化思路以及方法\"></a>1. 优化思路以及方法</h2><ul>\n<li>减少锁持有时间</li>\n<li>减小锁粒度</li>\n<li>锁分离</li>\n<li>锁粗化</li>\n<li>锁消除</li>\n</ul>\n<h3 id=\"1-1-减少锁持有时间\"><a href=\"#1-1-减少锁持有时间\" class=\"headerlink\" title=\"1.1 减少锁持有时间\"></a>1.1 减少锁持有时间</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">syncMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    othercode1();</span><br><span class=\"line\">    mutextMethod();</span><br><span class=\"line\">    othercode2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>像上述代码，在进入方法前就要得到锁，其他线程就要在外面等待。</p>\n<p>分析：锁里面的资源在同一时间只允许一个线程执行，我们不仅要减少其他线程等待的时间，也要尽力减少线程在锁里面的执行时间，所以，尽量只有在有线程安全要求的程序代码上加锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">syncMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    othercode1();</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">        metextMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    othercode2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-减小锁粒度\"><a href=\"#1-2-减小锁粒度\" class=\"headerlink\" title=\"1.2 减小锁粒度\"></a>1.2 减小锁粒度</h3><p>将大对象（这个对象可能会被很多线程访问）拆成小对象，大大增加并行度。</p>\n<p>降低锁竞争，那么偏向锁、轻量级锁成功率才会提高。</p>\n<p>最最典型的减小锁粒度的案例就是ConcurrentHashMap。在HashMap的基础上进行优化，使用了cas与synchronized来确保安全性，在保证安全性的基础上为了充分利用线程资源，更是巧妙的设计了多线程同扩容的模式。</p>\n<h3 id=\"1-3-锁分离\"><a href=\"#1-3-锁分离\" class=\"headerlink\" title=\"1.3 锁分离\"></a>1.3 锁分离</h3><p>最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁。这样读读不互斥，读写互斥，写写互斥。既保证了线程安全，又提高了性能。</p>\n<p>分析：读写分离这种思想可以延伸到我们其他的设计中，只要操作上互不影响，那锁就可以进行分离，比如：LinkedBlockingQueue</p>\n<img src=\"/2021/07/23/lock01/images/read_writer_Lock1.png\" alt=\"read_writer_Lock1\" style=\"zoom: 67%;\">\n\n<p>从头部获取数据，从尾部放入数据，使用两把锁。</p>\n<h3 id=\"1-4-锁粗化\"><a href=\"#1-4-锁粗化\" class=\"headerlink\" title=\"1.4 锁粗化\"></a>1.4 锁粗化</h3><p>通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁，只有这样，等待在这个锁上的其他线程才能尽早的获取资源执行任务；但是凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//dow sth.</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种情况，根据锁粗化的思想，应该合并：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//整合成一次锁请求,前提时中间哪些不需要同步的工作很快就执行完成</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">        <span class=\"comment\">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再举一个极端的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; circle; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//.....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在一个循环内不同得获得锁。虽然JDK内部会对这个代码做些优化，但是还不如直接写成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; circle; i++)&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然如果有需求说，这样的循环太久，需要给其他线程不要等待太久，那只能写成上面那种。如果没有这样类似的需求，还是直接写成后者那种比较好。<br><strong>分析</strong>: 锁粗化是JVM默认启动的一种机制，锁粗化针对的是对连续的区域进行分段加锁这种场景，JVM会自发进行优化。但作为开发者而言在满足业务的情况下，应该减少锁的使用。</p>\n<h3 id=\"1-5-锁消除\"><a href=\"#1-5-锁消除\" class=\"headerlink\" title=\"1.5 锁消除\"></a>1.5 锁消除</h3><p>锁消除是在编译器级别的事情。在即时编译器(JIT)时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。也许你会觉得奇怪，既然有些对象不可能被多线程访问，那为什么要加锁呢？写代码时直接不加锁不就好了。<br>但是有时，这些锁并不是程序员所写的，有的是JDK实现中就有锁的，比如Vector和StringBuffer这样的类，它们中的很多方法都是有锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> InterrruptedException</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> start = System.currentTimeTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">20000</span>; i++)&#123;</span><br><span class=\"line\">        createStringBuffer(<span class=\"string\">&quot;JVM&quot;</span>,<span class=\"string\">&quot;asdfasdfasdf&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> bufferCost = System.currentTimeTimeMillis() - start;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;createStringBuffer:&quot;</span>+bufferCost+<span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span></span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    sb.append(s1);</span><br><span class=\"line\">    sb.append(s2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中的StringBuffer.append是一个同步操作，但是StringBuffer却是一个局部变量，并且方法也并没有把StringBuffer返回，所以不可能会有多线程去访问它。那么此时StringBuffer中的同步操作就是没有意义的。<br>开启锁消除是在JVM参数上设置的，当然需要在server模式下：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>\n\n<p>并且要开启逃逸分析。 逃逸分析的作用呢，就是看看变量是否有可能逃出作用域的范围。<br>比如上述的StringBuffer，上述代码中craeteStringBuffer的返回是一个String，所以这个局部变量StringBuffer在其他地方都不会被使用。如果将craeteStringBuffer改成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> StringBuffer <span class=\"title\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span></span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    sb.append(s1);</span><br><span class=\"line\">    sb.append(s2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么这个 StringBuffer被返回后，是有可能被任何其他地方所使用的（譬如被主函数将返回结果put进map啊等等）。那么JVM的逃逸分析可以分析出，这个局部变量 StringBuffer逃出了它的作用域。<br>所以基于逃逸分析，JVM可以判断，如果这个局部变量StringBuffer并没有逃出它的作用域，那么可以确定这个StringBuffer并不会被多线程所访问，那么就可以把这些多余的锁给去掉来提高性能。<br>当JVM参数为：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createStringBuffer: 302ms</span><br></pre></td></tr></table></figure>\n\n<p>JVM参数为：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:-EliminateLocks</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createStringBuffer: 660ms</span><br></pre></td></tr></table></figure>\n\n<p>显然，锁消除的效果还是很明显的。</p>\n"},{"title":"nginx安装.md","date":"2021-07-23T03:40:44.000Z","comments":0,"_content":"\n\n# Nginx安装\n\n1. 安装nginx前首先要确认系统中是否安装了gcc 、pcre-devel、zlib-devel、openssl-devel\n\n    ```shell\n    #1、rpm包安装的，可以用 rpm -qa 看到，如果要查找某软件包是否安装，用 rpm -qa | grep \"软件或者包的名字\"\n    #2、以deb包安装的，可以用 dpkg -l 看到。如果是查找指定软件包，用 dpkg -l | grep \"软件或者包的名字\"\n    #3、yum方法安装的，可以用 yum list installed 查找，如果是查找指定包，用 yum list installed | grep \"软件名或者包名\"\n    yum list installed | grep \"gcc\"\n    ```\n   ![image-20201210103251475](./nginx/image-20201210100736952.png)\n2. 安装依赖包\n\n    ```shell\n    yum -y install gcc pcre-devel zlib-devel openssl openssl-devel\n    ```\n\n3. 下载并解压安装包\n\n    ```shell\n    //创建nginx存放文件夹\n    cd /usr/local\n    mkdir nginx\n    cd nginx\n    #下载tar包\n    wget http://nginx.org/download/nginx-1.13.7.tar.gz\n    tar -xvf nginx-1.13.7.tar.gz\n    ```\n\n4. 配置\n\n    ```shell\n    cd nginx-1.13.7\n    ./configure --prefix=/usr/local/nginx\n    \n    make\n    make install\n    ```\n\n5. 测试是否安装成功\n\n    ```shell\n    ./sbin/nginx -t\n    ```\n\n    <img src=\"./nginx/image-20201210101238462.png\" alt=\"image-20201210101238462\" style=\"zoom: 67%;float:right;\" />\n\n6. 配置nginx.conf\n\n    ```yml\n    vim /usr/local/nginx/cong/nginx.conf\n    \n    #修改如下\n    server {\n      listen 80;\n      server_name localhost;\n    \n      # 注意设定 root路径是有dist的\n      location / {\n        root /usr/local/webapp/dist;\n        index /index.html;\n      }\n    \n      #跨域 ip和port自行替换\n      location /adminApi {\n        proxy_pass http://ip:port;\n      }\n    \n    }\n    \n    ```\n\n7. 启动\n   ```shell\n       #启动nginx\n       cd /usr/local/nginx/sbin\n       ./nginx \n     ```\n\n   **常用命令：**\n   \n   ```shell\n       #修改配置后重新启动\n       ./nginx -s reload\n       #如果出现：nginx: [error] open() ＂/usr/local/nginx/logs/nginx.pid＂ failed\n       /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\n       #再次启动即可\n       \n       #查看nginx进程是否启动\n       ps -ef|grep nginx\n       \n       #平滑启动nginx\n       kill -HUP\n       #主进程号或进程号文件路径 或者使用\n       \n       /usr/nginx/sbin/nginx -s reload\n       \n       #注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。\n       #判断Nginx配置是否正确命令如下：\n       nginx -t -c /usr/nginx/conf/nginx.conf\n       #或者使用\n       /usr/nginx/sbin/nginx -t\n       \n       #重启\n       nginx reload\n       /usr/local/nginx/sbin/nginx -s reload \n       service nginx restart\n       \n       #启动\n       ./nginx\n       #关闭\n       ./nginx -s stop\n       \n       \n       #配置nginx开机自启动\n       vim /etc/rc.d/rc.local\n       \n       #再文件中添加nginx启动地址\n        \n       touch /var/lock/subsys/local\n       /usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf\n       \n       #设置开机自启动nginx\n       /usr/local/nginx/sb/nginx\n    ```\n\n![image-20201210103251475](./nginx/image-20201210103251475.png)\n\n","source":"_posts/nginx.md","raw":"---\ntitle: nginx安装.md\ndate: 2021-07-23 11:40:44\ntags: nginx\ncomments: false\n---\n\n\n# Nginx安装\n\n1. 安装nginx前首先要确认系统中是否安装了gcc 、pcre-devel、zlib-devel、openssl-devel\n\n    ```shell\n    #1、rpm包安装的，可以用 rpm -qa 看到，如果要查找某软件包是否安装，用 rpm -qa | grep \"软件或者包的名字\"\n    #2、以deb包安装的，可以用 dpkg -l 看到。如果是查找指定软件包，用 dpkg -l | grep \"软件或者包的名字\"\n    #3、yum方法安装的，可以用 yum list installed 查找，如果是查找指定包，用 yum list installed | grep \"软件名或者包名\"\n    yum list installed | grep \"gcc\"\n    ```\n   ![image-20201210103251475](./nginx/image-20201210100736952.png)\n2. 安装依赖包\n\n    ```shell\n    yum -y install gcc pcre-devel zlib-devel openssl openssl-devel\n    ```\n\n3. 下载并解压安装包\n\n    ```shell\n    //创建nginx存放文件夹\n    cd /usr/local\n    mkdir nginx\n    cd nginx\n    #下载tar包\n    wget http://nginx.org/download/nginx-1.13.7.tar.gz\n    tar -xvf nginx-1.13.7.tar.gz\n    ```\n\n4. 配置\n\n    ```shell\n    cd nginx-1.13.7\n    ./configure --prefix=/usr/local/nginx\n    \n    make\n    make install\n    ```\n\n5. 测试是否安装成功\n\n    ```shell\n    ./sbin/nginx -t\n    ```\n\n    <img src=\"./nginx/image-20201210101238462.png\" alt=\"image-20201210101238462\" style=\"zoom: 67%;float:right;\" />\n\n6. 配置nginx.conf\n\n    ```yml\n    vim /usr/local/nginx/cong/nginx.conf\n    \n    #修改如下\n    server {\n      listen 80;\n      server_name localhost;\n    \n      # 注意设定 root路径是有dist的\n      location / {\n        root /usr/local/webapp/dist;\n        index /index.html;\n      }\n    \n      #跨域 ip和port自行替换\n      location /adminApi {\n        proxy_pass http://ip:port;\n      }\n    \n    }\n    \n    ```\n\n7. 启动\n   ```shell\n       #启动nginx\n       cd /usr/local/nginx/sbin\n       ./nginx \n     ```\n\n   **常用命令：**\n   \n   ```shell\n       #修改配置后重新启动\n       ./nginx -s reload\n       #如果出现：nginx: [error] open() ＂/usr/local/nginx/logs/nginx.pid＂ failed\n       /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\n       #再次启动即可\n       \n       #查看nginx进程是否启动\n       ps -ef|grep nginx\n       \n       #平滑启动nginx\n       kill -HUP\n       #主进程号或进程号文件路径 或者使用\n       \n       /usr/nginx/sbin/nginx -s reload\n       \n       #注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。\n       #判断Nginx配置是否正确命令如下：\n       nginx -t -c /usr/nginx/conf/nginx.conf\n       #或者使用\n       /usr/nginx/sbin/nginx -t\n       \n       #重启\n       nginx reload\n       /usr/local/nginx/sbin/nginx -s reload \n       service nginx restart\n       \n       #启动\n       ./nginx\n       #关闭\n       ./nginx -s stop\n       \n       \n       #配置nginx开机自启动\n       vim /etc/rc.d/rc.local\n       \n       #再文件中添加nginx启动地址\n        \n       touch /var/lock/subsys/local\n       /usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf\n       \n       #设置开机自启动nginx\n       /usr/local/nginx/sb/nginx\n    ```\n\n![image-20201210103251475](./nginx/image-20201210103251475.png)\n\n","slug":"nginx","published":1,"updated":"2021-07-23T06:49:12.823Z","layout":"post","photos":[],"link":"","_id":"ckrg1jztn0008dw3qh9z53hma","content":"<h1 id=\"Nginx安装\"><a href=\"#Nginx安装\" class=\"headerlink\" title=\"Nginx安装\"></a>Nginx安装</h1><ol>\n<li><p>安装nginx前首先要确认系统中是否安装了gcc 、pcre-devel、zlib-devel、openssl-devel</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1、rpm包安装的，可以用 rpm -qa 看到，如果要查找某软件包是否安装，用 rpm -qa | grep <span class=\"string\">&quot;软件或者包的名字&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2、以deb包安装的，可以用 dpkg -l 看到。如果是查找指定软件包，用 dpkg -l | grep <span class=\"string\">&quot;软件或者包的名字&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3、yum方法安装的，可以用 yum list installed 查找，如果是查找指定包，用 yum list installed | grep <span class=\"string\">&quot;软件名或者包名&quot;</span></span></span><br><span class=\"line\">yum list installed | grep &quot;gcc&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/07/23/nginx/image-20201210100736952.png\" alt=\"image-20201210103251475\"></p>\n</li>\n<li><p>安装依赖包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure></li>\n<li><p>下载并解压安装包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建nginx存放文件夹</span><br><span class=\"line\">cd /usr/local</span><br><span class=\"line\">mkdir nginx</span><br><span class=\"line\">cd nginx</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载tar包</span></span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.13.7.tar.gz</span><br><span class=\"line\">tar -xvf nginx-1.13.7.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li><p>配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nginx-1.13.7</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></li>\n<li><p>测试是否安装成功</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./sbin/nginx -t</span><br></pre></td></tr></table></figure>\n\n <img src=\"/2021/07/23/nginx/image-20201210101238462.png\" alt=\"image-20201210101238462\" style=\"zoom: 67%;float:right;\"></li>\n<li><p>配置nginx.conf</p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">vim</span> <span class=\"string\">/usr/local/nginx/cong/nginx.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#修改如下</span></span><br><span class=\"line\"><span class=\"string\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">listen</span> <span class=\"number\">80</span><span class=\"string\">;</span></span><br><span class=\"line\">  <span class=\"string\">server_name</span> <span class=\"string\">localhost;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 注意设定 root路径是有dist的</span></span><br><span class=\"line\">  <span class=\"string\">location</span> <span class=\"string\">/</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">root</span> <span class=\"string\">/usr/local/webapp/dist;</span></span><br><span class=\"line\">    <span class=\"string\">index</span> <span class=\"string\">/index.html;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#跨域 ip和port自行替换</span></span><br><span class=\"line\">  <span class=\"string\">location</span> <span class=\"string\">/adminApi</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">proxy_pass</span> <span class=\"string\">http://ip:port;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动nginx</span></span><br><span class=\"line\">cd /usr/local/nginx/sbin</span><br><span class=\"line\">./nginx </span><br></pre></td></tr></table></figure>\n\n<p><strong>常用命令：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改配置后重新启动</span></span><br><span class=\"line\">./nginx -s reload</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果出现：nginx: [error] open() ＂/usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid＂ failed</span></span><br><span class=\"line\">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再次启动即可</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看nginx进程是否启动</span></span><br><span class=\"line\">ps -ef|grep nginx</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">平滑启动nginx</span></span><br><span class=\"line\">kill -HUP</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">主进程号或进程号文件路径 或者使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">/usr/nginx/sbin/nginx -s reload</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">判断Nginx配置是否正确命令如下：</span></span><br><span class=\"line\">nginx -t -c /usr/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者使用</span></span><br><span class=\"line\">/usr/nginx/sbin/nginx -t</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启</span></span><br><span class=\"line\">nginx reload</span><br><span class=\"line\">/usr/local/nginx/sbin/nginx -s reload </span><br><span class=\"line\">service nginx restart</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动</span></span><br><span class=\"line\">./nginx</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">关闭</span></span><br><span class=\"line\">./nginx -s stop</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置nginx开机自启动</span></span><br><span class=\"line\">vim /etc/rc.d/rc.local</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再文件中添加nginx启动地址</span></span><br><span class=\"line\"> </span><br><span class=\"line\">touch /var/lock/subsys/local</span><br><span class=\"line\">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置开机自启动nginx</span></span><br><span class=\"line\">/usr/local/nginx/sb/nginx</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"/2021/07/23/nginx/image-20201210103251475.png\" alt=\"image-20201210103251475\"></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h1 id=\"Nginx安装\"><a href=\"#Nginx安装\" class=\"headerlink\" title=\"Nginx安装\"></a>Nginx安装</h1><ol>\n<li><p>安装nginx前首先要确认系统中是否安装了gcc 、pcre-devel、zlib-devel、openssl-devel</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1、rpm包安装的，可以用 rpm -qa 看到，如果要查找某软件包是否安装，用 rpm -qa | grep <span class=\"string\">&quot;软件或者包的名字&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2、以deb包安装的，可以用 dpkg -l 看到。如果是查找指定软件包，用 dpkg -l | grep <span class=\"string\">&quot;软件或者包的名字&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3、yum方法安装的，可以用 yum list installed 查找，如果是查找指定包，用 yum list installed | grep <span class=\"string\">&quot;软件名或者包名&quot;</span></span></span><br><span class=\"line\">yum list installed | grep &quot;gcc&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/07/23/nginx/image-20201210100736952.png\" alt=\"image-20201210103251475\"></p>\n</li>\n<li><p>安装依赖包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure></li>\n<li><p>下载并解压安装包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建nginx存放文件夹</span><br><span class=\"line\">cd /usr/local</span><br><span class=\"line\">mkdir nginx</span><br><span class=\"line\">cd nginx</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载tar包</span></span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.13.7.tar.gz</span><br><span class=\"line\">tar -xvf nginx-1.13.7.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li><p>配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nginx-1.13.7</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></li>\n<li><p>测试是否安装成功</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./sbin/nginx -t</span><br></pre></td></tr></table></figure>\n\n <img src=\"/2021/07/23/nginx/image-20201210101238462.png\" alt=\"image-20201210101238462\" style=\"zoom: 67%;float:right;\"></li>\n<li><p>配置nginx.conf</p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">vim</span> <span class=\"string\">/usr/local/nginx/cong/nginx.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#修改如下</span></span><br><span class=\"line\"><span class=\"string\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">listen</span> <span class=\"number\">80</span><span class=\"string\">;</span></span><br><span class=\"line\">  <span class=\"string\">server_name</span> <span class=\"string\">localhost;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 注意设定 root路径是有dist的</span></span><br><span class=\"line\">  <span class=\"string\">location</span> <span class=\"string\">/</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">root</span> <span class=\"string\">/usr/local/webapp/dist;</span></span><br><span class=\"line\">    <span class=\"string\">index</span> <span class=\"string\">/index.html;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#跨域 ip和port自行替换</span></span><br><span class=\"line\">  <span class=\"string\">location</span> <span class=\"string\">/adminApi</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">proxy_pass</span> <span class=\"string\">http://ip:port;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动nginx</span></span><br><span class=\"line\">cd /usr/local/nginx/sbin</span><br><span class=\"line\">./nginx </span><br></pre></td></tr></table></figure>\n\n<p><strong>常用命令：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改配置后重新启动</span></span><br><span class=\"line\">./nginx -s reload</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果出现：nginx: [error] open() ＂/usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid＂ failed</span></span><br><span class=\"line\">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再次启动即可</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看nginx进程是否启动</span></span><br><span class=\"line\">ps -ef|grep nginx</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">平滑启动nginx</span></span><br><span class=\"line\">kill -HUP</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">主进程号或进程号文件路径 或者使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">/usr/nginx/sbin/nginx -s reload</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">判断Nginx配置是否正确命令如下：</span></span><br><span class=\"line\">nginx -t -c /usr/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者使用</span></span><br><span class=\"line\">/usr/nginx/sbin/nginx -t</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启</span></span><br><span class=\"line\">nginx reload</span><br><span class=\"line\">/usr/local/nginx/sbin/nginx -s reload </span><br><span class=\"line\">service nginx restart</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动</span></span><br><span class=\"line\">./nginx</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">关闭</span></span><br><span class=\"line\">./nginx -s stop</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置nginx开机自启动</span></span><br><span class=\"line\">vim /etc/rc.d/rc.local</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再文件中添加nginx启动地址</span></span><br><span class=\"line\"> </span><br><span class=\"line\">touch /var/lock/subsys/local</span><br><span class=\"line\">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置开机自启动nginx</span></span><br><span class=\"line\">/usr/local/nginx/sb/nginx</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"/2021/07/23/nginx/image-20201210103251475.png\" alt=\"image-20201210103251475\"></p>\n"},{"title":"vue学习","date":"2021-07-23T03:40:44.000Z","comments":0,"_content":"Object.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。\n### 1. export\n---\n用于规定模块的对外接口，export输出变量和方法、类\n\n-   变量\n\n    ```javascript\n    // profile.js\n    export var firstName = 'Michael';\n    export var lastName = 'Jackson';\n    export var year = 1958;\n    \n    //简写--优先使用\n    export {firstName, lastName, year}\n    ```\n\n-   方法\n\n    ```javascript\n    //如果想为输入的变量重新命名， 可以使用AS 关键字重新命名\n    import { buildMenus as buildMenus} from '@/api/menu';\n    //import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同\n    ```\n\n### 2. export default\n\n为模块指定默认输出， 使用import命令的时候，用户需要知道所要加载的变量名和函数名，否则无法加载；了解模块有哪些方法和属性比较麻烦，使用export default命令，为模块指定默认输出\n\n```javascript\n// export-default.js\nexport default function () {\n  console.log('foo');\n}\n```\n\n上面代码是一个模块文件export-default.js。默认输出1个函数；\n\n与export命令的区别：其他模块加载该模块是，import命令可以为该匿名函数指定任意名字\n\n```javascript\n// import-default.js\nimport customName from './export-default';\ncustomName(); // 'foo'\n```\n\n上面代码的`import`命令，可以用任意名称指向`export-default.js`输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时`import`命令后面，不使用大括号。\n\n本质上，`export default`就是输出一个叫做`default`的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。\n\n```javascript\n// modules.js\nfunction add(x, y) {\n  return x * y;\n}\nexport {add as default};\n// 等同于\n// export default add;\n\n// app.js\nimport { default as foo } from 'modules';\n// 等同于\n// import foo from 'modules';\n```\n\n正是因为`export default`命令其实只是输出一个叫做`default`的变量，所以它后面不能跟变量声明语句。\n\n**总结：**\n\n-   export命令对外接口是有名称的且`import`命令从模块导入的变量名与被导入模块对外接口的名称相同，而export default命令对外输出的变量名可以是任意的，这时`import`命令后面，不使用大括号。\n\n-   `export default`命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此`export default`命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应`export default`命令。\n\n```javascript\n//menu.js\n//get请求获取所有的菜单信息\nexport function buildMenus() {\n  return request({\n    url: 'api/menus/build',\n    method: 'get'\n  })\n}\n//post 请求保存数据\nexport function add(data) {\n  return request({\n    url: 'api/menus',\n    method: 'post',\n    data\n  })\n}\n//delete 请求删除数据\nexport function del(id) {\n  return request({\n    url: 'api/menus/' + id,\n    method: 'delete'\n  })\n}\n//put请求修改数据\nexport function edit(data) {\n  return request({\n    url: 'api/menus',\n    method: 'put',\n    data\n  })\n}\n\n//app.vue\nimport { buildMenus } from '@/api/menu';\n```\n\n### 3. Const、var、let\n\n ES5 中作用域有：全局作用域、函数作用域。没有块作用域的概念。\n\n ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域\n\n```javascript\n{\n  var a = 1;\n  console.log(a); // 1\n}\nconsole.log(a); // 1\n// 通过var定义的变量可以跨块作用域访问到。\n\n(function A() {\n  var b = 2;\n  console.log(b); // 2\n})();\n// console.log(b); // 报错，\n// 可见，通过var定义的变量不能跨函数作用域访问到\n\nif(true) {\n  var c = 3;\n}\nconsole.log(c); // 3\nfor(var i = 0; i < 4; i ++) {\n  var d = 5;\n};\nconsole.log(i); // 4   (循环结束i已经是4，所以此处i为4)\nconsole.log(d); // 5\n// if语句和for语句中用var定义的变量可以在外面访问到，\n// 可见，if语句和for语句属于块作用域，不属于函数作用域\n```\n\n三者的区别：\n\n1.  var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。\n2.  let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。\n3.  const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。\n\n```javascript\n// 块作用域\n{\n  var a = 1;\n  let b = 2;\n  const c = 3;\n  // c = 4; // 报错\n  var aa;\n  let bb;\n  // const cc; // 报错\n  console.log(a); // 1\n  console.log(b); // 2\n  console.log(c); // 3\n  console.log(aa); // undefined\n  console.log(bb); // undefined\n}\nconsole.log(a); // 1\n// console.log(b); // 报错\n// console.log(c); // 报错\n\n// 函数作用域\n(function A() {\n  var d = 5;\n  let e = 6;\n  const f = 7;\n  console.log(d); // 5\n  console.log(e); // 6  \n  console.log(f); // 7 \n})();\n// console.log(d); // 报错\n// console.log(e); // 报错\n// console.log(f); // 报错\n\n```\n\n注意：**const定义的对象属性是否可以改变**\n\n```javascript\nconst person = {\n  name : 'jiuke',\n  sex : '男'\n}\nperson.name = 'test'\nconsole.log(person.name)//person对象的name属性确实被修改了\n```\n\n因为对象是引用类型的，person中保存的仅是对象的指针，这就意味着，const仅保证指针不发生改变，修改对象的属性不会改变对象的指针，所以是被允许的。也就是说const定义的引用类型只要指针不发生改变，其他的不论如何改变都是允许的。\n\n然后我们试着修改一下指针，让person指向一个新对象，果然报错\n\n```javascript\nconst person = {\n   name : 'jiuke',\n   sex : '男'\n}\nperson = {\n   name : 'test',\n   sex : '男'\n}\n//报错\n```\n\n### 4. promise\n\npromise用途：异步编程的一种解决方案。\n\n优点：比传统的解决方案——回调函数和事件——更合理和更强大。\n\n三种状态：`pending`（进行中）、`fulfilled`（已成功）和`rejected`（已失败）。\n\n```javascript\n//基本用法：\nconst promise = new Promise(function(resolve, reject) {\n    resolve(value);//表示异步操作成功\n    reject(error);//表示异步操作失败\n});\n\n//promise常用的几个方法\n//1. 异步状态为成功时调用第一个函数，为失败时调用第二个函数。then方法的第二个参数可选。\npromise.then(value => {},error => {});\n\n//2. 异步状态为失败时调用。\npromise.catch(error => {});\n\n//3. promise异步状态为失败时或then方法中抛出错误都会执行catch方法。\npromise.then(value => {},error => {}).catch(error => {});\n\n//4. 不管状态如何都会执行的操作。\npromise.finally(() => {});\n```\n\n### 5. 生命周期\n\n<img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n### 6. 模版语法\n\n#### v-once\n\n执行一次性插值，当数据变化的时候，该内容不会更新；可能会影响该节点其他的数据绑定\n\n```html\n<span v-once>这个将不会改变: {{ msg }}</span>\n```\n\n#### v-html\n\n双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用v-html;\n\n```html\nvar rawHtml = \"<span>这是个使用v-htmls</span>\"\n\n<p>Using mustaches: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\n#### [Attribute](https://cn.vuejs.org/v2/guide/syntax.html#Attribute)\n\nMustache ({}) 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 [`v-bind` 指令](https://cn.vuejs.org/v2/api/#v-bind)：\n\n```html\n<div v-bind:id=\"dynamicId\"></div>\n\n\n//isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 <button> 元素中\n<button v-bind:disabled=\"isButtonDisabled\">Button</button>\n```\n\n#### 三元表达式\n\n```html\n{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div v-bind:id=\"'list-' + id\"></div>\n\n//这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。\n<!-- 这是语句，不是表达式 -->\n{{ var a = 1 }}\n\n<!-- 流控制也不会生效，请使用三元表达式 -->\n{{ if (ok) { return message } }}\n```\n\n### 7. 指令Directives\n\n指令 (Directives) 是带有 `v-` 前缀的特殊 attribute。指令 attribute 的值预期是**单个 JavaScript 表达式** (`v-for` 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。\n\n```html\n//v-if 指令将根据表达式 seen 的值的真假来插入/移除 <p> 元素。\n<p v-if=\"seen\">现在你看到我了</p>\n```\n\n#### 参数\n\n一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，`v-bind` 指令可以用于响应式地更新 HTML attribute\n\n```html\n//href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定\n<a v-bind:href=\"url\">...</a>\n\n<a v-on:click=\"doSomething\">...</a>\n```\n\n#### 动态参数\n\n 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数\n\n```html\n<a v-bind:[attributeName] = \"url\"></a>\n<!--\n\t这里的attributeName会被作为一个javascript表达式进行动态赋值，求得的值会作为最终的参数来使用\n如果VUE实例有一个data. property. attributeName， 其值为href， 那么绑定将等价于v-bind:href\n--->\n```\n\n绑定处理函数：\n\n```html\n<a v-on:[eventName]=\"dosomething\"></a>\n```\n\n-   对动态参数的值的约束\n\n    动态参数预期会求出一个字符串，异常情况下值为 `null`。这个特殊的 `null` 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。\n\n-   对动态参数表达式的约束\n\n    动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：\n\n#### 修饰符\n\n修饰符（modifier）是以半角句号`.` 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定；例如` .prevent`修饰符告诉v-on指令对触发的事件调用event.preventDefault();\n\n```html\n<form v-on:submit.prevent = \"onSubmit\">\n  \n</form>\n```\n\n#### 缩写\n\n```html\n<!-- 完整语法 -->\n<a v-bind:href=\"url\">...</a>\n\n<!-- 缩写 -->\n<a :href=\"url\">...</a>\n\n<!-- 动态参数的缩写 (2.6.0+) -->\n<a :[key]=\"url\"> ... </a>\n\n\n<!-- 完整语法 -->\n<a v-on:click=\"doSomething\">...</a>\n\n<!-- 缩写 -->\n<a @click=\"doSomething\">...</a>\n\n<!-- 动态参数的缩写 (2.6.0+) -->\n<a @[event]=\"doSomething\"> ... </a>\n```\n\n`:` 与 `@` 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。\n\n### 8. 计算属性\n\n```html\n<div id=\"example\">\n  {{ message.split('').reverse().join('') }}\n</div>\n```\n\n这里是想要显示变量 `message` 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。\n\n所以，对于任何复杂逻辑，你都应当使用**计算属性**\n\n例如：\n\n```html\n<div id=\"example\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n```\n\n```javascript\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    // 计算属性的 getter\n    reversedMessage: function () {\n      // `this` 指向 vm 实例\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n\n//页面显示：\n//Original message: \"Hello\"\n//Computed reversed message: \"olleH\"\n```\n\n声明了一个计算属性`reversedMessage`；我们提供的函数将用作property `vm.reversedMessage`的getter函数\n\n```javascript\nconsole.log(vm.reversedMessage) // olleH\nvm.message = 'Goodbye'\nconsole.log(vm.reversedMessage) // => 'eybdooG'\n```\n\n你可以打开浏览器的控制台，自行修改例子中的 vm。`vm.reversedMessage` 的值始终取决于 `vm.message` 的值。\n\n你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 `vm.reversedMessage` 依赖于 `vm.message`，因此当 `vm.message` 发生改变时，所有依赖 `vm.reversedMessage` 的绑定也会更新。以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的。\n\n#### 计算属性 VS 方法\n\n使用表达式中调用方法同样可以达到上面的结果\n\n```html\n<p>Reversed message: \"{{ reversedMessage() }}\"</p>\n```\n\n```javascript\n// 在组件中\nmethods: {\n  reversedMessage: function () {\n    return this.message.split('').reverse().join('')\n  }\n}\n```\n\n我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是**计算属性是基于它们的响应式依赖进行缓存的**。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 `message` 还没有发生改变，多次访问 `reversedMessage` 计算属性会立即返回之前的计算结果，而不必再次执行函数。\n\n这也同样意味着下面的计算属性将不再更新，因为 `Date.now()` 不是响应式依赖：\n\n```\ncomputed: {\n  now: function () {\n    return Date.now()\n  }\n}\n```\n\n相比之下，每当触发重新渲染时，调用方法将**总会**再次执行函数。\n\n我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 **A**，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 **A**。如果没有缓存，我们将不可避免的多次执行 **A** 的 getter！如果你不希望有缓存，请用方法来替代。\n\n#### 计算属性 VS 侦听属性\n\n侦听属性：vue提供了一种更通用的方式来观察和响应vue实例上的数据变动；当有一些数据需要随着其他数据变动而变动时；很容易滥用watch;**通常更好的做法是使用计算属性而不是命令式的watch回调**；\n\n```html\n<div id=\"demo\">{{ fullName }}</div>\n```\n\n```javascript\nvar vm = new Vue({\n  el: '#demo',\n  data: {\n    firstName: 'Foo',\n    lastName: 'Bar',\n    fullName: 'Foo Bar'\n  },\n  //侦听属性watch \n  watch: {\n    firstName: function (val) {\n      this.fullName = val + ' ' + this.lastName\n    },\n    lastName: function (val) {\n      this.fullName = this.firstName + ' ' + val\n    }\n  },\n  //计算属性\n  computed: {\n    fullName: function () {\n      return this.firstName + ' ' + this.lastName\n    }\n  }\n})\n\n```\n\n#### 计算属性的setter\n\n计算属性默认只有getter，自己可以提供一个setter\n\n```javascript\ncomputed: {\n  fullName: {\n    // getter\n    get: function () {\n      return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n      var names = newValue.split(' ')\n      this.firstName = names[0]\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n```\n\n现在再运行 `vm.fullName = 'John Doe'` 时，setter 会被调用，`vm.firstName` 和 `vm.lastName` 也会相应地被更新。\n\n### 9. 侦听器\n\n当需要在数据变化时执行异步或开销较大的操作时，watch是最有用的；同时也可以自定义侦听器；\n\n```html\n<div id=\"watch-example\">\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\">\n  </p>\n  <p>{{ answer }}</p>\n</div>\n```\n\n```javascript\n<!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 -->\n<!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 -->\n<script src=\"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js\"></script>\n<script>\nvar watchExampleVM = new Vue({\n  el: '#watch-example',\n  data: {\n    question: '',\n    answer: 'I cannot give you an answer until you ask a question!'\n  },\n  watch: {\n    // 如果 `question` 发生改变，这个函数就会运行\n    question: function (newQuestion, oldQuestion) {\n      this.answer = 'Waiting for you to stop typing...'\n      this.debouncedGetAnswer()\n    }\n  },\n  created: function () {\n    // `_.debounce` 是一个通过 Lodash 限制操作频率的函数。\n    // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率\n    // AJAX 请求直到用户输入完毕才会发出。想要了解更多关于\n    // `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，\n    // 请参考：https://lodash.com/docs#debounce\n    this.debouncedGetAnswer = _.debounce(this.getAnswer, 500)\n  },\n  methods: {\n    getAnswer: function () {\n      if (this.question.indexOf('?') === -1) {\n        this.answer = 'Questions usually contain a question mark. ;-)'\n        return\n      }\n      this.answer = 'Thinking...'\n      var vm = this\n      axios.get('https://yesno.wtf/api')\n        .then(function (response) {\n          vm.answer = _.capitalize(response.data.answer)\n        })\n        //异常捕获\n        .catch(function (error) {\n          vm.answer = 'Error! Could not reach the API. ' + error\n        })\n    }\n  }\n})\n</script>\n```\n\n使用 `watch` 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的\n\n### 10. class与style绑定\n\n将 `v-bind` 用于 `class` 和 `style` 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组\n\n#### 10.1 绑定html class\n\n##### 10.1.1对象语法\n\n方式一：内联\n\n```html\n<div\n  class=\"static\"\n  v-bind:class=\"{ active: isActive, 'text-danger': hasError }\"\n></div>\n//data\ndata: {\n  isActive: true,\n  hasError: false\n}\n```\n\n方式二：绑定的数据对象不必内联定义在模板里\n\n```html\n<div v-bind:class=\"classObject\"></div>\n//vue data\ndata: {\n  classObject: {\n    active: true,\n    'text-danger': false\n  }\n}\n```\n\n方式三：绑定一个返回对象的计算属性（常用）\n\n```html\n<div v-bind:class=\"classObject\"></div>\n\n//vue data\ndata: {\n  isActive: true,\n  error: null\n},\ncomputed: {\n  classObject: function () {\n    return {\n      active: this.isActive && !this.error,\n      'text-danger': this.error && this.error.type === 'fatal'\n    }\n  }\n}\n```\n\n##### 10.1.2 数组语法\n\n","source":"_posts/vue.md","raw":"---\ntitle: vue学习\ndate: 2021-07-23 11:40:44\ntags: vue\ncomments: false\n---\nObject.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。\n### 1. export\n---\n用于规定模块的对外接口，export输出变量和方法、类\n\n-   变量\n\n    ```javascript\n    // profile.js\n    export var firstName = 'Michael';\n    export var lastName = 'Jackson';\n    export var year = 1958;\n    \n    //简写--优先使用\n    export {firstName, lastName, year}\n    ```\n\n-   方法\n\n    ```javascript\n    //如果想为输入的变量重新命名， 可以使用AS 关键字重新命名\n    import { buildMenus as buildMenus} from '@/api/menu';\n    //import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同\n    ```\n\n### 2. export default\n\n为模块指定默认输出， 使用import命令的时候，用户需要知道所要加载的变量名和函数名，否则无法加载；了解模块有哪些方法和属性比较麻烦，使用export default命令，为模块指定默认输出\n\n```javascript\n// export-default.js\nexport default function () {\n  console.log('foo');\n}\n```\n\n上面代码是一个模块文件export-default.js。默认输出1个函数；\n\n与export命令的区别：其他模块加载该模块是，import命令可以为该匿名函数指定任意名字\n\n```javascript\n// import-default.js\nimport customName from './export-default';\ncustomName(); // 'foo'\n```\n\n上面代码的`import`命令，可以用任意名称指向`export-default.js`输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时`import`命令后面，不使用大括号。\n\n本质上，`export default`就是输出一个叫做`default`的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。\n\n```javascript\n// modules.js\nfunction add(x, y) {\n  return x * y;\n}\nexport {add as default};\n// 等同于\n// export default add;\n\n// app.js\nimport { default as foo } from 'modules';\n// 等同于\n// import foo from 'modules';\n```\n\n正是因为`export default`命令其实只是输出一个叫做`default`的变量，所以它后面不能跟变量声明语句。\n\n**总结：**\n\n-   export命令对外接口是有名称的且`import`命令从模块导入的变量名与被导入模块对外接口的名称相同，而export default命令对外输出的变量名可以是任意的，这时`import`命令后面，不使用大括号。\n\n-   `export default`命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此`export default`命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应`export default`命令。\n\n```javascript\n//menu.js\n//get请求获取所有的菜单信息\nexport function buildMenus() {\n  return request({\n    url: 'api/menus/build',\n    method: 'get'\n  })\n}\n//post 请求保存数据\nexport function add(data) {\n  return request({\n    url: 'api/menus',\n    method: 'post',\n    data\n  })\n}\n//delete 请求删除数据\nexport function del(id) {\n  return request({\n    url: 'api/menus/' + id,\n    method: 'delete'\n  })\n}\n//put请求修改数据\nexport function edit(data) {\n  return request({\n    url: 'api/menus',\n    method: 'put',\n    data\n  })\n}\n\n//app.vue\nimport { buildMenus } from '@/api/menu';\n```\n\n### 3. Const、var、let\n\n ES5 中作用域有：全局作用域、函数作用域。没有块作用域的概念。\n\n ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域\n\n```javascript\n{\n  var a = 1;\n  console.log(a); // 1\n}\nconsole.log(a); // 1\n// 通过var定义的变量可以跨块作用域访问到。\n\n(function A() {\n  var b = 2;\n  console.log(b); // 2\n})();\n// console.log(b); // 报错，\n// 可见，通过var定义的变量不能跨函数作用域访问到\n\nif(true) {\n  var c = 3;\n}\nconsole.log(c); // 3\nfor(var i = 0; i < 4; i ++) {\n  var d = 5;\n};\nconsole.log(i); // 4   (循环结束i已经是4，所以此处i为4)\nconsole.log(d); // 5\n// if语句和for语句中用var定义的变量可以在外面访问到，\n// 可见，if语句和for语句属于块作用域，不属于函数作用域\n```\n\n三者的区别：\n\n1.  var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。\n2.  let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。\n3.  const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。\n\n```javascript\n// 块作用域\n{\n  var a = 1;\n  let b = 2;\n  const c = 3;\n  // c = 4; // 报错\n  var aa;\n  let bb;\n  // const cc; // 报错\n  console.log(a); // 1\n  console.log(b); // 2\n  console.log(c); // 3\n  console.log(aa); // undefined\n  console.log(bb); // undefined\n}\nconsole.log(a); // 1\n// console.log(b); // 报错\n// console.log(c); // 报错\n\n// 函数作用域\n(function A() {\n  var d = 5;\n  let e = 6;\n  const f = 7;\n  console.log(d); // 5\n  console.log(e); // 6  \n  console.log(f); // 7 \n})();\n// console.log(d); // 报错\n// console.log(e); // 报错\n// console.log(f); // 报错\n\n```\n\n注意：**const定义的对象属性是否可以改变**\n\n```javascript\nconst person = {\n  name : 'jiuke',\n  sex : '男'\n}\nperson.name = 'test'\nconsole.log(person.name)//person对象的name属性确实被修改了\n```\n\n因为对象是引用类型的，person中保存的仅是对象的指针，这就意味着，const仅保证指针不发生改变，修改对象的属性不会改变对象的指针，所以是被允许的。也就是说const定义的引用类型只要指针不发生改变，其他的不论如何改变都是允许的。\n\n然后我们试着修改一下指针，让person指向一个新对象，果然报错\n\n```javascript\nconst person = {\n   name : 'jiuke',\n   sex : '男'\n}\nperson = {\n   name : 'test',\n   sex : '男'\n}\n//报错\n```\n\n### 4. promise\n\npromise用途：异步编程的一种解决方案。\n\n优点：比传统的解决方案——回调函数和事件——更合理和更强大。\n\n三种状态：`pending`（进行中）、`fulfilled`（已成功）和`rejected`（已失败）。\n\n```javascript\n//基本用法：\nconst promise = new Promise(function(resolve, reject) {\n    resolve(value);//表示异步操作成功\n    reject(error);//表示异步操作失败\n});\n\n//promise常用的几个方法\n//1. 异步状态为成功时调用第一个函数，为失败时调用第二个函数。then方法的第二个参数可选。\npromise.then(value => {},error => {});\n\n//2. 异步状态为失败时调用。\npromise.catch(error => {});\n\n//3. promise异步状态为失败时或then方法中抛出错误都会执行catch方法。\npromise.then(value => {},error => {}).catch(error => {});\n\n//4. 不管状态如何都会执行的操作。\npromise.finally(() => {});\n```\n\n### 5. 生命周期\n\n<img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n### 6. 模版语法\n\n#### v-once\n\n执行一次性插值，当数据变化的时候，该内容不会更新；可能会影响该节点其他的数据绑定\n\n```html\n<span v-once>这个将不会改变: {{ msg }}</span>\n```\n\n#### v-html\n\n双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用v-html;\n\n```html\nvar rawHtml = \"<span>这是个使用v-htmls</span>\"\n\n<p>Using mustaches: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\n#### [Attribute](https://cn.vuejs.org/v2/guide/syntax.html#Attribute)\n\nMustache ({}) 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 [`v-bind` 指令](https://cn.vuejs.org/v2/api/#v-bind)：\n\n```html\n<div v-bind:id=\"dynamicId\"></div>\n\n\n//isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 <button> 元素中\n<button v-bind:disabled=\"isButtonDisabled\">Button</button>\n```\n\n#### 三元表达式\n\n```html\n{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div v-bind:id=\"'list-' + id\"></div>\n\n//这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。\n<!-- 这是语句，不是表达式 -->\n{{ var a = 1 }}\n\n<!-- 流控制也不会生效，请使用三元表达式 -->\n{{ if (ok) { return message } }}\n```\n\n### 7. 指令Directives\n\n指令 (Directives) 是带有 `v-` 前缀的特殊 attribute。指令 attribute 的值预期是**单个 JavaScript 表达式** (`v-for` 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。\n\n```html\n//v-if 指令将根据表达式 seen 的值的真假来插入/移除 <p> 元素。\n<p v-if=\"seen\">现在你看到我了</p>\n```\n\n#### 参数\n\n一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，`v-bind` 指令可以用于响应式地更新 HTML attribute\n\n```html\n//href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定\n<a v-bind:href=\"url\">...</a>\n\n<a v-on:click=\"doSomething\">...</a>\n```\n\n#### 动态参数\n\n 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数\n\n```html\n<a v-bind:[attributeName] = \"url\"></a>\n<!--\n\t这里的attributeName会被作为一个javascript表达式进行动态赋值，求得的值会作为最终的参数来使用\n如果VUE实例有一个data. property. attributeName， 其值为href， 那么绑定将等价于v-bind:href\n--->\n```\n\n绑定处理函数：\n\n```html\n<a v-on:[eventName]=\"dosomething\"></a>\n```\n\n-   对动态参数的值的约束\n\n    动态参数预期会求出一个字符串，异常情况下值为 `null`。这个特殊的 `null` 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。\n\n-   对动态参数表达式的约束\n\n    动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：\n\n#### 修饰符\n\n修饰符（modifier）是以半角句号`.` 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定；例如` .prevent`修饰符告诉v-on指令对触发的事件调用event.preventDefault();\n\n```html\n<form v-on:submit.prevent = \"onSubmit\">\n  \n</form>\n```\n\n#### 缩写\n\n```html\n<!-- 完整语法 -->\n<a v-bind:href=\"url\">...</a>\n\n<!-- 缩写 -->\n<a :href=\"url\">...</a>\n\n<!-- 动态参数的缩写 (2.6.0+) -->\n<a :[key]=\"url\"> ... </a>\n\n\n<!-- 完整语法 -->\n<a v-on:click=\"doSomething\">...</a>\n\n<!-- 缩写 -->\n<a @click=\"doSomething\">...</a>\n\n<!-- 动态参数的缩写 (2.6.0+) -->\n<a @[event]=\"doSomething\"> ... </a>\n```\n\n`:` 与 `@` 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。\n\n### 8. 计算属性\n\n```html\n<div id=\"example\">\n  {{ message.split('').reverse().join('') }}\n</div>\n```\n\n这里是想要显示变量 `message` 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。\n\n所以，对于任何复杂逻辑，你都应当使用**计算属性**\n\n例如：\n\n```html\n<div id=\"example\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n```\n\n```javascript\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    // 计算属性的 getter\n    reversedMessage: function () {\n      // `this` 指向 vm 实例\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n\n//页面显示：\n//Original message: \"Hello\"\n//Computed reversed message: \"olleH\"\n```\n\n声明了一个计算属性`reversedMessage`；我们提供的函数将用作property `vm.reversedMessage`的getter函数\n\n```javascript\nconsole.log(vm.reversedMessage) // olleH\nvm.message = 'Goodbye'\nconsole.log(vm.reversedMessage) // => 'eybdooG'\n```\n\n你可以打开浏览器的控制台，自行修改例子中的 vm。`vm.reversedMessage` 的值始终取决于 `vm.message` 的值。\n\n你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 `vm.reversedMessage` 依赖于 `vm.message`，因此当 `vm.message` 发生改变时，所有依赖 `vm.reversedMessage` 的绑定也会更新。以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的。\n\n#### 计算属性 VS 方法\n\n使用表达式中调用方法同样可以达到上面的结果\n\n```html\n<p>Reversed message: \"{{ reversedMessage() }}\"</p>\n```\n\n```javascript\n// 在组件中\nmethods: {\n  reversedMessage: function () {\n    return this.message.split('').reverse().join('')\n  }\n}\n```\n\n我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是**计算属性是基于它们的响应式依赖进行缓存的**。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 `message` 还没有发生改变，多次访问 `reversedMessage` 计算属性会立即返回之前的计算结果，而不必再次执行函数。\n\n这也同样意味着下面的计算属性将不再更新，因为 `Date.now()` 不是响应式依赖：\n\n```\ncomputed: {\n  now: function () {\n    return Date.now()\n  }\n}\n```\n\n相比之下，每当触发重新渲染时，调用方法将**总会**再次执行函数。\n\n我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 **A**，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 **A**。如果没有缓存，我们将不可避免的多次执行 **A** 的 getter！如果你不希望有缓存，请用方法来替代。\n\n#### 计算属性 VS 侦听属性\n\n侦听属性：vue提供了一种更通用的方式来观察和响应vue实例上的数据变动；当有一些数据需要随着其他数据变动而变动时；很容易滥用watch;**通常更好的做法是使用计算属性而不是命令式的watch回调**；\n\n```html\n<div id=\"demo\">{{ fullName }}</div>\n```\n\n```javascript\nvar vm = new Vue({\n  el: '#demo',\n  data: {\n    firstName: 'Foo',\n    lastName: 'Bar',\n    fullName: 'Foo Bar'\n  },\n  //侦听属性watch \n  watch: {\n    firstName: function (val) {\n      this.fullName = val + ' ' + this.lastName\n    },\n    lastName: function (val) {\n      this.fullName = this.firstName + ' ' + val\n    }\n  },\n  //计算属性\n  computed: {\n    fullName: function () {\n      return this.firstName + ' ' + this.lastName\n    }\n  }\n})\n\n```\n\n#### 计算属性的setter\n\n计算属性默认只有getter，自己可以提供一个setter\n\n```javascript\ncomputed: {\n  fullName: {\n    // getter\n    get: function () {\n      return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n      var names = newValue.split(' ')\n      this.firstName = names[0]\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n```\n\n现在再运行 `vm.fullName = 'John Doe'` 时，setter 会被调用，`vm.firstName` 和 `vm.lastName` 也会相应地被更新。\n\n### 9. 侦听器\n\n当需要在数据变化时执行异步或开销较大的操作时，watch是最有用的；同时也可以自定义侦听器；\n\n```html\n<div id=\"watch-example\">\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\">\n  </p>\n  <p>{{ answer }}</p>\n</div>\n```\n\n```javascript\n<!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 -->\n<!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 -->\n<script src=\"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js\"></script>\n<script>\nvar watchExampleVM = new Vue({\n  el: '#watch-example',\n  data: {\n    question: '',\n    answer: 'I cannot give you an answer until you ask a question!'\n  },\n  watch: {\n    // 如果 `question` 发生改变，这个函数就会运行\n    question: function (newQuestion, oldQuestion) {\n      this.answer = 'Waiting for you to stop typing...'\n      this.debouncedGetAnswer()\n    }\n  },\n  created: function () {\n    // `_.debounce` 是一个通过 Lodash 限制操作频率的函数。\n    // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率\n    // AJAX 请求直到用户输入完毕才会发出。想要了解更多关于\n    // `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，\n    // 请参考：https://lodash.com/docs#debounce\n    this.debouncedGetAnswer = _.debounce(this.getAnswer, 500)\n  },\n  methods: {\n    getAnswer: function () {\n      if (this.question.indexOf('?') === -1) {\n        this.answer = 'Questions usually contain a question mark. ;-)'\n        return\n      }\n      this.answer = 'Thinking...'\n      var vm = this\n      axios.get('https://yesno.wtf/api')\n        .then(function (response) {\n          vm.answer = _.capitalize(response.data.answer)\n        })\n        //异常捕获\n        .catch(function (error) {\n          vm.answer = 'Error! Could not reach the API. ' + error\n        })\n    }\n  }\n})\n</script>\n```\n\n使用 `watch` 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的\n\n### 10. class与style绑定\n\n将 `v-bind` 用于 `class` 和 `style` 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组\n\n#### 10.1 绑定html class\n\n##### 10.1.1对象语法\n\n方式一：内联\n\n```html\n<div\n  class=\"static\"\n  v-bind:class=\"{ active: isActive, 'text-danger': hasError }\"\n></div>\n//data\ndata: {\n  isActive: true,\n  hasError: false\n}\n```\n\n方式二：绑定的数据对象不必内联定义在模板里\n\n```html\n<div v-bind:class=\"classObject\"></div>\n//vue data\ndata: {\n  classObject: {\n    active: true,\n    'text-danger': false\n  }\n}\n```\n\n方式三：绑定一个返回对象的计算属性（常用）\n\n```html\n<div v-bind:class=\"classObject\"></div>\n\n//vue data\ndata: {\n  isActive: true,\n  error: null\n},\ncomputed: {\n  classObject: function () {\n    return {\n      active: this.isActive && !this.error,\n      'text-danger': this.error && this.error.type === 'fatal'\n    }\n  }\n}\n```\n\n##### 10.1.2 数组语法\n\n","slug":"vue","published":1,"updated":"2021-07-23T07:18:16.840Z","layout":"post","photos":[],"link":"","_id":"ckrg1jzts000jdw3q0y49aczc","content":"<p>Object.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。</p>\n<h3 id=\"1-export\"><a href=\"#1-export\" class=\"headerlink\" title=\"1. export\"></a>1. export</h3><hr>\n<p>用于规定模块的对外接口，export输出变量和方法、类</p>\n<ul>\n<li><p>变量</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// profile.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> firstName = <span class=\"string\">&#x27;Michael&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> lastName = <span class=\"string\">&#x27;Jackson&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> year = <span class=\"number\">1958</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简写--优先使用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;firstName, lastName, year&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>方法</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果想为输入的变量重新命名， 可以使用AS 关键字重新命名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; buildMenus <span class=\"keyword\">as</span> buildMenus&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/menu&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-export-default\"><a href=\"#2-export-default\" class=\"headerlink\" title=\"2. export default\"></a>2. export default</h3><p>为模块指定默认输出， 使用import命令的时候，用户需要知道所要加载的变量名和函数名，否则无法加载；了解模块有哪些方法和属性比较麻烦，使用export default命令，为模块指定默认输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码是一个模块文件export-default.js。默认输出1个函数；</p>\n<p>与export命令的区别：其他模块加载该模块是，import命令可以为该匿名函数指定任意名字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> customName <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./export-default&#x27;</span>;</span><br><span class=\"line\">customName(); <span class=\"comment\">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码的<code>import</code>命令，可以用任意名称指向<code>export-default.js</code>输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时<code>import</code>命令后面，不使用大括号。</p>\n<p>本质上，<code>export default</code>就是输出一个叫做<code>default</code>的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// modules.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;add <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"comment\">// export default add;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> foo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;modules&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"comment\">// import foo from &#x27;modules&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p>正是因为<code>export default</code>命令其实只是输出一个叫做<code>default</code>的变量，所以它后面不能跟变量声明语句。</p>\n<p><strong>总结：</strong></p>\n<ul>\n<li><p>  export命令对外接口是有名称的且<code>import</code>命令从模块导入的变量名与被导入模块对外接口的名称相同，而export default命令对外输出的变量名可以是任意的，这时<code>import</code>命令后面，不使用大括号。</p>\n</li>\n<li><p>  <code>export default</code>命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此<code>export default</code>命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应<code>export default</code>命令。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//menu.js</span></span><br><span class=\"line\"><span class=\"comment\">//get请求获取所有的菜单信息</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildMenus</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus/build&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;get&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//post 请求保存数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//delete 请求删除数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">del</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus/&#x27;</span> + id,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;delete&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//put请求修改数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">edit</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;put&#x27;</span>,</span><br><span class=\"line\">    data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//app.vue</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; buildMenus &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/menu&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Const、var、let\"><a href=\"#3-Const、var、let\" class=\"headerlink\" title=\"3. Const、var、let\"></a>3. Const、var、let</h3><p> ES5 中作用域有：全局作用域、函数作用域。没有块作用域的概念。</p>\n<p> ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 通过var定义的变量可以跨块作用域访问到。</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// console.log(b); // 报错，</span></span><br><span class=\"line\"><span class=\"comment\">// 可见，通过var定义的变量不能跨函数作用域访问到</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i ++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 4   (循环结束i已经是4，所以此处i为4)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"comment\">// if语句和for语句中用var定义的变量可以在外面访问到，</span></span><br><span class=\"line\"><span class=\"comment\">// 可见，if语句和for语句属于块作用域，不属于函数作用域</span></span><br></pre></td></tr></table></figure>\n\n<p>三者的区别：</p>\n<ol>\n<li> var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。</li>\n<li> let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。</li>\n<li> const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 块作用域</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// c = 4; // 报错</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> aa;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> bb;</span><br><span class=\"line\">  <span class=\"comment\">// const cc; // 报错</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(aa); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(bb); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(b); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(c); // 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数作用域</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> e = <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f = <span class=\"number\">7</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 5</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// 6  </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f); <span class=\"comment\">// 7 </span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// console.log(d); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(e); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(f); // 报错</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意：<strong>const定义的对象属性是否可以改变</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span> : <span class=\"string\">&#x27;jiuke&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.name = <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name)<span class=\"comment\">//person对象的name属性确实被修改了</span></span><br></pre></td></tr></table></figure>\n\n<p>因为对象是引用类型的，person中保存的仅是对象的指针，这就意味着，const仅保证指针不发生改变，修改对象的属性不会改变对象的指针，所以是被允许的。也就是说const定义的引用类型只要指针不发生改变，其他的不论如何改变都是允许的。</p>\n<p>然后我们试着修改一下指针，让person指向一个新对象，果然报错</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">&#x27;jiuke&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">&#x27;test&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-promise\"><a href=\"#4-promise\" class=\"headerlink\" title=\"4. promise\"></a>4. promise</h3><p>promise用途：异步编程的一种解决方案。</p>\n<p>优点：比传统的解决方案——回调函数和事件——更合理和更强大。</p>\n<p>三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基本用法：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    resolve(value);<span class=\"comment\">//表示异步操作成功</span></span><br><span class=\"line\">    reject(error);<span class=\"comment\">//表示异步操作失败</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//promise常用的几个方法</span></span><br><span class=\"line\"><span class=\"comment\">//1. 异步状态为成功时调用第一个函数，为失败时调用第二个函数。then方法的第二个参数可选。</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;&#125;,<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 异步状态为失败时调用。</span></span><br><span class=\"line\">promise.catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. promise异步状态为失败时或then方法中抛出错误都会执行catch方法。</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;&#125;,<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4. 不管状态如何都会执行的操作。</span></span><br><span class=\"line\">promise.finally(<span class=\"function\">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-生命周期\"><a href=\"#5-生命周期\" class=\"headerlink\" title=\"5. 生命周期\"></a>5. 生命周期</h3><img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"img\" style=\"zoom:50%;\">\n\n<h3 id=\"6-模版语法\"><a href=\"#6-模版语法\" class=\"headerlink\" title=\"6. 模版语法\"></a>6. 模版语法</h3><h4 id=\"v-once\"><a href=\"#v-once\" class=\"headerlink\" title=\"v-once\"></a>v-once</h4><p>执行一次性插值，当数据变化的时候，该内容不会更新；可能会影响该节点其他的数据绑定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>这个将不会改变: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h4><p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用v-html;</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var rawHtml = &quot;<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是个使用v-htmls<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using v-html directive: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">&quot;rawHtml&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Attribute\"><a href=\"#Attribute\" class=\"headerlink\" title=\"Attribute\"></a><a href=\"https://cn.vuejs.org/v2/guide/syntax.html#Attribute\">Attribute</a></h4><p>Mustache ({}) 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 <a href=\"https://cn.vuejs.org/v2/api/#v-bind\"><code>v-bind</code> 指令</a>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;dynamicId&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> 元素中</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:disabled</span>=<span class=\"string\">&quot;isButtonDisabled&quot;</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三元表达式\"><a href=\"#三元表达式\" class=\"headerlink\" title=\"三元表达式\"></a>三元表达式</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; number + 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-指令Directives\"><a href=\"#7-指令Directives\" class=\"headerlink\" title=\"7. 指令Directives\"></a>7. 指令Directives</h3><p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊 attribute。指令 attribute 的值预期是<strong>单个 JavaScript 表达式</strong> (<code>v-for</code> 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//v-if 指令将根据表达式 seen 的值的真假来插入/移除 <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 元素。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，<code>v-bind</code> 指令可以用于响应式地更新 HTML attribute</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动态参数\"><a href=\"#动态参数\" class=\"headerlink\" title=\"动态参数\"></a>动态参数</h4><p> 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:</span>[<span class=\"attr\">attributeName</span>] = <span class=\"string\">&quot;url&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t这里的attributeName会被作为一个javascript表达式进行动态赋值，求得的值会作为最终的参数来使用</span></span><br><span class=\"line\"><span class=\"comment\">如果VUE实例有一个data. property. attributeName， 其值为href， 那么绑定将等价于v-bind:href</span></span><br><span class=\"line\"><span class=\"comment\">---&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>绑定处理函数：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:</span>[<span class=\"attr\">eventName</span>]=<span class=\"string\">&quot;dosomething&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>对动态参数的值的约束</p>\n<p>  动态参数预期会求出一个字符串，异常情况下值为 <code>null</code>。这个特殊的 <code>null</code> 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p>\n</li>\n<li><p>对动态参数表达式的约束</p>\n<p>  动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：</p>\n</li>\n</ul>\n<h4 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h4><p>修饰符（modifier）是以半角句号<code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定；例如<code> .prevent</code>修饰符告诉v-on指令对触发的事件调用event.preventDefault();</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span> = <span class=\"string\">&quot;onSubmit&quot;</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"缩写\"><a href=\"#缩写\" class=\"headerlink\" title=\"缩写\"></a>缩写</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:</span>[<span class=\"attr\">key</span>]=<span class=\"string\">&quot;url&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @[<span class=\"attr\">event</span>]=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>:</code> 与 <code>@</code> 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。</p>\n<h3 id=\"8-计算属性\"><a href=\"#8-计算属性\" class=\"headerlink\" title=\"8. 计算属性\"></a>8. 计算属性</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里是想要显示变量 <code>message</code> 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。</p>\n<p>所以，对于任何复杂逻辑，你都应当使用<strong>计算属性</strong></p>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Original message: &quot;&#123;&#123; message &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#example&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Hello&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 计算属性的 getter</span></span><br><span class=\"line\">    <span class=\"attr\">reversedMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// `this` 指向 vm 实例</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//页面显示：</span></span><br><span class=\"line\"><span class=\"comment\">//Original message: &quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//Computed reversed message: &quot;olleH&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>声明了一个计算属性<code>reversedMessage</code>；我们提供的函数将用作property <code>vm.reversedMessage</code>的getter函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// olleH</span></span><br><span class=\"line\">vm.message = <span class=\"string\">&#x27;Goodbye&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// =&gt; &#x27;eybdooG&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以打开浏览器的控制台，自行修改例子中的 vm。<code>vm.reversedMessage</code> 的值始终取决于 <code>vm.message</code> 的值。</p>\n<p>你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 <code>vm.reversedMessage</code> 依赖于 <code>vm.message</code>，因此当 <code>vm.message</code> 发生改变时，所有依赖 <code>vm.reversedMessage</code> 的绑定也会更新。以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的。</p>\n<h4 id=\"计算属性-VS-方法\"><a href=\"#计算属性-VS-方法\" class=\"headerlink\" title=\"计算属性 VS 方法\"></a>计算属性 VS 方法</h4><p>使用表达式中调用方法同样可以达到上面的结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Reversed message: &quot;&#123;&#123; reversedMessage() &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在组件中</span></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">reversedMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>\n<p>这也同样意味着下面的计算属性将不再更新，因为 <code>Date.now()</code> 不是响应式依赖：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  now: function () &#123;</span><br><span class=\"line\">    return Date.now()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>相比之下，每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数。</p>\n<p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <strong>A</strong>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong>。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 getter！如果你不希望有缓存，请用方法来替代。</p>\n<h4 id=\"计算属性-VS-侦听属性\"><a href=\"#计算属性-VS-侦听属性\" class=\"headerlink\" title=\"计算属性 VS 侦听属性\"></a>计算属性 VS 侦听属性</h4><p>侦听属性：vue提供了一种更通用的方式来观察和响应vue实例上的数据变动；当有一些数据需要随着其他数据变动而变动时；很容易滥用watch;<strong>通常更好的做法是使用计算属性而不是命令式的watch回调</strong>；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#demo&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Bar&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"string\">&#x27;Foo Bar&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//侦听属性watch </span></span><br><span class=\"line\">  <span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.fullName = val + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.fullName = <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//计算属性</span></span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"计算属性的setter\"><a href=\"#计算属性的setter\" class=\"headerlink\" title=\"计算属性的setter\"></a>计算属性的setter</h4><p>计算属性默认只有getter，自己可以提供一个setter</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  <span class=\"attr\">fullName</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// getter</span></span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// setter</span></span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在再运行 <code>vm.fullName = &#39;John Doe&#39;</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。</p>\n<h3 id=\"9-侦听器\"><a href=\"#9-侦听器\" class=\"headerlink\" title=\"9. 侦听器\"></a>9. 侦听器</h3><p>当需要在数据变化时执行异步或开销较大的操作时，watch是最有用的；同时也可以自定义侦听器；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;watch-example&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    Ask a yes/no question:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;question&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span><br><span class=\"line\">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">var</span> watchExampleVM = <span class=\"keyword\">new</span> Vue(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#watch-example&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">data</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">question</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">answer</span>: <span class=\"string\">&#x27;I cannot give you an answer until you ask a question!&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">watch</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 如果 `question` 发生改变，这个函数就会运行</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">question</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newQuestion, oldQuestion</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Waiting for you to stop typing...&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.debouncedGetAnswer()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 请参考：https://lodash.com/docs#debounce</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">this</span>.debouncedGetAnswer = _.debounce(<span class=\"built_in\">this</span>.getAnswer, <span class=\"number\">500</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">getAnswer</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.question.indexOf(<span class=\"string\">&#x27;?&#x27;</span>) === -<span class=\"number\">1</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Questions usually contain a question mark. ;-)&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">return</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Thinking...&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">var</span> vm = <span class=\"built_in\">this</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      axios.get(<span class=\"string\">&#x27;https://yesno.wtf/api&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          vm.answer = _.capitalize(response.data.answer)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"comment\">//异常捕获</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          vm.answer = <span class=\"string\">&#x27;Error! Could not reach the API. &#x27;</span> + error</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>watch</code> 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的</p>\n<h3 id=\"10-class与style绑定\"><a href=\"#10-class与style绑定\" class=\"headerlink\" title=\"10. class与style绑定\"></a>10. class与style绑定</h3><p>将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组</p>\n<h4 id=\"10-1-绑定html-class\"><a href=\"#10-1-绑定html-class\" class=\"headerlink\" title=\"10.1 绑定html class\"></a>10.1 绑定html class</h4><h5 id=\"10-1-1对象语法\"><a href=\"#10-1-1对象语法\" class=\"headerlink\" title=\"10.1.1对象语法\"></a>10.1.1对象语法</h5><p>方式一：内联</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">&quot;static&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">//data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  hasError: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方式二：绑定的数据对象不必内联定义在模板里</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">//vue data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  classObject: &#123;</span><br><span class=\"line\">    active: true,</span><br><span class=\"line\">    &#x27;text-danger&#x27;: false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方式三：绑定一个返回对象的计算属性（常用）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//vue data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  error: null</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  classObject: function () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      active: this.isActive &amp;&amp; !this.error,</span><br><span class=\"line\">      &#x27;text-danger&#x27;: this.error &amp;&amp; this.error.type === &#x27;fatal&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"10-1-2-数组语法\"><a href=\"#10-1-2-数组语法\" class=\"headerlink\" title=\"10.1.2 数组语法\"></a>10.1.2 数组语法</h5>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>Object.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。</p>\n<h3 id=\"1-export\"><a href=\"#1-export\" class=\"headerlink\" title=\"1. export\"></a>1. export</h3><hr>\n<p>用于规定模块的对外接口，export输出变量和方法、类</p>\n<ul>\n<li><p>变量</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// profile.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> firstName = <span class=\"string\">&#x27;Michael&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> lastName = <span class=\"string\">&#x27;Jackson&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> year = <span class=\"number\">1958</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简写--优先使用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;firstName, lastName, year&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>方法</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果想为输入的变量重新命名， 可以使用AS 关键字重新命名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; buildMenus <span class=\"keyword\">as</span> buildMenus&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/menu&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-export-default\"><a href=\"#2-export-default\" class=\"headerlink\" title=\"2. export default\"></a>2. export default</h3><p>为模块指定默认输出， 使用import命令的时候，用户需要知道所要加载的变量名和函数名，否则无法加载；了解模块有哪些方法和属性比较麻烦，使用export default命令，为模块指定默认输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码是一个模块文件export-default.js。默认输出1个函数；</p>\n<p>与export命令的区别：其他模块加载该模块是，import命令可以为该匿名函数指定任意名字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> customName <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./export-default&#x27;</span>;</span><br><span class=\"line\">customName(); <span class=\"comment\">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码的<code>import</code>命令，可以用任意名称指向<code>export-default.js</code>输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时<code>import</code>命令后面，不使用大括号。</p>\n<p>本质上，<code>export default</code>就是输出一个叫做<code>default</code>的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// modules.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;add <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"comment\">// export default add;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> foo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;modules&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"comment\">// import foo from &#x27;modules&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p>正是因为<code>export default</code>命令其实只是输出一个叫做<code>default</code>的变量，所以它后面不能跟变量声明语句。</p>\n<p><strong>总结：</strong></p>\n<ul>\n<li><p>  export命令对外接口是有名称的且<code>import</code>命令从模块导入的变量名与被导入模块对外接口的名称相同，而export default命令对外输出的变量名可以是任意的，这时<code>import</code>命令后面，不使用大括号。</p>\n</li>\n<li><p>  <code>export default</code>命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此<code>export default</code>命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应<code>export default</code>命令。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//menu.js</span></span><br><span class=\"line\"><span class=\"comment\">//get请求获取所有的菜单信息</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildMenus</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus/build&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;get&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//post 请求保存数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//delete 请求删除数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">del</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus/&#x27;</span> + id,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;delete&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//put请求修改数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">edit</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;put&#x27;</span>,</span><br><span class=\"line\">    data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//app.vue</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; buildMenus &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/menu&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Const、var、let\"><a href=\"#3-Const、var、let\" class=\"headerlink\" title=\"3. Const、var、let\"></a>3. Const、var、let</h3><p> ES5 中作用域有：全局作用域、函数作用域。没有块作用域的概念。</p>\n<p> ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 通过var定义的变量可以跨块作用域访问到。</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// console.log(b); // 报错，</span></span><br><span class=\"line\"><span class=\"comment\">// 可见，通过var定义的变量不能跨函数作用域访问到</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i ++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 4   (循环结束i已经是4，所以此处i为4)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"comment\">// if语句和for语句中用var定义的变量可以在外面访问到，</span></span><br><span class=\"line\"><span class=\"comment\">// 可见，if语句和for语句属于块作用域，不属于函数作用域</span></span><br></pre></td></tr></table></figure>\n\n<p>三者的区别：</p>\n<ol>\n<li> var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。</li>\n<li> let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。</li>\n<li> const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 块作用域</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// c = 4; // 报错</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> aa;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> bb;</span><br><span class=\"line\">  <span class=\"comment\">// const cc; // 报错</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(aa); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(bb); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(b); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(c); // 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数作用域</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> e = <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f = <span class=\"number\">7</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 5</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// 6  </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f); <span class=\"comment\">// 7 </span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// console.log(d); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(e); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(f); // 报错</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意：<strong>const定义的对象属性是否可以改变</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span> : <span class=\"string\">&#x27;jiuke&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.name = <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name)<span class=\"comment\">//person对象的name属性确实被修改了</span></span><br></pre></td></tr></table></figure>\n\n<p>因为对象是引用类型的，person中保存的仅是对象的指针，这就意味着，const仅保证指针不发生改变，修改对象的属性不会改变对象的指针，所以是被允许的。也就是说const定义的引用类型只要指针不发生改变，其他的不论如何改变都是允许的。</p>\n<p>然后我们试着修改一下指针，让person指向一个新对象，果然报错</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">&#x27;jiuke&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">&#x27;test&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-promise\"><a href=\"#4-promise\" class=\"headerlink\" title=\"4. promise\"></a>4. promise</h3><p>promise用途：异步编程的一种解决方案。</p>\n<p>优点：比传统的解决方案——回调函数和事件——更合理和更强大。</p>\n<p>三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基本用法：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    resolve(value);<span class=\"comment\">//表示异步操作成功</span></span><br><span class=\"line\">    reject(error);<span class=\"comment\">//表示异步操作失败</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//promise常用的几个方法</span></span><br><span class=\"line\"><span class=\"comment\">//1. 异步状态为成功时调用第一个函数，为失败时调用第二个函数。then方法的第二个参数可选。</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;&#125;,<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 异步状态为失败时调用。</span></span><br><span class=\"line\">promise.catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. promise异步状态为失败时或then方法中抛出错误都会执行catch方法。</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;&#125;,<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4. 不管状态如何都会执行的操作。</span></span><br><span class=\"line\">promise.finally(<span class=\"function\">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-生命周期\"><a href=\"#5-生命周期\" class=\"headerlink\" title=\"5. 生命周期\"></a>5. 生命周期</h3><img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"img\" style=\"zoom:50%;\">\n\n<h3 id=\"6-模版语法\"><a href=\"#6-模版语法\" class=\"headerlink\" title=\"6. 模版语法\"></a>6. 模版语法</h3><h4 id=\"v-once\"><a href=\"#v-once\" class=\"headerlink\" title=\"v-once\"></a>v-once</h4><p>执行一次性插值，当数据变化的时候，该内容不会更新；可能会影响该节点其他的数据绑定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>这个将不会改变: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h4><p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用v-html;</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var rawHtml = &quot;<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是个使用v-htmls<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using v-html directive: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">&quot;rawHtml&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Attribute\"><a href=\"#Attribute\" class=\"headerlink\" title=\"Attribute\"></a><a href=\"https://cn.vuejs.org/v2/guide/syntax.html#Attribute\">Attribute</a></h4><p>Mustache ({}) 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 <a href=\"https://cn.vuejs.org/v2/api/#v-bind\"><code>v-bind</code> 指令</a>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;dynamicId&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> 元素中</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:disabled</span>=<span class=\"string\">&quot;isButtonDisabled&quot;</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三元表达式\"><a href=\"#三元表达式\" class=\"headerlink\" title=\"三元表达式\"></a>三元表达式</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; number + 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-指令Directives\"><a href=\"#7-指令Directives\" class=\"headerlink\" title=\"7. 指令Directives\"></a>7. 指令Directives</h3><p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊 attribute。指令 attribute 的值预期是<strong>单个 JavaScript 表达式</strong> (<code>v-for</code> 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//v-if 指令将根据表达式 seen 的值的真假来插入/移除 <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 元素。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，<code>v-bind</code> 指令可以用于响应式地更新 HTML attribute</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动态参数\"><a href=\"#动态参数\" class=\"headerlink\" title=\"动态参数\"></a>动态参数</h4><p> 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:</span>[<span class=\"attr\">attributeName</span>] = <span class=\"string\">&quot;url&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t这里的attributeName会被作为一个javascript表达式进行动态赋值，求得的值会作为最终的参数来使用</span></span><br><span class=\"line\"><span class=\"comment\">如果VUE实例有一个data. property. attributeName， 其值为href， 那么绑定将等价于v-bind:href</span></span><br><span class=\"line\"><span class=\"comment\">---&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>绑定处理函数：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:</span>[<span class=\"attr\">eventName</span>]=<span class=\"string\">&quot;dosomething&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>对动态参数的值的约束</p>\n<p>  动态参数预期会求出一个字符串，异常情况下值为 <code>null</code>。这个特殊的 <code>null</code> 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p>\n</li>\n<li><p>对动态参数表达式的约束</p>\n<p>  动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：</p>\n</li>\n</ul>\n<h4 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h4><p>修饰符（modifier）是以半角句号<code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定；例如<code> .prevent</code>修饰符告诉v-on指令对触发的事件调用event.preventDefault();</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span> = <span class=\"string\">&quot;onSubmit&quot;</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"缩写\"><a href=\"#缩写\" class=\"headerlink\" title=\"缩写\"></a>缩写</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:</span>[<span class=\"attr\">key</span>]=<span class=\"string\">&quot;url&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @[<span class=\"attr\">event</span>]=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>:</code> 与 <code>@</code> 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。</p>\n<h3 id=\"8-计算属性\"><a href=\"#8-计算属性\" class=\"headerlink\" title=\"8. 计算属性\"></a>8. 计算属性</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里是想要显示变量 <code>message</code> 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。</p>\n<p>所以，对于任何复杂逻辑，你都应当使用<strong>计算属性</strong></p>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Original message: &quot;&#123;&#123; message &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#example&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Hello&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 计算属性的 getter</span></span><br><span class=\"line\">    <span class=\"attr\">reversedMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// `this` 指向 vm 实例</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//页面显示：</span></span><br><span class=\"line\"><span class=\"comment\">//Original message: &quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//Computed reversed message: &quot;olleH&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>声明了一个计算属性<code>reversedMessage</code>；我们提供的函数将用作property <code>vm.reversedMessage</code>的getter函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// olleH</span></span><br><span class=\"line\">vm.message = <span class=\"string\">&#x27;Goodbye&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// =&gt; &#x27;eybdooG&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以打开浏览器的控制台，自行修改例子中的 vm。<code>vm.reversedMessage</code> 的值始终取决于 <code>vm.message</code> 的值。</p>\n<p>你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 <code>vm.reversedMessage</code> 依赖于 <code>vm.message</code>，因此当 <code>vm.message</code> 发生改变时，所有依赖 <code>vm.reversedMessage</code> 的绑定也会更新。以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的。</p>\n<h4 id=\"计算属性-VS-方法\"><a href=\"#计算属性-VS-方法\" class=\"headerlink\" title=\"计算属性 VS 方法\"></a>计算属性 VS 方法</h4><p>使用表达式中调用方法同样可以达到上面的结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Reversed message: &quot;&#123;&#123; reversedMessage() &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在组件中</span></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">reversedMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>\n<p>这也同样意味着下面的计算属性将不再更新，因为 <code>Date.now()</code> 不是响应式依赖：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  now: function () &#123;</span><br><span class=\"line\">    return Date.now()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>相比之下，每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数。</p>\n<p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <strong>A</strong>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong>。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 getter！如果你不希望有缓存，请用方法来替代。</p>\n<h4 id=\"计算属性-VS-侦听属性\"><a href=\"#计算属性-VS-侦听属性\" class=\"headerlink\" title=\"计算属性 VS 侦听属性\"></a>计算属性 VS 侦听属性</h4><p>侦听属性：vue提供了一种更通用的方式来观察和响应vue实例上的数据变动；当有一些数据需要随着其他数据变动而变动时；很容易滥用watch;<strong>通常更好的做法是使用计算属性而不是命令式的watch回调</strong>；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#demo&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Bar&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"string\">&#x27;Foo Bar&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//侦听属性watch </span></span><br><span class=\"line\">  <span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.fullName = val + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.fullName = <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//计算属性</span></span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"计算属性的setter\"><a href=\"#计算属性的setter\" class=\"headerlink\" title=\"计算属性的setter\"></a>计算属性的setter</h4><p>计算属性默认只有getter，自己可以提供一个setter</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  <span class=\"attr\">fullName</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// getter</span></span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// setter</span></span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在再运行 <code>vm.fullName = &#39;John Doe&#39;</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。</p>\n<h3 id=\"9-侦听器\"><a href=\"#9-侦听器\" class=\"headerlink\" title=\"9. 侦听器\"></a>9. 侦听器</h3><p>当需要在数据变化时执行异步或开销较大的操作时，watch是最有用的；同时也可以自定义侦听器；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;watch-example&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    Ask a yes/no question:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;question&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span><br><span class=\"line\">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">var</span> watchExampleVM = <span class=\"keyword\">new</span> Vue(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#watch-example&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">data</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">question</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">answer</span>: <span class=\"string\">&#x27;I cannot give you an answer until you ask a question!&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">watch</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 如果 `question` 发生改变，这个函数就会运行</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">question</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newQuestion, oldQuestion</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Waiting for you to stop typing...&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.debouncedGetAnswer()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 请参考：https://lodash.com/docs#debounce</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">this</span>.debouncedGetAnswer = _.debounce(<span class=\"built_in\">this</span>.getAnswer, <span class=\"number\">500</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">getAnswer</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.question.indexOf(<span class=\"string\">&#x27;?&#x27;</span>) === -<span class=\"number\">1</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Questions usually contain a question mark. ;-)&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">return</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Thinking...&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">var</span> vm = <span class=\"built_in\">this</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      axios.get(<span class=\"string\">&#x27;https://yesno.wtf/api&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          vm.answer = _.capitalize(response.data.answer)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"comment\">//异常捕获</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          vm.answer = <span class=\"string\">&#x27;Error! Could not reach the API. &#x27;</span> + error</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>watch</code> 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的</p>\n<h3 id=\"10-class与style绑定\"><a href=\"#10-class与style绑定\" class=\"headerlink\" title=\"10. class与style绑定\"></a>10. class与style绑定</h3><p>将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组</p>\n<h4 id=\"10-1-绑定html-class\"><a href=\"#10-1-绑定html-class\" class=\"headerlink\" title=\"10.1 绑定html class\"></a>10.1 绑定html class</h4><h5 id=\"10-1-1对象语法\"><a href=\"#10-1-1对象语法\" class=\"headerlink\" title=\"10.1.1对象语法\"></a>10.1.1对象语法</h5><p>方式一：内联</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">&quot;static&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">//data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  hasError: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方式二：绑定的数据对象不必内联定义在模板里</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">//vue data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  classObject: &#123;</span><br><span class=\"line\">    active: true,</span><br><span class=\"line\">    &#x27;text-danger&#x27;: false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方式三：绑定一个返回对象的计算属性（常用）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//vue data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  error: null</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  classObject: function () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      active: this.isActive &amp;&amp; !this.error,</span><br><span class=\"line\">      &#x27;text-danger&#x27;: this.error &amp;&amp; this.error.type === &#x27;fatal&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"10-1-2-数组语法\"><a href=\"#10-1-2-数组语法\" class=\"headerlink\" title=\"10.1.2 数组语法\"></a>10.1.2 数组语法</h5>"}],"PostAsset":[{"_id":"source/_posts/ElasticSearch/image-20200806170145844.png","slug":"image-20200806170145844.png","post":"ckrg1jztg0001dw3q620shtph","modified":0,"renderable":0},{"_id":"source/_posts/ElasticSearch/image-20200807093208470.png","slug":"image-20200807093208470.png","post":"ckrg1jztg0001dw3q620shtph","modified":0,"renderable":0},{"_id":"source/_posts/ElasticSearch/image-20200807093309761.png","slug":"image-20200807093309761.png","post":"ckrg1jztg0001dw3q620shtph","modified":0,"renderable":0},{"_id":"source/_posts/ElasticSearch/image-20201211095101816.png","slug":"image-20201211095101816.png","post":"ckrg1jztg0001dw3q620shtph","modified":0,"renderable":0},{"_id":"source/_posts/ElasticSearch/image-20201211095258901.png","slug":"image-20201211095258901.png","post":"ckrg1jztg0001dw3q620shtph","modified":0,"renderable":0},{"_id":"source/_posts/lock01/read_writer_Lock1.png","slug":"read_writer_Lock1.png","post":"ckrg1jztm0006dw3qcdsu1x5g","modified":0,"renderable":0},{"_id":"source/_posts/nginx/image-20201210100736952.png","slug":"image-20201210100736952.png","post":"ckrg1jztn0008dw3qh9z53hma","modified":0,"renderable":0},{"_id":"source/_posts/nginx/image-20201210103251475.png","slug":"image-20201210103251475.png","post":"ckrg1jztn0008dw3qh9z53hma","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ckrg1jztg0001dw3q620shtph","tag_id":"ckrg1jztk0004dw3q7otgh30k","_id":"ckrg1jztp000bdw3q4n4p4esp"},{"post_id":"ckrg1jztj0003dw3q1tf3gwrh","tag_id":"ckrg1jzto000adw3q8tv6clvm","_id":"ckrg1jztq000fdw3qdl0ehtm2"},{"post_id":"ckrg1jztm0006dw3qcdsu1x5g","tag_id":"ckrg1jztq000edw3q1o9f905o","_id":"ckrg1jztr000hdw3q5zgb02ir"},{"post_id":"ckrg1jztn0008dw3qh9z53hma","tag_id":"ckrg1jztq000gdw3q7t6i85ab","_id":"ckrg1jztr000idw3qbtlw0kch"},{"post_id":"ckrg1jzts000jdw3q0y49aczc","tag_id":"ckrg1jztt000kdw3q06pl66eo","_id":"ckrg1jztt000ldw3qdxig6z61"}],"Tag":[{"name":"elasticSearch,kibana","_id":"ckrg1jztk0004dw3q7otgh30k"},{"name":"Optional","_id":"ckrg1jzto000adw3q8tv6clvm"},{"name":"lock","_id":"ckrg1jztq000edw3q1o9f905o"},{"name":"nginx","_id":"ckrg1jztq000gdw3q7t6i85ab"},{"name":"vue","_id":"ckrg1jztt000kdw3q06pl66eo"}]}}