{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/about/1.jpeg","path":"about/1.jpeg","modified":0,"renderable":0},{"_id":"source/about/img.png","path":"about/img.png","modified":0,"renderable":0},{"_id":"themes/pure/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/pure/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/pure/source/images/ico-to-top.png","path":"images/ico-to-top.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","path":"images/xingqiu-qrcode.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","path":"images/donate/wechatpayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","path":"images/favatar/SzsFox-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/pure/.gitignore","hash":"dbb41a2f30c98cb9de173d82736c46266c901cda","modified":1633853645156},{"_id":"themes/pure/_config.yml","hash":"695e25e3b6d152a17e24dad2a61c1eb0877f6712","modified":1653731057700},{"_id":"themes/pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1633853645156},{"_id":"themes/pure/README.cn.md","hash":"a634af4addbb57088935e060e8ec6035ea7bab76","modified":1633853645156},{"_id":"themes/pure/README.md","hash":"5861cec81712af9197a210fd5212d007aad8b0de","modified":1633853645156},{"_id":"themes/pure/_config.yml.example","hash":"7313478dbef0a284855dc2c81f653808f9ab8ed8","modified":1648385447509},{"_id":"themes/pure/_source/favicon.ico","hash":"80efb1836c542af64366401b6e79cbad51037f24","modified":1633853645158},{"_id":"themes/pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1633853645172},{"_id":"themes/pure/languages/en.yml","hash":"6f4e76ddc08a0f6db580868ceaadb8284add27fe","modified":1653730410798},{"_id":"themes/pure/languages/default.yml","hash":"6f4e76ddc08a0f6db580868ceaadb8284add27fe","modified":1653730403291},{"_id":"themes/pure/languages/zh-CN.yml","hash":"1171b20538b2f3af24270efce95ee238f19d5706","modified":1653730806765},{"_id":"themes/pure/languages/zh-TW.yml","hash":"6d27c3114be539b8783ffce944f68b2e26a8c3b9","modified":1633853645159},{"_id":"themes/pure/layout/archive.ejs","hash":"ded5d953b35666e30f4c6e48e2d2c62af8d95ebf","modified":1633853645170},{"_id":"themes/pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1633853645170},{"_id":"themes/pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1633853645169},{"_id":"themes/pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1633853645170},{"_id":"themes/pure/layout/category.ejs","hash":"3ca5651bbce7b0c280c906468f2eb18c2e55ebcb","modified":1633853645170},{"_id":"themes/pure/layout/categories.ejs","hash":"22a2bc1712dd9ba1a3027e875d636132d334fb00","modified":1633853645170},{"_id":"themes/pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1633853645171},{"_id":"themes/pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1633853645171},{"_id":"themes/pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1633853645171},{"_id":"themes/pure/layout/layout.ejs","hash":"f898409619d19d0221684f12d8479b8f176c829f","modified":1653730333642},{"_id":"themes/pure/layout/tag.ejs","hash":"df60564c162f7ad3422f8959dfea19351857a7cd","modified":1633853645171},{"_id":"themes/pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1633853645171},{"_id":"themes/pure/layout/tags.ejs","hash":"29f19a6ed10f8b1f069259a7aeaaacddcfaa2ed4","modified":1633853645172},{"_id":"themes/pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1633853645190},{"_id":"themes/pure/source/favicon.ico","hash":"80efb1836c542af64366401b6e79cbad51037f24","modified":1633853645191},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/bug_report.md","hash":"83d211c67c12e8c1f6e9f796cfd0cecbf5160e15","modified":1633853645155},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/custom.md","hash":"84208538d48505ee8e49812cb336eb9882e08dc7","modified":1633853645155},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1633853645155},{"_id":"themes/pure/_source/404/index.md","hash":"eeea2ea3b36703189d4f8b88afc8182e0abfcc6b","modified":1648389963396},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1633853645157},{"_id":"themes/pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1633853645157},{"_id":"themes/pure/_source/about/index.md","hash":"9bd068994bad42ccaf89af31bb760c98f000041c","modified":1648389963333},{"_id":"themes/pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1633853645158},{"_id":"themes/pure/_source/books/index.md","hash":"83d20b7ee077dd2beda1f72bcb794e1def4b44a7","modified":1648389963473},{"_id":"themes/pure/_source/categories/index.md","hash":"aa3afc1a3240466a97f7290ac7bd49282c8a041a","modified":1648389963433},{"_id":"themes/pure/_source/repository/index.md","hash":"75b962a2b2c6b36b20be8719e65c18fa66066f36","modified":1648389963320},{"_id":"themes/pure/_source/tags/index.md","hash":"a6d29b0391c1f5f429e6ca8129f3e6c7be54bdf1","modified":1648389963340},{"_id":"themes/pure/layout/_common/head.ejs","hash":"a48ef0fa22712b29ec044b9e5134461f3a21c10d","modified":1633853645160},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"cdc48ec70d9202b947f2a9334234d038d7014a7d","modified":1633853645160},{"_id":"themes/pure/layout/_common/header.ejs","hash":"3d739d1e2b2991927c08ec222db123830a44a519","modified":1633853645160},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"977f97f3636947006ad738e502858c46d4cd5ec7","modified":1633853645160},{"_id":"themes/pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1633853645160},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1633853645161},{"_id":"themes/pure/layout/_common/script.ejs","hash":"c0eaa6b27ef96298e7fb3bc6f497b9e9da71c17a","modified":1653734454883},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1633853645161},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"c66c86d6a6a90e00494c380603426fc0f4006311","modified":1633853645161},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"13039fec017332029122ef99901755fcecbfc8ea","modified":1633853645161},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"e39dc762d9fe238cede462532e40eaa3d8651122","modified":1633853645161},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1633853645161},{"_id":"themes/pure/layout/_partial/article-copy-code.ejs","hash":"2c0685555074c3f8773f25a50c1eaeddabe6ab63","modified":1653736829254},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"4d6793f50d41fbd47dc50aa36b24d496006bba6c","modified":1633853645161},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"7b80319daeb63401d1745b81cd9a6d1d21a4fb60","modified":1633853645161},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"9f755b0da1ea928dece32c2050d8a04b3a9fb13b","modified":1633853645162},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"0f9b71de0087d1f777d92c5a0f3873971aec5a5b","modified":1633853645162},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"46da1ee327b8af107335146bd8fc131eee6c9c4f","modified":1633853645164},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"41a319642da5af07d6cfb8525796aa610b721879","modified":1633853645162},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1633853645164},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"152538ceceb0fdef65c46470ebf0189f7b891c5b","modified":1633853645164},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"6f951510bab9dc15474b6664e0329defccf29a30","modified":1633853645167},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"e756a81f8c20a187fb863b9689f2f1fa15e2f4e1","modified":1633853645166},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"ee21c4e7ccac26ff2ab6d1d178447fd11fea4d7e","modified":1633853645167},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"8f1be01e70a15b2c31ae57d8c6bce54622ebf8a7","modified":1633853645167},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"fb9b5f16029f2ccef4b83cf4facfdcdd748b65b4","modified":1633853645167},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1633853645167},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"14f2e7d4c1055ff6a5f5867dc0e9a9f6f4c28fe1","modified":1633853645167},{"_id":"themes/pure/layout/_script/search.ejs","hash":"7be33dc260ce788aa1a2cd3bd0386d95057533cb","modified":1633853645167},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1633853645168},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1633853645168},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1633853645168},{"_id":"themes/pure/layout/_script/go-top.ejs","hash":"d257f12a38346faabeaca1b8594647f8d155011b","modified":1653794956602},{"_id":"themes/pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1633853645168},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1633853645168},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1633853645168},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1633853645169},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1633853645169},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"acd27451be52703e670ce0b313f2da6fa24071e4","modified":1633853645169},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1633853645169},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1633853645169},{"_id":"themes/pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1633853645192},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1633853645192},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1633853645193},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1633853645193},{"_id":"themes/pure/source/images/favicon.ico","hash":"d49cc39708a0623a83fdeaefb46de268b818f318","modified":1633853645198},{"_id":"themes/pure/source/images/logo.png","hash":"8e6dc6af4dda2ceb1eb72b3609479f3cb4aca13f","modified":1633853645198},{"_id":"themes/pure/source/images/ico-to-top.png","hash":"815e2cc7c887810a9d8259fb51f15275fe38b86f","modified":1653794607441},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1633853645198},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1633853645199},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1633853645198},{"_id":"themes/pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1633853645199},{"_id":"themes/pure/source/js/application.js","hash":"3d7891920e3d4b286e99206d0c9e5f3e9dd29b2b","modified":1653730575540},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"3c0da69fcea6ccfd97b82d50e740107a88eec5c4","modified":1633853645162},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1633853645162},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"7d4979652998abf92a64bfae8157b70d6e514057","modified":1633853645163},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"a251dc34d660601a2e8b7d98b3bfe2b9023dbbce","modified":1633853645163},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"8dec44b1f2b35c2a4966ee6fab8f6acd50bd251a","modified":1636985034562},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1633853645163},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"95eabc0fe4033ec61b240a16eeaf7dc62a9e3da1","modified":1633853645163},{"_id":"themes/pure/layout/_partial/post/gitalk.ejs","hash":"353b1dafc0b9a6efb66d195e74127e3bfb73d74a","modified":1633853645163},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"ec3ccf322432afc2761f860c5a3000ac34d46e4c","modified":1633853645163},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1633853645163},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1633853645164},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1633853645164},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1633853645165},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1633853645164},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1633853645165},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"77defb41a1613a758ff5a6a5128c6107fc584190","modified":1633853645165},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"a051e3eddc75586e69131c29ab8c89d69626e0fd","modified":1633853645165},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"fb01f1631c3ae7fe6211dc03233506cb344229be","modified":1633853645165},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"a64852076483395738a398deb4c10bdb0f3b7b71","modified":1633853645165},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"5ab997d5ee4475d2f89f882fab4a52648dbe0e30","modified":1633853645166},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"acf81f9a59dc45f197d723f70484de5fcd166577","modified":1633853645166},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"095649a173573d03b5845c2e331ec7be976b152a","modified":1633853645166},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1633853645166},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1633853645166},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1633853645198},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1633853645198},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1633853645198},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1633853645173},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1633853645176},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1633853645175},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1633853645177},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1633853645178},{"_id":"themes/pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1633853645199},{"_id":"themes/pure/source/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1633853645200},{"_id":"themes/pure/source/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1633853645201},{"_id":"themes/pure/source/css/style.css","hash":"3d3e8ff811a2d4f2524f5e7b027f8a2b6a16fb0c","modified":1653881674560},{"_id":"themes/pure/source/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1633853645191},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1633853645193},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1633853645200},{"_id":"source/CNAME","hash":"0921dce0665fa8071633e0d0450f83a70a161c54","modified":1633853645049},{"_id":"source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1633853645049},{"_id":"source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1633853645049},{"_id":"source/404/index.md","hash":"eeea2ea3b36703189d4f8b88afc8182e0abfcc6b","modified":1648389963328},{"_id":"source/about/1.jpeg","hash":"ab5780333463d247f770513f6d3cfbe7ade0b598","modified":1627006562646},{"_id":"source/about/index.md","hash":"e8bc1f40016f48e8781e7e1fefe81317d4243185","modified":1653729464296},{"_id":"source/books/index.md","hash":"5598b4322d26a4196fe8987c664f1641ddd86cdb","modified":1653729639996},{"_id":"source/categories/index.md","hash":"75fcc28624f4b838ce971c9edba55db20257cb46","modified":1653729663090},{"_id":"source/links/index.md","hash":"2eae70222a2b3391f61c8c61b9168112deffe094","modified":1653729687578},{"_id":"source/repository/index.md","hash":"25ad01439f6e5284e919ed1434abdb0f10cd921d","modified":1653729626265},{"_id":"source/tags/index.md","hash":"c6d8d8d6e547d20fe8edcdfbe509025e3577cd60","modified":1648389963489},{"_id":"source/_posts/2022/03/linux-minio.md","hash":"7434b97ba6ba029071ef6d7ee1765a864bfdee19","modified":1648385549493},{"_id":"source/_posts/2022/03/message-oriented-middleware.md","hash":"3b79c30ee4737276082fa59730476cb0a8f66521","modified":1648389963404},{"_id":"source/_posts/2022/03/linux-search-file.md","hash":"cc8b9dbcd39c43f6ef03e8c24e2e07845cf0d94d","modified":1653401105489},{"_id":"source/_posts/2022/04/export-database-file.md","hash":"a0e1c30f292f62e65e5fef6c671e4798b01e2fbb","modified":1650192929500},{"_id":"source/_posts/2022/04/lambda.md","hash":"38247d4a4a0d3a941f6121fc8816e44d0ec13ada","modified":1650768210253},{"_id":"source/_posts/2022/04/uml.md","hash":"2ae5b804eb8a7593935027defc71c759c62e7e24","modified":1651713952573},{"_id":"source/_posts/2022/04/swagger.md","hash":"ae698cca1f45c0bd4eb2dd824ff5fb52a79d96d6","modified":1653282856803},{"_id":"source/_posts/2022/05/Apache-Http-Server.md","hash":"0643294782615529c83fc84ce894d612bff13767","modified":1653403594323},{"_id":"source/_posts/2022/05/design-principle.md","hash":"eb1ddf87a8dd3e9bf82e8914130a730badca454d","modified":1653191283288},{"_id":"source/_posts/2022/05/gitlab.md","hash":"3440b9f5211e219d78ebad57e79c3e8d108fdb90","modified":1653874009312},{"_id":"source/_posts/2021/06/jdk-install.md","hash":"a79b7496c46463d8bf027e38b637af2c9f786fe6","modified":1648535264644},{"_id":"source/_posts/2021/06/mysql-install.md","hash":"66633a055cf73c3412e364c5156ac8009dea6934","modified":1649221395266},{"_id":"source/_posts/2021/08/algoright-2.md","hash":"57afeb5bb7dacf95bce010d779df1c3ea5dbd0d1","modified":1648389963431},{"_id":"source/_posts/2022/05/jstack.md","hash":"64e27f78e4371a5ba3180367dadfb6ede0c19d53","modified":1654068401446},{"_id":"source/_posts/2021/08/mysql行列转置.md","hash":"49fd86ea653ed07e343c2f3c861f05441d2e6a03","modified":1649238704953},{"_id":"source/_posts/2021/08/mysqldumpslow分析慢查询日志.md","hash":"4ae79c21a41e53802d916ae5628b85c4660ac520","modified":1649238704950},{"_id":"source/_posts/2021/07/.DS_Store","hash":"dd9e4772c0c2aaa83b5d92f0f4bf45cd4defe4cb","modified":1638686852599},{"_id":"source/_posts/2021/07/ConcurrentHashMap.md","hash":"1c56a755bb3b6dddca9d6cd764f7ec656c5a0bf8","modified":1648389963445},{"_id":"source/_posts/2021/07/algorithm.md","hash":"1cb8aac304934d4c76d4c22b0c9563da41bef97f","modified":1648389963470},{"_id":"source/_posts/2021/07/ElasticSearch.md","hash":"6d7cfb278b0e1e9e90cb586ab6c85a116591f86a","modified":1648389963362},{"_id":"source/_posts/2021/07/cache-consistency.md","hash":"762d6ce1189b7f1c428f80d20e765a79caee6df2","modified":1648389963477},{"_id":"source/_posts/2021/07/bug-sprigCloud.md","hash":"702c08bb8239f1810c5e0e87475db7cda7276216","modified":1648389963465},{"_id":"source/_posts/2021/07/classLoad.md","hash":"1682b402d55aab5bd54a36905d36748d80e531c5","modified":1648389963354},{"_id":"source/_posts/2021/07/hexo-spawn-failed.md","hash":"83e9593ab026552173990ddaa64d98a7a0a6748d","modified":1651714172331},{"_id":"source/_posts/2021/07/hexo-encrypt.md","hash":"ed2fb402807d8a9b870e96509fc96a63da06a72f","modified":1651882190618},{"_id":"source/_posts/2021/07/interest.md","hash":"47698c4e82bb7cd9d52b188f47fb2e35c5559809","modified":1648389963392},{"_id":"source/_posts/2021/07/java-inner-class-01.md","hash":"7e62f1835650abcf9e18332e7af4450253cb9599","modified":1648389963357},{"_id":"source/_posts/2021/07/java8特性.md","hash":"a9c22e4630c5e78955159d7de2c03bbd0f4d9949","modified":1648389963457},{"_id":"source/_posts/2021/07/lock01.md","hash":"90d017ba57d61bbecea3ed3ef8935b8987766f2e","modified":1648389963480},{"_id":"source/_posts/2021/07/mvcc.md","hash":"cdd94f1f1449707f90888697e473172fa6d843fa","modified":1649238704961},{"_id":"source/_posts/2021/07/mycat.md","hash":"5677b50c8396f224b06a64c892f2eecf2b0b2811","modified":1648389963312},{"_id":"source/_posts/2021/07/mysql-transcation.md","hash":"b99e81544a8190c7fb338b98b92d698816e0136f","modified":1649238704943},{"_id":"source/_posts/2021/07/mysql-index.md","hash":"6516441e4d0c5fc50fb80350c5a35ffb381c10a8","modified":1649238704939},{"_id":"source/_posts/2021/07/outOfMemoryError.md","hash":"3a5f27cab973b57b636a6c16e70dc407c8c53b45","modified":1648389963447},{"_id":"source/_posts/2021/07/mysql.md","hash":"b905873d61eb87c507dfbc5db1254c868fb8d83a","modified":1649238704967},{"_id":"source/_posts/2021/07/mysql数据库锁.md","hash":"8b07978bdaff414ce9e9451ab7a8009fd83890bd","modified":1649238704964},{"_id":"source/_posts/2021/07/redis_install.md","hash":"02f1c5add4b1ecc1d2cdf3c341e28a408f019691","modified":1653191144918},{"_id":"source/_posts/2021/07/redis-usage-scenario.md","hash":"f09b1da1a93ede138b0b7bcb98da4b32023deac4","modified":1648389963486},{"_id":"source/_posts/2021/07/springboot-yml.md","hash":"4ef291e9d5821fa0ab4f37d146128bf033206a06","modified":1648389963467},{"_id":"source/_posts/2021/07/thread-status.md","hash":"1d52512d59b72f176bce7f2fbe037a40e30f12c2","modified":1654483120428},{"_id":"source/_posts/2021/07/volatile.md","hash":"cdba4dc4023b3316044e4fd95966870e0284c555","modified":1654483052781},{"_id":"source/_posts/2021/07/sql-01.md","hash":"4b88030552018810703795f92f26231a4ddc39c3","modified":1649238704934},{"_id":"source/_posts/2021/07/thread-01.md","hash":"f50a0c81db264eabf5be7673557d972edfbaf5d2","modified":1648389963452},{"_id":"source/_posts/2021/07/valine.md","hash":"098352a7f6ff1b00a63637d0988fb5e1c7b6b72f","modified":1651715001800},{"_id":"source/_posts/2021/07/vue.md","hash":"e7de94e8567eacfeafda2884f85c586cab44fbf2","modified":1650870169241},{"_id":"source/_posts/2021/07/在线修改静态文件.md","hash":"392a266060be2fda9942f51dea8625c45964f897","modified":1650167248555},{"_id":"source/_posts/2021/09/locksupport.md","hash":"5f6e33d30fe24a710fb750d1237f59d26e8455b6","modified":1654483052776},{"_id":"source/_posts/2021/10/Installing-CentOS-system.md","hash":"cd03110774bb4f4cce684d57bc6853c132b04496","modified":1648535162010},{"_id":"source/_posts/2021/10/list-to-string.md","hash":"fc3a23c4aa3a4aa20a360bc12b684103d1585147","modified":1648389963359},{"_id":"source/_posts/2021/11/algorithm-dinary-search.md","hash":"133148bdb689d9ca6ff761ceba6b4145afc9c5c3","modified":1648389963335},{"_id":"source/_posts/2021/10/shutdown.md","hash":"9e3ed82f79942e0f338897dc9bd705992d042024","modified":1648389963482},{"_id":"source/_posts/2021/11/sql-model.md","hash":"cae97fba12f1371fceaa3450bb5389b7121bdb11","modified":1649238704957},{"_id":"source/_posts/2021/11/mysql-column.md","hash":"83aedab2dd81642d32ea1ae4c8fcd0241c16c19e","modified":1649238704947},{"_id":"source/_posts/2021/12/docker-01.md","hash":"07b7d2a39a8fb7124577ff52a9d8e915329a24da","modified":1648885556614},{"_id":"source/_posts/2021/12/docker-mysql.md","hash":"82b4482892faf800ef4b979c16ddbcd234b27e7e","modified":1648885999044},{"_id":"source/_posts/2021/12/docker-nginx.md","hash":"8eb18347aa3e0d914ff05c4d179072c69fe43d33","modified":1648389963386},{"_id":"source/_posts/2021/12/nginx-03.md","hash":"71fc8f1f8a8abea730b67bd094060b54caf3632e","modified":1648389963463},{"_id":"source/_posts/2021/12/nginx-04.md","hash":"e849bfeae272c8f59ad7fad9d318a7ee4402aacb","modified":1648389963384},{"_id":"source/_posts/2021/12/nginx-md.md","hash":"08b34276b7eafce70f06a0c3142c982e5fd09913","modified":1648389963377},{"_id":"source/_posts/2021/12/nginx-02.md","hash":"fe43feacb7925fde2f3d4d74dacdcbb3823e1779","modified":1648389963400},{"_id":"source/_posts/2022/03/linux-minio/11.png","hash":"c37413b4546d3e3fde83e7916634dddab4e106ec","modified":1647932520743},{"_id":"source/_posts/2022/03/linux-minio/10.png","hash":"0e578144f447daf607c254723262a9e9ac6d53b0","modified":1647931684019},{"_id":"source/_posts/2022/03/linux-minio/3_2.png","hash":"b43446dc0aa064f74e102db6011a49b179caace3","modified":1647932103208},{"_id":"source/_posts/2022/03/linux-minio/4.png","hash":"11b794752aa1acad6728daa859f129b662db66f8","modified":1647932191081},{"_id":"source/_posts/2022/03/linux-minio/5.png","hash":"31de4b322c84c54c6f858bbd1391c5342abd9d0e","modified":1647932273707},{"_id":"source/_posts/2022/03/linux-minio/6.png","hash":"b64720d8798c2d09306ac2147edd56ac16c18375","modified":1647932451341},{"_id":"source/_posts/2022/03/linux-minio/7.png","hash":"bc6f137caa09602e34667a0f23bb0511b2021717","modified":1647932415471},{"_id":"source/_posts/2022/03/linux-search-file/2.png","hash":"6b372e3bbbadd238335713fd16f851556a66be00","modified":1647669667398},{"_id":"source/_posts/2022/03/linux-search-file/5.png","hash":"3ff17aae9ac6e604d0777f004624c78d9d47df63","modified":1647673459358},{"_id":"source/_posts/2022/03/message-oriented-middleware/1.png","hash":"5dfb3680ea8e3568d79111d9d9e4fb75a907cf21","modified":1648026747334},{"_id":"source/_posts/2022/03/message-oriented-middleware/3.png","hash":"d99286339bffb8853a504654bf877268950072ec","modified":1648267675584},{"_id":"source/_posts/2022/03/message-oriented-middleware/4.png","hash":"e42294659def9b37cace9b269581081bb57d0073","modified":1648267875386},{"_id":"source/_posts/2022/03/message-oriented-middleware/5.png","hash":"8f841560adc7e442009408e40e923e0f30e1f77c","modified":1648301676667},{"_id":"source/_posts/2022/03/message-oriented-middleware/6.png","hash":"4c6fe53b4cefd1b0702b6b941a365386b09502cd","modified":1648302101506},{"_id":"source/_posts/2022/04/swagger/3.png","hash":"502e7b0cafe3a538ebcde8d6d61bf994414ea093","modified":1650187836676},{"_id":"source/_posts/2022/04/uml/2.png","hash":"2a42d9804389ae49469e7770d37cebb85f0312ea","modified":1650876269454},{"_id":"source/_posts/2022/04/uml/5.png","hash":"48cc2ac36b9823b8704c6fd2a4fb8758f30df174","modified":1650888844155},{"_id":"source/_posts/2022/04/uml/6.png","hash":"60f77da49f725da626d482bcad8d5c5c0c2c91be","modified":1650889033523},{"_id":"source/_posts/2022/04/uml/7.png","hash":"28c83f56cda3a3ee27368f5535a4c77435c8e30e","modified":1650889085319},{"_id":"source/_posts/2022/04/uml/8.png","hash":"4b2e348ac54321b52adea1665c31207222f2334b","modified":1650889127701},{"_id":"source/_posts/2022/05/Apache-Http-Server/1.png","hash":"cba7fb1895a5b253f0a989741191037cfb8ba0d1","modified":1653402747937},{"_id":"source/_posts/2022/05/gitlab/1.png","hash":"f1561fa1cab6fb811e380dd07929df0ff39dcd7a","modified":1653703633339},{"_id":"source/_posts/2022/05/design-principle/1.png","hash":"8a3bc5cee66e7875dd7d8f69aa43b136a26f816e","modified":1652684145542},{"_id":"source/_posts/2022/05/design-principle/2.png","hash":"36a4fcf43be6e2dc7611521e5e53431a35b0f0b3","modified":1652686563803},{"_id":"source/_posts/2022/05/gitlab/10.png","hash":"1d275e8f29e9943345753732ea2594bbceff0884","modified":1653706049626},{"_id":"source/_posts/2022/05/gitlab/2.png","hash":"7ef393aed17ee257447e485f6d250d0951ec1b11","modified":1653704604351},{"_id":"source/_posts/2022/05/gitlab/3.png","hash":"a8d027167a23dcbbe2f106c50b8b1185bdc212ee","modified":1653704726911},{"_id":"source/_posts/2022/05/gitlab/6.png","hash":"baaa03b764348a3879370f9e5b1d9aa081bcb4f8","modified":1653705998366},{"_id":"source/_posts/2022/05/gitlab/8.png","hash":"75c01902dbdae63ddbd27546adab5927b4da6682","modified":1653706023539},{"_id":"source/_posts/2022/05/jstack/5.png","hash":"5e3d271636f424c11a45e4f06f78464ca9fa0a1b","modified":1651846566305},{"_id":"source/_posts/2022/05/jstack/jps.png","hash":"d54b6886db40d32ad27d353da7c6b0d45d941864","modified":1651843358050},{"_id":"source/_posts/2021/06/mysql-install/5.png","hash":"96d2636dd00fb9513d2f720c69f4e39420b64405","modified":1648539328895},{"_id":"source/_posts/2021/06/mysql-install/6.png","hash":"25e9fafdf37af94e74700134fb5480217e5b1dfd","modified":1648539429268},{"_id":"source/_posts/2021/06/mysql-install/q1.png","hash":"bce35b4d4d9826d161cf2b6dfc3d3d64159299f3","modified":1648540140940},{"_id":"source/_posts/2021/06/mysql-install/q2.png","hash":"0e1ed931b1910b04e9b6da6475d0bc86c38f3aab","modified":1648609036084},{"_id":"source/_posts/2021/08/mysql行列转置/01.png","hash":"b89d0a368f18ac572dda4695f6cbe372f279ebcd","modified":1633853645153},{"_id":"source/_posts/2021/08/mysql行列转置/02.png","hash":"7d748d9f6d6c60bdcbf8aca5ab8890d209239a7b","modified":1633853645153},{"_id":"source/_posts/2021/07/ConcurrentHashMap/01.png","hash":"111fdc2e7e640ca6fccf8721eec0f158e32fb1c1","modified":1633853645050},{"_id":"source/_posts/2021/07/ConcurrentHashMap/02.png","hash":"12007c1f0661add3711542ff63a6fde24d2b2516","modified":1633853645050},{"_id":"source/_posts/2021/07/ElasticSearch/image-20200806170145844.png","hash":"c98bc90ae0f0f216dd7fec89b7b712e055ed2ad1","modified":1633853645051},{"_id":"source/_posts/2021/07/ElasticSearch/image-20201211095101816.png","hash":"ab9071ebe82c1cb6b352e96b946573c234812f1a","modified":1633853645053},{"_id":"source/_posts/2021/07/algorithm/01.png","hash":"c56633cc5a8872412e7e7dc4d804bdc9089142d2","modified":1633853645054},{"_id":"source/_posts/2021/07/algorithm/02.png","hash":"b670f25cc9fe9a3167396dbea29777acb8058db8","modified":1633853645055},{"_id":"source/_posts/2021/07/ElasticSearch/image-20201211095258901.png","hash":"c9b64529bc173cdb220e8ed4dc085914b91f93a4","modified":1633853645053},{"_id":"source/_posts/2021/07/algorithm/03.png","hash":"d5a50b438cf6ed1702265d86ba43544cdda21c6e","modified":1633853645056},{"_id":"source/_posts/2021/07/bug-sprigCloud/01.png","hash":"c4a711f619567903ca4594e33d852783dd9f8d8c","modified":1633853645057},{"_id":"source/_posts/2021/07/classLoad/02.png","hash":"86dffdfb2c8ce61214bb849c096af41ca70bed21","modified":1633853645061},{"_id":"source/_posts/2021/07/interest/3_5_8.png","hash":"193e1a023943bc5656e01ef063f42732971db16e","modified":1633853645064},{"_id":"source/_posts/2021/07/lock01/read_writer_Lock1.png","hash":"c313df303034ea20d7755e1c852508078989d8fb","modified":1633853645065},{"_id":"source/_posts/2021/07/mvcc/02.png","hash":"fb4b67fb5dd68379252c5ceeed223205451add33","modified":1633853645067},{"_id":"source/_posts/2021/07/mvcc/03.png","hash":"f7f700d6a81adb11c2ffc01c9ad1d19b5b43e596","modified":1633853645067},{"_id":"source/_posts/2021/07/mvcc/04.png","hash":"b695fa332822b8c862321b4e2499745a1b6f2ca9","modified":1633853645067},{"_id":"source/_posts/2021/07/mysql-index/01.png","hash":"54cd4793929b29298555767248f44b1f867292e0","modified":1633853645092},{"_id":"source/_posts/2021/07/mysql/image-20200727224117281.png","hash":"68e6828d09f7daebb9a859acd87756dc88da68b5","modified":1633853645118},{"_id":"source/_posts/2021/07/mysql/image-20200727231112059.png","hash":"ca143ba3c9308f2cf8e4cdffb51ab0cc66a60531","modified":1633853645119},{"_id":"source/_posts/2021/07/mysql-index/02.png","hash":"bb67fbd6d341bb29c9b23aa3b1e02caf5ed5802b","modified":1633853645092},{"_id":"source/_posts/2021/07/mysql-index/03.png","hash":"f85542f17ee81b68a42fa3639b7ffba74a8bd321","modified":1633853645092},{"_id":"source/_posts/2021/07/mycat/image-20201104204430049.png","hash":"3b9961e1dfc06111312d7fe8afd161ec583d6289","modified":1633853645069},{"_id":"source/_posts/2021/07/mycat/image-20201104204933409.png","hash":"00d84f09649bd8f5af97df8c797b5be80b36189a","modified":1633853645071},{"_id":"source/_posts/2021/07/mycat/image-20201104205054233.png","hash":"5556b40ae89e29d25930df47fefafaafe552a240","modified":1633853645071},{"_id":"source/_posts/2021/07/mycat/image-20201104205319372.png","hash":"98eb034972454a5babf583b6085f0e52f1885b6c","modified":1633853645072},{"_id":"source/_posts/2021/07/mycat/image-20201104210117373.png","hash":"0f609f2a13b028a42334b5c30defcb8da3d6919c","modified":1633853645076},{"_id":"source/_posts/2021/07/mycat/image-20201107212552852.png","hash":"8bbf68419505c255be696590e60910d5694cfaef","modified":1633853645085},{"_id":"source/_posts/2021/07/mycat/image-20201107213638624.png","hash":"eea90ac8885947323777c137aea5e6c4a51b5f88","modified":1633853645085},{"_id":"source/_posts/2021/07/mycat/image-20201107215437139.png","hash":"5e8b13d8e119fa6813d910dd0c85c9f1dfd89fba","modified":1633853645087},{"_id":"source/_posts/2021/07/mycat/image-20201107215605251.png","hash":"60b33dace301869dc8470ef787949cdd5cdc7cd8","modified":1633853645087},{"_id":"source/_posts/2021/07/mycat/image-20201107220049532.png","hash":"a4d9a1a501b6b74bbab8f6078675cdd0d4e5d52a","modified":1633853645087},{"_id":"source/_posts/2021/07/mycat/image-20201127094703483.png","hash":"f857cf4391f4a15818f7d11127df23ab2e19ff64","modified":1633853645088},{"_id":"source/_posts/2021/07/mycat/image-20201127103212598.png","hash":"e08b1661c6208ead3c24e074e382c0486d796545","modified":1633853645088},{"_id":"source/_posts/2021/07/mycat/image-20201127104159580.png","hash":"a6b70b3b261e89e4d8b0d615c069d3180101da9a","modified":1633853645088},{"_id":"source/_posts/2021/07/mycat/image-20201128135953635.png","hash":"18752a442d910714686f729fdd48b0f086751196","modified":1633853645089},{"_id":"source/_posts/2021/07/mycat/image-20201129110838590.png","hash":"ade0139b7a7daa20e9d5369701b71c8dc7e1280d","modified":1633853645089},{"_id":"source/_posts/2021/07/mycat/image-20201219102742172.png","hash":"e70acc0b0f994711194e155b1a5b61451692cbdb","modified":1633853645090},{"_id":"source/_posts/2021/07/mycat/image-20201215152125176.png","hash":"451328599a4358567019ae6265cc084048daca28","modified":1633853645089},{"_id":"source/_posts/2021/07/mysql-transcation/image-20200727224117281.png","hash":"68e6828d09f7daebb9a859acd87756dc88da68b5","modified":1633853645093},{"_id":"source/_posts/2021/07/mysql-transcation/image-20200727231112059.png","hash":"ca143ba3c9308f2cf8e4cdffb51ab0cc66a60531","modified":1633853645093},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202213520136.png","hash":"6c74d02c03add5d40f7be56bdca5ef54994de67b","modified":1633853645102},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202214957559.png","hash":"21b3c64e6c15ab8c367d54659254df3db4973acb","modified":1633853645104},{"_id":"source/_posts/2021/07/outOfMemoryError/02.png","hash":"a898d849242743c8573b744a0c9194220661a57d","modified":1633853645127},{"_id":"source/_posts/2021/07/redis-usage-scenario/03.png","hash":"ec320a53ed8e0af403d19035ff6b8f8f6575fcfa","modified":1633853645143},{"_id":"source/_posts/2021/07/thread-status/01.jpg","hash":"1a0b91f489c429c2978096e68f768df0c6a1fdf0","modified":1633853645151},{"_id":"source/_posts/2021/07/thread-status/02.png","hash":"47d2b13b858d66a8a08b3b6df720aca50ad7c148","modified":1654068272322},{"_id":"source/_posts/2021/07/valine/1.png","hash":"214770b02830880d8d67d52bf14d5e7a6c3b5512","modified":1648389398342},{"_id":"source/_posts/2021/07/volatile/01.png","hash":"5fd741f1eee38e918cb00834a1315f53c1231f1c","modified":1633853645151},{"_id":"source/_posts/2021/10/Installing-CentOS-system/1.png","hash":"f34020c2e41afb0e89340cdfe3ba14e9252db497","modified":1633855847217},{"_id":"source/_posts/2021/10/Installing-CentOS-system/4-1.png","hash":"e9b15df079dbcdb8b8997154ebfc2e199b1ed5cf","modified":1633857863273},{"_id":"source/_posts/2021/10/Installing-CentOS-system/4-2.png","hash":"167b6541c729f3f13da39404e8893293f9e3c8aa","modified":1633858086018},{"_id":"source/_posts/2021/12/docker-mysql/5.png","hash":"e339ccb957fbc115c8b56f9b94352ef6f0cd6e1e","modified":1639059967819},{"_id":"source/_posts/2021/12/docker-nginx/2.png","hash":"dbb091b062d005b3b55f0175af97a7ff9583ca8a","modified":1639057678479},{"_id":"source/_posts/2021/12/docker-nginx/3.png","hash":"1c38a521b3b5309559fd989d708511005609b17d","modified":1639058454286},{"_id":"source/_posts/2021/12/docker-nginx/4.png","hash":"0fc9514a56c1d919fd2b0111107c79c9e4324e4a","modified":1639058516826},{"_id":"source/_posts/2021/12/docker-nginx/5.png","hash":"d4b0491ced37594733288d34a8109d9a568f0441","modified":1639058703677},{"_id":"source/_posts/2021/12/docker-nginx/7.png","hash":"48e4f049a01abda02c657c07e1526b0fb30f949a","modified":1639665308990},{"_id":"source/_posts/2021/12/docker-nginx/8.png","hash":"63e82cd6465f9a099d325ab532b5b4486c997eb3","modified":1639665376722},{"_id":"source/_posts/2021/12/docker-nginx/6.png","hash":"de9be7b440110b0371f41d5abb99e013303d6c20","modified":1639060488667},{"_id":"source/_posts/2021/12/docker-nginx/9.png","hash":"c1735fcecebdcb96790fa62d57d95a7b113dacb5","modified":1639668114992},{"_id":"source/_posts/2021/12/nginx-02/image-20201210100736952.png","hash":"1212b42387d66bd9b65c94512385a4c182c5679f","modified":1633853645119},{"_id":"source/_posts/2021/12/nginx-02/image-20201210103251475.png","hash":"bcc1327d5b4046748d82e10628040e1bf09c91bc","modified":1633853645119},{"_id":"source/_posts/2021/12/nginx-04/2.png","hash":"17e7f8baa7eb538366c99898fd0901dee037f16c","modified":1638694744779},{"_id":"source/_posts/2021/12/nginx-04/1.png","hash":"38e9fe132bf3242373c3509ad42874dcc69189ab","modified":1638694558780},{"_id":"source/_posts/2021/12/nginx-md/2.png","hash":"53d34a5bb034c47549a09d5ee2eae25c30bfe319","modified":1638688226707},{"_id":"source/_posts/2022/03/linux-minio/13.png","hash":"fc433ce105ecc690c4a5cde53fbd118d6dd7e2d8","modified":1647932671897},{"_id":"source/_posts/2022/03/linux-minio/12.png","hash":"36962b8e10cfdf26456f451087ffada9a64bdeb4","modified":1647932549480},{"_id":"source/_posts/2022/03/linux-minio/14.png","hash":"05021003b4c69ebca2fe244258defc16845b6498","modified":1647937840274},{"_id":"source/_posts/2022/03/linux-minio/15.png","hash":"f6820192467db36736d7f52a6424cacae8768fc0","modified":1647937918119},{"_id":"source/_posts/2022/03/linux-minio/16.png","hash":"3c8e000783f44cc60153c5e2db45cfa657ffa2ba","modified":1647938049664},{"_id":"source/_posts/2022/03/linux-minio/3_1.png","hash":"52fb304193ba432d12c69209ec7d345c0fa57345","modified":1647932052573},{"_id":"source/_posts/2022/03/linux-minio/9.png","hash":"3bfdfd107ade41f4f5912e6dee91c24419ffb2e2","modified":1647930649323},{"_id":"source/_posts/2022/03/linux-minio/3.png","hash":"b6f25f5b0bb2823adf14cbfe55e191aa9f753f62","modified":1647931929032},{"_id":"source/_posts/2022/03/linux-search-file/1.png","hash":"8a121a7fb5d0dc1f301697fce79cb7914d8fa310","modified":1647670646891},{"_id":"source/_posts/2022/03/linux-search-file/3.png","hash":"9e68980ebe701bfbec8ada7615726d099e31bd1e","modified":1647672624295},{"_id":"source/_posts/2022/03/message-oriented-middleware/2.png","hash":"8a515b17d52e64a9321983a287e602b6dce0c547","modified":1648199066785},{"_id":"source/_posts/2022/04/export-database-file/1.png","hash":"736e7c74acafa83fea50dfab7a7a29a48e12b341","modified":1650169697033},{"_id":"source/_posts/2022/04/swagger/1.png","hash":"1e3ff7efd09e90ccb1ff4601d40d7636f11d0564","modified":1650187762190},{"_id":"source/_posts/2022/04/swagger/2.png","hash":"630be832578cebce0d346834cc32f517c06b7160","modified":1650187816922},{"_id":"source/_posts/2022/04/swagger/7.png","hash":"46c8c0b6870f09832c2f12e57a5989bf1159b845","modified":1650191872398},{"_id":"source/_posts/2022/04/swagger/6.png","hash":"198c97f144e158ea3a16ea9b82b46e388412d606","modified":1650191830314},{"_id":"source/_posts/2022/04/swagger/5.png","hash":"47812a78532778ce81beb09b31114036bc372469","modified":1650190199329},{"_id":"source/_posts/2022/04/swagger/8.png","hash":"4059141f986e51c9b7bde7b8d1a97bfb1070c3c6","modified":1650192241518},{"_id":"source/_posts/2022/04/uml/3.png","hash":"1506e3543d80d10e1371c02fb2453d6e4435a962","modified":1650877837487},{"_id":"source/_posts/2022/05/gitlab/5.png","hash":"8a725fc34620d1f40e885fe04b813026255a5803","modified":1653705950811},{"_id":"source/_posts/2022/05/gitlab/4.png","hash":"0791f9a79a73862c51e935ee6d975b8e25973deb","modified":1653705912933},{"_id":"source/_posts/2022/05/gitlab/11.png","hash":"ece656c5fdfa979e92408e601f7869137f1f8ecb","modified":1653706593509},{"_id":"source/_posts/2022/05/gitlab/9.png","hash":"260a30023b1b86ca2a0f6961acd59c273af3b1a4","modified":1653706037842},{"_id":"source/_posts/2022/05/jstack/1.png","hash":"c8f4f3c27a579129df9a3e2825323a33c2a91f67","modified":1651845849127},{"_id":"source/_posts/2022/05/gitlab/7.png","hash":"70741198a2a353a434fd93f9c5f4ffc46ac8fc1f","modified":1653706011821},{"_id":"source/_posts/2022/05/jstack/state.png","hash":"f5203b9a3d961993ad310ec0f296524e0626fb44","modified":1651844741885},{"_id":"source/_posts/2021/06/mysql-install/4.png","hash":"416ea1e9a568ee5528a17726fc0945b9b8a29934","modified":1648536666225},{"_id":"source/_posts/2021/06/mysql-install/7.png","hash":"b8637719e1bb4c9f69efe359e5592996763e0859","modified":1648539750113},{"_id":"source/_posts/2021/06/mysql-install/3.png","hash":"bfb16e1540e2fe64330a4c4181c1daf3cfec2c3f","modified":1648536014655},{"_id":"source/_posts/2021/07/ElasticSearch/image-20200807093208470.png","hash":"5975509b668fef3322a88c368dfbe3a0cb22c4d5","modified":1633853645051},{"_id":"source/_posts/2021/07/bug-sprigCloud/02.png","hash":"05f5e2d3920fd5c9483258187681e6bbe23e84ae","modified":1633853645058},{"_id":"source/_posts/2021/07/mvcc/01.png","hash":"8e70ad2e05ff2d94793d61c114aaf474b7927cdb","modified":1633853645066},{"_id":"source/_posts/2021/07/classLoad/01.png","hash":"adc1cf322ff0f1e91e09b350d4848fdc7f0f4e43","modified":1633853645060},{"_id":"source/_posts/2021/07/mycat/image-20201104204624925.png","hash":"bef63295b620faf484bcd0945acc3675f888b2ce","modified":1633853645070},{"_id":"source/_posts/2021/07/mycat/image-20201104205756827.png","hash":"9ab8db96a20f18e0a6be7ca82b7eeb23028d575e","modified":1633853645075},{"_id":"source/_posts/2021/07/mycat/image-20201104210008624.png","hash":"794595be91b46735e45bbc76c6018cd10053e729","modified":1633853645075},{"_id":"source/_posts/2021/07/mycat/image-20201104213343204.png","hash":"d5add96f96f18cc51096e6a708cd87b730b35ef8","modified":1633853645077},{"_id":"source/_posts/2021/07/mycat/image-20201104221659540.png","hash":"b87e471db113a327ac9fd577d18673fd3a29b2c3","modified":1633853645080},{"_id":"source/_posts/2021/07/mycat/image-20201104223246735.png","hash":"66ab19ab75bc92a4894f7f678883ff967f00722e","modified":1633853645082},{"_id":"source/_posts/2021/07/mycat/image-20201107201442912.png","hash":"a2f75b03bfb1d076f552403fb247bfcbdf20c259","modified":1633853645083},{"_id":"source/_posts/2021/07/mycat/image-20201107205855474.png","hash":"087671495d91dc235cfcd2071c88e12032123d97","modified":1633853645084},{"_id":"source/_posts/2021/07/mycat/image-20201220172406074.png","hash":"d5cc2fd773afab1df221d3c8dde5d1c9eb409f8c","modified":1633853645091},{"_id":"source/_posts/2021/07/mycat/image-20201219103201836.png","hash":"f93d0c9392049c1139d0392a2965d0dcdd34555e","modified":1633853645090},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202210235089.png","hash":"fe845f80b723d3bf3c8945f241d138dcc4406c85","modified":1633853645094},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202210510525.png","hash":"78df0df3cfc22065a0ab6be7333cb4c759b348e8","modified":1633853645097},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202210357906.png","hash":"d8f89873679085168d728ab2df89b1cc1939db22","modified":1633853645095},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202211406282.png","hash":"a579a52d0d3fb2191a448da7ac3442f48d37167b","modified":1633853645099},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202214418001.png","hash":"178a89d26eef0c2ab3610e86e557b0440ddaaf0e","modified":1633853645104},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202222823984.png","hash":"34f9cfe5119eb3d50e1e45c03ebf4d5bf00f3b18","modified":1633853645111},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202224412832.png","hash":"0ca867bcd26897674958c4dad0473f2f266e2cfd","modified":1633853645118},{"_id":"source/_posts/2021/07/outOfMemoryError/01.png","hash":"7e36df889d5346adcb0b77af23d68afed39a6f57","modified":1633853645126},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202223655445.png","hash":"67288f601f88c0c5662e4a4641f717a451d0be55","modified":1633853645115},{"_id":"source/_posts/2021/07/redis-usage-scenario/02.png","hash":"6b57644ca016b2afe659711504c62fc402e412b5","modified":1633853645142},{"_id":"source/_posts/2021/07/redis-usage-scenario/04.png","hash":"cd1258db49a0356c37fe297edcc5e9d7b0d83983","modified":1633853645144},{"_id":"source/_posts/2021/07/redis-usage-scenario/05.png","hash":"bd668a6a1a9aaa46de2d3b6c2d83175d6592869e","modified":1633853645145},{"_id":"source/_posts/2021/07/thread-status/03.png","hash":"9cffd1a59fb01ce897dbc3e4c7616dd2f765af3c","modified":1654084667398},{"_id":"source/_posts/2021/07/redis_install/image-20201201155441018.png","hash":"baa59222dafedc944f8ab692af3dfb4d4d3e69f0","modified":1633853645149},{"_id":"source/_posts/2021/07/valine/4.png","hash":"ca41c1cedf856b6a9ee6b5c335c900a962b1fca6","modified":1648390188738},{"_id":"source/_posts/2021/10/Installing-CentOS-system/2.png","hash":"acc481a1b27839ff6da93ed091bd9d4baca3f0be","modified":1633856410293},{"_id":"source/_posts/2021/10/Installing-CentOS-system/3-1.png","hash":"12cba1eec366cb17ef75b3ccaa91ca19829a5b2a","modified":1633857298213},{"_id":"source/_posts/2021/10/Installing-CentOS-system/5.png","hash":"1cbdbb6eff746f3de5e02db89458d4f0778ee2c9","modified":1633856670818},{"_id":"source/_posts/2021/10/Installing-CentOS-system/6.png","hash":"b5b8a678ef5a604749dc06dcb65e5f7aec38b5b9","modified":1633856783535},{"_id":"source/_posts/2021/12/docker-01/1.png","hash":"09ac5dd0a31482780c52c3cd3dae3ff162a725d2","modified":1639056591185},{"_id":"source/_posts/2021/12/docker-mysql/2.png","hash":"6c2815970adbd185fa924848aa20bfcb40851d47","modified":1639056957476},{"_id":"source/_posts/2021/12/docker-mysql/3.png","hash":"6c8d3cd512f6abda288704617a1aa51033762d7b","modified":1639057973054},{"_id":"source/_posts/2021/12/docker-mysql/4.png","hash":"4ee8f050b4e463bc96e0e688144aaea3d87e5d6e","modified":1639059756271},{"_id":"source/_posts/2021/12/docker-mysql/6.png","hash":"91d028cf00872aeb63d20289e81367d040e7ee1f","modified":1648884935588},{"_id":"source/_posts/2021/12/nginx-02/3.png","hash":"32cb858c15ef5a818469661ff92b0fbb29f7268d","modified":1638692442744},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"4b5dcdc366cf96737e582094267b6f177c15bb44","modified":1633853645196},{"_id":"source/_posts/2022/03/linux-minio/1.png","hash":"7c5eea4fe5476fcf8b938673807b8b34537a51e8","modified":1647843139048},{"_id":"source/_posts/2022/03/linux-minio/8.png","hash":"9cc56fd5b83c33f3cb00e2b1e2b47cad34915d1f","modified":1647922308509},{"_id":"source/_posts/2022/03/linux-search-file/4.png","hash":"2baa488322ce8dcbe041021f8773f4d34c875dfc","modified":1647672702018},{"_id":"source/_posts/2022/04/swagger/4.png","hash":"b89a81fba4627f4a0db77b4f93b6f295f7224a46","modified":1650188927061},{"_id":"source/_posts/2022/04/uml/1.png","hash":"c8262797a5460b60a431abaea94c92d3a713eac2","modified":1650870012800},{"_id":"source/_posts/2021/06/jdk-install/1.png","hash":"edc99d2792c6dc03d577e845aca730cb3720db1c","modified":1648515977930},{"_id":"source/_posts/2021/07/classLoad/03.png","hash":"9bcb79b7f54a0a07c9ebf3b02ace8509cfc924ed","modified":1633853645062},{"_id":"source/_posts/2021/07/mycat/image-20201104215015366.png","hash":"319b52e8cd8fd7ab472a2993d860f8f3fe3f6ad1","modified":1633853645078},{"_id":"source/_posts/2021/07/mycat/image-20201104222632963.png","hash":"f84fe140ea2c25cc5a93e006f86729522a8a1289","modified":1633853645082},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202222250939.png","hash":"f62bf3adf4e2ccebebd148f81a8e525680d18ccb","modified":1633853645110},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202222914087.png","hash":"91e77f0b02a413d0e9613da5eeb7e65023a2897a","modified":1633853645114},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202224136052.png","hash":"98dd9ff6c0a991a146edc81251bace4c4c4470ce","modified":1633853645117},{"_id":"source/_posts/2021/07/valine/2.png","hash":"4026febdc49bb2319e6cef1a5cc06649cd8dda0b","modified":1648389476182},{"_id":"source/_posts/2021/10/Installing-CentOS-system/3.png","hash":"5b864caef9c16fa8e5187dc5bf0d3944a9b95959","modified":1633856502443},{"_id":"source/_posts/2021/10/Installing-CentOS-system/4-3.png","hash":"7bdd1d4caf4d48b83fdd7d29d93313e5dfd52a09","modified":1633858153301},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"e881a9e141da37ca46258e9d8fada3b51cd11046","modified":1633853645197},{"_id":"source/_posts/2022/05/Apache-Http-Server/4.png","hash":"e865be7defcd5d7f30e581e182d0c4c643e632b4","modified":1653403263015},{"_id":"source/_posts/2021/07/ElasticSearch/image-20200807093309761.png","hash":"d95ac7aaea31cd9322f5f7d8c8a704d76b7e503c","modified":1633853645052},{"_id":"source/_posts/2021/07/mycat/image-20201104210416994.png","hash":"05f625952a7a96994300c52e4444d0f670c9ac4f","modified":1633853645077},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202211752764.png","hash":"40651944aab63eda574090e4a018a8f433be12a2","modified":1633853645100},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202212103393.png","hash":"672bbb9ae12eaf223dfda421a62d3dec36406e3d","modified":1633853645101},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202215350319.png","hash":"2c3cef1bc3cfa005b5aa46a8ff19c0cb0667e39c","modified":1633853645106},{"_id":"source/_posts/2021/07/valine/3.png","hash":"e956b57ef3817874f210a6d8d375aef438534e1d","modified":1648389817967},{"_id":"source/_posts/2021/10/Installing-CentOS-system/4.png","hash":"e23eb17b1f7f00d3e8b44ace3466098582b5a9b6","modified":1633856631244},{"_id":"source/_posts/2021/11/sql-model/1.png","hash":"fe8bac1db0a94e89605d25b7f9a7f98dcb2f88ce","modified":1636981531265},{"_id":"themes/pure/source/images/avatar.png","hash":"ebde5ecfd529edecfab55788e99ffcb22df93730","modified":1633853645195},{"_id":"source/_posts/2022/04/uml/9.png","hash":"21f38194287642c4fe0aeb209375da7a3eca03cd","modified":1650889251585},{"_id":"source/_posts/2021/07/mycat/image-20201107213859155.png","hash":"bcd51eb3650bc7519c5ccbe20caba54237ec808e","modified":1633853645086},{"_id":"source/_posts/2021/07/mycat/image-20201220170713526.png","hash":"7a7f2a55b96a42ad49efa80806a9a5c9ba06a98d","modified":1633853645091},{"_id":"source/_posts/2021/07/outOfMemoryError/05.png","hash":"bd8a1e8b789597121dc0ea116762c8bcf6f3e385","modified":1633853645134},{"_id":"source/_posts/2022/03/linux-minio/2.png","hash":"fab159eedb22c1d677e8b263f17fd644d35d93fa","modified":1647930044312},{"_id":"source/_posts/2021/07/mycat/image-20201104205653611.png","hash":"df947668dea64063a150fe0a3dbcd49d696a163c","modified":1633853645074},{"_id":"source/_posts/2021/07/redis-usage-scenario/01.png","hash":"0e23b53142149c6b75e693e8d5b6eb87148897c3","modified":1633853645142},{"_id":"source/_posts/2021/12/docker-nginx/1.png","hash":"a3dc3998d27ad48a417f4188f2c192075988f29c","modified":1639057656662},{"_id":"source/_posts/2021/10/Installing-CentOS-system/8.png","hash":"c8024d10d745586c532ce67a91301b4397bfeee6","modified":1633856907076},{"_id":"source/_posts/2021/12/nginx-04/3.png","hash":"b55a0507b4ebbd8be1a5884816fbc1da252a3b24","modified":1638694935934},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202210817094.png","hash":"6810630ccd02b7b68215d147c408f8769edb92c3","modified":1633853645098},{"_id":"source/_posts/2021/07/outOfMemoryError/03.png","hash":"f6c5120f15f65e198b3d7f8f67f0b83c9fdca7b1","modified":1633853645129},{"_id":"source/_posts/2021/12/nginx-md/1.png","hash":"a569af0fb2f1725e8006750237083a82a8651daf","modified":1638688234279},{"_id":"source/_posts/2022/05/jstack/2.png","hash":"f84af5d2e1b4ba09de746ca1667a869451718194","modified":1651845868153},{"_id":"source/_posts/2021/07/mycat/image-20201104221336437.png","hash":"e8e98f07e2503e85bbcb2699b8450ffe0e108663","modified":1633853645080},{"_id":"source/_posts/2021/07/outOfMemoryError/04.png","hash":"bbee74780760a53a2d4ece78fdd88b46d1592f4b","modified":1633853645132},{"_id":"source/_posts/2021/10/Installing-CentOS-system/7.png","hash":"b1b263434f52d85aeb2a36fd0304dd423629eb58","modified":1633856839579},{"_id":"source/_posts/2021/12/docker-mysql/1.png","hash":"9fbfcbff4b301fc300cd266f6a02fc7190a4d6c1","modified":1639056767321},{"_id":"source/_posts/2022/03/linux-search-file/7.png","hash":"9c4d3d1417d8d9d77709a81ad7101b97a9d31239","modified":1647675504733},{"_id":"source/_posts/2021/07/redis-usage-scenario/06.png","hash":"a97a3387e2bca72ee714fd4b60201b58b2fe4ca3","modified":1633853645148},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202215717524.png","hash":"6173e68d50fed251dd9a7a908823df5b5751df4c","modified":1633853645109},{"_id":"source/about/img.png","hash":"f67efb78c67935d5b7331197f9a848f530b8fe07","modified":1653729189962},{"_id":"source/_posts/2022/05/jstack/3.png","hash":"c3afddc9eeb2abae77bc43f38332312930d5d8e5","modified":1651845884721},{"_id":"source/_posts/2022/05/jstack/4.png","hash":"586ccec48bd2d45a5150951e86ca66ccbf1df0e5","modified":1651846405026},{"_id":"source/_posts/2022/05/jstack/7.png","hash":"818130c2720ddaf65c8ad00b87983be7b517b93e","modified":1651846679520},{"_id":"source/_posts/2022/03/linux-search-file/6.png","hash":"89821ca7ccc64c8006eed3adfb8b5866f57005ec","modified":1647673411404},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202213757692.png","hash":"1187aa165415735ce8b7352d39fe3af5561e86d1","modified":1633853645103},{"_id":"source/_posts/2021/07/outOfMemoryError/06.png","hash":"c3e65cb83beb665dffdd05ab3b30ed47bd480951","modified":1633853645137},{"_id":"source/_posts/2022/05/jstack/6.png","hash":"2677dfdb849cd60adc828f666f5890dc9416b345","modified":1651846611774},{"_id":"source/_posts/2021/12/nginx-02/image-20210606160947369.png","hash":"f3cd662ff33c0eb8bd29eea58aeb699f5e7a8a71","modified":1633853645123},{"_id":"source/_posts/2022/05/Apache-Http-Server/2.png","hash":"15d7377e56c447aaa34af2cf40c38f0345af9a38","modified":1653402835297},{"_id":"source/_posts/2022/04/uml/4.png","hash":"5ccf20558f9a13da9ddea2e51c5a2f700dd924c3","modified":1650888780325},{"_id":"source/_posts/2022/05/Apache-Http-Server/3.png","hash":"82a88cdec865e7094ba8a521242e631bf7afa455","modified":1653403219254},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1633853645190},{"_id":"public/baidusitemap.xml","hash":"d6484a65f56ab8dbb8c83a58c84818e67e2b4c76","modified":1654483127406},{"_id":"public/content.json","hash":"9e0b77710f903b6fc0daa7744b34883d62775dad","modified":1654483127406},{"_id":"public/feed.xml","hash":"220d279affca090a94661a06cabfd7059e9136e3","modified":1654483061600},{"_id":"public/search.xml","hash":"22799e0f9ab368e4e1d0edba17e9159cc07f73fa","modified":1654483127406},{"_id":"public/sitemap.xml","hash":"25dd30079bb4155a2ded20e0ba34fb9615693b20","modified":1654483127406},{"_id":"public/404.html","hash":"f9f52523c8af9a686140fc0b4bdee746a4915eac","modified":1654483061600},{"_id":"public/about/index.html","hash":"6534834b0c9917bb01df28a65aeebf2ac63601f9","modified":1654483061600},{"_id":"public/categories/index.html","hash":"7c106647c93ab781989ce078e27c040d771e5951","modified":1654483061600},{"_id":"public/books/index.html","hash":"b7ba182436e5742540f4f9b8d8b27af8212725cf","modified":1654483061600},{"_id":"public/links/index.html","hash":"8d12d195528d007b686409eb8cc586543c9c9e8a","modified":1654483061600},{"_id":"public/repository/index.html","hash":"cb42c9002c8e01b1efe3008cc5cb9adf0c3d1548","modified":1654483061600},{"_id":"public/tags/index.html","hash":"e33eb021aea9c53f28a5418d524918cf72182114","modified":1654483061600},{"_id":"public/gitlab/index.html","hash":"2d8829f74f06176ee36cd1c01f88a25ca9e82770","modified":1654483061600},{"_id":"public/Apache-Http-Server/index.html","hash":"0108bae98367ed5c088dfe6898a6c7428bb4da08","modified":1654483061600},{"_id":"public/design-principle/index.html","hash":"5fd4a9ac8bd0e800a166c1075d88ad60ff7c9586","modified":1654483061600},{"_id":"public/jstack/index.html","hash":"71e81a1a8472e430edd92c6947e223715e2c7640","modified":1654483061600},{"_id":"public/uml/index.html","hash":"3229f164a777effb8fd33d52f4a1cce06540a897","modified":1654483061600},{"_id":"public/swagger/index.html","hash":"5f37cc7bf0799839d9a500d8633945f6e21b4507","modified":1654483061600},{"_id":"public/export-database-file/index.html","hash":"f056e5211d0d6601d8563e1cb4be5019d2ad2f7b","modified":1654483061600},{"_id":"public/lambda/index.html","hash":"c7cfb14f1b092eae47edcff067296c9709c5c9cd","modified":1654483061600},{"_id":"public/message-oriented-middleware/index.html","hash":"87f50c700cc3143d2e76075c465e594bec505eed","modified":1654483061600},{"_id":"public/linux-minio/index.html","hash":"5ead50ebe780f2bbbbe0e24b5ff8eccdb8bafcfb","modified":1654483061600},{"_id":"public/linux-search-file/index.html","hash":"ba7a5dc7dc8e1392a43775dbda6141431ec8a9d7","modified":1654483061600},{"_id":"public/docker-nginx/index.html","hash":"0995625033ab1df1ce1afcb7aae7c700270ac48f","modified":1654483061600},{"_id":"public/docker-mysql/index.html","hash":"810dc8279ea797b1de373df4fcef8aa1e195193f","modified":1654483061600},{"_id":"public/nginx-04/index.html","hash":"2a7bdc392b96a72f56072d14616d8093931bf863","modified":1654483061600},{"_id":"public/docker-01/index.html","hash":"e7d68a3e09573f574f2bb5a69e3087a5ac790233","modified":1654483061600},{"_id":"public/nginx-03/index.html","hash":"408dddc5dc3aa706c1f2b4c55feb4039cb20c8de","modified":1654483061600},{"_id":"public/nginx-02/index.html","hash":"ca28703c74b0b8e55771b20e1cf81bd874665e0a","modified":1654483061600},{"_id":"public/nginx-md/index.html","hash":"4bfd360441df429f8bcae050b965b182d341e6a5","modified":1654483061600},{"_id":"public/algorithm-dinary-search/index.html","hash":"2570ec8057969720c470137ae79861dff411f2c2","modified":1654483061600},{"_id":"public/mysql-column/index.html","hash":"27a05378aef37e4968c20f6311d5dac0b74bb161","modified":1654483061600},{"_id":"public/sql-model/index.html","hash":"bdb55579422a7701b387452bac59833c0e327682","modified":1654483061600},{"_id":"public/list-to-string/index.html","hash":"d3a38d26f208ef8eab421f1fe352577f8ce06a75","modified":1654483061600},{"_id":"public/shutdown/index.html","hash":"6bee66f2b0677445f40eee0828dc5e25ddb3638e","modified":1654483061600},{"_id":"public/Installing-CentOS-system/index.html","hash":"9825a9d3c97bb74b776e7dddd5488812eba1a633","modified":1654483061600},{"_id":"public/mysql行列转置/index.html","hash":"580c99c6867a3e8932be1bd11c6af37669aa067c","modified":1654483061600},{"_id":"public/locksupport/index.html","hash":"42d656ab6add6f5a10f5a012945701832c4b97f6","modified":1654483061600},{"_id":"public/algoright-2/index.html","hash":"0c0fb9e8ac15ce675def15d94346d02e0194d628","modified":1654483061600},{"_id":"public/mysqldumpslow分析慢查询日志/index.html","hash":"96378faa04e34d3f0898403467324c84648bc346","modified":1654483061600},{"_id":"public/mysql-index/index.html","hash":"f83b822a6fb06b12b08ae50d26d71351f99730c5","modified":1654483061600},{"_id":"public/algorithm/index.html","hash":"b51286350b951ef56d6de817fd66a8a3fb95c5c7","modified":1654483061600},{"_id":"public/springboot-yml/index.html","hash":"acbfe9df45f82c8f0f4f3ade7ff6826431f86cc6","modified":1654483061600},{"_id":"public/hexo-spawn-failed/index.html","hash":"5131e097df05fdb0c8789f8f3b4583ec04088877","modified":1654483061600},{"_id":"public/thread-01/index.html","hash":"d627924dfa94158059824935c9f007cb977eb81b","modified":1654483061600},{"_id":"public/redis-usage-scenario/index.html","hash":"48db478f2dde85b148f3a349a8ed0f0ab07d2086","modified":1654483061600},{"_id":"public/mvcc/index.html","hash":"b13d0a7cd7b7aae058c8512a86997a271db6e147","modified":1654483061600},{"_id":"public/cache-consistency/index.html","hash":"2ce17b0329d0c8c6c0822bdfb95d27cfdaa3949d","modified":1654483061600},{"_id":"public/volatile/index.html","hash":"bc72cdf5ce9937f7f7e90fbd4af2156e4609f667","modified":1654483061600},{"_id":"public/outOfMemoryError/index.html","hash":"a302dafc0d3585e2bd401cae9ef040a7d6b2ca92","modified":1654483061600},{"_id":"public/classLoad/index.html","hash":"10a656e68f8b4c3709ba9e4e0e35e93c92e6d52d","modified":1654483061600},{"_id":"public/valine/index.html","hash":"4238f44a1cb6557e0d625fef713599ac26033910","modified":1654483061600},{"_id":"public/mysql数据库锁/index.html","hash":"9201a797866ee841f2b0548e9ad53b728a297ec5","modified":1654483061600},{"_id":"public/mycat/index.html","hash":"c3d5fe3ee5cf7ee22657745e8fdb9b2edcbd2ec2","modified":1654483061600},{"_id":"public/mysql-transcation/index.html","hash":"00cf61cf840901388e469bf6d61978c3833a31e9","modified":1654483061600},{"_id":"public/mysql/index.html","hash":"1142c023a4aed120ebe3e0ae7d3e4b3269f33c41","modified":1654483061600},{"_id":"public/lock01/index.html","hash":"6a2927b560e31d232371b23c5afb507f48294bf4","modified":1654483061600},{"_id":"public/ElasticSearch/index.html","hash":"619c35d5904bdc7d20739d4814f0e5c97b0932f0","modified":1654483061600},{"_id":"public/vue/index.html","hash":"8821ab237b582183f3ff182ec4e3c5d7fd223f51","modified":1654483061600},{"_id":"public/hexo-encrypt/index.html","hash":"1f0c382e6319428fcd8a08239a8a008acd588b4a","modified":1654483061600},{"_id":"public/bug-sprigCloud/index.html","hash":"72b60d12f6734df91961c7305304aff82da0942b","modified":1654483061600},{"_id":"public/ConcurrentHashMap/index.html","hash":"8694c0440207f6de9522ab68a42ffd1b298faa19","modified":1654483061600},{"_id":"public/sql-01/index.html","hash":"ed5683aa0db29eed8fe8a210e55156b30c10ea27","modified":1654483061600},{"_id":"public/mysql-install/index.html","hash":"fc457a98d55c5ef1f130593863b5199ac96c398a","modified":1654483061600},{"_id":"public/jdk-install/index.html","hash":"e7cffea72b66897b6492c438ca064619ed549ebf","modified":1654483061600},{"_id":"public/interest/index.html","hash":"3bac487f92b045a1097fefac982516c5e8c91fdf","modified":1654483061600},{"_id":"public/java-inner-class-01/index.html","hash":"6ade90430ca8ea5707625fc69f2a9aa138b26581","modified":1654483061600},{"_id":"public/redis_install/index.html","hash":"82899af178306715df712b46a2668f49ef103512","modified":1654483061600},{"_id":"public/在线修改静态文件/index.html","hash":"2b895a74ab31e2ff5af68ab930ddcf67891af154","modified":1654483061600},{"_id":"public/thread-status/index.html","hash":"8333d76df4891fd4a23033dfb5c6ea997588176c","modified":1654483127406},{"_id":"public/java8特性/index.html","hash":"ef6801bcaf648506aa6d9b497a4159e72336eb24","modified":1654483061600},{"_id":"public/archives/index.html","hash":"1d4dfb35b67a00fd046872ad1b2643e029f78439","modified":1654483061600},{"_id":"public/archives/page/2/index.html","hash":"adcb81a885845748fc0079399b4308fdf6d01c07","modified":1654483061600},{"_id":"public/archives/2020/index.html","hash":"6feabdbfcc697bda53d46a1921965d9c2a11a986","modified":1654483061600},{"_id":"public/archives/2020/04/index.html","hash":"206f00f1a6c8332d466ee56420101ddca39238f3","modified":1654483061600},{"_id":"public/archives/2020/06/index.html","hash":"b1033d53ff80e19f5e27a85f0fedfee31c61b596","modified":1654483061600},{"_id":"public/archives/2021/index.html","hash":"580dbf1f81d697bd4e4bad8b0cb32dc5aa948843","modified":1654483061600},{"_id":"public/archives/2021/05/index.html","hash":"2d65ec58401ae5eabe5d074749f19394867dfae2","modified":1654483061600},{"_id":"public/archives/2021/06/index.html","hash":"129272c61de3035c084260c9ece2c1d74d417da1","modified":1654483061600},{"_id":"public/archives/2021/07/index.html","hash":"a8ac481ad9ef2843ea09cbc79c345f54ad0a7de4","modified":1654483061600},{"_id":"public/archives/2021/08/index.html","hash":"f9803cd8fcb6fd47bbda0c8752a2ab5f0beba6de","modified":1654483061600},{"_id":"public/archives/2021/09/index.html","hash":"fae1857d4e0109146af54139b318201cc7040909","modified":1654483061600},{"_id":"public/archives/2021/10/index.html","hash":"840fc84748da40b43710ad87f906d9abf14139da","modified":1654483061600},{"_id":"public/archives/2021/11/index.html","hash":"65028ee6b0ca54fc6914337fd6facad1e203cb49","modified":1654483061600},{"_id":"public/archives/2021/12/index.html","hash":"0cde99290e3d1367bb97ee9e459c14e88f34acc6","modified":1654483061600},{"_id":"public/archives/2022/index.html","hash":"d8894ac064dfb623150a70137af1c96791fa74fa","modified":1654483061600},{"_id":"public/archives/2022/03/index.html","hash":"0f77e4d7a134a3c36637a4a85d54dadc69325b0f","modified":1654483061600},{"_id":"public/archives/2022/04/index.html","hash":"b34b4bf04235120f0820a7cdf03a145237216cae","modified":1654483061600},{"_id":"public/archives/2022/05/index.html","hash":"30f8e45b13b3b4b5a7da393da9ffdda5e262873f","modified":1654483061600},{"_id":"public/categories/linux/index.html","hash":"a4903817f54d33cc1f83bb311769a5da83f9dbc6","modified":1654483061600},{"_id":"public/categories/中间件/index.html","hash":"03877e19c041a1a058017065a08ed178c8390e3b","modified":1654483061600},{"_id":"public/categories/java/index.html","hash":"389d71ff116bc6d8fc975934c1baea0e26fc6d32","modified":1654483061600},{"_id":"public/categories/架构师笔记/index.html","hash":"6b3ebf40a600a5df0412a2da6094356ac6420d37","modified":1654483061600},{"_id":"public/categories/算法/index.html","hash":"90ecd4c8b9dc30168a24d05f3936adbe60926fd9","modified":1654483061600},{"_id":"public/categories/mysql/index.html","hash":"07fb8a720a97bb98571d66f866b3dc96a4b0644c","modified":1654483061600},{"_id":"public/categories/知识整理/index.html","hash":"ddc4813b39e5706333079ee11bc3b7d46d54c25c","modified":1654483061600},{"_id":"public/categories/踩坑记录/index.html","hash":"e9e4085ee12b5fb748a6685243b59d5ee3f8a53f","modified":1654483061600},{"_id":"public/categories/hexo/index.html","hash":"adbc3b3f8d15dca1d51e183e04dcb59f309594c5","modified":1654483061600},{"_id":"public/categories/Docker/index.html","hash":"3d845e17f433687b2f32f1aa17f273b5e167e661","modified":1654483061600},{"_id":"public/categories/nginx/index.html","hash":"97209fc217b0fe95f404ab9347005b725aa50731","modified":1654483061600},{"_id":"public/categories/swagger/index.html","hash":"ea3a1eba0e22e5155f5aa2b8ddbf0cc93cd09f31","modified":1654483061600},{"_id":"public/index.html","hash":"64fe7f3f43ffa07673753ca410756eeb340e63ee","modified":1654483061600},{"_id":"public/page/2/index.html","hash":"d45b174327d94e1651208f859581fc21dab5390c","modified":1654483061600},{"_id":"public/tags/Linux/index.html","hash":"db38aa6d47217de4c6e2774f2aed888ff81209ad","modified":1654483061600},{"_id":"public/tags/消息中间件/index.html","hash":"d04dff8265f63033b86a7bd6a9aacbfd163e5943","modified":1654483061600},{"_id":"public/tags/java/index.html","hash":"6c3cd1f05b95913d37fa3c9ebbd9a13564a6f025","modified":1654483061600},{"_id":"public/tags/UML/index.html","hash":"dd6484e87715d7a7ec758309af9c4a3bea4bf599","modified":1654483061600},{"_id":"public/tags/Apache/index.html","hash":"1e604bbc6cf085c1f13fff079f2e0afd33e6cdcb","modified":1654483061600},{"_id":"public/tags/设计模式/index.html","hash":"98fc6c8d115f1ebdf3a188acbe7481d9cf98daff","modified":1654483061600},{"_id":"public/tags/gitlab/index.html","hash":"73a662a2471542ffa2e6646779b15a61d6bcaf08","modified":1654483061600},{"_id":"public/tags/jstack/index.html","hash":"286f49cc4ba5765ff9855831eaa23c5f96c69d46","modified":1654483061600},{"_id":"public/tags/jdk/index.html","hash":"89a9d23dc35b603b72f4b3c6575ba4e33aa6397a","modified":1654483061600},{"_id":"public/tags/mysql/index.html","hash":"a149df2e61b33452d3099e5afb91b4ff56180ddc","modified":1654483061600},{"_id":"public/tags/algorithm/index.html","hash":"1f3acbe48b47100b6a2d98294e78fe43e035ec73","modified":1654483061600},{"_id":"public/tags/Java/index.html","hash":"70e5fbb8fd9f4de2e538a832b369445bbab4ba14","modified":1654483061600},{"_id":"public/tags/ELK/index.html","hash":"60c3058d86d5e0b72e1ca76999ce3ed9f2b463fb","modified":1654483061600},{"_id":"public/tags/SpringCloud/index.html","hash":"5366bc2075786e6774e8222f1e6342c8b8a50a6b","modified":1654483061600},{"_id":"public/tags/redis/index.html","hash":"730f58bc4f39d1c50e05b78e3a32a9558a97ab15","modified":1654483061600},{"_id":"public/tags/hexo/index.html","hash":"bb0c302c43c123b5111b5ed7b953b22b1116a659","modified":1654483061600},{"_id":"public/tags/ClassLoader/index.html","hash":"f1e23b3e3f6cb127c4623a31ec8868e12c2cea89","modified":1654483061600},{"_id":"public/tags/内部类/index.html","hash":"509b39f9d92da304e18af9621cd93c6a9bfe7fe7","modified":1654483061600},{"_id":"public/tags/lock/index.html","hash":"65e3aa9b2c4666ee1227b48bfdf979a6a401fc4c","modified":1654483061600},{"_id":"public/tags/内存溢出/index.html","hash":"f0795b97f9ba194eb553ad7dd3f93e3f6b7d4502","modified":1654483061600},{"_id":"public/tags/springboot/index.html","hash":"79cfa9839997f49aa27e1e5f8365a32b1a5fd1c1","modified":1654483061600},{"_id":"public/tags/守护线程/index.html","hash":"022467d29a70def3b1bae7a59afcb01ca3797967","modified":1654483061600},{"_id":"public/tags/thread/index.html","hash":"089f03f56f5e12303e942e202ba48d86a813a3ee","modified":1654483061600},{"_id":"public/tags/linux/index.html","hash":"a0556a8d9e099bcce7304a8d61d23ac6045f2f99","modified":1654483061600},{"_id":"public/tags/集合/index.html","hash":"a24c2739d2a3f4e0ab95dedf151b5c047fc19c30","modified":1654483061600},{"_id":"public/tags/shutdown/index.html","hash":"5ce58f8c2f11458192e8385a062d10c7d8349919","modified":1654483061600},{"_id":"public/tags/tidb/index.html","hash":"7c4fc6671cf7746e5d2b8ddade520dd1fb142487","modified":1654483061600},{"_id":"public/tags/docker/index.html","hash":"46fb73de1d626f9ef852a728cf0c742b8cedf3e9","modified":1654483061600},{"_id":"public/tags/nginx/index.html","hash":"704f578600fbb29eb9f637b8965a36166c66dcc3","modified":1654483061600},{"_id":"public/tags/swagger/index.html","hash":"10ddc3912811982477e695120a71c5d083eb1af0","modified":1654483061600},{"_id":"public/tags/mycat/index.html","hash":"fa13d27338f181de53910bdf7a45eccc0b84f1f9","modified":1654483061600},{"_id":"public/tags/vue/index.html","hash":"65a18f1cc4091f490dc37e381fe797055ca97b74","modified":1654483061600},{"_id":"public/CNAME","hash":"0921dce0665fa8071633e0d0450f83a70a161c54","modified":1654483061600},{"_id":"public/favicon.ico","hash":"80efb1836c542af64366401b6e79cbad51037f24","modified":1654483061600},{"_id":"public/about/1.jpeg","hash":"ab5780333463d247f770513f6d3cfbe7ade0b598","modified":1654483061600},{"_id":"public/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1654483061600},{"_id":"public/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1654483061600},{"_id":"public/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1654483061600},{"_id":"public/images/favicon.ico","hash":"d49cc39708a0623a83fdeaefb46de268b818f318","modified":1654483061600},{"_id":"public/images/ico-to-top.png","hash":"815e2cc7c887810a9d8259fb51f15275fe38b86f","modified":1654483061600},{"_id":"public/images/logo.png","hash":"8e6dc6af4dda2ceb1eb72b3609479f3cb4aca13f","modified":1654483061600},{"_id":"public/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1654483061600},{"_id":"public/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1654483061600},{"_id":"public/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1654483061600},{"_id":"public/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1654483061600},{"_id":"public/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1654483061600},{"_id":"public/linux-minio/10.png","hash":"0e578144f447daf607c254723262a9e9ac6d53b0","modified":1654483061600},{"_id":"public/linux-minio/11.png","hash":"c37413b4546d3e3fde83e7916634dddab4e106ec","modified":1654483061600},{"_id":"public/linux-minio/13.png","hash":"fc433ce105ecc690c4a5cde53fbd118d6dd7e2d8","modified":1654483061600},{"_id":"public/linux-minio/3_2.png","hash":"b43446dc0aa064f74e102db6011a49b179caace3","modified":1654483061600},{"_id":"public/linux-minio/5.png","hash":"31de4b322c84c54c6f858bbd1391c5342abd9d0e","modified":1654483061600},{"_id":"public/linux-minio/4.png","hash":"11b794752aa1acad6728daa859f129b662db66f8","modified":1654483061600},{"_id":"public/linux-minio/6.png","hash":"b64720d8798c2d09306ac2147edd56ac16c18375","modified":1654483061600},{"_id":"public/linux-minio/7.png","hash":"bc6f137caa09602e34667a0f23bb0511b2021717","modified":1654483061600},{"_id":"public/message-oriented-middleware/1.png","hash":"5dfb3680ea8e3568d79111d9d9e4fb75a907cf21","modified":1654483061600},{"_id":"public/message-oriented-middleware/3.png","hash":"d99286339bffb8853a504654bf877268950072ec","modified":1654483061600},{"_id":"public/message-oriented-middleware/4.png","hash":"e42294659def9b37cace9b269581081bb57d0073","modified":1654483061600},{"_id":"public/message-oriented-middleware/6.png","hash":"4c6fe53b4cefd1b0702b6b941a365386b09502cd","modified":1654483061600},{"_id":"public/message-oriented-middleware/5.png","hash":"8f841560adc7e442009408e40e923e0f30e1f77c","modified":1654483061600},{"_id":"public/linux-search-file/2.png","hash":"6b372e3bbbadd238335713fd16f851556a66be00","modified":1654483061600},{"_id":"public/linux-search-file/5.png","hash":"3ff17aae9ac6e604d0777f004624c78d9d47df63","modified":1654483061600},{"_id":"public/Apache-Http-Server/1.png","hash":"cba7fb1895a5b253f0a989741191037cfb8ba0d1","modified":1654483061600},{"_id":"public/uml/2.png","hash":"2a42d9804389ae49469e7770d37cebb85f0312ea","modified":1654483061600},{"_id":"public/uml/5.png","hash":"48cc2ac36b9823b8704c6fd2a4fb8758f30df174","modified":1654483061600},{"_id":"public/uml/7.png","hash":"28c83f56cda3a3ee27368f5535a4c77435c8e30e","modified":1654483061600},{"_id":"public/uml/6.png","hash":"60f77da49f725da626d482bcad8d5c5c0c2c91be","modified":1654483061600},{"_id":"public/uml/8.png","hash":"4b2e348ac54321b52adea1665c31207222f2334b","modified":1654483061600},{"_id":"public/design-principle/1.png","hash":"8a3bc5cee66e7875dd7d8f69aa43b136a26f816e","modified":1654483061600},{"_id":"public/design-principle/2.png","hash":"36a4fcf43be6e2dc7611521e5e53431a35b0f0b3","modified":1654483061600},{"_id":"public/gitlab/1.png","hash":"f1561fa1cab6fb811e380dd07929df0ff39dcd7a","modified":1654483061600},{"_id":"public/gitlab/10.png","hash":"1d275e8f29e9943345753732ea2594bbceff0884","modified":1654483061600},{"_id":"public/gitlab/2.png","hash":"7ef393aed17ee257447e485f6d250d0951ec1b11","modified":1654483061600},{"_id":"public/gitlab/3.png","hash":"a8d027167a23dcbbe2f106c50b8b1185bdc212ee","modified":1654483061600},{"_id":"public/gitlab/6.png","hash":"baaa03b764348a3879370f9e5b1d9aa081bcb4f8","modified":1654483061600},{"_id":"public/gitlab/8.png","hash":"75c01902dbdae63ddbd27546adab5927b4da6682","modified":1654483061600},{"_id":"public/jstack/5.png","hash":"5e3d271636f424c11a45e4f06f78464ca9fa0a1b","modified":1654483061600},{"_id":"public/jstack/jps.png","hash":"d54b6886db40d32ad27d353da7c6b0d45d941864","modified":1654483061600},{"_id":"public/mysql-install/5.png","hash":"96d2636dd00fb9513d2f720c69f4e39420b64405","modified":1654483061600},{"_id":"public/mysql-install/6.png","hash":"25e9fafdf37af94e74700134fb5480217e5b1dfd","modified":1654483061600},{"_id":"public/mysql-install/q1.png","hash":"bce35b4d4d9826d161cf2b6dfc3d3d64159299f3","modified":1654483061600},{"_id":"public/mysql-install/q2.png","hash":"0e1ed931b1910b04e9b6da6475d0bc86c38f3aab","modified":1654483061600},{"_id":"public/mysql行列转置/01.png","hash":"b89d0a368f18ac572dda4695f6cbe372f279ebcd","modified":1654483061600},{"_id":"public/mysql行列转置/02.png","hash":"7d748d9f6d6c60bdcbf8aca5ab8890d209239a7b","modified":1654483061600},{"_id":"public/algorithm/01.png","hash":"c56633cc5a8872412e7e7dc4d804bdc9089142d2","modified":1654483061600},{"_id":"public/algorithm/02.png","hash":"b670f25cc9fe9a3167396dbea29777acb8058db8","modified":1654483061600},{"_id":"public/algorithm/03.png","hash":"d5a50b438cf6ed1702265d86ba43544cdda21c6e","modified":1654483061600},{"_id":"public/ConcurrentHashMap/01.png","hash":"111fdc2e7e640ca6fccf8721eec0f158e32fb1c1","modified":1654483061600},{"_id":"public/ConcurrentHashMap/02.png","hash":"12007c1f0661add3711542ff63a6fde24d2b2516","modified":1654483061600},{"_id":"public/ElasticSearch/image-20200806170145844.png","hash":"c98bc90ae0f0f216dd7fec89b7b712e055ed2ad1","modified":1654483061600},{"_id":"public/ElasticSearch/image-20201211095101816.png","hash":"ab9071ebe82c1cb6b352e96b946573c234812f1a","modified":1654483061600},{"_id":"public/ElasticSearch/image-20201211095258901.png","hash":"c9b64529bc173cdb220e8ed4dc085914b91f93a4","modified":1654483061600},{"_id":"public/bug-sprigCloud/01.png","hash":"c4a711f619567903ca4594e33d852783dd9f8d8c","modified":1654483061600},{"_id":"public/classLoad/02.png","hash":"86dffdfb2c8ce61214bb849c096af41ca70bed21","modified":1654483061600},{"_id":"public/interest/3_5_8.png","hash":"193e1a023943bc5656e01ef063f42732971db16e","modified":1654483061600},{"_id":"public/mysql-index/01.png","hash":"54cd4793929b29298555767248f44b1f867292e0","modified":1654483061600},{"_id":"public/lock01/read_writer_Lock1.png","hash":"c313df303034ea20d7755e1c852508078989d8fb","modified":1654483061600},{"_id":"public/mysql-index/02.png","hash":"bb67fbd6d341bb29c9b23aa3b1e02caf5ed5802b","modified":1654483061600},{"_id":"public/mysql-index/03.png","hash":"f85542f17ee81b68a42fa3639b7ffba74a8bd321","modified":1654483061600},{"_id":"public/mvcc/03.png","hash":"f7f700d6a81adb11c2ffc01c9ad1d19b5b43e596","modified":1654483061600},{"_id":"public/mvcc/02.png","hash":"fb4b67fb5dd68379252c5ceeed223205451add33","modified":1654483061600},{"_id":"public/mvcc/04.png","hash":"b695fa332822b8c862321b4e2499745a1b6f2ca9","modified":1654483061600},{"_id":"public/mysql/image-20200727224117281.png","hash":"68e6828d09f7daebb9a859acd87756dc88da68b5","modified":1654483061600},{"_id":"public/mysql/image-20200727231112059.png","hash":"ca143ba3c9308f2cf8e4cdffb51ab0cc66a60531","modified":1654483061600},{"_id":"public/mysql-transcation/image-20200727231112059.png","hash":"ca143ba3c9308f2cf8e4cdffb51ab0cc66a60531","modified":1654483061600},{"_id":"public/mysql-transcation/image-20200727224117281.png","hash":"68e6828d09f7daebb9a859acd87756dc88da68b5","modified":1654483061600},{"_id":"public/mysql-transcation/image-20201202213520136.png","hash":"6c74d02c03add5d40f7be56bdca5ef54994de67b","modified":1654483061600},{"_id":"public/mysql-transcation/image-20201202214957559.png","hash":"21b3c64e6c15ab8c367d54659254df3db4973acb","modified":1654483061600},{"_id":"public/outOfMemoryError/02.png","hash":"a898d849242743c8573b744a0c9194220661a57d","modified":1654483061600},{"_id":"public/redis-usage-scenario/03.png","hash":"ec320a53ed8e0af403d19035ff6b8f8f6575fcfa","modified":1654483061600},{"_id":"public/valine/1.png","hash":"214770b02830880d8d67d52bf14d5e7a6c3b5512","modified":1654483061600},{"_id":"public/volatile/01.png","hash":"5fd741f1eee38e918cb00834a1315f53c1231f1c","modified":1654483061600},{"_id":"public/Installing-CentOS-system/1.png","hash":"f34020c2e41afb0e89340cdfe3ba14e9252db497","modified":1654483061600},{"_id":"public/Installing-CentOS-system/4-2.png","hash":"167b6541c729f3f13da39404e8893293f9e3c8aa","modified":1654483061600},{"_id":"public/Installing-CentOS-system/4-1.png","hash":"e9b15df079dbcdb8b8997154ebfc2e199b1ed5cf","modified":1654483061600},{"_id":"public/docker-mysql/5.png","hash":"e339ccb957fbc115c8b56f9b94352ef6f0cd6e1e","modified":1654483061600},{"_id":"public/nginx-02/image-20201210100736952.png","hash":"1212b42387d66bd9b65c94512385a4c182c5679f","modified":1654483061600},{"_id":"public/nginx-02/image-20201210103251475.png","hash":"bcc1327d5b4046748d82e10628040e1bf09c91bc","modified":1654483061600},{"_id":"public/docker-nginx/2.png","hash":"dbb091b062d005b3b55f0175af97a7ff9583ca8a","modified":1654483061600},{"_id":"public/docker-nginx/3.png","hash":"1c38a521b3b5309559fd989d708511005609b17d","modified":1654483061600},{"_id":"public/docker-nginx/4.png","hash":"0fc9514a56c1d919fd2b0111107c79c9e4324e4a","modified":1654483061600},{"_id":"public/docker-nginx/5.png","hash":"d4b0491ced37594733288d34a8109d9a568f0441","modified":1654483061600},{"_id":"public/docker-nginx/6.png","hash":"de9be7b440110b0371f41d5abb99e013303d6c20","modified":1654483061600},{"_id":"public/docker-nginx/7.png","hash":"48e4f049a01abda02c657c07e1526b0fb30f949a","modified":1654483061600},{"_id":"public/docker-nginx/8.png","hash":"63e82cd6465f9a099d325ab532b5b4486c997eb3","modified":1654483061600},{"_id":"public/docker-nginx/9.png","hash":"c1735fcecebdcb96790fa62d57d95a7b113dacb5","modified":1654483061600},{"_id":"public/nginx-04/2.png","hash":"17e7f8baa7eb538366c99898fd0901dee037f16c","modified":1654483061600},{"_id":"public/nginx-04/1.png","hash":"38e9fe132bf3242373c3509ad42874dcc69189ab","modified":1654483061600},{"_id":"public/nginx-md/2.png","hash":"53d34a5bb034c47549a09d5ee2eae25c30bfe319","modified":1654483061600},{"_id":"public/swagger/3.png","hash":"502e7b0cafe3a538ebcde8d6d61bf994414ea093","modified":1654483061600},{"_id":"public/thread-status/02.png","hash":"47d2b13b858d66a8a08b3b6df720aca50ad7c148","modified":1654483061600},{"_id":"public/thread-status/01.jpg","hash":"1a0b91f489c429c2978096e68f768df0c6a1fdf0","modified":1654483061600},{"_id":"public/mycat/image-20201104204430049.png","hash":"3b9961e1dfc06111312d7fe8afd161ec583d6289","modified":1654483061600},{"_id":"public/mycat/image-20201104204933409.png","hash":"00d84f09649bd8f5af97df8c797b5be80b36189a","modified":1654483061600},{"_id":"public/mycat/image-20201104205054233.png","hash":"5556b40ae89e29d25930df47fefafaafe552a240","modified":1654483061600},{"_id":"public/mycat/image-20201104205319372.png","hash":"98eb034972454a5babf583b6085f0e52f1885b6c","modified":1654483061600},{"_id":"public/mycat/image-20201104210117373.png","hash":"0f609f2a13b028a42334b5c30defcb8da3d6919c","modified":1654483061600},{"_id":"public/mycat/image-20201107212552852.png","hash":"8bbf68419505c255be696590e60910d5694cfaef","modified":1654483061600},{"_id":"public/mycat/image-20201107213638624.png","hash":"eea90ac8885947323777c137aea5e6c4a51b5f88","modified":1654483061600},{"_id":"public/mycat/image-20201107215437139.png","hash":"5e8b13d8e119fa6813d910dd0c85c9f1dfd89fba","modified":1654483061600},{"_id":"public/mycat/image-20201107220049532.png","hash":"a4d9a1a501b6b74bbab8f6078675cdd0d4e5d52a","modified":1654483061600},{"_id":"public/mycat/image-20201107215605251.png","hash":"60b33dace301869dc8470ef787949cdd5cdc7cd8","modified":1654483061600},{"_id":"public/mycat/image-20201127094703483.png","hash":"f857cf4391f4a15818f7d11127df23ab2e19ff64","modified":1654483061600},{"_id":"public/mycat/image-20201127104159580.png","hash":"a6b70b3b261e89e4d8b0d615c069d3180101da9a","modified":1654483061600},{"_id":"public/mycat/image-20201127103212598.png","hash":"e08b1661c6208ead3c24e074e382c0486d796545","modified":1654483061600},{"_id":"public/mycat/image-20201128135953635.png","hash":"18752a442d910714686f729fdd48b0f086751196","modified":1654483061600},{"_id":"public/mycat/image-20201219102742172.png","hash":"e70acc0b0f994711194e155b1a5b61451692cbdb","modified":1654483061600},{"_id":"public/mycat/image-20201129110838590.png","hash":"ade0139b7a7daa20e9d5369701b71c8dc7e1280d","modified":1654483061600},{"_id":"public/mycat/image-20201215152125176.png","hash":"451328599a4358567019ae6265cc084048daca28","modified":1654483061600},{"_id":"public/lib/hbe.js","hash":"136dba00826bdd086153bf0acb5473aea7183ad1","modified":1654483061600},{"_id":"public/css/hbe.style.css","hash":"b0a0077cb588c0941823905fcc383aa7509ade73","modified":1654483061600},{"_id":"public/linux-minio/1.png","hash":"7c5eea4fe5476fcf8b938673807b8b34537a51e8","modified":1654483061600},{"_id":"public/linux-minio/12.png","hash":"36962b8e10cfdf26456f451087ffada9a64bdeb4","modified":1654483061600},{"_id":"public/linux-minio/14.png","hash":"05021003b4c69ebca2fe244258defc16845b6498","modified":1654483061600},{"_id":"public/linux-minio/15.png","hash":"f6820192467db36736d7f52a6424cacae8768fc0","modified":1654483061600},{"_id":"public/linux-minio/16.png","hash":"3c8e000783f44cc60153c5e2db45cfa657ffa2ba","modified":1654483061600},{"_id":"public/linux-minio/3.png","hash":"b6f25f5b0bb2823adf14cbfe55e191aa9f753f62","modified":1654483061600},{"_id":"public/linux-minio/3_1.png","hash":"52fb304193ba432d12c69209ec7d345c0fa57345","modified":1654483061600},{"_id":"public/linux-minio/9.png","hash":"3bfdfd107ade41f4f5912e6dee91c24419ffb2e2","modified":1654483061600},{"_id":"public/message-oriented-middleware/2.png","hash":"8a515b17d52e64a9321983a287e602b6dce0c547","modified":1654483061600},{"_id":"public/linux-search-file/1.png","hash":"8a121a7fb5d0dc1f301697fce79cb7914d8fa310","modified":1654483061600},{"_id":"public/linux-search-file/3.png","hash":"9e68980ebe701bfbec8ada7615726d099e31bd1e","modified":1654483061600},{"_id":"public/export-database-file/1.png","hash":"736e7c74acafa83fea50dfab7a7a29a48e12b341","modified":1654483061600},{"_id":"public/uml/3.png","hash":"1506e3543d80d10e1371c02fb2453d6e4435a962","modified":1654483061600},{"_id":"public/gitlab/11.png","hash":"ece656c5fdfa979e92408e601f7869137f1f8ecb","modified":1654483061600},{"_id":"public/gitlab/4.png","hash":"0791f9a79a73862c51e935ee6d975b8e25973deb","modified":1654483061600},{"_id":"public/gitlab/7.png","hash":"70741198a2a353a434fd93f9c5f4ffc46ac8fc1f","modified":1654483061600},{"_id":"public/gitlab/5.png","hash":"8a725fc34620d1f40e885fe04b813026255a5803","modified":1654483061600},{"_id":"public/gitlab/9.png","hash":"260a30023b1b86ca2a0f6961acd59c273af3b1a4","modified":1654483061600},{"_id":"public/jstack/1.png","hash":"c8f4f3c27a579129df9a3e2825323a33c2a91f67","modified":1654483061600},{"_id":"public/jstack/state.png","hash":"f5203b9a3d961993ad310ec0f296524e0626fb44","modified":1654483061600},{"_id":"public/mysql-install/4.png","hash":"416ea1e9a568ee5528a17726fc0945b9b8a29934","modified":1654483061600},{"_id":"public/mysql-install/3.png","hash":"bfb16e1540e2fe64330a4c4181c1daf3cfec2c3f","modified":1654483061600},{"_id":"public/mysql-install/7.png","hash":"b8637719e1bb4c9f69efe359e5592996763e0859","modified":1654483061600},{"_id":"public/ElasticSearch/image-20200807093208470.png","hash":"5975509b668fef3322a88c368dfbe3a0cb22c4d5","modified":1654483061600},{"_id":"public/bug-sprigCloud/02.png","hash":"05f5e2d3920fd5c9483258187681e6bbe23e84ae","modified":1654483061600},{"_id":"public/classLoad/01.png","hash":"adc1cf322ff0f1e91e09b350d4848fdc7f0f4e43","modified":1654483061600},{"_id":"public/mvcc/01.png","hash":"8e70ad2e05ff2d94793d61c114aaf474b7927cdb","modified":1654483061600},{"_id":"public/mysql-transcation/image-20201202210235089.png","hash":"fe845f80b723d3bf3c8945f241d138dcc4406c85","modified":1654483061600},{"_id":"public/mysql-transcation/image-20201202210357906.png","hash":"d8f89873679085168d728ab2df89b1cc1939db22","modified":1654483061600},{"_id":"public/mysql-transcation/image-20201202210510525.png","hash":"78df0df3cfc22065a0ab6be7333cb4c759b348e8","modified":1654483061600},{"_id":"public/mysql-transcation/image-20201202211406282.png","hash":"a579a52d0d3fb2191a448da7ac3442f48d37167b","modified":1654483061600},{"_id":"public/mysql-transcation/image-20201202214418001.png","hash":"178a89d26eef0c2ab3610e86e557b0440ddaaf0e","modified":1654483061600},{"_id":"public/mysql-transcation/image-20201202222823984.png","hash":"34f9cfe5119eb3d50e1e45c03ebf4d5bf00f3b18","modified":1654483061600},{"_id":"public/mysql-transcation/image-20201202223655445.png","hash":"67288f601f88c0c5662e4a4641f717a451d0be55","modified":1654483061600},{"_id":"public/mysql-transcation/image-20201202224412832.png","hash":"0ca867bcd26897674958c4dad0473f2f266e2cfd","modified":1654483061600},{"_id":"public/outOfMemoryError/01.png","hash":"7e36df889d5346adcb0b77af23d68afed39a6f57","modified":1654483061600},{"_id":"public/redis-usage-scenario/02.png","hash":"6b57644ca016b2afe659711504c62fc402e412b5","modified":1654483061600},{"_id":"public/redis-usage-scenario/05.png","hash":"bd668a6a1a9aaa46de2d3b6c2d83175d6592869e","modified":1654483061600},{"_id":"public/redis-usage-scenario/04.png","hash":"cd1258db49a0356c37fe297edcc5e9d7b0d83983","modified":1654483061600},{"_id":"public/redis_install/image-20201201155441018.png","hash":"baa59222dafedc944f8ab692af3dfb4d4d3e69f0","modified":1654483061600},{"_id":"public/valine/4.png","hash":"ca41c1cedf856b6a9ee6b5c335c900a962b1fca6","modified":1654483061600},{"_id":"public/Installing-CentOS-system/2.png","hash":"acc481a1b27839ff6da93ed091bd9d4baca3f0be","modified":1654483061600},{"_id":"public/Installing-CentOS-system/3-1.png","hash":"12cba1eec366cb17ef75b3ccaa91ca19829a5b2a","modified":1654483061600},{"_id":"public/Installing-CentOS-system/5.png","hash":"1cbdbb6eff746f3de5e02db89458d4f0778ee2c9","modified":1654483061600},{"_id":"public/Installing-CentOS-system/6.png","hash":"b5b8a678ef5a604749dc06dcb65e5f7aec38b5b9","modified":1654483061600},{"_id":"public/docker-mysql/2.png","hash":"6c2815970adbd185fa924848aa20bfcb40851d47","modified":1654483061600},{"_id":"public/docker-mysql/3.png","hash":"6c8d3cd512f6abda288704617a1aa51033762d7b","modified":1654483061600},{"_id":"public/docker-mysql/4.png","hash":"4ee8f050b4e463bc96e0e688144aaea3d87e5d6e","modified":1654483061600},{"_id":"public/nginx-02/3.png","hash":"32cb858c15ef5a818469661ff92b0fbb29f7268d","modified":1654483061600},{"_id":"public/docker-mysql/6.png","hash":"91d028cf00872aeb63d20289e81367d040e7ee1f","modified":1654483061600},{"_id":"public/docker-01/1.png","hash":"09ac5dd0a31482780c52c3cd3dae3ff162a725d2","modified":1654483061600},{"_id":"public/swagger/1.png","hash":"1e3ff7efd09e90ccb1ff4601d40d7636f11d0564","modified":1654483061600},{"_id":"public/swagger/2.png","hash":"630be832578cebce0d346834cc32f517c06b7160","modified":1654483061600},{"_id":"public/swagger/5.png","hash":"47812a78532778ce81beb09b31114036bc372469","modified":1654483061600},{"_id":"public/swagger/6.png","hash":"198c97f144e158ea3a16ea9b82b46e388412d606","modified":1654483061600},{"_id":"public/swagger/7.png","hash":"46c8c0b6870f09832c2f12e57a5989bf1159b845","modified":1654483061600},{"_id":"public/swagger/8.png","hash":"4059141f986e51c9b7bde7b8d1a97bfb1070c3c6","modified":1654483061600},{"_id":"public/thread-status/03.png","hash":"9cffd1a59fb01ce897dbc3e4c7616dd2f765af3c","modified":1654483061600},{"_id":"public/mycat/image-20201104204624925.png","hash":"bef63295b620faf484bcd0945acc3675f888b2ce","modified":1654483061600},{"_id":"public/mycat/image-20201104205756827.png","hash":"9ab8db96a20f18e0a6be7ca82b7eeb23028d575e","modified":1654483061600},{"_id":"public/mycat/image-20201104213343204.png","hash":"d5add96f96f18cc51096e6a708cd87b730b35ef8","modified":1654483061600},{"_id":"public/mycat/image-20201104210008624.png","hash":"794595be91b46735e45bbc76c6018cd10053e729","modified":1654483061600},{"_id":"public/mycat/image-20201104221659540.png","hash":"b87e471db113a327ac9fd577d18673fd3a29b2c3","modified":1654483061600},{"_id":"public/mycat/image-20201104223246735.png","hash":"66ab19ab75bc92a4894f7f678883ff967f00722e","modified":1654483061600},{"_id":"public/mycat/image-20201107201442912.png","hash":"a2f75b03bfb1d076f552403fb247bfcbdf20c259","modified":1654483061600},{"_id":"public/mycat/image-20201107205855474.png","hash":"087671495d91dc235cfcd2071c88e12032123d97","modified":1654483061600},{"_id":"public/mycat/image-20201219103201836.png","hash":"f93d0c9392049c1139d0392a2965d0dcdd34555e","modified":1654483061600},{"_id":"public/mycat/image-20201220172406074.png","hash":"d5cc2fd773afab1df221d3c8dde5d1c9eb409f8c","modified":1654483061600},{"_id":"public/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1654483061600},{"_id":"public/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1654483061600},{"_id":"public/linux-minio/8.png","hash":"9cc56fd5b83c33f3cb00e2b1e2b47cad34915d1f","modified":1654483061600},{"_id":"public/linux-search-file/4.png","hash":"2baa488322ce8dcbe041021f8773f4d34c875dfc","modified":1654483061600},{"_id":"public/uml/1.png","hash":"c8262797a5460b60a431abaea94c92d3a713eac2","modified":1654483061600},{"_id":"public/jdk-install/1.png","hash":"edc99d2792c6dc03d577e845aca730cb3720db1c","modified":1654483061600},{"_id":"public/classLoad/03.png","hash":"9bcb79b7f54a0a07c9ebf3b02ace8509cfc924ed","modified":1654483061600},{"_id":"public/mysql-transcation/image-20201202222250939.png","hash":"f62bf3adf4e2ccebebd148f81a8e525680d18ccb","modified":1654483061600},{"_id":"public/mysql-transcation/image-20201202222914087.png","hash":"91e77f0b02a413d0e9613da5eeb7e65023a2897a","modified":1654483061600},{"_id":"public/mysql-transcation/image-20201202224136052.png","hash":"98dd9ff6c0a991a146edc81251bace4c4c4470ce","modified":1654483061600},{"_id":"public/valine/3.png","hash":"e956b57ef3817874f210a6d8d375aef438534e1d","modified":1654483061600},{"_id":"public/Installing-CentOS-system/4-3.png","hash":"7bdd1d4caf4d48b83fdd7d29d93313e5dfd52a09","modified":1654483061600},{"_id":"public/Installing-CentOS-system/4.png","hash":"e23eb17b1f7f00d3e8b44ace3466098582b5a9b6","modified":1654483061600},{"_id":"public/swagger/4.png","hash":"b89a81fba4627f4a0db77b4f93b6f295f7224a46","modified":1654483061600},{"_id":"public/mycat/image-20201104215015366.png","hash":"319b52e8cd8fd7ab472a2993d860f8f3fe3f6ad1","modified":1654483061600},{"_id":"public/mycat/image-20201104222632963.png","hash":"f84fe140ea2c25cc5a93e006f86729522a8a1289","modified":1654483061600},{"_id":"public/fonts/README.html","hash":"3b9daaf126709e3bbce5926e15d599f1fe877921","modified":1654483061600},{"_id":"public/js/application.js","hash":"3d7891920e3d4b286e99206d0c9e5f3e9dd29b2b","modified":1654483061600},{"_id":"public/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1654483061600},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1654483061600},{"_id":"public/images/donate/alipayimg.png","hash":"4b5dcdc366cf96737e582094267b6f177c15bb44","modified":1654483061600},{"_id":"public/Apache-Http-Server/4.png","hash":"e865be7defcd5d7f30e581e182d0c4c643e632b4","modified":1654483061600},{"_id":"public/uml/9.png","hash":"21f38194287642c4fe0aeb209375da7a3eca03cd","modified":1654483061600},{"_id":"public/ElasticSearch/image-20200807093309761.png","hash":"d95ac7aaea31cd9322f5f7d8c8a704d76b7e503c","modified":1654483061600},{"_id":"public/mysql-transcation/image-20201202211752764.png","hash":"40651944aab63eda574090e4a018a8f433be12a2","modified":1654483061600},{"_id":"public/mysql-transcation/image-20201202212103393.png","hash":"672bbb9ae12eaf223dfda421a62d3dec36406e3d","modified":1654483061600},{"_id":"public/valine/2.png","hash":"4026febdc49bb2319e6cef1a5cc06649cd8dda0b","modified":1654483061600},{"_id":"public/sql-model/1.png","hash":"fe8bac1db0a94e89605d25b7f9a7f98dcb2f88ce","modified":1654483061600},{"_id":"public/docker-nginx/1.png","hash":"a3dc3998d27ad48a417f4188f2c192075988f29c","modified":1654483061600},{"_id":"public/nginx-04/3.png","hash":"b55a0507b4ebbd8be1a5884816fbc1da252a3b24","modified":1654483061600},{"_id":"public/nginx-md/1.png","hash":"a569af0fb2f1725e8006750237083a82a8651daf","modified":1654483061600},{"_id":"public/images/donate/wechatpayimg.png","hash":"e881a9e141da37ca46258e9d8fada3b51cd11046","modified":1654483061600},{"_id":"public/linux-minio/2.png","hash":"fab159eedb22c1d677e8b263f17fd644d35d93fa","modified":1654483061600},{"_id":"public/mysql-transcation/image-20201202215350319.png","hash":"2c3cef1bc3cfa005b5aa46a8ff19c0cb0667e39c","modified":1654483061600},{"_id":"public/Installing-CentOS-system/3.png","hash":"5b864caef9c16fa8e5187dc5bf0d3944a9b95959","modified":1654483061600},{"_id":"public/Installing-CentOS-system/8.png","hash":"c8024d10d745586c532ce67a91301b4397bfeee6","modified":1654483061600},{"_id":"public/docker-mysql/1.png","hash":"9fbfcbff4b301fc300cd266f6a02fc7190a4d6c1","modified":1654483061600},{"_id":"public/mycat/image-20201104205653611.png","hash":"df947668dea64063a150fe0a3dbcd49d696a163c","modified":1654483061600},{"_id":"public/mycat/image-20201104210416994.png","hash":"05f625952a7a96994300c52e4444d0f670c9ac4f","modified":1654483061600},{"_id":"public/mycat/image-20201107213859155.png","hash":"bcd51eb3650bc7519c5ccbe20caba54237ec808e","modified":1654483061600},{"_id":"public/mycat/image-20201220170713526.png","hash":"7a7f2a55b96a42ad49efa80806a9a5c9ba06a98d","modified":1654483061600},{"_id":"public/mysql-transcation/image-20201202210817094.png","hash":"6810630ccd02b7b68215d147c408f8769edb92c3","modified":1654483061600},{"_id":"public/outOfMemoryError/03.png","hash":"f6c5120f15f65e198b3d7f8f67f0b83c9fdca7b1","modified":1654483061600},{"_id":"public/outOfMemoryError/05.png","hash":"bd8a1e8b789597121dc0ea116762c8bcf6f3e385","modified":1654483061600},{"_id":"public/Installing-CentOS-system/7.png","hash":"b1b263434f52d85aeb2a36fd0304dd423629eb58","modified":1654483061600},{"_id":"public/outOfMemoryError/04.png","hash":"bbee74780760a53a2d4ece78fdd88b46d1592f4b","modified":1654483061600},{"_id":"public/redis-usage-scenario/01.png","hash":"0e23b53142149c6b75e693e8d5b6eb87148897c3","modified":1654483061600},{"_id":"public/redis-usage-scenario/06.png","hash":"a97a3387e2bca72ee714fd4b60201b58b2fe4ca3","modified":1654483061600},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1654483061600},{"_id":"public/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1654483061600},{"_id":"public/images/avatar.png","hash":"ebde5ecfd529edecfab55788e99ffcb22df93730","modified":1654483061600},{"_id":"public/jstack/3.png","hash":"c3afddc9eeb2abae77bc43f38332312930d5d8e5","modified":1654483061600},{"_id":"public/about/img.png","hash":"f67efb78c67935d5b7331197f9a848f530b8fe07","modified":1654483061600},{"_id":"public/linux-search-file/7.png","hash":"9c4d3d1417d8d9d77709a81ad7101b97a9d31239","modified":1654483061600},{"_id":"public/mysql-transcation/image-20201202213757692.png","hash":"1187aa165415735ce8b7352d39fe3af5561e86d1","modified":1654483061600},{"_id":"public/jstack/7.png","hash":"818130c2720ddaf65c8ad00b87983be7b517b93e","modified":1654483061600},{"_id":"public/mysql-transcation/image-20201202215717524.png","hash":"6173e68d50fed251dd9a7a908823df5b5751df4c","modified":1654483061600},{"_id":"public/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1654483061600},{"_id":"public/jstack/4.png","hash":"586ccec48bd2d45a5150951e86ca66ccbf1df0e5","modified":1654483061600},{"_id":"public/jstack/2.png","hash":"f84af5d2e1b4ba09de746ca1667a869451718194","modified":1654483061600},{"_id":"public/mycat/image-20201104221336437.png","hash":"e8e98f07e2503e85bbcb2699b8450ffe0e108663","modified":1654483061600},{"_id":"public/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1654483061600},{"_id":"public/linux-search-file/6.png","hash":"89821ca7ccc64c8006eed3adfb8b5866f57005ec","modified":1654483061600},{"_id":"public/jstack/6.png","hash":"2677dfdb849cd60adc828f666f5890dc9416b345","modified":1654483061600},{"_id":"public/outOfMemoryError/06.png","hash":"c3e65cb83beb665dffdd05ab3b30ed47bd480951","modified":1654483061600},{"_id":"public/css/style.css","hash":"3d3e8ff811a2d4f2524f5e7b027f8a2b6a16fb0c","modified":1654483061600},{"_id":"public/nginx-02/image-20210606160947369.png","hash":"f3cd662ff33c0eb8bd29eea58aeb699f5e7a8a71","modified":1654483061600},{"_id":"public/Apache-Http-Server/2.png","hash":"15d7377e56c447aaa34af2cf40c38f0345af9a38","modified":1654483061600},{"_id":"public/uml/4.png","hash":"5ccf20558f9a13da9ddea2e51c5a2f700dd924c3","modified":1654483061600},{"_id":"public/Apache-Http-Server/3.png","hash":"82a88cdec865e7094ba8a521242e631bf7afa455","modified":1654483061600}],"Category":[{"name":"linux","_id":"cl424hx4y0004ad5i9pbsgd4d"},{"name":"中间件","_id":"cl424hx58000jad5idohnciy5"},{"name":"java","_id":"cl424hx5a000qad5idwzp2kyd"},{"name":"架构师笔记","_id":"cl424hx5f0013ad5iet9b3twc"},{"name":"算法","_id":"cl424hx5k001nad5i8d9fcjdt"},{"name":"mysql","_id":"cl424hx5m001wad5idb1ubr0k"},{"name":"知识整理","_id":"cl424hx5q0029ad5i6glycwrm"},{"name":"踩坑记录","_id":"cl424hx5t002pad5ibfevgp9y"},{"name":"hexo","_id":"cl424hx5v002yad5i29rvf8ip"},{"name":"Docker","_id":"cl424hx6b004oad5i5hps2k28"},{"name":"nginx","_id":"cl424hx6e0058ad5ibztofgxl"},{"name":"swagger","_id":"cl424hx6s006mad5i6pmea3bd"}],"Data":[{"_id":"links","data":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}},{"_id":"gallery","data":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}],"Page":[{"title":"404 Not Found：该页无法显示","toc":false,"comments":1,"_content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: true\npermalink: /404\n---\n<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n","date":"2022-03-27T14:06:03.328Z","updated":"2022-03-27T14:06:03.328Z","path":"/404.html","layout":"page","_id":"cl424hx4r0000ad5i20jlebzd","content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"<%- config.url %>\" homepagename=\"回到我的主页\"></script>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"<%- config.url %>\" homepagename=\"回到我的主页\"></script>\n"},{"title":"简单的聊下自己","description":"xiaoyuge","layout":"about","comments":1,"sidebar":"custom","translate_title":"about","_content":"\n现在的年纪还没有到写自传的时候，只能是在这里简简单单的聊下自己。\n\n我呢，一个普普通通的程序猿。没错就是大家眼中那种熬夜猝死、脱发、肥胖、死宅、一个书包走天下的一类人。\n平时无非就是加加班、打打游戏、看看博客、偶尔追剧，和大部分普通人也没多大区别；\n\n**长相呢，也就那样(请勿舔屏，谢谢)**\n![](../../1.jpeg)\n\n**和下面这四位以及屏幕前的你霸占江湖颜值榜多年**\n\n![](../../img.png)\n\n不过岁月是把杀猪刀，谁也逃不过；哎，不说了，都是泪！！！\n\n--- \n弄这个博客网呢，也就是在学习、工作中遇到了一些问题或者学习到一些东西，在这上面记录一下，当然博客都是一搜一大把，而且内容也大差不差的，这无可厚非；\n\n--- \n\n**暂时写到这里（其实也没啥写的），在下面贴一些鸡汤请大家喝，毕竟看到这里也累了，喝一碗再走。**\n\n1.你真正喜欢想要的，没有一样是可以轻易得到的。\n\n2.愿我走过的苦难你不必经历，愿我已有的幸福你正在触及。\n\n3.打你脸的时候别问我为什么，因为我给你糖的时候你从来不会说谢谢。\n\n4.习惯这个东西很可怕，特别是你不得不面对改变的时候。\n\n5.这个世界就是这样，总有一大群人和你一起欢笑，却只有一个人陪你黯然神伤。\n\n6.喜欢就争取，得到就珍惜，错过就忘记。\n\n7.不要总去顾及别人的目光，做好自己，青春无悔。","source":"about/index.md","raw":"---\ntitle: 简单的聊下自己\ndescription: xiaoyuge\nlayout: about\ncomments: true\nsidebar: custom\ntranslate_title: about\n---\n\n现在的年纪还没有到写自传的时候，只能是在这里简简单单的聊下自己。\n\n我呢，一个普普通通的程序猿。没错就是大家眼中那种熬夜猝死、脱发、肥胖、死宅、一个书包走天下的一类人。\n平时无非就是加加班、打打游戏、看看博客、偶尔追剧，和大部分普通人也没多大区别；\n\n**长相呢，也就那样(请勿舔屏，谢谢)**\n![](../../1.jpeg)\n\n**和下面这四位以及屏幕前的你霸占江湖颜值榜多年**\n\n![](../../img.png)\n\n不过岁月是把杀猪刀，谁也逃不过；哎，不说了，都是泪！！！\n\n--- \n弄这个博客网呢，也就是在学习、工作中遇到了一些问题或者学习到一些东西，在这上面记录一下，当然博客都是一搜一大把，而且内容也大差不差的，这无可厚非；\n\n--- \n\n**暂时写到这里（其实也没啥写的），在下面贴一些鸡汤请大家喝，毕竟看到这里也累了，喝一碗再走。**\n\n1.你真正喜欢想要的，没有一样是可以轻易得到的。\n\n2.愿我走过的苦难你不必经历，愿我已有的幸福你正在触及。\n\n3.打你脸的时候别问我为什么，因为我给你糖的时候你从来不会说谢谢。\n\n4.习惯这个东西很可怕，特别是你不得不面对改变的时候。\n\n5.这个世界就是这样，总有一大群人和你一起欢笑，却只有一个人陪你黯然神伤。\n\n6.喜欢就争取，得到就珍惜，错过就忘记。\n\n7.不要总去顾及别人的目光，做好自己，青春无悔。","date":"2022-05-28T09:17:44.296Z","updated":"2022-05-28T09:17:44.296Z","path":"about/index.html","_id":"cl424hx4w0002ad5i4zivexdf","content":"<p>现在的年纪还没有到写自传的时候，只能是在这里简简单单的聊下自己。</p>\n<p>我呢，一个普普通通的程序猿。没错就是大家眼中那种熬夜猝死、脱发、肥胖、死宅、一个书包走天下的一类人。<br>平时无非就是加加班、打打游戏、看看博客、偶尔追剧，和大部分普通人也没多大区别；</p>\n<p><strong>长相呢，也就那样(请勿舔屏，谢谢)</strong><br><img src=\"/about/index/../1.jpeg\"></p>\n<p><strong>和下面这四位以及屏幕前的你霸占江湖颜值榜多年</strong></p>\n<p><img src=\"/about/index/../img.png\"></p>\n<p>不过岁月是把杀猪刀，谁也逃不过；哎，不说了，都是泪！！！</p>\n<hr>\n<p>弄这个博客网呢，也就是在学习、工作中遇到了一些问题或者学习到一些东西，在这上面记录一下，当然博客都是一搜一大把，而且内容也大差不差的，这无可厚非；</p>\n<hr>\n<p><strong>暂时写到这里（其实也没啥写的），在下面贴一些鸡汤请大家喝，毕竟看到这里也累了，喝一碗再走。</strong></p>\n<p>1.你真正喜欢想要的，没有一样是可以轻易得到的。</p>\n<p>2.愿我走过的苦难你不必经历，愿我已有的幸福你正在触及。</p>\n<p>3.打你脸的时候别问我为什么，因为我给你糖的时候你从来不会说谢谢。</p>\n<p>4.习惯这个东西很可怕，特别是你不得不面对改变的时候。</p>\n<p>5.这个世界就是这样，总有一大群人和你一起欢笑，却只有一个人陪你黯然神伤。</p>\n<p>6.喜欢就争取，得到就珍惜，错过就忘记。</p>\n<p>7.不要总去顾及别人的目光，做好自己，青春无悔。</p>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>现在的年纪还没有到写自传的时候，只能是在这里简简单单的聊下自己。</p>\n<p>我呢，一个普普通通的程序猿。没错就是大家眼中那种熬夜猝死、脱发、肥胖、死宅、一个书包走天下的一类人。<br>平时无非就是加加班、打打游戏、看看博客、偶尔追剧，和大部分普通人也没多大区别；</p>\n<p><strong>长相呢，也就那样(请勿舔屏，谢谢)</strong><br><img src=\"/about/index/../1.jpeg\"></p>\n<p><strong>和下面这四位以及屏幕前的你霸占江湖颜值榜多年</strong></p>\n<p><img src=\"/about/index/../img.png\"></p>\n<p>不过岁月是把杀猪刀，谁也逃不过；哎，不说了，都是泪！！！</p>\n<hr>\n<p>弄这个博客网呢，也就是在学习、工作中遇到了一些问题或者学习到一些东西，在这上面记录一下，当然博客都是一搜一大把，而且内容也大差不差的，这无可厚非；</p>\n<hr>\n<p><strong>暂时写到这里（其实也没啥写的），在下面贴一些鸡汤请大家喝，毕竟看到这里也累了，喝一碗再走。</strong></p>\n<p>1.你真正喜欢想要的，没有一样是可以轻易得到的。</p>\n<p>2.愿我走过的苦难你不必经历，愿我已有的幸福你正在触及。</p>\n<p>3.打你脸的时候别问我为什么，因为我给你糖的时候你从来不会说谢谢。</p>\n<p>4.习惯这个东西很可怕，特别是你不得不面对改变的时候。</p>\n<p>5.这个世界就是这样，总有一大群人和你一起欢笑，却只有一个人陪你黯然神伤。</p>\n<p>6.喜欢就争取，得到就珍惜，错过就忘记。</p>\n<p>7.不要总去顾及别人的目光，做好自己，青春无悔。</p>\n"},{"title":"博客分类","layout":"categories","comments":1,"translate_title":"classification","_content":"","source":"categories/index.md","raw":"---\ntitle: 博客分类\nlayout: categories\ncomments: true\ntranslate_title: classification\n---\n","date":"2022-05-28T09:21:03.090Z","updated":"2022-05-28T09:21:03.090Z","path":"categories/index.html","_id":"cl424hx500006ad5ihxa7fx72","content":"","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":""},{"title":"书单","layout":"books","comments":1,"sidebar":"none","translate_title":"books","_content":"","source":"books/index.md","raw":"---\ntitle: 书单\nlayout: books\ncomments: true\nsidebar: none\ntranslate_title: books\n---\n","date":"2022-05-28T09:20:39.996Z","updated":"2022-05-28T09:20:39.996Z","path":"books/index.html","_id":"cl424hx510008ad5i8a4e610w","content":"","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":""},{"title":"友链","layout":"links","comments":1,"sidebar":"none","translate_title":"links","_content":"","source":"links/index.md","raw":"---\ntitle: 友链\nlayout: links\ncomments: true\nsidebar: none\ntranslate_title: links\n---\n","date":"2022-05-28T09:21:27.578Z","updated":"2022-05-28T09:21:27.578Z","path":"links/index.html","_id":"cl424hx52000aad5ibo4ncdqd","content":"","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":""},{"title":"个人项目","layout":"repository","comments":1,"sidebar":"none","translate_title":"repositories","_content":"\n","source":"repository/index.md","raw":"---\ntitle: 个人项目\nlayout: repository\ncomments: true\nsidebar: none\ntranslate_title: repositories\n---\n\n","date":"2022-05-28T09:20:26.265Z","updated":"2022-05-28T09:20:26.265Z","path":"repository/index.html","_id":"cl424hx55000fad5i5dfm53d2","content":"","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":""},{"title":"标签","layout":"tags","comments":1,"translate_title":"label","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nlayout: tags\ncomments: true\ntranslate_title: label\n---\n","date":"2022-03-27T14:06:03.489Z","updated":"2022-03-27T14:06:03.489Z","path":"tags/index.html","_id":"cl424hx57000had5i3fuwgc8i","content":"","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":""}],"Post":[{"title":"MinIO简介以及Linux安装MinIO","comments":1,"translate_title":"linux_minio","abbrlink":63839,"date":"2022-03-21T05:39:15.000Z","_content":"\n## 1. 什么是对象存储\n对象存储服务OSS（Object Storage Service）是一种海量、安全、低成本、高可用的云存储服务，**适合存放任意类型的文件**。容量和处理能力弹性扩展，多种存储类型提供选择，全面优化存储成本。\n\n最大的优势：可以存储大量的非结构话数据，例如：图片、视频、日志文件、备份数据和容器/虚拟机镜像等。\n\n## 2. MinIO\nMinIO 是个基于Golang编写的开源对象存储套件，基于Apache License V2.0开源协议，虽然轻量，却拥有不错的性能，兼容亚马逊S3云存储服务接口。可以很简单的和其他应用结合使用，例如：NodeJS、Redis、mysql等\n\n中文文档： http://docs.minio.org.cn/docs/master/minio-monitoring-guide\n\n### 2.1 MinIO应用场景\n可以作为私有云的对象存储服务来使用，也可以作为云对象存储的网关层，无缝对接Amazon S3 或者 MicroSoft Azure 。\n![应用场景](./linux-minio/1.png)\n\n### 2.2 MinIO特点\n- 高性能\n  \n    作为一款高性能存储，在标准硬件条件下，其读写速率分别可以达到55Gb/s和 35Gb/s。并且MinIO支持一个对象文件是任意大小（几KB到最大5T不等）\n  \n- 可扩展\n  \n    不同MinIO集群可以组成联邦，并形成一个全局的命名空间，并且支持跨越多个数据中心\n  \n- 云原生\n  \n    容器化、基于K8S的编排、多租户支持\n  \n- Amazon S3兼容\n  \n    使用Amazon S3 V2/V4 API。可以使用Minio SDK，Minio Client，AWS SDK 和 AWS CLI 访问Minio服务器。\n  \n- 可对接多种后端存储\n  \n  除了Minio自己的文件系统，还支持 DAS、 JBODs、NAS、Google云存储和 Azure Blob存储。\n  \n- SDK支持\n  \n  GO SDK： https://github.com/minio/minio-go\n\n  \n  JavaSDK： https://github.com/minio/minio-java\n  \n  PythonSDK： https://github.com/minio/minio-py\n\n\n- Lambda计算\n\n  Minio服务器通过其兼容AWS SNS / SQS的事件通知服务触发Lambda功能。支持的目标是消息队列，如Kafka，NATS，AMQP，MQTT，Webhooks以及Elasticsearch，Redis，Postgres和MySQL等数据库\n\n- 图形化界面\n\n    有操作页面\n\n- 功能简单\n    \n    不容易出错，快速启动\n\n- 支持纠删码\n\n  MinIO使用纠删码、Checksum来防止硬件错误和静默数据污染。在最高冗余度配置下，即使丢失1/2的磁盘也能恢复数据\n\n### 2.3 存储机制\nMinIO 使用纠删码erasure code、校验和checksum。 即使丢一半数据（N/2）的鹰派，仍然可以恢复数据。\n\n- 校验和checksum\n\n    保护数据免受硬件故障和无声数据损坏\n  \n- 纠删码erasure code\n\n    纠删码是一种恢复丢失和损坏数据的数据算法，目前纠删码技术在分布式存储系统中的应用主要有三类：阵列纠删码（Array Code : RAID5、RAID6等）、RS（Reed-Solomon）里德-所罗门类纠删码和LDPC（LowDensity Parity Check Code）\n    低密度奇偶校验纠删码。\n  \n    Erasure code 是一种编码技术，他可以将N份原始数据，增加m份数据，并通过n+m 份中的任意n份数据，还原为原始数据。即如果有任意小于等于m份的数据失效，仍然能通过剩下的数据还原出来。\n  MinIO 采用Reed-Solomon code将对象拆分成N/2数据和N/2奇偶校验快，这就意味着如果是12块盘，一个对象会分成6个数据块、6个奇偶校验块；可以丢失任意6块盘（不管是存放的数据块还是奇偶校验块），仍可以通过剩下的盘进行数据恢复\n  \n\n## 3. 安装和使用MinIO\n\n### 3.1 Linux安装MinIO\n1.  下载（https://min.io/download#/linux）\n    ```shell\n    wget https://dl.min.io/server/minio/release/linux-amd64/minio\n    ```\n    \n2. 运行\n    ```shell\n    chmod +x minio\n    ./minio server /usr/software/minio/data      #将/usr/software/minio/data 替换为您希望 MinIO 存储数据的驱动器或目录的路径。\n   #或者指定账号密码启动\n   MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data\n   \n    #后台启动\n   nohup ./minio server /usr/software/minio/data  >  /usr/software/minio/minio.log 2>&1 &#\n   \n   #或者指定账号密码启动\n   MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin nohup ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data>  /usr/software/minio/minio.log 2>&1 &#\n   ```\n   ![](./linux-minio/8.png)\n3. 设置启动脚本（建议）\n    ```shell\n     touch minio.sh\n   \n     vi minio.sh\n    ```\n   在sh文件中添加以下内容\n    ```shell\n    #指定登录用户名\n    export MINIO_ACCESS_KEY=username\n    #指定登录密码\n    export MINIO_SECRET_KEY=password\n    #指定端口以及存储文件夹，并启动服务 9000访问端口， 9001 控制台界面访问端口, 这里0.0.0.0可以设置为具体的服务器IP\n    nohup ./minio server --address '0.0.0.0:9000' --console-address '0.0.0.0:9001' ./miniodata > ./miniodata/minio.log 2>&1&\n    ```\n   给当前用户加上执行权限\n    ```shell\n   chmod u+x  *.sh\n     \n    #启动\n   sh minio.sh\n   ```\n\n### 3.2 安装客户端(可选)\n1. 安装\n    ```shell\n    wget https://dl.min.io/client/mc/release/linux-amd64/mc\n    chmod +x mc\n    ./mc --help\n    ```\n   \n2. 使用命令给客户端添加一个服务端\n    ```shell\n    ./mc alias set minio http://172.21.0.7:9000 minioadmin minioadmin\n   ```\n \n3. 创建bucket，并查询所有bucket\n    ```shell\n    [root@ww xiaoyuge]# ./mc ls minio\n    [root@ww xiaoyuge]# ./mc mb minio/mybucket\n    Bucket created successfully `minio/mybucket`\n    [root@ww xiaoyuge]# ./mc ls minio\n    [2020-09-02 03:02:36 CST]      0B mybucket/\n    [root@ww xiaoyuge]# \n   ```\n   \n4. 页面查询bucket\n   \n    ![](./linux-minio/6.png)\n   \n5. 创建用户\n    ```shell\n    ./mc admin user add minio root rootroot\n    ```\n   \n6. 给用户赋予权限\n    ```shell\n    ./mc admin policy set minio readwrite user=root\n    ```\n   \n\n### 3.3 使用MinIO  \n1. 启动\n    \n    在浏览器输入： http://localhost:9000\n    ![](./linux-minio/2.png)\n   在输入控制打印的默认的AccessKey和SecretKey：\n   \n    **AccessKey:** minioadmin\n   \n    **SecretKey（默认）:** minioadmin\n\n    使用AccessKey 和 SecretKey 登录后台。\n\n2. 进入系统后，我们先要点击右上角的“+”按钮，创建一个文件桶（输入名称后，回车即可），在上传文件到这个文件桶中。Create bucket（创建文件桶），然后输入bucket名称为 **test**, 创建成功后再Upload file（上传文件）。\n   ![](./linux-minio/3.png)![](./linux-minio/3_1.png)![](./linux-minio/3_2.png)![](./linux-minio/4.png)\n   \n\n   现在我们去服务器，我们启动时指定的目录去看看，可以看到一个新建的test文件目录（文件桶相当于文件目录），这里没有使用纠删码的模式，所以直接就是源文件了。当我们线上运行的项目已经有源文件了，在使用minio的时候，可以直接指定该目录为minio的文件目录就行了。\n   ![](./linux-minio/5.png)![](./linux-minio/7.png)\n\n3. 分享文件，也可以设置文件分享有效日期\n    ![](./linux-minio/11.png)![img_1.png](./linux-minio/12.png)\n   访问连接会出现如下界面：\n   ![img_1.png](./linux-minio/13.png)\n   \n\n### 3.4 mioIO常见启动问题\n1. 启动报错“WARNING: Console endpoint is listening on a dynamic port...”\n    ![img_1.png](./linux-minio/9.png)\n   错误提示很明显，需要to choose a static port。\n   写了一个shell启动MinIO，在shell中使用--console-address '部署minio的ip:希望通过什么端口打开minio console页面'\n    ```shell\n    export MINIO_ACCESS_KEY=username\n   #指定登录密码\n    export MINIO_SECRET_KEY=password\n    nohup ./minio server --address '0.0.0.0:9000' --console-address '0.0.0.0:9001' ./miniodata > ./miniodata/minio.log 2>&1&\n   ```\n\n## 4. SpringBoot 集成minIO\n项目源代码地址：https://gitee.com/xiaoyuge520/minio-demo， 下面是应用主要功能截图展示：\n![img14.png](./linux-minio/14.png)\n在minIO的控制台界面选择对应的bucket可以查看到刚提交的内容\n![img14.png](./linux-minio/15.png)\n\n同理，删除也是一样！！！\n![img14.png](./linux-minio/16.png)\n\n    ","source":"_posts/2022/03/linux-minio.md","raw":"---\ntitle: MinIO简介以及Linux安装MinIO\ncomments: true\ntags: Linux\ncategories: linux\ntranslate_title: linux_minio\nabbrlink: 63839\ndate: 2022-03-21 13:39:15\n---\n\n## 1. 什么是对象存储\n对象存储服务OSS（Object Storage Service）是一种海量、安全、低成本、高可用的云存储服务，**适合存放任意类型的文件**。容量和处理能力弹性扩展，多种存储类型提供选择，全面优化存储成本。\n\n最大的优势：可以存储大量的非结构话数据，例如：图片、视频、日志文件、备份数据和容器/虚拟机镜像等。\n\n## 2. MinIO\nMinIO 是个基于Golang编写的开源对象存储套件，基于Apache License V2.0开源协议，虽然轻量，却拥有不错的性能，兼容亚马逊S3云存储服务接口。可以很简单的和其他应用结合使用，例如：NodeJS、Redis、mysql等\n\n中文文档： http://docs.minio.org.cn/docs/master/minio-monitoring-guide\n\n### 2.1 MinIO应用场景\n可以作为私有云的对象存储服务来使用，也可以作为云对象存储的网关层，无缝对接Amazon S3 或者 MicroSoft Azure 。\n![应用场景](./linux-minio/1.png)\n\n### 2.2 MinIO特点\n- 高性能\n  \n    作为一款高性能存储，在标准硬件条件下，其读写速率分别可以达到55Gb/s和 35Gb/s。并且MinIO支持一个对象文件是任意大小（几KB到最大5T不等）\n  \n- 可扩展\n  \n    不同MinIO集群可以组成联邦，并形成一个全局的命名空间，并且支持跨越多个数据中心\n  \n- 云原生\n  \n    容器化、基于K8S的编排、多租户支持\n  \n- Amazon S3兼容\n  \n    使用Amazon S3 V2/V4 API。可以使用Minio SDK，Minio Client，AWS SDK 和 AWS CLI 访问Minio服务器。\n  \n- 可对接多种后端存储\n  \n  除了Minio自己的文件系统，还支持 DAS、 JBODs、NAS、Google云存储和 Azure Blob存储。\n  \n- SDK支持\n  \n  GO SDK： https://github.com/minio/minio-go\n\n  \n  JavaSDK： https://github.com/minio/minio-java\n  \n  PythonSDK： https://github.com/minio/minio-py\n\n\n- Lambda计算\n\n  Minio服务器通过其兼容AWS SNS / SQS的事件通知服务触发Lambda功能。支持的目标是消息队列，如Kafka，NATS，AMQP，MQTT，Webhooks以及Elasticsearch，Redis，Postgres和MySQL等数据库\n\n- 图形化界面\n\n    有操作页面\n\n- 功能简单\n    \n    不容易出错，快速启动\n\n- 支持纠删码\n\n  MinIO使用纠删码、Checksum来防止硬件错误和静默数据污染。在最高冗余度配置下，即使丢失1/2的磁盘也能恢复数据\n\n### 2.3 存储机制\nMinIO 使用纠删码erasure code、校验和checksum。 即使丢一半数据（N/2）的鹰派，仍然可以恢复数据。\n\n- 校验和checksum\n\n    保护数据免受硬件故障和无声数据损坏\n  \n- 纠删码erasure code\n\n    纠删码是一种恢复丢失和损坏数据的数据算法，目前纠删码技术在分布式存储系统中的应用主要有三类：阵列纠删码（Array Code : RAID5、RAID6等）、RS（Reed-Solomon）里德-所罗门类纠删码和LDPC（LowDensity Parity Check Code）\n    低密度奇偶校验纠删码。\n  \n    Erasure code 是一种编码技术，他可以将N份原始数据，增加m份数据，并通过n+m 份中的任意n份数据，还原为原始数据。即如果有任意小于等于m份的数据失效，仍然能通过剩下的数据还原出来。\n  MinIO 采用Reed-Solomon code将对象拆分成N/2数据和N/2奇偶校验快，这就意味着如果是12块盘，一个对象会分成6个数据块、6个奇偶校验块；可以丢失任意6块盘（不管是存放的数据块还是奇偶校验块），仍可以通过剩下的盘进行数据恢复\n  \n\n## 3. 安装和使用MinIO\n\n### 3.1 Linux安装MinIO\n1.  下载（https://min.io/download#/linux）\n    ```shell\n    wget https://dl.min.io/server/minio/release/linux-amd64/minio\n    ```\n    \n2. 运行\n    ```shell\n    chmod +x minio\n    ./minio server /usr/software/minio/data      #将/usr/software/minio/data 替换为您希望 MinIO 存储数据的驱动器或目录的路径。\n   #或者指定账号密码启动\n   MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data\n   \n    #后台启动\n   nohup ./minio server /usr/software/minio/data  >  /usr/software/minio/minio.log 2>&1 &#\n   \n   #或者指定账号密码启动\n   MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin nohup ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data>  /usr/software/minio/minio.log 2>&1 &#\n   ```\n   ![](./linux-minio/8.png)\n3. 设置启动脚本（建议）\n    ```shell\n     touch minio.sh\n   \n     vi minio.sh\n    ```\n   在sh文件中添加以下内容\n    ```shell\n    #指定登录用户名\n    export MINIO_ACCESS_KEY=username\n    #指定登录密码\n    export MINIO_SECRET_KEY=password\n    #指定端口以及存储文件夹，并启动服务 9000访问端口， 9001 控制台界面访问端口, 这里0.0.0.0可以设置为具体的服务器IP\n    nohup ./minio server --address '0.0.0.0:9000' --console-address '0.0.0.0:9001' ./miniodata > ./miniodata/minio.log 2>&1&\n    ```\n   给当前用户加上执行权限\n    ```shell\n   chmod u+x  *.sh\n     \n    #启动\n   sh minio.sh\n   ```\n\n### 3.2 安装客户端(可选)\n1. 安装\n    ```shell\n    wget https://dl.min.io/client/mc/release/linux-amd64/mc\n    chmod +x mc\n    ./mc --help\n    ```\n   \n2. 使用命令给客户端添加一个服务端\n    ```shell\n    ./mc alias set minio http://172.21.0.7:9000 minioadmin minioadmin\n   ```\n \n3. 创建bucket，并查询所有bucket\n    ```shell\n    [root@ww xiaoyuge]# ./mc ls minio\n    [root@ww xiaoyuge]# ./mc mb minio/mybucket\n    Bucket created successfully `minio/mybucket`\n    [root@ww xiaoyuge]# ./mc ls minio\n    [2020-09-02 03:02:36 CST]      0B mybucket/\n    [root@ww xiaoyuge]# \n   ```\n   \n4. 页面查询bucket\n   \n    ![](./linux-minio/6.png)\n   \n5. 创建用户\n    ```shell\n    ./mc admin user add minio root rootroot\n    ```\n   \n6. 给用户赋予权限\n    ```shell\n    ./mc admin policy set minio readwrite user=root\n    ```\n   \n\n### 3.3 使用MinIO  \n1. 启动\n    \n    在浏览器输入： http://localhost:9000\n    ![](./linux-minio/2.png)\n   在输入控制打印的默认的AccessKey和SecretKey：\n   \n    **AccessKey:** minioadmin\n   \n    **SecretKey（默认）:** minioadmin\n\n    使用AccessKey 和 SecretKey 登录后台。\n\n2. 进入系统后，我们先要点击右上角的“+”按钮，创建一个文件桶（输入名称后，回车即可），在上传文件到这个文件桶中。Create bucket（创建文件桶），然后输入bucket名称为 **test**, 创建成功后再Upload file（上传文件）。\n   ![](./linux-minio/3.png)![](./linux-minio/3_1.png)![](./linux-minio/3_2.png)![](./linux-minio/4.png)\n   \n\n   现在我们去服务器，我们启动时指定的目录去看看，可以看到一个新建的test文件目录（文件桶相当于文件目录），这里没有使用纠删码的模式，所以直接就是源文件了。当我们线上运行的项目已经有源文件了，在使用minio的时候，可以直接指定该目录为minio的文件目录就行了。\n   ![](./linux-minio/5.png)![](./linux-minio/7.png)\n\n3. 分享文件，也可以设置文件分享有效日期\n    ![](./linux-minio/11.png)![img_1.png](./linux-minio/12.png)\n   访问连接会出现如下界面：\n   ![img_1.png](./linux-minio/13.png)\n   \n\n### 3.4 mioIO常见启动问题\n1. 启动报错“WARNING: Console endpoint is listening on a dynamic port...”\n    ![img_1.png](./linux-minio/9.png)\n   错误提示很明显，需要to choose a static port。\n   写了一个shell启动MinIO，在shell中使用--console-address '部署minio的ip:希望通过什么端口打开minio console页面'\n    ```shell\n    export MINIO_ACCESS_KEY=username\n   #指定登录密码\n    export MINIO_SECRET_KEY=password\n    nohup ./minio server --address '0.0.0.0:9000' --console-address '0.0.0.0:9001' ./miniodata > ./miniodata/minio.log 2>&1&\n   ```\n\n## 4. SpringBoot 集成minIO\n项目源代码地址：https://gitee.com/xiaoyuge520/minio-demo， 下面是应用主要功能截图展示：\n![img14.png](./linux-minio/14.png)\n在minIO的控制台界面选择对应的bucket可以查看到刚提交的内容\n![img14.png](./linux-minio/15.png)\n\n同理，删除也是一样！！！\n![img14.png](./linux-minio/16.png)\n\n    ","slug":"linux-minio","published":1,"updated":"2022-03-27T12:52:29.493Z","layout":"post","photos":[],"link":"","_id":"cl424hx4u0001ad5i2hlwhd8f","content":"<h2 id=\"1-什么是对象存储\"><a href=\"#1-什么是对象存储\" class=\"headerlink\" title=\"1. 什么是对象存储\"></a>1. 什么是对象存储</h2><p>对象存储服务OSS（Object Storage Service）是一种海量、安全、低成本、高可用的云存储服务，<strong>适合存放任意类型的文件</strong>。容量和处理能力弹性扩展，多种存储类型提供选择，全面优化存储成本。</p>\n<p>最大的优势：可以存储大量的非结构话数据，例如：图片、视频、日志文件、备份数据和容器/虚拟机镜像等。</p>\n<h2 id=\"2-MinIO\"><a href=\"#2-MinIO\" class=\"headerlink\" title=\"2. MinIO\"></a>2. MinIO</h2><p>MinIO 是个基于Golang编写的开源对象存储套件，基于Apache License V2.0开源协议，虽然轻量，却拥有不错的性能，兼容亚马逊S3云存储服务接口。可以很简单的和其他应用结合使用，例如：NodeJS、Redis、mysql等</p>\n<p>中文文档： <a href=\"http://docs.minio.org.cn/docs/master/minio-monitoring-guide\">http://docs.minio.org.cn/docs/master/minio-monitoring-guide</a></p>\n<h3 id=\"2-1-MinIO应用场景\"><a href=\"#2-1-MinIO应用场景\" class=\"headerlink\" title=\"2.1 MinIO应用场景\"></a>2.1 MinIO应用场景</h3><p>可以作为私有云的对象存储服务来使用，也可以作为云对象存储的网关层，无缝对接Amazon S3 或者 MicroSoft Azure 。<br><img src=\"/linux-minio/1.png\" alt=\"应用场景\"></p>\n<h3 id=\"2-2-MinIO特点\"><a href=\"#2-2-MinIO特点\" class=\"headerlink\" title=\"2.2 MinIO特点\"></a>2.2 MinIO特点</h3><ul>\n<li><p>高性能</p>\n<p>  作为一款高性能存储，在标准硬件条件下，其读写速率分别可以达到55Gb/s和 35Gb/s。并且MinIO支持一个对象文件是任意大小（几KB到最大5T不等）</p>\n</li>\n<li><p>可扩展</p>\n<p>  不同MinIO集群可以组成联邦，并形成一个全局的命名空间，并且支持跨越多个数据中心</p>\n</li>\n<li><p>云原生</p>\n<p>  容器化、基于K8S的编排、多租户支持</p>\n</li>\n<li><p>Amazon S3兼容</p>\n<p>  使用Amazon S3 V2/V4 API。可以使用Minio SDK，Minio Client，AWS SDK 和 AWS CLI 访问Minio服务器。</p>\n</li>\n<li><p>可对接多种后端存储</p>\n<p>除了Minio自己的文件系统，还支持 DAS、 JBODs、NAS、Google云存储和 Azure Blob存储。</p>\n</li>\n<li><p>SDK支持</p>\n<p>GO SDK： <a href=\"https://github.com/minio/minio-go\">https://github.com/minio/minio-go</a></p>\n<p>JavaSDK： <a href=\"https://github.com/minio/minio-java\">https://github.com/minio/minio-java</a></p>\n<p>PythonSDK： <a href=\"https://github.com/minio/minio-py\">https://github.com/minio/minio-py</a></p>\n</li>\n</ul>\n<ul>\n<li><p>Lambda计算</p>\n<p>Minio服务器通过其兼容AWS SNS / SQS的事件通知服务触发Lambda功能。支持的目标是消息队列，如Kafka，NATS，AMQP，MQTT，Webhooks以及Elasticsearch，Redis，Postgres和MySQL等数据库</p>\n</li>\n<li><p>图形化界面</p>\n<p>  有操作页面</p>\n</li>\n<li><p>功能简单</p>\n<p>  不容易出错，快速启动</p>\n</li>\n<li><p>支持纠删码</p>\n<p>MinIO使用纠删码、Checksum来防止硬件错误和静默数据污染。在最高冗余度配置下，即使丢失1/2的磁盘也能恢复数据</p>\n</li>\n</ul>\n<h3 id=\"2-3-存储机制\"><a href=\"#2-3-存储机制\" class=\"headerlink\" title=\"2.3 存储机制\"></a>2.3 存储机制</h3><p>MinIO 使用纠删码erasure code、校验和checksum。 即使丢一半数据（N/2）的鹰派，仍然可以恢复数据。</p>\n<ul>\n<li><p>校验和checksum</p>\n<p>  保护数据免受硬件故障和无声数据损坏</p>\n</li>\n<li><p>纠删码erasure code</p>\n<p>  纠删码是一种恢复丢失和损坏数据的数据算法，目前纠删码技术在分布式存储系统中的应用主要有三类：阵列纠删码（Array Code : RAID5、RAID6等）、RS（Reed-Solomon）里德-所罗门类纠删码和LDPC（LowDensity Parity Check Code）<br>  低密度奇偶校验纠删码。</p>\n<p>  Erasure code 是一种编码技术，他可以将N份原始数据，增加m份数据，并通过n+m 份中的任意n份数据，还原为原始数据。即如果有任意小于等于m份的数据失效，仍然能通过剩下的数据还原出来。<br>MinIO 采用Reed-Solomon code将对象拆分成N/2数据和N/2奇偶校验快，这就意味着如果是12块盘，一个对象会分成6个数据块、6个奇偶校验块；可以丢失任意6块盘（不管是存放的数据块还是奇偶校验块），仍可以通过剩下的盘进行数据恢复</p>\n</li>\n</ul>\n<h2 id=\"3-安装和使用MinIO\"><a href=\"#3-安装和使用MinIO\" class=\"headerlink\" title=\"3. 安装和使用MinIO\"></a>3. 安装和使用MinIO</h2><h3 id=\"3-1-Linux安装MinIO\"><a href=\"#3-1-Linux安装MinIO\" class=\"headerlink\" title=\"3.1 Linux安装MinIO\"></a>3.1 Linux安装MinIO</h3><ol>\n<li>下载（<a href=\"https://min.io/download#/linux%EF%BC%89\">https://min.io/download#/linux）</a> <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.min.io/server/minio/release/linux-amd64/minio</span><br></pre></td></tr></table></figure>\n</li>\n<li>运行 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> chmod +x minio</span><br><span class=\"line\"> ./minio server /usr/software/minio/data      #将/usr/software/minio/data 替换为您希望 MinIO 存储数据的驱动器或目录的路径。</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者指定账号密码启动</span></span><br><span class=\"line\">MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">后台启动</span></span><br><span class=\"line\">nohup ./minio server /usr/software/minio/data  &gt;  /usr/software/minio/minio.log 2&gt;&amp;1 &amp;#</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者指定账号密码启动</span></span><br><span class=\"line\">MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin nohup ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data&gt;  /usr/software/minio/minio.log 2&gt;&amp;1 &amp;#</span><br></pre></td></tr></table></figure>\n<img src=\"/linux-minio/8.png\"></li>\n<li>设置启动脚本（建议） <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch minio.sh</span><br><span class=\"line\">   </span><br><span class=\"line\">vi minio.sh</span><br></pre></td></tr></table></figure>\n在sh文件中添加以下内容 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">指定登录用户名</span></span><br><span class=\"line\">export MINIO_ACCESS_KEY=username</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">指定登录密码</span></span><br><span class=\"line\">export MINIO_SECRET_KEY=password</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">指定端口以及存储文件夹，并启动服务 9000访问端口， 9001 控制台界面访问端口, 这里0.0.0.0可以设置为具体的服务器IP</span></span><br><span class=\"line\">nohup ./minio server --address &#x27;0.0.0.0:9000&#x27; --console-address &#x27;0.0.0.0:9001&#x27; ./miniodata &gt; ./miniodata/minio.log 2&gt;&amp;1&amp;</span><br></pre></td></tr></table></figure>\n给当前用户加上执行权限 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u+x  *.sh</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">启动</span></span><br><span class=\"line\">sh minio.sh</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"3-2-安装客户端-可选\"><a href=\"#3-2-安装客户端-可选\" class=\"headerlink\" title=\"3.2 安装客户端(可选)\"></a>3.2 安装客户端(可选)</h3><ol>\n<li>安装 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.min.io/client/mc/release/linux-amd64/mc</span><br><span class=\"line\">chmod +x mc</span><br><span class=\"line\">./mc --help</span><br></pre></td></tr></table></figure></li>\n<li>使用命令给客户端添加一个服务端 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mc alias set minio http://172.21.0.7:9000 minioadmin minioadmin</span><br></pre></td></tr></table></figure></li>\n<li>创建bucket，并查询所有bucket <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ww xiaoyuge]# ./mc ls minio</span><br><span class=\"line\">[root@ww xiaoyuge]# ./mc mb minio/mybucket</span><br><span class=\"line\">Bucket created successfully `minio/mybucket`</span><br><span class=\"line\">[root@ww xiaoyuge]# ./mc ls minio</span><br><span class=\"line\">[2020-09-02 03:02:36 CST]      0B mybucket/</span><br><span class=\"line\">[root@ww xiaoyuge]# </span><br></pre></td></tr></table></figure></li>\n<li>页面查询bucket <img src=\"/linux-minio/6.png\"></li>\n<li>创建用户 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mc admin user add minio root rootroot</span><br></pre></td></tr></table></figure></li>\n<li>给用户赋予权限 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mc admin policy set minio readwrite user=root</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"3-3-使用MinIO\"><a href=\"#3-3-使用MinIO\" class=\"headerlink\" title=\"3.3 使用MinIO\"></a>3.3 使用MinIO</h3><ol>\n<li><p>启动</p>\n<p> 在浏览器输入： <a href=\"http://localhost:9000/\">http://localhost:9000</a><br> <img src=\"/linux-minio/2.png\"><br>在输入控制打印的默认的AccessKey和SecretKey：</p>\n<p> <strong>AccessKey:</strong> minioadmin</p>\n<p> <strong>SecretKey（默认）:</strong> minioadmin</p>\n<p> 使用AccessKey 和 SecretKey 登录后台。</p>\n</li>\n<li><p>进入系统后，我们先要点击右上角的“+”按钮，创建一个文件桶（输入名称后，回车即可），在上传文件到这个文件桶中。Create bucket（创建文件桶），然后输入bucket名称为 <strong>test</strong>, 创建成功后再Upload file（上传文件）。<br><img src=\"/linux-minio/3.png\"><img src=\"/linux-minio/3_1.png\"><img src=\"/linux-minio/3_2.png\"><img src=\"/linux-minio/4.png\"></p>\n<p>现在我们去服务器，我们启动时指定的目录去看看，可以看到一个新建的test文件目录（文件桶相当于文件目录），这里没有使用纠删码的模式，所以直接就是源文件了。当我们线上运行的项目已经有源文件了，在使用minio的时候，可以直接指定该目录为minio的文件目录就行了。<br><img src=\"/linux-minio/5.png\"><img src=\"/linux-minio/7.png\"></p>\n</li>\n<li><p>分享文件，也可以设置文件分享有效日期<br> <img src=\"/linux-minio/11.png\"><img src=\"/linux-minio/12.png\" alt=\"img_1.png\"><br>访问连接会出现如下界面：<br><img src=\"/linux-minio/13.png\" alt=\"img_1.png\"></p>\n</li>\n</ol>\n<h3 id=\"3-4-mioIO常见启动问题\"><a href=\"#3-4-mioIO常见启动问题\" class=\"headerlink\" title=\"3.4 mioIO常见启动问题\"></a>3.4 mioIO常见启动问题</h3><ol>\n<li>启动报错“WARNING: Console endpoint is listening on a dynamic port…”<br> <img src=\"/linux-minio/9.png\" alt=\"img_1.png\"><br>错误提示很明显，需要to choose a static port。<br>写了一个shell启动MinIO，在shell中使用–console-address ‘部署minio的ip:希望通过什么端口打开minio console页面’ <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> export MINIO_ACCESS_KEY=username</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">指定登录密码</span></span><br><span class=\"line\"> export MINIO_SECRET_KEY=password</span><br><span class=\"line\"> nohup ./minio server --address &#x27;0.0.0.0:9000&#x27; --console-address &#x27;0.0.0.0:9001&#x27; ./miniodata &gt; ./miniodata/minio.log 2&gt;&amp;1&amp;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"4-SpringBoot-集成minIO\"><a href=\"#4-SpringBoot-集成minIO\" class=\"headerlink\" title=\"4. SpringBoot 集成minIO\"></a>4. SpringBoot 集成minIO</h2><p>项目源代码地址：<a href=\"https://gitee.com/xiaoyuge520/minio-demo%EF%BC%8C\">https://gitee.com/xiaoyuge520/minio-demo，</a> 下面是应用主要功能截图展示：<br><img src=\"/linux-minio/14.png\" alt=\"img14.png\"><br>在minIO的控制台界面选择对应的bucket可以查看到刚提交的内容<br><img src=\"/linux-minio/15.png\" alt=\"img14.png\"></p>\n<p>同理，删除也是一样！！！<br><img src=\"/linux-minio/16.png\" alt=\"img14.png\"></p>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h2 id=\"1-什么是对象存储\"><a href=\"#1-什么是对象存储\" class=\"headerlink\" title=\"1. 什么是对象存储\"></a>1. 什么是对象存储</h2><p>对象存储服务OSS（Object Storage Service）是一种海量、安全、低成本、高可用的云存储服务，<strong>适合存放任意类型的文件</strong>。容量和处理能力弹性扩展，多种存储类型提供选择，全面优化存储成本。</p>\n<p>最大的优势：可以存储大量的非结构话数据，例如：图片、视频、日志文件、备份数据和容器/虚拟机镜像等。</p>\n<h2 id=\"2-MinIO\"><a href=\"#2-MinIO\" class=\"headerlink\" title=\"2. MinIO\"></a>2. MinIO</h2><p>MinIO 是个基于Golang编写的开源对象存储套件，基于Apache License V2.0开源协议，虽然轻量，却拥有不错的性能，兼容亚马逊S3云存储服务接口。可以很简单的和其他应用结合使用，例如：NodeJS、Redis、mysql等</p>\n<p>中文文档： <a href=\"http://docs.minio.org.cn/docs/master/minio-monitoring-guide\">http://docs.minio.org.cn/docs/master/minio-monitoring-guide</a></p>\n<h3 id=\"2-1-MinIO应用场景\"><a href=\"#2-1-MinIO应用场景\" class=\"headerlink\" title=\"2.1 MinIO应用场景\"></a>2.1 MinIO应用场景</h3><p>可以作为私有云的对象存储服务来使用，也可以作为云对象存储的网关层，无缝对接Amazon S3 或者 MicroSoft Azure 。<br><img src=\"/linux-minio/1.png\" alt=\"应用场景\"></p>\n<h3 id=\"2-2-MinIO特点\"><a href=\"#2-2-MinIO特点\" class=\"headerlink\" title=\"2.2 MinIO特点\"></a>2.2 MinIO特点</h3><ul>\n<li><p>高性能</p>\n<p>  作为一款高性能存储，在标准硬件条件下，其读写速率分别可以达到55Gb/s和 35Gb/s。并且MinIO支持一个对象文件是任意大小（几KB到最大5T不等）</p>\n</li>\n<li><p>可扩展</p>\n<p>  不同MinIO集群可以组成联邦，并形成一个全局的命名空间，并且支持跨越多个数据中心</p>\n</li>\n<li><p>云原生</p>\n<p>  容器化、基于K8S的编排、多租户支持</p>\n</li>\n<li><p>Amazon S3兼容</p>\n<p>  使用Amazon S3 V2/V4 API。可以使用Minio SDK，Minio Client，AWS SDK 和 AWS CLI 访问Minio服务器。</p>\n</li>\n<li><p>可对接多种后端存储</p>\n<p>除了Minio自己的文件系统，还支持 DAS、 JBODs、NAS、Google云存储和 Azure Blob存储。</p>\n</li>\n<li><p>SDK支持</p>\n<p>GO SDK： <a href=\"https://github.com/minio/minio-go\">https://github.com/minio/minio-go</a></p>\n<p>JavaSDK： <a href=\"https://github.com/minio/minio-java\">https://github.com/minio/minio-java</a></p>\n<p>PythonSDK： <a href=\"https://github.com/minio/minio-py\">https://github.com/minio/minio-py</a></p>\n</li>\n</ul>\n<ul>\n<li><p>Lambda计算</p>\n<p>Minio服务器通过其兼容AWS SNS / SQS的事件通知服务触发Lambda功能。支持的目标是消息队列，如Kafka，NATS，AMQP，MQTT，Webhooks以及Elasticsearch，Redis，Postgres和MySQL等数据库</p>\n</li>\n<li><p>图形化界面</p>\n<p>  有操作页面</p>\n</li>\n<li><p>功能简单</p>\n<p>  不容易出错，快速启动</p>\n</li>\n<li><p>支持纠删码</p>\n<p>MinIO使用纠删码、Checksum来防止硬件错误和静默数据污染。在最高冗余度配置下，即使丢失1/2的磁盘也能恢复数据</p>\n</li>\n</ul>\n<h3 id=\"2-3-存储机制\"><a href=\"#2-3-存储机制\" class=\"headerlink\" title=\"2.3 存储机制\"></a>2.3 存储机制</h3><p>MinIO 使用纠删码erasure code、校验和checksum。 即使丢一半数据（N/2）的鹰派，仍然可以恢复数据。</p>\n<ul>\n<li><p>校验和checksum</p>\n<p>  保护数据免受硬件故障和无声数据损坏</p>\n</li>\n<li><p>纠删码erasure code</p>\n<p>  纠删码是一种恢复丢失和损坏数据的数据算法，目前纠删码技术在分布式存储系统中的应用主要有三类：阵列纠删码（Array Code : RAID5、RAID6等）、RS（Reed-Solomon）里德-所罗门类纠删码和LDPC（LowDensity Parity Check Code）<br>  低密度奇偶校验纠删码。</p>\n<p>  Erasure code 是一种编码技术，他可以将N份原始数据，增加m份数据，并通过n+m 份中的任意n份数据，还原为原始数据。即如果有任意小于等于m份的数据失效，仍然能通过剩下的数据还原出来。<br>MinIO 采用Reed-Solomon code将对象拆分成N/2数据和N/2奇偶校验快，这就意味着如果是12块盘，一个对象会分成6个数据块、6个奇偶校验块；可以丢失任意6块盘（不管是存放的数据块还是奇偶校验块），仍可以通过剩下的盘进行数据恢复</p>\n</li>\n</ul>\n<h2 id=\"3-安装和使用MinIO\"><a href=\"#3-安装和使用MinIO\" class=\"headerlink\" title=\"3. 安装和使用MinIO\"></a>3. 安装和使用MinIO</h2><h3 id=\"3-1-Linux安装MinIO\"><a href=\"#3-1-Linux安装MinIO\" class=\"headerlink\" title=\"3.1 Linux安装MinIO\"></a>3.1 Linux安装MinIO</h3><ol>\n<li>下载（<a href=\"https://min.io/download#/linux%EF%BC%89\">https://min.io/download#/linux）</a> <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.min.io/server/minio/release/linux-amd64/minio</span><br></pre></td></tr></table></figure>\n</li>\n<li>运行 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> chmod +x minio</span><br><span class=\"line\"> ./minio server /usr/software/minio/data      #将/usr/software/minio/data 替换为您希望 MinIO 存储数据的驱动器或目录的路径。</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者指定账号密码启动</span></span><br><span class=\"line\">MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">后台启动</span></span><br><span class=\"line\">nohup ./minio server /usr/software/minio/data  &gt;  /usr/software/minio/minio.log 2&gt;&amp;1 &amp;#</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者指定账号密码启动</span></span><br><span class=\"line\">MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin nohup ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data&gt;  /usr/software/minio/minio.log 2&gt;&amp;1 &amp;#</span><br></pre></td></tr></table></figure>\n<img src=\"/linux-minio/8.png\"></li>\n<li>设置启动脚本（建议） <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch minio.sh</span><br><span class=\"line\">   </span><br><span class=\"line\">vi minio.sh</span><br></pre></td></tr></table></figure>\n在sh文件中添加以下内容 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">指定登录用户名</span></span><br><span class=\"line\">export MINIO_ACCESS_KEY=username</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">指定登录密码</span></span><br><span class=\"line\">export MINIO_SECRET_KEY=password</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">指定端口以及存储文件夹，并启动服务 9000访问端口， 9001 控制台界面访问端口, 这里0.0.0.0可以设置为具体的服务器IP</span></span><br><span class=\"line\">nohup ./minio server --address &#x27;0.0.0.0:9000&#x27; --console-address &#x27;0.0.0.0:9001&#x27; ./miniodata &gt; ./miniodata/minio.log 2&gt;&amp;1&amp;</span><br></pre></td></tr></table></figure>\n给当前用户加上执行权限 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u+x  *.sh</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">启动</span></span><br><span class=\"line\">sh minio.sh</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"3-2-安装客户端-可选\"><a href=\"#3-2-安装客户端-可选\" class=\"headerlink\" title=\"3.2 安装客户端(可选)\"></a>3.2 安装客户端(可选)</h3><ol>\n<li>安装 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.min.io/client/mc/release/linux-amd64/mc</span><br><span class=\"line\">chmod +x mc</span><br><span class=\"line\">./mc --help</span><br></pre></td></tr></table></figure></li>\n<li>使用命令给客户端添加一个服务端 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mc alias set minio http://172.21.0.7:9000 minioadmin minioadmin</span><br></pre></td></tr></table></figure></li>\n<li>创建bucket，并查询所有bucket <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ww xiaoyuge]# ./mc ls minio</span><br><span class=\"line\">[root@ww xiaoyuge]# ./mc mb minio/mybucket</span><br><span class=\"line\">Bucket created successfully `minio/mybucket`</span><br><span class=\"line\">[root@ww xiaoyuge]# ./mc ls minio</span><br><span class=\"line\">[2020-09-02 03:02:36 CST]      0B mybucket/</span><br><span class=\"line\">[root@ww xiaoyuge]# </span><br></pre></td></tr></table></figure></li>\n<li>页面查询bucket <img src=\"/linux-minio/6.png\"></li>\n<li>创建用户 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mc admin user add minio root rootroot</span><br></pre></td></tr></table></figure></li>\n<li>给用户赋予权限 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mc admin policy set minio readwrite user=root</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"3-3-使用MinIO\"><a href=\"#3-3-使用MinIO\" class=\"headerlink\" title=\"3.3 使用MinIO\"></a>3.3 使用MinIO</h3><ol>\n<li><p>启动</p>\n<p> 在浏览器输入： <a href=\"http://localhost:9000/\">http://localhost:9000</a><br> <img src=\"/linux-minio/2.png\"><br>在输入控制打印的默认的AccessKey和SecretKey：</p>\n<p> <strong>AccessKey:</strong> minioadmin</p>\n<p> <strong>SecretKey（默认）:</strong> minioadmin</p>\n<p> 使用AccessKey 和 SecretKey 登录后台。</p>\n</li>\n<li><p>进入系统后，我们先要点击右上角的“+”按钮，创建一个文件桶（输入名称后，回车即可），在上传文件到这个文件桶中。Create bucket（创建文件桶），然后输入bucket名称为 <strong>test</strong>, 创建成功后再Upload file（上传文件）。<br><img src=\"/linux-minio/3.png\"><img src=\"/linux-minio/3_1.png\"><img src=\"/linux-minio/3_2.png\"><img src=\"/linux-minio/4.png\"></p>\n<p>现在我们去服务器，我们启动时指定的目录去看看，可以看到一个新建的test文件目录（文件桶相当于文件目录），这里没有使用纠删码的模式，所以直接就是源文件了。当我们线上运行的项目已经有源文件了，在使用minio的时候，可以直接指定该目录为minio的文件目录就行了。<br><img src=\"/linux-minio/5.png\"><img src=\"/linux-minio/7.png\"></p>\n</li>\n<li><p>分享文件，也可以设置文件分享有效日期<br> <img src=\"/linux-minio/11.png\"><img src=\"/linux-minio/12.png\" alt=\"img_1.png\"><br>访问连接会出现如下界面：<br><img src=\"/linux-minio/13.png\" alt=\"img_1.png\"></p>\n</li>\n</ol>\n<h3 id=\"3-4-mioIO常见启动问题\"><a href=\"#3-4-mioIO常见启动问题\" class=\"headerlink\" title=\"3.4 mioIO常见启动问题\"></a>3.4 mioIO常见启动问题</h3><ol>\n<li>启动报错“WARNING: Console endpoint is listening on a dynamic port…”<br> <img src=\"/linux-minio/9.png\" alt=\"img_1.png\"><br>错误提示很明显，需要to choose a static port。<br>写了一个shell启动MinIO，在shell中使用–console-address ‘部署minio的ip:希望通过什么端口打开minio console页面’ <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> export MINIO_ACCESS_KEY=username</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">指定登录密码</span></span><br><span class=\"line\"> export MINIO_SECRET_KEY=password</span><br><span class=\"line\"> nohup ./minio server --address &#x27;0.0.0.0:9000&#x27; --console-address &#x27;0.0.0.0:9001&#x27; ./miniodata &gt; ./miniodata/minio.log 2&gt;&amp;1&amp;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"4-SpringBoot-集成minIO\"><a href=\"#4-SpringBoot-集成minIO\" class=\"headerlink\" title=\"4. SpringBoot 集成minIO\"></a>4. SpringBoot 集成minIO</h2><p>项目源代码地址：<a href=\"https://gitee.com/xiaoyuge520/minio-demo%EF%BC%8C\">https://gitee.com/xiaoyuge520/minio-demo，</a> 下面是应用主要功能截图展示：<br><img src=\"/linux-minio/14.png\" alt=\"img14.png\"><br>在minIO的控制台界面选择对应的bucket可以查看到刚提交的内容<br><img src=\"/linux-minio/15.png\" alt=\"img14.png\"></p>\n<p>同理，删除也是一样！！！<br><img src=\"/linux-minio/16.png\" alt=\"img14.png\"></p>\n"},{"title":"Linux系统下查找文件命令总结","comments":1,"abbrlink":32250,"translate_title":"linux-find-file","date":"2022-03-19T05:52:39.000Z","_content":"\n### 1. which查命令绝对路径\n**which** 从环境变量PATH中定位/返回与指定名字相匹配的可执行文件所在的路径\n![which命令](./linux-search-file/1.png)\n\n**原理**：执行**which**命令时，which会在当前环境变量PATH中依次寻找能够匹配所找命令名字的可执行文件名，不加 - a选项，返回第一个匹配的可执行文件路径，\n否则依次返回满足条件的所有可执行文件的路径名\n\n**适用场合：** 一般用于查找命令/可执行文件所在的路径。有时候可能在多个路径下存在相同的命令，该命令可用于查找当前所执行的命令到底是哪一个位置处的命令。\n\n\n### 2. whereis查找特定文件\n**whereis** 命令用来定位指令的二进制程序、源代码文件和man手册页等相关文件的路径， 该命令只能用于程序名的搜索\n1. \\- b   #定位可执行文件\n2. \\- m   #定位帮助文件\n3. \\- s   定位源代码文件 \n4. \\- u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件\n5. \\- B   指定搜索可执行文件的路径。\n6. \\- M   指定搜索帮助文件的路径。\n7. \\- S   指定搜索源代码文件的路径\n![whereis命令](./linux-search-file/2.png)\n\n**原理：** whereis命令首先会去掉filename中的前缀空格和以.开头的任何字符，然后再在数据库（var/lib/slocate/slocate.db）中查找与上述处理后的filename相匹配的二进制文件、源文件和帮助手册文件,使用之前可以使用**updatedb**命令手动更新数据库。\n\n**适用场合：** 二进制文件、源文件和帮助手册文件路径的查找。\n和**find** 相比，Whereis 查找的速度非常快，这是因为Linux系统会将系统内的所有文件都记录在一个数据库文件中，当使用**whereis (或者locate)**\n会从数据库查找数据，而不是像find命令那样，通过遍历硬盘来查找文件，效率更高！\n\n\n### 3. locate缓存查找文件\n**locate** 搜素一个数据库（/var/lib/mlocate/mlocate.db）,这个数据库中国呢包含本地所有文件信息，Linux系统自动创建这个数据库，并且每天更新依次，所以使用locate命令查不到最新变动过的文件，为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库，updatedb命令会根据/etc/updatedb.conf来更新文件。\n\n**原理：** 默认情况下(当filename中不包含通配符*)，locate会给出所有与 * filename*相匹配的文件的路径。\n**适用场合：** 没有文件类型性质的模糊查找（你只记得某个文件的部分名称）。\n![locate命令](./linux-search-file/3.png)\n![locate命令](./linux-search-file/4.png)\n![locate命令](./linux-search-file/5.png)\n![locate命令](./linux-search-file/6.png)\n\n\n### 4. find 遍历文件查找\n语法：\n - -name                    #按文件名查找(find /etc/ -name \"??????\" 查找/etc目录下，开头是6个任意字符的文件， *.log以log结尾的文件；\"[1-3].txt\"指定范围以txt结尾的文件（包括 1.txt,2.txt,3.txt）)\n - -size                    #按大小查找（find /etc/ -size +1M 查询大于1M的文件(find /etc/ -size -10K)，注意：如果没有+ -， 则是精确到1M,加上+ - 表示范围； find /etc/ -size +1k -a -size -10k 查找1-10K的文件）\n - -user                    #按属主查找（find /opt/ -user xiaoyuge 查找/opt属于xiaoyuge用户的文件；注意，系统要存在该用户，否则会报错）\n - -perm                    #按权限查找（find /opt/ -perm 0644 查找/opt目录权限是644文件）\n - -type                    #按类型查找（find /usr/bin/ -type f 查找/usr/bin下类型是二进制文件）\n - -time                    #按天查找\n   - atime n                    #将n*24小时内访问过的文件列出(access)\n   - ctime n                    #将n*24小时内状态发生改变的文件列出（change） find /etc/ -ctime +7 在7天之前,属性被修改过的文件\n   - mtime n                    #将n*24小时内被修改过的文件列出(modify)\n   - newer file                 #把比file还要心的文件列出\n\n   - amin n                     #将n 分钟内访问过的文件列出(access)   find /etc/ -mmin -120 在120分钟内，内容被修改的文件\n   - cmin n                     #将n 分钟内状态发生改变的文件列出（change）\n   - mmin n                     #将n 分钟内被修改过的文件列出(modify)\n    \n - -inum                    #按i节点查找 有一些文件的硬链接数量很多，有相同的i节点，查找其中一个文件的i节点号，一次性删除。\n - -exec                    #查找后执行命令\n\n\n**原理：** 遍历当前工作目录及其子目录，find命令是在硬盘上遍历查找，非常耗硬盘资源，查找效率相比whereis和locate较低。\n**适用场合：** 能用which、whereis和locate的时候尽量不要用find.\n\n\n### 5. 4种命令对比\n![对比](./linux-search-file/7.png)","source":"_posts/2022/03/linux-search-file.md","raw":"---\ntitle: Linux系统下查找文件命令总结\ncomments: true\ntags: Linux\ncategories: linux\nabbrlink: 32250\ntranslate_title: linux-find-file\ndate: 2022-03-19 13:52:39\n---\n\n### 1. which查命令绝对路径\n**which** 从环境变量PATH中定位/返回与指定名字相匹配的可执行文件所在的路径\n![which命令](./linux-search-file/1.png)\n\n**原理**：执行**which**命令时，which会在当前环境变量PATH中依次寻找能够匹配所找命令名字的可执行文件名，不加 - a选项，返回第一个匹配的可执行文件路径，\n否则依次返回满足条件的所有可执行文件的路径名\n\n**适用场合：** 一般用于查找命令/可执行文件所在的路径。有时候可能在多个路径下存在相同的命令，该命令可用于查找当前所执行的命令到底是哪一个位置处的命令。\n\n\n### 2. whereis查找特定文件\n**whereis** 命令用来定位指令的二进制程序、源代码文件和man手册页等相关文件的路径， 该命令只能用于程序名的搜索\n1. \\- b   #定位可执行文件\n2. \\- m   #定位帮助文件\n3. \\- s   定位源代码文件 \n4. \\- u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件\n5. \\- B   指定搜索可执行文件的路径。\n6. \\- M   指定搜索帮助文件的路径。\n7. \\- S   指定搜索源代码文件的路径\n![whereis命令](./linux-search-file/2.png)\n\n**原理：** whereis命令首先会去掉filename中的前缀空格和以.开头的任何字符，然后再在数据库（var/lib/slocate/slocate.db）中查找与上述处理后的filename相匹配的二进制文件、源文件和帮助手册文件,使用之前可以使用**updatedb**命令手动更新数据库。\n\n**适用场合：** 二进制文件、源文件和帮助手册文件路径的查找。\n和**find** 相比，Whereis 查找的速度非常快，这是因为Linux系统会将系统内的所有文件都记录在一个数据库文件中，当使用**whereis (或者locate)**\n会从数据库查找数据，而不是像find命令那样，通过遍历硬盘来查找文件，效率更高！\n\n\n### 3. locate缓存查找文件\n**locate** 搜素一个数据库（/var/lib/mlocate/mlocate.db）,这个数据库中国呢包含本地所有文件信息，Linux系统自动创建这个数据库，并且每天更新依次，所以使用locate命令查不到最新变动过的文件，为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库，updatedb命令会根据/etc/updatedb.conf来更新文件。\n\n**原理：** 默认情况下(当filename中不包含通配符*)，locate会给出所有与 * filename*相匹配的文件的路径。\n**适用场合：** 没有文件类型性质的模糊查找（你只记得某个文件的部分名称）。\n![locate命令](./linux-search-file/3.png)\n![locate命令](./linux-search-file/4.png)\n![locate命令](./linux-search-file/5.png)\n![locate命令](./linux-search-file/6.png)\n\n\n### 4. find 遍历文件查找\n语法：\n - -name                    #按文件名查找(find /etc/ -name \"??????\" 查找/etc目录下，开头是6个任意字符的文件， *.log以log结尾的文件；\"[1-3].txt\"指定范围以txt结尾的文件（包括 1.txt,2.txt,3.txt）)\n - -size                    #按大小查找（find /etc/ -size +1M 查询大于1M的文件(find /etc/ -size -10K)，注意：如果没有+ -， 则是精确到1M,加上+ - 表示范围； find /etc/ -size +1k -a -size -10k 查找1-10K的文件）\n - -user                    #按属主查找（find /opt/ -user xiaoyuge 查找/opt属于xiaoyuge用户的文件；注意，系统要存在该用户，否则会报错）\n - -perm                    #按权限查找（find /opt/ -perm 0644 查找/opt目录权限是644文件）\n - -type                    #按类型查找（find /usr/bin/ -type f 查找/usr/bin下类型是二进制文件）\n - -time                    #按天查找\n   - atime n                    #将n*24小时内访问过的文件列出(access)\n   - ctime n                    #将n*24小时内状态发生改变的文件列出（change） find /etc/ -ctime +7 在7天之前,属性被修改过的文件\n   - mtime n                    #将n*24小时内被修改过的文件列出(modify)\n   - newer file                 #把比file还要心的文件列出\n\n   - amin n                     #将n 分钟内访问过的文件列出(access)   find /etc/ -mmin -120 在120分钟内，内容被修改的文件\n   - cmin n                     #将n 分钟内状态发生改变的文件列出（change）\n   - mmin n                     #将n 分钟内被修改过的文件列出(modify)\n    \n - -inum                    #按i节点查找 有一些文件的硬链接数量很多，有相同的i节点，查找其中一个文件的i节点号，一次性删除。\n - -exec                    #查找后执行命令\n\n\n**原理：** 遍历当前工作目录及其子目录，find命令是在硬盘上遍历查找，非常耗硬盘资源，查找效率相比whereis和locate较低。\n**适用场合：** 能用which、whereis和locate的时候尽量不要用find.\n\n\n### 5. 4种命令对比\n![对比](./linux-search-file/7.png)","slug":"linux-search-file","published":1,"updated":"2022-05-24T14:05:05.489Z","layout":"post","photos":[],"link":"","_id":"cl424hx4x0003ad5ia68lenkw","content":"<h3 id=\"1-which查命令绝对路径\"><a href=\"#1-which查命令绝对路径\" class=\"headerlink\" title=\"1. which查命令绝对路径\"></a>1. which查命令绝对路径</h3><p><strong>which</strong> 从环境变量PATH中定位/返回与指定名字相匹配的可执行文件所在的路径<br><img src=\"/linux-search-file/1.png\" alt=\"which命令\"></p>\n<p><strong>原理</strong>：执行<strong>which</strong>命令时，which会在当前环境变量PATH中依次寻找能够匹配所找命令名字的可执行文件名，不加 - a选项，返回第一个匹配的可执行文件路径，<br>否则依次返回满足条件的所有可执行文件的路径名</p>\n<p><strong>适用场合：</strong> 一般用于查找命令/可执行文件所在的路径。有时候可能在多个路径下存在相同的命令，该命令可用于查找当前所执行的命令到底是哪一个位置处的命令。</p>\n<h3 id=\"2-whereis查找特定文件\"><a href=\"#2-whereis查找特定文件\" class=\"headerlink\" title=\"2. whereis查找特定文件\"></a>2. whereis查找特定文件</h3><p><strong>whereis</strong> 命令用来定位指令的二进制程序、源代码文件和man手册页等相关文件的路径， 该命令只能用于程序名的搜索</p>\n<ol>\n<li>- b   #定位可执行文件</li>\n<li>- m   #定位帮助文件</li>\n<li>- s   定位源代码文件 </li>\n<li>- u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件</li>\n<li>- B   指定搜索可执行文件的路径。</li>\n<li>- M   指定搜索帮助文件的路径。</li>\n<li>- S   指定搜索源代码文件的路径<br><img src=\"/linux-search-file/2.png\" alt=\"whereis命令\"></li>\n</ol>\n<p><strong>原理：</strong> whereis命令首先会去掉filename中的前缀空格和以.开头的任何字符，然后再在数据库（var/lib/slocate/slocate.db）中查找与上述处理后的filename相匹配的二进制文件、源文件和帮助手册文件,使用之前可以使用<strong>updatedb</strong>命令手动更新数据库。</p>\n<p><strong>适用场合：</strong> 二进制文件、源文件和帮助手册文件路径的查找。<br>和<strong>find</strong> 相比，Whereis 查找的速度非常快，这是因为Linux系统会将系统内的所有文件都记录在一个数据库文件中，当使用<strong>whereis (或者locate)</strong><br>会从数据库查找数据，而不是像find命令那样，通过遍历硬盘来查找文件，效率更高！</p>\n<h3 id=\"3-locate缓存查找文件\"><a href=\"#3-locate缓存查找文件\" class=\"headerlink\" title=\"3. locate缓存查找文件\"></a>3. locate缓存查找文件</h3><p><strong>locate</strong> 搜素一个数据库（/var/lib/mlocate/mlocate.db）,这个数据库中国呢包含本地所有文件信息，Linux系统自动创建这个数据库，并且每天更新依次，所以使用locate命令查不到最新变动过的文件，为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库，updatedb命令会根据/etc/updatedb.conf来更新文件。</p>\n<p><strong>原理：</strong> 默认情况下(当filename中不包含通配符*)，locate会给出所有与 * filename*相匹配的文件的路径。<br><strong>适用场合：</strong> 没有文件类型性质的模糊查找（你只记得某个文件的部分名称）。<br><img src=\"/linux-search-file/3.png\" alt=\"locate命令\"><br><img src=\"/linux-search-file/4.png\" alt=\"locate命令\"><br><img src=\"/linux-search-file/5.png\" alt=\"locate命令\"><br><img src=\"/linux-search-file/6.png\" alt=\"locate命令\"></p>\n<h3 id=\"4-find-遍历文件查找\"><a href=\"#4-find-遍历文件查找\" class=\"headerlink\" title=\"4. find 遍历文件查找\"></a>4. find 遍历文件查找</h3><p>语法：</p>\n<ul>\n<li><p>-name                    #按文件名查找(find /etc/ -name “??????” 查找/etc目录下，开头是6个任意字符的文件， *.log以log结尾的文件；”[1-3].txt”指定范围以txt结尾的文件（包括 1.txt,2.txt,3.txt）)</p>\n</li>\n<li><p>-size                    #按大小查找（find /etc/ -size +1M 查询大于1M的文件(find /etc/ -size -10K)，注意：如果没有+ -， 则是精确到1M,加上+ - 表示范围； find /etc/ -size +1k -a -size -10k 查找1-10K的文件）</p>\n</li>\n<li><p>-user                    #按属主查找（find /opt/ -user xiaoyuge 查找/opt属于xiaoyuge用户的文件；注意，系统要存在该用户，否则会报错）</p>\n</li>\n<li><p>-perm                    #按权限查找（find /opt/ -perm 0644 查找/opt目录权限是644文件）</p>\n</li>\n<li><p>-type                    #按类型查找（find /usr/bin/ -type f 查找/usr/bin下类型是二进制文件）</p>\n</li>\n<li><p>-time                    #按天查找</p>\n<ul>\n<li><p>atime n                    #将n*24小时内访问过的文件列出(access)</p>\n</li>\n<li><p>ctime n                    #将n*24小时内状态发生改变的文件列出（change） find /etc/ -ctime +7 在7天之前,属性被修改过的文件</p>\n</li>\n<li><p>mtime n                    #将n*24小时内被修改过的文件列出(modify)</p>\n</li>\n<li><p>newer file                 #把比file还要心的文件列出</p>\n</li>\n<li><p>amin n                     #将n 分钟内访问过的文件列出(access)   find /etc/ -mmin -120 在120分钟内，内容被修改的文件</p>\n</li>\n<li><p>cmin n                     #将n 分钟内状态发生改变的文件列出（change）</p>\n</li>\n<li><p>mmin n                     #将n 分钟内被修改过的文件列出(modify)</p>\n</li>\n</ul>\n</li>\n<li><p>-inum                    #按i节点查找 有一些文件的硬链接数量很多，有相同的i节点，查找其中一个文件的i节点号，一次性删除。</p>\n</li>\n<li><p>-exec                    #查找后执行命令</p>\n</li>\n</ul>\n<p><strong>原理：</strong> 遍历当前工作目录及其子目录，find命令是在硬盘上遍历查找，非常耗硬盘资源，查找效率相比whereis和locate较低。<br><strong>适用场合：</strong> 能用which、whereis和locate的时候尽量不要用find.</p>\n<h3 id=\"5-4种命令对比\"><a href=\"#5-4种命令对比\" class=\"headerlink\" title=\"5. 4种命令对比\"></a>5. 4种命令对比</h3><p><img src=\"/linux-search-file/7.png\" alt=\"对比\"></p>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h3 id=\"1-which查命令绝对路径\"><a href=\"#1-which查命令绝对路径\" class=\"headerlink\" title=\"1. which查命令绝对路径\"></a>1. which查命令绝对路径</h3><p><strong>which</strong> 从环境变量PATH中定位/返回与指定名字相匹配的可执行文件所在的路径<br><img src=\"/linux-search-file/1.png\" alt=\"which命令\"></p>\n<p><strong>原理</strong>：执行<strong>which</strong>命令时，which会在当前环境变量PATH中依次寻找能够匹配所找命令名字的可执行文件名，不加 - a选项，返回第一个匹配的可执行文件路径，<br>否则依次返回满足条件的所有可执行文件的路径名</p>\n<p><strong>适用场合：</strong> 一般用于查找命令/可执行文件所在的路径。有时候可能在多个路径下存在相同的命令，该命令可用于查找当前所执行的命令到底是哪一个位置处的命令。</p>\n<h3 id=\"2-whereis查找特定文件\"><a href=\"#2-whereis查找特定文件\" class=\"headerlink\" title=\"2. whereis查找特定文件\"></a>2. whereis查找特定文件</h3><p><strong>whereis</strong> 命令用来定位指令的二进制程序、源代码文件和man手册页等相关文件的路径， 该命令只能用于程序名的搜索</p>\n<ol>\n<li>- b   #定位可执行文件</li>\n<li>- m   #定位帮助文件</li>\n<li>- s   定位源代码文件 </li>\n<li>- u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件</li>\n<li>- B   指定搜索可执行文件的路径。</li>\n<li>- M   指定搜索帮助文件的路径。</li>\n<li>- S   指定搜索源代码文件的路径<br><img src=\"/linux-search-file/2.png\" alt=\"whereis命令\"></li>\n</ol>\n<p><strong>原理：</strong> whereis命令首先会去掉filename中的前缀空格和以.开头的任何字符，然后再在数据库（var/lib/slocate/slocate.db）中查找与上述处理后的filename相匹配的二进制文件、源文件和帮助手册文件,使用之前可以使用<strong>updatedb</strong>命令手动更新数据库。</p>\n<p><strong>适用场合：</strong> 二进制文件、源文件和帮助手册文件路径的查找。<br>和<strong>find</strong> 相比，Whereis 查找的速度非常快，这是因为Linux系统会将系统内的所有文件都记录在一个数据库文件中，当使用<strong>whereis (或者locate)</strong><br>会从数据库查找数据，而不是像find命令那样，通过遍历硬盘来查找文件，效率更高！</p>\n<h3 id=\"3-locate缓存查找文件\"><a href=\"#3-locate缓存查找文件\" class=\"headerlink\" title=\"3. locate缓存查找文件\"></a>3. locate缓存查找文件</h3><p><strong>locate</strong> 搜素一个数据库（/var/lib/mlocate/mlocate.db）,这个数据库中国呢包含本地所有文件信息，Linux系统自动创建这个数据库，并且每天更新依次，所以使用locate命令查不到最新变动过的文件，为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库，updatedb命令会根据/etc/updatedb.conf来更新文件。</p>\n<p><strong>原理：</strong> 默认情况下(当filename中不包含通配符*)，locate会给出所有与 * filename*相匹配的文件的路径。<br><strong>适用场合：</strong> 没有文件类型性质的模糊查找（你只记得某个文件的部分名称）。<br><img src=\"/linux-search-file/3.png\" alt=\"locate命令\"><br><img src=\"/linux-search-file/4.png\" alt=\"locate命令\"><br><img src=\"/linux-search-file/5.png\" alt=\"locate命令\"><br><img src=\"/linux-search-file/6.png\" alt=\"locate命令\"></p>\n<h3 id=\"4-find-遍历文件查找\"><a href=\"#4-find-遍历文件查找\" class=\"headerlink\" title=\"4. find 遍历文件查找\"></a>4. find 遍历文件查找</h3><p>语法：</p>\n<ul>\n<li><p>-name                    #按文件名查找(find /etc/ -name “??????” 查找/etc目录下，开头是6个任意字符的文件， *.log以log结尾的文件；”[1-3].txt”指定范围以txt结尾的文件（包括 1.txt,2.txt,3.txt）)</p>\n</li>\n<li><p>-size                    #按大小查找（find /etc/ -size +1M 查询大于1M的文件(find /etc/ -size -10K)，注意：如果没有+ -， 则是精确到1M,加上+ - 表示范围； find /etc/ -size +1k -a -size -10k 查找1-10K的文件）</p>\n</li>\n<li><p>-user                    #按属主查找（find /opt/ -user xiaoyuge 查找/opt属于xiaoyuge用户的文件；注意，系统要存在该用户，否则会报错）</p>\n</li>\n<li><p>-perm                    #按权限查找（find /opt/ -perm 0644 查找/opt目录权限是644文件）</p>\n</li>\n<li><p>-type                    #按类型查找（find /usr/bin/ -type f 查找/usr/bin下类型是二进制文件）</p>\n</li>\n<li><p>-time                    #按天查找</p>\n<ul>\n<li><p>atime n                    #将n*24小时内访问过的文件列出(access)</p>\n</li>\n<li><p>ctime n                    #将n*24小时内状态发生改变的文件列出（change） find /etc/ -ctime +7 在7天之前,属性被修改过的文件</p>\n</li>\n<li><p>mtime n                    #将n*24小时内被修改过的文件列出(modify)</p>\n</li>\n<li><p>newer file                 #把比file还要心的文件列出</p>\n</li>\n<li><p>amin n                     #将n 分钟内访问过的文件列出(access)   find /etc/ -mmin -120 在120分钟内，内容被修改的文件</p>\n</li>\n<li><p>cmin n                     #将n 分钟内状态发生改变的文件列出（change）</p>\n</li>\n<li><p>mmin n                     #将n 分钟内被修改过的文件列出(modify)</p>\n</li>\n</ul>\n</li>\n<li><p>-inum                    #按i节点查找 有一些文件的硬链接数量很多，有相同的i节点，查找其中一个文件的i节点号，一次性删除。</p>\n</li>\n<li><p>-exec                    #查找后执行命令</p>\n</li>\n</ul>\n<p><strong>原理：</strong> 遍历当前工作目录及其子目录，find命令是在硬盘上遍历查找，非常耗硬盘资源，查找效率相比whereis和locate较低。<br><strong>适用场合：</strong> 能用which、whereis和locate的时候尽量不要用find.</p>\n<h3 id=\"5-4种命令对比\"><a href=\"#5-4种命令对比\" class=\"headerlink\" title=\"5. 4种命令对比\"></a>5. 4种命令对比</h3><p><img src=\"/linux-search-file/7.png\" alt=\"对比\"></p>\n"},{"title":"分布式消息中间件设计","comments":1,"translate_title":"message-oriented-middleware","abbrlink":37424,"date":"2022-03-22T08:56:31.000Z","_content":"\n## 1. 消息中间件概述\n1. 什么是分布式消息中间件\n   \n    利用高效可靠的消息传递机制进行平台无关的数据交流；\n    并基于数据通信来进行分布式系统的集成；\n    通过提供消息和消息排队模型，它可以在分布式环境下扩展进城间的通信。\n   \n2. 消息中间件的应用场景\n    \n    跨系统数据传递、高并发流量削峰、数据异步处理......\n\n3. 常用的消息中间件\n    \n    ActiveMQ(太老)、RabbitMQ、Kafka、 RocketMQ\n\n4. 本质\n    \n    一种具备接受请求、保存数据、发送数据等功能的网络应用。和一般的网络应用程序的区别是它主要负责数据的接收和传递，所以性能一般高于普通程序\n\n5. 5大核心组成\n    - 协议\n    - 持久性机制\n    - 消息分布机制\n    - 高可用设计\n    - 高可靠设计\n    \n\n### 1.1 协议\n协议是计算机之间通信时共同遵守的一组约定，确保计算机之间能够相互交流；是对数据格式和计算机之间交换数据时必须遵守的规则的正式描述\n  \n三大要素：\n- 语法：即数据和控制信息的结构或格式\n- 语义：即需要发出何种控制信息，完成何种动作以及作出何种响应\n- 时序：即时间实现顺序的详细说明\n\n消息中间件常用协议：openWire、AMQP、MQTT（物流网，快，不能持久化）、Kafka、OpenMessage等；\n不能用http协议的原因是：http每次请求必须要有响应，性能不高；\n\n#### 1.1 AMQP协议\nAMQP（Advanced Message Queuing Protocol）是高级消息队列协议；04年JPMorgan Chase(摩根大通集团)联合其他公司共同设计\n\n- 特性：事物支持、持久化支持，出生金融行业，在可靠性消息处理上具备天然的优势\n- 优秀产品 RabbitMQ、 Apache ACTIVEMQ\n\n#### 1.2 MQTT协议\nMQTT（Message Queuing Telemetry Transport）消息队列遥测传输\n是IBM开发的一个即时通讯协议，物联网系统架构中的重要组成部分；\n\n- 特性：轻量、结构简单、传输快、没有事务支持、没有持久化相关设计\n- 应用场景：适用于计算能力有限、低宽带、网络不稳定的场景\n- 优秀产品：RabbitMQ、 Apache ACTIVEMQ\n\n#### 1.3 Open Message协议\nOpenMessaging 是近几年有阿里发起，与雅虎、滴滴出行、Streamlio等公司共同参数传里的分布式消息中间件、流处理领域的开发应用标准。\n是国内首个在全球范围内发起的分布式消息领域国际标准\n\n- 特性：结构简单、解析快、有事务设计、有持久化设计\n- 优秀产品：Apache RocketMQ\n\n#### 1.4 Kafka协议\nKafka协议是基于TCP的二进制协议。消息内部是通过长度来分割，由一些基本数据类型组成\n- 特性：结构简单、解析快、无事务设计、有持久化设计\n- 优秀产品：Apache Kafka\n\n#### 1.55 OpenWire协议\n开放链接，ActiveMQ自定义的一种协议，ActiveMQ默认链接方式，它提供一种高效率的二进制格式来使消息高速传输\n- 特性：结构简单、解析快、无事务设计、有持久化设计\n- 优秀产品：Apache ActiveMQ\n\n### 1.2 持久化\n简单来说就是将数据存入磁盘，而不是存在内存中岁服务重启而消失，使数据能够永久保存叫做持久化\n\n|  | ActiveMQ | RabbitMQ | Kafka | RocketMQ |\n| ------ | :------: | :------: | :------: | :------: |\n| 文件系统 | 支持 | 支持 | 支持 | 支持 |\n| 数据库 | 支持 | - | - | - |\n \n### 1.3 消息分发\n|  | ActiveMQ | RabbitMQ | Kafka | RocketMQ |\n| ------ | :------: | :------: | :------: | :------: |\n| 发布订阅 | 支持 | 支持 | 支持 | 支持 |\n| 轮询分发 | 支持 | 支持 | 支持 | - |\n| 公平分发 | - | 支持 | 支持 | - |\n| 重发 | 支持 | 支持 | - | 支持 |\n| 消息拉取 | - | 支持 | 支持 | 支持 |\n\n### 1.4 高可用\n高可用性是指产品在规定的条件和规定的时刻或时间区间内处于可执行规定功能状态的能力；\n当业务量大时，一台消息中间件服务器可能无法满足需求，所以需要消息中间件能够集群部署，来达到高可用的目的。\n\n#### 1.4.1 Master-Slave主从共享数据的部署方式\n当Master收到客户端的消息后，放到共享的文件系统/数据库； 客户端访问的是Master节点，Slave节点只做备份；\n![Master-Slave主从共享数据的部署方式](./message-oriented-middleware/2.png)\n\n#### 1.4.2 Master-Slave主从同步部署方式\n当Master收到客户端的消息后，发给其他broker同步。\n![Master-Slave主从同步部署方式](./message-oriented-middleware/3.png)\n\n#### 1.4.3 Broker-Cluster多主集群同步部署方式\n一部分消息放在broker1 ,一部分放在broker2\n![Broker-Cluster多主集群同步部署方式](./message-oriented-middleware/4.png)\n\n#### 1.4.4 Broker-Cluster多主集群转发部署方式\n转发数据或转发请求\n![Broker-Cluster多主集群转发部署方式](./message-oriented-middleware/5.png)\n\n#### 1.4.5 Master-slave与Broker-Cluster结合\n![Master-slave与Broker-Cluster结合](./message-oriented-middleware/6.png)\n\n### 1.5 高可靠\n高可靠性是指系统可以无故障地持续运行。比如一个系统从来不崩溃、报错，或者崩溃、报错的几率较低，那就是高可靠。\n保证消息中间件的高可靠行，可以从一下几方面考虑\n- 消息传输可靠： 通过协议来保证系统件数据解析的正确性\n- 消息存储可靠： 通过持久化来保证消息存储可靠性\n\n","source":"_posts/2022/03/message-oriented-middleware.md","raw":"---\ntitle: 分布式消息中间件设计\ncomments: true\ntags: 消息中间件\ncategories: 中间件\ntranslate_title: message-oriented-middleware\nabbrlink: 37424\ndate: 2022-03-22 16:56:31\n---\n\n## 1. 消息中间件概述\n1. 什么是分布式消息中间件\n   \n    利用高效可靠的消息传递机制进行平台无关的数据交流；\n    并基于数据通信来进行分布式系统的集成；\n    通过提供消息和消息排队模型，它可以在分布式环境下扩展进城间的通信。\n   \n2. 消息中间件的应用场景\n    \n    跨系统数据传递、高并发流量削峰、数据异步处理......\n\n3. 常用的消息中间件\n    \n    ActiveMQ(太老)、RabbitMQ、Kafka、 RocketMQ\n\n4. 本质\n    \n    一种具备接受请求、保存数据、发送数据等功能的网络应用。和一般的网络应用程序的区别是它主要负责数据的接收和传递，所以性能一般高于普通程序\n\n5. 5大核心组成\n    - 协议\n    - 持久性机制\n    - 消息分布机制\n    - 高可用设计\n    - 高可靠设计\n    \n\n### 1.1 协议\n协议是计算机之间通信时共同遵守的一组约定，确保计算机之间能够相互交流；是对数据格式和计算机之间交换数据时必须遵守的规则的正式描述\n  \n三大要素：\n- 语法：即数据和控制信息的结构或格式\n- 语义：即需要发出何种控制信息，完成何种动作以及作出何种响应\n- 时序：即时间实现顺序的详细说明\n\n消息中间件常用协议：openWire、AMQP、MQTT（物流网，快，不能持久化）、Kafka、OpenMessage等；\n不能用http协议的原因是：http每次请求必须要有响应，性能不高；\n\n#### 1.1 AMQP协议\nAMQP（Advanced Message Queuing Protocol）是高级消息队列协议；04年JPMorgan Chase(摩根大通集团)联合其他公司共同设计\n\n- 特性：事物支持、持久化支持，出生金融行业，在可靠性消息处理上具备天然的优势\n- 优秀产品 RabbitMQ、 Apache ACTIVEMQ\n\n#### 1.2 MQTT协议\nMQTT（Message Queuing Telemetry Transport）消息队列遥测传输\n是IBM开发的一个即时通讯协议，物联网系统架构中的重要组成部分；\n\n- 特性：轻量、结构简单、传输快、没有事务支持、没有持久化相关设计\n- 应用场景：适用于计算能力有限、低宽带、网络不稳定的场景\n- 优秀产品：RabbitMQ、 Apache ACTIVEMQ\n\n#### 1.3 Open Message协议\nOpenMessaging 是近几年有阿里发起，与雅虎、滴滴出行、Streamlio等公司共同参数传里的分布式消息中间件、流处理领域的开发应用标准。\n是国内首个在全球范围内发起的分布式消息领域国际标准\n\n- 特性：结构简单、解析快、有事务设计、有持久化设计\n- 优秀产品：Apache RocketMQ\n\n#### 1.4 Kafka协议\nKafka协议是基于TCP的二进制协议。消息内部是通过长度来分割，由一些基本数据类型组成\n- 特性：结构简单、解析快、无事务设计、有持久化设计\n- 优秀产品：Apache Kafka\n\n#### 1.55 OpenWire协议\n开放链接，ActiveMQ自定义的一种协议，ActiveMQ默认链接方式，它提供一种高效率的二进制格式来使消息高速传输\n- 特性：结构简单、解析快、无事务设计、有持久化设计\n- 优秀产品：Apache ActiveMQ\n\n### 1.2 持久化\n简单来说就是将数据存入磁盘，而不是存在内存中岁服务重启而消失，使数据能够永久保存叫做持久化\n\n|  | ActiveMQ | RabbitMQ | Kafka | RocketMQ |\n| ------ | :------: | :------: | :------: | :------: |\n| 文件系统 | 支持 | 支持 | 支持 | 支持 |\n| 数据库 | 支持 | - | - | - |\n \n### 1.3 消息分发\n|  | ActiveMQ | RabbitMQ | Kafka | RocketMQ |\n| ------ | :------: | :------: | :------: | :------: |\n| 发布订阅 | 支持 | 支持 | 支持 | 支持 |\n| 轮询分发 | 支持 | 支持 | 支持 | - |\n| 公平分发 | - | 支持 | 支持 | - |\n| 重发 | 支持 | 支持 | - | 支持 |\n| 消息拉取 | - | 支持 | 支持 | 支持 |\n\n### 1.4 高可用\n高可用性是指产品在规定的条件和规定的时刻或时间区间内处于可执行规定功能状态的能力；\n当业务量大时，一台消息中间件服务器可能无法满足需求，所以需要消息中间件能够集群部署，来达到高可用的目的。\n\n#### 1.4.1 Master-Slave主从共享数据的部署方式\n当Master收到客户端的消息后，放到共享的文件系统/数据库； 客户端访问的是Master节点，Slave节点只做备份；\n![Master-Slave主从共享数据的部署方式](./message-oriented-middleware/2.png)\n\n#### 1.4.2 Master-Slave主从同步部署方式\n当Master收到客户端的消息后，发给其他broker同步。\n![Master-Slave主从同步部署方式](./message-oriented-middleware/3.png)\n\n#### 1.4.3 Broker-Cluster多主集群同步部署方式\n一部分消息放在broker1 ,一部分放在broker2\n![Broker-Cluster多主集群同步部署方式](./message-oriented-middleware/4.png)\n\n#### 1.4.4 Broker-Cluster多主集群转发部署方式\n转发数据或转发请求\n![Broker-Cluster多主集群转发部署方式](./message-oriented-middleware/5.png)\n\n#### 1.4.5 Master-slave与Broker-Cluster结合\n![Master-slave与Broker-Cluster结合](./message-oriented-middleware/6.png)\n\n### 1.5 高可靠\n高可靠性是指系统可以无故障地持续运行。比如一个系统从来不崩溃、报错，或者崩溃、报错的几率较低，那就是高可靠。\n保证消息中间件的高可靠行，可以从一下几方面考虑\n- 消息传输可靠： 通过协议来保证系统件数据解析的正确性\n- 消息存储可靠： 通过持久化来保证消息存储可靠性\n\n","slug":"message-oriented-middleware","published":1,"updated":"2022-03-27T14:06:03.404Z","layout":"post","photos":[],"link":"","_id":"cl424hx500007ad5iey3o39zd","content":"<h2 id=\"1-消息中间件概述\"><a href=\"#1-消息中间件概述\" class=\"headerlink\" title=\"1. 消息中间件概述\"></a>1. 消息中间件概述</h2><ol>\n<li><p>什么是分布式消息中间件</p>\n<p> 利用高效可靠的消息传递机制进行平台无关的数据交流；<br> 并基于数据通信来进行分布式系统的集成；<br> 通过提供消息和消息排队模型，它可以在分布式环境下扩展进城间的通信。</p>\n</li>\n<li><p>消息中间件的应用场景</p>\n<p> 跨系统数据传递、高并发流量削峰、数据异步处理……</p>\n</li>\n<li><p>常用的消息中间件</p>\n<p> ActiveMQ(太老)、RabbitMQ、Kafka、 RocketMQ</p>\n</li>\n<li><p>本质</p>\n<p> 一种具备接受请求、保存数据、发送数据等功能的网络应用。和一般的网络应用程序的区别是它主要负责数据的接收和传递，所以性能一般高于普通程序</p>\n</li>\n<li><p>5大核心组成</p>\n<ul>\n<li>协议</li>\n<li>持久性机制</li>\n<li>消息分布机制</li>\n<li>高可用设计</li>\n<li>高可靠设计</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-1-协议\"><a href=\"#1-1-协议\" class=\"headerlink\" title=\"1.1 协议\"></a>1.1 协议</h3><p>协议是计算机之间通信时共同遵守的一组约定，确保计算机之间能够相互交流；是对数据格式和计算机之间交换数据时必须遵守的规则的正式描述</p>\n<p>三大要素：</p>\n<ul>\n<li>语法：即数据和控制信息的结构或格式</li>\n<li>语义：即需要发出何种控制信息，完成何种动作以及作出何种响应</li>\n<li>时序：即时间实现顺序的详细说明</li>\n</ul>\n<p>消息中间件常用协议：openWire、AMQP、MQTT（物流网，快，不能持久化）、Kafka、OpenMessage等；<br>不能用http协议的原因是：http每次请求必须要有响应，性能不高；</p>\n<h4 id=\"1-1-AMQP协议\"><a href=\"#1-1-AMQP协议\" class=\"headerlink\" title=\"1.1 AMQP协议\"></a>1.1 AMQP协议</h4><p>AMQP（Advanced Message Queuing Protocol）是高级消息队列协议；04年JPMorgan Chase(摩根大通集团)联合其他公司共同设计</p>\n<ul>\n<li>特性：事物支持、持久化支持，出生金融行业，在可靠性消息处理上具备天然的优势</li>\n<li>优秀产品 RabbitMQ、 Apache ACTIVEMQ</li>\n</ul>\n<h4 id=\"1-2-MQTT协议\"><a href=\"#1-2-MQTT协议\" class=\"headerlink\" title=\"1.2 MQTT协议\"></a>1.2 MQTT协议</h4><p>MQTT（Message Queuing Telemetry Transport）消息队列遥测传输<br>是IBM开发的一个即时通讯协议，物联网系统架构中的重要组成部分；</p>\n<ul>\n<li>特性：轻量、结构简单、传输快、没有事务支持、没有持久化相关设计</li>\n<li>应用场景：适用于计算能力有限、低宽带、网络不稳定的场景</li>\n<li>优秀产品：RabbitMQ、 Apache ACTIVEMQ</li>\n</ul>\n<h4 id=\"1-3-Open-Message协议\"><a href=\"#1-3-Open-Message协议\" class=\"headerlink\" title=\"1.3 Open Message协议\"></a>1.3 Open Message协议</h4><p>OpenMessaging 是近几年有阿里发起，与雅虎、滴滴出行、Streamlio等公司共同参数传里的分布式消息中间件、流处理领域的开发应用标准。<br>是国内首个在全球范围内发起的分布式消息领域国际标准</p>\n<ul>\n<li>特性：结构简单、解析快、有事务设计、有持久化设计</li>\n<li>优秀产品：Apache RocketMQ</li>\n</ul>\n<h4 id=\"1-4-Kafka协议\"><a href=\"#1-4-Kafka协议\" class=\"headerlink\" title=\"1.4 Kafka协议\"></a>1.4 Kafka协议</h4><p>Kafka协议是基于TCP的二进制协议。消息内部是通过长度来分割，由一些基本数据类型组成</p>\n<ul>\n<li>特性：结构简单、解析快、无事务设计、有持久化设计</li>\n<li>优秀产品：Apache Kafka</li>\n</ul>\n<h4 id=\"1-55-OpenWire协议\"><a href=\"#1-55-OpenWire协议\" class=\"headerlink\" title=\"1.55 OpenWire协议\"></a>1.55 OpenWire协议</h4><p>开放链接，ActiveMQ自定义的一种协议，ActiveMQ默认链接方式，它提供一种高效率的二进制格式来使消息高速传输</p>\n<ul>\n<li>特性：结构简单、解析快、无事务设计、有持久化设计</li>\n<li>优秀产品：Apache ActiveMQ</li>\n</ul>\n<h3 id=\"1-2-持久化\"><a href=\"#1-2-持久化\" class=\"headerlink\" title=\"1.2 持久化\"></a>1.2 持久化</h3><p>简单来说就是将数据存入磁盘，而不是存在内存中岁服务重启而消失，使数据能够永久保存叫做持久化</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\">ActiveMQ</th>\n<th align=\"center\">RabbitMQ</th>\n<th align=\"center\">Kafka</th>\n<th align=\"center\">RocketMQ</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>文件系统</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td>数据库</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"1-3-消息分发\"><a href=\"#1-3-消息分发\" class=\"headerlink\" title=\"1.3 消息分发\"></a>1.3 消息分发</h3><table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\">ActiveMQ</th>\n<th align=\"center\">RabbitMQ</th>\n<th align=\"center\">Kafka</th>\n<th align=\"center\">RocketMQ</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>发布订阅</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td>轮询分发</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>公平分发</td>\n<td align=\"center\">-</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>重发</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">-</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td>消息拉取</td>\n<td align=\"center\">-</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-4-高可用\"><a href=\"#1-4-高可用\" class=\"headerlink\" title=\"1.4 高可用\"></a>1.4 高可用</h3><p>高可用性是指产品在规定的条件和规定的时刻或时间区间内处于可执行规定功能状态的能力；<br>当业务量大时，一台消息中间件服务器可能无法满足需求，所以需要消息中间件能够集群部署，来达到高可用的目的。</p>\n<h4 id=\"1-4-1-Master-Slave主从共享数据的部署方式\"><a href=\"#1-4-1-Master-Slave主从共享数据的部署方式\" class=\"headerlink\" title=\"1.4.1 Master-Slave主从共享数据的部署方式\"></a>1.4.1 Master-Slave主从共享数据的部署方式</h4><p>当Master收到客户端的消息后，放到共享的文件系统/数据库； 客户端访问的是Master节点，Slave节点只做备份；<br><img src=\"/message-oriented-middleware/2.png\" alt=\"Master-Slave主从共享数据的部署方式\"></p>\n<h4 id=\"1-4-2-Master-Slave主从同步部署方式\"><a href=\"#1-4-2-Master-Slave主从同步部署方式\" class=\"headerlink\" title=\"1.4.2 Master-Slave主从同步部署方式\"></a>1.4.2 Master-Slave主从同步部署方式</h4><p>当Master收到客户端的消息后，发给其他broker同步。<br><img src=\"/message-oriented-middleware/3.png\" alt=\"Master-Slave主从同步部署方式\"></p>\n<h4 id=\"1-4-3-Broker-Cluster多主集群同步部署方式\"><a href=\"#1-4-3-Broker-Cluster多主集群同步部署方式\" class=\"headerlink\" title=\"1.4.3 Broker-Cluster多主集群同步部署方式\"></a>1.4.3 Broker-Cluster多主集群同步部署方式</h4><p>一部分消息放在broker1 ,一部分放在broker2<br><img src=\"/message-oriented-middleware/4.png\" alt=\"Broker-Cluster多主集群同步部署方式\"></p>\n<h4 id=\"1-4-4-Broker-Cluster多主集群转发部署方式\"><a href=\"#1-4-4-Broker-Cluster多主集群转发部署方式\" class=\"headerlink\" title=\"1.4.4 Broker-Cluster多主集群转发部署方式\"></a>1.4.4 Broker-Cluster多主集群转发部署方式</h4><p>转发数据或转发请求<br><img src=\"/message-oriented-middleware/5.png\" alt=\"Broker-Cluster多主集群转发部署方式\"></p>\n<h4 id=\"1-4-5-Master-slave与Broker-Cluster结合\"><a href=\"#1-4-5-Master-slave与Broker-Cluster结合\" class=\"headerlink\" title=\"1.4.5 Master-slave与Broker-Cluster结合\"></a>1.4.5 Master-slave与Broker-Cluster结合</h4><p><img src=\"/message-oriented-middleware/6.png\" alt=\"Master-slave与Broker-Cluster结合\"></p>\n<h3 id=\"1-5-高可靠\"><a href=\"#1-5-高可靠\" class=\"headerlink\" title=\"1.5 高可靠\"></a>1.5 高可靠</h3><p>高可靠性是指系统可以无故障地持续运行。比如一个系统从来不崩溃、报错，或者崩溃、报错的几率较低，那就是高可靠。<br>保证消息中间件的高可靠行，可以从一下几方面考虑</p>\n<ul>\n<li>消息传输可靠： 通过协议来保证系统件数据解析的正确性</li>\n<li>消息存储可靠： 通过持久化来保证消息存储可靠性</li>\n</ul>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h2 id=\"1-消息中间件概述\"><a href=\"#1-消息中间件概述\" class=\"headerlink\" title=\"1. 消息中间件概述\"></a>1. 消息中间件概述</h2><ol>\n<li><p>什么是分布式消息中间件</p>\n<p> 利用高效可靠的消息传递机制进行平台无关的数据交流；<br> 并基于数据通信来进行分布式系统的集成；<br> 通过提供消息和消息排队模型，它可以在分布式环境下扩展进城间的通信。</p>\n</li>\n<li><p>消息中间件的应用场景</p>\n<p> 跨系统数据传递、高并发流量削峰、数据异步处理……</p>\n</li>\n<li><p>常用的消息中间件</p>\n<p> ActiveMQ(太老)、RabbitMQ、Kafka、 RocketMQ</p>\n</li>\n<li><p>本质</p>\n<p> 一种具备接受请求、保存数据、发送数据等功能的网络应用。和一般的网络应用程序的区别是它主要负责数据的接收和传递，所以性能一般高于普通程序</p>\n</li>\n<li><p>5大核心组成</p>\n<ul>\n<li>协议</li>\n<li>持久性机制</li>\n<li>消息分布机制</li>\n<li>高可用设计</li>\n<li>高可靠设计</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-1-协议\"><a href=\"#1-1-协议\" class=\"headerlink\" title=\"1.1 协议\"></a>1.1 协议</h3><p>协议是计算机之间通信时共同遵守的一组约定，确保计算机之间能够相互交流；是对数据格式和计算机之间交换数据时必须遵守的规则的正式描述</p>\n<p>三大要素：</p>\n<ul>\n<li>语法：即数据和控制信息的结构或格式</li>\n<li>语义：即需要发出何种控制信息，完成何种动作以及作出何种响应</li>\n<li>时序：即时间实现顺序的详细说明</li>\n</ul>\n<p>消息中间件常用协议：openWire、AMQP、MQTT（物流网，快，不能持久化）、Kafka、OpenMessage等；<br>不能用http协议的原因是：http每次请求必须要有响应，性能不高；</p>\n<h4 id=\"1-1-AMQP协议\"><a href=\"#1-1-AMQP协议\" class=\"headerlink\" title=\"1.1 AMQP协议\"></a>1.1 AMQP协议</h4><p>AMQP（Advanced Message Queuing Protocol）是高级消息队列协议；04年JPMorgan Chase(摩根大通集团)联合其他公司共同设计</p>\n<ul>\n<li>特性：事物支持、持久化支持，出生金融行业，在可靠性消息处理上具备天然的优势</li>\n<li>优秀产品 RabbitMQ、 Apache ACTIVEMQ</li>\n</ul>\n<h4 id=\"1-2-MQTT协议\"><a href=\"#1-2-MQTT协议\" class=\"headerlink\" title=\"1.2 MQTT协议\"></a>1.2 MQTT协议</h4><p>MQTT（Message Queuing Telemetry Transport）消息队列遥测传输<br>是IBM开发的一个即时通讯协议，物联网系统架构中的重要组成部分；</p>\n<ul>\n<li>特性：轻量、结构简单、传输快、没有事务支持、没有持久化相关设计</li>\n<li>应用场景：适用于计算能力有限、低宽带、网络不稳定的场景</li>\n<li>优秀产品：RabbitMQ、 Apache ACTIVEMQ</li>\n</ul>\n<h4 id=\"1-3-Open-Message协议\"><a href=\"#1-3-Open-Message协议\" class=\"headerlink\" title=\"1.3 Open Message协议\"></a>1.3 Open Message协议</h4><p>OpenMessaging 是近几年有阿里发起，与雅虎、滴滴出行、Streamlio等公司共同参数传里的分布式消息中间件、流处理领域的开发应用标准。<br>是国内首个在全球范围内发起的分布式消息领域国际标准</p>\n<ul>\n<li>特性：结构简单、解析快、有事务设计、有持久化设计</li>\n<li>优秀产品：Apache RocketMQ</li>\n</ul>\n<h4 id=\"1-4-Kafka协议\"><a href=\"#1-4-Kafka协议\" class=\"headerlink\" title=\"1.4 Kafka协议\"></a>1.4 Kafka协议</h4><p>Kafka协议是基于TCP的二进制协议。消息内部是通过长度来分割，由一些基本数据类型组成</p>\n<ul>\n<li>特性：结构简单、解析快、无事务设计、有持久化设计</li>\n<li>优秀产品：Apache Kafka</li>\n</ul>\n<h4 id=\"1-55-OpenWire协议\"><a href=\"#1-55-OpenWire协议\" class=\"headerlink\" title=\"1.55 OpenWire协议\"></a>1.55 OpenWire协议</h4><p>开放链接，ActiveMQ自定义的一种协议，ActiveMQ默认链接方式，它提供一种高效率的二进制格式来使消息高速传输</p>\n<ul>\n<li>特性：结构简单、解析快、无事务设计、有持久化设计</li>\n<li>优秀产品：Apache ActiveMQ</li>\n</ul>\n<h3 id=\"1-2-持久化\"><a href=\"#1-2-持久化\" class=\"headerlink\" title=\"1.2 持久化\"></a>1.2 持久化</h3><p>简单来说就是将数据存入磁盘，而不是存在内存中岁服务重启而消失，使数据能够永久保存叫做持久化</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\">ActiveMQ</th>\n<th align=\"center\">RabbitMQ</th>\n<th align=\"center\">Kafka</th>\n<th align=\"center\">RocketMQ</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>文件系统</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td>数据库</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"1-3-消息分发\"><a href=\"#1-3-消息分发\" class=\"headerlink\" title=\"1.3 消息分发\"></a>1.3 消息分发</h3><table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\">ActiveMQ</th>\n<th align=\"center\">RabbitMQ</th>\n<th align=\"center\">Kafka</th>\n<th align=\"center\">RocketMQ</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>发布订阅</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td>轮询分发</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>公平分发</td>\n<td align=\"center\">-</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>重发</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">-</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td>消息拉取</td>\n<td align=\"center\">-</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-4-高可用\"><a href=\"#1-4-高可用\" class=\"headerlink\" title=\"1.4 高可用\"></a>1.4 高可用</h3><p>高可用性是指产品在规定的条件和规定的时刻或时间区间内处于可执行规定功能状态的能力；<br>当业务量大时，一台消息中间件服务器可能无法满足需求，所以需要消息中间件能够集群部署，来达到高可用的目的。</p>\n<h4 id=\"1-4-1-Master-Slave主从共享数据的部署方式\"><a href=\"#1-4-1-Master-Slave主从共享数据的部署方式\" class=\"headerlink\" title=\"1.4.1 Master-Slave主从共享数据的部署方式\"></a>1.4.1 Master-Slave主从共享数据的部署方式</h4><p>当Master收到客户端的消息后，放到共享的文件系统/数据库； 客户端访问的是Master节点，Slave节点只做备份；<br><img src=\"/message-oriented-middleware/2.png\" alt=\"Master-Slave主从共享数据的部署方式\"></p>\n<h4 id=\"1-4-2-Master-Slave主从同步部署方式\"><a href=\"#1-4-2-Master-Slave主从同步部署方式\" class=\"headerlink\" title=\"1.4.2 Master-Slave主从同步部署方式\"></a>1.4.2 Master-Slave主从同步部署方式</h4><p>当Master收到客户端的消息后，发给其他broker同步。<br><img src=\"/message-oriented-middleware/3.png\" alt=\"Master-Slave主从同步部署方式\"></p>\n<h4 id=\"1-4-3-Broker-Cluster多主集群同步部署方式\"><a href=\"#1-4-3-Broker-Cluster多主集群同步部署方式\" class=\"headerlink\" title=\"1.4.3 Broker-Cluster多主集群同步部署方式\"></a>1.4.3 Broker-Cluster多主集群同步部署方式</h4><p>一部分消息放在broker1 ,一部分放在broker2<br><img src=\"/message-oriented-middleware/4.png\" alt=\"Broker-Cluster多主集群同步部署方式\"></p>\n<h4 id=\"1-4-4-Broker-Cluster多主集群转发部署方式\"><a href=\"#1-4-4-Broker-Cluster多主集群转发部署方式\" class=\"headerlink\" title=\"1.4.4 Broker-Cluster多主集群转发部署方式\"></a>1.4.4 Broker-Cluster多主集群转发部署方式</h4><p>转发数据或转发请求<br><img src=\"/message-oriented-middleware/5.png\" alt=\"Broker-Cluster多主集群转发部署方式\"></p>\n<h4 id=\"1-4-5-Master-slave与Broker-Cluster结合\"><a href=\"#1-4-5-Master-slave与Broker-Cluster结合\" class=\"headerlink\" title=\"1.4.5 Master-slave与Broker-Cluster结合\"></a>1.4.5 Master-slave与Broker-Cluster结合</h4><p><img src=\"/message-oriented-middleware/6.png\" alt=\"Master-slave与Broker-Cluster结合\"></p>\n<h3 id=\"1-5-高可靠\"><a href=\"#1-5-高可靠\" class=\"headerlink\" title=\"1.5 高可靠\"></a>1.5 高可靠</h3><p>高可靠性是指系统可以无故障地持续运行。比如一个系统从来不崩溃、报错，或者崩溃、报错的几率较低，那就是高可靠。<br>保证消息中间件的高可靠行，可以从一下几方面考虑</p>\n<ul>\n<li>消息传输可靠： 通过协议来保证系统件数据解析的正确性</li>\n<li>消息存储可靠： 通过持久化来保证消息存储可靠性</li>\n</ul>\n"},{"title":"基于Springboot导出数据库表结构文档","comments":1,"translate_title":"export_database_file","abbrlink":54350,"date":"2022-04-15T03:46:03.000Z","_content":"在项目中经常会需要查询数据库所有的表以及表字段，然后可能还需要导出到Excel中，然后自己写了一个工具类，目前支持sqlserver、mysql、oracle、Postgre；如果有问题请留言！！！\n### 1. 引入依赖包\n```xml\n <!-- 请尽量用最新版本 -->\n <dependency>\n    <groupId>com.github.xiaoyuge5201</groupId>\n    <artifactId>datasource-spring-boot-starter</artifactId>\n    <version>2.1</version>\n</dependency>\n```\n\n### 2. 编写Java代码\n1. 通过MyDataSourceProperties类所有本项目的数据库连接信息，导出当前连接库的数据库结构\n- 数据库配置 yml\n    ```yaml\n    spring:\n      datasource:\n        type: com.alibaba.druid.pool.DruidDataSource\n        url: jdbc:mysql://localhost:3306/dbname?serverTimezone=GMT%2B8&useSSL=false\n        username: root\n        password: xiaoyuge\n        driver-class-name: com.mysql.jdbc.Driver\n        database: dbname    ##需要配置数据库名称\n    ```\n  \n- 导出方法\n    ```java\n    import com.github.xiaoyuge5201.config.MyDataSourceProperties;\n    import com.github.xiaoyuge5201.util.ExportDatabaseDocument;\n    import org.apache.catalina.servlet4preview.http.HttpServletRequest;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.stereotype.Controller;\n    import org.springframework.web.bind.annotation.GetMapping;\n    import org.springframework.web.bind.annotation.RequestMapping;\n    import javax.servlet.http.HttpServletResponse;\n    \n    @Controller\n    @RequestMapping(\"/export\")\n    public class TestController {\n    \n        @Autowired\n        MyDataSourceProperties properties;\n    \n        /**\n         * 注意：需要在yaml /yml 配置文件中配置spring.datasource.database 属性\n         */\n        @GetMapping(\"/index\")\n        public void index(HttpServletResponse response, HttpServletRequest request) {\n            ExportDatabaseDocument.export(response, request, properties); \n        }\n    }\n    ```\n\n2. 自定义导出某个数据库的表结构信息\n    ```java\n    @GetMapping(\"/index\")\n    public void index(HttpServletResponse response, HttpServletRequest request) {\n        //手动传参\n        ExportDatabaseDocument.export(response, request, DatabaseDriverEnum.MYSQL.getDriver(), \"127.0.0.1:3306\", \"root\", \"xiaoyuge\", \"dbname\");\n    }\n    ```\n\n### 3. 导出文档\n执行请求：localhost:8080/export/index 即可；导出的内容如下：\n![导出的数据库文档](./export-database-file/1.png)\n\n包括数据库表名、描述以及各个字段的类型、长度、默认值、描述等。。。；\n\n另外sheet的名称为表名(表中文名)+ 4位随机值，受限于excel的sheet；\n\n\n### 4. 数据库操作类 DataSourceClient\n1. DataSourceClient类中根据MyDataSourceProperties操作数据库\n    ```java\n    /**\n    * 查询所有的表结构信息\n    *\n    * @return 表结构列表\n    */\n    public List<String> findAllTables() {\n        return QuerySqlUtil.findAllTables(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());\n    }\n\n    /**\n     * 查詢數據庫表的字段信息\n     *\n     * @param table 数据表\n     * @return 表字段列表\n     */\n    public List<ColumnEntity> queryTableFieldsEntity(String table) {\n        return QuerySqlUtil.queryTableFieldsToColumnEntity(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);\n    }\n\n    /**\n     * 查詢數據庫表的字段信息\n     *\n     * @param table 数据表\n     * @return 表字段列表\n     */\n    public List<String> queryTableFields(String table) {\n        return QuerySqlUtil.queryTableFields(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);\n    }\n\n    /**\n     * 查询对应库下所有字段 信息\n     *\n     * @return 结果\n     */\n    public List<ColumnEntity> listColumnsByDatasourceParams() {\n        return QuerySqlUtil.listColumnsByDatasourceParams(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());\n    }\n\n    /**\n     * 分页查询数据表数据\n     *\n     * @param table  数据表\n     * @param pageNo 页码\n     * @param limit  页容量\n     * @param columns 字段列表\n     * @throws Exception 异常信息\n     * @return 结果\n     */\n    public JSONArray queryPageData(String table, List<String> columns, Integer pageNo, Integer limit) throws Exception {\n        return QuerySqlUtil.queryPageData(properties.getDriverClassName(), properties.getDatabase(), table, properties.getUrl(), properties.getUsername(), properties.getPassword(), columns, pageNo, limit);\n    }\n\n    /**\n     * 导出数据库设计文档\n     *\n     * @param response 返回对象\n     * @param request  请求对象\n     */\n    public void exportDatabaseDocument(HttpServletResponse response, HttpServletRequest request) {\n        ExportDatabaseDocument.export(response, request, properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());\n    }\n   ```\n   \n### 5. 数据库驱动枚举类 DatabaseDriverEnum\n```java\n/**\n * 数驱动的常量\n *\n * @author yugb\n */\npublic enum DatabaseDriverEnum {\n\n    /**\n     * mysql数据库\n     */\n    MYSQL(1, \"com.mysql.jdbc.Driver\", \"mysql数据库\"),\n    /**\n     * Sql Server数据库\n     */\n    SQL_SERVER(2, \"com.microsoft.sqlserver.jdbc.SQLServerDriver\", \"Sql Server数据库\"),\n    /**\n     * oracle数据库\n     */\n    ORACLE(3, \"oracle.jdbc.driver.OracleDriver\", \"oracle数据库\"),\n    /**\n     * postgre sql数据库\n     */\n    POSTGRE_SQL(4, \"org.postgresql.Driver\", \"postgre sql数据库\"),\n    /**\n     * 达梦数据库\n     */\n    DM(5, \"dm.jdbc.driver.DmDriver\", \"达梦数据库\");\n    /**\n     * 数据库驱动类型\n     */\n    private final Integer type;\n    /**\n     * 数据库驱动连接\n     */\n    private final String driver;\n    /**\n     * 名称\n     */\n    private final String name;\n\n    public Integer getType() {\n        return type;\n    }\n\n    public String getDriver() {\n        return driver;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    DatabaseDriverEnum(Integer type, String driver, String name) {\n        this.type = type;\n        this.driver = driver;\n        this.name = name;\n    }\n\n    /**\n     * 根据数据库类型获取数据库驱动\n     * @param type 数据库类型\n     * @return 驱动\n     */\n    public static String getValue(Integer type) {\n        DatabaseDriverEnum[] enums = values();\n        for (DatabaseDriverEnum driverEnum : enums) {\n            if (driverEnum.type.equals(type)) {\n                return driverEnum.getDriver();\n            }\n        }\n        return null;\n    }\n}\n\n```","source":"_posts/2022/04/export-database-file.md","raw":"---\ntitle: 基于Springboot导出数据库表结构文档\ncomments: true\ntags: java\ncategories: java\ntranslate_title: export_database_file\nabbrlink: 54350\ndate: 2022-04-15 11:46:03\n---\n在项目中经常会需要查询数据库所有的表以及表字段，然后可能还需要导出到Excel中，然后自己写了一个工具类，目前支持sqlserver、mysql、oracle、Postgre；如果有问题请留言！！！\n### 1. 引入依赖包\n```xml\n <!-- 请尽量用最新版本 -->\n <dependency>\n    <groupId>com.github.xiaoyuge5201</groupId>\n    <artifactId>datasource-spring-boot-starter</artifactId>\n    <version>2.1</version>\n</dependency>\n```\n\n### 2. 编写Java代码\n1. 通过MyDataSourceProperties类所有本项目的数据库连接信息，导出当前连接库的数据库结构\n- 数据库配置 yml\n    ```yaml\n    spring:\n      datasource:\n        type: com.alibaba.druid.pool.DruidDataSource\n        url: jdbc:mysql://localhost:3306/dbname?serverTimezone=GMT%2B8&useSSL=false\n        username: root\n        password: xiaoyuge\n        driver-class-name: com.mysql.jdbc.Driver\n        database: dbname    ##需要配置数据库名称\n    ```\n  \n- 导出方法\n    ```java\n    import com.github.xiaoyuge5201.config.MyDataSourceProperties;\n    import com.github.xiaoyuge5201.util.ExportDatabaseDocument;\n    import org.apache.catalina.servlet4preview.http.HttpServletRequest;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.stereotype.Controller;\n    import org.springframework.web.bind.annotation.GetMapping;\n    import org.springframework.web.bind.annotation.RequestMapping;\n    import javax.servlet.http.HttpServletResponse;\n    \n    @Controller\n    @RequestMapping(\"/export\")\n    public class TestController {\n    \n        @Autowired\n        MyDataSourceProperties properties;\n    \n        /**\n         * 注意：需要在yaml /yml 配置文件中配置spring.datasource.database 属性\n         */\n        @GetMapping(\"/index\")\n        public void index(HttpServletResponse response, HttpServletRequest request) {\n            ExportDatabaseDocument.export(response, request, properties); \n        }\n    }\n    ```\n\n2. 自定义导出某个数据库的表结构信息\n    ```java\n    @GetMapping(\"/index\")\n    public void index(HttpServletResponse response, HttpServletRequest request) {\n        //手动传参\n        ExportDatabaseDocument.export(response, request, DatabaseDriverEnum.MYSQL.getDriver(), \"127.0.0.1:3306\", \"root\", \"xiaoyuge\", \"dbname\");\n    }\n    ```\n\n### 3. 导出文档\n执行请求：localhost:8080/export/index 即可；导出的内容如下：\n![导出的数据库文档](./export-database-file/1.png)\n\n包括数据库表名、描述以及各个字段的类型、长度、默认值、描述等。。。；\n\n另外sheet的名称为表名(表中文名)+ 4位随机值，受限于excel的sheet；\n\n\n### 4. 数据库操作类 DataSourceClient\n1. DataSourceClient类中根据MyDataSourceProperties操作数据库\n    ```java\n    /**\n    * 查询所有的表结构信息\n    *\n    * @return 表结构列表\n    */\n    public List<String> findAllTables() {\n        return QuerySqlUtil.findAllTables(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());\n    }\n\n    /**\n     * 查詢數據庫表的字段信息\n     *\n     * @param table 数据表\n     * @return 表字段列表\n     */\n    public List<ColumnEntity> queryTableFieldsEntity(String table) {\n        return QuerySqlUtil.queryTableFieldsToColumnEntity(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);\n    }\n\n    /**\n     * 查詢數據庫表的字段信息\n     *\n     * @param table 数据表\n     * @return 表字段列表\n     */\n    public List<String> queryTableFields(String table) {\n        return QuerySqlUtil.queryTableFields(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);\n    }\n\n    /**\n     * 查询对应库下所有字段 信息\n     *\n     * @return 结果\n     */\n    public List<ColumnEntity> listColumnsByDatasourceParams() {\n        return QuerySqlUtil.listColumnsByDatasourceParams(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());\n    }\n\n    /**\n     * 分页查询数据表数据\n     *\n     * @param table  数据表\n     * @param pageNo 页码\n     * @param limit  页容量\n     * @param columns 字段列表\n     * @throws Exception 异常信息\n     * @return 结果\n     */\n    public JSONArray queryPageData(String table, List<String> columns, Integer pageNo, Integer limit) throws Exception {\n        return QuerySqlUtil.queryPageData(properties.getDriverClassName(), properties.getDatabase(), table, properties.getUrl(), properties.getUsername(), properties.getPassword(), columns, pageNo, limit);\n    }\n\n    /**\n     * 导出数据库设计文档\n     *\n     * @param response 返回对象\n     * @param request  请求对象\n     */\n    public void exportDatabaseDocument(HttpServletResponse response, HttpServletRequest request) {\n        ExportDatabaseDocument.export(response, request, properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());\n    }\n   ```\n   \n### 5. 数据库驱动枚举类 DatabaseDriverEnum\n```java\n/**\n * 数驱动的常量\n *\n * @author yugb\n */\npublic enum DatabaseDriverEnum {\n\n    /**\n     * mysql数据库\n     */\n    MYSQL(1, \"com.mysql.jdbc.Driver\", \"mysql数据库\"),\n    /**\n     * Sql Server数据库\n     */\n    SQL_SERVER(2, \"com.microsoft.sqlserver.jdbc.SQLServerDriver\", \"Sql Server数据库\"),\n    /**\n     * oracle数据库\n     */\n    ORACLE(3, \"oracle.jdbc.driver.OracleDriver\", \"oracle数据库\"),\n    /**\n     * postgre sql数据库\n     */\n    POSTGRE_SQL(4, \"org.postgresql.Driver\", \"postgre sql数据库\"),\n    /**\n     * 达梦数据库\n     */\n    DM(5, \"dm.jdbc.driver.DmDriver\", \"达梦数据库\");\n    /**\n     * 数据库驱动类型\n     */\n    private final Integer type;\n    /**\n     * 数据库驱动连接\n     */\n    private final String driver;\n    /**\n     * 名称\n     */\n    private final String name;\n\n    public Integer getType() {\n        return type;\n    }\n\n    public String getDriver() {\n        return driver;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    DatabaseDriverEnum(Integer type, String driver, String name) {\n        this.type = type;\n        this.driver = driver;\n        this.name = name;\n    }\n\n    /**\n     * 根据数据库类型获取数据库驱动\n     * @param type 数据库类型\n     * @return 驱动\n     */\n    public static String getValue(Integer type) {\n        DatabaseDriverEnum[] enums = values();\n        for (DatabaseDriverEnum driverEnum : enums) {\n            if (driverEnum.type.equals(type)) {\n                return driverEnum.getDriver();\n            }\n        }\n        return null;\n    }\n}\n\n```","slug":"export-database-file","published":1,"updated":"2022-04-17T10:55:29.500Z","layout":"post","photos":[],"link":"","_id":"cl424hx510009ad5i71bbhzh1","content":"<p>在项目中经常会需要查询数据库所有的表以及表字段，然后可能还需要导出到Excel中，然后自己写了一个工具类，目前支持sqlserver、mysql、oracle、Postgre；如果有问题请留言！！！</p>\n<h3 id=\"1-引入依赖包\"><a href=\"#1-引入依赖包\" class=\"headerlink\" title=\"1. 引入依赖包\"></a>1. 引入依赖包</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">&lt;!-- 请尽量用最新版本 --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.xiaoyuge5201<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>datasource-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-编写Java代码\"><a href=\"#2-编写Java代码\" class=\"headerlink\" title=\"2. 编写Java代码\"></a>2. 编写Java代码</h3><ol>\n<li>通过MyDataSourceProperties类所有本项目的数据库连接信息，导出当前连接库的数据库结构</li>\n</ol>\n<ul>\n<li>数据库配置 yml  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/dbname?serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">xiaoyuge</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span> <span class=\"string\">dbname</span>    <span class=\"comment\">##需要配置数据库名称</span></span><br></pre></td></tr></table></figure></li>\n<li>导出方法  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.github.xiaoyuge5201.config.MyDataSourceProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.xiaoyuge5201.util.ExportDatabaseDocument;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.catalina.servlet4preview.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/export&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    MyDataSourceProperties properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注意：需要在yaml /yml 配置文件中配置spring.datasource.database 属性</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/index&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">index</span><span class=\"params\">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        ExportDatabaseDocument.export(response, request, properties); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"2\">\n<li>自定义导出某个数据库的表结构信息 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/index&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">index</span><span class=\"params\">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//手动传参</span></span><br><span class=\"line\">    ExportDatabaseDocument.export(response, request, DatabaseDriverEnum.MYSQL.getDriver(), <span class=\"string\">&quot;127.0.0.1:3306&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;xiaoyuge&quot;</span>, <span class=\"string\">&quot;dbname&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"3-导出文档\"><a href=\"#3-导出文档\" class=\"headerlink\" title=\"3. 导出文档\"></a>3. 导出文档</h3><p>执行请求：localhost:8080/export/index 即可；导出的内容如下：<br><img src=\"/export-database-file/1.png\" alt=\"导出的数据库文档\"></p>\n<p>包括数据库表名、描述以及各个字段的类型、长度、默认值、描述等。。。；</p>\n<p>另外sheet的名称为表名(表中文名)+ 4位随机值，受限于excel的sheet；</p>\n<h3 id=\"4-数据库操作类-DataSourceClient\"><a href=\"#4-数据库操作类-DataSourceClient\" class=\"headerlink\" title=\"4. 数据库操作类 DataSourceClient\"></a>4. 数据库操作类 DataSourceClient</h3><ol>\n<li>DataSourceClient类中根据MyDataSourceProperties操作数据库 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 查询所有的表结构信息</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> 表结构列表</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">findAllTables</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.findAllTables(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查詢數據庫表的字段信息</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> table 数据表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 表字段列表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;ColumnEntity&gt; <span class=\"title\">queryTableFieldsEntity</span><span class=\"params\">(String table)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.queryTableFieldsToColumnEntity(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查詢數據庫表的字段信息</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> table 数据表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 表字段列表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">queryTableFields</span><span class=\"params\">(String table)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.queryTableFields(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查询对应库下所有字段 信息</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;ColumnEntity&gt; <span class=\"title\">listColumnsByDatasourceParams</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.listColumnsByDatasourceParams(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 分页查询数据表数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> table  数据表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pageNo 页码</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> limit  页容量</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> columns 字段列表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception 异常信息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> JSONArray <span class=\"title\">queryPageData</span><span class=\"params\">(String table, List&lt;String&gt; columns, Integer pageNo, Integer limit)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.queryPageData(properties.getDriverClassName(), properties.getDatabase(), table, properties.getUrl(), properties.getUsername(), properties.getPassword(), columns, pageNo, limit);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 导出数据库设计文档</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> response 返回对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> request  请求对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exportDatabaseDocument</span><span class=\"params\">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    ExportDatabaseDocument.export(response, request, properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"5-数据库驱动枚举类-DatabaseDriverEnum\"><a href=\"#5-数据库驱动枚举类-DatabaseDriverEnum\" class=\"headerlink\" title=\"5. 数据库驱动枚举类 DatabaseDriverEnum\"></a>5. 数据库驱动枚举类 DatabaseDriverEnum</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数驱动的常量</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> yugb</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">DatabaseDriverEnum</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * mysql数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    MYSQL(<span class=\"number\">1</span>, <span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>, <span class=\"string\">&quot;mysql数据库&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sql Server数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    SQL_SERVER(<span class=\"number\">2</span>, <span class=\"string\">&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;</span>, <span class=\"string\">&quot;Sql Server数据库&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * oracle数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ORACLE(<span class=\"number\">3</span>, <span class=\"string\">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>, <span class=\"string\">&quot;oracle数据库&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * postgre sql数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    POSTGRE_SQL(<span class=\"number\">4</span>, <span class=\"string\">&quot;org.postgresql.Driver&quot;</span>, <span class=\"string\">&quot;postgre sql数据库&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 达梦数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    DM(<span class=\"number\">5</span>, <span class=\"string\">&quot;dm.jdbc.driver.DmDriver&quot;</span>, <span class=\"string\">&quot;达梦数据库&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据库驱动类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Integer type;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据库驱动连接</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String driver;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDriver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> driver;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    DatabaseDriverEnum(Integer type, String driver, String name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.driver = driver;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据数据库类型获取数据库驱动</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> type 数据库类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 驱动</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getValue</span><span class=\"params\">(Integer type)</span> </span>&#123;</span><br><span class=\"line\">        DatabaseDriverEnum[] enums = values();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (DatabaseDriverEnum driverEnum : enums) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (driverEnum.type.equals(type)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> driverEnum.getDriver();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>在项目中经常会需要查询数据库所有的表以及表字段，然后可能还需要导出到Excel中，然后自己写了一个工具类，目前支持sqlserver、mysql、oracle、Postgre；如果有问题请留言！！！</p>\n<h3 id=\"1-引入依赖包\"><a href=\"#1-引入依赖包\" class=\"headerlink\" title=\"1. 引入依赖包\"></a>1. 引入依赖包</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">&lt;!-- 请尽量用最新版本 --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.xiaoyuge5201<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>datasource-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-编写Java代码\"><a href=\"#2-编写Java代码\" class=\"headerlink\" title=\"2. 编写Java代码\"></a>2. 编写Java代码</h3><ol>\n<li>通过MyDataSourceProperties类所有本项目的数据库连接信息，导出当前连接库的数据库结构</li>\n</ol>\n<ul>\n<li>数据库配置 yml  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/dbname?serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">xiaoyuge</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span> <span class=\"string\">dbname</span>    <span class=\"comment\">##需要配置数据库名称</span></span><br></pre></td></tr></table></figure></li>\n<li>导出方法  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.github.xiaoyuge5201.config.MyDataSourceProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.xiaoyuge5201.util.ExportDatabaseDocument;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.catalina.servlet4preview.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/export&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    MyDataSourceProperties properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注意：需要在yaml /yml 配置文件中配置spring.datasource.database 属性</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/index&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">index</span><span class=\"params\">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        ExportDatabaseDocument.export(response, request, properties); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"2\">\n<li>自定义导出某个数据库的表结构信息 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/index&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">index</span><span class=\"params\">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//手动传参</span></span><br><span class=\"line\">    ExportDatabaseDocument.export(response, request, DatabaseDriverEnum.MYSQL.getDriver(), <span class=\"string\">&quot;127.0.0.1:3306&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;xiaoyuge&quot;</span>, <span class=\"string\">&quot;dbname&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"3-导出文档\"><a href=\"#3-导出文档\" class=\"headerlink\" title=\"3. 导出文档\"></a>3. 导出文档</h3><p>执行请求：localhost:8080/export/index 即可；导出的内容如下：<br><img src=\"/export-database-file/1.png\" alt=\"导出的数据库文档\"></p>\n<p>包括数据库表名、描述以及各个字段的类型、长度、默认值、描述等。。。；</p>\n<p>另外sheet的名称为表名(表中文名)+ 4位随机值，受限于excel的sheet；</p>\n<h3 id=\"4-数据库操作类-DataSourceClient\"><a href=\"#4-数据库操作类-DataSourceClient\" class=\"headerlink\" title=\"4. 数据库操作类 DataSourceClient\"></a>4. 数据库操作类 DataSourceClient</h3><ol>\n<li>DataSourceClient类中根据MyDataSourceProperties操作数据库 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 查询所有的表结构信息</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> 表结构列表</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">findAllTables</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.findAllTables(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查詢數據庫表的字段信息</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> table 数据表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 表字段列表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;ColumnEntity&gt; <span class=\"title\">queryTableFieldsEntity</span><span class=\"params\">(String table)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.queryTableFieldsToColumnEntity(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查詢數據庫表的字段信息</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> table 数据表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 表字段列表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">queryTableFields</span><span class=\"params\">(String table)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.queryTableFields(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查询对应库下所有字段 信息</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;ColumnEntity&gt; <span class=\"title\">listColumnsByDatasourceParams</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.listColumnsByDatasourceParams(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 分页查询数据表数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> table  数据表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pageNo 页码</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> limit  页容量</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> columns 字段列表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception 异常信息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> JSONArray <span class=\"title\">queryPageData</span><span class=\"params\">(String table, List&lt;String&gt; columns, Integer pageNo, Integer limit)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.queryPageData(properties.getDriverClassName(), properties.getDatabase(), table, properties.getUrl(), properties.getUsername(), properties.getPassword(), columns, pageNo, limit);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 导出数据库设计文档</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> response 返回对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> request  请求对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exportDatabaseDocument</span><span class=\"params\">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    ExportDatabaseDocument.export(response, request, properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"5-数据库驱动枚举类-DatabaseDriverEnum\"><a href=\"#5-数据库驱动枚举类-DatabaseDriverEnum\" class=\"headerlink\" title=\"5. 数据库驱动枚举类 DatabaseDriverEnum\"></a>5. 数据库驱动枚举类 DatabaseDriverEnum</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数驱动的常量</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> yugb</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">DatabaseDriverEnum</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * mysql数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    MYSQL(<span class=\"number\">1</span>, <span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>, <span class=\"string\">&quot;mysql数据库&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sql Server数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    SQL_SERVER(<span class=\"number\">2</span>, <span class=\"string\">&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;</span>, <span class=\"string\">&quot;Sql Server数据库&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * oracle数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ORACLE(<span class=\"number\">3</span>, <span class=\"string\">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>, <span class=\"string\">&quot;oracle数据库&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * postgre sql数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    POSTGRE_SQL(<span class=\"number\">4</span>, <span class=\"string\">&quot;org.postgresql.Driver&quot;</span>, <span class=\"string\">&quot;postgre sql数据库&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 达梦数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    DM(<span class=\"number\">5</span>, <span class=\"string\">&quot;dm.jdbc.driver.DmDriver&quot;</span>, <span class=\"string\">&quot;达梦数据库&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据库驱动类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Integer type;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据库驱动连接</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String driver;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDriver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> driver;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    DatabaseDriverEnum(Integer type, String driver, String name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.driver = driver;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据数据库类型获取数据库驱动</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> type 数据库类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 驱动</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getValue</span><span class=\"params\">(Integer type)</span> </span>&#123;</span><br><span class=\"line\">        DatabaseDriverEnum[] enums = values();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (DatabaseDriverEnum driverEnum : enums) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (driverEnum.type.equals(type)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> driverEnum.getDriver();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"java8的lambda表达式语法","comments":1,"translate_title":"lambda","abbrlink":51354,"date":"2022-04-13T12:32:44.000Z","_content":"记录一下用到的一些java8的lambda表达式语法\n### 1 list集合根据某个字段分组后求多个字段的和\n```java\n List<SafeSystemVO> list = new ArrayList<>(16);\n//....省略添加元素的代码\n//分组字段 driver_id\nlist.stream().collect(Collectors.groupingBy(SafeSystemVO::getDriver_id)).values().stream().map(d -> {\n    SafeSystemVO vo = d.get(0);\n    //求和1\n    vo.setAg_total(d.stream().map(s -> BigDecimal.valueOf(s.getAg_total())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    \n    // 求和2\n    vo.setScore(d.stream().map(s -> BigDecimal.valueOf(s.getScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  \n    vo.setLkj_score(d.stream().map(s -> BigDecimal.valueOf(s.getLkj_score())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  \n    vo.setTotalScore(d.stream().map(s -> BigDecimal.valueOf(s.getTotalScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    \n    return vo;\n}).collect(Collectors.toList());\n```\n\n### 2. list 根据某个字段分组后求单个字段的平均值，并按照分组字段排序\n```java\nList<SafeSystemVO> list = new ArrayList<>(16);\n//....省略添加元素的代码\nMap<String, Double> monthAvg = list1.stream().collect(Collectors.groupingBy(SafeSystemVO::getMonth, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));\n//  根据Map 对象的key排序\n// 我的分组字段是日期，就用了下面的\nmonthAvg.entrySet().stream().sorted((o1, o2) -> {\n    try {\n        Date d1 = DateUtils.convertStringToDate(o1.getKey(), DateUtils.FM2);\n        Date d2 = DateUtils.convertStringToDate(o2.getKey(), DateUtils.FM2);\n        assert d1 != null;\n        return d1.compareTo(d2);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return 0;\n}).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (oldVal, newVal) -> oldVal, LinkedHashMap::new));\n\n//根据Map 对象的value排序\n//monthResult = workShopAvg.entrySet().stream().sorted((p1, p2) -> p2.getValue().compareTo(p1.getValue())).collect(Collectors.toList());\n\n//方法一：\n//list1.sort((o1, o2) -> o1.getAge().compareTo(o2.getTotalScore())); //正序\n//list1.sort((o1, o2) -> o2.getAge().compareTo(o1.getTotalScore())); //倒序\n//方法二\n//list1.sort(Comparator.comparing(Person::getTotalScore)); // 正序\n//list1.sort(Comparator.comparing(Person::getTotalScore).reversed()); // 倒序\n```\n\n### 3. list 根据字段分组求和后取 前/后10名\n```java\n//list对象接上面的\n\n//根据driver_id分组，求平均值\nMap<String, Double> driverScores = list3.stream()\n        .collect(Collectors.groupingBy(SafeSystemVO::getDriver_id, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));\n\n//排序后获取后10 名， 前10名的话修改sorted逻辑为：sorted((p1, p2) -> p2.getValue().compareTo(p1.getValue()))\nList<Map.Entry<String, Double>> driverScoresTop10 = driverScores.entrySet().stream().sorted((p1, p2) -> p1.getValue().compareTo(p2.getValue())).limit(10).collect(Collectors.toList());\n```\n\n\n### 4. 其他\n```java\npublic static void main(String[] args) {\n        //Id, name , age\n        Person p1 = new Person(1,\"麻子\", 31);\n        Person p2 = new Person(2,\"李四\", 20);\n        Person p3 = new Person(3,\"王五\", 26);\n        Person p4 = new Person(3,\"王五\", 26);\n\n        List<Person> personList = new ArrayList<Person>();\n        personList.add(p1);\n        personList.add(p2);\n        personList.add(p3);\n        personList.add(p4);\n\n        //java8遍历\n        personList.forEach(p -> System.out.println(p.getAge()));\n        //按照person的 age进行排序\n        //方法一\n        personList.sort((o1, o2) -> o1.getAge().compareTo(o2.getAge())); //正序\n        personList.sort((o1, o2) -> o2.getAge().compareTo(o1.getAge())); //倒序\n        //方法二\n        personList.sort(Comparator.comparing(Person::getAge)); // 正序\n        personList.sort(Comparator.comparing(Person::getAge).reversed()); // 倒序\n        //多个字段排序\n        personList.sort(Comparator.comparing(User::getId).thenComparing(Person::getAge));\n        //注：若选择排序字段为null值，正序可personList.sort(Comparator.comparing(Person::getAge,Comparator.nullsFirst(Comparator.naturalOrder())))\n\n        System.out.println(\"========================================\");\n\n        //获取年龄最大的Person\n        Person maxAgePerson = personList.stream().max(Comparator.comparing(Person::getAge)).get();\n        System.out.println(maxAgePerson.getAge());\n\n        System.out.println(\"========================================\");\n\n        //获取年龄最小的Person\n        Person minAgePerson = personList.stream().min(Comparator.comparing(Person::getAge)).get();\n        System.out.println(minAgePerson.getAge());\n\n        //过滤出年龄是20的person，想过滤出什么条件的均可以\n        List<Person> personList1 = personList.stream().filter(person -> person.getAge() == 20).collect(Collectors.toList());\n\n        //过滤-- 统计出年龄等于20的个数\n        long count = personList.stream().filter(person -> person.getAge() == 20).count();\n\n        //过滤出年龄大约20的人\n        List<Person> personList2 = personList.stream().filter(t -> t.getAge().equals(20)).collect(Collectors.toList());\n        //得到年龄的平均值\n        double asDouble = personList.stream().mapToInt(person -> person.getAge()).average().getAsDouble();\n\n        //得到年龄的求和--基本类型\n        int sum = personList.stream().mapToInt(person -> person.getAge()).sum();\n        \n        //得到年龄的求和--包装类型,其中，若bigDecimal对象为null，可filter()过滤掉空指针.\n        BigDecimal totalAge = personList.stream().map(User::getAge).reduce(BigDecimal.ZERO, BigDecimal::add);\n\n        （其中，若bigDecimal对象为null，可filter()过滤掉空指针.）\n        \n        //去重\n        List<Person> personList3 = personList.stream().distinct().collect(Collectors.toList());\n\n        //list转map.\n        //（其中，若集合对象key有重，可根据(k1,k2)->k1设置<保留k1，舍弃k2>.）\n        Map<Long, Person> personMap = personList.stream().collect(Collectors.toMap(User::getId, t -> t,(k1,k2)->k1));\n        \n    }\n}\n```","source":"_posts/2022/04/lambda.md","raw":"---\ntitle: java8的lambda表达式语法\ncomments: true\ntags: java\ncategories: java\ntranslate_title: lambda\nabbrlink: 51354\ndate: 2022-04-13 20:32:44\n---\n记录一下用到的一些java8的lambda表达式语法\n### 1 list集合根据某个字段分组后求多个字段的和\n```java\n List<SafeSystemVO> list = new ArrayList<>(16);\n//....省略添加元素的代码\n//分组字段 driver_id\nlist.stream().collect(Collectors.groupingBy(SafeSystemVO::getDriver_id)).values().stream().map(d -> {\n    SafeSystemVO vo = d.get(0);\n    //求和1\n    vo.setAg_total(d.stream().map(s -> BigDecimal.valueOf(s.getAg_total())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    \n    // 求和2\n    vo.setScore(d.stream().map(s -> BigDecimal.valueOf(s.getScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  \n    vo.setLkj_score(d.stream().map(s -> BigDecimal.valueOf(s.getLkj_score())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  \n    vo.setTotalScore(d.stream().map(s -> BigDecimal.valueOf(s.getTotalScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    \n    return vo;\n}).collect(Collectors.toList());\n```\n\n### 2. list 根据某个字段分组后求单个字段的平均值，并按照分组字段排序\n```java\nList<SafeSystemVO> list = new ArrayList<>(16);\n//....省略添加元素的代码\nMap<String, Double> monthAvg = list1.stream().collect(Collectors.groupingBy(SafeSystemVO::getMonth, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));\n//  根据Map 对象的key排序\n// 我的分组字段是日期，就用了下面的\nmonthAvg.entrySet().stream().sorted((o1, o2) -> {\n    try {\n        Date d1 = DateUtils.convertStringToDate(o1.getKey(), DateUtils.FM2);\n        Date d2 = DateUtils.convertStringToDate(o2.getKey(), DateUtils.FM2);\n        assert d1 != null;\n        return d1.compareTo(d2);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return 0;\n}).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (oldVal, newVal) -> oldVal, LinkedHashMap::new));\n\n//根据Map 对象的value排序\n//monthResult = workShopAvg.entrySet().stream().sorted((p1, p2) -> p2.getValue().compareTo(p1.getValue())).collect(Collectors.toList());\n\n//方法一：\n//list1.sort((o1, o2) -> o1.getAge().compareTo(o2.getTotalScore())); //正序\n//list1.sort((o1, o2) -> o2.getAge().compareTo(o1.getTotalScore())); //倒序\n//方法二\n//list1.sort(Comparator.comparing(Person::getTotalScore)); // 正序\n//list1.sort(Comparator.comparing(Person::getTotalScore).reversed()); // 倒序\n```\n\n### 3. list 根据字段分组求和后取 前/后10名\n```java\n//list对象接上面的\n\n//根据driver_id分组，求平均值\nMap<String, Double> driverScores = list3.stream()\n        .collect(Collectors.groupingBy(SafeSystemVO::getDriver_id, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));\n\n//排序后获取后10 名， 前10名的话修改sorted逻辑为：sorted((p1, p2) -> p2.getValue().compareTo(p1.getValue()))\nList<Map.Entry<String, Double>> driverScoresTop10 = driverScores.entrySet().stream().sorted((p1, p2) -> p1.getValue().compareTo(p2.getValue())).limit(10).collect(Collectors.toList());\n```\n\n\n### 4. 其他\n```java\npublic static void main(String[] args) {\n        //Id, name , age\n        Person p1 = new Person(1,\"麻子\", 31);\n        Person p2 = new Person(2,\"李四\", 20);\n        Person p3 = new Person(3,\"王五\", 26);\n        Person p4 = new Person(3,\"王五\", 26);\n\n        List<Person> personList = new ArrayList<Person>();\n        personList.add(p1);\n        personList.add(p2);\n        personList.add(p3);\n        personList.add(p4);\n\n        //java8遍历\n        personList.forEach(p -> System.out.println(p.getAge()));\n        //按照person的 age进行排序\n        //方法一\n        personList.sort((o1, o2) -> o1.getAge().compareTo(o2.getAge())); //正序\n        personList.sort((o1, o2) -> o2.getAge().compareTo(o1.getAge())); //倒序\n        //方法二\n        personList.sort(Comparator.comparing(Person::getAge)); // 正序\n        personList.sort(Comparator.comparing(Person::getAge).reversed()); // 倒序\n        //多个字段排序\n        personList.sort(Comparator.comparing(User::getId).thenComparing(Person::getAge));\n        //注：若选择排序字段为null值，正序可personList.sort(Comparator.comparing(Person::getAge,Comparator.nullsFirst(Comparator.naturalOrder())))\n\n        System.out.println(\"========================================\");\n\n        //获取年龄最大的Person\n        Person maxAgePerson = personList.stream().max(Comparator.comparing(Person::getAge)).get();\n        System.out.println(maxAgePerson.getAge());\n\n        System.out.println(\"========================================\");\n\n        //获取年龄最小的Person\n        Person minAgePerson = personList.stream().min(Comparator.comparing(Person::getAge)).get();\n        System.out.println(minAgePerson.getAge());\n\n        //过滤出年龄是20的person，想过滤出什么条件的均可以\n        List<Person> personList1 = personList.stream().filter(person -> person.getAge() == 20).collect(Collectors.toList());\n\n        //过滤-- 统计出年龄等于20的个数\n        long count = personList.stream().filter(person -> person.getAge() == 20).count();\n\n        //过滤出年龄大约20的人\n        List<Person> personList2 = personList.stream().filter(t -> t.getAge().equals(20)).collect(Collectors.toList());\n        //得到年龄的平均值\n        double asDouble = personList.stream().mapToInt(person -> person.getAge()).average().getAsDouble();\n\n        //得到年龄的求和--基本类型\n        int sum = personList.stream().mapToInt(person -> person.getAge()).sum();\n        \n        //得到年龄的求和--包装类型,其中，若bigDecimal对象为null，可filter()过滤掉空指针.\n        BigDecimal totalAge = personList.stream().map(User::getAge).reduce(BigDecimal.ZERO, BigDecimal::add);\n\n        （其中，若bigDecimal对象为null，可filter()过滤掉空指针.）\n        \n        //去重\n        List<Person> personList3 = personList.stream().distinct().collect(Collectors.toList());\n\n        //list转map.\n        //（其中，若集合对象key有重，可根据(k1,k2)->k1设置<保留k1，舍弃k2>.）\n        Map<Long, Person> personMap = personList.stream().collect(Collectors.toMap(User::getId, t -> t,(k1,k2)->k1));\n        \n    }\n}\n```","slug":"lambda","published":1,"updated":"2022-04-24T02:43:30.253Z","layout":"post","photos":[],"link":"","_id":"cl424hx52000bad5ietlqe5lu","content":"<p>记录一下用到的一些java8的lambda表达式语法</p>\n<h3 id=\"1-list集合根据某个字段分组后求多个字段的和\"><a href=\"#1-list集合根据某个字段分组后求多个字段的和\" class=\"headerlink\" title=\"1 list集合根据某个字段分组后求多个字段的和\"></a>1 list集合根据某个字段分组后求多个字段的和</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> List&lt;SafeSystemVO&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"><span class=\"comment\">//....省略添加元素的代码</span></span><br><span class=\"line\"><span class=\"comment\">//分组字段 driver_id</span></span><br><span class=\"line\">list.stream().collect(Collectors.groupingBy(SafeSystemVO::getDriver_id)).values().stream().map(d -&gt; &#123;</span><br><span class=\"line\">    SafeSystemVO vo = d.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">//求和1</span></span><br><span class=\"line\">    vo.setAg_total(d.stream().map(s -&gt; BigDecimal.valueOf(s.getAg_total())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    </span><br><span class=\"line\">    <span class=\"comment\">// 求和2</span></span><br><span class=\"line\">    vo.setScore(d.stream().map(s -&gt; BigDecimal.valueOf(s.getScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  </span><br><span class=\"line\">    vo.setLkj_score(d.stream().map(s -&gt; BigDecimal.valueOf(s.getLkj_score())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  </span><br><span class=\"line\">    vo.setTotalScore(d.stream().map(s -&gt; BigDecimal.valueOf(s.getTotalScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> vo;</span><br><span class=\"line\">&#125;).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-list-根据某个字段分组后求单个字段的平均值，并按照分组字段排序\"><a href=\"#2-list-根据某个字段分组后求单个字段的平均值，并按照分组字段排序\" class=\"headerlink\" title=\"2. list 根据某个字段分组后求单个字段的平均值，并按照分组字段排序\"></a>2. list 根据某个字段分组后求单个字段的平均值，并按照分组字段排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;SafeSystemVO&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"><span class=\"comment\">//....省略添加元素的代码</span></span><br><span class=\"line\">Map&lt;String, Double&gt; monthAvg = list1.stream().collect(Collectors.groupingBy(SafeSystemVO::getMonth, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));</span><br><span class=\"line\"><span class=\"comment\">//  根据Map 对象的key排序</span></span><br><span class=\"line\"><span class=\"comment\">// 我的分组字段是日期，就用了下面的</span></span><br><span class=\"line\">monthAvg.entrySet().stream().sorted((o1, o2) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Date d1 = DateUtils.convertStringToDate(o1.getKey(), DateUtils.FM2);</span><br><span class=\"line\">        Date d2 = DateUtils.convertStringToDate(o2.getKey(), DateUtils.FM2);</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> d1 != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d1.compareTo(d2);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (oldVal, newVal) -&gt; oldVal, LinkedHashMap::<span class=\"keyword\">new</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据Map 对象的value排序</span></span><br><span class=\"line\"><span class=\"comment\">//monthResult = workShopAvg.entrySet().stream().sorted((p1, p2) -&gt; p2.getValue().compareTo(p1.getValue())).collect(Collectors.toList());</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法一：</span></span><br><span class=\"line\"><span class=\"comment\">//list1.sort((o1, o2) -&gt; o1.getAge().compareTo(o2.getTotalScore())); //正序</span></span><br><span class=\"line\"><span class=\"comment\">//list1.sort((o1, o2) -&gt; o2.getAge().compareTo(o1.getTotalScore())); //倒序</span></span><br><span class=\"line\"><span class=\"comment\">//方法二</span></span><br><span class=\"line\"><span class=\"comment\">//list1.sort(Comparator.comparing(Person::getTotalScore)); // 正序</span></span><br><span class=\"line\"><span class=\"comment\">//list1.sort(Comparator.comparing(Person::getTotalScore).reversed()); // 倒序</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-list-根据字段分组求和后取-前-后10名\"><a href=\"#3-list-根据字段分组求和后取-前-后10名\" class=\"headerlink\" title=\"3. list 根据字段分组求和后取 前/后10名\"></a>3. list 根据字段分组求和后取 前/后10名</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//list对象接上面的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据driver_id分组，求平均值</span></span><br><span class=\"line\">Map&lt;String, Double&gt; driverScores = list3.stream()</span><br><span class=\"line\">        .collect(Collectors.groupingBy(SafeSystemVO::getDriver_id, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//排序后获取后10 名， 前10名的话修改sorted逻辑为：sorted((p1, p2) -&gt; p2.getValue().compareTo(p1.getValue()))</span></span><br><span class=\"line\">List&lt;Map.Entry&lt;String, Double&gt;&gt; driverScoresTop10 = driverScores.entrySet().stream().sorted((p1, p2) -&gt; p1.getValue().compareTo(p2.getValue())).limit(<span class=\"number\">10</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4-其他\"><a href=\"#4-其他\" class=\"headerlink\" title=\"4. 其他\"></a>4. 其他</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Id, name , age</span></span><br><span class=\"line\">        Person p1 = <span class=\"keyword\">new</span> Person(<span class=\"number\">1</span>,<span class=\"string\">&quot;麻子&quot;</span>, <span class=\"number\">31</span>);</span><br><span class=\"line\">        Person p2 = <span class=\"keyword\">new</span> Person(<span class=\"number\">2</span>,<span class=\"string\">&quot;李四&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">        Person p3 = <span class=\"keyword\">new</span> Person(<span class=\"number\">3</span>,<span class=\"string\">&quot;王五&quot;</span>, <span class=\"number\">26</span>);</span><br><span class=\"line\">        Person p4 = <span class=\"keyword\">new</span> Person(<span class=\"number\">3</span>,<span class=\"string\">&quot;王五&quot;</span>, <span class=\"number\">26</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Person&gt; personList = <span class=\"keyword\">new</span> ArrayList&lt;Person&gt;();</span><br><span class=\"line\">        personList.add(p1);</span><br><span class=\"line\">        personList.add(p2);</span><br><span class=\"line\">        personList.add(p3);</span><br><span class=\"line\">        personList.add(p4);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//java8遍历</span></span><br><span class=\"line\">        personList.forEach(p -&gt; System.out.println(p.getAge()));</span><br><span class=\"line\">        <span class=\"comment\">//按照person的 age进行排序</span></span><br><span class=\"line\">        <span class=\"comment\">//方法一</span></span><br><span class=\"line\">        personList.sort((o1, o2) -&gt; o1.getAge().compareTo(o2.getAge())); <span class=\"comment\">//正序</span></span><br><span class=\"line\">        personList.sort((o1, o2) -&gt; o2.getAge().compareTo(o1.getAge())); <span class=\"comment\">//倒序</span></span><br><span class=\"line\">        <span class=\"comment\">//方法二</span></span><br><span class=\"line\">        personList.sort(Comparator.comparing(Person::getAge)); <span class=\"comment\">// 正序</span></span><br><span class=\"line\">        personList.sort(Comparator.comparing(Person::getAge).reversed()); <span class=\"comment\">// 倒序</span></span><br><span class=\"line\">        <span class=\"comment\">//多个字段排序</span></span><br><span class=\"line\">        personList.sort(Comparator.comparing(User::getId).thenComparing(Person::getAge));</span><br><span class=\"line\">        <span class=\"comment\">//注：若选择排序字段为null值，正序可personList.sort(Comparator.comparing(Person::getAge,Comparator.nullsFirst(Comparator.naturalOrder())))</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;========================================&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取年龄最大的Person</span></span><br><span class=\"line\">        Person maxAgePerson = personList.stream().max(Comparator.comparing(Person::getAge)).get();</span><br><span class=\"line\">        System.out.println(maxAgePerson.getAge());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;========================================&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取年龄最小的Person</span></span><br><span class=\"line\">        Person minAgePerson = personList.stream().min(Comparator.comparing(Person::getAge)).get();</span><br><span class=\"line\">        System.out.println(minAgePerson.getAge());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//过滤出年龄是20的person，想过滤出什么条件的均可以</span></span><br><span class=\"line\">        List&lt;Person&gt; personList1 = personList.stream().filter(person -&gt; person.getAge() == <span class=\"number\">20</span>).collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//过滤-- 统计出年龄等于20的个数</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> count = personList.stream().filter(person -&gt; person.getAge() == <span class=\"number\">20</span>).count();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//过滤出年龄大约20的人</span></span><br><span class=\"line\">        List&lt;Person&gt; personList2 = personList.stream().filter(t -&gt; t.getAge().equals(<span class=\"number\">20</span>)).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"comment\">//得到年龄的平均值</span></span><br><span class=\"line\">        <span class=\"keyword\">double</span> asDouble = personList.stream().mapToInt(person -&gt; person.getAge()).average().getAsDouble();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//得到年龄的求和--基本类型</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = personList.stream().mapToInt(person -&gt; person.getAge()).sum();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//得到年龄的求和--包装类型,其中，若bigDecimal对象为null，可filter()过滤掉空指针.</span></span><br><span class=\"line\">        BigDecimal totalAge = personList.stream().map(User::getAge).reduce(BigDecimal.ZERO, BigDecimal::add);</span><br><span class=\"line\"></span><br><span class=\"line\">        （其中，若bigDecimal对象为<span class=\"keyword\">null</span>，可filter()过滤掉空指针.）</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//去重</span></span><br><span class=\"line\">        List&lt;Person&gt; personList3 = personList.stream().distinct().collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//list转map.</span></span><br><span class=\"line\">        <span class=\"comment\">//（其中，若集合对象key有重，可根据(k1,k2)-&gt;k1设置&lt;保留k1，舍弃k2&gt;.）</span></span><br><span class=\"line\">        Map&lt;Long, Person&gt; personMap = personList.stream().collect(Collectors.toMap(User::getId, t -&gt; t,(k1,k2)-&gt;k1));</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>记录一下用到的一些java8的lambda表达式语法</p>\n<h3 id=\"1-list集合根据某个字段分组后求多个字段的和\"><a href=\"#1-list集合根据某个字段分组后求多个字段的和\" class=\"headerlink\" title=\"1 list集合根据某个字段分组后求多个字段的和\"></a>1 list集合根据某个字段分组后求多个字段的和</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> List&lt;SafeSystemVO&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"><span class=\"comment\">//....省略添加元素的代码</span></span><br><span class=\"line\"><span class=\"comment\">//分组字段 driver_id</span></span><br><span class=\"line\">list.stream().collect(Collectors.groupingBy(SafeSystemVO::getDriver_id)).values().stream().map(d -&gt; &#123;</span><br><span class=\"line\">    SafeSystemVO vo = d.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">//求和1</span></span><br><span class=\"line\">    vo.setAg_total(d.stream().map(s -&gt; BigDecimal.valueOf(s.getAg_total())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    </span><br><span class=\"line\">    <span class=\"comment\">// 求和2</span></span><br><span class=\"line\">    vo.setScore(d.stream().map(s -&gt; BigDecimal.valueOf(s.getScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  </span><br><span class=\"line\">    vo.setLkj_score(d.stream().map(s -&gt; BigDecimal.valueOf(s.getLkj_score())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  </span><br><span class=\"line\">    vo.setTotalScore(d.stream().map(s -&gt; BigDecimal.valueOf(s.getTotalScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> vo;</span><br><span class=\"line\">&#125;).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-list-根据某个字段分组后求单个字段的平均值，并按照分组字段排序\"><a href=\"#2-list-根据某个字段分组后求单个字段的平均值，并按照分组字段排序\" class=\"headerlink\" title=\"2. list 根据某个字段分组后求单个字段的平均值，并按照分组字段排序\"></a>2. list 根据某个字段分组后求单个字段的平均值，并按照分组字段排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;SafeSystemVO&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"><span class=\"comment\">//....省略添加元素的代码</span></span><br><span class=\"line\">Map&lt;String, Double&gt; monthAvg = list1.stream().collect(Collectors.groupingBy(SafeSystemVO::getMonth, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));</span><br><span class=\"line\"><span class=\"comment\">//  根据Map 对象的key排序</span></span><br><span class=\"line\"><span class=\"comment\">// 我的分组字段是日期，就用了下面的</span></span><br><span class=\"line\">monthAvg.entrySet().stream().sorted((o1, o2) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Date d1 = DateUtils.convertStringToDate(o1.getKey(), DateUtils.FM2);</span><br><span class=\"line\">        Date d2 = DateUtils.convertStringToDate(o2.getKey(), DateUtils.FM2);</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> d1 != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d1.compareTo(d2);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (oldVal, newVal) -&gt; oldVal, LinkedHashMap::<span class=\"keyword\">new</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据Map 对象的value排序</span></span><br><span class=\"line\"><span class=\"comment\">//monthResult = workShopAvg.entrySet().stream().sorted((p1, p2) -&gt; p2.getValue().compareTo(p1.getValue())).collect(Collectors.toList());</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法一：</span></span><br><span class=\"line\"><span class=\"comment\">//list1.sort((o1, o2) -&gt; o1.getAge().compareTo(o2.getTotalScore())); //正序</span></span><br><span class=\"line\"><span class=\"comment\">//list1.sort((o1, o2) -&gt; o2.getAge().compareTo(o1.getTotalScore())); //倒序</span></span><br><span class=\"line\"><span class=\"comment\">//方法二</span></span><br><span class=\"line\"><span class=\"comment\">//list1.sort(Comparator.comparing(Person::getTotalScore)); // 正序</span></span><br><span class=\"line\"><span class=\"comment\">//list1.sort(Comparator.comparing(Person::getTotalScore).reversed()); // 倒序</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-list-根据字段分组求和后取-前-后10名\"><a href=\"#3-list-根据字段分组求和后取-前-后10名\" class=\"headerlink\" title=\"3. list 根据字段分组求和后取 前/后10名\"></a>3. list 根据字段分组求和后取 前/后10名</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//list对象接上面的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据driver_id分组，求平均值</span></span><br><span class=\"line\">Map&lt;String, Double&gt; driverScores = list3.stream()</span><br><span class=\"line\">        .collect(Collectors.groupingBy(SafeSystemVO::getDriver_id, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//排序后获取后10 名， 前10名的话修改sorted逻辑为：sorted((p1, p2) -&gt; p2.getValue().compareTo(p1.getValue()))</span></span><br><span class=\"line\">List&lt;Map.Entry&lt;String, Double&gt;&gt; driverScoresTop10 = driverScores.entrySet().stream().sorted((p1, p2) -&gt; p1.getValue().compareTo(p2.getValue())).limit(<span class=\"number\">10</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4-其他\"><a href=\"#4-其他\" class=\"headerlink\" title=\"4. 其他\"></a>4. 其他</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Id, name , age</span></span><br><span class=\"line\">        Person p1 = <span class=\"keyword\">new</span> Person(<span class=\"number\">1</span>,<span class=\"string\">&quot;麻子&quot;</span>, <span class=\"number\">31</span>);</span><br><span class=\"line\">        Person p2 = <span class=\"keyword\">new</span> Person(<span class=\"number\">2</span>,<span class=\"string\">&quot;李四&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">        Person p3 = <span class=\"keyword\">new</span> Person(<span class=\"number\">3</span>,<span class=\"string\">&quot;王五&quot;</span>, <span class=\"number\">26</span>);</span><br><span class=\"line\">        Person p4 = <span class=\"keyword\">new</span> Person(<span class=\"number\">3</span>,<span class=\"string\">&quot;王五&quot;</span>, <span class=\"number\">26</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Person&gt; personList = <span class=\"keyword\">new</span> ArrayList&lt;Person&gt;();</span><br><span class=\"line\">        personList.add(p1);</span><br><span class=\"line\">        personList.add(p2);</span><br><span class=\"line\">        personList.add(p3);</span><br><span class=\"line\">        personList.add(p4);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//java8遍历</span></span><br><span class=\"line\">        personList.forEach(p -&gt; System.out.println(p.getAge()));</span><br><span class=\"line\">        <span class=\"comment\">//按照person的 age进行排序</span></span><br><span class=\"line\">        <span class=\"comment\">//方法一</span></span><br><span class=\"line\">        personList.sort((o1, o2) -&gt; o1.getAge().compareTo(o2.getAge())); <span class=\"comment\">//正序</span></span><br><span class=\"line\">        personList.sort((o1, o2) -&gt; o2.getAge().compareTo(o1.getAge())); <span class=\"comment\">//倒序</span></span><br><span class=\"line\">        <span class=\"comment\">//方法二</span></span><br><span class=\"line\">        personList.sort(Comparator.comparing(Person::getAge)); <span class=\"comment\">// 正序</span></span><br><span class=\"line\">        personList.sort(Comparator.comparing(Person::getAge).reversed()); <span class=\"comment\">// 倒序</span></span><br><span class=\"line\">        <span class=\"comment\">//多个字段排序</span></span><br><span class=\"line\">        personList.sort(Comparator.comparing(User::getId).thenComparing(Person::getAge));</span><br><span class=\"line\">        <span class=\"comment\">//注：若选择排序字段为null值，正序可personList.sort(Comparator.comparing(Person::getAge,Comparator.nullsFirst(Comparator.naturalOrder())))</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;========================================&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取年龄最大的Person</span></span><br><span class=\"line\">        Person maxAgePerson = personList.stream().max(Comparator.comparing(Person::getAge)).get();</span><br><span class=\"line\">        System.out.println(maxAgePerson.getAge());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;========================================&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取年龄最小的Person</span></span><br><span class=\"line\">        Person minAgePerson = personList.stream().min(Comparator.comparing(Person::getAge)).get();</span><br><span class=\"line\">        System.out.println(minAgePerson.getAge());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//过滤出年龄是20的person，想过滤出什么条件的均可以</span></span><br><span class=\"line\">        List&lt;Person&gt; personList1 = personList.stream().filter(person -&gt; person.getAge() == <span class=\"number\">20</span>).collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//过滤-- 统计出年龄等于20的个数</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> count = personList.stream().filter(person -&gt; person.getAge() == <span class=\"number\">20</span>).count();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//过滤出年龄大约20的人</span></span><br><span class=\"line\">        List&lt;Person&gt; personList2 = personList.stream().filter(t -&gt; t.getAge().equals(<span class=\"number\">20</span>)).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"comment\">//得到年龄的平均值</span></span><br><span class=\"line\">        <span class=\"keyword\">double</span> asDouble = personList.stream().mapToInt(person -&gt; person.getAge()).average().getAsDouble();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//得到年龄的求和--基本类型</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = personList.stream().mapToInt(person -&gt; person.getAge()).sum();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//得到年龄的求和--包装类型,其中，若bigDecimal对象为null，可filter()过滤掉空指针.</span></span><br><span class=\"line\">        BigDecimal totalAge = personList.stream().map(User::getAge).reduce(BigDecimal.ZERO, BigDecimal::add);</span><br><span class=\"line\"></span><br><span class=\"line\">        （其中，若bigDecimal对象为<span class=\"keyword\">null</span>，可filter()过滤掉空指针.）</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//去重</span></span><br><span class=\"line\">        List&lt;Person&gt; personList3 = personList.stream().distinct().collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//list转map.</span></span><br><span class=\"line\">        <span class=\"comment\">//（其中，若集合对象key有重，可根据(k1,k2)-&gt;k1设置&lt;保留k1，舍弃k2&gt;.）</span></span><br><span class=\"line\">        Map&lt;Long, Person&gt; personMap = personList.stream().collect(Collectors.toMap(User::getId, t -&gt; t,(k1,k2)-&gt;k1));</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"认识UML之类图","comments":1,"abbrlink":20156,"date":"2022-04-25T06:58:59.000Z","password":1234,"abstract":"文章已被加密，需要输入密码查看，如需查看请联系博主！","message":"您好，这里需要密码。","wrong_pass_message":"抱歉，这个密码看着不太对，请再试试。","wrong_hash_message":"抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。","_content":"## 1. 什么是UML\n    统一建模语言（Unified Modeling Language）是一种面向对象系统的产品说明、可视化和编制文档的一种标准语言，是非专利的第三代建模和规约语言。\n    UML使用面向对象设计的建模工具，但独立与具体程序设计语言\n\n## 2. UML应用场景\n    UML 是在开发阶段，说明、可视化、构建和书写一个面向对象软件密集系统的制品 的开放方法。最佳的应用是工程实践，对大规模，复杂系统进行建模方面，\n    特别是在软 件架构层次，已经被验证有效。统一建模语言（UML）是一种模型化语言。模型大多以 图表的方式表现出来。一份典型的建模图表通常包含几个块或框，\n    连接线和作为模型附 加信息之用的文本。这些虽简单却非常重要，在 UML 规则中相互联系和扩展。\n\n## 3. UML图形种类\nUML2.0 一共有 13 种图形（UML1.5 定义了 9 种，2.0 增加了 4 种）。分别是：<u>用例图</u>、<u>类图</u>、<u>对象图</u>、<u>状态图</u>、<u>活动图</u>、<u>时序图</u>、<u>协作图</u>、<u>构件图</u>、<u>部署图</u> 9 种，包图、 时间图、组合结构图、交互概览图 4 种。\n- **用例图**（Usecase Diagrams）：用来描述用户的需求，从用户的角度描述系统的功能， 并指出各功能的执行者，强调谁在使用系统，系统为执行者完成哪些功能。 \n  \n- **类图**（Class Diagrams）：用于定义系统中的类。 \n  \n- **对象图**（Object Diagrams）：是类图的一个实例，描述了系统在具体时间点上所包含 的对象以及各个对象之间的关系。 \n  \n- **构件图**（Component Diagrams）：一种特殊的 UML 图来描述系统的静态实现视图。 \n  \n- **部署图**（Deployment Diagrams）：定义系统中软硬件的物理体系结构。 \n  \n- **状态图**（State Chart Diagrams）：用来描述类的对象所有可能的状态以及时间发生时 状态的转移条件。 \n  \n- **协作图**（Collaboration Diagrams）：描述对象之间的合作关系，更侧重和用户对象说 明哪些对象有消息的传递。 \n  \n- **活动图**（Activity Diagrams）：用来描述满足用例要求索要进行的活动以及活动间的约 束关系。\n  \n- **时序图**（Sequence Diagrams）：描述对象之间的交互顺序，着重体现对象间消息传递 的时间顺序，强调对象之间消息的发送顺序，同时显示对象之间的交互过程。 \n  \n- **包图**（Package Diagrams）：对构成系统的模型元素进行分组整理的图。 \n  \n- **组合结构图**（Composite Structure Diagrams）：表示类或者构建内部结构的图。 \n  \n- **时间图**（Timing Diagrams）：用来显示随时间变化，一个或多个元素的值或状态的更 改，也显示时控事件之间的交互和管理它们的时间和期限约束。 \n  \n- **交互概览图**（Interaction Overview Diagrams）：用活动图来表示多个交互之间的控制 关系的图。\n\n![UML分类](./uml/1.png)\n\n---\n\n## 4. UML绘图规范\n    建模的核心是模型，模型是现实的简化，模型是真实系统的左营，它提供了系统的设 计蓝图。给软件系统建模是，需要采用通用的符号语言，\n    这种描述模型所使用的语言称 为建模语言。\n\n### 4.1 事务描述\n\n1. 类（Class）： 对一组具有相同属性、方法、关系和语义的对象的描述\n2. 接口（Interface）：描述一个类或构件的一个服务的操作集，它仅仅是定义了一组操作规范，并没有给出具体的实现\n3. 用例（Usecase）：是对一组动作序列的描述，系统执行这些动作将产生一个对特定的参与者（Actor）有价值且可观察的结果\n4. 包（Package）: 是分组事物中最主要的，是UML中唯一的组织机制\n\n### 4.2 事务关系描述\n1. **关联（Association）**\n    \n    是一种拥有的关系，具有方向性，如果一个类单方向的访问另一个类，则称为单向关联（用一个箭头的实线表示）；如果两个类对象可以互相访问，则 称为双向关联（用两个箭头或不用箭头的实线表示）；一个对象能访问关联对象的数目 叫做“多重性”\n   \n   带普通箭头的实线表示，箭头指向被拥有者，或者不用箭头的实线表示\n2. **聚合（Aggregate）**：是整体与部分的关系 \n\n    当某个实体聚合称另一个实体时，该实体还可以时另一个实体的部分\n    \n    用带空心菱形的实线表示，菱形指向整体，箭头指向个体\n   \n3. **组合（Combination）**：整体与部分的关系，组合比聚合更加严格\n   \n    当某个实体组合成另一个实体时，二者具有相同的生命周期，例如手臂和人之间；\n   \n    带实心菱形的实线表示，菱形指向整体，箭头指向个体\n   \n4. **泛化（Generalization）/ 继承**：表示一个更泛化的元素和一个更具体的元素之间的关系\n\n    用带三角箭头的实线表示， 箭头指向父类\n\n5. **实现（Realization）**：类与接口, 类实现接口\n\n    用带三角箭头的虚线表示，箭头指向接口\n\n6. **依赖关系（Dependency）**：如果一个类的改动会影响到另一个类，则两者之间存在依赖关系，一般而言，依赖时单向的。\n   \n    用带普通箭头的虚线表示，箭头指向被依赖者\n\n![uml事务关系](./uml/2.png)\n\n---\n## 5 类图 Class Diagrams\n- +表示public\n- -表示private\n- \\#表示protected\n- ~表示default\n\n- 字段和方法返回值的数据类型非必须\n- 抽象类或抽象方法用斜体表示\n- 静态类或静态方法加下划线\n- 如果是接口在类名上方加<<Interface>>\n\n![uml demo](./uml/3.png)\n**类关系记忆技巧**\n- 箭头：从子类指向父类\n    - 定义子类是需要通过extends关键字指定父类\n    - 子类一定是指导父类定义的，但父类并不知道子类的定义\n    - 只有指导对方信息时才能指向对方\n    - 所有箭头的方向是从子类指向父类或者被依赖被使用的类\n\n- 继承/实现：用线条连接两个类\n    - 空心三角箭头表示继承或实现\n    - 线表示继承，是is-a的关系，表示扩展；（**司机是一个人**）\n    - 虚线表示实现\n    \n- 关联/依赖：用线条连接两个类\n    - 虚线表示依赖关系；表示一种使用关系，一个类需要借助另一个类来实现功能，一般是一个类将另一个类作为参数或者返回值使用。\n      在多重性关系中，可以直接在关联直线上增加一个数字，表示与之对应的另一个类的 对象的个数。 \n      \n      1..1：仅一个 \n      \n      0..*：零个或多个 \n      \n      1..*：一个或多个 \n      \n      0..1：没有或只有一个 \n      \n      m..n：最少 m、最多 n 个 (m<=n)\n    - 实线表示关联关系；表示一个类对象和另外一个类对象有关联，通常是一个类中有另一个类对象作为属性\n    \n- 组合/聚合：用菱形表示\n    - 聚合：空心菱形，整体和局部的关系，两者有独立的生命周期，是has-a的关系（**车队包含司机**）\n    - 组合：实心菱形，整体和局部的关系，两者具有相同的生命周期，是contains-a的关系（**人有两只手**）\n    \n---\n\n## 6. 时序图（Sequence Diagrams）\n    \n时序图描述对象之间消息的发送顺序，强调时间顺序。时序图是一个二维图，横轴表示对象，纵轴表示时间，消息在各对象之间横向传递，依照时间顺序总想排列。用箭头表示消息、竖线表示对象生命线。\n\n### 6.1 作用\n1、展示对象之间交互的顺序。将交互行为建模为消息传递，通过描述消息是如何在 对象间发送和接收的来动态展示对象之间的交互； \n\n2、相对于其他 UML 图，时序图更强调交互的时间顺序； \n\n3、可以直观的描述并发进程。\n### 6.2 组成元素\n1. 角色 Actor\n   \n   系统角色，可以是人、机器、其他系统、子系统\n2. 对象 Object\n\n   - 对象的三种命名方式\n     \n        第一种方式包括对象名和类名，例如：直播课时:课时，在时序图中，用“对象：类” 表示；第二种方式只显示类名，即表示它是一个匿名对象，例如： :课程；在时序图中，用 “：类”表示； 第三种方式只显示对象名不显示类名，例如：讲师；在时序图中，用“对象”表示。 \n   - 命名方式的选择 \n     \n        三种命名方式均可，哪种最容易让阅读该时序图的人理解，就选择哪种。 \n   - 对象的排列顺序 \n     \n        对象的左右顺序并不重要，但是为了作图清晰整洁，通常应遵循以下两个原则：把交 互频繁的对象尽可能的靠拢；把初始化整个交互活动的对象放置在最左端。\n3. 生命线 Lifeline\n\n   在时序图中表示为从对象图标向下延伸的一条虚线，表示对象存在的时间。\n4. 控制焦点 Focus of Control\n\n   又称为激活期，表示时间段的符号，在这个时间段内对象将执行相应的操作。可以理 解为 Java 语言中一对大括号{ }中的内容；用小矩形表示。\n5. 消息 Message\n\n   消息一般分为同步消息（Synchronous Message），异步消息（Asynchronous Message）和返回消息（Return Message）。 \n   - 消息的发送者把控制传递给消息的接收者，然后停止活动，等待消息的接收者放 弃或者返回控制。用来表示同步的意义； \n   - 消息发送者通过消息把信号传递给消息的接收者，然后继续自己的活动，不等待接 受者返回消息或者控制。异步消息的接收者和发送者是并发工作的。 \n   - 返回消息表示从过程调用返回。\n6. 自关联消息\n\n   表示方法的自身调用或者一个对象内的一个方法调用另外一个方法。\n7. 组合片段\n\n   组合片段用来解决交互执行的条件和方式，它允许在序列图中直接表示逻辑组件，用 于通过指定条件或子进程的应用区域，为任何生命线的任何部分定义特殊条件和子进程。 组合片段共有 13 种，名称及含义如下\n    ![组合片段](./uml/4.png)\n\n\n### 6.3 常用组合片段举例\n用来指明在两个或更多的消息序列之间的互斥的选择，相当于经典的 if..else..\n\n1. 抉择（Alt）\n   \n   抉择在任何场合下只发生一个序列。 可以在每个片段中设置一个临界来指示该片段 可以运行的条件。else 的临界指示其他任何临界都不为 True 时应运行的片段。如果所 有临界都为 False 并且没有 else，则不执行任何片段\n    ![Alt](./uml/5.png)\n   \n2. 选项（Opt）\n\n   包含一个可能发生或不发生的序列\n   ![Opt](./uml/6.png)\n   \n3. 循环（Loop）\n\n   片段重复一定次数，可以在临界中指示片段重复的条件\n   ![Loop](./uml/7.png)\n   \n4. 并行（Par）\n   \n   ![Par](./uml/8.png)\n\n### 6.4 时序图画法及实践\n\n时序图的绘制步骤可简单总结如下：\n1. 划清边界，识别交互的语境；\n2. 将所要绘制的交互场景中的角色以及对象梳理出来；\n3. 从触发整个交互的某个消息开始，在生命线之间从上到下依次画出所有消息，并注明 每个消息的特性（如参数等）。\n\n![时序图画法及实践](./uml/9.png)   \n\n    \n\n\n\n\n","source":"_posts/2022/04/uml.md","raw":"---\ntitle: 认识UML之类图\ncomments: true\ntags: UML\ncategories: 架构师笔记\nabbrlink: 20156\ndate: 2022-04-25 14:58:59\npassword: 1234\nabstract: 文章已被加密，需要输入密码查看，如需查看请联系博主！\nmessage: 您好，这里需要密码。\nwrong_pass_message: 抱歉，这个密码看着不太对，请再试试。\nwrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。\n---\n## 1. 什么是UML\n    统一建模语言（Unified Modeling Language）是一种面向对象系统的产品说明、可视化和编制文档的一种标准语言，是非专利的第三代建模和规约语言。\n    UML使用面向对象设计的建模工具，但独立与具体程序设计语言\n\n## 2. UML应用场景\n    UML 是在开发阶段，说明、可视化、构建和书写一个面向对象软件密集系统的制品 的开放方法。最佳的应用是工程实践，对大规模，复杂系统进行建模方面，\n    特别是在软 件架构层次，已经被验证有效。统一建模语言（UML）是一种模型化语言。模型大多以 图表的方式表现出来。一份典型的建模图表通常包含几个块或框，\n    连接线和作为模型附 加信息之用的文本。这些虽简单却非常重要，在 UML 规则中相互联系和扩展。\n\n## 3. UML图形种类\nUML2.0 一共有 13 种图形（UML1.5 定义了 9 种，2.0 增加了 4 种）。分别是：<u>用例图</u>、<u>类图</u>、<u>对象图</u>、<u>状态图</u>、<u>活动图</u>、<u>时序图</u>、<u>协作图</u>、<u>构件图</u>、<u>部署图</u> 9 种，包图、 时间图、组合结构图、交互概览图 4 种。\n- **用例图**（Usecase Diagrams）：用来描述用户的需求，从用户的角度描述系统的功能， 并指出各功能的执行者，强调谁在使用系统，系统为执行者完成哪些功能。 \n  \n- **类图**（Class Diagrams）：用于定义系统中的类。 \n  \n- **对象图**（Object Diagrams）：是类图的一个实例，描述了系统在具体时间点上所包含 的对象以及各个对象之间的关系。 \n  \n- **构件图**（Component Diagrams）：一种特殊的 UML 图来描述系统的静态实现视图。 \n  \n- **部署图**（Deployment Diagrams）：定义系统中软硬件的物理体系结构。 \n  \n- **状态图**（State Chart Diagrams）：用来描述类的对象所有可能的状态以及时间发生时 状态的转移条件。 \n  \n- **协作图**（Collaboration Diagrams）：描述对象之间的合作关系，更侧重和用户对象说 明哪些对象有消息的传递。 \n  \n- **活动图**（Activity Diagrams）：用来描述满足用例要求索要进行的活动以及活动间的约 束关系。\n  \n- **时序图**（Sequence Diagrams）：描述对象之间的交互顺序，着重体现对象间消息传递 的时间顺序，强调对象之间消息的发送顺序，同时显示对象之间的交互过程。 \n  \n- **包图**（Package Diagrams）：对构成系统的模型元素进行分组整理的图。 \n  \n- **组合结构图**（Composite Structure Diagrams）：表示类或者构建内部结构的图。 \n  \n- **时间图**（Timing Diagrams）：用来显示随时间变化，一个或多个元素的值或状态的更 改，也显示时控事件之间的交互和管理它们的时间和期限约束。 \n  \n- **交互概览图**（Interaction Overview Diagrams）：用活动图来表示多个交互之间的控制 关系的图。\n\n![UML分类](./uml/1.png)\n\n---\n\n## 4. UML绘图规范\n    建模的核心是模型，模型是现实的简化，模型是真实系统的左营，它提供了系统的设 计蓝图。给软件系统建模是，需要采用通用的符号语言，\n    这种描述模型所使用的语言称 为建模语言。\n\n### 4.1 事务描述\n\n1. 类（Class）： 对一组具有相同属性、方法、关系和语义的对象的描述\n2. 接口（Interface）：描述一个类或构件的一个服务的操作集，它仅仅是定义了一组操作规范，并没有给出具体的实现\n3. 用例（Usecase）：是对一组动作序列的描述，系统执行这些动作将产生一个对特定的参与者（Actor）有价值且可观察的结果\n4. 包（Package）: 是分组事物中最主要的，是UML中唯一的组织机制\n\n### 4.2 事务关系描述\n1. **关联（Association）**\n    \n    是一种拥有的关系，具有方向性，如果一个类单方向的访问另一个类，则称为单向关联（用一个箭头的实线表示）；如果两个类对象可以互相访问，则 称为双向关联（用两个箭头或不用箭头的实线表示）；一个对象能访问关联对象的数目 叫做“多重性”\n   \n   带普通箭头的实线表示，箭头指向被拥有者，或者不用箭头的实线表示\n2. **聚合（Aggregate）**：是整体与部分的关系 \n\n    当某个实体聚合称另一个实体时，该实体还可以时另一个实体的部分\n    \n    用带空心菱形的实线表示，菱形指向整体，箭头指向个体\n   \n3. **组合（Combination）**：整体与部分的关系，组合比聚合更加严格\n   \n    当某个实体组合成另一个实体时，二者具有相同的生命周期，例如手臂和人之间；\n   \n    带实心菱形的实线表示，菱形指向整体，箭头指向个体\n   \n4. **泛化（Generalization）/ 继承**：表示一个更泛化的元素和一个更具体的元素之间的关系\n\n    用带三角箭头的实线表示， 箭头指向父类\n\n5. **实现（Realization）**：类与接口, 类实现接口\n\n    用带三角箭头的虚线表示，箭头指向接口\n\n6. **依赖关系（Dependency）**：如果一个类的改动会影响到另一个类，则两者之间存在依赖关系，一般而言，依赖时单向的。\n   \n    用带普通箭头的虚线表示，箭头指向被依赖者\n\n![uml事务关系](./uml/2.png)\n\n---\n## 5 类图 Class Diagrams\n- +表示public\n- -表示private\n- \\#表示protected\n- ~表示default\n\n- 字段和方法返回值的数据类型非必须\n- 抽象类或抽象方法用斜体表示\n- 静态类或静态方法加下划线\n- 如果是接口在类名上方加<<Interface>>\n\n![uml demo](./uml/3.png)\n**类关系记忆技巧**\n- 箭头：从子类指向父类\n    - 定义子类是需要通过extends关键字指定父类\n    - 子类一定是指导父类定义的，但父类并不知道子类的定义\n    - 只有指导对方信息时才能指向对方\n    - 所有箭头的方向是从子类指向父类或者被依赖被使用的类\n\n- 继承/实现：用线条连接两个类\n    - 空心三角箭头表示继承或实现\n    - 线表示继承，是is-a的关系，表示扩展；（**司机是一个人**）\n    - 虚线表示实现\n    \n- 关联/依赖：用线条连接两个类\n    - 虚线表示依赖关系；表示一种使用关系，一个类需要借助另一个类来实现功能，一般是一个类将另一个类作为参数或者返回值使用。\n      在多重性关系中，可以直接在关联直线上增加一个数字，表示与之对应的另一个类的 对象的个数。 \n      \n      1..1：仅一个 \n      \n      0..*：零个或多个 \n      \n      1..*：一个或多个 \n      \n      0..1：没有或只有一个 \n      \n      m..n：最少 m、最多 n 个 (m<=n)\n    - 实线表示关联关系；表示一个类对象和另外一个类对象有关联，通常是一个类中有另一个类对象作为属性\n    \n- 组合/聚合：用菱形表示\n    - 聚合：空心菱形，整体和局部的关系，两者有独立的生命周期，是has-a的关系（**车队包含司机**）\n    - 组合：实心菱形，整体和局部的关系，两者具有相同的生命周期，是contains-a的关系（**人有两只手**）\n    \n---\n\n## 6. 时序图（Sequence Diagrams）\n    \n时序图描述对象之间消息的发送顺序，强调时间顺序。时序图是一个二维图，横轴表示对象，纵轴表示时间，消息在各对象之间横向传递，依照时间顺序总想排列。用箭头表示消息、竖线表示对象生命线。\n\n### 6.1 作用\n1、展示对象之间交互的顺序。将交互行为建模为消息传递，通过描述消息是如何在 对象间发送和接收的来动态展示对象之间的交互； \n\n2、相对于其他 UML 图，时序图更强调交互的时间顺序； \n\n3、可以直观的描述并发进程。\n### 6.2 组成元素\n1. 角色 Actor\n   \n   系统角色，可以是人、机器、其他系统、子系统\n2. 对象 Object\n\n   - 对象的三种命名方式\n     \n        第一种方式包括对象名和类名，例如：直播课时:课时，在时序图中，用“对象：类” 表示；第二种方式只显示类名，即表示它是一个匿名对象，例如： :课程；在时序图中，用 “：类”表示； 第三种方式只显示对象名不显示类名，例如：讲师；在时序图中，用“对象”表示。 \n   - 命名方式的选择 \n     \n        三种命名方式均可，哪种最容易让阅读该时序图的人理解，就选择哪种。 \n   - 对象的排列顺序 \n     \n        对象的左右顺序并不重要，但是为了作图清晰整洁，通常应遵循以下两个原则：把交 互频繁的对象尽可能的靠拢；把初始化整个交互活动的对象放置在最左端。\n3. 生命线 Lifeline\n\n   在时序图中表示为从对象图标向下延伸的一条虚线，表示对象存在的时间。\n4. 控制焦点 Focus of Control\n\n   又称为激活期，表示时间段的符号，在这个时间段内对象将执行相应的操作。可以理 解为 Java 语言中一对大括号{ }中的内容；用小矩形表示。\n5. 消息 Message\n\n   消息一般分为同步消息（Synchronous Message），异步消息（Asynchronous Message）和返回消息（Return Message）。 \n   - 消息的发送者把控制传递给消息的接收者，然后停止活动，等待消息的接收者放 弃或者返回控制。用来表示同步的意义； \n   - 消息发送者通过消息把信号传递给消息的接收者，然后继续自己的活动，不等待接 受者返回消息或者控制。异步消息的接收者和发送者是并发工作的。 \n   - 返回消息表示从过程调用返回。\n6. 自关联消息\n\n   表示方法的自身调用或者一个对象内的一个方法调用另外一个方法。\n7. 组合片段\n\n   组合片段用来解决交互执行的条件和方式，它允许在序列图中直接表示逻辑组件，用 于通过指定条件或子进程的应用区域，为任何生命线的任何部分定义特殊条件和子进程。 组合片段共有 13 种，名称及含义如下\n    ![组合片段](./uml/4.png)\n\n\n### 6.3 常用组合片段举例\n用来指明在两个或更多的消息序列之间的互斥的选择，相当于经典的 if..else..\n\n1. 抉择（Alt）\n   \n   抉择在任何场合下只发生一个序列。 可以在每个片段中设置一个临界来指示该片段 可以运行的条件。else 的临界指示其他任何临界都不为 True 时应运行的片段。如果所 有临界都为 False 并且没有 else，则不执行任何片段\n    ![Alt](./uml/5.png)\n   \n2. 选项（Opt）\n\n   包含一个可能发生或不发生的序列\n   ![Opt](./uml/6.png)\n   \n3. 循环（Loop）\n\n   片段重复一定次数，可以在临界中指示片段重复的条件\n   ![Loop](./uml/7.png)\n   \n4. 并行（Par）\n   \n   ![Par](./uml/8.png)\n\n### 6.4 时序图画法及实践\n\n时序图的绘制步骤可简单总结如下：\n1. 划清边界，识别交互的语境；\n2. 将所要绘制的交互场景中的角色以及对象梳理出来；\n3. 从触发整个交互的某个消息开始，在生命线之间从上到下依次画出所有消息，并注明 每个消息的特性（如参数等）。\n\n![时序图画法及实践](./uml/9.png)   \n\n    \n\n\n\n\n","slug":"uml","published":1,"updated":"2022-05-05T01:25:52.573Z","layout":"post","photos":[],"link":"","_id":"cl424hx56000gad5i536975fh","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉，这个密码看着不太对，请再试试。\" data-whm=\"抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"cc2bc471e3e229b1ad9c698b246636ace18afeedfe6aa4b01625bcd50740b25a\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-xray\">\n      <input class=\"hbe hbe-input-field hbe-input-field-xray\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-xray\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-xray\">您好，这里需要密码。</span>\n      </label>\n      <svg class=\"hbe hbe-graphic hbe-graphic-xray\" width=\"300%\" height=\"100%\" viewBox=\"0 0 1200 60\" preserveAspectRatio=\"none\">\n        <path d=\"M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0\"></path>\n        <path d=\"M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0\"></path>\n      </svg>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"文章已被加密，需要输入密码查看，如需查看请联系博主！","more":"文章已被加密，需要输入密码查看，如需查看请联系博主！","origin":"<h2 id=\"1-什么是UML\"><a href=\"#1-什么是UML\" class=\"headerlink\" title=\"1. 什么是UML\"></a>1. 什么是UML</h2><pre><code>统一建模语言（Unified Modeling Language）是一种面向对象系统的产品说明、可视化和编制文档的一种标准语言，是非专利的第三代建模和规约语言。\nUML使用面向对象设计的建模工具，但独立与具体程序设计语言\n</code></pre>\n<h2 id=\"2-UML应用场景\"><a href=\"#2-UML应用场景\" class=\"headerlink\" title=\"2. UML应用场景\"></a>2. UML应用场景</h2><pre><code>UML 是在开发阶段，说明、可视化、构建和书写一个面向对象软件密集系统的制品 的开放方法。最佳的应用是工程实践，对大规模，复杂系统进行建模方面，\n特别是在软 件架构层次，已经被验证有效。统一建模语言（UML）是一种模型化语言。模型大多以 图表的方式表现出来。一份典型的建模图表通常包含几个块或框，\n连接线和作为模型附 加信息之用的文本。这些虽简单却非常重要，在 UML 规则中相互联系和扩展。\n</code></pre>\n<h2 id=\"3-UML图形种类\"><a href=\"#3-UML图形种类\" class=\"headerlink\" title=\"3. UML图形种类\"></a>3. UML图形种类</h2><p>UML2.0 一共有 13 种图形（UML1.5 定义了 9 种，2.0 增加了 4 种）。分别是：<u>用例图</u>、<u>类图</u>、<u>对象图</u>、<u>状态图</u>、<u>活动图</u>、<u>时序图</u>、<u>协作图</u>、<u>构件图</u>、<u>部署图</u> 9 种，包图、 时间图、组合结构图、交互概览图 4 种。</p>\n<ul>\n<li><strong>用例图</strong>（Usecase Diagrams）：用来描述用户的需求，从用户的角度描述系统的功能， 并指出各功能的执行者，强调谁在使用系统，系统为执行者完成哪些功能。 </li>\n<li><strong>类图</strong>（Class Diagrams）：用于定义系统中的类。 </li>\n<li><strong>对象图</strong>（Object Diagrams）：是类图的一个实例，描述了系统在具体时间点上所包含 的对象以及各个对象之间的关系。 </li>\n<li><strong>构件图</strong>（Component Diagrams）：一种特殊的 UML 图来描述系统的静态实现视图。 </li>\n<li><strong>部署图</strong>（Deployment Diagrams）：定义系统中软硬件的物理体系结构。 </li>\n<li><strong>状态图</strong>（State Chart Diagrams）：用来描述类的对象所有可能的状态以及时间发生时 状态的转移条件。 </li>\n<li><strong>协作图</strong>（Collaboration Diagrams）：描述对象之间的合作关系，更侧重和用户对象说 明哪些对象有消息的传递。 </li>\n<li><strong>活动图</strong>（Activity Diagrams）：用来描述满足用例要求索要进行的活动以及活动间的约 束关系。</li>\n<li><strong>时序图</strong>（Sequence Diagrams）：描述对象之间的交互顺序，着重体现对象间消息传递 的时间顺序，强调对象之间消息的发送顺序，同时显示对象之间的交互过程。 </li>\n<li><strong>包图</strong>（Package Diagrams）：对构成系统的模型元素进行分组整理的图。 </li>\n<li><strong>组合结构图</strong>（Composite Structure Diagrams）：表示类或者构建内部结构的图。 </li>\n<li><strong>时间图</strong>（Timing Diagrams）：用来显示随时间变化，一个或多个元素的值或状态的更 改，也显示时控事件之间的交互和管理它们的时间和期限约束。 </li>\n<li><strong>交互概览图</strong>（Interaction Overview Diagrams）：用活动图来表示多个交互之间的控制 关系的图。</li>\n</ul>\n<p><img src=\"/uml/1.png\" alt=\"UML分类\"></p>\n<hr>\n<h2 id=\"4-UML绘图规范\"><a href=\"#4-UML绘图规范\" class=\"headerlink\" title=\"4. UML绘图规范\"></a>4. UML绘图规范</h2><pre><code>建模的核心是模型，模型是现实的简化，模型是真实系统的左营，它提供了系统的设 计蓝图。给软件系统建模是，需要采用通用的符号语言，\n这种描述模型所使用的语言称 为建模语言。\n</code></pre>\n<h3 id=\"4-1-事务描述\"><a href=\"#4-1-事务描述\" class=\"headerlink\" title=\"4.1 事务描述\"></a>4.1 事务描述</h3><ol>\n<li>类（Class）： 对一组具有相同属性、方法、关系和语义的对象的描述</li>\n<li>接口（Interface）：描述一个类或构件的一个服务的操作集，它仅仅是定义了一组操作规范，并没有给出具体的实现</li>\n<li>用例（Usecase）：是对一组动作序列的描述，系统执行这些动作将产生一个对特定的参与者（Actor）有价值且可观察的结果</li>\n<li>包（Package）: 是分组事物中最主要的，是UML中唯一的组织机制</li>\n</ol>\n<h3 id=\"4-2-事务关系描述\"><a href=\"#4-2-事务关系描述\" class=\"headerlink\" title=\"4.2 事务关系描述\"></a>4.2 事务关系描述</h3><ol>\n<li><p><strong>关联（Association）</strong></p>\n<p> 是一种拥有的关系，具有方向性，如果一个类单方向的访问另一个类，则称为单向关联（用一个箭头的实线表示）；如果两个类对象可以互相访问，则 称为双向关联（用两个箭头或不用箭头的实线表示）；一个对象能访问关联对象的数目 叫做“多重性”</p>\n<p>带普通箭头的实线表示，箭头指向被拥有者，或者不用箭头的实线表示</p>\n</li>\n<li><p><strong>聚合（Aggregate）</strong>：是整体与部分的关系 </p>\n<p> 当某个实体聚合称另一个实体时，该实体还可以时另一个实体的部分</p>\n<p> 用带空心菱形的实线表示，菱形指向整体，箭头指向个体</p>\n</li>\n<li><p><strong>组合（Combination）</strong>：整体与部分的关系，组合比聚合更加严格</p>\n<p> 当某个实体组合成另一个实体时，二者具有相同的生命周期，例如手臂和人之间；</p>\n<p> 带实心菱形的实线表示，菱形指向整体，箭头指向个体</p>\n</li>\n<li><p><strong>泛化（Generalization）/ 继承</strong>：表示一个更泛化的元素和一个更具体的元素之间的关系</p>\n<p> 用带三角箭头的实线表示， 箭头指向父类</p>\n</li>\n<li><p><strong>实现（Realization）</strong>：类与接口, 类实现接口</p>\n<p> 用带三角箭头的虚线表示，箭头指向接口</p>\n</li>\n<li><p><strong>依赖关系（Dependency）</strong>：如果一个类的改动会影响到另一个类，则两者之间存在依赖关系，一般而言，依赖时单向的。</p>\n<p> 用带普通箭头的虚线表示，箭头指向被依赖者</p>\n</li>\n</ol>\n<p><img src=\"/uml/2.png\" alt=\"uml事务关系\"></p>\n<hr>\n<h2 id=\"5-类图-Class-Diagrams\"><a href=\"#5-类图-Class-Diagrams\" class=\"headerlink\" title=\"5 类图 Class Diagrams\"></a>5 类图 Class Diagrams</h2><ul>\n<li><p>+表示public</p>\n</li>\n<li><p>-表示private</p>\n</li>\n<li><p>#表示protected</p>\n</li>\n<li><p>~表示default</p>\n</li>\n<li><p>字段和方法返回值的数据类型非必须</p>\n</li>\n<li><p>抽象类或抽象方法用斜体表示</p>\n</li>\n<li><p>静态类或静态方法加下划线</p>\n</li>\n<li><p>如果是接口在类名上方加&lt;<Interface>&gt;</Interface></p>\n</li>\n</ul>\n<p><img src=\"/uml/3.png\" alt=\"uml demo\"><br><strong>类关系记忆技巧</strong></p>\n<ul>\n<li><p>箭头：从子类指向父类</p>\n<ul>\n<li>定义子类是需要通过extends关键字指定父类</li>\n<li>子类一定是指导父类定义的，但父类并不知道子类的定义</li>\n<li>只有指导对方信息时才能指向对方</li>\n<li>所有箭头的方向是从子类指向父类或者被依赖被使用的类</li>\n</ul>\n</li>\n<li><p>继承/实现：用线条连接两个类</p>\n<ul>\n<li>空心三角箭头表示继承或实现</li>\n<li>线表示继承，是is-a的关系，表示扩展；（<strong>司机是一个人</strong>）</li>\n<li>虚线表示实现</li>\n</ul>\n</li>\n<li><p>关联/依赖：用线条连接两个类</p>\n<ul>\n<li>虚线表示依赖关系；表示一种使用关系，一个类需要借助另一个类来实现功能，一般是一个类将另一个类作为参数或者返回值使用。<br>在多重性关系中，可以直接在关联直线上增加一个数字，表示与之对应的另一个类的 对象的个数。 1..1：仅一个 0..*：零个或多个 1..*：一个或多个 0..1：没有或只有一个 m..n：最少 m、最多 n 个 (m&lt;=n)</li>\n<li>实线表示关联关系；表示一个类对象和另外一个类对象有关联，通常是一个类中有另一个类对象作为属性</li>\n</ul>\n</li>\n<li><p>组合/聚合：用菱形表示</p>\n<ul>\n<li>聚合：空心菱形，整体和局部的关系，两者有独立的生命周期，是has-a的关系（<strong>车队包含司机</strong>）</li>\n<li>组合：实心菱形，整体和局部的关系，两者具有相同的生命周期，是contains-a的关系（<strong>人有两只手</strong>）</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"6-时序图（Sequence-Diagrams）\"><a href=\"#6-时序图（Sequence-Diagrams）\" class=\"headerlink\" title=\"6. 时序图（Sequence Diagrams）\"></a>6. 时序图（Sequence Diagrams）</h2><p>时序图描述对象之间消息的发送顺序，强调时间顺序。时序图是一个二维图，横轴表示对象，纵轴表示时间，消息在各对象之间横向传递，依照时间顺序总想排列。用箭头表示消息、竖线表示对象生命线。</p>\n<h3 id=\"6-1-作用\"><a href=\"#6-1-作用\" class=\"headerlink\" title=\"6.1 作用\"></a>6.1 作用</h3><p>1、展示对象之间交互的顺序。将交互行为建模为消息传递，通过描述消息是如何在 对象间发送和接收的来动态展示对象之间的交互； </p>\n<p>2、相对于其他 UML 图，时序图更强调交互的时间顺序； </p>\n<p>3、可以直观的描述并发进程。</p>\n<h3 id=\"6-2-组成元素\"><a href=\"#6-2-组成元素\" class=\"headerlink\" title=\"6.2 组成元素\"></a>6.2 组成元素</h3><ol>\n<li><p>角色 Actor</p>\n<p>系统角色，可以是人、机器、其他系统、子系统</p>\n</li>\n<li><p>对象 Object</p>\n<ul>\n<li>对象的三种命名方式   第一种方式包括对象名和类名，例如：直播课时:课时，在时序图中，用“对象：类” 表示；第二种方式只显示类名，即表示它是一个匿名对象，例如： :课程；在时序图中，用 “：类”表示； 第三种方式只显示对象名不显示类名，例如：讲师；在时序图中，用“对象”表示。 </li>\n<li>命名方式的选择    三种命名方式均可，哪种最容易让阅读该时序图的人理解，就选择哪种。 </li>\n<li>对象的排列顺序    对象的左右顺序并不重要，但是为了作图清晰整洁，通常应遵循以下两个原则：把交 互频繁的对象尽可能的靠拢；把初始化整个交互活动的对象放置在最左端。</li>\n</ul>\n</li>\n<li><p>生命线 Lifeline</p>\n<p>在时序图中表示为从对象图标向下延伸的一条虚线，表示对象存在的时间。</p>\n</li>\n<li><p>控制焦点 Focus of Control</p>\n<p>又称为激活期，表示时间段的符号，在这个时间段内对象将执行相应的操作。可以理 解为 Java 语言中一对大括号{ }中的内容；用小矩形表示。</p>\n</li>\n<li><p>消息 Message</p>\n<p>消息一般分为同步消息（Synchronous Message），异步消息（Asynchronous Message）和返回消息（Return Message）。 </p>\n<ul>\n<li>消息的发送者把控制传递给消息的接收者，然后停止活动，等待消息的接收者放 弃或者返回控制。用来表示同步的意义； </li>\n<li>消息发送者通过消息把信号传递给消息的接收者，然后继续自己的活动，不等待接 受者返回消息或者控制。异步消息的接收者和发送者是并发工作的。 </li>\n<li>返回消息表示从过程调用返回。</li>\n</ul>\n</li>\n<li><p>自关联消息</p>\n<p>表示方法的自身调用或者一个对象内的一个方法调用另外一个方法。</p>\n</li>\n<li><p>组合片段</p>\n<p>组合片段用来解决交互执行的条件和方式，它允许在序列图中直接表示逻辑组件，用 于通过指定条件或子进程的应用区域，为任何生命线的任何部分定义特殊条件和子进程。 组合片段共有 13 种，名称及含义如下<br> <img src=\"/uml/4.png\" alt=\"组合片段\"></p>\n</li>\n</ol>\n<h3 id=\"6-3-常用组合片段举例\"><a href=\"#6-3-常用组合片段举例\" class=\"headerlink\" title=\"6.3 常用组合片段举例\"></a>6.3 常用组合片段举例</h3><p>用来指明在两个或更多的消息序列之间的互斥的选择，相当于经典的 if..else..</p>\n<ol>\n<li><p>抉择（Alt）</p>\n<p>抉择在任何场合下只发生一个序列。 可以在每个片段中设置一个临界来指示该片段 可以运行的条件。else 的临界指示其他任何临界都不为 True 时应运行的片段。如果所 有临界都为 False 并且没有 else，则不执行任何片段<br> <img src=\"/uml/5.png\" alt=\"Alt\"></p>\n</li>\n<li><p>选项（Opt）</p>\n<p>包含一个可能发生或不发生的序列<br><img src=\"/uml/6.png\" alt=\"Opt\"></p>\n</li>\n<li><p>循环（Loop）</p>\n<p>片段重复一定次数，可以在临界中指示片段重复的条件<br><img src=\"/uml/7.png\" alt=\"Loop\"></p>\n</li>\n<li><p>并行（Par）</p>\n<p><img src=\"/uml/8.png\" alt=\"Par\"></p>\n</li>\n</ol>\n<h3 id=\"6-4-时序图画法及实践\"><a href=\"#6-4-时序图画法及实践\" class=\"headerlink\" title=\"6.4 时序图画法及实践\"></a>6.4 时序图画法及实践</h3><p>时序图的绘制步骤可简单总结如下：</p>\n<ol>\n<li>划清边界，识别交互的语境；</li>\n<li>将所要绘制的交互场景中的角色以及对象梳理出来；</li>\n<li>从触发整个交互的某个消息开始，在生命线之间从上到下依次画出所有消息，并注明 每个消息的特性（如参数等）。</li>\n</ol>\n<p><img src=\"/uml/9.png\" alt=\"时序图画法及实践\">   </p>\n","encrypt":true},{"title":"Linux安装Apache Http Server","comments":1,"password":"xiaoyuge","abstract":"Here's something encrypted, password is required to continue reading.","message":"Hey, password is required here.","theme":"xray","wrong_pass_message":"Oh, this is an invalid password. Check and try again, please.","wrong_hash_message":"Oh, these decrypted content cannot be verified, but you can still have a look.","abbrlink":13350,"date":"2022-05-23T04:14:00.000Z","_content":"## 1. 前言\nApache Http Server又可以简称为httpd或者Apache，它是Internet使用最广泛的web服务器之一\n\nHttpd是Apache超文本传输协议（HTTP）服务器的主程序。被设计为一个独立运行的后台进程，它会建立一个处理请求的子进程或线程的池。\n通常，httpd不应该被直接调用，而应该在类Unix系统中由apachectl调用，在Windows中做为服务运行。\n \n**Httpd主要特点：**\n\n    （1）开放源代码\n    （2）跨平台使用，支持绝大多数硬件平台，支持所有的unix系统和linux系统，支持大多数windows平台\n    （3）支持多种web编程语言，perl，php，python，java等\n    （4）模块化设计，根据所需功能去安装不同的模块\n    （5）运行非常稳定，支持大负载访问的web站点\n    （6）安全性高，及时修复已发现的漏洞\n### 1.1 Httpd版本\n    \n主要介绍httpd的两大版本：\n- httpd-2.2\n- httpd-2.4\n\n官网链接：https://httpd.apache.org/\n### 1.2 Httpd特性\n- httpd-2.2 特性：\n    - 事先创建进程\n    - 按需维持适当的进程\n    - 模块化设计，核心比较小，各种功能通过模块添加(包括PHP)，支持运行时配置，支持单独编译模块\n    - 支持多种方式的虚拟主机配置，如基于ip的虚拟主机，基于端口的虚拟主机，基于域名的虚拟主机等\n    - 支持https协议(通过mod_ ssI模块实现)\n    - 支持用户认证\n    - 支持基于IP或域名的ACL访问控制机制\n    - 支持每目录的访问控制(用户访问默认主页时不需要提供用户名和密码，但是用户访问某特定目录时需要提供用户名和支持URL重写\n    - 支持MPM (Multi Path Modules,多处理模块)。用于定义httpd的工作模型(单进程、 单进程多线程、多进程、多进程单线程、多进程多线程）\n- httpd-2.4 特性：\n    - MPM支持运行DSO机制(Dynamic Share Object,模块的动态装/卸载机制)，以模块形式按需加载\n    - 支持event MPM, event MPM模块生产环境可用\n    - 支持异步读写\n    - 支持每个模块及每个目录分别使用各自的日志级别\n    - 每个请求相关的专业配置，使用来配置\n    - 增强版的表达式分析器\n    - 支持毫秒级的keepalive timeout\n    - 基于FQDN的虚拟主机不再需要Name Virtual Host指令\n    - 支持用户自定义变量\n    - 支持新的指令(Allow Override List)\n    - 降低对内存的消耗\n    \n### 1.3 httpd自带的工具\n![](./Apache-Http-Server/1.png)\n## 2. 源码安装\n1. 下载安装包\n    ```text\n    链接: https://pan.baidu.com/s/1ip-3yUhY1XYdkD8KejgQkQ \n    提取码: bcub\n   \n    #第二种：\n    http://archive.apache.org/dist/apr/apr-1.7.0.tar.gz\n    http://archive.apache.org/dist/apr/apr-util-1.6.1.tar.gz\n    https://nchc.dl.sourceforge.net/project/pcre/pcre/8.45/pcre-8.45.zip\n   ```\n2. 上传安装包到服务器目录\n3. 配置依赖环境\n   1. 配置apr依赖\n        ```shell\n        #解压\n        tar -xf apr-1.7.0.tar.gz\n       \n        #进入到目录\n        cd apr-1.7.0\n       \n       #配置(设置安装在/usr/local/apr)\n       ./configure --prefix=./configure --prefix=/usr/local/apr\n    \n        #编译并安装\n        make && make install\n       ```\n\n   2. 配置apr-util依赖\n        ```shell\n        #解压\n       tar -xf apr-util-1.6.1.tar.gz\n    \n        #进入到目录\n        cd apr-util-1.6.1/\n    \n        #配置(设置安装在/usr/local/apr-util)\n        ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr\n    \n        #编译并安装\n        make && make install\n       ```\n\n   3. 配置pcre依赖\n        ```shell\n        #解压\n        tar -xf pcre-8.44.tar.bz2\n        \n        #进入到目录\n        cd pcre-8.44/\n        \n        #配置(设置安装在/usr/local/pcre)\n        ./configure --prefix=/usr/local/pcre\n        \n        #编译并安装\n        make && make install\n        ```\n\n    4. 配置安装httpd\n        ```shell\n        #解压\n        tar -xf httpd-2.4.53.tar.gz\n        \n        #进入到目录\n        cd httpd-2.4.53/\n        \n        #配置(设置安装在/usr/local/httpd)\n        ./configure --prefix=/usr/local/httpd --with-pcre=/usr/local/pcre --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util\n        \n        #编译并安装：\n        make && make install\n        ```\n    5. 配置环境变量\n        ```shell\n        echo 'PATH=/usr/local/httpd/bin:$PATH' > /etc/profile.d/httpd.sh && . /etc/profile.d/httpd.sh\n        ```\n4. 添加Httpd服务\n   1. 复制到init.d 并重命名为httpd\n        ```shell\n        cp /apps/httpd24/bin/apachectl  /etc/rc.d/init.d/httpd\n        ```\n      \n   2. 建立软连接，通过service命令启动/关闭\n        ```shell\n        #链接文件的S61是启动时的序号。当init.d目录下有httpd脚本后，我们就可以通过service命令来启动关闭apache了\n        ln -s /etc/rc.d/init.d/httpd  /etc/rc.d/rc3.d/S61httpd\n       ```\n   3. 编辑httpd脚本，\n      - 在第2行(#!/bin/sh下面)添加如下注释信息（包括#）：\n        ```shell\n        # chkconfig: 2345 85 15\n        # description: Apache\n        ```\n        第一行的3个参数意义分别为：在哪些运行级别启动httpd（3，5）；启动序号（S61）；关闭序号（K61）。注意：第二行的描述必须要写！\n      - 通过搜索ServerName（先Esc，在输入:/ServerName） 打开ServerName这一行注释\n           ```shell\n           #\n           # ServerName gives the name and port that the server uses to identify itself.\n           # This can often be determined automatically, but we recommend you specify\n           # it explicitly to prevent problems during startup.\n           #\n           # If your host doesn't have a registered DNS name, enter its IP address here.\n           #\n           ServerName localhost:80\n           ```\n    \n    4. 所有开机模式下自启动\n      ```shell\n      #所有开机模式下自启动，另外chkconfig httpd on 表示345模式下自启动\n      chkconfig --add httpd\n    ```\n    \n5. 启动服务\n   ```shell\n    #到bin目录开启服务\n    cd /usr/local/httpd/bin\n    \n    #开启服务：\n    ./apachectl start\n    #或者 \n    service httpd start\n    #或者 \n    systemctl start httpd.service\n   \n    #查看运行状态\n    systemctl status httpd.service\n    \n    #查询80端口：\n    netstat -anlp | grep 80\n    \n    #打开浏览器输入虚拟机的IP地址如果页面显示 It works! , 则表示安装成功\n    ```\n## 3. rpm安装\n1. 下载rpm文件\n   ```text\n    http://repo.almalinux.org/almalinux/9/AppStream/x86_64/os/Packages/\n    ```\n2. 依次安装依赖包\n    ```shell\n    cd /var/www/html/yum/\n    \n    # 依次安装以下依赖包\n    rpm -ivh apr-1.4.8-3.el7.x86_64.rpm\n    rpm -ivh apr-util-1.5.2-6.el7.x86_64.rpm \n    rpm -ivh mailcap-2.1.41-2.el7.noarch.rpm \n    rpm -ivh httpd-tools-2.4.6-40.el7.centos.x86_64.rpm \n    rpm -ivh httpd-2.4.6-40.el7.centos.x86_64.rpm \n    rpm -ivh postgresql-libs-9.2.13-1.el7_1.x86_64.rpm      #（经测试，不需要）\n    ```\n\n3. 启动服务\n    ```shell\n    systemctl status httpd\n    systemctl start httpd\n    \n    systemctl enable httpd\n    systemctl is-enabled httpd\n    ```\n   \n4. 配置\n    ```shell\n    cd /etc/yum.repos.d/\n    mkdir bak\n    mv *.repo bak/\n    vim local.repo\n    ```\n   输入以下内容后保存\n    ```properties\n    [local_server]\n    name=This is a local repo\n    baseurl=http://192.168.1.161:80/yum/\n    enabled=1\n    gpgcheck=0\n    #gpgkey=0\n    ```\n   \n5. 创建yum仓库\n    ```shell\n    cd /var/www/html/yum/\n    createrepo ./        \n    # 使用createrepo命令创建yum仓库\n    # 注意:配置文件中路径指向到哪一层级，createrepo就在该路径的子目录下执行即可。\n    # 例: 路径在local.repo配置文件中指向/a/b/c，那么就\tcd /a/b/c   createrepo ./\n    ```\n   ![](./Apache-Http-Server/2.png)\n\n\n6. 清除缓存\n    ```shell\n    yum clean all\n    ```\n   \n7. 建立新缓存\n    ```shell\n    yum makecache\n    ```\n   ![](./Apache-Http-Server/3.png)\n\n\n8. 查看已建立好的缓存\n    ```shell\n    yum repolist\n    ```\n   ![](./Apache-Http-Server/4.png)\n\n\n9. 测试\n    ```shell\n    yum install -y sendmail        # 若可以安装，即已安装成功\n    ```\n\n\n## 4. yum安装\n1. 检查是否已经安装httpd\n   ```shell\n    rpm -qa httpd\n   ```\n2. 安装\n    ```shell\n    yum -y install httpd\n   \n   #如果提示： 没有可用软件包 httpd。\n   #国内各大源好像把httpd移除， 导致包根本找不到，可以试下下面的命令\n   # yum --disableexcludes=all install -y httpd\n    ```\n   \n3. 配置ServerName\n    ```shell\n    vim /etc/httpd/conf/httpd.conf\n    ```\n   则：ServerName localhost:80 或者 ServerName 127.0.0.1:80\n\n4. 启动\n    ```shell\n    service httpd start  #启动httpd\n    service httpd restart #重启httpd\n    chkconfig httpd on   #设置开机自动启动：\n    ```\n\n5. 测试\n    ```shell\n    touch /var/www/html/index.html\n   #输入以下内容\n    ```\n    ```html\n    <html>\n        <body>\n            Apache Http Server \n        </body>\n    </html>\n    ```\n   访问http://ip:port/hello.html，返回结果\"hello\" 说明没问题\n\n\n6. 安装目录说明\n    ```text\n    1.Apache默认将网站的根目录指向/var/www/html 目录\n    2.默认的主配置文件是/etc/httpd/conf/httpd.conf\n    3. 配置存储在的/etc/httpd/conf.d/目录\n    ```\n\n## 5. 常见问题\n1. AH00534\n    ```shell\n    vim /apps/httpd24/conf/httpd.cof\n    #加上： LoadModule mpm_prefork_module modules/mod_mpm_prefork.so\n    #重启\n    ```","source":"_posts/2022/05/Apache-Http-Server.md","raw":"---\ntitle: Linux安装Apache Http Server\ncomments: true\npassword: xiaoyuge\nabstract: 'Here''s something encrypted, password is required to continue reading.'\nmessage: 'Hey, password is required here.'\ntheme: xray\nwrong_pass_message: 'Oh, this is an invalid password. Check and try again, please.'\nwrong_hash_message: 'Oh, these decrypted content cannot be verified, but you can still have a look.'\ntags: Apache\ncategories: linux\nabbrlink: 13350\ndate: 2022-05-23 12:14:00\n---\n## 1. 前言\nApache Http Server又可以简称为httpd或者Apache，它是Internet使用最广泛的web服务器之一\n\nHttpd是Apache超文本传输协议（HTTP）服务器的主程序。被设计为一个独立运行的后台进程，它会建立一个处理请求的子进程或线程的池。\n通常，httpd不应该被直接调用，而应该在类Unix系统中由apachectl调用，在Windows中做为服务运行。\n \n**Httpd主要特点：**\n\n    （1）开放源代码\n    （2）跨平台使用，支持绝大多数硬件平台，支持所有的unix系统和linux系统，支持大多数windows平台\n    （3）支持多种web编程语言，perl，php，python，java等\n    （4）模块化设计，根据所需功能去安装不同的模块\n    （5）运行非常稳定，支持大负载访问的web站点\n    （6）安全性高，及时修复已发现的漏洞\n### 1.1 Httpd版本\n    \n主要介绍httpd的两大版本：\n- httpd-2.2\n- httpd-2.4\n\n官网链接：https://httpd.apache.org/\n### 1.2 Httpd特性\n- httpd-2.2 特性：\n    - 事先创建进程\n    - 按需维持适当的进程\n    - 模块化设计，核心比较小，各种功能通过模块添加(包括PHP)，支持运行时配置，支持单独编译模块\n    - 支持多种方式的虚拟主机配置，如基于ip的虚拟主机，基于端口的虚拟主机，基于域名的虚拟主机等\n    - 支持https协议(通过mod_ ssI模块实现)\n    - 支持用户认证\n    - 支持基于IP或域名的ACL访问控制机制\n    - 支持每目录的访问控制(用户访问默认主页时不需要提供用户名和密码，但是用户访问某特定目录时需要提供用户名和支持URL重写\n    - 支持MPM (Multi Path Modules,多处理模块)。用于定义httpd的工作模型(单进程、 单进程多线程、多进程、多进程单线程、多进程多线程）\n- httpd-2.4 特性：\n    - MPM支持运行DSO机制(Dynamic Share Object,模块的动态装/卸载机制)，以模块形式按需加载\n    - 支持event MPM, event MPM模块生产环境可用\n    - 支持异步读写\n    - 支持每个模块及每个目录分别使用各自的日志级别\n    - 每个请求相关的专业配置，使用来配置\n    - 增强版的表达式分析器\n    - 支持毫秒级的keepalive timeout\n    - 基于FQDN的虚拟主机不再需要Name Virtual Host指令\n    - 支持用户自定义变量\n    - 支持新的指令(Allow Override List)\n    - 降低对内存的消耗\n    \n### 1.3 httpd自带的工具\n![](./Apache-Http-Server/1.png)\n## 2. 源码安装\n1. 下载安装包\n    ```text\n    链接: https://pan.baidu.com/s/1ip-3yUhY1XYdkD8KejgQkQ \n    提取码: bcub\n   \n    #第二种：\n    http://archive.apache.org/dist/apr/apr-1.7.0.tar.gz\n    http://archive.apache.org/dist/apr/apr-util-1.6.1.tar.gz\n    https://nchc.dl.sourceforge.net/project/pcre/pcre/8.45/pcre-8.45.zip\n   ```\n2. 上传安装包到服务器目录\n3. 配置依赖环境\n   1. 配置apr依赖\n        ```shell\n        #解压\n        tar -xf apr-1.7.0.tar.gz\n       \n        #进入到目录\n        cd apr-1.7.0\n       \n       #配置(设置安装在/usr/local/apr)\n       ./configure --prefix=./configure --prefix=/usr/local/apr\n    \n        #编译并安装\n        make && make install\n       ```\n\n   2. 配置apr-util依赖\n        ```shell\n        #解压\n       tar -xf apr-util-1.6.1.tar.gz\n    \n        #进入到目录\n        cd apr-util-1.6.1/\n    \n        #配置(设置安装在/usr/local/apr-util)\n        ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr\n    \n        #编译并安装\n        make && make install\n       ```\n\n   3. 配置pcre依赖\n        ```shell\n        #解压\n        tar -xf pcre-8.44.tar.bz2\n        \n        #进入到目录\n        cd pcre-8.44/\n        \n        #配置(设置安装在/usr/local/pcre)\n        ./configure --prefix=/usr/local/pcre\n        \n        #编译并安装\n        make && make install\n        ```\n\n    4. 配置安装httpd\n        ```shell\n        #解压\n        tar -xf httpd-2.4.53.tar.gz\n        \n        #进入到目录\n        cd httpd-2.4.53/\n        \n        #配置(设置安装在/usr/local/httpd)\n        ./configure --prefix=/usr/local/httpd --with-pcre=/usr/local/pcre --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util\n        \n        #编译并安装：\n        make && make install\n        ```\n    5. 配置环境变量\n        ```shell\n        echo 'PATH=/usr/local/httpd/bin:$PATH' > /etc/profile.d/httpd.sh && . /etc/profile.d/httpd.sh\n        ```\n4. 添加Httpd服务\n   1. 复制到init.d 并重命名为httpd\n        ```shell\n        cp /apps/httpd24/bin/apachectl  /etc/rc.d/init.d/httpd\n        ```\n      \n   2. 建立软连接，通过service命令启动/关闭\n        ```shell\n        #链接文件的S61是启动时的序号。当init.d目录下有httpd脚本后，我们就可以通过service命令来启动关闭apache了\n        ln -s /etc/rc.d/init.d/httpd  /etc/rc.d/rc3.d/S61httpd\n       ```\n   3. 编辑httpd脚本，\n      - 在第2行(#!/bin/sh下面)添加如下注释信息（包括#）：\n        ```shell\n        # chkconfig: 2345 85 15\n        # description: Apache\n        ```\n        第一行的3个参数意义分别为：在哪些运行级别启动httpd（3，5）；启动序号（S61）；关闭序号（K61）。注意：第二行的描述必须要写！\n      - 通过搜索ServerName（先Esc，在输入:/ServerName） 打开ServerName这一行注释\n           ```shell\n           #\n           # ServerName gives the name and port that the server uses to identify itself.\n           # This can often be determined automatically, but we recommend you specify\n           # it explicitly to prevent problems during startup.\n           #\n           # If your host doesn't have a registered DNS name, enter its IP address here.\n           #\n           ServerName localhost:80\n           ```\n    \n    4. 所有开机模式下自启动\n      ```shell\n      #所有开机模式下自启动，另外chkconfig httpd on 表示345模式下自启动\n      chkconfig --add httpd\n    ```\n    \n5. 启动服务\n   ```shell\n    #到bin目录开启服务\n    cd /usr/local/httpd/bin\n    \n    #开启服务：\n    ./apachectl start\n    #或者 \n    service httpd start\n    #或者 \n    systemctl start httpd.service\n   \n    #查看运行状态\n    systemctl status httpd.service\n    \n    #查询80端口：\n    netstat -anlp | grep 80\n    \n    #打开浏览器输入虚拟机的IP地址如果页面显示 It works! , 则表示安装成功\n    ```\n## 3. rpm安装\n1. 下载rpm文件\n   ```text\n    http://repo.almalinux.org/almalinux/9/AppStream/x86_64/os/Packages/\n    ```\n2. 依次安装依赖包\n    ```shell\n    cd /var/www/html/yum/\n    \n    # 依次安装以下依赖包\n    rpm -ivh apr-1.4.8-3.el7.x86_64.rpm\n    rpm -ivh apr-util-1.5.2-6.el7.x86_64.rpm \n    rpm -ivh mailcap-2.1.41-2.el7.noarch.rpm \n    rpm -ivh httpd-tools-2.4.6-40.el7.centos.x86_64.rpm \n    rpm -ivh httpd-2.4.6-40.el7.centos.x86_64.rpm \n    rpm -ivh postgresql-libs-9.2.13-1.el7_1.x86_64.rpm      #（经测试，不需要）\n    ```\n\n3. 启动服务\n    ```shell\n    systemctl status httpd\n    systemctl start httpd\n    \n    systemctl enable httpd\n    systemctl is-enabled httpd\n    ```\n   \n4. 配置\n    ```shell\n    cd /etc/yum.repos.d/\n    mkdir bak\n    mv *.repo bak/\n    vim local.repo\n    ```\n   输入以下内容后保存\n    ```properties\n    [local_server]\n    name=This is a local repo\n    baseurl=http://192.168.1.161:80/yum/\n    enabled=1\n    gpgcheck=0\n    #gpgkey=0\n    ```\n   \n5. 创建yum仓库\n    ```shell\n    cd /var/www/html/yum/\n    createrepo ./        \n    # 使用createrepo命令创建yum仓库\n    # 注意:配置文件中路径指向到哪一层级，createrepo就在该路径的子目录下执行即可。\n    # 例: 路径在local.repo配置文件中指向/a/b/c，那么就\tcd /a/b/c   createrepo ./\n    ```\n   ![](./Apache-Http-Server/2.png)\n\n\n6. 清除缓存\n    ```shell\n    yum clean all\n    ```\n   \n7. 建立新缓存\n    ```shell\n    yum makecache\n    ```\n   ![](./Apache-Http-Server/3.png)\n\n\n8. 查看已建立好的缓存\n    ```shell\n    yum repolist\n    ```\n   ![](./Apache-Http-Server/4.png)\n\n\n9. 测试\n    ```shell\n    yum install -y sendmail        # 若可以安装，即已安装成功\n    ```\n\n\n## 4. yum安装\n1. 检查是否已经安装httpd\n   ```shell\n    rpm -qa httpd\n   ```\n2. 安装\n    ```shell\n    yum -y install httpd\n   \n   #如果提示： 没有可用软件包 httpd。\n   #国内各大源好像把httpd移除， 导致包根本找不到，可以试下下面的命令\n   # yum --disableexcludes=all install -y httpd\n    ```\n   \n3. 配置ServerName\n    ```shell\n    vim /etc/httpd/conf/httpd.conf\n    ```\n   则：ServerName localhost:80 或者 ServerName 127.0.0.1:80\n\n4. 启动\n    ```shell\n    service httpd start  #启动httpd\n    service httpd restart #重启httpd\n    chkconfig httpd on   #设置开机自动启动：\n    ```\n\n5. 测试\n    ```shell\n    touch /var/www/html/index.html\n   #输入以下内容\n    ```\n    ```html\n    <html>\n        <body>\n            Apache Http Server \n        </body>\n    </html>\n    ```\n   访问http://ip:port/hello.html，返回结果\"hello\" 说明没问题\n\n\n6. 安装目录说明\n    ```text\n    1.Apache默认将网站的根目录指向/var/www/html 目录\n    2.默认的主配置文件是/etc/httpd/conf/httpd.conf\n    3. 配置存储在的/etc/httpd/conf.d/目录\n    ```\n\n## 5. 常见问题\n1. AH00534\n    ```shell\n    vim /apps/httpd24/conf/httpd.cof\n    #加上： LoadModule mpm_prefork_module modules/mod_mpm_prefork.so\n    #重启\n    ```","slug":"Apache-Http-Server","published":1,"updated":"2022-05-24T14:46:34.323Z","layout":"post","photos":[],"link":"","_id":"cl424hx57000iad5i5v9p7xnl","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"Oh, these decrypted content cannot be verified, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"0ee433f786df810e569e64f977a7a3d92be900db6ca4f2458314156ef06925a4\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-xray\">\n      <input class=\"hbe hbe-input-field hbe-input-field-xray\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-xray\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-xray\">Hey, password is required here.</span>\n      </label>\n      <svg class=\"hbe hbe-graphic hbe-graphic-xray\" width=\"300%\" height=\"100%\" viewBox=\"0 0 1200 60\" preserveAspectRatio=\"none\">\n        <path d=\"M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0\"></path>\n        <path d=\"M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0\"></path>\n      </svg>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"Here's something encrypted, password is required to continue reading.","more":"Here's something encrypted, password is required to continue reading.","origin":"<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>Apache Http Server又可以简称为httpd或者Apache，它是Internet使用最广泛的web服务器之一</p>\n<p>Httpd是Apache超文本传输协议（HTTP）服务器的主程序。被设计为一个独立运行的后台进程，它会建立一个处理请求的子进程或线程的池。<br>通常，httpd不应该被直接调用，而应该在类Unix系统中由apachectl调用，在Windows中做为服务运行。</p>\n<p><strong>Httpd主要特点：</strong></p>\n<pre><code>（1）开放源代码\n（2）跨平台使用，支持绝大多数硬件平台，支持所有的unix系统和linux系统，支持大多数windows平台\n（3）支持多种web编程语言，perl，php，python，java等\n（4）模块化设计，根据所需功能去安装不同的模块\n（5）运行非常稳定，支持大负载访问的web站点\n（6）安全性高，及时修复已发现的漏洞\n</code></pre>\n<h3 id=\"1-1-Httpd版本\"><a href=\"#1-1-Httpd版本\" class=\"headerlink\" title=\"1.1 Httpd版本\"></a>1.1 Httpd版本</h3><p>主要介绍httpd的两大版本：</p>\n<ul>\n<li>httpd-2.2</li>\n<li>httpd-2.4</li>\n</ul>\n<p>官网链接：<a href=\"https://httpd.apache.org/\">https://httpd.apache.org/</a></p>\n<h3 id=\"1-2-Httpd特性\"><a href=\"#1-2-Httpd特性\" class=\"headerlink\" title=\"1.2 Httpd特性\"></a>1.2 Httpd特性</h3><ul>\n<li>httpd-2.2 特性：<ul>\n<li>事先创建进程</li>\n<li>按需维持适当的进程</li>\n<li>模块化设计，核心比较小，各种功能通过模块添加(包括PHP)，支持运行时配置，支持单独编译模块</li>\n<li>支持多种方式的虚拟主机配置，如基于ip的虚拟主机，基于端口的虚拟主机，基于域名的虚拟主机等</li>\n<li>支持https协议(通过mod_ ssI模块实现)</li>\n<li>支持用户认证</li>\n<li>支持基于IP或域名的ACL访问控制机制</li>\n<li>支持每目录的访问控制(用户访问默认主页时不需要提供用户名和密码，但是用户访问某特定目录时需要提供用户名和支持URL重写</li>\n<li>支持MPM (Multi Path Modules,多处理模块)。用于定义httpd的工作模型(单进程、 单进程多线程、多进程、多进程单线程、多进程多线程）</li>\n</ul>\n</li>\n<li>httpd-2.4 特性：<ul>\n<li>MPM支持运行DSO机制(Dynamic Share Object,模块的动态装/卸载机制)，以模块形式按需加载</li>\n<li>支持event MPM, event MPM模块生产环境可用</li>\n<li>支持异步读写</li>\n<li>支持每个模块及每个目录分别使用各自的日志级别</li>\n<li>每个请求相关的专业配置，使用来配置</li>\n<li>增强版的表达式分析器</li>\n<li>支持毫秒级的keepalive timeout</li>\n<li>基于FQDN的虚拟主机不再需要Name Virtual Host指令</li>\n<li>支持用户自定义变量</li>\n<li>支持新的指令(Allow Override List)</li>\n<li>降低对内存的消耗</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-httpd自带的工具\"><a href=\"#1-3-httpd自带的工具\" class=\"headerlink\" title=\"1.3 httpd自带的工具\"></a>1.3 httpd自带的工具</h3><p><img src=\"/Apache-Http-Server/1.png\"></p>\n<h2 id=\"2-源码安装\"><a href=\"#2-源码安装\" class=\"headerlink\" title=\"2. 源码安装\"></a>2. 源码安装</h2><ol>\n<li><p>下载安装包</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">链接: https://pan.baidu.com/s/1ip-3yUhY1XYdkD8KejgQkQ </span><br><span class=\"line\">提取码: bcub</span><br><span class=\"line\">   </span><br><span class=\"line\">#第二种：</span><br><span class=\"line\">http://archive.apache.org/dist/apr/apr-1.7.0.tar.gz</span><br><span class=\"line\">http://archive.apache.org/dist/apr/apr-util-1.6.1.tar.gz</span><br><span class=\"line\">https://nchc.dl.sourceforge.net/project/pcre/pcre/8.45/pcre-8.45.zip</span><br></pre></td></tr></table></figure></li>\n<li><p>上传安装包到服务器目录</p>\n</li>\n<li><p>配置依赖环境</p>\n<ol>\n<li><p>配置apr依赖</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">解压</span></span><br><span class=\"line\"> tar -xf apr-1.7.0.tar.gz</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">进入到目录</span></span><br><span class=\"line\"> cd apr-1.7.0</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置(设置安装在/usr/<span class=\"built_in\">local</span>/apr)</span></span><br><span class=\"line\">./configure --prefix=./configure --prefix=/usr/local/apr</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">编译并安装</span></span><br><span class=\"line\"> make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li>\n<li><p>配置apr-util依赖</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">解压</span></span><br><span class=\"line\">tar -xf apr-util-1.6.1.tar.gz</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">进入到目录</span></span><br><span class=\"line\"> cd apr-util-1.6.1/</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">配置(设置安装在/usr/<span class=\"built_in\">local</span>/apr-util)</span></span><br><span class=\"line\"> ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">编译并安装</span></span><br><span class=\"line\"> make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li>\n<li><p>配置pcre依赖</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">解压</span></span><br><span class=\"line\">tar -xf pcre-8.44.tar.bz2</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">进入到目录</span></span><br><span class=\"line\">cd pcre-8.44/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置(设置安装在/usr/<span class=\"built_in\">local</span>/pcre)</span></span><br><span class=\"line\">./configure --prefix=/usr/local/pcre</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">编译并安装</span></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li>\n<li><p>配置安装httpd</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">解压</span></span><br><span class=\"line\">tar -xf httpd-2.4.53.tar.gz</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">进入到目录</span></span><br><span class=\"line\">cd httpd-2.4.53/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置(设置安装在/usr/<span class=\"built_in\">local</span>/httpd)</span></span><br><span class=\"line\">./configure --prefix=/usr/local/httpd --with-pcre=/usr/local/pcre --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">编译并安装：</span></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li>\n<li><p>配置环境变量</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;PATH=/usr/local/httpd/bin:$PATH&#x27; &gt; /etc/profile.d/httpd.sh &amp;&amp; . /etc/profile.d/httpd.sh</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>添加Httpd服务</p>\n<ol>\n<li>复制到init.d 并重命名为httpd  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /apps/httpd24/bin/apachectl  /etc/rc.d/init.d/httpd</span><br></pre></td></tr></table></figure></li>\n<li>建立软连接，通过service命令启动/关闭  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">链接文件的S61是启动时的序号。当init.d目录下有httpd脚本后，我们就可以通过service命令来启动关闭apache了</span></span><br><span class=\"line\">ln -s /etc/rc.d/init.d/httpd  /etc/rc.d/rc3.d/S61httpd</span><br></pre></td></tr></table></figure></li>\n<li>编辑httpd脚本，<ul>\n<li>在第2行(#!/bin/sh下面)添加如下注释信息（包括#）：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> chkconfig: 2345 85 15</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> description: Apache</span></span><br></pre></td></tr></table></figure>\n第一行的3个参数意义分别为：在哪些运行级别启动httpd（3，5）；启动序号（S61）；关闭序号（K61）。注意：第二行的描述必须要写！</li>\n<li>通过搜索ServerName（先Esc，在输入:/ServerName） 打开ServerName这一行注释   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># ServerName gives the name and port that the server uses to identify itself.</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> This can often be determined automatically, but we recommend you specify</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> it explicitly to prevent problems during startup.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># If your host doesn&#x27;t have a registered DNS name, enter its IP address here.</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\">ServerName localhost:80</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>所有开机模式下自启动<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">所有开机模式下自启动，另外chkconfig httpd on 表示345模式下自启动</span></span><br><span class=\"line\">chkconfig --add httpd</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>启动服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">到bin目录开启服务</span></span><br><span class=\"line\">cd /usr/local/httpd/bin</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开启服务：</span></span><br><span class=\"line\">./apachectl start</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者</span> </span><br><span class=\"line\">service httpd start</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者</span> </span><br><span class=\"line\">systemctl start httpd.service</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看运行状态</span></span><br><span class=\"line\">systemctl status httpd.service</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查询80端口：</span></span><br><span class=\"line\">netstat -anlp | grep 80</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">打开浏览器输入虚拟机的IP地址如果页面显示 It works! , 则表示安装成功</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-rpm安装\"><a href=\"#3-rpm安装\" class=\"headerlink\" title=\"3. rpm安装\"></a>3. rpm安装</h2></li>\n<li><p>下载rpm文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://repo.almalinux.org/almalinux/9/AppStream/x86_64/os/Packages/</span><br></pre></td></tr></table></figure></li>\n<li><p>依次安装依赖包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /var/www/html/yum/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 依次安装以下依赖包</span></span><br><span class=\"line\">rpm -ivh apr-1.4.8-3.el7.x86_64.rpm</span><br><span class=\"line\">rpm -ivh apr-util-1.5.2-6.el7.x86_64.rpm </span><br><span class=\"line\">rpm -ivh mailcap-2.1.41-2.el7.noarch.rpm </span><br><span class=\"line\">rpm -ivh httpd-tools-2.4.6-40.el7.centos.x86_64.rpm </span><br><span class=\"line\">rpm -ivh httpd-2.4.6-40.el7.centos.x86_64.rpm </span><br><span class=\"line\">rpm -ivh postgresql-libs-9.2.13-1.el7_1.x86_64.rpm      #（经测试，不需要）</span><br></pre></td></tr></table></figure></li>\n<li><p>启动服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status httpd</span><br><span class=\"line\">systemctl start httpd</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl enable httpd</span><br><span class=\"line\">systemctl is-enabled httpd</span><br></pre></td></tr></table></figure></li>\n<li><p>配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/yum.repos.d/</span><br><span class=\"line\">mkdir bak</span><br><span class=\"line\">mv *.repo bak/</span><br><span class=\"line\">vim local.repo</span><br></pre></td></tr></table></figure>\n<p>输入以下内容后保存</p>\n <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">[local_server]</span></span><br><span class=\"line\"><span class=\"attr\">name</span>=<span class=\"string\">This is a local repo</span></span><br><span class=\"line\"><span class=\"attr\">baseurl</span>=<span class=\"string\">http://192.168.1.161:80/yum/</span></span><br><span class=\"line\"><span class=\"attr\">enabled</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">gpgcheck</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"comment\">#gpgkey=0</span></span><br></pre></td></tr></table></figure></li>\n<li><p>创建yum仓库</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /var/www/html/yum/</span><br><span class=\"line\">createrepo ./        </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用createrepo命令创建yum仓库</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 注意:配置文件中路径指向到哪一层级，createrepo就在该路径的子目录下执行即可。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 例: 路径在local.repo配置文件中指向/a/b/c，那么就\t<span class=\"built_in\">cd</span> /a/b/c   createrepo ./</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/Apache-Http-Server/2.png\"></p>\n</li>\n</ol>\n<ol start=\"6\">\n<li>清除缓存 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum clean all</span><br></pre></td></tr></table></figure></li>\n<li>建立新缓存 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure>\n<img src=\"/Apache-Http-Server/3.png\"></li>\n</ol>\n<ol start=\"8\">\n<li>查看已建立好的缓存 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum repolist</span><br></pre></td></tr></table></figure>\n<img src=\"/Apache-Http-Server/4.png\"></li>\n</ol>\n<ol start=\"9\">\n<li>测试 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y sendmail        # 若可以安装，即已安装成功</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"4-yum安装\"><a href=\"#4-yum安装\" class=\"headerlink\" title=\"4. yum安装\"></a>4. yum安装</h2><ol>\n<li><p>检查是否已经安装httpd</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa httpd</span><br></pre></td></tr></table></figure></li>\n<li><p>安装</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> yum -y install httpd</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果提示： 没有可用软件包 httpd。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">国内各大源好像把httpd移除， 导致包根本找不到，可以试下下面的命令</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum --disableexcludes=all install -y httpd</span></span><br></pre></td></tr></table></figure></li>\n<li><p>配置ServerName</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure>\n<p>则：ServerName localhost:80 或者 ServerName 127.0.0.1:80</p>\n</li>\n<li><p>启动</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service httpd start  #启动httpd</span><br><span class=\"line\">service httpd restart #重启httpd</span><br><span class=\"line\">chkconfig httpd on   #设置开机自动启动：</span><br></pre></td></tr></table></figure></li>\n<li><p>测试</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> touch /var/www/html/index.html</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">输入以下内容</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        Apache Http Server </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>访问<a href=\"http://ip:port/hello.html，返回结果&quot;hello&quot;\">http://ip:port/hello.html，返回结果&quot;hello&quot;</a> 说明没问题</p>\n</li>\n</ol>\n<ol start=\"6\">\n<li>安装目录说明 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Apache默认将网站的根目录指向/var/www/html 目录</span><br><span class=\"line\">2.默认的主配置文件是/etc/httpd/conf/httpd.conf</span><br><span class=\"line\">3. 配置存储在的/etc/httpd/conf.d/目录</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"5-常见问题\"><a href=\"#5-常见问题\" class=\"headerlink\" title=\"5. 常见问题\"></a>5. 常见问题</h2><ol>\n<li>AH00534 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /apps/httpd24/conf/httpd.cof</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">加上： LoadModule mpm_prefork_module modules/mod_mpm_prefork.so</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","encrypt":true},{"title":"设计模式 - 七大软件设计原则","comments":1,"password":"xiaoyuge","abstract":"Here's something encrypted, password is required to continue reading.","message":"Hey, password is required here.","theme":"xray","wrong_pass_message":"Oh, this is an invalid password. Check and try again, please.","wrong_hash_message":"Oh, these decrypted content cannot be verified, but you can still have a look.","abbrlink":15577,"date":"2022-05-11T06:39:16.000Z","_content":"\n## 1. 开闭原则(Open-Closed Principle)\n\n    开闭原则是指一个软件实体如类、模块和函数应对扩展开放，对修改关闭；所谓开闭，也正是对扩展和修改两个行为的一个原则，强调的是用抽象构建框架，用实现扩展细节，\n    可以提高软件系统可复用性以及可维护性。开闭原则，是面向对象设计中最基础的设计原则，它直到我们如何建立稳定灵活的系统，例如：版本更新，尽可能不修改原来的代码，但是可以新增功能。\n\n**实现开闭原则的核心思想就是面向抽象**\n\n```java\n/**\n * 书本接口\n */\npublic interface IBook {\n    Integer getId();\n\n    String getName();\n\n    Double getPrice();\n}\n\n/**\n * 书本包括java学习书、大数据、前端等\n */\npublic class JavaBook implements IBook {\n    private Integer id;\n    private String name;\n    private Double price;\n\n    public JavaBook(Integer id, String name, Double price) {\n        this.id = id;\n        this.name = name;\n        this.price = price;\n    }\n\n    public Integer getId() {\n        return this.id;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public Double getPrice() {\n        return this.price;\n    }\n}\n```\n\n现在要给Java课程做活动，价格优惠，如果修改JavaBook中的getPrice()方法，则会影响到其他地方的调用结果\n\n```java\n/**\n * 新增加一个处理优惠逻辑的类，在这个地方处理\n */\npublic class JavaDiscountBook extends JavaBook {\n    public JavaDiscountBook(Integer id, String name, Double price) {\n        super(id, name, price);\n    }\n\n    public Double getOriginPrice() {\n        return super.getPrice();\n    }\n\n    public Double getPrice() {\n        return super.getPrice() * 0.8;\n    }\n}\n```\n类结构图如下：\n![开闭原则](./design-principle/1.png)\n\n## 2. 依赖倒置(Dependence Inversion Principle)\n    依赖倒置原则（DIP）是指设计代码结构时，高层模块不应该依赖底层模块，二者都应该依赖其抽象。抽象不应该依赖细节；细节应该依赖抽象。\n    通过依赖倒置，可以减少类与类之间的耦合性，提供系统的稳定性，提高代码的可读性和可维护性，并能够降低修改程序所造成的风险。\n\n**细节依赖抽象，抽象不能依赖细节**\n```java\npublic class Boy {\n    public void buyJavaBook(){\n        System.out.println(\"购买java书本\");\n    }\n    public void buyPythonBook(){\n        System.out.println(\"购买python书本\");\n    }\n}\nclass Test{\n    public static void main(String[] args) {\n        Boy boy = new Boy();\n        boy.buyJavaBook();\n        boy.buyPythonBook();\n    }\n}\n```\n如果Boy 还想买Spring的书本，我们的代码要从底层到高层（调用层）修改代码，需要在Boy类中增加buySpringBook()方法，在调用层也要追加调用代码；\n如此依赖，系统发布后，实际上是非常不稳定的，在修改代码的同时也会带来意想不到的风险；\n\n接下来优化代码：\n```java\n/**\n * 书本抽象类\n */\npublic interface IBook{\n    void buy();\n}\n```\n然后写实现类\n```java\npublic class JavaBook implements IBook{\n    @Override \n    public void buy() { System.out.println(\"购买Java书本\"); }\n}\npublic class PythonBook implements IBook{\n    @Override\n    public void buy() { System.out.println(\"购买python\"); }\n}\n```\n再修改调用类\n```java\npublic class Boy{\n    public void buy(IBook book){\n        book.buy();\n    }\n}\n//测试方法\nclass TestBoy{\n    public static void main(String[] args) {\n        Boy boy = new Boy();\n        boy.buy(new JavaBook());\n        boy.buy(new PythonBook());\n        //这个时候无论再买什么书本，只需要新建一个类，通过传参的方式告诉 Boy，而不需要修改底层代码\n    }\n}\n```\n这实际上是大家熟悉的方式叫依赖注入。注入的方式还有构造器方式和setter方式；\n1. 构造器注入\n    ```java\n    /**\n     * 使用构造器注入\n     */\n    public class Boy { \n        private IBook book; \n        public Tom(IBook book){ this.book = book; }\n        public void buy(){ book.buy(); } \n    }\n    class TestBoy{\n        public static void main(String[] args) {\n            //构造器方式注入，在调用时每次都要创建实例。如果Boy是全局但李，则我们只能选择setter方式\n            Boy boy = new Boy(new JavaCourse());\n        }\n    }\n    ```\n   \n2. Setter注入\n    ```java\n    /**\n     * Setter注入\n     */\n    public class Boy { \n        private IBook book; \n        public void setBook(IBook book){\n            this.book = book;\n        }    \n        public void buy(){ book.buy(); } \n    }\n    class TestBoy{\n        public static void main(String[] args) { \n            Boy boy = new Boy();\n            boy.setBook(new JavaBook());\n            boy.buy();\n   \n            boy.setBook(new PythonBook());\n            boy.buy();\n        }\n    }\n    ```\n   \n类图如下：\n![依赖倒置原则](./design-principle/2.png)\n\n**以抽象为基准比以细节为基准搭建起来的架构要稳定得多，要面向接口编程，先顶层再细节来设计代码结构**\n\n## 3. 单一职责原则(Simple Responsibility Pinciple)\n      单一职责（SRP）是指不要存在多于一个导致类变更的原因，假设我们有个一个class负责两个职责，一旦发生需求变更，修改其中一个职责的逻辑代码，有可能会导致另一个职责的功能发生故障，这样、、\n      这样依赖，这个class 存在两个导致类变更的原因。我们需要给两个职责分别用两个class来实现，进行解耦。后期需求变更互不影响，这样的设计，可以降低类的复杂度，提高类的可读性，提高系统的可维护行，降低变更引起\n      的风险，总体来说，就是一个class/interface/method只负责一项职责\n\n```java\npublic class Book{\n    public void buy(String bookName){\n        if(\"新华字典\".equals(bookName)){\n            System.out.println(\"只能购买\");\n        }else{\n           System.out.println(\"可以租赁\");\n        }\n    }\n}\n\nclass TestBook{\n   public static void main(String[] args) {\n      Book book = new Book();\n      book.buy(\"新华字典\");\n      book.buy(\"中国历史\");\n   }\n}\n```\n从上面的代码来看，Book类承担类两种处理逻辑，假如我们需要对书本降价销售，新华字典和其他的书本降价方式不一致，那么就必须要修改代码，而修改代码势必会相互影响容易造成不可控的风险。\npublic \n","source":"_posts/2022/05/design-principle.md","raw":"---\ntitle: 设计模式 - 七大软件设计原则 \ncomments: true \npassword: xiaoyuge \nabstract: 'Here''s something encrypted, password is required to continue reading.' \nmessage: 'Hey, password is required here.' theme: xray \nwrong_pass_message: 'Oh, this is an invalid password. Check and try again, please.' \nwrong_hash_message: 'Oh, these decrypted content cannot be verified, but you can still have a look.' \ntags: 设计模式 \ncategories: 架构师笔记 \nabbrlink: 15577 \ndate: 2022-05-11 14:39:16\n---\n\n## 1. 开闭原则(Open-Closed Principle)\n\n    开闭原则是指一个软件实体如类、模块和函数应对扩展开放，对修改关闭；所谓开闭，也正是对扩展和修改两个行为的一个原则，强调的是用抽象构建框架，用实现扩展细节，\n    可以提高软件系统可复用性以及可维护性。开闭原则，是面向对象设计中最基础的设计原则，它直到我们如何建立稳定灵活的系统，例如：版本更新，尽可能不修改原来的代码，但是可以新增功能。\n\n**实现开闭原则的核心思想就是面向抽象**\n\n```java\n/**\n * 书本接口\n */\npublic interface IBook {\n    Integer getId();\n\n    String getName();\n\n    Double getPrice();\n}\n\n/**\n * 书本包括java学习书、大数据、前端等\n */\npublic class JavaBook implements IBook {\n    private Integer id;\n    private String name;\n    private Double price;\n\n    public JavaBook(Integer id, String name, Double price) {\n        this.id = id;\n        this.name = name;\n        this.price = price;\n    }\n\n    public Integer getId() {\n        return this.id;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public Double getPrice() {\n        return this.price;\n    }\n}\n```\n\n现在要给Java课程做活动，价格优惠，如果修改JavaBook中的getPrice()方法，则会影响到其他地方的调用结果\n\n```java\n/**\n * 新增加一个处理优惠逻辑的类，在这个地方处理\n */\npublic class JavaDiscountBook extends JavaBook {\n    public JavaDiscountBook(Integer id, String name, Double price) {\n        super(id, name, price);\n    }\n\n    public Double getOriginPrice() {\n        return super.getPrice();\n    }\n\n    public Double getPrice() {\n        return super.getPrice() * 0.8;\n    }\n}\n```\n类结构图如下：\n![开闭原则](./design-principle/1.png)\n\n## 2. 依赖倒置(Dependence Inversion Principle)\n    依赖倒置原则（DIP）是指设计代码结构时，高层模块不应该依赖底层模块，二者都应该依赖其抽象。抽象不应该依赖细节；细节应该依赖抽象。\n    通过依赖倒置，可以减少类与类之间的耦合性，提供系统的稳定性，提高代码的可读性和可维护性，并能够降低修改程序所造成的风险。\n\n**细节依赖抽象，抽象不能依赖细节**\n```java\npublic class Boy {\n    public void buyJavaBook(){\n        System.out.println(\"购买java书本\");\n    }\n    public void buyPythonBook(){\n        System.out.println(\"购买python书本\");\n    }\n}\nclass Test{\n    public static void main(String[] args) {\n        Boy boy = new Boy();\n        boy.buyJavaBook();\n        boy.buyPythonBook();\n    }\n}\n```\n如果Boy 还想买Spring的书本，我们的代码要从底层到高层（调用层）修改代码，需要在Boy类中增加buySpringBook()方法，在调用层也要追加调用代码；\n如此依赖，系统发布后，实际上是非常不稳定的，在修改代码的同时也会带来意想不到的风险；\n\n接下来优化代码：\n```java\n/**\n * 书本抽象类\n */\npublic interface IBook{\n    void buy();\n}\n```\n然后写实现类\n```java\npublic class JavaBook implements IBook{\n    @Override \n    public void buy() { System.out.println(\"购买Java书本\"); }\n}\npublic class PythonBook implements IBook{\n    @Override\n    public void buy() { System.out.println(\"购买python\"); }\n}\n```\n再修改调用类\n```java\npublic class Boy{\n    public void buy(IBook book){\n        book.buy();\n    }\n}\n//测试方法\nclass TestBoy{\n    public static void main(String[] args) {\n        Boy boy = new Boy();\n        boy.buy(new JavaBook());\n        boy.buy(new PythonBook());\n        //这个时候无论再买什么书本，只需要新建一个类，通过传参的方式告诉 Boy，而不需要修改底层代码\n    }\n}\n```\n这实际上是大家熟悉的方式叫依赖注入。注入的方式还有构造器方式和setter方式；\n1. 构造器注入\n    ```java\n    /**\n     * 使用构造器注入\n     */\n    public class Boy { \n        private IBook book; \n        public Tom(IBook book){ this.book = book; }\n        public void buy(){ book.buy(); } \n    }\n    class TestBoy{\n        public static void main(String[] args) {\n            //构造器方式注入，在调用时每次都要创建实例。如果Boy是全局但李，则我们只能选择setter方式\n            Boy boy = new Boy(new JavaCourse());\n        }\n    }\n    ```\n   \n2. Setter注入\n    ```java\n    /**\n     * Setter注入\n     */\n    public class Boy { \n        private IBook book; \n        public void setBook(IBook book){\n            this.book = book;\n        }    \n        public void buy(){ book.buy(); } \n    }\n    class TestBoy{\n        public static void main(String[] args) { \n            Boy boy = new Boy();\n            boy.setBook(new JavaBook());\n            boy.buy();\n   \n            boy.setBook(new PythonBook());\n            boy.buy();\n        }\n    }\n    ```\n   \n类图如下：\n![依赖倒置原则](./design-principle/2.png)\n\n**以抽象为基准比以细节为基准搭建起来的架构要稳定得多，要面向接口编程，先顶层再细节来设计代码结构**\n\n## 3. 单一职责原则(Simple Responsibility Pinciple)\n      单一职责（SRP）是指不要存在多于一个导致类变更的原因，假设我们有个一个class负责两个职责，一旦发生需求变更，修改其中一个职责的逻辑代码，有可能会导致另一个职责的功能发生故障，这样、、\n      这样依赖，这个class 存在两个导致类变更的原因。我们需要给两个职责分别用两个class来实现，进行解耦。后期需求变更互不影响，这样的设计，可以降低类的复杂度，提高类的可读性，提高系统的可维护行，降低变更引起\n      的风险，总体来说，就是一个class/interface/method只负责一项职责\n\n```java\npublic class Book{\n    public void buy(String bookName){\n        if(\"新华字典\".equals(bookName)){\n            System.out.println(\"只能购买\");\n        }else{\n           System.out.println(\"可以租赁\");\n        }\n    }\n}\n\nclass TestBook{\n   public static void main(String[] args) {\n      Book book = new Book();\n      book.buy(\"新华字典\");\n      book.buy(\"中国历史\");\n   }\n}\n```\n从上面的代码来看，Book类承担类两种处理逻辑，假如我们需要对书本降价销售，新华字典和其他的书本降价方式不一致，那么就必须要修改代码，而修改代码势必会相互影响容易造成不可控的风险。\npublic \n","slug":"design-principle","published":1,"updated":"2022-05-22T03:48:03.288Z","layout":"post","photos":[],"link":"","_id":"cl424hx59000nad5ihi4w6whp","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"Oh, these decrypted content cannot be verified, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"73d735c716a8c4e431d8fbf44b7cdaedef41711ad74a2b20c0154561d17cca5a\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-xray\">\n      <input class=\"hbe hbe-input-field hbe-input-field-xray\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-xray\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-xray\">Hey, password is required here.</span>\n      </label>\n      <svg class=\"hbe hbe-graphic hbe-graphic-xray\" width=\"300%\" height=\"100%\" viewBox=\"0 0 1200 60\" preserveAspectRatio=\"none\">\n        <path d=\"M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0\"></path>\n        <path d=\"M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0\"></path>\n      </svg>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"Here's something encrypted, password is required to continue reading.","more":"Here's something encrypted, password is required to continue reading.","origin":"<h2 id=\"1-开闭原则-Open-Closed-Principle\"><a href=\"#1-开闭原则-Open-Closed-Principle\" class=\"headerlink\" title=\"1. 开闭原则(Open-Closed Principle)\"></a>1. 开闭原则(Open-Closed Principle)</h2><pre><code>开闭原则是指一个软件实体如类、模块和函数应对扩展开放，对修改关闭；所谓开闭，也正是对扩展和修改两个行为的一个原则，强调的是用抽象构建框架，用实现扩展细节，\n可以提高软件系统可复用性以及可维护性。开闭原则，是面向对象设计中最基础的设计原则，它直到我们如何建立稳定灵活的系统，例如：版本更新，尽可能不修改原来的代码，但是可以新增功能。\n</code></pre>\n<p><strong>实现开闭原则的核心思想就是面向抽象</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 书本接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBook</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Integer <span class=\"title\">getId</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Double <span class=\"title\">getPrice</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 书本包括java学习书、大数据、前端等</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaBook</span> <span class=\"keyword\">implements</span> <span class=\"title\">IBook</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Double price;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">JavaBook</span><span class=\"params\">(Integer id, String name, Double price)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Double <span class=\"title\">getPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在要给Java课程做活动，价格优惠，如果修改JavaBook中的getPrice()方法，则会影响到其他地方的调用结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 新增加一个处理优惠逻辑的类，在这个地方处理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaDiscountBook</span> <span class=\"keyword\">extends</span> <span class=\"title\">JavaBook</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">JavaDiscountBook</span><span class=\"params\">(Integer id, String name, Double price)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(id, name, price);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Double <span class=\"title\">getOriginPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getPrice();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Double <span class=\"title\">getPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getPrice() * <span class=\"number\">0.8</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类结构图如下：<br><img src=\"/design-principle/1.png\" alt=\"开闭原则\"></p>\n<h2 id=\"2-依赖倒置-Dependence-Inversion-Principle\"><a href=\"#2-依赖倒置-Dependence-Inversion-Principle\" class=\"headerlink\" title=\"2. 依赖倒置(Dependence Inversion Principle)\"></a>2. 依赖倒置(Dependence Inversion Principle)</h2><pre><code>依赖倒置原则（DIP）是指设计代码结构时，高层模块不应该依赖底层模块，二者都应该依赖其抽象。抽象不应该依赖细节；细节应该依赖抽象。\n通过依赖倒置，可以减少类与类之间的耦合性，提供系统的稳定性，提高代码的可读性和可维护性，并能够降低修改程序所造成的风险。\n</code></pre>\n<p><strong>细节依赖抽象，抽象不能依赖细节</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buyJavaBook</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;购买java书本&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buyPythonBook</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;购买python书本&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Boy boy = <span class=\"keyword\">new</span> Boy();</span><br><span class=\"line\">        boy.buyJavaBook();</span><br><span class=\"line\">        boy.buyPythonBook();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果Boy 还想买Spring的书本，我们的代码要从底层到高层（调用层）修改代码，需要在Boy类中增加buySpringBook()方法，在调用层也要追加调用代码；<br>如此依赖，系统发布后，实际上是非常不稳定的，在修改代码的同时也会带来意想不到的风险；</p>\n<p>接下来优化代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 书本抽象类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBook</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buy</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后写实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaBook</span> <span class=\"keyword\">implements</span> <span class=\"title\">IBook</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buy</span><span class=\"params\">()</span> </span>&#123; System.out.println(<span class=\"string\">&quot;购买Java书本&quot;</span>); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PythonBook</span> <span class=\"keyword\">implements</span> <span class=\"title\">IBook</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buy</span><span class=\"params\">()</span> </span>&#123; System.out.println(<span class=\"string\">&quot;购买python&quot;</span>); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再修改调用类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boy</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buy</span><span class=\"params\">(IBook book)</span></span>&#123;</span><br><span class=\"line\">        book.buy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBoy</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Boy boy = <span class=\"keyword\">new</span> Boy();</span><br><span class=\"line\">        boy.buy(<span class=\"keyword\">new</span> JavaBook());</span><br><span class=\"line\">        boy.buy(<span class=\"keyword\">new</span> PythonBook());</span><br><span class=\"line\">        <span class=\"comment\">//这个时候无论再买什么书本，只需要新建一个类，通过传参的方式告诉 Boy，而不需要修改底层代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这实际上是大家熟悉的方式叫依赖注入。注入的方式还有构造器方式和setter方式；</p>\n<ol>\n<li>构造器注入 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用构造器注入</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boy</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">private</span> IBook book; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tom</span><span class=\"params\">(IBook book)</span></span>&#123; <span class=\"keyword\">this</span>.book = book; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buy</span><span class=\"params\">()</span></span>&#123; book.buy(); &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBoy</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//构造器方式注入，在调用时每次都要创建实例。如果Boy是全局但李，则我们只能选择setter方式</span></span><br><span class=\"line\">        Boy boy = <span class=\"keyword\">new</span> Boy(<span class=\"keyword\">new</span> JavaCourse());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>Setter注入 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Setter注入</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boy</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">private</span> IBook book; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBook</span><span class=\"params\">(IBook book)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.book = book;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buy</span><span class=\"params\">()</span></span>&#123; book.buy(); &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBoy</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">        Boy boy = <span class=\"keyword\">new</span> Boy();</span><br><span class=\"line\">        boy.setBook(<span class=\"keyword\">new</span> JavaBook());</span><br><span class=\"line\">        boy.buy();</span><br><span class=\"line\">   </span><br><span class=\"line\">        boy.setBook(<span class=\"keyword\">new</span> PythonBook());</span><br><span class=\"line\">        boy.buy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>类图如下：<br><img src=\"/design-principle/2.png\" alt=\"依赖倒置原则\"></p>\n<p><strong>以抽象为基准比以细节为基准搭建起来的架构要稳定得多，要面向接口编程，先顶层再细节来设计代码结构</strong></p>\n<h2 id=\"3-单一职责原则-Simple-Responsibility-Pinciple\"><a href=\"#3-单一职责原则-Simple-Responsibility-Pinciple\" class=\"headerlink\" title=\"3. 单一职责原则(Simple Responsibility Pinciple)\"></a>3. 单一职责原则(Simple Responsibility Pinciple)</h2><pre><code>  单一职责（SRP）是指不要存在多于一个导致类变更的原因，假设我们有个一个class负责两个职责，一旦发生需求变更，修改其中一个职责的逻辑代码，有可能会导致另一个职责的功能发生故障，这样、、\n  这样依赖，这个class 存在两个导致类变更的原因。我们需要给两个职责分别用两个class来实现，进行解耦。后期需求变更互不影响，这样的设计，可以降低类的复杂度，提高类的可读性，提高系统的可维护行，降低变更引起\n  的风险，总体来说，就是一个class/interface/method只负责一项职责\n</code></pre>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buy</span><span class=\"params\">(String bookName)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;新华字典&quot;</span>.equals(bookName))&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;只能购买&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;可以租赁&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBook</span></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Book book = <span class=\"keyword\">new</span> Book();</span><br><span class=\"line\">      book.buy(<span class=\"string\">&quot;新华字典&quot;</span>);</span><br><span class=\"line\">      book.buy(<span class=\"string\">&quot;中国历史&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的代码来看，Book类承担类两种处理逻辑，假如我们需要对书本降价销售，新华字典和其他的书本降价方式不一致，那么就必须要修改代码，而修改代码势必会相互影响容易造成不可控的风险。<br>public </p>\n","encrypt":true},{"title":"Linux安装gitlab","comments":1,"theme":"xray","abbrlink":48216,"date":"2022-05-28T01:56:42.000Z","_content":"### 1. 前言\n 以前在自己服务器使用的是Gitblit,官网地址：http://gitblit.github.io/gitblit,  这个只需要在服务器上启动一个tomcat,然后将下载的Gitblit的war包放置在tomcat容器里面运行即可访问。\n\n但是由于gitblit没有CI/CD的功能，于是自己就在网上找了一些博客搭建gitblit，在这里记录一下搭建的过程。\n\n### 2. 安装步骤\n1. 配置yum源\n    ```shell\n    vim /etc/yum.repos.d/gitlab-ce.repo\n    ```\n   \n2. 增加一下配置\n    ```properties\n    [gitlab-ce]\n    name=Gitlab CE Repository\n    baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/\n    gpgcheck=0\n    enabled=1\n    ```\n    ![](./gitlab/1.png)\n\n3. 更新本地yum缓存\n    ```shell\n    yum makecache\n    ```\n   \n4. 安装GitLab社区版\n    ```shell\n    yum install gitlab-ce                    #自动安装最新版本\n   \n    sudo yum install gitlab-ce-x.x.x         #安装指定版本\n    ```\n   \n5. 更改默认端口配置(默认为80端口)    \n    ```shell\n    sudo vim /etc/gitlab/gitlab.rb\n    ```\n   修改如下配置：\n    ```text\n    external_url 'http://ip:8888'              #填写自己的主机ip\n    puma['port'] = 8888                       #如果gitlab是13版本之前请求修改  union['port']=8888\n    nginx['listen_port'] = 8888\n    ```\n    \n6. 配置gitlab-http.conf \n    ```shell\n    sudo vim /var/opt/gitlab/nginx/conf/gitlab-http.conf\n    ```\n    修改如下：\n    ```text\n    server {\n        listen *:8888;                   #和上面保持一致\n        server_name ip                   #填写自己的ip\n    }\n    ```\n   \n7. 放开端口\n    ```shell\n    #开放8888端口\n    sudo firewall-cmd --add-port=8888/tcp --permanent\n    \n    #重新加载防火墙\n    sudo firewall-cmd --reload\n    ```\n   \n8. 修改配置后重新加载配置文件\n    ```shell\n    sudo gitlab-ctl reconfigure\n    ```\n   \n9. 重新gitlab\n    ```shell\n    sudo gitlab-ctl restart\n    ```\n   ![启动gitlab](./gitlab/2.png)\n\n10. 修改管理员登录密码\n    - 进入gitlab-rails控制台\n        ```shell\n        sudo gitlab-rails console\n        ```\n    - 查找root账号(默认只有一个root用户)\n        ```shell\n        u=User.where(id:1).first\n        ```\n    - 修改密码\n      ```shell\n      u.password='xiaoyuge123'\n      ```\n    - 再次确认密码\n      ```shell\n      u.password_confirmation='xiaoyuge123'\n      ```\n    - 保存\n        ```shell\n        u.save!\n        ```\n      \n    \n11. 浏览器访问：http://ip:8888\n    ![gitlab登录界面](./gitlab/3.png)\n    至此，Gitlab搭建完毕！\n\n\n### 3. GitLab常用命令\n```shell\nsudo gitlab-ctl start    # 启动所有 gitlab 组件；\nsudo gitlab-ctl stop        # 停止所有 gitlab 组件；\nsudo gitlab-ctl restart        # 重启所有 gitlab 组件；\nsudo gitlab-ctl status        # 查看服务状态；\nsudo gitlab-ctl reconfigure        # 启动服务；\nsudo vim /etc/gitlab/gitlab.rb        # 修改默认的配置文件；\ngitlab-rake gitlab:check SANITIZE=true --trace    # 检查gitlab；\nsudo gitlab-ctl tail        # 查看日志；\ngitlab-ctl show-config           #查看gitlab配置信息\n```\n\n### 4. 邮件配置\n1. 修改配置\n    ```shell\n    sudo vim /etc/gitlab/gitlab.rb\n    ```\n    新增以下内容\n    ```properties\n    gitlab_rails['smtp_enable'] = true\n    gitlab_rails['smtp_address'] = \"mail.midea.com\"\n    gitlab_rails['smtp_port'] = 994\n    gitlab_rails['smtp_user_name'] = \"发信邮箱\"\n    gitlab_rails['smtp_password'] = \"发信邮箱密码\"\n    gitlab_rails['smtp_domain'] = \"xxx.com\"\n    gitlab_rails['smtp_authentication'] = \"login\"\n    gitlab_rails['smtp_enable_starttls_auto'] = true\n    gitlab_rails['smtp_tls'] = true\n    user['git_user_email'] = \"发信邮箱\"\n    gitlab_rails['gitlab_email_from'] = '发信邮箱'\n    ```\n   \n2. 测试邮件配置是否生效\n    ```shell\n    #重新加载配置文件\n    sudo gitlab-ctl reconfigure\n   \n    #查看console\n    sudo gitlab-rails console\n    ```\n    ```shell\n    --------------------------------------------------------------------------------\n    Ruby: ruby 2.7.2p137 (2020-10-01 revision 5445e04352) [x86_64-linux]\n    GitLab: 13.7.1 (c97c8073a0e) FOSS\n    GitLab Shell: 13.14.0\n    PostgreSQL: 12.4\n    --------------------------------------------------------------------------------\n    Loading production environment (Rails 6.0.3.3)\n    irb(main):001:0> Notify.test_email('xxxx@midea.com','test','test').deliver_now\n    Notify#test_email: processed outbound mail in 1.4ms\n    Delivered mail 5ff2cb5082e2b_e45eb53d484754@devops.mail (673.8ms)\n    Date: Mon, 04 Jan 2021 08:01:20 +0000\n    From: GitLab <xxx@midea.com>\n    Reply-To: GitLab <noreply@ip>\n    To: xxxx@midea.com\n    Message-ID: <5ff2cb5082e2b_e45eb53d484754@devops.mail>\n    Subject: test\n    Mime-Version: 1.0\n    Content-Type: text/html;\n    charset=UTF-8\n    Content-Transfer-Encoding: 7bit\n    Auto-Submitted: auto-generated\n    X-Auto-Response-Suppress: All\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n    <html><body><p>test</p></body></html>\n    => #<Mail::Message:199260, Multipart: false, Headers: <Date: Mon, 04 Jan 2021 08:01:20 +0000>, <From: GitLab <xxx@midea.com>>, <Reply-To: GitLab <noreply@ip>>, <To: xxxx@midea.com>, <Message-ID: <5ff2cb5082e2b_e45eb53d484754@devops.mail>>, <Subject: test>, <Mime-Version: 1.0>, <Content-Type: text/html; charset=UTF-8>, <Content-Transfer-Encoding: 7bit>, <Auto-Submitted: auto-generated>, <X-Auto-Response-Suppress: All>>\n    出现以上信息说明配置成功。\n    ```\n\n\n### 5. 性能调优\n```shell\nsudo vim /etc/gitlab/gitlab.rb\n```\n新增以下内容并保存退出：\n```properties\nunicorn['worker_processes'] = 2                         #官方建议值为CPU核数+1（服务器只部署gitLab的情况下），可提高服务器响应速度，此参数最小值为2，设为1服务器可能卡死\nunicorn['work_timeout'] = 60                            #设置超时时间\nunicorn['worker_memory_limit_min'] = \"200 * 1 << 20\"    #减少最小内存\nunicorn['worker_memory_limit_max'] = \"300 * 1 << 20\"    #减少最大内存\npostgresql['shared_buffers'] = \"128MB\"                  #减少数据库缓存\npostgresql['max_worker_processes'] = 6                  #减少数据库并发数\nsidekiq['concurrency'] = 15                             #减少sidekiq并发数\n```\n```shell\n#每次修改了配置，都需要重新加载\nsudo gitlab-ctl reconfigure\n\n#重启\nsudo gitlab-ctl restart\n```\n\n\n### 6. GitLab使用\n\n#### 6.1 创建Project\n1. 安装Git工具\n    ```shell\n    yum install git\n    ```\n   \n2. 生成密钥文件：使用ssh-keygen生成密钥文件 .ssh/id_rsa.pub\n    ```shell\n    ssh-keygen\n    ```\n   ![生成密钥](./gitlab/4.png)\n   ![密钥](./gitlab/5.png)\n\n3. 在Gitlab上创建一个project\n   ![新建project](./gitlab/6.png)\n   ![新建project](./gitlab/7.png)\n   \n   \n4. 添加ssh key导入步骤2中生成的密钥文件内容\n   ![导入密钥文件](./gitlab/8.png)\n   ![导入密钥文件](./gitlab/9.png)\n   ssh key添加完成：\n   ![导入密钥文件](./gitlab/10.png)\n\n\n#### 6.2 配置git\n1. 配置Git仓库人员\n   ```shell\n    git config --global user.name \"xiaoyuge\"\n    ```\n   - local（默认，高级优先）：只影响本地仓库\n   - global(中优先级)：只影响所有当前用户的git仓库\n   - system（低优先级）：影响到全系统的git仓库\n    \n2. 配置Git仓库人员email\n   ```shell\n    git config --global user.email \"xiaoyuge0318@qq.com\"\n    ```\n3. 克隆项目\n    ```shell\n    git clone git@fase11h12dsa24fdv3Q:root/test.git\n    ```\n   \n#### 6.3 git常用命令\n```shell\n#查看某个命令文档\ngit help <command>\ngit <command> -h\ngit <command> --help\n\n\n#初始化仓库\ngit init \n\n#添加文件内容到暂存区（同时文件被跟踪）\ngit add\n\n#添加所有文件\ngit add .\n\t\ngit rm --cached    \t\t\t\t        #仅从暂存区删除\ngit rm \t\t\t\t\t\t\t#从暂存区与工作目录同时删除\ngit rm $(git ls-files --deleted)\t\t        #删除所有被跟踪，但是在工作目录被删除的文件\n\n\ngit -commit -m 'first commit' \t\t\t        #从暂存区提交 -m：注释\ngit commit -a -m 'full commit'\t\t\t        #从工作区提交\n\n\ngit log    \t\t\t\t\t\t#查看提交历史记录\n\ngit log --online\ngit log --color --graph\n\ngit diff \t\t\t\t\t\t#工作区与暂存区的差异\ngit diff  --cached [<reference>]                        #暂存区与某次提交的差异，默认为HEAD\ngit diff  [<reference>]  \t\t\t\t#工作区与某次提交的差异，默认为HEAD\n\ngit checkout -- <file>  \t\t\t        #将文件内容从暂存区复制到工作目录\n\n#撤销暂存区内容\ngit reset HEAD <file>  \t\t\t\t        #将文件内容从上次提交复制到缓存区\ngit checkout HEAD -- <file> \t\t\t        #将内容从上次提交复制到工作目录\n\n\n\n#对状态的跟踪:git中有两个状态：内容状态和文件状态，\n#内容状态标示内容文件的改变，有三个区域：工作目录，暂存区和提交区\n#文件状态有两个状态：已跟踪和未跟踪\ngit status\n```\n![git status](./gitlab/11.png)\n\n分支操作：\n```shell\ngit branch <branchName> \t\t\t\t#创建一个分支\ngit branch -d <branchName> \t\t\t        #删除一个分支\ngit branch -v \t\t\t                        #显示所有分支信息\n\ngit checkout <branchName> \t\t\t       #通过移动HEAD检出版本，可用于切换分支\ngit checkout -b <branchName> \t\t\t       #创件一个分支并切换\ngit checkout <reference> \t\t\t       #将其移动到一个引用\ngit checkout - \t\t\t                       #恢复到上一个分支\n\ngit reset   \t\t\t                       #将当前分支回退到历史某个版本\ngit reset --mixed <commit> \t\t\t       #(默认)\ngit reset --soft<commit> \ngit reset --hard <commit>\n```\n\n---\n\n### 7. 常见问题\n1. gitlab本身采用gitlab.example.com:80端口，如安装前服务器有启用80，安装完访问会报错。需更改gitlab的默认端口。\n   修改vim /etc/gitlab/gitlab.rb：external_url 'http://localhost:8888\n\n    如果就想用80端口，那没问题。如果更改了端口，后边可以自行调整nginx配置文件进行nginx反向代理设置。\n\n2. 日志位置：/var/log/gitlab 可以进去查看访问日志以及报错日志等，供访问查看以及异常排查。\n\n3. gitlab内存消耗过大，频繁出现502：  http://www.360doc.com/content/22/0130/08/65839659_1015422932.shtml\n\n   \n    gitlab-ctl tail #查看所有日志\n   \n    gitlab-ctl tail nginx/gitlab_access.log #查看nginx访问日\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n参考博客：https://blog.csdn.net/yzd524850313/article/details/113118193\n参考博客：https://zhuanlan.zhihu.com/p/338882906\n        \n","source":"_posts/2022/05/gitlab.md","raw":"---\ntitle: Linux安装gitlab\ncomments: true\ntheme: xray\ntags: gitlab\ncategories: linux\nabbrlink: 48216\ndate: 2022-05-28 09:56:42\n---\n### 1. 前言\n 以前在自己服务器使用的是Gitblit,官网地址：http://gitblit.github.io/gitblit,  这个只需要在服务器上启动一个tomcat,然后将下载的Gitblit的war包放置在tomcat容器里面运行即可访问。\n\n但是由于gitblit没有CI/CD的功能，于是自己就在网上找了一些博客搭建gitblit，在这里记录一下搭建的过程。\n\n### 2. 安装步骤\n1. 配置yum源\n    ```shell\n    vim /etc/yum.repos.d/gitlab-ce.repo\n    ```\n   \n2. 增加一下配置\n    ```properties\n    [gitlab-ce]\n    name=Gitlab CE Repository\n    baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/\n    gpgcheck=0\n    enabled=1\n    ```\n    ![](./gitlab/1.png)\n\n3. 更新本地yum缓存\n    ```shell\n    yum makecache\n    ```\n   \n4. 安装GitLab社区版\n    ```shell\n    yum install gitlab-ce                    #自动安装最新版本\n   \n    sudo yum install gitlab-ce-x.x.x         #安装指定版本\n    ```\n   \n5. 更改默认端口配置(默认为80端口)    \n    ```shell\n    sudo vim /etc/gitlab/gitlab.rb\n    ```\n   修改如下配置：\n    ```text\n    external_url 'http://ip:8888'              #填写自己的主机ip\n    puma['port'] = 8888                       #如果gitlab是13版本之前请求修改  union['port']=8888\n    nginx['listen_port'] = 8888\n    ```\n    \n6. 配置gitlab-http.conf \n    ```shell\n    sudo vim /var/opt/gitlab/nginx/conf/gitlab-http.conf\n    ```\n    修改如下：\n    ```text\n    server {\n        listen *:8888;                   #和上面保持一致\n        server_name ip                   #填写自己的ip\n    }\n    ```\n   \n7. 放开端口\n    ```shell\n    #开放8888端口\n    sudo firewall-cmd --add-port=8888/tcp --permanent\n    \n    #重新加载防火墙\n    sudo firewall-cmd --reload\n    ```\n   \n8. 修改配置后重新加载配置文件\n    ```shell\n    sudo gitlab-ctl reconfigure\n    ```\n   \n9. 重新gitlab\n    ```shell\n    sudo gitlab-ctl restart\n    ```\n   ![启动gitlab](./gitlab/2.png)\n\n10. 修改管理员登录密码\n    - 进入gitlab-rails控制台\n        ```shell\n        sudo gitlab-rails console\n        ```\n    - 查找root账号(默认只有一个root用户)\n        ```shell\n        u=User.where(id:1).first\n        ```\n    - 修改密码\n      ```shell\n      u.password='xiaoyuge123'\n      ```\n    - 再次确认密码\n      ```shell\n      u.password_confirmation='xiaoyuge123'\n      ```\n    - 保存\n        ```shell\n        u.save!\n        ```\n      \n    \n11. 浏览器访问：http://ip:8888\n    ![gitlab登录界面](./gitlab/3.png)\n    至此，Gitlab搭建完毕！\n\n\n### 3. GitLab常用命令\n```shell\nsudo gitlab-ctl start    # 启动所有 gitlab 组件；\nsudo gitlab-ctl stop        # 停止所有 gitlab 组件；\nsudo gitlab-ctl restart        # 重启所有 gitlab 组件；\nsudo gitlab-ctl status        # 查看服务状态；\nsudo gitlab-ctl reconfigure        # 启动服务；\nsudo vim /etc/gitlab/gitlab.rb        # 修改默认的配置文件；\ngitlab-rake gitlab:check SANITIZE=true --trace    # 检查gitlab；\nsudo gitlab-ctl tail        # 查看日志；\ngitlab-ctl show-config           #查看gitlab配置信息\n```\n\n### 4. 邮件配置\n1. 修改配置\n    ```shell\n    sudo vim /etc/gitlab/gitlab.rb\n    ```\n    新增以下内容\n    ```properties\n    gitlab_rails['smtp_enable'] = true\n    gitlab_rails['smtp_address'] = \"mail.midea.com\"\n    gitlab_rails['smtp_port'] = 994\n    gitlab_rails['smtp_user_name'] = \"发信邮箱\"\n    gitlab_rails['smtp_password'] = \"发信邮箱密码\"\n    gitlab_rails['smtp_domain'] = \"xxx.com\"\n    gitlab_rails['smtp_authentication'] = \"login\"\n    gitlab_rails['smtp_enable_starttls_auto'] = true\n    gitlab_rails['smtp_tls'] = true\n    user['git_user_email'] = \"发信邮箱\"\n    gitlab_rails['gitlab_email_from'] = '发信邮箱'\n    ```\n   \n2. 测试邮件配置是否生效\n    ```shell\n    #重新加载配置文件\n    sudo gitlab-ctl reconfigure\n   \n    #查看console\n    sudo gitlab-rails console\n    ```\n    ```shell\n    --------------------------------------------------------------------------------\n    Ruby: ruby 2.7.2p137 (2020-10-01 revision 5445e04352) [x86_64-linux]\n    GitLab: 13.7.1 (c97c8073a0e) FOSS\n    GitLab Shell: 13.14.0\n    PostgreSQL: 12.4\n    --------------------------------------------------------------------------------\n    Loading production environment (Rails 6.0.3.3)\n    irb(main):001:0> Notify.test_email('xxxx@midea.com','test','test').deliver_now\n    Notify#test_email: processed outbound mail in 1.4ms\n    Delivered mail 5ff2cb5082e2b_e45eb53d484754@devops.mail (673.8ms)\n    Date: Mon, 04 Jan 2021 08:01:20 +0000\n    From: GitLab <xxx@midea.com>\n    Reply-To: GitLab <noreply@ip>\n    To: xxxx@midea.com\n    Message-ID: <5ff2cb5082e2b_e45eb53d484754@devops.mail>\n    Subject: test\n    Mime-Version: 1.0\n    Content-Type: text/html;\n    charset=UTF-8\n    Content-Transfer-Encoding: 7bit\n    Auto-Submitted: auto-generated\n    X-Auto-Response-Suppress: All\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n    <html><body><p>test</p></body></html>\n    => #<Mail::Message:199260, Multipart: false, Headers: <Date: Mon, 04 Jan 2021 08:01:20 +0000>, <From: GitLab <xxx@midea.com>>, <Reply-To: GitLab <noreply@ip>>, <To: xxxx@midea.com>, <Message-ID: <5ff2cb5082e2b_e45eb53d484754@devops.mail>>, <Subject: test>, <Mime-Version: 1.0>, <Content-Type: text/html; charset=UTF-8>, <Content-Transfer-Encoding: 7bit>, <Auto-Submitted: auto-generated>, <X-Auto-Response-Suppress: All>>\n    出现以上信息说明配置成功。\n    ```\n\n\n### 5. 性能调优\n```shell\nsudo vim /etc/gitlab/gitlab.rb\n```\n新增以下内容并保存退出：\n```properties\nunicorn['worker_processes'] = 2                         #官方建议值为CPU核数+1（服务器只部署gitLab的情况下），可提高服务器响应速度，此参数最小值为2，设为1服务器可能卡死\nunicorn['work_timeout'] = 60                            #设置超时时间\nunicorn['worker_memory_limit_min'] = \"200 * 1 << 20\"    #减少最小内存\nunicorn['worker_memory_limit_max'] = \"300 * 1 << 20\"    #减少最大内存\npostgresql['shared_buffers'] = \"128MB\"                  #减少数据库缓存\npostgresql['max_worker_processes'] = 6                  #减少数据库并发数\nsidekiq['concurrency'] = 15                             #减少sidekiq并发数\n```\n```shell\n#每次修改了配置，都需要重新加载\nsudo gitlab-ctl reconfigure\n\n#重启\nsudo gitlab-ctl restart\n```\n\n\n### 6. GitLab使用\n\n#### 6.1 创建Project\n1. 安装Git工具\n    ```shell\n    yum install git\n    ```\n   \n2. 生成密钥文件：使用ssh-keygen生成密钥文件 .ssh/id_rsa.pub\n    ```shell\n    ssh-keygen\n    ```\n   ![生成密钥](./gitlab/4.png)\n   ![密钥](./gitlab/5.png)\n\n3. 在Gitlab上创建一个project\n   ![新建project](./gitlab/6.png)\n   ![新建project](./gitlab/7.png)\n   \n   \n4. 添加ssh key导入步骤2中生成的密钥文件内容\n   ![导入密钥文件](./gitlab/8.png)\n   ![导入密钥文件](./gitlab/9.png)\n   ssh key添加完成：\n   ![导入密钥文件](./gitlab/10.png)\n\n\n#### 6.2 配置git\n1. 配置Git仓库人员\n   ```shell\n    git config --global user.name \"xiaoyuge\"\n    ```\n   - local（默认，高级优先）：只影响本地仓库\n   - global(中优先级)：只影响所有当前用户的git仓库\n   - system（低优先级）：影响到全系统的git仓库\n    \n2. 配置Git仓库人员email\n   ```shell\n    git config --global user.email \"xiaoyuge0318@qq.com\"\n    ```\n3. 克隆项目\n    ```shell\n    git clone git@fase11h12dsa24fdv3Q:root/test.git\n    ```\n   \n#### 6.3 git常用命令\n```shell\n#查看某个命令文档\ngit help <command>\ngit <command> -h\ngit <command> --help\n\n\n#初始化仓库\ngit init \n\n#添加文件内容到暂存区（同时文件被跟踪）\ngit add\n\n#添加所有文件\ngit add .\n\t\ngit rm --cached    \t\t\t\t        #仅从暂存区删除\ngit rm \t\t\t\t\t\t\t#从暂存区与工作目录同时删除\ngit rm $(git ls-files --deleted)\t\t        #删除所有被跟踪，但是在工作目录被删除的文件\n\n\ngit -commit -m 'first commit' \t\t\t        #从暂存区提交 -m：注释\ngit commit -a -m 'full commit'\t\t\t        #从工作区提交\n\n\ngit log    \t\t\t\t\t\t#查看提交历史记录\n\ngit log --online\ngit log --color --graph\n\ngit diff \t\t\t\t\t\t#工作区与暂存区的差异\ngit diff  --cached [<reference>]                        #暂存区与某次提交的差异，默认为HEAD\ngit diff  [<reference>]  \t\t\t\t#工作区与某次提交的差异，默认为HEAD\n\ngit checkout -- <file>  \t\t\t        #将文件内容从暂存区复制到工作目录\n\n#撤销暂存区内容\ngit reset HEAD <file>  \t\t\t\t        #将文件内容从上次提交复制到缓存区\ngit checkout HEAD -- <file> \t\t\t        #将内容从上次提交复制到工作目录\n\n\n\n#对状态的跟踪:git中有两个状态：内容状态和文件状态，\n#内容状态标示内容文件的改变，有三个区域：工作目录，暂存区和提交区\n#文件状态有两个状态：已跟踪和未跟踪\ngit status\n```\n![git status](./gitlab/11.png)\n\n分支操作：\n```shell\ngit branch <branchName> \t\t\t\t#创建一个分支\ngit branch -d <branchName> \t\t\t        #删除一个分支\ngit branch -v \t\t\t                        #显示所有分支信息\n\ngit checkout <branchName> \t\t\t       #通过移动HEAD检出版本，可用于切换分支\ngit checkout -b <branchName> \t\t\t       #创件一个分支并切换\ngit checkout <reference> \t\t\t       #将其移动到一个引用\ngit checkout - \t\t\t                       #恢复到上一个分支\n\ngit reset   \t\t\t                       #将当前分支回退到历史某个版本\ngit reset --mixed <commit> \t\t\t       #(默认)\ngit reset --soft<commit> \ngit reset --hard <commit>\n```\n\n---\n\n### 7. 常见问题\n1. gitlab本身采用gitlab.example.com:80端口，如安装前服务器有启用80，安装完访问会报错。需更改gitlab的默认端口。\n   修改vim /etc/gitlab/gitlab.rb：external_url 'http://localhost:8888\n\n    如果就想用80端口，那没问题。如果更改了端口，后边可以自行调整nginx配置文件进行nginx反向代理设置。\n\n2. 日志位置：/var/log/gitlab 可以进去查看访问日志以及报错日志等，供访问查看以及异常排查。\n\n3. gitlab内存消耗过大，频繁出现502：  http://www.360doc.com/content/22/0130/08/65839659_1015422932.shtml\n\n   \n    gitlab-ctl tail #查看所有日志\n   \n    gitlab-ctl tail nginx/gitlab_access.log #查看nginx访问日\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n参考博客：https://blog.csdn.net/yzd524850313/article/details/113118193\n参考博客：https://zhuanlan.zhihu.com/p/338882906\n        \n","slug":"gitlab","published":1,"updated":"2022-05-30T01:26:49.312Z","layout":"post","photos":[],"link":"","_id":"cl424hx59000oad5i4byu5skb","content":"<h3 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h3><p> 以前在自己服务器使用的是Gitblit,官网地址：<a href=\"http://gitblit.github.io/gitblit\">http://gitblit.github.io/gitblit</a>,  这个只需要在服务器上启动一个tomcat,然后将下载的Gitblit的war包放置在tomcat容器里面运行即可访问。</p>\n<p>但是由于gitblit没有CI/CD的功能，于是自己就在网上找了一些博客搭建gitblit，在这里记录一下搭建的过程。</p>\n<h3 id=\"2-安装步骤\"><a href=\"#2-安装步骤\" class=\"headerlink\" title=\"2. 安装步骤\"></a>2. 安装步骤</h3><ol>\n<li><p>配置yum源</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/yum.repos.d/gitlab-ce.repo</span><br></pre></td></tr></table></figure></li>\n<li><p>增加一下配置</p>\n <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">[gitlab-ce]</span></span><br><span class=\"line\"><span class=\"attr\">name</span>=<span class=\"string\">Gitlab CE Repository</span></span><br><span class=\"line\"><span class=\"attr\">baseurl</span>=<span class=\"string\">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/</span></span><br><span class=\"line\"><span class=\"attr\">gpgcheck</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"attr\">enabled</span>=<span class=\"string\">1</span></span><br></pre></td></tr></table></figure>\n<p> <img src=\"/gitlab/1.png\"></p>\n</li>\n<li><p>更新本地yum缓存</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure></li>\n<li><p>安装GitLab社区版</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gitlab-ce                    #自动安装最新版本</span><br><span class=\"line\">   </span><br><span class=\"line\">sudo yum install gitlab-ce-x.x.x         #安装指定版本</span><br></pre></td></tr></table></figure></li>\n<li><p>更改默认端口配置(默认为80端口)    </p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>\n<p>修改如下配置：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">external_url &#x27;http://ip:8888&#x27;              #填写自己的主机ip</span><br><span class=\"line\">puma[&#x27;port&#x27;] = 8888                       #如果gitlab是13版本之前请求修改  union[&#x27;port&#x27;]=8888</span><br><span class=\"line\">nginx[&#x27;listen_port&#x27;] = 8888</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置gitlab-http.conf </p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /var/opt/gitlab/nginx/conf/gitlab-http.conf</span><br></pre></td></tr></table></figure>\n<p> 修改如下：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen *:8888;                   #和上面保持一致</span><br><span class=\"line\">    server_name ip                   #填写自己的ip</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>放开端口</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开放8888端口</span></span><br><span class=\"line\">sudo firewall-cmd --add-port=8888/tcp --permanent</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重新加载防火墙</span></span><br><span class=\"line\">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></li>\n<li><p>修改配置后重新加载配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></li>\n<li><p>重新gitlab</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure>\n<p><img src=\"/gitlab/2.png\" alt=\"启动gitlab\"></p>\n</li>\n<li><p>修改管理员登录密码</p>\n<ul>\n<li>进入gitlab-rails控制台  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-rails console</span><br></pre></td></tr></table></figure></li>\n<li>查找root账号(默认只有一个root用户)  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u=User.where(id:1).first</span><br></pre></td></tr></table></figure></li>\n<li>修改密码<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u.password=&#x27;xiaoyuge123&#x27;</span><br></pre></td></tr></table></figure></li>\n<li>再次确认密码<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u.password_confirmation=&#x27;xiaoyuge123&#x27;</span><br></pre></td></tr></table></figure></li>\n<li>保存  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u.save!</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>浏览器访问：<a href=\"http://ip:8888/\">http://ip:8888</a><br><img src=\"/gitlab/3.png\" alt=\"gitlab登录界面\"><br>至此，Gitlab搭建完毕！</p>\n</li>\n</ol>\n<h3 id=\"3-GitLab常用命令\"><a href=\"#3-GitLab常用命令\" class=\"headerlink\" title=\"3. GitLab常用命令\"></a>3. GitLab常用命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl start    # 启动所有 gitlab 组件；</span><br><span class=\"line\">sudo gitlab-ctl stop        # 停止所有 gitlab 组件；</span><br><span class=\"line\">sudo gitlab-ctl restart        # 重启所有 gitlab 组件；</span><br><span class=\"line\">sudo gitlab-ctl status        # 查看服务状态；</span><br><span class=\"line\">sudo gitlab-ctl reconfigure        # 启动服务；</span><br><span class=\"line\">sudo vim /etc/gitlab/gitlab.rb        # 修改默认的配置文件；</span><br><span class=\"line\">gitlab-rake gitlab:check SANITIZE=true --trace    # 检查gitlab；</span><br><span class=\"line\">sudo gitlab-ctl tail        # 查看日志；</span><br><span class=\"line\">gitlab-ctl show-config           #查看gitlab配置信息</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-邮件配置\"><a href=\"#4-邮件配置\" class=\"headerlink\" title=\"4. 邮件配置\"></a>4. 邮件配置</h3><ol>\n<li>修改配置 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>\n 新增以下内容 <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;smtp_enable&#x27;]</span> = <span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;smtp_address&#x27;]</span> = <span class=\"string\">&quot;mail.midea.com&quot;</span></span><br><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;smtp_port&#x27;]</span> = <span class=\"string\">994</span></span><br><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;smtp_user_name&#x27;]</span> = <span class=\"string\">&quot;发信邮箱&quot;</span></span><br><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;smtp_password&#x27;]</span> = <span class=\"string\">&quot;发信邮箱密码&quot;</span></span><br><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;smtp_domain&#x27;]</span> = <span class=\"string\">&quot;xxx.com&quot;</span></span><br><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;smtp_authentication&#x27;]</span> = <span class=\"string\">&quot;login&quot;</span></span><br><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;]</span> = <span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;smtp_tls&#x27;]</span> = <span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">user[&#x27;git_user_email&#x27;]</span> = <span class=\"string\">&quot;发信邮箱&quot;</span></span><br><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;gitlab_email_from&#x27;]</span> = <span class=\"string\">&#x27;发信邮箱&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li>测试邮件配置是否生效 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重新加载配置文件</span></span><br><span class=\"line\">sudo gitlab-ctl reconfigure</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看console</span></span><br><span class=\"line\">sudo gitlab-rails console</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\">Ruby: ruby 2.7.2p137 (2020-10-01 revision 5445e04352) [x86_64-linux]</span><br><span class=\"line\">GitLab: 13.7.1 (c97c8073a0e) FOSS</span><br><span class=\"line\">GitLab Shell: 13.14.0</span><br><span class=\"line\">PostgreSQL: 12.4</span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\">Loading production environment (Rails 6.0.3.3)</span><br><span class=\"line\">irb(main):001:0&gt; Notify.test_email(&#x27;xxxx@midea.com&#x27;,&#x27;test&#x27;,&#x27;test&#x27;).deliver_now</span><br><span class=\"line\"><span class=\"meta\">Notify#</span><span class=\"bash\">test_email: processed outbound mail <span class=\"keyword\">in</span> 1.4ms</span></span><br><span class=\"line\">Delivered mail 5ff2cb5082e2b_e45eb53d484754@devops.mail (673.8ms)</span><br><span class=\"line\">Date: Mon, 04 Jan 2021 08:01:20 +0000</span><br><span class=\"line\">From: GitLab &lt;xxx@midea.com&gt;</span><br><span class=\"line\">Reply-To: GitLab &lt;noreply@ip&gt;</span><br><span class=\"line\">To: xxxx@midea.com</span><br><span class=\"line\">Message-ID: &lt;5ff2cb5082e2b_e45eb53d484754@devops.mail&gt;</span><br><span class=\"line\">Subject: test</span><br><span class=\"line\">Mime-Version: 1.0</span><br><span class=\"line\">Content-Type: text/html;</span><br><span class=\"line\">charset=UTF-8</span><br><span class=\"line\">Content-Transfer-Encoding: 7bit</span><br><span class=\"line\">Auto-Submitted: auto-generated</span><br><span class=\"line\">X-Auto-Response-Suppress: All</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;</span><br><span class=\"line\">&lt;html&gt;&lt;body&gt;&lt;p&gt;test&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class=\"line\">=&gt; #&lt;Mail::Message:199260, Multipart: false, Headers: &lt;Date: Mon, 04 Jan 2021 08:01:20 +0000&gt;, &lt;From: GitLab &lt;xxx@midea.com&gt;&gt;, &lt;Reply-To: GitLab &lt;noreply@ip&gt;&gt;, &lt;To: xxxx@midea.com&gt;, &lt;Message-ID: &lt;5ff2cb5082e2b_e45eb53d484754@devops.mail&gt;&gt;, &lt;Subject: test&gt;, &lt;Mime-Version: 1.0&gt;, &lt;Content-Type: text/html; charset=UTF-8&gt;, &lt;Content-Transfer-Encoding: 7bit&gt;, &lt;Auto-Submitted: auto-generated&gt;, &lt;X-Auto-Response-Suppress: All&gt;&gt;</span><br><span class=\"line\">出现以上信息说明配置成功。</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"5-性能调优\"><a href=\"#5-性能调优\" class=\"headerlink\" title=\"5. 性能调优\"></a>5. 性能调优</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>\n<p>新增以下内容并保存退出：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">unicorn[&#x27;worker_processes&#x27;]</span> = <span class=\"string\">2                         #官方建议值为CPU核数+1（服务器只部署gitLab的情况下），可提高服务器响应速度，此参数最小值为2，设为1服务器可能卡死</span></span><br><span class=\"line\"><span class=\"meta\">unicorn[&#x27;work_timeout&#x27;]</span> = <span class=\"string\">60                            #设置超时时间</span></span><br><span class=\"line\"><span class=\"meta\">unicorn[&#x27;worker_memory_limit_min&#x27;]</span> = <span class=\"string\">&quot;200 * 1 &lt;&lt; 20&quot;    #减少最小内存</span></span><br><span class=\"line\"><span class=\"meta\">unicorn[&#x27;worker_memory_limit_max&#x27;]</span> = <span class=\"string\">&quot;300 * 1 &lt;&lt; 20&quot;    #减少最大内存</span></span><br><span class=\"line\"><span class=\"meta\">postgresql[&#x27;shared_buffers&#x27;]</span> = <span class=\"string\">&quot;128MB&quot;                  #减少数据库缓存</span></span><br><span class=\"line\"><span class=\"meta\">postgresql[&#x27;max_worker_processes&#x27;]</span> = <span class=\"string\">6                  #减少数据库并发数</span></span><br><span class=\"line\"><span class=\"meta\">sidekiq[&#x27;concurrency&#x27;]</span> = <span class=\"string\">15                             #减少sidekiq并发数</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">每次修改了配置，都需要重新加载</span></span><br><span class=\"line\">sudo gitlab-ctl reconfigure</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启</span></span><br><span class=\"line\">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"6-GitLab使用\"><a href=\"#6-GitLab使用\" class=\"headerlink\" title=\"6. GitLab使用\"></a>6. GitLab使用</h3><h4 id=\"6-1-创建Project\"><a href=\"#6-1-创建Project\" class=\"headerlink\" title=\"6.1 创建Project\"></a>6.1 创建Project</h4><ol>\n<li><p>安装Git工具</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git</span><br></pre></td></tr></table></figure></li>\n<li><p>生成密钥文件：使用ssh-keygen生成密钥文件 .ssh/id_rsa.pub</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br></pre></td></tr></table></figure>\n<p><img src=\"/gitlab/4.png\" alt=\"生成密钥\"><br><img src=\"/gitlab/5.png\" alt=\"密钥\"></p>\n</li>\n<li><p>在Gitlab上创建一个project<br><img src=\"/gitlab/6.png\" alt=\"新建project\"><br><img src=\"/gitlab/7.png\" alt=\"新建project\"></p>\n</li>\n<li><p>添加ssh key导入步骤2中生成的密钥文件内容<br><img src=\"/gitlab/8.png\" alt=\"导入密钥文件\"><br><img src=\"/gitlab/9.png\" alt=\"导入密钥文件\"><br>ssh key添加完成：<br><img src=\"/gitlab/10.png\" alt=\"导入密钥文件\"></p>\n</li>\n</ol>\n<h4 id=\"6-2-配置git\"><a href=\"#6-2-配置git\" class=\"headerlink\" title=\"6.2 配置git\"></a>6.2 配置git</h4><ol>\n<li>配置Git仓库人员<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;xiaoyuge&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>local（默认，高级优先）：只影响本地仓库</li>\n<li>global(中优先级)：只影响所有当前用户的git仓库</li>\n<li>system（低优先级）：影响到全系统的git仓库</li>\n</ul>\n</li>\n<li>配置Git仓库人员email<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.email &quot;xiaoyuge0318@qq.com&quot;</span><br></pre></td></tr></table></figure></li>\n<li>克隆项目 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@fase11h12dsa24fdv3Q:root/test.git</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"6-3-git常用命令\"><a href=\"#6-3-git常用命令\" class=\"headerlink\" title=\"6.3 git常用命令\"></a>6.3 git常用命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看某个命令文档</span></span><br><span class=\"line\">git help &lt;command&gt;</span><br><span class=\"line\">git &lt;command&gt; -h</span><br><span class=\"line\">git &lt;command&gt; --help</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">初始化仓库</span></span><br><span class=\"line\">git init </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加文件内容到暂存区（同时文件被跟踪）</span></span><br><span class=\"line\">git add</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加所有文件</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\">\t</span><br><span class=\"line\">git rm --cached    \t\t\t\t        #仅从暂存区删除</span><br><span class=\"line\">git rm \t\t\t\t\t\t\t#从暂存区与工作目录同时删除</span><br><span class=\"line\">git rm $(git ls-files --deleted)\t\t        #删除所有被跟踪，但是在工作目录被删除的文件</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git -commit -m &#x27;first commit&#x27; \t\t\t        #从暂存区提交 -m：注释</span><br><span class=\"line\">git commit -a -m &#x27;full commit&#x27;\t\t\t        #从工作区提交</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git log    \t\t\t\t\t\t#查看提交历史记录</span><br><span class=\"line\"></span><br><span class=\"line\">git log --online</span><br><span class=\"line\">git log --color --graph</span><br><span class=\"line\"></span><br><span class=\"line\">git diff \t\t\t\t\t\t#工作区与暂存区的差异</span><br><span class=\"line\">git diff  --cached [&lt;reference&gt;]                        #暂存区与某次提交的差异，默认为HEAD</span><br><span class=\"line\">git diff  [&lt;reference&gt;]  \t\t\t\t#工作区与某次提交的差异，默认为HEAD</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -- &lt;file&gt;  \t\t\t        #将文件内容从暂存区复制到工作目录</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">撤销暂存区内容</span></span><br><span class=\"line\">git reset HEAD &lt;file&gt;  \t\t\t\t        #将文件内容从上次提交复制到缓存区</span><br><span class=\"line\">git checkout HEAD -- &lt;file&gt; \t\t\t        #将内容从上次提交复制到工作目录</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">对状态的跟踪:git中有两个状态：内容状态和文件状态，</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">内容状态标示内容文件的改变，有三个区域：工作目录，暂存区和提交区</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">文件状态有两个状态：已跟踪和未跟踪</span></span><br><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<p><img src=\"/gitlab/11.png\" alt=\"git status\"></p>\n<p>分支操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch &lt;branchName&gt; \t\t\t\t#创建一个分支</span><br><span class=\"line\">git branch -d &lt;branchName&gt; \t\t\t        #删除一个分支</span><br><span class=\"line\">git branch -v \t\t\t                        #显示所有分支信息</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout &lt;branchName&gt; \t\t\t       #通过移动HEAD检出版本，可用于切换分支</span><br><span class=\"line\">git checkout -b &lt;branchName&gt; \t\t\t       #创件一个分支并切换</span><br><span class=\"line\">git checkout &lt;reference&gt; \t\t\t       #将其移动到一个引用</span><br><span class=\"line\">git checkout - \t\t\t                       #恢复到上一个分支</span><br><span class=\"line\"></span><br><span class=\"line\">git reset   \t\t\t                       #将当前分支回退到历史某个版本</span><br><span class=\"line\">git reset --mixed &lt;commit&gt; \t\t\t       #(默认)</span><br><span class=\"line\">git reset --soft&lt;commit&gt; </span><br><span class=\"line\">git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"7-常见问题\"><a href=\"#7-常见问题\" class=\"headerlink\" title=\"7. 常见问题\"></a>7. 常见问题</h3><ol>\n<li><p>gitlab本身采用gitlab.example.com:80端口，如安装前服务器有启用80，安装完访问会报错。需更改gitlab的默认端口。<br>修改vim /etc/gitlab/gitlab.rb：external_url ‘<a href=\"http://localhost:8888/\">http://localhost:8888</a></p>\n<p> 如果就想用80端口，那没问题。如果更改了端口，后边可以自行调整nginx配置文件进行nginx反向代理设置。</p>\n</li>\n<li><p>日志位置：/var/log/gitlab 可以进去查看访问日志以及报错日志等，供访问查看以及异常排查。</p>\n</li>\n<li><p>gitlab内存消耗过大，频繁出现502：  <a href=\"http://www.360doc.com/content/22/0130/08/65839659_1015422932.shtml\">http://www.360doc.com/content/22/0130/08/65839659_1015422932.shtml</a></p>\n<p> gitlab-ctl tail #查看所有日志</p>\n<p> gitlab-ctl tail nginx/gitlab_access.log #查看nginx访问日</p>\n</li>\n</ol>\n<p>参考博客：<a href=\"https://blog.csdn.net/yzd524850313/article/details/113118193\">https://blog.csdn.net/yzd524850313/article/details/113118193</a><br>参考博客：<a href=\"https://zhuanlan.zhihu.com/p/338882906\">https://zhuanlan.zhihu.com/p/338882906</a></p>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h3 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h3><p> 以前在自己服务器使用的是Gitblit,官网地址：<a href=\"http://gitblit.github.io/gitblit\">http://gitblit.github.io/gitblit</a>,  这个只需要在服务器上启动一个tomcat,然后将下载的Gitblit的war包放置在tomcat容器里面运行即可访问。</p>\n<p>但是由于gitblit没有CI/CD的功能，于是自己就在网上找了一些博客搭建gitblit，在这里记录一下搭建的过程。</p>\n<h3 id=\"2-安装步骤\"><a href=\"#2-安装步骤\" class=\"headerlink\" title=\"2. 安装步骤\"></a>2. 安装步骤</h3><ol>\n<li><p>配置yum源</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/yum.repos.d/gitlab-ce.repo</span><br></pre></td></tr></table></figure></li>\n<li><p>增加一下配置</p>\n <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">[gitlab-ce]</span></span><br><span class=\"line\"><span class=\"attr\">name</span>=<span class=\"string\">Gitlab CE Repository</span></span><br><span class=\"line\"><span class=\"attr\">baseurl</span>=<span class=\"string\">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/</span></span><br><span class=\"line\"><span class=\"attr\">gpgcheck</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"attr\">enabled</span>=<span class=\"string\">1</span></span><br></pre></td></tr></table></figure>\n<p> <img src=\"/gitlab/1.png\"></p>\n</li>\n<li><p>更新本地yum缓存</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure></li>\n<li><p>安装GitLab社区版</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gitlab-ce                    #自动安装最新版本</span><br><span class=\"line\">   </span><br><span class=\"line\">sudo yum install gitlab-ce-x.x.x         #安装指定版本</span><br></pre></td></tr></table></figure></li>\n<li><p>更改默认端口配置(默认为80端口)    </p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>\n<p>修改如下配置：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">external_url &#x27;http://ip:8888&#x27;              #填写自己的主机ip</span><br><span class=\"line\">puma[&#x27;port&#x27;] = 8888                       #如果gitlab是13版本之前请求修改  union[&#x27;port&#x27;]=8888</span><br><span class=\"line\">nginx[&#x27;listen_port&#x27;] = 8888</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置gitlab-http.conf </p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /var/opt/gitlab/nginx/conf/gitlab-http.conf</span><br></pre></td></tr></table></figure>\n<p> 修改如下：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen *:8888;                   #和上面保持一致</span><br><span class=\"line\">    server_name ip                   #填写自己的ip</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>放开端口</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开放8888端口</span></span><br><span class=\"line\">sudo firewall-cmd --add-port=8888/tcp --permanent</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重新加载防火墙</span></span><br><span class=\"line\">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></li>\n<li><p>修改配置后重新加载配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></li>\n<li><p>重新gitlab</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure>\n<p><img src=\"/gitlab/2.png\" alt=\"启动gitlab\"></p>\n</li>\n<li><p>修改管理员登录密码</p>\n<ul>\n<li>进入gitlab-rails控制台  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-rails console</span><br></pre></td></tr></table></figure></li>\n<li>查找root账号(默认只有一个root用户)  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u=User.where(id:1).first</span><br></pre></td></tr></table></figure></li>\n<li>修改密码<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u.password=&#x27;xiaoyuge123&#x27;</span><br></pre></td></tr></table></figure></li>\n<li>再次确认密码<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u.password_confirmation=&#x27;xiaoyuge123&#x27;</span><br></pre></td></tr></table></figure></li>\n<li>保存  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u.save!</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>浏览器访问：<a href=\"http://ip:8888/\">http://ip:8888</a><br><img src=\"/gitlab/3.png\" alt=\"gitlab登录界面\"><br>至此，Gitlab搭建完毕！</p>\n</li>\n</ol>\n<h3 id=\"3-GitLab常用命令\"><a href=\"#3-GitLab常用命令\" class=\"headerlink\" title=\"3. GitLab常用命令\"></a>3. GitLab常用命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl start    # 启动所有 gitlab 组件；</span><br><span class=\"line\">sudo gitlab-ctl stop        # 停止所有 gitlab 组件；</span><br><span class=\"line\">sudo gitlab-ctl restart        # 重启所有 gitlab 组件；</span><br><span class=\"line\">sudo gitlab-ctl status        # 查看服务状态；</span><br><span class=\"line\">sudo gitlab-ctl reconfigure        # 启动服务；</span><br><span class=\"line\">sudo vim /etc/gitlab/gitlab.rb        # 修改默认的配置文件；</span><br><span class=\"line\">gitlab-rake gitlab:check SANITIZE=true --trace    # 检查gitlab；</span><br><span class=\"line\">sudo gitlab-ctl tail        # 查看日志；</span><br><span class=\"line\">gitlab-ctl show-config           #查看gitlab配置信息</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-邮件配置\"><a href=\"#4-邮件配置\" class=\"headerlink\" title=\"4. 邮件配置\"></a>4. 邮件配置</h3><ol>\n<li>修改配置 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>\n 新增以下内容 <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;smtp_enable&#x27;]</span> = <span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;smtp_address&#x27;]</span> = <span class=\"string\">&quot;mail.midea.com&quot;</span></span><br><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;smtp_port&#x27;]</span> = <span class=\"string\">994</span></span><br><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;smtp_user_name&#x27;]</span> = <span class=\"string\">&quot;发信邮箱&quot;</span></span><br><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;smtp_password&#x27;]</span> = <span class=\"string\">&quot;发信邮箱密码&quot;</span></span><br><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;smtp_domain&#x27;]</span> = <span class=\"string\">&quot;xxx.com&quot;</span></span><br><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;smtp_authentication&#x27;]</span> = <span class=\"string\">&quot;login&quot;</span></span><br><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;]</span> = <span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;smtp_tls&#x27;]</span> = <span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">user[&#x27;git_user_email&#x27;]</span> = <span class=\"string\">&quot;发信邮箱&quot;</span></span><br><span class=\"line\"><span class=\"meta\">gitlab_rails[&#x27;gitlab_email_from&#x27;]</span> = <span class=\"string\">&#x27;发信邮箱&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li>测试邮件配置是否生效 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重新加载配置文件</span></span><br><span class=\"line\">sudo gitlab-ctl reconfigure</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看console</span></span><br><span class=\"line\">sudo gitlab-rails console</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\">Ruby: ruby 2.7.2p137 (2020-10-01 revision 5445e04352) [x86_64-linux]</span><br><span class=\"line\">GitLab: 13.7.1 (c97c8073a0e) FOSS</span><br><span class=\"line\">GitLab Shell: 13.14.0</span><br><span class=\"line\">PostgreSQL: 12.4</span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\">Loading production environment (Rails 6.0.3.3)</span><br><span class=\"line\">irb(main):001:0&gt; Notify.test_email(&#x27;xxxx@midea.com&#x27;,&#x27;test&#x27;,&#x27;test&#x27;).deliver_now</span><br><span class=\"line\"><span class=\"meta\">Notify#</span><span class=\"bash\">test_email: processed outbound mail <span class=\"keyword\">in</span> 1.4ms</span></span><br><span class=\"line\">Delivered mail 5ff2cb5082e2b_e45eb53d484754@devops.mail (673.8ms)</span><br><span class=\"line\">Date: Mon, 04 Jan 2021 08:01:20 +0000</span><br><span class=\"line\">From: GitLab &lt;xxx@midea.com&gt;</span><br><span class=\"line\">Reply-To: GitLab &lt;noreply@ip&gt;</span><br><span class=\"line\">To: xxxx@midea.com</span><br><span class=\"line\">Message-ID: &lt;5ff2cb5082e2b_e45eb53d484754@devops.mail&gt;</span><br><span class=\"line\">Subject: test</span><br><span class=\"line\">Mime-Version: 1.0</span><br><span class=\"line\">Content-Type: text/html;</span><br><span class=\"line\">charset=UTF-8</span><br><span class=\"line\">Content-Transfer-Encoding: 7bit</span><br><span class=\"line\">Auto-Submitted: auto-generated</span><br><span class=\"line\">X-Auto-Response-Suppress: All</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;</span><br><span class=\"line\">&lt;html&gt;&lt;body&gt;&lt;p&gt;test&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class=\"line\">=&gt; #&lt;Mail::Message:199260, Multipart: false, Headers: &lt;Date: Mon, 04 Jan 2021 08:01:20 +0000&gt;, &lt;From: GitLab &lt;xxx@midea.com&gt;&gt;, &lt;Reply-To: GitLab &lt;noreply@ip&gt;&gt;, &lt;To: xxxx@midea.com&gt;, &lt;Message-ID: &lt;5ff2cb5082e2b_e45eb53d484754@devops.mail&gt;&gt;, &lt;Subject: test&gt;, &lt;Mime-Version: 1.0&gt;, &lt;Content-Type: text/html; charset=UTF-8&gt;, &lt;Content-Transfer-Encoding: 7bit&gt;, &lt;Auto-Submitted: auto-generated&gt;, &lt;X-Auto-Response-Suppress: All&gt;&gt;</span><br><span class=\"line\">出现以上信息说明配置成功。</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"5-性能调优\"><a href=\"#5-性能调优\" class=\"headerlink\" title=\"5. 性能调优\"></a>5. 性能调优</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>\n<p>新增以下内容并保存退出：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">unicorn[&#x27;worker_processes&#x27;]</span> = <span class=\"string\">2                         #官方建议值为CPU核数+1（服务器只部署gitLab的情况下），可提高服务器响应速度，此参数最小值为2，设为1服务器可能卡死</span></span><br><span class=\"line\"><span class=\"meta\">unicorn[&#x27;work_timeout&#x27;]</span> = <span class=\"string\">60                            #设置超时时间</span></span><br><span class=\"line\"><span class=\"meta\">unicorn[&#x27;worker_memory_limit_min&#x27;]</span> = <span class=\"string\">&quot;200 * 1 &lt;&lt; 20&quot;    #减少最小内存</span></span><br><span class=\"line\"><span class=\"meta\">unicorn[&#x27;worker_memory_limit_max&#x27;]</span> = <span class=\"string\">&quot;300 * 1 &lt;&lt; 20&quot;    #减少最大内存</span></span><br><span class=\"line\"><span class=\"meta\">postgresql[&#x27;shared_buffers&#x27;]</span> = <span class=\"string\">&quot;128MB&quot;                  #减少数据库缓存</span></span><br><span class=\"line\"><span class=\"meta\">postgresql[&#x27;max_worker_processes&#x27;]</span> = <span class=\"string\">6                  #减少数据库并发数</span></span><br><span class=\"line\"><span class=\"meta\">sidekiq[&#x27;concurrency&#x27;]</span> = <span class=\"string\">15                             #减少sidekiq并发数</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">每次修改了配置，都需要重新加载</span></span><br><span class=\"line\">sudo gitlab-ctl reconfigure</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启</span></span><br><span class=\"line\">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"6-GitLab使用\"><a href=\"#6-GitLab使用\" class=\"headerlink\" title=\"6. GitLab使用\"></a>6. GitLab使用</h3><h4 id=\"6-1-创建Project\"><a href=\"#6-1-创建Project\" class=\"headerlink\" title=\"6.1 创建Project\"></a>6.1 创建Project</h4><ol>\n<li><p>安装Git工具</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git</span><br></pre></td></tr></table></figure></li>\n<li><p>生成密钥文件：使用ssh-keygen生成密钥文件 .ssh/id_rsa.pub</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br></pre></td></tr></table></figure>\n<p><img src=\"/gitlab/4.png\" alt=\"生成密钥\"><br><img src=\"/gitlab/5.png\" alt=\"密钥\"></p>\n</li>\n<li><p>在Gitlab上创建一个project<br><img src=\"/gitlab/6.png\" alt=\"新建project\"><br><img src=\"/gitlab/7.png\" alt=\"新建project\"></p>\n</li>\n<li><p>添加ssh key导入步骤2中生成的密钥文件内容<br><img src=\"/gitlab/8.png\" alt=\"导入密钥文件\"><br><img src=\"/gitlab/9.png\" alt=\"导入密钥文件\"><br>ssh key添加完成：<br><img src=\"/gitlab/10.png\" alt=\"导入密钥文件\"></p>\n</li>\n</ol>\n<h4 id=\"6-2-配置git\"><a href=\"#6-2-配置git\" class=\"headerlink\" title=\"6.2 配置git\"></a>6.2 配置git</h4><ol>\n<li>配置Git仓库人员<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;xiaoyuge&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>local（默认，高级优先）：只影响本地仓库</li>\n<li>global(中优先级)：只影响所有当前用户的git仓库</li>\n<li>system（低优先级）：影响到全系统的git仓库</li>\n</ul>\n</li>\n<li>配置Git仓库人员email<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.email &quot;xiaoyuge0318@qq.com&quot;</span><br></pre></td></tr></table></figure></li>\n<li>克隆项目 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@fase11h12dsa24fdv3Q:root/test.git</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"6-3-git常用命令\"><a href=\"#6-3-git常用命令\" class=\"headerlink\" title=\"6.3 git常用命令\"></a>6.3 git常用命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看某个命令文档</span></span><br><span class=\"line\">git help &lt;command&gt;</span><br><span class=\"line\">git &lt;command&gt; -h</span><br><span class=\"line\">git &lt;command&gt; --help</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">初始化仓库</span></span><br><span class=\"line\">git init </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加文件内容到暂存区（同时文件被跟踪）</span></span><br><span class=\"line\">git add</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加所有文件</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\">\t</span><br><span class=\"line\">git rm --cached    \t\t\t\t        #仅从暂存区删除</span><br><span class=\"line\">git rm \t\t\t\t\t\t\t#从暂存区与工作目录同时删除</span><br><span class=\"line\">git rm $(git ls-files --deleted)\t\t        #删除所有被跟踪，但是在工作目录被删除的文件</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git -commit -m &#x27;first commit&#x27; \t\t\t        #从暂存区提交 -m：注释</span><br><span class=\"line\">git commit -a -m &#x27;full commit&#x27;\t\t\t        #从工作区提交</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git log    \t\t\t\t\t\t#查看提交历史记录</span><br><span class=\"line\"></span><br><span class=\"line\">git log --online</span><br><span class=\"line\">git log --color --graph</span><br><span class=\"line\"></span><br><span class=\"line\">git diff \t\t\t\t\t\t#工作区与暂存区的差异</span><br><span class=\"line\">git diff  --cached [&lt;reference&gt;]                        #暂存区与某次提交的差异，默认为HEAD</span><br><span class=\"line\">git diff  [&lt;reference&gt;]  \t\t\t\t#工作区与某次提交的差异，默认为HEAD</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -- &lt;file&gt;  \t\t\t        #将文件内容从暂存区复制到工作目录</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">撤销暂存区内容</span></span><br><span class=\"line\">git reset HEAD &lt;file&gt;  \t\t\t\t        #将文件内容从上次提交复制到缓存区</span><br><span class=\"line\">git checkout HEAD -- &lt;file&gt; \t\t\t        #将内容从上次提交复制到工作目录</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">对状态的跟踪:git中有两个状态：内容状态和文件状态，</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">内容状态标示内容文件的改变，有三个区域：工作目录，暂存区和提交区</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">文件状态有两个状态：已跟踪和未跟踪</span></span><br><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<p><img src=\"/gitlab/11.png\" alt=\"git status\"></p>\n<p>分支操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch &lt;branchName&gt; \t\t\t\t#创建一个分支</span><br><span class=\"line\">git branch -d &lt;branchName&gt; \t\t\t        #删除一个分支</span><br><span class=\"line\">git branch -v \t\t\t                        #显示所有分支信息</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout &lt;branchName&gt; \t\t\t       #通过移动HEAD检出版本，可用于切换分支</span><br><span class=\"line\">git checkout -b &lt;branchName&gt; \t\t\t       #创件一个分支并切换</span><br><span class=\"line\">git checkout &lt;reference&gt; \t\t\t       #将其移动到一个引用</span><br><span class=\"line\">git checkout - \t\t\t                       #恢复到上一个分支</span><br><span class=\"line\"></span><br><span class=\"line\">git reset   \t\t\t                       #将当前分支回退到历史某个版本</span><br><span class=\"line\">git reset --mixed &lt;commit&gt; \t\t\t       #(默认)</span><br><span class=\"line\">git reset --soft&lt;commit&gt; </span><br><span class=\"line\">git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"7-常见问题\"><a href=\"#7-常见问题\" class=\"headerlink\" title=\"7. 常见问题\"></a>7. 常见问题</h3><ol>\n<li><p>gitlab本身采用gitlab.example.com:80端口，如安装前服务器有启用80，安装完访问会报错。需更改gitlab的默认端口。<br>修改vim /etc/gitlab/gitlab.rb：external_url ‘<a href=\"http://localhost:8888/\">http://localhost:8888</a></p>\n<p> 如果就想用80端口，那没问题。如果更改了端口，后边可以自行调整nginx配置文件进行nginx反向代理设置。</p>\n</li>\n<li><p>日志位置：/var/log/gitlab 可以进去查看访问日志以及报错日志等，供访问查看以及异常排查。</p>\n</li>\n<li><p>gitlab内存消耗过大，频繁出现502：  <a href=\"http://www.360doc.com/content/22/0130/08/65839659_1015422932.shtml\">http://www.360doc.com/content/22/0130/08/65839659_1015422932.shtml</a></p>\n<p> gitlab-ctl tail #查看所有日志</p>\n<p> gitlab-ctl tail nginx/gitlab_access.log #查看nginx访问日</p>\n</li>\n</ol>\n<p>参考博客：<a href=\"https://blog.csdn.net/yzd524850313/article/details/113118193\">https://blog.csdn.net/yzd524850313/article/details/113118193</a><br>参考博客：<a href=\"https://zhuanlan.zhihu.com/p/338882906\">https://zhuanlan.zhihu.com/p/338882906</a></p>\n"},{"title":"jstack命令","comments":1,"password":"xiaoyuge","abstract":"Here's something encrypted, password is required to continue reading.","message":"Hey, password is required here.","theme":"xray","wrong_pass_message":"Oh, this is an invalid password. Check and try again, please.","wrong_hash_message":"Oh, these decrypted content cannot be verified, but you can still have a look.","abbrlink":29371,"date":"2022-05-06T13:09:27.000Z","_content":"###  1. 定义\n**jstack** 是Java虚拟机自带的一种堆栈跟踪工具。\n\n**jstack** 用于生成java虚拟机当前时刻的线程快照。线程快照是当前java虚拟机内每一条线程正在执行的方法堆栈的集合，生成快照的主要目的是定位线程出现长时间停顿的原因，\n如**线程间死锁**、**死循环**、**请求外部资源导致的长时间的等待**。\n\n### 2. 用法\n首先使用**jps** 命令查看需要打印线程栈的进程号\n![jps](./jstack/jps.png)\n其中进程号2602 DoProject是我测试的程序，使用jstack查看下：\n```shell\njstack 2602  #打印2602进程的堆栈信息\n```\n```java\nxiaoyuge@xiaoyuge ~ % jstack 2602\n 2022-05-06 21:26:59\n Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.281-b09 mixed mode):\n\n \"Attach Listener\" #15 daemon prio=9 os_prio=31 tid=0x00007f872b9a1000 nid=0x4c07 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n \"mysql-cj-abandoned-connection-cleanup\" #13 daemon prio=5 os_prio=31 tid=0x00007f872b99e800 nid=0xa803 in Object.wait() [0x000070000bba0000]\n   java.lang.Thread.State: TIMED_WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x00000005c000c5d8> (a java.lang.ref.ReferenceQueue$Lock)\n\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)\n\t- locked <0x00000005c000c5d8> (a java.lang.ref.ReferenceQueue$Lock)\n\tat com.mysql.cj.jdbc.AbandonedConnectionCleanupThread.run(AbandonedConnectionCleanupThread.java:85)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n \"main\" #1 prio=5 os_prio=31 tid=0x00007f8729808800 nid=0x1003 runnable [0x000070000a3d5000]\n        java.lang.Thread.State: RUNNABLE\n        at java.io.UnixFileSystem.list(Native Method)\n        at java.io.File.list(File.java:1122)\n        at java.io.File.listFiles(File.java:1207)\n        at com.tenly.maintenance.analysis.jk.TruckFileReadThread.getAllFiles(TruckFileReadThread.java:36)\n        at com.tenly.maintenance.analysis.jk.TruckFileReadThread.getAllFiles(TruckFileReadThread.java:40)\n        at com.tenly.maintenance.analysis.jk.TruckFileReadThread.run(TruckFileReadThread.java:113)\n        at com.tenly.maintenance.analysis.jk.TruckFileListener.runListen(TruckFileListener.java:20)\n        at com.hive.cin.DoProject.runMain(DoProject.java:31)\n        at com.hive.cin.DoProject.main(DoProject.java:11)\n```\n可以看到控制台打印出了线程的信息以及线程对应的堆栈信息。下面我们对打印结果进行逐行分析：\n#### 1. java.lang.Thread.State: RUNNABLE 线程状态\n    首先分析的是线程状态，在Java中线程分别对应不同的状态，从创建线程的 NEW 到销毁时的 TERMINATED状态。\n    \n```java\n//这是java.lang.Thread.State源码\npublic enum State {\n    /**\n     * Thread state for a thread which has not yet started.\n     * 尚未启动的线程的线程状态。\n     */\n    NEW,\n    /**\n     * Thread state for a runnable thread.  A thread in the runnable\n     * state is executing in the Java virtual machine but it may\n     * be waiting for other resources from the operating system\n     * such as processor.\n     * 可运行线程的线程状态。处于可运行状态的线程正在Java虚拟机中执行，但它可能正在等待来自操作系统的其他资源，例如处理器。\n     */\n    RUNNABLE,\n    /**\n     * Thread state for a thread blocked waiting for a monitor lock. A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait() .\n     * 等待监视器锁定的被阻止线程的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法，或在调用对象后重新进入同步块/方法。\n     */\n    BLOCKED,\n\n    /**\n     * Thread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods:\n     * 1.Object.wait() with no timeout \n     * 2.Thread.join() with no timeout \n     * 3.LockSupport.park()\n     *\n     * A thread in the waiting state is waiting for another thread to perform a particular action.\n     * For example, a thread that has called Object.wait() on an object is waiting for another thread to call\n     * Object.notify or Object.notifyAll() on that object. A thread that has called Thread.join()\n     * is waiting for a specified thread to terminate.\n     */\n    WAITING,\n\n    /**\n     * Thread state for a waiting thread with a specified waiting time. A thread is in the timed waiting state due to calling one of\n     * the following methods with a specified positive waiting time:\n     * 1.Thread.sleep()\n     * 2.Object.wait() with timeout\n     * 3.Thread.join() with timeout\n     * 4.LockSupport.parkNanos()\n     * 5.LockSupport.parkUntil()\n     */\n    TIMED_WAITING,\n    /**\n     * Thread state for a terminated thread. The thread has completed execution.\n     */\n    TERMINATED;\n}\n```\n使用测试代码查看线程状态转化\n```java\nprivate static boolean exit = false;\n// 在 new 一个线程对象后，该线程的状态为 NEW 状态\nThread thread1 = new Thread(()->{\n\twhile(!exit){\n\t\t// 在执行线程中代码时，线程的状态为 RUNNABLE 状态\n\t\tSystem.out.println(\"current time is \"+new Date())\n\t\t// 在执行睡眠代码时，线程会进入 TIMED_WAITTING 状态，并让出 CPU ，等待时间唤醒\n\t\tTimeUnit.SECONDS.sleep(1);\n\t}\n});\n// 在 start 之后，该线程的状态会进入 RUNNABLE 状态，并且等待系统调度后运行\nthread1.start();\n```\n![Thread State](./jstack/state.png)\n通过上述线程状态转移图可以帮助我们分析当前线程所处的状态以及他们运行逻辑。\n\n我们通过 jstack查看线程栈信息时通常看到的最多的是RUNNABLE,BLOCKED,WAITING和TIMED_WAITING这几种状态，NEW和TERMINATED状态很难捕捉到。\n\n#### 2. \"main\" #1 分析\n以线程名称开头，所有线程都会在第一行打印一些当前线程的运行信息。\n```java\n \"main\" #1 prio=5 os_prio=31 tid=0x00007f8729808800 nid=0x1003 runnable [0x000070000a3d5000]\n        java.lang.Thread.State: RUNNABLE\n        at java.io.UnixFileSystem.list(Native Method)\n        at java.io.File.list(File.java:1122)\n        at java.io.File.listFiles(File.java:1207)\n        at com.tenly.maintenance.analysis.jk.TruckFileReadThread.getAllFiles(TruckFileReadThread.java:36)\n        at com.tenly.maintenance.analysis.jk.TruckFileReadThread.getAllFiles(TruckFileReadThread.java:40)\n        at com.tenly.maintenance.analysis.jk.TruckFileReadThread.run(TruckFileReadThread.java:113)\n        at com.tenly.maintenance.analysis.jk.TruckFileListener.runListen(TruckFileListener.java:20)\n        at com.hive.cin.DoProject.runMain(DoProject.java:31)\n        at com.hive.cin.DoProject.main(DoProject.java:11)\n```\n- main：线程名称\n- \\#1：当前线程ID，从 main线程开始，JVM 根据线程创建的顺序为线程编号\n- prio：是 priority 优先级的缩写，表明了当前线程的优先级，取值范围【1～10】，默认为 5，在虚拟机进行线程调度的时候会参考该优先级为线程分配计算资源，数值越小优先级越高，一般不设置直接使用默认的优先级。\n- os_prio：线程对应系统的优先级\n- nid： 本地线程编号， NativeID的缩写，对应JVM虚拟机中线程映射在操作系统中的线程编号，可以通过 top 命令查看进程对应的线程情况进行相关映射\n\n##### nid的作用以及使用方式\nnid表示线程对应的系统本地的线程编号\n1. 当一个线程占有一个锁的时候，线程堆栈会打印一个－locked<0x22bffb60>\n    ![](./jstack/1.png)\n   ```java\n    // 示例代码\n    public class Main6 {\n        private static ReentrantLock lock = new ReentrantLock();\n    \n        public static void main(String[] args) {\n            final Thread task1 = new Thread(new Task());\n            final Thread task2 = new Thread(new Task());\n            task1.start();\n            task2.start();\n        }\n        private static class Task implements Runnable {\n            @Override\n            public void run() {\n                lock.lock();\n                int i = 0;\n                while (true) {\n                    i++;\n                }\n            }\n        }\n    }\n   ```\n\n2. 当一个线程正在等在其他线程释放该锁，线程堆栈会打印一个－waiting to lock<0x22bffb60>\n    ![](./jstack/2.png)\n \n  \n3. 当一个线程占有一个锁，但又执行在该锁的wait上，线程堆栈中首先打印blocked,然后打印－waiting on <0x22c03c60>\n    ![](./jstack/3.png)\n   ```java\n    // 示例代码\n    public class Main7 {\n        private static Object lock1 = new Object();\n        private static Object lock2 = new Object();\n    \n        public static void main(String[] args) {\n            final Thread task1 = new Thread(() -> {\n                synchronized (lock1) {\n                    try {\n                        TimeUnit.SECONDS.sleep(1);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                    synchronized (lock2) {\n                        int i = 0;\n                        while (true) {\n                            i++;\n                        }\n                    }\n                }\n            });\n            final Thread task2 = new Thread(() -> {\n                synchronized (lock2) {\n                    try {\n                        TimeUnit.SECONDS.sleep(1);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                    synchronized (lock1) {\n                        int i = 0;\n                        while (true) {\n                            i++;\n                        }\n                    }\n                }\n            });\n            task1.start();\n            task2.start();\n        }\n    }\n   ```\n\n\n### 3. jstack，top -Hp获取目标线程的CPU使用情况\n通过 jstack 可以打印出当前进程的线程栈信息，但是我们无法获取到这些线栈的 CPU 占用情况，此时，我们可以使用另外一个bash命令 top 去排查高 CPU 占用的线程。\n首先使用 jps 命令获取目标 java 进程号\n```shell\njps\n```\n然后使用 top -Hp <pid>查看该进程下对应线程的CPU 使用情况：\n\n![](./jstack/4.png)\n\n这里如果我们想查看 PID为19343且线程名称为Thread-1 的堆栈信息的话，使用命令将 19343转化为**16进制**\n\n![](./jstack/5.png)\n\n接下来使用 jstack <pid> 查看线程堆栈信息：\n```shell\njstack 19332 | grep -10 4b8f\n```\n![](./jstack/6.png)\n\n由此我们可以看到目标线程的线程堆栈信息了。\n\n使用 top -Hp <pid>查看目标进程下各个线程的 CPU 使用情况\n![](./jstack/7.png)\n\n也可以通过 使用 pstree 查看进程树、ps -Lf <pid>查看进程详细信息 等等。\n","source":"_posts/2022/05/jstack.md","raw":"---\ntitle: jstack命令\ncomments: true\npassword: xiaoyuge\nabstract: 'Here''s something encrypted, password is required to continue reading.'\nmessage: 'Hey, password is required here.'\ntheme: xray\nwrong_pass_message: 'Oh, this is an invalid password. Check and try again, please.'\nwrong_hash_message: 'Oh, these decrypted content cannot be verified, but you can still have a look.'\ntags: jstack\ncategories: 架构师笔记\nabbrlink: 29371\ndate: 2022-05-06 21:09:27\n---\n###  1. 定义\n**jstack** 是Java虚拟机自带的一种堆栈跟踪工具。\n\n**jstack** 用于生成java虚拟机当前时刻的线程快照。线程快照是当前java虚拟机内每一条线程正在执行的方法堆栈的集合，生成快照的主要目的是定位线程出现长时间停顿的原因，\n如**线程间死锁**、**死循环**、**请求外部资源导致的长时间的等待**。\n\n### 2. 用法\n首先使用**jps** 命令查看需要打印线程栈的进程号\n![jps](./jstack/jps.png)\n其中进程号2602 DoProject是我测试的程序，使用jstack查看下：\n```shell\njstack 2602  #打印2602进程的堆栈信息\n```\n```java\nxiaoyuge@xiaoyuge ~ % jstack 2602\n 2022-05-06 21:26:59\n Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.281-b09 mixed mode):\n\n \"Attach Listener\" #15 daemon prio=9 os_prio=31 tid=0x00007f872b9a1000 nid=0x4c07 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n \"mysql-cj-abandoned-connection-cleanup\" #13 daemon prio=5 os_prio=31 tid=0x00007f872b99e800 nid=0xa803 in Object.wait() [0x000070000bba0000]\n   java.lang.Thread.State: TIMED_WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x00000005c000c5d8> (a java.lang.ref.ReferenceQueue$Lock)\n\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)\n\t- locked <0x00000005c000c5d8> (a java.lang.ref.ReferenceQueue$Lock)\n\tat com.mysql.cj.jdbc.AbandonedConnectionCleanupThread.run(AbandonedConnectionCleanupThread.java:85)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n \"main\" #1 prio=5 os_prio=31 tid=0x00007f8729808800 nid=0x1003 runnable [0x000070000a3d5000]\n        java.lang.Thread.State: RUNNABLE\n        at java.io.UnixFileSystem.list(Native Method)\n        at java.io.File.list(File.java:1122)\n        at java.io.File.listFiles(File.java:1207)\n        at com.tenly.maintenance.analysis.jk.TruckFileReadThread.getAllFiles(TruckFileReadThread.java:36)\n        at com.tenly.maintenance.analysis.jk.TruckFileReadThread.getAllFiles(TruckFileReadThread.java:40)\n        at com.tenly.maintenance.analysis.jk.TruckFileReadThread.run(TruckFileReadThread.java:113)\n        at com.tenly.maintenance.analysis.jk.TruckFileListener.runListen(TruckFileListener.java:20)\n        at com.hive.cin.DoProject.runMain(DoProject.java:31)\n        at com.hive.cin.DoProject.main(DoProject.java:11)\n```\n可以看到控制台打印出了线程的信息以及线程对应的堆栈信息。下面我们对打印结果进行逐行分析：\n#### 1. java.lang.Thread.State: RUNNABLE 线程状态\n    首先分析的是线程状态，在Java中线程分别对应不同的状态，从创建线程的 NEW 到销毁时的 TERMINATED状态。\n    \n```java\n//这是java.lang.Thread.State源码\npublic enum State {\n    /**\n     * Thread state for a thread which has not yet started.\n     * 尚未启动的线程的线程状态。\n     */\n    NEW,\n    /**\n     * Thread state for a runnable thread.  A thread in the runnable\n     * state is executing in the Java virtual machine but it may\n     * be waiting for other resources from the operating system\n     * such as processor.\n     * 可运行线程的线程状态。处于可运行状态的线程正在Java虚拟机中执行，但它可能正在等待来自操作系统的其他资源，例如处理器。\n     */\n    RUNNABLE,\n    /**\n     * Thread state for a thread blocked waiting for a monitor lock. A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait() .\n     * 等待监视器锁定的被阻止线程的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法，或在调用对象后重新进入同步块/方法。\n     */\n    BLOCKED,\n\n    /**\n     * Thread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods:\n     * 1.Object.wait() with no timeout \n     * 2.Thread.join() with no timeout \n     * 3.LockSupport.park()\n     *\n     * A thread in the waiting state is waiting for another thread to perform a particular action.\n     * For example, a thread that has called Object.wait() on an object is waiting for another thread to call\n     * Object.notify or Object.notifyAll() on that object. A thread that has called Thread.join()\n     * is waiting for a specified thread to terminate.\n     */\n    WAITING,\n\n    /**\n     * Thread state for a waiting thread with a specified waiting time. A thread is in the timed waiting state due to calling one of\n     * the following methods with a specified positive waiting time:\n     * 1.Thread.sleep()\n     * 2.Object.wait() with timeout\n     * 3.Thread.join() with timeout\n     * 4.LockSupport.parkNanos()\n     * 5.LockSupport.parkUntil()\n     */\n    TIMED_WAITING,\n    /**\n     * Thread state for a terminated thread. The thread has completed execution.\n     */\n    TERMINATED;\n}\n```\n使用测试代码查看线程状态转化\n```java\nprivate static boolean exit = false;\n// 在 new 一个线程对象后，该线程的状态为 NEW 状态\nThread thread1 = new Thread(()->{\n\twhile(!exit){\n\t\t// 在执行线程中代码时，线程的状态为 RUNNABLE 状态\n\t\tSystem.out.println(\"current time is \"+new Date())\n\t\t// 在执行睡眠代码时，线程会进入 TIMED_WAITTING 状态，并让出 CPU ，等待时间唤醒\n\t\tTimeUnit.SECONDS.sleep(1);\n\t}\n});\n// 在 start 之后，该线程的状态会进入 RUNNABLE 状态，并且等待系统调度后运行\nthread1.start();\n```\n![Thread State](./jstack/state.png)\n通过上述线程状态转移图可以帮助我们分析当前线程所处的状态以及他们运行逻辑。\n\n我们通过 jstack查看线程栈信息时通常看到的最多的是RUNNABLE,BLOCKED,WAITING和TIMED_WAITING这几种状态，NEW和TERMINATED状态很难捕捉到。\n\n#### 2. \"main\" #1 分析\n以线程名称开头，所有线程都会在第一行打印一些当前线程的运行信息。\n```java\n \"main\" #1 prio=5 os_prio=31 tid=0x00007f8729808800 nid=0x1003 runnable [0x000070000a3d5000]\n        java.lang.Thread.State: RUNNABLE\n        at java.io.UnixFileSystem.list(Native Method)\n        at java.io.File.list(File.java:1122)\n        at java.io.File.listFiles(File.java:1207)\n        at com.tenly.maintenance.analysis.jk.TruckFileReadThread.getAllFiles(TruckFileReadThread.java:36)\n        at com.tenly.maintenance.analysis.jk.TruckFileReadThread.getAllFiles(TruckFileReadThread.java:40)\n        at com.tenly.maintenance.analysis.jk.TruckFileReadThread.run(TruckFileReadThread.java:113)\n        at com.tenly.maintenance.analysis.jk.TruckFileListener.runListen(TruckFileListener.java:20)\n        at com.hive.cin.DoProject.runMain(DoProject.java:31)\n        at com.hive.cin.DoProject.main(DoProject.java:11)\n```\n- main：线程名称\n- \\#1：当前线程ID，从 main线程开始，JVM 根据线程创建的顺序为线程编号\n- prio：是 priority 优先级的缩写，表明了当前线程的优先级，取值范围【1～10】，默认为 5，在虚拟机进行线程调度的时候会参考该优先级为线程分配计算资源，数值越小优先级越高，一般不设置直接使用默认的优先级。\n- os_prio：线程对应系统的优先级\n- nid： 本地线程编号， NativeID的缩写，对应JVM虚拟机中线程映射在操作系统中的线程编号，可以通过 top 命令查看进程对应的线程情况进行相关映射\n\n##### nid的作用以及使用方式\nnid表示线程对应的系统本地的线程编号\n1. 当一个线程占有一个锁的时候，线程堆栈会打印一个－locked<0x22bffb60>\n    ![](./jstack/1.png)\n   ```java\n    // 示例代码\n    public class Main6 {\n        private static ReentrantLock lock = new ReentrantLock();\n    \n        public static void main(String[] args) {\n            final Thread task1 = new Thread(new Task());\n            final Thread task2 = new Thread(new Task());\n            task1.start();\n            task2.start();\n        }\n        private static class Task implements Runnable {\n            @Override\n            public void run() {\n                lock.lock();\n                int i = 0;\n                while (true) {\n                    i++;\n                }\n            }\n        }\n    }\n   ```\n\n2. 当一个线程正在等在其他线程释放该锁，线程堆栈会打印一个－waiting to lock<0x22bffb60>\n    ![](./jstack/2.png)\n \n  \n3. 当一个线程占有一个锁，但又执行在该锁的wait上，线程堆栈中首先打印blocked,然后打印－waiting on <0x22c03c60>\n    ![](./jstack/3.png)\n   ```java\n    // 示例代码\n    public class Main7 {\n        private static Object lock1 = new Object();\n        private static Object lock2 = new Object();\n    \n        public static void main(String[] args) {\n            final Thread task1 = new Thread(() -> {\n                synchronized (lock1) {\n                    try {\n                        TimeUnit.SECONDS.sleep(1);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                    synchronized (lock2) {\n                        int i = 0;\n                        while (true) {\n                            i++;\n                        }\n                    }\n                }\n            });\n            final Thread task2 = new Thread(() -> {\n                synchronized (lock2) {\n                    try {\n                        TimeUnit.SECONDS.sleep(1);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                    synchronized (lock1) {\n                        int i = 0;\n                        while (true) {\n                            i++;\n                        }\n                    }\n                }\n            });\n            task1.start();\n            task2.start();\n        }\n    }\n   ```\n\n\n### 3. jstack，top -Hp获取目标线程的CPU使用情况\n通过 jstack 可以打印出当前进程的线程栈信息，但是我们无法获取到这些线栈的 CPU 占用情况，此时，我们可以使用另外一个bash命令 top 去排查高 CPU 占用的线程。\n首先使用 jps 命令获取目标 java 进程号\n```shell\njps\n```\n然后使用 top -Hp <pid>查看该进程下对应线程的CPU 使用情况：\n\n![](./jstack/4.png)\n\n这里如果我们想查看 PID为19343且线程名称为Thread-1 的堆栈信息的话，使用命令将 19343转化为**16进制**\n\n![](./jstack/5.png)\n\n接下来使用 jstack <pid> 查看线程堆栈信息：\n```shell\njstack 19332 | grep -10 4b8f\n```\n![](./jstack/6.png)\n\n由此我们可以看到目标线程的线程堆栈信息了。\n\n使用 top -Hp <pid>查看目标进程下各个线程的 CPU 使用情况\n![](./jstack/7.png)\n\n也可以通过 使用 pstree 查看进程树、ps -Lf <pid>查看进程详细信息 等等。\n","slug":"jstack","published":1,"updated":"2022-06-01T07:26:41.446Z","layout":"post","photos":[],"link":"","_id":"cl424hx5b000sad5ietswgj66","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"Oh, these decrypted content cannot be verified, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"a0f99f37417581a5011278b1952728b9cf4f79022d02508434577b20895096eb\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-xray\">\n      <input class=\"hbe hbe-input-field hbe-input-field-xray\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-xray\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-xray\">Hey, password is required here.</span>\n      </label>\n      <svg class=\"hbe hbe-graphic hbe-graphic-xray\" width=\"300%\" height=\"100%\" viewBox=\"0 0 1200 60\" preserveAspectRatio=\"none\">\n        <path d=\"M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0\"></path>\n        <path d=\"M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0\"></path>\n      </svg>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"Here's something encrypted, password is required to continue reading.","more":"Here's something encrypted, password is required to continue reading.","origin":"<h3 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1. 定义\"></a>1. 定义</h3><p><strong>jstack</strong> 是Java虚拟机自带的一种堆栈跟踪工具。</p>\n<p><strong>jstack</strong> 用于生成java虚拟机当前时刻的线程快照。线程快照是当前java虚拟机内每一条线程正在执行的方法堆栈的集合，生成快照的主要目的是定位线程出现长时间停顿的原因，<br>如<strong>线程间死锁</strong>、<strong>死循环</strong>、<strong>请求外部资源导致的长时间的等待</strong>。</p>\n<h3 id=\"2-用法\"><a href=\"#2-用法\" class=\"headerlink\" title=\"2. 用法\"></a>2. 用法</h3><p>首先使用<strong>jps</strong> 命令查看需要打印线程栈的进程号<br><img src=\"/jstack/jps.png\" alt=\"jps\"><br>其中进程号2602 DoProject是我测试的程序，使用jstack查看下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstack 2602  #打印2602进程的堆栈信息</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xiaoyuge<span class=\"meta\">@xiaoyuge</span> ~ % jstack <span class=\"number\">2602</span></span><br><span class=\"line\"> <span class=\"number\">2022</span>-<span class=\"number\">05</span>-<span class=\"number\">06</span> <span class=\"number\">21</span>:<span class=\"number\">26</span>:<span class=\"number\">59</span></span><br><span class=\"line\"> <span class=\"function\">Full thread dump Java <span class=\"title\">HotSpot</span><span class=\"params\">(TM)</span> 64-Bit Server <span class=\"title\">VM</span> <span class=\"params\">(<span class=\"number\">25.281</span>-b09 mixed mode)</span>:</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"> &quot;Attach Listener&quot; #15 daemon prio</span>=<span class=\"number\">9</span> os_prio=<span class=\"number\">31</span> tid=<span class=\"number\">0x00007f872b9a1000</span> nid=<span class=\"number\">0x4c07</span> waiting on condition [<span class=\"number\">0x0000000000000000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"string\">&quot;mysql-cj-abandoned-connection-cleanup&quot;</span> #<span class=\"number\">13</span> daemon prio=<span class=\"number\">5</span> os_prio=<span class=\"number\">31</span> tid=<span class=\"number\">0x00007f872b99e800</span> nid=<span class=\"number\">0xa803</span> in Object.wait() [<span class=\"number\">0x000070000bba0000</span>]</span><br><span class=\"line\">   java.lang.Thread.State: TIMED_WAITING (on object monitor)</span><br><span class=\"line\">\tat java.lang.Object.wait(Native Method)</span><br><span class=\"line\">\t- waiting on &lt;<span class=\"number\">0x00000005c000c5d8</span>&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class=\"line\">\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:<span class=\"number\">144</span>)</span><br><span class=\"line\">\t- locked &lt;<span class=\"number\">0x00000005c000c5d8</span>&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class=\"line\">\tat com.mysql.cj.jdbc.AbandonedConnectionCleanupThread.run(AbandonedConnectionCleanupThread.java:<span class=\"number\">85</span>)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class=\"number\">1149</span>)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class=\"number\">624</span>)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:<span class=\"number\">748</span>)</span><br><span class=\"line\"> <span class=\"string\">&quot;main&quot;</span> #<span class=\"number\">1</span> prio=<span class=\"number\">5</span> os_prio=<span class=\"number\">31</span> tid=<span class=\"number\">0x00007f8729808800</span> nid=<span class=\"number\">0x1003</span> runnable [<span class=\"number\">0x000070000a3d5000</span>]</span><br><span class=\"line\">        java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">        at java.io.UnixFileSystem.list(Native Method)</span><br><span class=\"line\">        at java.io.File.list(File.java:<span class=\"number\">1122</span>)</span><br><span class=\"line\">        at java.io.File.listFiles(File.java:<span class=\"number\">1207</span>)</span><br><span class=\"line\">        at com.tenly.maintenance.analysis.jk.TruckFileReadThread.getAllFiles(TruckFileReadThread.java:<span class=\"number\">36</span>)</span><br><span class=\"line\">        at com.tenly.maintenance.analysis.jk.TruckFileReadThread.getAllFiles(TruckFileReadThread.java:<span class=\"number\">40</span>)</span><br><span class=\"line\">        at com.tenly.maintenance.analysis.jk.TruckFileReadThread.run(TruckFileReadThread.java:<span class=\"number\">113</span>)</span><br><span class=\"line\">        at com.tenly.maintenance.analysis.jk.TruckFileListener.runListen(TruckFileListener.java:<span class=\"number\">20</span>)</span><br><span class=\"line\">        at com.hive.cin.DoProject.runMain(DoProject.java:<span class=\"number\">31</span>)</span><br><span class=\"line\">        at com.hive.cin.DoProject.main(DoProject.java:<span class=\"number\">11</span>)</span><br></pre></td></tr></table></figure>\n<p>可以看到控制台打印出了线程的信息以及线程对应的堆栈信息。下面我们对打印结果进行逐行分析：</p>\n<h4 id=\"1-java-lang-Thread-State-RUNNABLE-线程状态\"><a href=\"#1-java-lang-Thread-State-RUNNABLE-线程状态\" class=\"headerlink\" title=\"1. java.lang.Thread.State: RUNNABLE 线程状态\"></a>1. java.lang.Thread.State: RUNNABLE 线程状态</h4><pre><code>首先分析的是线程状态，在Java中线程分别对应不同的状态，从创建线程的 NEW 到销毁时的 TERMINATED状态。\n</code></pre>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这是java.lang.Thread.State源码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">State</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a thread which has not yet started.</span></span><br><span class=\"line\"><span class=\"comment\">     * 尚未启动的线程的线程状态。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    NEW,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a runnable thread.  A thread in the runnable</span></span><br><span class=\"line\"><span class=\"comment\">     * state is executing in the Java virtual machine but it may</span></span><br><span class=\"line\"><span class=\"comment\">     * be waiting for other resources from the operating system</span></span><br><span class=\"line\"><span class=\"comment\">     * such as processor.</span></span><br><span class=\"line\"><span class=\"comment\">     * 可运行线程的线程状态。处于可运行状态的线程正在Java虚拟机中执行，但它可能正在等待来自操作系统的其他资源，例如处理器。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RUNNABLE,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a thread blocked waiting for a monitor lock. A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait() .</span></span><br><span class=\"line\"><span class=\"comment\">     * 等待监视器锁定的被阻止线程的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法，或在调用对象后重新进入同步块/方法。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    BLOCKED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods:</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.Object.wait() with no timeout </span></span><br><span class=\"line\"><span class=\"comment\">     * 2.Thread.join() with no timeout </span></span><br><span class=\"line\"><span class=\"comment\">     * 3.LockSupport.park()</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * A thread in the waiting state is waiting for another thread to perform a particular action.</span></span><br><span class=\"line\"><span class=\"comment\">     * For example, a thread that has called Object.wait() on an object is waiting for another thread to call</span></span><br><span class=\"line\"><span class=\"comment\">     * Object.notify or Object.notifyAll() on that object. A thread that has called Thread.join()</span></span><br><span class=\"line\"><span class=\"comment\">     * is waiting for a specified thread to terminate.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    WAITING,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a waiting thread with a specified waiting time. A thread is in the timed waiting state due to calling one of</span></span><br><span class=\"line\"><span class=\"comment\">     * the following methods with a specified positive waiting time:</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.Thread.sleep()</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.Object.wait() with timeout</span></span><br><span class=\"line\"><span class=\"comment\">     * 3.Thread.join() with timeout</span></span><br><span class=\"line\"><span class=\"comment\">     * 4.LockSupport.parkNanos()</span></span><br><span class=\"line\"><span class=\"comment\">     * 5.LockSupport.parkUntil()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    TIMED_WAITING,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a terminated thread. The thread has completed execution.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    TERMINATED;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用测试代码查看线程状态转化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> exit = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// 在 new 一个线程对象后，该线程的状态为 NEW 状态</span></span><br><span class=\"line\">Thread thread1 = <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!exit)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 在执行线程中代码时，线程的状态为 RUNNABLE 状态</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;current time is &quot;</span>+<span class=\"keyword\">new</span> Date())</span><br><span class=\"line\">\t\t<span class=\"comment\">// 在执行睡眠代码时，线程会进入 TIMED_WAITTING 状态，并让出 CPU ，等待时间唤醒</span></span><br><span class=\"line\">\t\tTimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 在 start 之后，该线程的状态会进入 RUNNABLE 状态，并且等待系统调度后运行</span></span><br><span class=\"line\">thread1.start();</span><br></pre></td></tr></table></figure>\n<p><img src=\"/jstack/state.png\" alt=\"Thread State\"><br>通过上述线程状态转移图可以帮助我们分析当前线程所处的状态以及他们运行逻辑。</p>\n<p>我们通过 jstack查看线程栈信息时通常看到的最多的是RUNNABLE,BLOCKED,WAITING和TIMED_WAITING这几种状态，NEW和TERMINATED状态很难捕捉到。</p>\n<h4 id=\"2-“main”-1-分析\"><a href=\"#2-“main”-1-分析\" class=\"headerlink\" title=\"2. “main” #1 分析\"></a>2. “main” #1 分析</h4><p>以线程名称开头，所有线程都会在第一行打印一些当前线程的运行信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;main&quot;</span> #<span class=\"number\">1</span> prio=<span class=\"number\">5</span> os_prio=<span class=\"number\">31</span> tid=<span class=\"number\">0x00007f8729808800</span> nid=<span class=\"number\">0x1003</span> runnable [<span class=\"number\">0x000070000a3d5000</span>]</span><br><span class=\"line\">       java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">       at java.io.UnixFileSystem.list(Native Method)</span><br><span class=\"line\">       at java.io.File.list(File.java:<span class=\"number\">1122</span>)</span><br><span class=\"line\">       at java.io.File.listFiles(File.java:<span class=\"number\">1207</span>)</span><br><span class=\"line\">       at com.tenly.maintenance.analysis.jk.TruckFileReadThread.getAllFiles(TruckFileReadThread.java:<span class=\"number\">36</span>)</span><br><span class=\"line\">       at com.tenly.maintenance.analysis.jk.TruckFileReadThread.getAllFiles(TruckFileReadThread.java:<span class=\"number\">40</span>)</span><br><span class=\"line\">       at com.tenly.maintenance.analysis.jk.TruckFileReadThread.run(TruckFileReadThread.java:<span class=\"number\">113</span>)</span><br><span class=\"line\">       at com.tenly.maintenance.analysis.jk.TruckFileListener.runListen(TruckFileListener.java:<span class=\"number\">20</span>)</span><br><span class=\"line\">       at com.hive.cin.DoProject.runMain(DoProject.java:<span class=\"number\">31</span>)</span><br><span class=\"line\">       at com.hive.cin.DoProject.main(DoProject.java:<span class=\"number\">11</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>main：线程名称</li>\n<li>#1：当前线程ID，从 main线程开始，JVM 根据线程创建的顺序为线程编号</li>\n<li>prio：是 priority 优先级的缩写，表明了当前线程的优先级，取值范围【1～10】，默认为 5，在虚拟机进行线程调度的时候会参考该优先级为线程分配计算资源，数值越小优先级越高，一般不设置直接使用默认的优先级。</li>\n<li>os_prio：线程对应系统的优先级</li>\n<li>nid： 本地线程编号， NativeID的缩写，对应JVM虚拟机中线程映射在操作系统中的线程编号，可以通过 top 命令查看进程对应的线程情况进行相关映射</li>\n</ul>\n<h5 id=\"nid的作用以及使用方式\"><a href=\"#nid的作用以及使用方式\" class=\"headerlink\" title=\"nid的作用以及使用方式\"></a>nid的作用以及使用方式</h5><p>nid表示线程对应的系统本地的线程编号</p>\n<ol>\n<li><p>当一个线程占有一个锁的时候，线程堆栈会打印一个－locked&lt;0x22bffb60&gt;<br> <img src=\"/jstack/1.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 示例代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main6</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Thread task1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Task());</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Thread task2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Task());</span><br><span class=\"line\">        task1.start();</span><br><span class=\"line\">        task2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>当一个线程正在等在其他线程释放该锁，线程堆栈会打印一个－waiting to lock&lt;0x22bffb60&gt;<br> <img src=\"/jstack/2.png\"></p>\n</li>\n<li><p>当一个线程占有一个锁，但又执行在该锁的wait上，线程堆栈中首先打印blocked,然后打印－waiting on &lt;0x22c03c60&gt;<br> <img src=\"/jstack/3.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 示例代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main7</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object lock1 = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object lock2 = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Thread task1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (lock1) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lock2) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                        i++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Thread task2 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (lock2) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lock1) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                        i++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        task1.start();</span><br><span class=\"line\">        task2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"3-jstack，top-Hp获取目标线程的CPU使用情况\"><a href=\"#3-jstack，top-Hp获取目标线程的CPU使用情况\" class=\"headerlink\" title=\"3. jstack，top -Hp获取目标线程的CPU使用情况\"></a>3. jstack，top -Hp获取目标线程的CPU使用情况</h3><p>通过 jstack 可以打印出当前进程的线程栈信息，但是我们无法获取到这些线栈的 CPU 占用情况，此时，我们可以使用另外一个bash命令 top 去排查高 CPU 占用的线程。<br>首先使用 jps 命令获取目标 java 进程号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jps</span><br></pre></td></tr></table></figure>\n<p>然后使用 top -Hp <pid>查看该进程下对应线程的CPU 使用情况：</pid></p>\n<p><img src=\"/jstack/4.png\"></p>\n<p>这里如果我们想查看 PID为19343且线程名称为Thread-1 的堆栈信息的话，使用命令将 19343转化为<strong>16进制</strong></p>\n<p><img src=\"/jstack/5.png\"></p>\n<p>接下来使用 jstack <pid> 查看线程堆栈信息：</pid></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstack 19332 | grep -10 4b8f</span><br></pre></td></tr></table></figure>\n<p><img src=\"/jstack/6.png\"></p>\n<p>由此我们可以看到目标线程的线程堆栈信息了。</p>\n<p>使用 top -Hp <pid>查看目标进程下各个线程的 CPU 使用情况<br><img src=\"/jstack/7.png\"></pid></p>\n<p>也可以通过 使用 pstree 查看进程树、ps -Lf <pid>查看进程详细信息 等等。</pid></p>\n","encrypt":true},{"title":"Linux安装JDK以及配置","comments":1,"translate_title":"nginx-install","abbrlink":40446,"date":"2021-06-29T01:02:34.000Z","_content":"\n### 1. 安装包安装\n1. 下载jdk安装包（https://www.oracle.com/cn/java/technologies/javase/downloads/#java8）\n    ![](./jdk-install/1.png)\n\n2. 上传并解压\n- 在/usr/local/目录下新建文件夹：java\n- 上传介质到/usr/local/java/\n- 解压：tar -zxvf jdk-8u311-linux-x64.tar.gz\n3. 配置环境变量\n    ```shell\n    # 编辑配置文件\n    vim /etc/profile\n    \n    # 在末尾追加\n    export JAVA_HOME=/usr/local/java/jdk1.8.0_311\n    export JRE_HOME=/usr/local/java/jdk1.8.0_311/jre\n    export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH\n    export PATH=$JAVA_HOME/bin:$PATH\n    \n    # 使配置文件生效\n    source /etc/profile\n    ```\n4. 测试\n    ```shell\n    # 测试版本号\n    java -version\n    \n    # 返回\n    java version \"1.8.0_311\"\n    Java(TM) SE Runtime Environment (build 1.8.0_311-b10)\n    Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)\n    \n    # 查询JAVA_HOME\n    echo $JAVA_HOME\n    \n    # 返回\n    /usr/local/java/jdk1.8.0_311\n    ```\n   \n\n## 2. yum源安装\n```shell\n    # 检查是否已经存在java相关命令\n    rpm -qa|grep java\n    rpm -qa|grep jdk\n    rpm -qa|grep gcj\n    \n    # 如果需要卸载\n    rpm -qa | grep java | xargs rpm -e --nodeps\n    \n    # 检索Java1.8源列表\n    yum list java-1.8*\n    \n    # 安装Java1.8\n    yum install java-1.8.0-openjdk* -y\n    \n    # 查询JAVA_HOME\n    which java\n    \n    # 返回\n    /usr/bin/java\n    \n    # ls -l命令\n    ls -l /usr/bin/java\n    \n    # 返回\n    lrwxrwxrwx 1 root root 22 Nov 13 14:37 /usr/bin/java -> /etc/alternatives/java\n    \n    # ls -l命令\n    ls -l /etc/alternatives/java\n    \n    # 返回\n    lrwxrwxrwx 1 root root 73 Nov 13 14:37 /etc/alternatives/java -> /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64/jre/bin/java\n    \n    # 则JAVA_HOME路径为：/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64\n```\n","source":"_posts/2021/06/jdk-install.md","raw":"---\ntitle: Linux安装JDK以及配置\ncomments: true\ntags: jdk\ncategories: linux\ntranslate_title: nginx-install\nabbrlink: 40446\ndate: 2021-06-29 09:02:34\n---\n\n### 1. 安装包安装\n1. 下载jdk安装包（https://www.oracle.com/cn/java/technologies/javase/downloads/#java8）\n    ![](./jdk-install/1.png)\n\n2. 上传并解压\n- 在/usr/local/目录下新建文件夹：java\n- 上传介质到/usr/local/java/\n- 解压：tar -zxvf jdk-8u311-linux-x64.tar.gz\n3. 配置环境变量\n    ```shell\n    # 编辑配置文件\n    vim /etc/profile\n    \n    # 在末尾追加\n    export JAVA_HOME=/usr/local/java/jdk1.8.0_311\n    export JRE_HOME=/usr/local/java/jdk1.8.0_311/jre\n    export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH\n    export PATH=$JAVA_HOME/bin:$PATH\n    \n    # 使配置文件生效\n    source /etc/profile\n    ```\n4. 测试\n    ```shell\n    # 测试版本号\n    java -version\n    \n    # 返回\n    java version \"1.8.0_311\"\n    Java(TM) SE Runtime Environment (build 1.8.0_311-b10)\n    Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)\n    \n    # 查询JAVA_HOME\n    echo $JAVA_HOME\n    \n    # 返回\n    /usr/local/java/jdk1.8.0_311\n    ```\n   \n\n## 2. yum源安装\n```shell\n    # 检查是否已经存在java相关命令\n    rpm -qa|grep java\n    rpm -qa|grep jdk\n    rpm -qa|grep gcj\n    \n    # 如果需要卸载\n    rpm -qa | grep java | xargs rpm -e --nodeps\n    \n    # 检索Java1.8源列表\n    yum list java-1.8*\n    \n    # 安装Java1.8\n    yum install java-1.8.0-openjdk* -y\n    \n    # 查询JAVA_HOME\n    which java\n    \n    # 返回\n    /usr/bin/java\n    \n    # ls -l命令\n    ls -l /usr/bin/java\n    \n    # 返回\n    lrwxrwxrwx 1 root root 22 Nov 13 14:37 /usr/bin/java -> /etc/alternatives/java\n    \n    # ls -l命令\n    ls -l /etc/alternatives/java\n    \n    # 返回\n    lrwxrwxrwx 1 root root 73 Nov 13 14:37 /etc/alternatives/java -> /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64/jre/bin/java\n    \n    # 则JAVA_HOME路径为：/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64\n```\n","slug":"jdk-install","published":1,"updated":"2022-03-29T06:27:44.644Z","layout":"post","photos":[],"link":"","_id":"cl424hx5b000vad5i6nngh5zj","content":"<h3 id=\"1-安装包安装\"><a href=\"#1-安装包安装\" class=\"headerlink\" title=\"1. 安装包安装\"></a>1. 安装包安装</h3><ol>\n<li><p>下载jdk安装包（<a href=\"https://www.oracle.com/cn/java/technologies/javase/downloads/#java8%EF%BC%89\">https://www.oracle.com/cn/java/technologies/javase/downloads/#java8）</a><br> <img src=\"/jdk-install/1.png\"></p>\n</li>\n<li><p>上传并解压</p>\n</li>\n</ol>\n<ul>\n<li>在/usr/local/目录下新建文件夹：java</li>\n<li>上传介质到/usr/local/java/</li>\n<li>解压：tar -zxvf jdk-8u311-linux-x64.tar.gz</li>\n</ul>\n<ol start=\"3\">\n<li>配置环境变量 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 编辑配置文件</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在末尾追加</span></span><br><span class=\"line\">export JAVA_HOME=/usr/local/java/jdk1.8.0_311</span><br><span class=\"line\">export JRE_HOME=/usr/local/java/jdk1.8.0_311/jre</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使配置文件生效</span></span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></li>\n<li>测试 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试版本号</span></span><br><span class=\"line\">java -version</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">java version &quot;1.8.0_311&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_311-b10)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查询JAVA_HOME</span></span><br><span class=\"line\">echo $JAVA_HOME</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">/usr/local/java/jdk1.8.0_311</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"2-yum源安装\"><a href=\"#2-yum源安装\" class=\"headerlink\" title=\"2. yum源安装\"></a>2. yum源安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 检查是否已经存在java相关命令</span></span><br><span class=\"line\">rpm -qa|grep java</span><br><span class=\"line\">rpm -qa|grep jdk</span><br><span class=\"line\">rpm -qa|grep gcj</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果需要卸载</span></span><br><span class=\"line\">rpm -qa | grep java | xargs rpm -e --nodeps</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 检索Java1.8源列表</span></span><br><span class=\"line\">yum list java-1.8*</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装Java1.8</span></span><br><span class=\"line\">yum install java-1.8.0-openjdk* -y</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查询JAVA_HOME</span></span><br><span class=\"line\">which java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">/usr/bin/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls -l命令</span></span><br><span class=\"line\">ls -l /usr/bin/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">lrwxrwxrwx 1 root root 22 Nov 13 14:37 /usr/bin/java -&gt; /etc/alternatives/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls -l命令</span></span><br><span class=\"line\">ls -l /etc/alternatives/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">lrwxrwxrwx 1 root root 73 Nov 13 14:37 /etc/alternatives/java -&gt; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64/jre/bin/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 则JAVA_HOME路径为：/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h3 id=\"1-安装包安装\"><a href=\"#1-安装包安装\" class=\"headerlink\" title=\"1. 安装包安装\"></a>1. 安装包安装</h3><ol>\n<li><p>下载jdk安装包（<a href=\"https://www.oracle.com/cn/java/technologies/javase/downloads/#java8%EF%BC%89\">https://www.oracle.com/cn/java/technologies/javase/downloads/#java8）</a><br> <img src=\"/jdk-install/1.png\"></p>\n</li>\n<li><p>上传并解压</p>\n</li>\n</ol>\n<ul>\n<li>在/usr/local/目录下新建文件夹：java</li>\n<li>上传介质到/usr/local/java/</li>\n<li>解压：tar -zxvf jdk-8u311-linux-x64.tar.gz</li>\n</ul>\n<ol start=\"3\">\n<li>配置环境变量 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 编辑配置文件</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在末尾追加</span></span><br><span class=\"line\">export JAVA_HOME=/usr/local/java/jdk1.8.0_311</span><br><span class=\"line\">export JRE_HOME=/usr/local/java/jdk1.8.0_311/jre</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使配置文件生效</span></span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></li>\n<li>测试 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试版本号</span></span><br><span class=\"line\">java -version</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">java version &quot;1.8.0_311&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_311-b10)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查询JAVA_HOME</span></span><br><span class=\"line\">echo $JAVA_HOME</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">/usr/local/java/jdk1.8.0_311</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"2-yum源安装\"><a href=\"#2-yum源安装\" class=\"headerlink\" title=\"2. yum源安装\"></a>2. yum源安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 检查是否已经存在java相关命令</span></span><br><span class=\"line\">rpm -qa|grep java</span><br><span class=\"line\">rpm -qa|grep jdk</span><br><span class=\"line\">rpm -qa|grep gcj</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果需要卸载</span></span><br><span class=\"line\">rpm -qa | grep java | xargs rpm -e --nodeps</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 检索Java1.8源列表</span></span><br><span class=\"line\">yum list java-1.8*</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装Java1.8</span></span><br><span class=\"line\">yum install java-1.8.0-openjdk* -y</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查询JAVA_HOME</span></span><br><span class=\"line\">which java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">/usr/bin/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls -l命令</span></span><br><span class=\"line\">ls -l /usr/bin/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">lrwxrwxrwx 1 root root 22 Nov 13 14:37 /usr/bin/java -&gt; /etc/alternatives/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls -l命令</span></span><br><span class=\"line\">ls -l /etc/alternatives/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">lrwxrwxrwx 1 root root 73 Nov 13 14:37 /etc/alternatives/java -&gt; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64/jre/bin/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 则JAVA_HOME路径为：/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Linux安装mysql8","comments":1,"translate_title":"nginx-install","abbrlink":3212,"date":"2021-06-29T06:40:08.000Z","_content":"### 1. 下载\n- 下载地址：https://downloads.mysql.com/archives/community/\n- 百度网盘链接: https://pan.baidu.com/s/1BkOuYlz2Ef7KRe9gikDUCg  密码: 0l15\n- Linux镜像下载\n    ```shell\n      cd /usr/local/src/\n      wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.27-linux-glibc2.12-x86_64.tar.gz\n    ```\n  \n### 2.卸载mariadb\n```shell\n#查看mariadb 的安装包\nrpm -qa | grep mariadb\n\n#卸载 mariadb\nrpm -e mariadb-libs-5.5.68-1.el7.x86_64 --nodeps\n\n#卸载验证\nrpm -qa | grep mariadb\n```\n\n### 3.安装\n1. 解压安装包\n    ```shell\n    # 进入下载目录\n    cd /usr/local/src/\n   \n   #解压， 如果是.tar则用 tar -zxvf解压， 我下载的是.tar.xz包，使用的是tar -xvJf\n    tar -xvJf mysql-8.0.28-linux-glibc2.17-x86_64-minimal.tar.xz\n   \n   # 移动解压后的文件夹至/usr/local\n    mv /usr/local/src/mysql-8.0.28-linux-glibc2.17-x86_64-minimal /usr/local/\n    cd /usr/local/\n   \n    # 重命名\n    mv ./mysql-8.0.28-linux-glibc2.17-x86_64-minimal mysql8.0\n   \n    # 创建文件夹data,存储文件;\n    cd /usr/local/mysql8.0/\n    mkdir ./data\n    ```\n   \n2. 创建用户以及用户组\n    ```shell\n    # 用户组\n    groupadd mysql\n    # 用户 （用户名/密码）\n    useradd -g mysql mysql\n    ```\n   \n3. 授权\n    ```shell\n    chown -R mysql.mysql /usr/local/mysql8.0/ \n    #或\n    chown -R mysql .\n    chgrp -R mysql .\n    ```\n   \n4. 初始化数据库\n    ```shell\n    # 查看当前所在目录\n    pwd # 若显示/usr/local/mysql-8.0,请继续执行，否则请先进入此目录/usr/local/mysql-8.0\n    # 初始化 注意查看是否存在相关目录,若不存在,请新建\n    ./bin/mysqld --user=mysql --basedir=/usr/local/mysql8.0/ --datadir=/usr/local/mysql8.0/data/ --initialize ; # 亲测\n    #或\n    ./bin/mysql --user=mysql --basedir=/usr/local/mysql8.0/ --datadir=/usr/local/mysql8.0/data/ --initialize ;\n   \n    #如果出现错误：./bin/mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory\n    yum install -y libaio  #安装后在初始化就OK了\n    ```\n   ![](./mysql-install/3.png)\n    注意：后面白色高亮选中的是初始密码！！！！\n   \n5. 配置my.cnf\n    ```shell\n    cp /usr/local/mysql8.0/support-files/mysql.server /etc/init.d/mysqld\n    vim /etc/my.cnf\n    ```\n   在配置中键入如下内容：\n    ```properties\n       [mysqld]\n      port=3306\n      # 设置mysql的安装目录\n      basedir=/usr/local/mysql8\n      # 设置mysql数据库的数据的存放目录\n      datadir=/usr/local/mysql8/mysqldb\n      # 允许最大连接数\n      max_connections=1000\n      # 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统\n      max_connect_errors=100\n      # 服务端使用的字符集默认为UTF8\n      character-set-server=utf8mb4\n      # 创建新表时将使用的默认存储引擎\n      default-storage-engine=INNODB\n      # 默认使用“mysql_native_password”插件认证\n      default_authentication_plugin=mysql_native_password\n      #是否对sql语句大小写敏感，1表示不敏感\n      lower_case_table_names = 1\n      #MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭\n      #MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效\n      interactive_timeout = 1800\n      wait_timeout = 1800\n      #Metadata Lock最大时长（秒）， 一般用于控制 alter操作的最大时长sine mysql5.6\n      #执行 DML操作时除了增加innodb事务锁外还增加Metadata Lock，其他alter（DDL）session将阻塞\n      lock_wait_timeout = 3600\n      #内部内存临时表的最大值。\n      #比如大数据量的group by ,order by时可能用到临时表，\n      #超过了这个值将写入磁盘，系统IO压力增大\n      tmp_table_size = 64M\n      max_heap_table_size = 64M\n      [mysql]\n      # 设置mysql客户端默认字符集\n      default-character-set=utf8mb4\n      [client]\n      # 设置mysql客户端连接服务端时默认使用的端口\n      port=3306\n      default-character-set=utf8mb4\n    ```\n\n6. 建立Mysql服务\n    ```shell\n    cp -a ./support-files/mysql.server /etc/init.d/mysql\n    chmod +x /etc/init.d/mysql\n    chkconfig --add mysql\n    chkconfig --list mysql\n    ```\n   ![](./mysql-install/4.png)\n\n7. 启动Mysql服务\n    ```shell\n    # 启动\n    service mysql start;\n    # 查看启动状态\n    service mysql status;\n    ```\n   如果提示： -bash: mysql: command not found\n    ```shell\n    ln -s /usr/local/mysql8.0/bin/mysql /usr/bin\n   ```\n   \n8. 登录Mysql\n    ```shell\n    mysql -uroot -p\n    # 输入\"初始化数据库\"操作时的\"临时密码\"\n    ```\n   ![](./mysql-install/5.png)\n\n    修改密码：\n    ```shell\n    ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '新密码';\n    ```\n   \n9. 远程连接\n    1. 在my.cnf的mysqld下增加\n        ```properties\n        default_authentication_plugin=mysql_native_password\n        ```\n    2. 进入mysql命令行\n        ```mysql\n        use mysql\n        update user set host ='%' where user='root';\n        ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'root';\n        FLUSH PRIVILEGES;\n        ```\n       ![](./mysql-install/7.png)\n   \n10. 检查端口\n    ```shell\n    #检查3306端口是否开放\n    netstat -nupl|grep 3306\n    \n    #开放3306端口\n    firewall -cmd --permanent --add-prot=3306/tcp\n    \n    #重启防火墙\n    firewall -cmd --reload\n    ```\n\n### 4. 常见问题\n1. The server quit without updating PID file\n   \n    - 第一，权限的问题，在出这个错误的时候，我所说的权限是mysq.cnf和所定义的mysql数据库存放目录的权限，要保证是mysql用户的权限，如果启动mysql还有问题，那么需要考虑提高权限了。\n    说人话， 数据库存放目录必须是mysql这个用户的属组(通常的，安装MySQL的时候建立的用户为mysql，不建议使用别的用户），mysql的启动脚本必须有执行权限。赋予权限的命令为：chown -R mysql. /usr/local/mysql,假设我的mysql是安装在  /usr/local/mysql目录，数据库存放目录为 /usr/local/mysql/data/\n    - 第二，进程中有mysql的进程，上次的退出并没有自动结束该pid，导致新的进程无法启动，毕竟，mysql每次启动系统只会给分配一个pid号，再启动，系统也不可能给你分配pid号了。运行命令 ps -ef |grep mysql  找到mysql的进程结束它，然后在启动mysql。\n    - 第三，进入mysql数据库的存放目录，如果有mysql-bin.index这样的文件，删除它，在启动mysql，该文件产生的原因不详，不过删除必定没影响，或者另一个binlog.index也删除，两个index后缀的都删除也可以。\n    - 第四，my.cnf 这个配置文件内容不对，检查有没有skip-federated这个字段，如果有注释或者删除。\n    检查是否定义了数据库存放目录，如果没有定义，请立刻定义。\n    - 第五，错误日志目录不存在解决方法：使用“chown” “chmod”命令赋予mysql目录所有者及权限。\n    - 第六，my.cnf文件内存在lower_case_table_names=1 字段，注释掉它。（这个选项是1表示不区分大小写）。具体原因不详。\n    \n    总结：mysql说好安装也好安装，说难也难，难点在于权限的配置，给高了不安全，给低了有可能启动出问题，如果启动出问题了，首先第一件事就是检查目录权限，第二就是检查my.cnf这个配置文件，skip-federated，lower_case_table_names=1 ，这样的字段注释掉，第三，清除旧的mysql进程，如果有就清除掉，旧的不去新的不来，就这么一个道理。第四，进入mysql数据库存放目录删除index后缀的文件。下面，给张图，详细的权限慢慢体会\n    ```shell\n    ls -al /etc/init.d/mysql\n   ```\n   \n2. Can 't connect to local MySQL server through socket '/tmp/mysql.sock\n \n\n    连接localhost通常通过一个Unix域套接字文件进行，一般是/tmp/mysql.sock。如果套接字文件被删除了，本地客户就不能连接。这可能发生在你的系统运行一个cron任务删除了/tmp下的临时文件。\n    如果你因为丢失套接字文件而不能连接，你可以简单地通过重启服务器重新创建得到它。因为服务器在启动时重新创建它。\n    如果和我一样，重启服务器还是没有任何变化，你可以先执行下面的语句\n   ```shell\n   mysql -uroot -h 127.0.0.1 -p\n   ```\n   解决方式：\n   ```shell\n    sudo mkdir /var/run/mysqld/\n    sudo ln -s /tmp/mysql.sock /var/run/mysqld/mysqld.sock\n   ```\n3. however file don't exists. Create writable for user 'mysql'\n    问题描述：\n    ```text\n    [root@test2 my57_3307]# /usr/local/mysql57/bin/mysqld_safe  --defaults-file=/dbdata/mysql/my57_3307/my57_3307.cnf  --ledir=/usr/local/mysql57/bin\n    2018-08-26T14:12:45.459798Z mysqld_safe error: log-error set to '/var/log/mysqld/my57_3307.log', however file don't exists. Create writable for user 'mysql'.\n   ```\n   解决方式：\n    ```text\n    touch /usr/local/mysql8.0/log/error.log\n    chown mysql /usr/local/mysql8.0/log/error.log\n    /usr/local/mysql8.0/bin/mysqld_safe  --defaults-file=/etc/my.cnf  --ledir=/usr/local/mysql8.0/bin\n   ```\n   \n4. cannot open shared object file: No such file or directory\n    \n    ```shell\n    #需要安装 libnuma\n    yum install libnuma\n    yum -y install  numactl\n    yum install libaio1 libaio-dev\n    ```\n   \n5. mysqld启动报错Failed to find valid data directory\n\n   ```shell\n   vim /etc/my.cnf #查看datadir配置项的路径，然后一般是/var/lib/mysql，将这个文件夹删掉，然后重新初始化\n   \n   /usr/local/mysql8/bin/mysqld --initialize --user=mysql\n   \n   #如果mysqld启动服务时提示不能用root启动，则在/var/lib/mysql中加入这行 user=mysql\n   \n   \n   #重启\n  service mysql restart\n   ```","source":"_posts/2021/06/mysql-install.md","raw":"---\ntitle: Linux安装mysql8\ncomments: true\ntags: mysql\ncategories: linux\ntranslate_title: nginx-install\nabbrlink: 3212\ndate: 2021-06-29 14:40:08\n---\n### 1. 下载\n- 下载地址：https://downloads.mysql.com/archives/community/\n- 百度网盘链接: https://pan.baidu.com/s/1BkOuYlz2Ef7KRe9gikDUCg  密码: 0l15\n- Linux镜像下载\n    ```shell\n      cd /usr/local/src/\n      wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.27-linux-glibc2.12-x86_64.tar.gz\n    ```\n  \n### 2.卸载mariadb\n```shell\n#查看mariadb 的安装包\nrpm -qa | grep mariadb\n\n#卸载 mariadb\nrpm -e mariadb-libs-5.5.68-1.el7.x86_64 --nodeps\n\n#卸载验证\nrpm -qa | grep mariadb\n```\n\n### 3.安装\n1. 解压安装包\n    ```shell\n    # 进入下载目录\n    cd /usr/local/src/\n   \n   #解压， 如果是.tar则用 tar -zxvf解压， 我下载的是.tar.xz包，使用的是tar -xvJf\n    tar -xvJf mysql-8.0.28-linux-glibc2.17-x86_64-minimal.tar.xz\n   \n   # 移动解压后的文件夹至/usr/local\n    mv /usr/local/src/mysql-8.0.28-linux-glibc2.17-x86_64-minimal /usr/local/\n    cd /usr/local/\n   \n    # 重命名\n    mv ./mysql-8.0.28-linux-glibc2.17-x86_64-minimal mysql8.0\n   \n    # 创建文件夹data,存储文件;\n    cd /usr/local/mysql8.0/\n    mkdir ./data\n    ```\n   \n2. 创建用户以及用户组\n    ```shell\n    # 用户组\n    groupadd mysql\n    # 用户 （用户名/密码）\n    useradd -g mysql mysql\n    ```\n   \n3. 授权\n    ```shell\n    chown -R mysql.mysql /usr/local/mysql8.0/ \n    #或\n    chown -R mysql .\n    chgrp -R mysql .\n    ```\n   \n4. 初始化数据库\n    ```shell\n    # 查看当前所在目录\n    pwd # 若显示/usr/local/mysql-8.0,请继续执行，否则请先进入此目录/usr/local/mysql-8.0\n    # 初始化 注意查看是否存在相关目录,若不存在,请新建\n    ./bin/mysqld --user=mysql --basedir=/usr/local/mysql8.0/ --datadir=/usr/local/mysql8.0/data/ --initialize ; # 亲测\n    #或\n    ./bin/mysql --user=mysql --basedir=/usr/local/mysql8.0/ --datadir=/usr/local/mysql8.0/data/ --initialize ;\n   \n    #如果出现错误：./bin/mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory\n    yum install -y libaio  #安装后在初始化就OK了\n    ```\n   ![](./mysql-install/3.png)\n    注意：后面白色高亮选中的是初始密码！！！！\n   \n5. 配置my.cnf\n    ```shell\n    cp /usr/local/mysql8.0/support-files/mysql.server /etc/init.d/mysqld\n    vim /etc/my.cnf\n    ```\n   在配置中键入如下内容：\n    ```properties\n       [mysqld]\n      port=3306\n      # 设置mysql的安装目录\n      basedir=/usr/local/mysql8\n      # 设置mysql数据库的数据的存放目录\n      datadir=/usr/local/mysql8/mysqldb\n      # 允许最大连接数\n      max_connections=1000\n      # 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统\n      max_connect_errors=100\n      # 服务端使用的字符集默认为UTF8\n      character-set-server=utf8mb4\n      # 创建新表时将使用的默认存储引擎\n      default-storage-engine=INNODB\n      # 默认使用“mysql_native_password”插件认证\n      default_authentication_plugin=mysql_native_password\n      #是否对sql语句大小写敏感，1表示不敏感\n      lower_case_table_names = 1\n      #MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭\n      #MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效\n      interactive_timeout = 1800\n      wait_timeout = 1800\n      #Metadata Lock最大时长（秒）， 一般用于控制 alter操作的最大时长sine mysql5.6\n      #执行 DML操作时除了增加innodb事务锁外还增加Metadata Lock，其他alter（DDL）session将阻塞\n      lock_wait_timeout = 3600\n      #内部内存临时表的最大值。\n      #比如大数据量的group by ,order by时可能用到临时表，\n      #超过了这个值将写入磁盘，系统IO压力增大\n      tmp_table_size = 64M\n      max_heap_table_size = 64M\n      [mysql]\n      # 设置mysql客户端默认字符集\n      default-character-set=utf8mb4\n      [client]\n      # 设置mysql客户端连接服务端时默认使用的端口\n      port=3306\n      default-character-set=utf8mb4\n    ```\n\n6. 建立Mysql服务\n    ```shell\n    cp -a ./support-files/mysql.server /etc/init.d/mysql\n    chmod +x /etc/init.d/mysql\n    chkconfig --add mysql\n    chkconfig --list mysql\n    ```\n   ![](./mysql-install/4.png)\n\n7. 启动Mysql服务\n    ```shell\n    # 启动\n    service mysql start;\n    # 查看启动状态\n    service mysql status;\n    ```\n   如果提示： -bash: mysql: command not found\n    ```shell\n    ln -s /usr/local/mysql8.0/bin/mysql /usr/bin\n   ```\n   \n8. 登录Mysql\n    ```shell\n    mysql -uroot -p\n    # 输入\"初始化数据库\"操作时的\"临时密码\"\n    ```\n   ![](./mysql-install/5.png)\n\n    修改密码：\n    ```shell\n    ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '新密码';\n    ```\n   \n9. 远程连接\n    1. 在my.cnf的mysqld下增加\n        ```properties\n        default_authentication_plugin=mysql_native_password\n        ```\n    2. 进入mysql命令行\n        ```mysql\n        use mysql\n        update user set host ='%' where user='root';\n        ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'root';\n        FLUSH PRIVILEGES;\n        ```\n       ![](./mysql-install/7.png)\n   \n10. 检查端口\n    ```shell\n    #检查3306端口是否开放\n    netstat -nupl|grep 3306\n    \n    #开放3306端口\n    firewall -cmd --permanent --add-prot=3306/tcp\n    \n    #重启防火墙\n    firewall -cmd --reload\n    ```\n\n### 4. 常见问题\n1. The server quit without updating PID file\n   \n    - 第一，权限的问题，在出这个错误的时候，我所说的权限是mysq.cnf和所定义的mysql数据库存放目录的权限，要保证是mysql用户的权限，如果启动mysql还有问题，那么需要考虑提高权限了。\n    说人话， 数据库存放目录必须是mysql这个用户的属组(通常的，安装MySQL的时候建立的用户为mysql，不建议使用别的用户），mysql的启动脚本必须有执行权限。赋予权限的命令为：chown -R mysql. /usr/local/mysql,假设我的mysql是安装在  /usr/local/mysql目录，数据库存放目录为 /usr/local/mysql/data/\n    - 第二，进程中有mysql的进程，上次的退出并没有自动结束该pid，导致新的进程无法启动，毕竟，mysql每次启动系统只会给分配一个pid号，再启动，系统也不可能给你分配pid号了。运行命令 ps -ef |grep mysql  找到mysql的进程结束它，然后在启动mysql。\n    - 第三，进入mysql数据库的存放目录，如果有mysql-bin.index这样的文件，删除它，在启动mysql，该文件产生的原因不详，不过删除必定没影响，或者另一个binlog.index也删除，两个index后缀的都删除也可以。\n    - 第四，my.cnf 这个配置文件内容不对，检查有没有skip-federated这个字段，如果有注释或者删除。\n    检查是否定义了数据库存放目录，如果没有定义，请立刻定义。\n    - 第五，错误日志目录不存在解决方法：使用“chown” “chmod”命令赋予mysql目录所有者及权限。\n    - 第六，my.cnf文件内存在lower_case_table_names=1 字段，注释掉它。（这个选项是1表示不区分大小写）。具体原因不详。\n    \n    总结：mysql说好安装也好安装，说难也难，难点在于权限的配置，给高了不安全，给低了有可能启动出问题，如果启动出问题了，首先第一件事就是检查目录权限，第二就是检查my.cnf这个配置文件，skip-federated，lower_case_table_names=1 ，这样的字段注释掉，第三，清除旧的mysql进程，如果有就清除掉，旧的不去新的不来，就这么一个道理。第四，进入mysql数据库存放目录删除index后缀的文件。下面，给张图，详细的权限慢慢体会\n    ```shell\n    ls -al /etc/init.d/mysql\n   ```\n   \n2. Can 't connect to local MySQL server through socket '/tmp/mysql.sock\n \n\n    连接localhost通常通过一个Unix域套接字文件进行，一般是/tmp/mysql.sock。如果套接字文件被删除了，本地客户就不能连接。这可能发生在你的系统运行一个cron任务删除了/tmp下的临时文件。\n    如果你因为丢失套接字文件而不能连接，你可以简单地通过重启服务器重新创建得到它。因为服务器在启动时重新创建它。\n    如果和我一样，重启服务器还是没有任何变化，你可以先执行下面的语句\n   ```shell\n   mysql -uroot -h 127.0.0.1 -p\n   ```\n   解决方式：\n   ```shell\n    sudo mkdir /var/run/mysqld/\n    sudo ln -s /tmp/mysql.sock /var/run/mysqld/mysqld.sock\n   ```\n3. however file don't exists. Create writable for user 'mysql'\n    问题描述：\n    ```text\n    [root@test2 my57_3307]# /usr/local/mysql57/bin/mysqld_safe  --defaults-file=/dbdata/mysql/my57_3307/my57_3307.cnf  --ledir=/usr/local/mysql57/bin\n    2018-08-26T14:12:45.459798Z mysqld_safe error: log-error set to '/var/log/mysqld/my57_3307.log', however file don't exists. Create writable for user 'mysql'.\n   ```\n   解决方式：\n    ```text\n    touch /usr/local/mysql8.0/log/error.log\n    chown mysql /usr/local/mysql8.0/log/error.log\n    /usr/local/mysql8.0/bin/mysqld_safe  --defaults-file=/etc/my.cnf  --ledir=/usr/local/mysql8.0/bin\n   ```\n   \n4. cannot open shared object file: No such file or directory\n    \n    ```shell\n    #需要安装 libnuma\n    yum install libnuma\n    yum -y install  numactl\n    yum install libaio1 libaio-dev\n    ```\n   \n5. mysqld启动报错Failed to find valid data directory\n\n   ```shell\n   vim /etc/my.cnf #查看datadir配置项的路径，然后一般是/var/lib/mysql，将这个文件夹删掉，然后重新初始化\n   \n   /usr/local/mysql8/bin/mysqld --initialize --user=mysql\n   \n   #如果mysqld启动服务时提示不能用root启动，则在/var/lib/mysql中加入这行 user=mysql\n   \n   \n   #重启\n  service mysql restart\n   ```","slug":"mysql-install","published":1,"updated":"2022-04-06T05:03:15.266Z","layout":"post","photos":[],"link":"","_id":"cl424hx5c000zad5i4ybre4zv","content":"<h3 id=\"1-下载\"><a href=\"#1-下载\" class=\"headerlink\" title=\"1. 下载\"></a>1. 下载</h3><ul>\n<li>下载地址：<a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></li>\n<li>百度网盘链接: <a href=\"https://pan.baidu.com/s/1BkOuYlz2Ef7KRe9gikDUCg\">https://pan.baidu.com/s/1BkOuYlz2Ef7KRe9gikDUCg</a>  密码: 0l15</li>\n<li>Linux镜像下载  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/src/</span><br><span class=\"line\">wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.27-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-卸载mariadb\"><a href=\"#2-卸载mariadb\" class=\"headerlink\" title=\"2.卸载mariadb\"></a>2.卸载mariadb</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看mariadb 的安装包</span></span><br><span class=\"line\">rpm -qa | grep mariadb</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">卸载 mariadb</span></span><br><span class=\"line\">rpm -e mariadb-libs-5.5.68-1.el7.x86_64 --nodeps</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">卸载验证</span></span><br><span class=\"line\">rpm -qa | grep mariadb</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-安装\"><a href=\"#3-安装\" class=\"headerlink\" title=\"3.安装\"></a>3.安装</h3><ol>\n<li><p>解压安装包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 进入下载目录</span></span><br><span class=\"line\"> cd /usr/local/src/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">解压， 如果是.tar则用 tar -zxvf解压， 我下载的是.tar.xz包，使用的是tar -xvJf</span></span><br><span class=\"line\"> tar -xvJf mysql-8.0.28-linux-glibc2.17-x86_64-minimal.tar.xz</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 移动解压后的文件夹至/usr/<span class=\"built_in\">local</span></span></span><br><span class=\"line\"> mv /usr/local/src/mysql-8.0.28-linux-glibc2.17-x86_64-minimal /usr/local/</span><br><span class=\"line\"> cd /usr/local/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 重命名</span></span><br><span class=\"line\"> mv ./mysql-8.0.28-linux-glibc2.17-x86_64-minimal mysql8.0</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 创建文件夹data,存储文件;</span></span><br><span class=\"line\"> cd /usr/local/mysql8.0/</span><br><span class=\"line\"> mkdir ./data</span><br></pre></td></tr></table></figure></li>\n<li><p>创建用户以及用户组</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 用户组</span></span><br><span class=\"line\">groupadd mysql</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 用户 （用户名/密码）</span></span><br><span class=\"line\">useradd -g mysql mysql</span><br></pre></td></tr></table></figure></li>\n<li><p>授权</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R mysql.mysql /usr/local/mysql8.0/ </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或</span></span><br><span class=\"line\">chown -R mysql .</span><br><span class=\"line\">chgrp -R mysql .</span><br></pre></td></tr></table></figure></li>\n<li><p>初始化数据库</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看当前所在目录</span></span><br><span class=\"line\">pwd # 若显示/usr/local/mysql-8.0,请继续执行，否则请先进入此目录/usr/local/mysql-8.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 初始化 注意查看是否存在相关目录,若不存在,请新建</span></span><br><span class=\"line\">./bin/mysqld --user=mysql --basedir=/usr/local/mysql8.0/ --datadir=/usr/local/mysql8.0/data/ --initialize ; # 亲测</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或</span></span><br><span class=\"line\">./bin/mysql --user=mysql --basedir=/usr/local/mysql8.0/ --datadir=/usr/local/mysql8.0/data/ --initialize ;</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果出现错误：./bin/mysqld: error <span class=\"keyword\">while</span> loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory</span></span><br><span class=\"line\">yum install -y libaio  #安装后在初始化就OK了</span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-install/3.png\"><br> 注意：后面白色高亮选中的是初始密码！！！！</p>\n</li>\n<li><p>配置my.cnf</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/local/mysql8.0/support-files/mysql.server /etc/init.d/mysqld</span><br><span class=\"line\">vim /etc/my.cnf</span><br></pre></td></tr></table></figure>\n<p>在配置中键入如下内容：</p>\n <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"attr\">[mysqld]</span></span><br><span class=\"line\"><span class=\"attr\">port</span>=<span class=\"string\">3306</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql的安装目录</span></span><br><span class=\"line\"><span class=\"attr\">basedir</span>=<span class=\"string\">/usr/local/mysql8</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql数据库的数据的存放目录</span></span><br><span class=\"line\"><span class=\"attr\">datadir</span>=<span class=\"string\">/usr/local/mysql8/mysqldb</span></span><br><span class=\"line\"><span class=\"comment\"># 允许最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">max_connections</span>=<span class=\"string\">1000</span></span><br><span class=\"line\"><span class=\"comment\"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span></span><br><span class=\"line\"><span class=\"attr\">max_connect_errors</span>=<span class=\"string\">100</span></span><br><span class=\"line\"><span class=\"comment\"># 服务端使用的字符集默认为UTF8</span></span><br><span class=\"line\"><span class=\"meta\">character-set-server</span>=<span class=\"string\">utf8mb4</span></span><br><span class=\"line\"><span class=\"comment\"># 创建新表时将使用的默认存储引擎</span></span><br><span class=\"line\"><span class=\"meta\">default-storage-engine</span>=<span class=\"string\">INNODB</span></span><br><span class=\"line\"><span class=\"comment\"># 默认使用“mysql_native_password”插件认证</span></span><br><span class=\"line\"><span class=\"attr\">default_authentication_plugin</span>=<span class=\"string\">mysql_native_password</span></span><br><span class=\"line\"><span class=\"comment\">#是否对sql语句大小写敏感，1表示不敏感</span></span><br><span class=\"line\"><span class=\"attr\">lower_case_table_names</span> = <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"comment\">#MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭</span></span><br><span class=\"line\"><span class=\"comment\">#MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效</span></span><br><span class=\"line\"><span class=\"attr\">interactive_timeout</span> = <span class=\"string\">1800</span></span><br><span class=\"line\"><span class=\"attr\">wait_timeout</span> = <span class=\"string\">1800</span></span><br><span class=\"line\"><span class=\"comment\">#Metadata Lock最大时长（秒）， 一般用于控制 alter操作的最大时长sine mysql5.6</span></span><br><span class=\"line\"><span class=\"comment\">#执行 DML操作时除了增加innodb事务锁外还增加Metadata Lock，其他alter（DDL）session将阻塞</span></span><br><span class=\"line\"><span class=\"attr\">lock_wait_timeout</span> = <span class=\"string\">3600</span></span><br><span class=\"line\"><span class=\"comment\">#内部内存临时表的最大值。</span></span><br><span class=\"line\"><span class=\"comment\">#比如大数据量的group by ,order by时可能用到临时表，</span></span><br><span class=\"line\"><span class=\"comment\">#超过了这个值将写入磁盘，系统IO压力增大</span></span><br><span class=\"line\"><span class=\"attr\">tmp_table_size</span> = <span class=\"string\">64M</span></span><br><span class=\"line\"><span class=\"attr\">max_heap_table_size</span> = <span class=\"string\">64M</span></span><br><span class=\"line\"><span class=\"attr\">[mysql]</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql客户端默认字符集</span></span><br><span class=\"line\"><span class=\"meta\">default-character-set</span>=<span class=\"string\">utf8mb4</span></span><br><span class=\"line\"><span class=\"attr\">[client]</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class=\"line\"><span class=\"attr\">port</span>=<span class=\"string\">3306</span></span><br><span class=\"line\"><span class=\"meta\">default-character-set</span>=<span class=\"string\">utf8mb4</span></span><br></pre></td></tr></table></figure></li>\n<li><p>建立Mysql服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -a ./support-files/mysql.server /etc/init.d/mysql</span><br><span class=\"line\">chmod +x /etc/init.d/mysql</span><br><span class=\"line\">chkconfig --add mysql</span><br><span class=\"line\">chkconfig --list mysql</span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-install/4.png\"></p>\n</li>\n<li><p>启动Mysql服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动</span></span><br><span class=\"line\">service mysql start;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看启动状态</span></span><br><span class=\"line\">service mysql status;</span><br></pre></td></tr></table></figure>\n<p>如果提示： -bash: mysql: command not found</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/mysql8.0/bin/mysql /usr/bin</span><br></pre></td></tr></table></figure></li>\n<li><p>登录Mysql</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 输入<span class=\"string\">&quot;初始化数据库&quot;</span>操作时的<span class=\"string\">&quot;临时密码&quot;</span></span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-install/5.png\"></p>\n<p> 修改密码：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure></li>\n<li><p>远程连接</p>\n<ol>\n<li>在my.cnf的mysqld下增加 <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">default_authentication_plugin</span>=<span class=\"string\">mysql_native_password</span></span><br></pre></td></tr></table></figure></li>\n<li>进入mysql命令行 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql</span><br><span class=\"line\">update user set host =&#x27;%&#x27; where user=&#x27;root&#x27;;</span><br><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;root&#x27;;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n<img src=\"/mysql-install/7.png\"></li>\n</ol>\n</li>\n<li><p>检查端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">检查3306端口是否开放</span></span><br><span class=\"line\">netstat -nupl|grep 3306</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开放3306端口</span></span><br><span class=\"line\">firewall -cmd --permanent --add-prot=3306/tcp</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启防火墙</span></span><br><span class=\"line\">firewall -cmd --reload</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"4-常见问题\"><a href=\"#4-常见问题\" class=\"headerlink\" title=\"4. 常见问题\"></a>4. 常见问题</h3><ol>\n<li><p>The server quit without updating PID file</p>\n<ul>\n<li>第一，权限的问题，在出这个错误的时候，我所说的权限是mysq.cnf和所定义的mysql数据库存放目录的权限，要保证是mysql用户的权限，如果启动mysql还有问题，那么需要考虑提高权限了。<br>说人话， 数据库存放目录必须是mysql这个用户的属组(通常的，安装MySQL的时候建立的用户为mysql，不建议使用别的用户），mysql的启动脚本必须有执行权限。赋予权限的命令为：chown -R mysql. /usr/local/mysql,假设我的mysql是安装在  /usr/local/mysql目录，数据库存放目录为 /usr/local/mysql/data/</li>\n<li>第二，进程中有mysql的进程，上次的退出并没有自动结束该pid，导致新的进程无法启动，毕竟，mysql每次启动系统只会给分配一个pid号，再启动，系统也不可能给你分配pid号了。运行命令 ps -ef |grep mysql  找到mysql的进程结束它，然后在启动mysql。</li>\n<li>第三，进入mysql数据库的存放目录，如果有mysql-bin.index这样的文件，删除它，在启动mysql，该文件产生的原因不详，不过删除必定没影响，或者另一个binlog.index也删除，两个index后缀的都删除也可以。</li>\n<li>第四，my.cnf 这个配置文件内容不对，检查有没有skip-federated这个字段，如果有注释或者删除。<br>检查是否定义了数据库存放目录，如果没有定义，请立刻定义。</li>\n<li>第五，错误日志目录不存在解决方法：使用“chown” “chmod”命令赋予mysql目录所有者及权限。</li>\n<li>第六，my.cnf文件内存在lower_case_table_names=1 字段，注释掉它。（这个选项是1表示不区分大小写）。具体原因不详。</li>\n</ul>\n<p> 总结：mysql说好安装也好安装，说难也难，难点在于权限的配置，给高了不安全，给低了有可能启动出问题，如果启动出问题了，首先第一件事就是检查目录权限，第二就是检查my.cnf这个配置文件，skip-federated，lower_case_table_names=1 ，这样的字段注释掉，第三，清除旧的mysql进程，如果有就清除掉，旧的不去新的不来，就这么一个道理。第四，进入mysql数据库存放目录删除index后缀的文件。下面，给张图，详细的权限慢慢体会</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -al /etc/init.d/mysql</span><br></pre></td></tr></table></figure></li>\n<li><p>Can ‘t connect to local MySQL server through socket ‘/tmp/mysql.sock</p>\n<p> 连接localhost通常通过一个Unix域套接字文件进行，一般是/tmp/mysql.sock。如果套接字文件被删除了，本地客户就不能连接。这可能发生在你的系统运行一个cron任务删除了/tmp下的临时文件。<br> 如果你因为丢失套接字文件而不能连接，你可以简单地通过重启服务器重新创建得到它。因为服务器在启动时重新创建它。<br> 如果和我一样，重启服务器还是没有任何变化，你可以先执行下面的语句</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -h 127.0.0.1 -p</span><br></pre></td></tr></table></figure>\n<p>解决方式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /var/run/mysqld/</span><br><span class=\"line\">sudo ln -s /tmp/mysql.sock /var/run/mysqld/mysqld.sock</span><br></pre></td></tr></table></figure></li>\n<li><p>however file don’t exists. Create writable for user ‘mysql’<br> 问题描述：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@test2 my57_3307]# /usr/local/mysql57/bin/mysqld_safe  --defaults-file=/dbdata/mysql/my57_3307/my57_3307.cnf  --ledir=/usr/local/mysql57/bin</span><br><span class=\"line\">2018-08-26T14:12:45.459798Z mysqld_safe error: log-error set to &#x27;/var/log/mysqld/my57_3307.log&#x27;, however file don&#x27;t exists. Create writable for user &#x27;mysql&#x27;.</span><br></pre></td></tr></table></figure>\n<p>解决方式：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /usr/local/mysql8.0/log/error.log</span><br><span class=\"line\">chown mysql /usr/local/mysql8.0/log/error.log</span><br><span class=\"line\">/usr/local/mysql8.0/bin/mysqld_safe  --defaults-file=/etc/my.cnf  --ledir=/usr/local/mysql8.0/bin</span><br></pre></td></tr></table></figure></li>\n<li><p>cannot open shared object file: No such file or directory</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">需要安装 libnuma</span></span><br><span class=\"line\">yum install libnuma</span><br><span class=\"line\">yum -y install  numactl</span><br><span class=\"line\">yum install libaio1 libaio-dev</span><br></pre></td></tr></table></figure></li>\n<li><p>mysqld启动报错Failed to find valid data directory</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> vim /etc/my.cnf #查看datadir配置项的路径，然后一般是/var/lib/mysql，将这个文件夹删掉，然后重新初始化</span><br><span class=\"line\"> </span><br><span class=\"line\"> /usr/local/mysql8/bin/mysqld --initialize --user=mysql</span><br><span class=\"line\"><span class=\"meta\"> </span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">如果mysqld启动服务时提示不能用root启动，则在/var/lib/mysql中加入这行 user=mysql</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\"> </span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">重启</span></span><br><span class=\"line\">service mysql restart</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h3 id=\"1-下载\"><a href=\"#1-下载\" class=\"headerlink\" title=\"1. 下载\"></a>1. 下载</h3><ul>\n<li>下载地址：<a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></li>\n<li>百度网盘链接: <a href=\"https://pan.baidu.com/s/1BkOuYlz2Ef7KRe9gikDUCg\">https://pan.baidu.com/s/1BkOuYlz2Ef7KRe9gikDUCg</a>  密码: 0l15</li>\n<li>Linux镜像下载  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/src/</span><br><span class=\"line\">wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.27-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-卸载mariadb\"><a href=\"#2-卸载mariadb\" class=\"headerlink\" title=\"2.卸载mariadb\"></a>2.卸载mariadb</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看mariadb 的安装包</span></span><br><span class=\"line\">rpm -qa | grep mariadb</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">卸载 mariadb</span></span><br><span class=\"line\">rpm -e mariadb-libs-5.5.68-1.el7.x86_64 --nodeps</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">卸载验证</span></span><br><span class=\"line\">rpm -qa | grep mariadb</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-安装\"><a href=\"#3-安装\" class=\"headerlink\" title=\"3.安装\"></a>3.安装</h3><ol>\n<li><p>解压安装包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 进入下载目录</span></span><br><span class=\"line\"> cd /usr/local/src/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">解压， 如果是.tar则用 tar -zxvf解压， 我下载的是.tar.xz包，使用的是tar -xvJf</span></span><br><span class=\"line\"> tar -xvJf mysql-8.0.28-linux-glibc2.17-x86_64-minimal.tar.xz</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 移动解压后的文件夹至/usr/<span class=\"built_in\">local</span></span></span><br><span class=\"line\"> mv /usr/local/src/mysql-8.0.28-linux-glibc2.17-x86_64-minimal /usr/local/</span><br><span class=\"line\"> cd /usr/local/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 重命名</span></span><br><span class=\"line\"> mv ./mysql-8.0.28-linux-glibc2.17-x86_64-minimal mysql8.0</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 创建文件夹data,存储文件;</span></span><br><span class=\"line\"> cd /usr/local/mysql8.0/</span><br><span class=\"line\"> mkdir ./data</span><br></pre></td></tr></table></figure></li>\n<li><p>创建用户以及用户组</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 用户组</span></span><br><span class=\"line\">groupadd mysql</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 用户 （用户名/密码）</span></span><br><span class=\"line\">useradd -g mysql mysql</span><br></pre></td></tr></table></figure></li>\n<li><p>授权</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R mysql.mysql /usr/local/mysql8.0/ </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或</span></span><br><span class=\"line\">chown -R mysql .</span><br><span class=\"line\">chgrp -R mysql .</span><br></pre></td></tr></table></figure></li>\n<li><p>初始化数据库</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看当前所在目录</span></span><br><span class=\"line\">pwd # 若显示/usr/local/mysql-8.0,请继续执行，否则请先进入此目录/usr/local/mysql-8.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 初始化 注意查看是否存在相关目录,若不存在,请新建</span></span><br><span class=\"line\">./bin/mysqld --user=mysql --basedir=/usr/local/mysql8.0/ --datadir=/usr/local/mysql8.0/data/ --initialize ; # 亲测</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或</span></span><br><span class=\"line\">./bin/mysql --user=mysql --basedir=/usr/local/mysql8.0/ --datadir=/usr/local/mysql8.0/data/ --initialize ;</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果出现错误：./bin/mysqld: error <span class=\"keyword\">while</span> loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory</span></span><br><span class=\"line\">yum install -y libaio  #安装后在初始化就OK了</span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-install/3.png\"><br> 注意：后面白色高亮选中的是初始密码！！！！</p>\n</li>\n<li><p>配置my.cnf</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/local/mysql8.0/support-files/mysql.server /etc/init.d/mysqld</span><br><span class=\"line\">vim /etc/my.cnf</span><br></pre></td></tr></table></figure>\n<p>在配置中键入如下内容：</p>\n <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"attr\">[mysqld]</span></span><br><span class=\"line\"><span class=\"attr\">port</span>=<span class=\"string\">3306</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql的安装目录</span></span><br><span class=\"line\"><span class=\"attr\">basedir</span>=<span class=\"string\">/usr/local/mysql8</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql数据库的数据的存放目录</span></span><br><span class=\"line\"><span class=\"attr\">datadir</span>=<span class=\"string\">/usr/local/mysql8/mysqldb</span></span><br><span class=\"line\"><span class=\"comment\"># 允许最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">max_connections</span>=<span class=\"string\">1000</span></span><br><span class=\"line\"><span class=\"comment\"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span></span><br><span class=\"line\"><span class=\"attr\">max_connect_errors</span>=<span class=\"string\">100</span></span><br><span class=\"line\"><span class=\"comment\"># 服务端使用的字符集默认为UTF8</span></span><br><span class=\"line\"><span class=\"meta\">character-set-server</span>=<span class=\"string\">utf8mb4</span></span><br><span class=\"line\"><span class=\"comment\"># 创建新表时将使用的默认存储引擎</span></span><br><span class=\"line\"><span class=\"meta\">default-storage-engine</span>=<span class=\"string\">INNODB</span></span><br><span class=\"line\"><span class=\"comment\"># 默认使用“mysql_native_password”插件认证</span></span><br><span class=\"line\"><span class=\"attr\">default_authentication_plugin</span>=<span class=\"string\">mysql_native_password</span></span><br><span class=\"line\"><span class=\"comment\">#是否对sql语句大小写敏感，1表示不敏感</span></span><br><span class=\"line\"><span class=\"attr\">lower_case_table_names</span> = <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"comment\">#MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭</span></span><br><span class=\"line\"><span class=\"comment\">#MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效</span></span><br><span class=\"line\"><span class=\"attr\">interactive_timeout</span> = <span class=\"string\">1800</span></span><br><span class=\"line\"><span class=\"attr\">wait_timeout</span> = <span class=\"string\">1800</span></span><br><span class=\"line\"><span class=\"comment\">#Metadata Lock最大时长（秒）， 一般用于控制 alter操作的最大时长sine mysql5.6</span></span><br><span class=\"line\"><span class=\"comment\">#执行 DML操作时除了增加innodb事务锁外还增加Metadata Lock，其他alter（DDL）session将阻塞</span></span><br><span class=\"line\"><span class=\"attr\">lock_wait_timeout</span> = <span class=\"string\">3600</span></span><br><span class=\"line\"><span class=\"comment\">#内部内存临时表的最大值。</span></span><br><span class=\"line\"><span class=\"comment\">#比如大数据量的group by ,order by时可能用到临时表，</span></span><br><span class=\"line\"><span class=\"comment\">#超过了这个值将写入磁盘，系统IO压力增大</span></span><br><span class=\"line\"><span class=\"attr\">tmp_table_size</span> = <span class=\"string\">64M</span></span><br><span class=\"line\"><span class=\"attr\">max_heap_table_size</span> = <span class=\"string\">64M</span></span><br><span class=\"line\"><span class=\"attr\">[mysql]</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql客户端默认字符集</span></span><br><span class=\"line\"><span class=\"meta\">default-character-set</span>=<span class=\"string\">utf8mb4</span></span><br><span class=\"line\"><span class=\"attr\">[client]</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class=\"line\"><span class=\"attr\">port</span>=<span class=\"string\">3306</span></span><br><span class=\"line\"><span class=\"meta\">default-character-set</span>=<span class=\"string\">utf8mb4</span></span><br></pre></td></tr></table></figure></li>\n<li><p>建立Mysql服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -a ./support-files/mysql.server /etc/init.d/mysql</span><br><span class=\"line\">chmod +x /etc/init.d/mysql</span><br><span class=\"line\">chkconfig --add mysql</span><br><span class=\"line\">chkconfig --list mysql</span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-install/4.png\"></p>\n</li>\n<li><p>启动Mysql服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动</span></span><br><span class=\"line\">service mysql start;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看启动状态</span></span><br><span class=\"line\">service mysql status;</span><br></pre></td></tr></table></figure>\n<p>如果提示： -bash: mysql: command not found</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/mysql8.0/bin/mysql /usr/bin</span><br></pre></td></tr></table></figure></li>\n<li><p>登录Mysql</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 输入<span class=\"string\">&quot;初始化数据库&quot;</span>操作时的<span class=\"string\">&quot;临时密码&quot;</span></span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-install/5.png\"></p>\n<p> 修改密码：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure></li>\n<li><p>远程连接</p>\n<ol>\n<li>在my.cnf的mysqld下增加 <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">default_authentication_plugin</span>=<span class=\"string\">mysql_native_password</span></span><br></pre></td></tr></table></figure></li>\n<li>进入mysql命令行 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql</span><br><span class=\"line\">update user set host =&#x27;%&#x27; where user=&#x27;root&#x27;;</span><br><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;root&#x27;;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n<img src=\"/mysql-install/7.png\"></li>\n</ol>\n</li>\n<li><p>检查端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">检查3306端口是否开放</span></span><br><span class=\"line\">netstat -nupl|grep 3306</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开放3306端口</span></span><br><span class=\"line\">firewall -cmd --permanent --add-prot=3306/tcp</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启防火墙</span></span><br><span class=\"line\">firewall -cmd --reload</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"4-常见问题\"><a href=\"#4-常见问题\" class=\"headerlink\" title=\"4. 常见问题\"></a>4. 常见问题</h3><ol>\n<li><p>The server quit without updating PID file</p>\n<ul>\n<li>第一，权限的问题，在出这个错误的时候，我所说的权限是mysq.cnf和所定义的mysql数据库存放目录的权限，要保证是mysql用户的权限，如果启动mysql还有问题，那么需要考虑提高权限了。<br>说人话， 数据库存放目录必须是mysql这个用户的属组(通常的，安装MySQL的时候建立的用户为mysql，不建议使用别的用户），mysql的启动脚本必须有执行权限。赋予权限的命令为：chown -R mysql. /usr/local/mysql,假设我的mysql是安装在  /usr/local/mysql目录，数据库存放目录为 /usr/local/mysql/data/</li>\n<li>第二，进程中有mysql的进程，上次的退出并没有自动结束该pid，导致新的进程无法启动，毕竟，mysql每次启动系统只会给分配一个pid号，再启动，系统也不可能给你分配pid号了。运行命令 ps -ef |grep mysql  找到mysql的进程结束它，然后在启动mysql。</li>\n<li>第三，进入mysql数据库的存放目录，如果有mysql-bin.index这样的文件，删除它，在启动mysql，该文件产生的原因不详，不过删除必定没影响，或者另一个binlog.index也删除，两个index后缀的都删除也可以。</li>\n<li>第四，my.cnf 这个配置文件内容不对，检查有没有skip-federated这个字段，如果有注释或者删除。<br>检查是否定义了数据库存放目录，如果没有定义，请立刻定义。</li>\n<li>第五，错误日志目录不存在解决方法：使用“chown” “chmod”命令赋予mysql目录所有者及权限。</li>\n<li>第六，my.cnf文件内存在lower_case_table_names=1 字段，注释掉它。（这个选项是1表示不区分大小写）。具体原因不详。</li>\n</ul>\n<p> 总结：mysql说好安装也好安装，说难也难，难点在于权限的配置，给高了不安全，给低了有可能启动出问题，如果启动出问题了，首先第一件事就是检查目录权限，第二就是检查my.cnf这个配置文件，skip-federated，lower_case_table_names=1 ，这样的字段注释掉，第三，清除旧的mysql进程，如果有就清除掉，旧的不去新的不来，就这么一个道理。第四，进入mysql数据库存放目录删除index后缀的文件。下面，给张图，详细的权限慢慢体会</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -al /etc/init.d/mysql</span><br></pre></td></tr></table></figure></li>\n<li><p>Can ‘t connect to local MySQL server through socket ‘/tmp/mysql.sock</p>\n<p> 连接localhost通常通过一个Unix域套接字文件进行，一般是/tmp/mysql.sock。如果套接字文件被删除了，本地客户就不能连接。这可能发生在你的系统运行一个cron任务删除了/tmp下的临时文件。<br> 如果你因为丢失套接字文件而不能连接，你可以简单地通过重启服务器重新创建得到它。因为服务器在启动时重新创建它。<br> 如果和我一样，重启服务器还是没有任何变化，你可以先执行下面的语句</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -h 127.0.0.1 -p</span><br></pre></td></tr></table></figure>\n<p>解决方式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /var/run/mysqld/</span><br><span class=\"line\">sudo ln -s /tmp/mysql.sock /var/run/mysqld/mysqld.sock</span><br></pre></td></tr></table></figure></li>\n<li><p>however file don’t exists. Create writable for user ‘mysql’<br> 问题描述：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@test2 my57_3307]# /usr/local/mysql57/bin/mysqld_safe  --defaults-file=/dbdata/mysql/my57_3307/my57_3307.cnf  --ledir=/usr/local/mysql57/bin</span><br><span class=\"line\">2018-08-26T14:12:45.459798Z mysqld_safe error: log-error set to &#x27;/var/log/mysqld/my57_3307.log&#x27;, however file don&#x27;t exists. Create writable for user &#x27;mysql&#x27;.</span><br></pre></td></tr></table></figure>\n<p>解决方式：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /usr/local/mysql8.0/log/error.log</span><br><span class=\"line\">chown mysql /usr/local/mysql8.0/log/error.log</span><br><span class=\"line\">/usr/local/mysql8.0/bin/mysqld_safe  --defaults-file=/etc/my.cnf  --ledir=/usr/local/mysql8.0/bin</span><br></pre></td></tr></table></figure></li>\n<li><p>cannot open shared object file: No such file or directory</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">需要安装 libnuma</span></span><br><span class=\"line\">yum install libnuma</span><br><span class=\"line\">yum -y install  numactl</span><br><span class=\"line\">yum install libaio1 libaio-dev</span><br></pre></td></tr></table></figure></li>\n<li><p>mysqld启动报错Failed to find valid data directory</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> vim /etc/my.cnf #查看datadir配置项的路径，然后一般是/var/lib/mysql，将这个文件夹删掉，然后重新初始化</span><br><span class=\"line\"> </span><br><span class=\"line\"> /usr/local/mysql8/bin/mysqld --initialize --user=mysql</span><br><span class=\"line\"><span class=\"meta\"> </span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">如果mysqld启动服务时提示不能用root启动，则在/var/lib/mysql中加入这行 user=mysql</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\"> </span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">重启</span></span><br><span class=\"line\">service mysql restart</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"转换成小写字母","comments":1,"abbrlink":4638,"date":"2021-08-22T05:15:12.000Z","translate_title":"algorithm-02","_content":"实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。\n```text\n示例 1：\n输入: \"Hello\"\n输出: \"hello\"\n\n示例2：\n输入: \"LOVELY\"\n输出: \"lovely\"\n```\n### 方法一： ASCCII码\n**解题思路：通过ascii码表操作字符串即可,a和A相差32；**\n- a-z: 97 - 122\n- A-Z: 65 - 90\n- 0-9: 48 - 57\n```java\npublic static String toLowerCase(String str) {\n    if (str == null || str.length() == 0) {\n        return str;\n    }\n    StringBuilder sb = new StringBuilder();\n    for (char ch : str.toCharArray()) {\n        // a-z：97-122  A-Z：65-90  0-9：48-57\n        if (ch >= 'A' && ch <= 'Z') {\n            sb.append((char)(ch + 32));\n        } else {\n            sb.append(ch);\n        }\n    }\n    return sb.toString();\n}\n```\n或者：\n```java\npublic static String toLowerCase(String str) {\n    if (str == null || str.length() == 0) {\n        return str;\n    }\n    char[] ch = str.toCharArray();\n    for (int i = 0; i < str.length(); i++) {\n        if (ch[i] >= 'A' && ch[i] <= 'Z') {\n            ch[i] += 32;\n        }\n    }\n    return String.valueOf(ch);\n}\n```\n\n### 方法二： 位运算\n**解题思路：**\n- 大写变小写、小写变大写：字符 ^= 32;\n- 大写变小写、小写变小写：字符 |= 32;\n- 大写变大写、小写变大写：字符 &= 33;\n\nASCII码表中大写的A是65，小写的a是97，它们的差是32\n65 | 32 转为二进制（按8位来算）可以得到 0100 0001 | 0010 0000 = 0110 0001 = 97 = a\n  \n```java\npublic String toLowerCase(String str) {\n    if (str == null || str.length() == 0) {\n        return str;\n    }\n    char[] ch = str.toCharArray();\n    for (int i = 0; i < str.length(); i++) {\n        ch[i] |= 32;\n    }\n    return String.valueOf(ch);\n}\n```\n\n","source":"_posts/2021/08/algoright-2.md","raw":"---\ntitle: 转换成小写字母\ntags: algorithm\ncategories: 算法\ncomments: true\nabbrlink: 4638\ndate: 2021-08-22 13:15:12\ntranslate_title: algorithm-02\n---\n实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。\n```text\n示例 1：\n输入: \"Hello\"\n输出: \"hello\"\n\n示例2：\n输入: \"LOVELY\"\n输出: \"lovely\"\n```\n### 方法一： ASCCII码\n**解题思路：通过ascii码表操作字符串即可,a和A相差32；**\n- a-z: 97 - 122\n- A-Z: 65 - 90\n- 0-9: 48 - 57\n```java\npublic static String toLowerCase(String str) {\n    if (str == null || str.length() == 0) {\n        return str;\n    }\n    StringBuilder sb = new StringBuilder();\n    for (char ch : str.toCharArray()) {\n        // a-z：97-122  A-Z：65-90  0-9：48-57\n        if (ch >= 'A' && ch <= 'Z') {\n            sb.append((char)(ch + 32));\n        } else {\n            sb.append(ch);\n        }\n    }\n    return sb.toString();\n}\n```\n或者：\n```java\npublic static String toLowerCase(String str) {\n    if (str == null || str.length() == 0) {\n        return str;\n    }\n    char[] ch = str.toCharArray();\n    for (int i = 0; i < str.length(); i++) {\n        if (ch[i] >= 'A' && ch[i] <= 'Z') {\n            ch[i] += 32;\n        }\n    }\n    return String.valueOf(ch);\n}\n```\n\n### 方法二： 位运算\n**解题思路：**\n- 大写变小写、小写变大写：字符 ^= 32;\n- 大写变小写、小写变小写：字符 |= 32;\n- 大写变大写、小写变大写：字符 &= 33;\n\nASCII码表中大写的A是65，小写的a是97，它们的差是32\n65 | 32 转为二进制（按8位来算）可以得到 0100 0001 | 0010 0000 = 0110 0001 = 97 = a\n  \n```java\npublic String toLowerCase(String str) {\n    if (str == null || str.length() == 0) {\n        return str;\n    }\n    char[] ch = str.toCharArray();\n    for (int i = 0; i < str.length(); i++) {\n        ch[i] |= 32;\n    }\n    return String.valueOf(ch);\n}\n```\n\n","slug":"algoright-2","published":1,"updated":"2022-03-27T14:06:03.431Z","layout":"post","photos":[],"link":"","_id":"cl424hx5d0012ad5i97w8bcxr","content":"<p>实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例 1：</span><br><span class=\"line\">输入: &quot;Hello&quot;</span><br><span class=\"line\">输出: &quot;hello&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">示例2：</span><br><span class=\"line\">输入: &quot;LOVELY&quot;</span><br><span class=\"line\">输出: &quot;lovely&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法一：-ASCCII码\"><a href=\"#方法一：-ASCCII码\" class=\"headerlink\" title=\"方法一： ASCCII码\"></a>方法一： ASCCII码</h3><p><strong>解题思路：通过ascii码表操作字符串即可,a和A相差32；</strong></p>\n<ul>\n<li>a-z: 97 - 122</li>\n<li>A-Z: 65 - 90</li>\n<li>0-9: 48 - 57<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toLowerCase</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> ch : str.toCharArray()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a-z：97-122  A-Z：65-90  0-9：48-57</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;Z&#x27;</span>) &#123;</span><br><span class=\"line\">            sb.append((<span class=\"keyword\">char</span>)(ch + <span class=\"number\">32</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sb.append(ch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n或者：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toLowerCase</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] ch = str.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[i] &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; ch[i] &lt;= <span class=\"string\">&#x27;Z&#x27;</span>) &#123;</span><br><span class=\"line\">            ch[i] += <span class=\"number\">32</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> String.valueOf(ch);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"方法二：-位运算\"><a href=\"#方法二：-位运算\" class=\"headerlink\" title=\"方法二： 位运算\"></a>方法二： 位运算</h3><p><strong>解题思路：</strong></p>\n<ul>\n<li>大写变小写、小写变大写：字符 ^= 32;</li>\n<li>大写变小写、小写变小写：字符 |= 32;</li>\n<li>大写变大写、小写变大写：字符 &amp;= 33;</li>\n</ul>\n<p>ASCII码表中大写的A是65，小写的a是97，它们的差是32<br>65 | 32 转为二进制（按8位来算）可以得到 0100 0001 | 0010 0000 = 0110 0001 = 97 = a</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toLowerCase</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] ch = str.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class=\"line\">        ch[i] |= <span class=\"number\">32</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> String.valueOf(ch);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例 1：</span><br><span class=\"line\">输入: &quot;Hello&quot;</span><br><span class=\"line\">输出: &quot;hello&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">示例2：</span><br><span class=\"line\">输入: &quot;LOVELY&quot;</span><br><span class=\"line\">输出: &quot;lovely&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法一：-ASCCII码\"><a href=\"#方法一：-ASCCII码\" class=\"headerlink\" title=\"方法一： ASCCII码\"></a>方法一： ASCCII码</h3><p><strong>解题思路：通过ascii码表操作字符串即可,a和A相差32；</strong></p>\n<ul>\n<li>a-z: 97 - 122</li>\n<li>A-Z: 65 - 90</li>\n<li>0-9: 48 - 57<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toLowerCase</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> ch : str.toCharArray()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a-z：97-122  A-Z：65-90  0-9：48-57</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;Z&#x27;</span>) &#123;</span><br><span class=\"line\">            sb.append((<span class=\"keyword\">char</span>)(ch + <span class=\"number\">32</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sb.append(ch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n或者：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toLowerCase</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] ch = str.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[i] &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; ch[i] &lt;= <span class=\"string\">&#x27;Z&#x27;</span>) &#123;</span><br><span class=\"line\">            ch[i] += <span class=\"number\">32</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> String.valueOf(ch);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"方法二：-位运算\"><a href=\"#方法二：-位运算\" class=\"headerlink\" title=\"方法二： 位运算\"></a>方法二： 位运算</h3><p><strong>解题思路：</strong></p>\n<ul>\n<li>大写变小写、小写变大写：字符 ^= 32;</li>\n<li>大写变小写、小写变小写：字符 |= 32;</li>\n<li>大写变大写、小写变大写：字符 &amp;= 33;</li>\n</ul>\n<p>ASCII码表中大写的A是65，小写的a是97，它们的差是32<br>65 | 32 转为二进制（按8位来算）可以得到 0100 0001 | 0010 0000 = 0110 0001 = 97 = a</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toLowerCase</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] ch = str.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class=\"line\">        ch[i] |= <span class=\"number\">32</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> String.valueOf(ch);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"mysqldumpslow分析慢查询日志","comments":1,"abbrlink":19102,"date":"2021-08-21T08:16:02.000Z","translate_title":"mysqldumpslow-query-log","_content":"按照平均查询输出5行慢查询记录\n```shell\nmysqldumpslow -s at -t 5 /phpstudy/data/slowquery.log\n```\n- -s   排序方式，可选值有c（记录次数）、t（查询时间）、l（锁定时间）、r（返回记录）、a（平均）\n- -t    显示的记录数Spawn failed解决方式\n- -g   后面跟正则表达式（如 left join），不区分大小写。\n- -r   正序排序，即从小到大排序。\n- -d  调试 debug\n- -v   查看版本\n\n按照平均查询时间排序且只显示含有left join的记录\n```shell\nmysqldumpslow -s at -g 'left join' /phpstudy/data/slowquery.log\n```\n","source":"_posts/2021/08/mysqldumpslow分析慢查询日志.md","raw":"---\ntitle: mysqldumpslow分析慢查询日志\ncomments: true\ntags: mysql\ncategories: mysql\nabbrlink: 19102\ndate: 2021-08-21 16:16:02\ntranslate_title: mysqldumpslow-query-log\n---\n按照平均查询输出5行慢查询记录\n```shell\nmysqldumpslow -s at -t 5 /phpstudy/data/slowquery.log\n```\n- -s   排序方式，可选值有c（记录次数）、t（查询时间）、l（锁定时间）、r（返回记录）、a（平均）\n- -t    显示的记录数Spawn failed解决方式\n- -g   后面跟正则表达式（如 left join），不区分大小写。\n- -r   正序排序，即从小到大排序。\n- -d  调试 debug\n- -v   查看版本\n\n按照平均查询时间排序且只显示含有left join的记录\n```shell\nmysqldumpslow -s at -g 'left join' /phpstudy/data/slowquery.log\n```\n","slug":"mysqldumpslow分析慢查询日志","published":1,"updated":"2022-04-06T09:51:44.950Z","layout":"post","photos":[],"link":"","_id":"cl424hx5g0016ad5i5y22h4bu","content":"<p>按照平均查询输出5行慢查询记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldumpslow -s at -t 5 /phpstudy/data/slowquery.log</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-s   排序方式，可选值有c（记录次数）、t（查询时间）、l（锁定时间）、r（返回记录）、a（平均）</li>\n<li>-t    显示的记录数Spawn failed解决方式</li>\n<li>-g   后面跟正则表达式（如 left join），不区分大小写。</li>\n<li>-r   正序排序，即从小到大排序。</li>\n<li>-d  调试 debug</li>\n<li>-v   查看版本</li>\n</ul>\n<p>按照平均查询时间排序且只显示含有left join的记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldumpslow -s at -g &#x27;left join&#x27; /phpstudy/data/slowquery.log</span><br></pre></td></tr></table></figure>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>按照平均查询输出5行慢查询记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldumpslow -s at -t 5 /phpstudy/data/slowquery.log</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-s   排序方式，可选值有c（记录次数）、t（查询时间）、l（锁定时间）、r（返回记录）、a（平均）</li>\n<li>-t    显示的记录数Spawn failed解决方式</li>\n<li>-g   后面跟正则表达式（如 left join），不区分大小写。</li>\n<li>-r   正序排序，即从小到大排序。</li>\n<li>-d  调试 debug</li>\n<li>-v   查看版本</li>\n</ul>\n<p>按照平均查询时间排序且只显示含有left join的记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldumpslow -s at -g &#x27;left join&#x27; /phpstudy/data/slowquery.log</span><br></pre></td></tr></table></figure>\n"},{"title":"mysql行列转置","comments":1,"abbrlink":11308,"date":"2021-08-25T02:36:37.000Z","translate_title":"MySQL-row-column-transpose","_content":"数据表：\n![原始数据](./mysql行列转置/01.png)\n\n行转列结果为：\n![转置后结果](./mysql行列转置/02.png)\n数据库表语句：\n```sql\ncreate table t_score(\n    id int primary key auto_increment,\n    name varchar(20) not null,  #名字\n    Subject varchar(10) not null, #科目\n    Fraction double default 0  #分数\n);\n\nINSERT INTO `t_score`(name,Subject,Fraction) VALUES\n     ('王海', '语文', 86),\n     ('王海', '数学', 83),\n     ('王海', '英语', 93),\n     ('陶俊', '语文', 88),\n     ('陶俊', '数学', 84),\n     ('陶俊', '英语', 94),\n     ('刘可', '语文', 80),\n     ('刘可', '数学', 86),\n     ('刘可', '英语', 88),\n     ('李春', '语文', 89),\n     ('李春', '数学', 80),\n     ('李春', '英语', 87);\n```\n\n1. 方法一：使用if\n    ```sql\n    select \n        name as 名字 ,\n        sum(if(Subject='语文',Fraction,0)) as 语文,\n        sum(if(Subject='数学',Fraction,0))as 数学, \n        sum(if(Subject='英语',Fraction,0))as 英语,\n        round(AVG(Fraction),2) as 平均分,\n        SUM(Fraction) as 总分\n    from t_score group by name\n    -- 如果不用求总分的话，不需要下面的union\n    union(\n        select name as 名字 , sum(语文) Chinese,sum(数学) Math,sum(英语) English,round(AVG(总分),2)as 平均分,sum(总分) score  from(\n            select 'TOTAL' as name,\n            sum(if(Subject='语文',Fraction,0)) as 语文,\n            sum(if(Subject='数学',Fraction,0))as 数学, \n            sum(if(Subject='英语',Fraction,0))as 英语,\n            SUM(Fraction) as 总分\n            from t_score group by Subject \n        )t GROUP BY t.`name`\n    )\n    ```\n2. 方法二：使用case\n    ```sql\n        select name as name,\n        sum(case when Subject = '语文' then Fraction end) as Chinese,\n        sum(case when Subject = '数学' then Fraction end) as Math,\n        sum(case when Subject = '英语' then Fraction end) as English,\n        sum(fraction)as score\n        from t_score group by name\n        -- 如果不用求总分的话，不需要下面的union\n        UNION ALL\n        (\n            select name as Name,sum(Chinese) as Chinese,sum(Math) as Math,sum(English) as English,sum(score) as score from(\n            select 'TOTAL' as name,\n            sum(case when Subject = '语文' then Fraction end) as Chinese,\n            sum(case when Subject = '数学' then Fraction end) as Math,\n            sum(case when Subject = '英语' then Fraction end) as English,\n            sum(fraction)as score\n            from t_score group by Subject,name)t GROUP BY t.`name`\n        )\n    ```\n3. 方法三：使用with rollup\n   在group分组字段的基础上在进行统计数据；\n    ```sql\n    select\n        -- coalesce(name,'TOTAL') name,\n        ifnull(name,'TOTAL') name,\n        sum(if(Subject='语文',Fraction,0)) as 语文,\n        sum(if(Subject='英语',Fraction,0)) as 英语,\n        sum(if(Subject='数学',Fraction,0))as 数学,\n        sum(Fraction) 总分\n    from t_score group by name with rollup\n    ```\n    \n   \n\n","source":"_posts/2021/08/mysql行列转置.md","raw":"---\ntitle: mysql行列转置\ncomments: true\ntags: mysql\ncategories: mysql\nabbrlink: 11308\ndate: 2021-08-25 10:36:37\ntranslate_title: MySQL-row-column-transpose\n---\n数据表：\n![原始数据](./mysql行列转置/01.png)\n\n行转列结果为：\n![转置后结果](./mysql行列转置/02.png)\n数据库表语句：\n```sql\ncreate table t_score(\n    id int primary key auto_increment,\n    name varchar(20) not null,  #名字\n    Subject varchar(10) not null, #科目\n    Fraction double default 0  #分数\n);\n\nINSERT INTO `t_score`(name,Subject,Fraction) VALUES\n     ('王海', '语文', 86),\n     ('王海', '数学', 83),\n     ('王海', '英语', 93),\n     ('陶俊', '语文', 88),\n     ('陶俊', '数学', 84),\n     ('陶俊', '英语', 94),\n     ('刘可', '语文', 80),\n     ('刘可', '数学', 86),\n     ('刘可', '英语', 88),\n     ('李春', '语文', 89),\n     ('李春', '数学', 80),\n     ('李春', '英语', 87);\n```\n\n1. 方法一：使用if\n    ```sql\n    select \n        name as 名字 ,\n        sum(if(Subject='语文',Fraction,0)) as 语文,\n        sum(if(Subject='数学',Fraction,0))as 数学, \n        sum(if(Subject='英语',Fraction,0))as 英语,\n        round(AVG(Fraction),2) as 平均分,\n        SUM(Fraction) as 总分\n    from t_score group by name\n    -- 如果不用求总分的话，不需要下面的union\n    union(\n        select name as 名字 , sum(语文) Chinese,sum(数学) Math,sum(英语) English,round(AVG(总分),2)as 平均分,sum(总分) score  from(\n            select 'TOTAL' as name,\n            sum(if(Subject='语文',Fraction,0)) as 语文,\n            sum(if(Subject='数学',Fraction,0))as 数学, \n            sum(if(Subject='英语',Fraction,0))as 英语,\n            SUM(Fraction) as 总分\n            from t_score group by Subject \n        )t GROUP BY t.`name`\n    )\n    ```\n2. 方法二：使用case\n    ```sql\n        select name as name,\n        sum(case when Subject = '语文' then Fraction end) as Chinese,\n        sum(case when Subject = '数学' then Fraction end) as Math,\n        sum(case when Subject = '英语' then Fraction end) as English,\n        sum(fraction)as score\n        from t_score group by name\n        -- 如果不用求总分的话，不需要下面的union\n        UNION ALL\n        (\n            select name as Name,sum(Chinese) as Chinese,sum(Math) as Math,sum(English) as English,sum(score) as score from(\n            select 'TOTAL' as name,\n            sum(case when Subject = '语文' then Fraction end) as Chinese,\n            sum(case when Subject = '数学' then Fraction end) as Math,\n            sum(case when Subject = '英语' then Fraction end) as English,\n            sum(fraction)as score\n            from t_score group by Subject,name)t GROUP BY t.`name`\n        )\n    ```\n3. 方法三：使用with rollup\n   在group分组字段的基础上在进行统计数据；\n    ```sql\n    select\n        -- coalesce(name,'TOTAL') name,\n        ifnull(name,'TOTAL') name,\n        sum(if(Subject='语文',Fraction,0)) as 语文,\n        sum(if(Subject='英语',Fraction,0)) as 英语,\n        sum(if(Subject='数学',Fraction,0))as 数学,\n        sum(Fraction) 总分\n    from t_score group by name with rollup\n    ```\n    \n   \n\n","slug":"mysql行列转置","published":1,"updated":"2022-04-06T09:51:44.953Z","layout":"post","photos":[],"link":"","_id":"cl424hx5g0019ad5i6d2bfx1w","content":"<p>数据表：<br><img src=\"/mysql%E8%A1%8C%E5%88%97%E8%BD%AC%E7%BD%AE/01.png\" alt=\"原始数据\"></p>\n<p>行转列结果为：<br><img src=\"/mysql%E8%A1%8C%E5%88%97%E8%BD%AC%E7%BD%AE/02.png\" alt=\"转置后结果\"><br>数据库表语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_score(</span><br><span class=\"line\">    id <span class=\"type\">int</span> <span class=\"keyword\">primary</span> key auto_increment,</span><br><span class=\"line\">    name <span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,  #名字</span><br><span class=\"line\">    Subject <span class=\"type\">varchar</span>(<span class=\"number\">10</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>, #科目</span><br><span class=\"line\">    Fraction <span class=\"keyword\">double</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>  #分数</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `t_score`(name,Subject,Fraction) <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">     (<span class=\"string\">&#x27;王海&#x27;</span>, <span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"number\">86</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;王海&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"number\">83</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;王海&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"number\">93</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;陶俊&#x27;</span>, <span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"number\">88</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;陶俊&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"number\">84</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;陶俊&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"number\">94</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;刘可&#x27;</span>, <span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"number\">80</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;刘可&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"number\">86</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;刘可&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"number\">88</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;李春&#x27;</span>, <span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"number\">89</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;李春&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"number\">80</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;李春&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"number\">87</span>);</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>方法一：使用if <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">    name <span class=\"keyword\">as</span> 名字 ,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;语文&#x27;</span>,Fraction,<span class=\"number\">0</span>)) <span class=\"keyword\">as</span> 语文,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;数学&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 数学, </span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;英语&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 英语,</span><br><span class=\"line\">    round(<span class=\"built_in\">AVG</span>(Fraction),<span class=\"number\">2</span>) <span class=\"keyword\">as</span> 平均分,</span><br><span class=\"line\">    <span class=\"built_in\">SUM</span>(Fraction) <span class=\"keyword\">as</span> 总分</span><br><span class=\"line\"><span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name</span><br><span class=\"line\"><span class=\"comment\">-- 如果不用求总分的话，不需要下面的union</span></span><br><span class=\"line\"><span class=\"keyword\">union</span>(</span><br><span class=\"line\">    <span class=\"keyword\">select</span> name <span class=\"keyword\">as</span> 名字 , <span class=\"built_in\">sum</span>(语文) Chinese,<span class=\"built_in\">sum</span>(数学) Math,<span class=\"built_in\">sum</span>(英语) English,round(<span class=\"built_in\">AVG</span>(总分),<span class=\"number\">2</span>)<span class=\"keyword\">as</span> 平均分,<span class=\"built_in\">sum</span>(总分) score  <span class=\"keyword\">from</span>(</span><br><span class=\"line\">        <span class=\"keyword\">select</span> <span class=\"string\">&#x27;TOTAL&#x27;</span> <span class=\"keyword\">as</span> name,</span><br><span class=\"line\">        <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;语文&#x27;</span>,Fraction,<span class=\"number\">0</span>)) <span class=\"keyword\">as</span> 语文,</span><br><span class=\"line\">        <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;数学&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 数学, </span><br><span class=\"line\">        <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;英语&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 英语,</span><br><span class=\"line\">        <span class=\"built_in\">SUM</span>(Fraction) <span class=\"keyword\">as</span> 总分</span><br><span class=\"line\">        <span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> Subject </span><br><span class=\"line\">    )t <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> t.`name`</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li>方法二：使用case <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> name <span class=\"keyword\">as</span> name,</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;语文&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> Chinese,</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;数学&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> Math,</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;英语&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> English,</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(fraction)<span class=\"keyword\">as</span> score</span><br><span class=\"line\"><span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name</span><br><span class=\"line\"><span class=\"comment\">-- 如果不用求总分的话，不需要下面的union</span></span><br><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">select</span> name <span class=\"keyword\">as</span> Name,<span class=\"built_in\">sum</span>(Chinese) <span class=\"keyword\">as</span> Chinese,<span class=\"built_in\">sum</span>(Math) <span class=\"keyword\">as</span> Math,<span class=\"built_in\">sum</span>(English) <span class=\"keyword\">as</span> English,<span class=\"built_in\">sum</span>(score) <span class=\"keyword\">as</span> score <span class=\"keyword\">from</span>(</span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"string\">&#x27;TOTAL&#x27;</span> <span class=\"keyword\">as</span> name,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;语文&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> Chinese,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;数学&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> Math,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;英语&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> English,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(fraction)<span class=\"keyword\">as</span> score</span><br><span class=\"line\">    <span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> Subject,name)t <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> t.`name`</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li>方法三：使用with rollup<br>在group分组字段的基础上在进行统计数据； <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">    <span class=\"comment\">-- coalesce(name,&#x27;TOTAL&#x27;) name,</span></span><br><span class=\"line\">    ifnull(name,<span class=\"string\">&#x27;TOTAL&#x27;</span>) name,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;语文&#x27;</span>,Fraction,<span class=\"number\">0</span>)) <span class=\"keyword\">as</span> 语文,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;英语&#x27;</span>,Fraction,<span class=\"number\">0</span>)) <span class=\"keyword\">as</span> 英语,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;数学&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 数学,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(Fraction) 总分</span><br><span class=\"line\"><span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name <span class=\"keyword\">with</span> <span class=\"keyword\">rollup</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>数据表：<br><img src=\"/mysql%E8%A1%8C%E5%88%97%E8%BD%AC%E7%BD%AE/01.png\" alt=\"原始数据\"></p>\n<p>行转列结果为：<br><img src=\"/mysql%E8%A1%8C%E5%88%97%E8%BD%AC%E7%BD%AE/02.png\" alt=\"转置后结果\"><br>数据库表语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_score(</span><br><span class=\"line\">    id <span class=\"type\">int</span> <span class=\"keyword\">primary</span> key auto_increment,</span><br><span class=\"line\">    name <span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,  #名字</span><br><span class=\"line\">    Subject <span class=\"type\">varchar</span>(<span class=\"number\">10</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>, #科目</span><br><span class=\"line\">    Fraction <span class=\"keyword\">double</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>  #分数</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `t_score`(name,Subject,Fraction) <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">     (<span class=\"string\">&#x27;王海&#x27;</span>, <span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"number\">86</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;王海&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"number\">83</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;王海&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"number\">93</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;陶俊&#x27;</span>, <span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"number\">88</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;陶俊&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"number\">84</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;陶俊&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"number\">94</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;刘可&#x27;</span>, <span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"number\">80</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;刘可&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"number\">86</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;刘可&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"number\">88</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;李春&#x27;</span>, <span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"number\">89</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;李春&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"number\">80</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;李春&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"number\">87</span>);</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>方法一：使用if <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">    name <span class=\"keyword\">as</span> 名字 ,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;语文&#x27;</span>,Fraction,<span class=\"number\">0</span>)) <span class=\"keyword\">as</span> 语文,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;数学&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 数学, </span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;英语&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 英语,</span><br><span class=\"line\">    round(<span class=\"built_in\">AVG</span>(Fraction),<span class=\"number\">2</span>) <span class=\"keyword\">as</span> 平均分,</span><br><span class=\"line\">    <span class=\"built_in\">SUM</span>(Fraction) <span class=\"keyword\">as</span> 总分</span><br><span class=\"line\"><span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name</span><br><span class=\"line\"><span class=\"comment\">-- 如果不用求总分的话，不需要下面的union</span></span><br><span class=\"line\"><span class=\"keyword\">union</span>(</span><br><span class=\"line\">    <span class=\"keyword\">select</span> name <span class=\"keyword\">as</span> 名字 , <span class=\"built_in\">sum</span>(语文) Chinese,<span class=\"built_in\">sum</span>(数学) Math,<span class=\"built_in\">sum</span>(英语) English,round(<span class=\"built_in\">AVG</span>(总分),<span class=\"number\">2</span>)<span class=\"keyword\">as</span> 平均分,<span class=\"built_in\">sum</span>(总分) score  <span class=\"keyword\">from</span>(</span><br><span class=\"line\">        <span class=\"keyword\">select</span> <span class=\"string\">&#x27;TOTAL&#x27;</span> <span class=\"keyword\">as</span> name,</span><br><span class=\"line\">        <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;语文&#x27;</span>,Fraction,<span class=\"number\">0</span>)) <span class=\"keyword\">as</span> 语文,</span><br><span class=\"line\">        <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;数学&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 数学, </span><br><span class=\"line\">        <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;英语&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 英语,</span><br><span class=\"line\">        <span class=\"built_in\">SUM</span>(Fraction) <span class=\"keyword\">as</span> 总分</span><br><span class=\"line\">        <span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> Subject </span><br><span class=\"line\">    )t <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> t.`name`</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li>方法二：使用case <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> name <span class=\"keyword\">as</span> name,</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;语文&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> Chinese,</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;数学&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> Math,</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;英语&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> English,</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(fraction)<span class=\"keyword\">as</span> score</span><br><span class=\"line\"><span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name</span><br><span class=\"line\"><span class=\"comment\">-- 如果不用求总分的话，不需要下面的union</span></span><br><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">select</span> name <span class=\"keyword\">as</span> Name,<span class=\"built_in\">sum</span>(Chinese) <span class=\"keyword\">as</span> Chinese,<span class=\"built_in\">sum</span>(Math) <span class=\"keyword\">as</span> Math,<span class=\"built_in\">sum</span>(English) <span class=\"keyword\">as</span> English,<span class=\"built_in\">sum</span>(score) <span class=\"keyword\">as</span> score <span class=\"keyword\">from</span>(</span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"string\">&#x27;TOTAL&#x27;</span> <span class=\"keyword\">as</span> name,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;语文&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> Chinese,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;数学&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> Math,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;英语&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> English,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(fraction)<span class=\"keyword\">as</span> score</span><br><span class=\"line\">    <span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> Subject,name)t <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> t.`name`</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li>方法三：使用with rollup<br>在group分组字段的基础上在进行统计数据； <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">    <span class=\"comment\">-- coalesce(name,&#x27;TOTAL&#x27;) name,</span></span><br><span class=\"line\">    ifnull(name,<span class=\"string\">&#x27;TOTAL&#x27;</span>) name,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;语文&#x27;</span>,Fraction,<span class=\"number\">0</span>)) <span class=\"keyword\">as</span> 语文,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;英语&#x27;</span>,Fraction,<span class=\"number\">0</span>)) <span class=\"keyword\">as</span> 英语,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;数学&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 数学,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(Fraction) 总分</span><br><span class=\"line\"><span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name <span class=\"keyword\">with</span> <span class=\"keyword\">rollup</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"ConcurrentHashMap线程安全","comments":1,"abbrlink":26925,"date":"2021-07-02T08:17:29.000Z","translate_title":"ConcurrentHashMap-thread-safety","_content":"##1. jdk1.7 ConcurrentHashMap\njdk1.7 ConcurrentHashMap是由一个Segment数组和多个HashEntry数组组成\n![image-20201210103251475](./ConcurrentHashMap/01.png)\n其实就是将HashMap分为多个小HashMap,每个Segment元素维护一个小HashMap,目的是锁分离，本来实现同步，直接可以是对整个HashMap加锁，但是加锁粒度太大，影响并发性能，所以变换成此结构，仅仅对Segment元素加锁，降低锁粒度，提高并发性能\n\n###1.1 初始化过程\n由于变换成**Segment数组+HashEntry数组**，所以初始化时，需要依次对Segment数组和HashEntry数组初始化\n1. Segment数组初始化\n   \n   初始化时，使用右移一位，乘以2的计算方式，保证ssize是2的幂次方，小于指定参数concurrencyLevel的最大2的幂次方\n    ```java\n    int sshift = 0;\n    //记录Segment数组大小\n    int ssize = 1;\n    while (ssize < concurrencyLevel) {\n        ++sshift;\n        ssize <<= 1;\n    }\n    ```\n   \n2. HashEntry数组初始化\n\n   跟Segment数组初始化方式相同\n    ```java\n    int cap = 1;\n    while(cap < c){\n        cap <<=1;\n    }\n    ```\n    \n### 1.2 put操作\n对于插入操作，需要两次Hash映射去定位数据存储位置\n1. 首先通过第一次hash过程，定位Segment位置 \n2. 然后通过第二次hash过程定位HashEntry位置\n\nSegment继承ReentrantLock,在数据插入指定HashEntry过程的时候会尝试调用ReentrantLock的tryLock方法获取锁，如果获取成功就直接插入相应位置，如果有线程获取该Segment的锁，当前线程就会以自旋方式去继续调用tryLock方法去获取锁，超过指定次数就挂起，等待唤醒。\n\n### 1.3 get操作\n    \n也是两次Hash映射，相对于put操作，少了加锁过程\n\n### 1.4 size操作\nsize操作就是计算ConcurrentHashMap的大小，有两种方案\n\n- 给每个Segment都加上锁(相当于给整个Map加上锁)，然后计算size返回\n- 不加锁的模式，尝试多次计算ConcurrentHashMap的size,最多三次，比较前后计算的结果，结果一致就认为当前没有元素加入，计算结果是准确的。(查看计算出size的前后modCount的数值有没有发生变化，modCount的值用于记录元素变化的操作。如put，remove，clear)\n\n\n## 2. jdk1.8 ConcurrentHashMap\njdk1.8ConcurrentHashMap是数组+链表，或者数组+红黑树结构,并发控制使用Synchronized关键字和CAS操作\n![jdk1.8 ConcurrentHashMap](./ConcurrentHashMap/02.png)\n\n### 2.1关键概念点\n- sizeCtl变量(volatile修饰)\n   通过CAS操作+volatile, 控制数组初始化和扩容操作\n   - -1 代表正在初始化\n   - -N 前16位记录数组容量，后16位记录扩容线程大小+1，是个负数\n   - 正数0，表示未初始化\n   - 正数，0.75*当前数组大小\n- <key,value>键值对，封装为Node对象\n- table变量(volatile)：也就是所说的数组，默认为null，默认大小为16的数组，每次扩容时大小总是2的幂次方\n- nextTable(volatile):扩容时新生成的数组，大小为table的两倍\n\n### 2.2put函数\n```java\npublic V put(K key, V value) {\n    return putVal(key, value, false);\n}\n```\n**1.putValue函数**\n首先调用spread函数，计算hash值，之后进入一个自旋循环过程，直到插入或替换成功，才会返回。如果table未被初始化，则调用initTable进行初始化。之后判断hash映射的位置是否为null,如果为null,直接通过CAS自旋操作，插入元素成功，则直接返回，如果映射的位置值为MOVED(-1),则直接去协助扩容，排除以上条件后，尝试对链头Node节点f加锁，加锁成功后，链表通过尾插遍历，进行插入或替换。红黑树通过查询遍历，进行插入或替换。之后如果当前链表节点数量大于阈值，则调用treeifyBin函数，转换为红黑树最后通过调用addCount,执行CAS操作，更新数组大小，并且判断是否需要进行扩容\n```java\nfinal V putVal(K key, V value, boolean onlyIfAbsent) {\n    if (key == null || value == null) throw new NullPointerException();\n    //spread函数计算hash值\n    int hash = spread(key.hashCode());\n    int binCount = 0;\n    //自旋过程\n    for (Node<K,V>[] tab = table;;) {\n        Node<K,V> f; int n, i, fh;\n        if (tab == null || (n = tab.length) == 0)\n            tab = initTable();\n        //判断映射位置节点是否为空\n        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {\n            if (casTabAt(tab, i, null,\n                         new Node<K,V>(hash, key, value, null)))\n                break;                  \n        }\n        //如果映射位置节点value==MOVED，说明正在进行扩容操作\n        else if ((fh = f.hash) == MOVED)\n            tab = helpTransfer(tab, f);\n        else {\n            V oldVal = null;\n            synchronized (f) {\n                if (tabAt(tab, i) == f) {\n                    if (fh >= 0) {\n                        binCount = 1;\n                        for (Node<K,V> e = f;; ++binCount) {\n                            K ek;\n                            if (e.hash == hash &&\n                                ((ek = e.key) == key ||\n                                 (ek != null && key.equals(ek)))) {\n                                oldVal = e.val;\n                                if (!onlyIfAbsent)\n                                    e.val = value;\n                                break;\n                            }\n                            Node<K,V> pred = e;\n                            if ((e = e.next) == null) {\n                                pred.next = new Node<K,V>(hash, key,\n                                                          value, null);\n                                break;\n                            }\n                        }\n                    }\n                    //红黑树结构\n                    else if (f instanceof TreeBin) {\n                        Node<K,V> p;\n                        binCount = 2;\n                        if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,\n                                                       value)) != null) {\n                            oldVal = p.val;\n                            if (!onlyIfAbsent)\n                                p.val = value;\n                        }\n                    }\n                }\n            }\n            //链表节点数量超过阈值，转为红黑树\n            if (binCount != 0) {\n                if (binCount >= TREEIFY_THRESHOLD)\n                    treeifyBin(tab, i);\n                if (oldVal != null)\n                    return oldVal;\n                break;\n            }\n        }\n    }\n    addCount(1L, binCount);\n    return null;\n}\n```\n\n**2. spread函数**\nspread函数，计算hash值。key的hash值与其高16位相异或，然后与HASH_BITS将最高位置0\n```java\nstatic final int spread(int h) {\n    return (h ^ (h >>> 16)) & HASH_BITS;\n    //HASH_BITS=0x7fffffff\n}\n```\n\n**3. tableAt函数**\n获取最新的tab[i]\n\n**4. casTabAt函数**\n通过CAS操作，将值赋值进tab中对应位置\n```java\nstatic final <K,V> Node<K,V> tabAt(Node<K,V>[] tab, int i) {\n        return (Node<K,V>)U.getObjectVolatile(tab, ((long)i << ASHIFT) + ABASE);\n}\n\nstatic final <K,V> boolean casTabAt(Node<K,V>[] tab, int i,\n                                        Node<K,V> c, Node<K,V> v) {\n        return U.compareAndSwapObject(tab, ((long)i << ASHIFT) + ABASE, c, v);\n}\n```\n**5. addCount函数**\n尝试使用CAS操作，将BASECOUNT加1，操作失败，则说明有其他线程在进行加一操作,发生冲突。之后判断是否需要扩容\n```java\nprivate final void addCount(long x, int check) {\n    CounterCell[] as; long b, s;\n    //使用CAS操作，将BASECOUNT加1\n    if ((as = counterCells) != null ||\n        !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x)) {\n        CounterCell a; long v; int m;\n        //发生冲突\n        boolean uncontended = true;\n        if (as == null || (m = as.length - 1) < 0 ||\n            (a = as[ThreadLocalRandom.getProbe() & m]) == null ||\n            !(uncontended =\n              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) {\n            //多线程冲突执行\n            fullAddCount(x, uncontended);\n            return;\n        }\n        if (check <= 1)\n            return;\n        s = sumCount();\n    }\n    if (check >= 0) {\n        Node<K,V>[] tab, nt; int n, sc;\n        //判断是否需要扩容  大于0.75当前数组大小\n        while (s >= (long)(sc = sizeCtl) && (tab = table) != null &&\n               (n = tab.length) < MAXIMUM_CAPACITY) {\n            int rs = resizeStamp(n);\n            if (sc < 0) {\n                //判断是否需要帮助扩容\n                //扩容完成，或者扩容线程达到阈值不需要进行扩容，直接break\n                if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||\n                    sc == rs + MAX_RESIZERS || (nt = nextTable) == null ||\n                    transferIndex <= 0)\n                    break;\n                //帮助扩容，扩容线程数+1\n                if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1))\n                    transfer(tab, nt);\n            }\n            //进行扩容操作\n            else if (U.compareAndSwapInt(this, SIZECTL, sc,\n                                         (rs << RESIZE_STAMP_SHIFT) + 2))\n                transfer(tab, null);\n            s = sumCount();\n        }\n    }\n}\n```\n### 2.3 initTable函数\n进入一个自旋过程，一旦有线程扩容成功，才break\n- 如果sizeCtl < 0,说明已经有线程正在扩容，所以直接让出线程。\n- 如果sizeCtl>=0,说明当前没有线程扩容，尝试CAS操作，设置sizeCtl为-1\n- 设置sizeCtl为-1成功的线程，进行扩容操作，并且将sc更新为数组负载阈值0.75*n\n```java\nprivate final Node<K,V>[] initTable() {\n    Node<K,V>[] tab; int sc;\n    //自旋过程\n    while ((tab = table) == null || tab.length == 0) {\n        if ((sc = sizeCtl) < 0)\n            Thread.yield(); \n        else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) {\n            try {\n                if ((tab = table) == null || tab.length == 0) {\n                    int n = (sc > 0) ? sc : DEFAULT_CAPACITY;\n                    @SuppressWarnings(\"unchecked\")\n                    Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n];\n                    table = tab = nt;\n                    //0.75*n\n                    sc = n - (n >>> 2);\n                }\n            } finally {\n                sizeCtl = sc;\n            }\n            break;\n        }\n    }\n    return tab;\n}\n```\n\n### 2.4 统计ConCurrentHashMap中的元素个数\n**1. mappingCount函数**\n```java\n//调用sumCount,获得元素数量\npublic long mappingCount() {\nlong n = sumCount();\nreturn (n < 0L) ? 0L : n; // ignore transient negative values\n}\n```\n\n**2. sumCount函数**\n\nbaseCount+ counterCells各个元素值，就是元素数量\n其实baseCount就是记录容器数量的，直接放回baseCount不就可以了吗？为什么sumCount()方法中还要遍历counterCells数组，累加对象的值呢？\n其中：counterCells是个全局的变量，表示的是CounterCell类数组。CounterCell是ConcurrentHashmap的内部类，它就是存储一个值。\nJDK1.8中使用一个volatile类型的变量baseCount记录元素的个数，当插入新数据put()或则删除数据remove()时，会通过addCount()方法更新baseCount\n初始化时counterCells为空，在并发量很高时，如果存在两个线程同时执行CAS修改baseCount值，则失败的线程会继续执行方法体中的逻辑，执行fullAddCount(x, uncontended)方法，这个方法其实就是初始化counterCells，并将x的值插入到counterCell类中，而x值一般也就是1或-1，这可以从put()方法中得知。\n这些对象是因为在CAS更新baseCount值时，由于高并发而导致失败，最终将值保存到CounterCell中，放到counterCells里。这也就是为什么sumCount()中需要遍历counterCells数组，sum累加CounterCell.value值了。\n```java\nfinal long sumCount() {\n    CounterCell[] as = counterCells; CounterCell a;\n    long sum = baseCount;\n        if (as != null) {\n            for (int i = 0; i < as.length; ++i) {\n                if ((a = as[i]) != null)\n                sum += a.value;\n        }\n    }\n    return sum;\n}\n```\n\n**3. CounterCell类**\n只存储一个值\n```java\nstatic final class CounterCell{\n   volatile long value;\n   CountCell(long x) {value = x;}\n}\n```\n\n\n原文链接：https://blog.csdn.net/zycxnanwang/article/details/105424734","source":"_posts/2021/07/ConcurrentHashMap.md","raw":"---\ntitle: ConcurrentHashMap线程安全\ntags: Java\ncategories: 知识整理\ncomments: true\nabbrlink: 26925\ndate: 2021-07-02 16:17:29\ntranslate_title: ConcurrentHashMap-thread-safety\n---\n##1. jdk1.7 ConcurrentHashMap\njdk1.7 ConcurrentHashMap是由一个Segment数组和多个HashEntry数组组成\n![image-20201210103251475](./ConcurrentHashMap/01.png)\n其实就是将HashMap分为多个小HashMap,每个Segment元素维护一个小HashMap,目的是锁分离，本来实现同步，直接可以是对整个HashMap加锁，但是加锁粒度太大，影响并发性能，所以变换成此结构，仅仅对Segment元素加锁，降低锁粒度，提高并发性能\n\n###1.1 初始化过程\n由于变换成**Segment数组+HashEntry数组**，所以初始化时，需要依次对Segment数组和HashEntry数组初始化\n1. Segment数组初始化\n   \n   初始化时，使用右移一位，乘以2的计算方式，保证ssize是2的幂次方，小于指定参数concurrencyLevel的最大2的幂次方\n    ```java\n    int sshift = 0;\n    //记录Segment数组大小\n    int ssize = 1;\n    while (ssize < concurrencyLevel) {\n        ++sshift;\n        ssize <<= 1;\n    }\n    ```\n   \n2. HashEntry数组初始化\n\n   跟Segment数组初始化方式相同\n    ```java\n    int cap = 1;\n    while(cap < c){\n        cap <<=1;\n    }\n    ```\n    \n### 1.2 put操作\n对于插入操作，需要两次Hash映射去定位数据存储位置\n1. 首先通过第一次hash过程，定位Segment位置 \n2. 然后通过第二次hash过程定位HashEntry位置\n\nSegment继承ReentrantLock,在数据插入指定HashEntry过程的时候会尝试调用ReentrantLock的tryLock方法获取锁，如果获取成功就直接插入相应位置，如果有线程获取该Segment的锁，当前线程就会以自旋方式去继续调用tryLock方法去获取锁，超过指定次数就挂起，等待唤醒。\n\n### 1.3 get操作\n    \n也是两次Hash映射，相对于put操作，少了加锁过程\n\n### 1.4 size操作\nsize操作就是计算ConcurrentHashMap的大小，有两种方案\n\n- 给每个Segment都加上锁(相当于给整个Map加上锁)，然后计算size返回\n- 不加锁的模式，尝试多次计算ConcurrentHashMap的size,最多三次，比较前后计算的结果，结果一致就认为当前没有元素加入，计算结果是准确的。(查看计算出size的前后modCount的数值有没有发生变化，modCount的值用于记录元素变化的操作。如put，remove，clear)\n\n\n## 2. jdk1.8 ConcurrentHashMap\njdk1.8ConcurrentHashMap是数组+链表，或者数组+红黑树结构,并发控制使用Synchronized关键字和CAS操作\n![jdk1.8 ConcurrentHashMap](./ConcurrentHashMap/02.png)\n\n### 2.1关键概念点\n- sizeCtl变量(volatile修饰)\n   通过CAS操作+volatile, 控制数组初始化和扩容操作\n   - -1 代表正在初始化\n   - -N 前16位记录数组容量，后16位记录扩容线程大小+1，是个负数\n   - 正数0，表示未初始化\n   - 正数，0.75*当前数组大小\n- <key,value>键值对，封装为Node对象\n- table变量(volatile)：也就是所说的数组，默认为null，默认大小为16的数组，每次扩容时大小总是2的幂次方\n- nextTable(volatile):扩容时新生成的数组，大小为table的两倍\n\n### 2.2put函数\n```java\npublic V put(K key, V value) {\n    return putVal(key, value, false);\n}\n```\n**1.putValue函数**\n首先调用spread函数，计算hash值，之后进入一个自旋循环过程，直到插入或替换成功，才会返回。如果table未被初始化，则调用initTable进行初始化。之后判断hash映射的位置是否为null,如果为null,直接通过CAS自旋操作，插入元素成功，则直接返回，如果映射的位置值为MOVED(-1),则直接去协助扩容，排除以上条件后，尝试对链头Node节点f加锁，加锁成功后，链表通过尾插遍历，进行插入或替换。红黑树通过查询遍历，进行插入或替换。之后如果当前链表节点数量大于阈值，则调用treeifyBin函数，转换为红黑树最后通过调用addCount,执行CAS操作，更新数组大小，并且判断是否需要进行扩容\n```java\nfinal V putVal(K key, V value, boolean onlyIfAbsent) {\n    if (key == null || value == null) throw new NullPointerException();\n    //spread函数计算hash值\n    int hash = spread(key.hashCode());\n    int binCount = 0;\n    //自旋过程\n    for (Node<K,V>[] tab = table;;) {\n        Node<K,V> f; int n, i, fh;\n        if (tab == null || (n = tab.length) == 0)\n            tab = initTable();\n        //判断映射位置节点是否为空\n        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {\n            if (casTabAt(tab, i, null,\n                         new Node<K,V>(hash, key, value, null)))\n                break;                  \n        }\n        //如果映射位置节点value==MOVED，说明正在进行扩容操作\n        else if ((fh = f.hash) == MOVED)\n            tab = helpTransfer(tab, f);\n        else {\n            V oldVal = null;\n            synchronized (f) {\n                if (tabAt(tab, i) == f) {\n                    if (fh >= 0) {\n                        binCount = 1;\n                        for (Node<K,V> e = f;; ++binCount) {\n                            K ek;\n                            if (e.hash == hash &&\n                                ((ek = e.key) == key ||\n                                 (ek != null && key.equals(ek)))) {\n                                oldVal = e.val;\n                                if (!onlyIfAbsent)\n                                    e.val = value;\n                                break;\n                            }\n                            Node<K,V> pred = e;\n                            if ((e = e.next) == null) {\n                                pred.next = new Node<K,V>(hash, key,\n                                                          value, null);\n                                break;\n                            }\n                        }\n                    }\n                    //红黑树结构\n                    else if (f instanceof TreeBin) {\n                        Node<K,V> p;\n                        binCount = 2;\n                        if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,\n                                                       value)) != null) {\n                            oldVal = p.val;\n                            if (!onlyIfAbsent)\n                                p.val = value;\n                        }\n                    }\n                }\n            }\n            //链表节点数量超过阈值，转为红黑树\n            if (binCount != 0) {\n                if (binCount >= TREEIFY_THRESHOLD)\n                    treeifyBin(tab, i);\n                if (oldVal != null)\n                    return oldVal;\n                break;\n            }\n        }\n    }\n    addCount(1L, binCount);\n    return null;\n}\n```\n\n**2. spread函数**\nspread函数，计算hash值。key的hash值与其高16位相异或，然后与HASH_BITS将最高位置0\n```java\nstatic final int spread(int h) {\n    return (h ^ (h >>> 16)) & HASH_BITS;\n    //HASH_BITS=0x7fffffff\n}\n```\n\n**3. tableAt函数**\n获取最新的tab[i]\n\n**4. casTabAt函数**\n通过CAS操作，将值赋值进tab中对应位置\n```java\nstatic final <K,V> Node<K,V> tabAt(Node<K,V>[] tab, int i) {\n        return (Node<K,V>)U.getObjectVolatile(tab, ((long)i << ASHIFT) + ABASE);\n}\n\nstatic final <K,V> boolean casTabAt(Node<K,V>[] tab, int i,\n                                        Node<K,V> c, Node<K,V> v) {\n        return U.compareAndSwapObject(tab, ((long)i << ASHIFT) + ABASE, c, v);\n}\n```\n**5. addCount函数**\n尝试使用CAS操作，将BASECOUNT加1，操作失败，则说明有其他线程在进行加一操作,发生冲突。之后判断是否需要扩容\n```java\nprivate final void addCount(long x, int check) {\n    CounterCell[] as; long b, s;\n    //使用CAS操作，将BASECOUNT加1\n    if ((as = counterCells) != null ||\n        !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x)) {\n        CounterCell a; long v; int m;\n        //发生冲突\n        boolean uncontended = true;\n        if (as == null || (m = as.length - 1) < 0 ||\n            (a = as[ThreadLocalRandom.getProbe() & m]) == null ||\n            !(uncontended =\n              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) {\n            //多线程冲突执行\n            fullAddCount(x, uncontended);\n            return;\n        }\n        if (check <= 1)\n            return;\n        s = sumCount();\n    }\n    if (check >= 0) {\n        Node<K,V>[] tab, nt; int n, sc;\n        //判断是否需要扩容  大于0.75当前数组大小\n        while (s >= (long)(sc = sizeCtl) && (tab = table) != null &&\n               (n = tab.length) < MAXIMUM_CAPACITY) {\n            int rs = resizeStamp(n);\n            if (sc < 0) {\n                //判断是否需要帮助扩容\n                //扩容完成，或者扩容线程达到阈值不需要进行扩容，直接break\n                if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||\n                    sc == rs + MAX_RESIZERS || (nt = nextTable) == null ||\n                    transferIndex <= 0)\n                    break;\n                //帮助扩容，扩容线程数+1\n                if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1))\n                    transfer(tab, nt);\n            }\n            //进行扩容操作\n            else if (U.compareAndSwapInt(this, SIZECTL, sc,\n                                         (rs << RESIZE_STAMP_SHIFT) + 2))\n                transfer(tab, null);\n            s = sumCount();\n        }\n    }\n}\n```\n### 2.3 initTable函数\n进入一个自旋过程，一旦有线程扩容成功，才break\n- 如果sizeCtl < 0,说明已经有线程正在扩容，所以直接让出线程。\n- 如果sizeCtl>=0,说明当前没有线程扩容，尝试CAS操作，设置sizeCtl为-1\n- 设置sizeCtl为-1成功的线程，进行扩容操作，并且将sc更新为数组负载阈值0.75*n\n```java\nprivate final Node<K,V>[] initTable() {\n    Node<K,V>[] tab; int sc;\n    //自旋过程\n    while ((tab = table) == null || tab.length == 0) {\n        if ((sc = sizeCtl) < 0)\n            Thread.yield(); \n        else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) {\n            try {\n                if ((tab = table) == null || tab.length == 0) {\n                    int n = (sc > 0) ? sc : DEFAULT_CAPACITY;\n                    @SuppressWarnings(\"unchecked\")\n                    Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n];\n                    table = tab = nt;\n                    //0.75*n\n                    sc = n - (n >>> 2);\n                }\n            } finally {\n                sizeCtl = sc;\n            }\n            break;\n        }\n    }\n    return tab;\n}\n```\n\n### 2.4 统计ConCurrentHashMap中的元素个数\n**1. mappingCount函数**\n```java\n//调用sumCount,获得元素数量\npublic long mappingCount() {\nlong n = sumCount();\nreturn (n < 0L) ? 0L : n; // ignore transient negative values\n}\n```\n\n**2. sumCount函数**\n\nbaseCount+ counterCells各个元素值，就是元素数量\n其实baseCount就是记录容器数量的，直接放回baseCount不就可以了吗？为什么sumCount()方法中还要遍历counterCells数组，累加对象的值呢？\n其中：counterCells是个全局的变量，表示的是CounterCell类数组。CounterCell是ConcurrentHashmap的内部类，它就是存储一个值。\nJDK1.8中使用一个volatile类型的变量baseCount记录元素的个数，当插入新数据put()或则删除数据remove()时，会通过addCount()方法更新baseCount\n初始化时counterCells为空，在并发量很高时，如果存在两个线程同时执行CAS修改baseCount值，则失败的线程会继续执行方法体中的逻辑，执行fullAddCount(x, uncontended)方法，这个方法其实就是初始化counterCells，并将x的值插入到counterCell类中，而x值一般也就是1或-1，这可以从put()方法中得知。\n这些对象是因为在CAS更新baseCount值时，由于高并发而导致失败，最终将值保存到CounterCell中，放到counterCells里。这也就是为什么sumCount()中需要遍历counterCells数组，sum累加CounterCell.value值了。\n```java\nfinal long sumCount() {\n    CounterCell[] as = counterCells; CounterCell a;\n    long sum = baseCount;\n        if (as != null) {\n            for (int i = 0; i < as.length; ++i) {\n                if ((a = as[i]) != null)\n                sum += a.value;\n        }\n    }\n    return sum;\n}\n```\n\n**3. CounterCell类**\n只存储一个值\n```java\nstatic final class CounterCell{\n   volatile long value;\n   CountCell(long x) {value = x;}\n}\n```\n\n\n原文链接：https://blog.csdn.net/zycxnanwang/article/details/105424734","slug":"ConcurrentHashMap","published":1,"updated":"2022-03-27T14:06:03.445Z","layout":"post","photos":[],"link":"","_id":"cl424hx5h001dad5i9dua9pg0","content":"<p>##1. jdk1.7 ConcurrentHashMap<br>jdk1.7 ConcurrentHashMap是由一个Segment数组和多个HashEntry数组组成<br><img src=\"/ConcurrentHashMap/01.png\" alt=\"image-20201210103251475\"><br>其实就是将HashMap分为多个小HashMap,每个Segment元素维护一个小HashMap,目的是锁分离，本来实现同步，直接可以是对整个HashMap加锁，但是加锁粒度太大，影响并发性能，所以变换成此结构，仅仅对Segment元素加锁，降低锁粒度，提高并发性能</p>\n<p>###1.1 初始化过程<br>由于变换成<strong>Segment数组+HashEntry数组</strong>，所以初始化时，需要依次对Segment数组和HashEntry数组初始化</p>\n<ol>\n<li><p>Segment数组初始化</p>\n<p>初始化时，使用右移一位，乘以2的计算方式，保证ssize是2的幂次方，小于指定参数concurrencyLevel的最大2的幂次方</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sshift = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//记录Segment数组大小</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ssize = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (ssize &lt; concurrencyLevel) &#123;</span><br><span class=\"line\">    ++sshift;</span><br><span class=\"line\">    ssize &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>HashEntry数组初始化</p>\n<p>跟Segment数组初始化方式相同</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> cap = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(cap &lt; c)&#123;</span><br><span class=\"line\">    cap &lt;&lt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"1-2-put操作\"><a href=\"#1-2-put操作\" class=\"headerlink\" title=\"1.2 put操作\"></a>1.2 put操作</h3><p>对于插入操作，需要两次Hash映射去定位数据存储位置</p>\n<ol>\n<li>首先通过第一次hash过程，定位Segment位置 </li>\n<li>然后通过第二次hash过程定位HashEntry位置</li>\n</ol>\n<p>Segment继承ReentrantLock,在数据插入指定HashEntry过程的时候会尝试调用ReentrantLock的tryLock方法获取锁，如果获取成功就直接插入相应位置，如果有线程获取该Segment的锁，当前线程就会以自旋方式去继续调用tryLock方法去获取锁，超过指定次数就挂起，等待唤醒。</p>\n<h3 id=\"1-3-get操作\"><a href=\"#1-3-get操作\" class=\"headerlink\" title=\"1.3 get操作\"></a>1.3 get操作</h3><p>也是两次Hash映射，相对于put操作，少了加锁过程</p>\n<h3 id=\"1-4-size操作\"><a href=\"#1-4-size操作\" class=\"headerlink\" title=\"1.4 size操作\"></a>1.4 size操作</h3><p>size操作就是计算ConcurrentHashMap的大小，有两种方案</p>\n<ul>\n<li>给每个Segment都加上锁(相当于给整个Map加上锁)，然后计算size返回</li>\n<li>不加锁的模式，尝试多次计算ConcurrentHashMap的size,最多三次，比较前后计算的结果，结果一致就认为当前没有元素加入，计算结果是准确的。(查看计算出size的前后modCount的数值有没有发生变化，modCount的值用于记录元素变化的操作。如put，remove，clear)</li>\n</ul>\n<h2 id=\"2-jdk1-8-ConcurrentHashMap\"><a href=\"#2-jdk1-8-ConcurrentHashMap\" class=\"headerlink\" title=\"2. jdk1.8 ConcurrentHashMap\"></a>2. jdk1.8 ConcurrentHashMap</h2><p>jdk1.8ConcurrentHashMap是数组+链表，或者数组+红黑树结构,并发控制使用Synchronized关键字和CAS操作<br><img src=\"/ConcurrentHashMap/02.png\" alt=\"jdk1.8 ConcurrentHashMap\"></p>\n<h3 id=\"2-1关键概念点\"><a href=\"#2-1关键概念点\" class=\"headerlink\" title=\"2.1关键概念点\"></a>2.1关键概念点</h3><ul>\n<li>sizeCtl变量(volatile修饰)<br> 通过CAS操作+volatile, 控制数组初始化和扩容操作<ul>\n<li>-1 代表正在初始化</li>\n<li>-N 前16位记录数组容量，后16位记录扩容线程大小+1，是个负数</li>\n<li>正数0，表示未初始化</li>\n<li>正数，0.75*当前数组大小</li>\n</ul>\n</li>\n<li>&lt;key,value&gt;键值对，封装为Node对象</li>\n<li>table变量(volatile)：也就是所说的数组，默认为null，默认大小为16的数组，每次扩容时大小总是2的幂次方</li>\n<li>nextTable(volatile):扩容时新生成的数组，大小为table的两倍</li>\n</ul>\n<h3 id=\"2-2put函数\"><a href=\"#2-2put函数\" class=\"headerlink\" title=\"2.2put函数\"></a>2.2put函数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(key, value, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>1.putValue函数</strong><br>首先调用spread函数，计算hash值，之后进入一个自旋循环过程，直到插入或替换成功，才会返回。如果table未被初始化，则调用initTable进行初始化。之后判断hash映射的位置是否为null,如果为null,直接通过CAS自旋操作，插入元素成功，则直接返回，如果映射的位置值为MOVED(-1),则直接去协助扩容，排除以上条件后，尝试对链头Node节点f加锁，加锁成功后，链表通过尾插遍历，进行插入或替换。红黑树通过查询遍历，进行插入或替换。之后如果当前链表节点数量大于阈值，则调用treeifyBin函数，转换为红黑树最后通过调用addCount,执行CAS操作，更新数组大小，并且判断是否需要进行扩容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span> || value == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    <span class=\"comment\">//spread函数计算hash值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash = spread(key.hashCode());</span><br><span class=\"line\">    <span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//自旋过程</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"keyword\">int</span> n, i, fh;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tab == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            tab = initTable();</span><br><span class=\"line\">        <span class=\"comment\">//判断映射位置节点是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i = (n - <span class=\"number\">1</span>) &amp; hash)) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (casTabAt(tab, i, <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                         <span class=\"keyword\">new</span> Node&lt;K,V&gt;(hash, key, value, <span class=\"keyword\">null</span>)))</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;                  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果映射位置节点value==MOVED，说明正在进行扩容操作</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((fh = f.hash) == MOVED)</span><br><span class=\"line\">            tab = helpTransfer(tab, f);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            V oldVal = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        binCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class=\"line\">                            K ek;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                                ((ek = e.key) == key ||</span><br><span class=\"line\">                                 (ek != <span class=\"keyword\">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class=\"line\">                                oldVal = e.val;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                    e.val = value;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            Node&lt;K,V&gt; pred = e;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((e = e.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                pred.next = <span class=\"keyword\">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class=\"line\">                                                          value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//红黑树结构</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">                        Node&lt;K,V&gt; p;</span><br><span class=\"line\">                        binCount = <span class=\"number\">2</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class=\"line\">                                                       value)) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            oldVal = p.val;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                p.val = value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//链表节点数量超过阈值，转为红黑树</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (binCount != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class=\"line\">                    treeifyBin(tab, i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (oldVal != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    addCount(<span class=\"number\">1L</span>, binCount);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. spread函数</strong><br>spread函数，计算hash值。key的hash值与其高16位相异或，然后与HASH_BITS将最高位置0</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">spread</span><span class=\"params\">(<span class=\"keyword\">int</span> h)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (h ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>)) &amp; HASH_BITS;</span><br><span class=\"line\">    <span class=\"comment\">//HASH_BITS=0x7fffffff</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. tableAt函数</strong><br>获取最新的tab[i]</p>\n<p><strong>4. casTabAt函数</strong><br>通过CAS操作，将值赋值进tab中对应位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> &lt;K,V&gt; <span class=\"function\">Node&lt;K,V&gt; <span class=\"title\">tabAt</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class=\"keyword\">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> &lt;K,V&gt; <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">casTabAt</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"keyword\">int</span> i,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                        Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> U.compareAndSwapObject(tab, ((<span class=\"keyword\">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>5. addCount函数</strong><br>尝试使用CAS操作，将BASECOUNT加1，操作失败，则说明有其他线程在进行加一操作,发生冲突。之后判断是否需要扩容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">addCount</span><span class=\"params\">(<span class=\"keyword\">long</span> x, <span class=\"keyword\">int</span> check)</span> </span>&#123;</span><br><span class=\"line\">    CounterCell[] as; <span class=\"keyword\">long</span> b, s;</span><br><span class=\"line\">    <span class=\"comment\">//使用CAS操作，将BASECOUNT加1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((as = counterCells) != <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">        !U.compareAndSwapLong(<span class=\"keyword\">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class=\"line\">        CounterCell a; <span class=\"keyword\">long</span> v; <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">        <span class=\"comment\">//发生冲突</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> uncontended = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (as == <span class=\"keyword\">null</span> || (m = as.length - <span class=\"number\">1</span>) &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">            !(uncontended =</span><br><span class=\"line\">              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//多线程冲突执行</span></span><br><span class=\"line\">            fullAddCount(x, uncontended);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        s = sumCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (check &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt;[] tab, nt; <span class=\"keyword\">int</span> n, sc;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否需要扩容  大于0.75当前数组大小</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (s &gt;= (<span class=\"keyword\">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> rs = resizeStamp(n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sc &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断是否需要帮助扩容</span></span><br><span class=\"line\">                <span class=\"comment\">//扩容完成，或者扩容线程达到阈值不需要进行扩容，直接break</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class=\"number\">1</span> ||</span><br><span class=\"line\">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">                    transferIndex &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">//帮助扩容，扩容线程数+1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, sc + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    transfer(tab, nt);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//进行扩容操作</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc,</span><br><span class=\"line\">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class=\"number\">2</span>))</span><br><span class=\"line\">                transfer(tab, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            s = sumCount();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-initTable函数\"><a href=\"#2-3-initTable函数\" class=\"headerlink\" title=\"2.3 initTable函数\"></a>2.3 initTable函数</h3><p>进入一个自旋过程，一旦有线程扩容成功，才break</p>\n<ul>\n<li>如果sizeCtl &lt; 0,说明已经有线程正在扩容，所以直接让出线程。</li>\n<li>如果sizeCtl&gt;=0,说明当前没有线程扩容，尝试CAS操作，设置sizeCtl为-1</li>\n<li>设置sizeCtl为-1成功的线程，进行扩容操作，并且将sc更新为数组负载阈值0.75*n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; <span class=\"keyword\">int</span> sc;</span><br><span class=\"line\">    <span class=\"comment\">//自旋过程</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((tab = table) == <span class=\"keyword\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((sc = sizeCtl) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            Thread.yield(); </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, -<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> n = (sc &gt; <span class=\"number\">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class=\"line\">                    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node&lt;?,?&gt;[n];</span><br><span class=\"line\">                    table = tab = nt;</span><br><span class=\"line\">                    <span class=\"comment\">//0.75*n</span></span><br><span class=\"line\">                    sc = n - (n &gt;&gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                sizeCtl = sc;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-4-统计ConCurrentHashMap中的元素个数\"><a href=\"#2-4-统计ConCurrentHashMap中的元素个数\" class=\"headerlink\" title=\"2.4 统计ConCurrentHashMap中的元素个数\"></a>2.4 统计ConCurrentHashMap中的元素个数</h3><p><strong>1. mappingCount函数</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用sumCount,获得元素数量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">mappingCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">long</span> n = sumCount();</span><br><span class=\"line\"><span class=\"keyword\">return</span> (n &lt; <span class=\"number\">0L</span>) ? <span class=\"number\">0L</span> : n; <span class=\"comment\">// ignore transient negative values</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. sumCount函数</strong></p>\n<p>baseCount+ counterCells各个元素值，就是元素数量<br>其实baseCount就是记录容器数量的，直接放回baseCount不就可以了吗？为什么sumCount()方法中还要遍历counterCells数组，累加对象的值呢？<br>其中：counterCells是个全局的变量，表示的是CounterCell类数组。CounterCell是ConcurrentHashmap的内部类，它就是存储一个值。<br>JDK1.8中使用一个volatile类型的变量baseCount记录元素的个数，当插入新数据put()或则删除数据remove()时，会通过addCount()方法更新baseCount<br>初始化时counterCells为空，在并发量很高时，如果存在两个线程同时执行CAS修改baseCount值，则失败的线程会继续执行方法体中的逻辑，执行fullAddCount(x, uncontended)方法，这个方法其实就是初始化counterCells，并将x的值插入到counterCell类中，而x值一般也就是1或-1，这可以从put()方法中得知。<br>这些对象是因为在CAS更新baseCount值时，由于高并发而导致失败，最终将值保存到CounterCell中，放到counterCells里。这也就是为什么sumCount()中需要遍历counterCells数组，sum累加CounterCell.value值了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">long</span> <span class=\"title\">sumCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    CounterCell[] as = counterCells; CounterCell a;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> sum = baseCount;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (as != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((a = as[i]) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                sum += a.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. CounterCell类</strong><br>只存储一个值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CounterCell</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> value;</span><br><span class=\"line\">   CountCell(<span class=\"keyword\">long</span> x) &#123;value = x;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>原文链接：<a href=\"https://blog.csdn.net/zycxnanwang/article/details/105424734\">https://blog.csdn.net/zycxnanwang/article/details/105424734</a></p>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>##1. jdk1.7 ConcurrentHashMap<br>jdk1.7 ConcurrentHashMap是由一个Segment数组和多个HashEntry数组组成<br><img src=\"/ConcurrentHashMap/01.png\" alt=\"image-20201210103251475\"><br>其实就是将HashMap分为多个小HashMap,每个Segment元素维护一个小HashMap,目的是锁分离，本来实现同步，直接可以是对整个HashMap加锁，但是加锁粒度太大，影响并发性能，所以变换成此结构，仅仅对Segment元素加锁，降低锁粒度，提高并发性能</p>\n<p>###1.1 初始化过程<br>由于变换成<strong>Segment数组+HashEntry数组</strong>，所以初始化时，需要依次对Segment数组和HashEntry数组初始化</p>\n<ol>\n<li><p>Segment数组初始化</p>\n<p>初始化时，使用右移一位，乘以2的计算方式，保证ssize是2的幂次方，小于指定参数concurrencyLevel的最大2的幂次方</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sshift = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//记录Segment数组大小</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ssize = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (ssize &lt; concurrencyLevel) &#123;</span><br><span class=\"line\">    ++sshift;</span><br><span class=\"line\">    ssize &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>HashEntry数组初始化</p>\n<p>跟Segment数组初始化方式相同</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> cap = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(cap &lt; c)&#123;</span><br><span class=\"line\">    cap &lt;&lt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"1-2-put操作\"><a href=\"#1-2-put操作\" class=\"headerlink\" title=\"1.2 put操作\"></a>1.2 put操作</h3><p>对于插入操作，需要两次Hash映射去定位数据存储位置</p>\n<ol>\n<li>首先通过第一次hash过程，定位Segment位置 </li>\n<li>然后通过第二次hash过程定位HashEntry位置</li>\n</ol>\n<p>Segment继承ReentrantLock,在数据插入指定HashEntry过程的时候会尝试调用ReentrantLock的tryLock方法获取锁，如果获取成功就直接插入相应位置，如果有线程获取该Segment的锁，当前线程就会以自旋方式去继续调用tryLock方法去获取锁，超过指定次数就挂起，等待唤醒。</p>\n<h3 id=\"1-3-get操作\"><a href=\"#1-3-get操作\" class=\"headerlink\" title=\"1.3 get操作\"></a>1.3 get操作</h3><p>也是两次Hash映射，相对于put操作，少了加锁过程</p>\n<h3 id=\"1-4-size操作\"><a href=\"#1-4-size操作\" class=\"headerlink\" title=\"1.4 size操作\"></a>1.4 size操作</h3><p>size操作就是计算ConcurrentHashMap的大小，有两种方案</p>\n<ul>\n<li>给每个Segment都加上锁(相当于给整个Map加上锁)，然后计算size返回</li>\n<li>不加锁的模式，尝试多次计算ConcurrentHashMap的size,最多三次，比较前后计算的结果，结果一致就认为当前没有元素加入，计算结果是准确的。(查看计算出size的前后modCount的数值有没有发生变化，modCount的值用于记录元素变化的操作。如put，remove，clear)</li>\n</ul>\n<h2 id=\"2-jdk1-8-ConcurrentHashMap\"><a href=\"#2-jdk1-8-ConcurrentHashMap\" class=\"headerlink\" title=\"2. jdk1.8 ConcurrentHashMap\"></a>2. jdk1.8 ConcurrentHashMap</h2><p>jdk1.8ConcurrentHashMap是数组+链表，或者数组+红黑树结构,并发控制使用Synchronized关键字和CAS操作<br><img src=\"/ConcurrentHashMap/02.png\" alt=\"jdk1.8 ConcurrentHashMap\"></p>\n<h3 id=\"2-1关键概念点\"><a href=\"#2-1关键概念点\" class=\"headerlink\" title=\"2.1关键概念点\"></a>2.1关键概念点</h3><ul>\n<li>sizeCtl变量(volatile修饰)<br> 通过CAS操作+volatile, 控制数组初始化和扩容操作<ul>\n<li>-1 代表正在初始化</li>\n<li>-N 前16位记录数组容量，后16位记录扩容线程大小+1，是个负数</li>\n<li>正数0，表示未初始化</li>\n<li>正数，0.75*当前数组大小</li>\n</ul>\n</li>\n<li>&lt;key,value&gt;键值对，封装为Node对象</li>\n<li>table变量(volatile)：也就是所说的数组，默认为null，默认大小为16的数组，每次扩容时大小总是2的幂次方</li>\n<li>nextTable(volatile):扩容时新生成的数组，大小为table的两倍</li>\n</ul>\n<h3 id=\"2-2put函数\"><a href=\"#2-2put函数\" class=\"headerlink\" title=\"2.2put函数\"></a>2.2put函数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(key, value, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>1.putValue函数</strong><br>首先调用spread函数，计算hash值，之后进入一个自旋循环过程，直到插入或替换成功，才会返回。如果table未被初始化，则调用initTable进行初始化。之后判断hash映射的位置是否为null,如果为null,直接通过CAS自旋操作，插入元素成功，则直接返回，如果映射的位置值为MOVED(-1),则直接去协助扩容，排除以上条件后，尝试对链头Node节点f加锁，加锁成功后，链表通过尾插遍历，进行插入或替换。红黑树通过查询遍历，进行插入或替换。之后如果当前链表节点数量大于阈值，则调用treeifyBin函数，转换为红黑树最后通过调用addCount,执行CAS操作，更新数组大小，并且判断是否需要进行扩容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span> || value == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    <span class=\"comment\">//spread函数计算hash值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash = spread(key.hashCode());</span><br><span class=\"line\">    <span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//自旋过程</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"keyword\">int</span> n, i, fh;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tab == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            tab = initTable();</span><br><span class=\"line\">        <span class=\"comment\">//判断映射位置节点是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i = (n - <span class=\"number\">1</span>) &amp; hash)) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (casTabAt(tab, i, <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                         <span class=\"keyword\">new</span> Node&lt;K,V&gt;(hash, key, value, <span class=\"keyword\">null</span>)))</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;                  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果映射位置节点value==MOVED，说明正在进行扩容操作</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((fh = f.hash) == MOVED)</span><br><span class=\"line\">            tab = helpTransfer(tab, f);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            V oldVal = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        binCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class=\"line\">                            K ek;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                                ((ek = e.key) == key ||</span><br><span class=\"line\">                                 (ek != <span class=\"keyword\">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class=\"line\">                                oldVal = e.val;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                    e.val = value;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            Node&lt;K,V&gt; pred = e;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((e = e.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                pred.next = <span class=\"keyword\">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class=\"line\">                                                          value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//红黑树结构</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">                        Node&lt;K,V&gt; p;</span><br><span class=\"line\">                        binCount = <span class=\"number\">2</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class=\"line\">                                                       value)) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            oldVal = p.val;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                p.val = value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//链表节点数量超过阈值，转为红黑树</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (binCount != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class=\"line\">                    treeifyBin(tab, i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (oldVal != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    addCount(<span class=\"number\">1L</span>, binCount);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. spread函数</strong><br>spread函数，计算hash值。key的hash值与其高16位相异或，然后与HASH_BITS将最高位置0</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">spread</span><span class=\"params\">(<span class=\"keyword\">int</span> h)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (h ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>)) &amp; HASH_BITS;</span><br><span class=\"line\">    <span class=\"comment\">//HASH_BITS=0x7fffffff</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. tableAt函数</strong><br>获取最新的tab[i]</p>\n<p><strong>4. casTabAt函数</strong><br>通过CAS操作，将值赋值进tab中对应位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> &lt;K,V&gt; <span class=\"function\">Node&lt;K,V&gt; <span class=\"title\">tabAt</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class=\"keyword\">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> &lt;K,V&gt; <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">casTabAt</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"keyword\">int</span> i,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                        Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> U.compareAndSwapObject(tab, ((<span class=\"keyword\">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>5. addCount函数</strong><br>尝试使用CAS操作，将BASECOUNT加1，操作失败，则说明有其他线程在进行加一操作,发生冲突。之后判断是否需要扩容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">addCount</span><span class=\"params\">(<span class=\"keyword\">long</span> x, <span class=\"keyword\">int</span> check)</span> </span>&#123;</span><br><span class=\"line\">    CounterCell[] as; <span class=\"keyword\">long</span> b, s;</span><br><span class=\"line\">    <span class=\"comment\">//使用CAS操作，将BASECOUNT加1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((as = counterCells) != <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">        !U.compareAndSwapLong(<span class=\"keyword\">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class=\"line\">        CounterCell a; <span class=\"keyword\">long</span> v; <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">        <span class=\"comment\">//发生冲突</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> uncontended = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (as == <span class=\"keyword\">null</span> || (m = as.length - <span class=\"number\">1</span>) &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">            !(uncontended =</span><br><span class=\"line\">              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//多线程冲突执行</span></span><br><span class=\"line\">            fullAddCount(x, uncontended);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        s = sumCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (check &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt;[] tab, nt; <span class=\"keyword\">int</span> n, sc;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否需要扩容  大于0.75当前数组大小</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (s &gt;= (<span class=\"keyword\">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> rs = resizeStamp(n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sc &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断是否需要帮助扩容</span></span><br><span class=\"line\">                <span class=\"comment\">//扩容完成，或者扩容线程达到阈值不需要进行扩容，直接break</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class=\"number\">1</span> ||</span><br><span class=\"line\">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">                    transferIndex &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">//帮助扩容，扩容线程数+1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, sc + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    transfer(tab, nt);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//进行扩容操作</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc,</span><br><span class=\"line\">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class=\"number\">2</span>))</span><br><span class=\"line\">                transfer(tab, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            s = sumCount();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-initTable函数\"><a href=\"#2-3-initTable函数\" class=\"headerlink\" title=\"2.3 initTable函数\"></a>2.3 initTable函数</h3><p>进入一个自旋过程，一旦有线程扩容成功，才break</p>\n<ul>\n<li>如果sizeCtl &lt; 0,说明已经有线程正在扩容，所以直接让出线程。</li>\n<li>如果sizeCtl&gt;=0,说明当前没有线程扩容，尝试CAS操作，设置sizeCtl为-1</li>\n<li>设置sizeCtl为-1成功的线程，进行扩容操作，并且将sc更新为数组负载阈值0.75*n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; <span class=\"keyword\">int</span> sc;</span><br><span class=\"line\">    <span class=\"comment\">//自旋过程</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((tab = table) == <span class=\"keyword\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((sc = sizeCtl) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            Thread.yield(); </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, -<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> n = (sc &gt; <span class=\"number\">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class=\"line\">                    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node&lt;?,?&gt;[n];</span><br><span class=\"line\">                    table = tab = nt;</span><br><span class=\"line\">                    <span class=\"comment\">//0.75*n</span></span><br><span class=\"line\">                    sc = n - (n &gt;&gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                sizeCtl = sc;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-4-统计ConCurrentHashMap中的元素个数\"><a href=\"#2-4-统计ConCurrentHashMap中的元素个数\" class=\"headerlink\" title=\"2.4 统计ConCurrentHashMap中的元素个数\"></a>2.4 统计ConCurrentHashMap中的元素个数</h3><p><strong>1. mappingCount函数</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用sumCount,获得元素数量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">mappingCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">long</span> n = sumCount();</span><br><span class=\"line\"><span class=\"keyword\">return</span> (n &lt; <span class=\"number\">0L</span>) ? <span class=\"number\">0L</span> : n; <span class=\"comment\">// ignore transient negative values</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. sumCount函数</strong></p>\n<p>baseCount+ counterCells各个元素值，就是元素数量<br>其实baseCount就是记录容器数量的，直接放回baseCount不就可以了吗？为什么sumCount()方法中还要遍历counterCells数组，累加对象的值呢？<br>其中：counterCells是个全局的变量，表示的是CounterCell类数组。CounterCell是ConcurrentHashmap的内部类，它就是存储一个值。<br>JDK1.8中使用一个volatile类型的变量baseCount记录元素的个数，当插入新数据put()或则删除数据remove()时，会通过addCount()方法更新baseCount<br>初始化时counterCells为空，在并发量很高时，如果存在两个线程同时执行CAS修改baseCount值，则失败的线程会继续执行方法体中的逻辑，执行fullAddCount(x, uncontended)方法，这个方法其实就是初始化counterCells，并将x的值插入到counterCell类中，而x值一般也就是1或-1，这可以从put()方法中得知。<br>这些对象是因为在CAS更新baseCount值时，由于高并发而导致失败，最终将值保存到CounterCell中，放到counterCells里。这也就是为什么sumCount()中需要遍历counterCells数组，sum累加CounterCell.value值了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">long</span> <span class=\"title\">sumCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    CounterCell[] as = counterCells; CounterCell a;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> sum = baseCount;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (as != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((a = as[i]) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                sum += a.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. CounterCell类</strong><br>只存储一个值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CounterCell</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> value;</span><br><span class=\"line\">   CountCell(<span class=\"keyword\">long</span> x) &#123;value = x;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>原文链接：<a href=\"https://blog.csdn.net/zycxnanwang/article/details/105424734\">https://blog.csdn.net/zycxnanwang/article/details/105424734</a></p>\n"},{"title":"ElasticSearch安装","comments":1,"abbrlink":1479,"date":"2021-07-23T05:41:24.000Z","translate_title":"elastic-search-install","_content":"## 1. JDK14安装\n\n1. 下载jdk14：  https://jdk.java.net/14/\n\n2. 将文件存放在linux系统某文件夹内\n\n3. 解压\n\n    ```shell\n     tar -zxvf openjdk-14.0.2_linux-x64_bin.tar.gz\n    ```\n\n4. 配置环境变量\n\n    ```shell\n    vim /etc/profile\n    ##在文件最末尾添加，其中JAVA_HOME是jdk解压后的文件路径\n    JAVA_HOME=/usr/lib/tools/jdk-14.0.2\n    PATH=$JAVA_HOME/bin:$PATH\n    CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar\n    export PATH JAVA_HOME CLASSPATH\n    ```\n\n5. 保存后，更新配置文件\n\n    ```shell\n    source /etc/profile\n    ```\n\n6. 查看JDK是否配置完成\n\n    ```shell\n    java -version\n    ```\n\n   出现下图表示安装成功！\n\n   ![image-20200806170145844](./ElasticSearch/image-20200806170145844.png)\n\n\n\n## 2. ElasticSearch安装\n\n1. 解压tar.gz包\n\n    ```shell\n    tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz\n    ```\n\n2. 添加elasticsearch用户\n\n    ```shell\n    useradd elastic\n    ```\n\n3. 赋予elastic search操作文件夹的权限\n\n    ```shell\n    chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*\n    ```\n\n4. 查看本机的hostname\n\n    ```shell\n    hostname\n    #localhost.localdomain\n    ```\n\n5. 修改elastic search配置\n\n    ```shell\n    cd ./elasticsearch-7.8.0/config\n   vim elasticsearch.yml\n    ```\n\n   **elasticsearch.yml**\n\n    ```yml\n      # ======================== Elasticsearch Configuration =========================\n      #\n      # NOTE: Elasticsearch comes with reasonable defaults for most settings.\n      #       Before you set out to tweak and tune the configuration, make sure you\n      #       understand what are you trying to accomplish and the consequences.\n      #\n      # The primary way of configuring a node is via this file. This template lists\n      # the most important settings you may want to configure for a production cluster.\n      #\n      # Please consult the documentation for further information on configuration options:\n      # https://www.elastic.co/guide/en/elasticsearch/reference/index.html\n      #\n      # ---------------------------------- Cluster -----------------------------------\n      #\n      # Use a descriptive name for your cluster:\n      #集群名称，默认可以不修改，此处 xiaoyuge\n      cluster.name: xiaoyuge\n      # ------------------------------------ Node ------------------------------------\n      #\n      # Use a descriptive name for the node:\n      #节点名称，必须修改 ，默认修改为当前机器名称，若是多实例则需要区分\n      node.name: xiaoyuge-local1\n      #\n      # Add custom attributes to the node:\n      #\n      #node.attr.rack: r1\n      #\n      # ----------------------------------- Paths ------------------------------------\n      #\n      # Path to directory where to store the data (separate multiple locations by comma):\n      ##数据目录与日志目录，默认在当前运行程序下，生产环境需要指定\n      #path.data: /path/to/data\n      #\n      # Path to log files:\n      #\n      #path.logs: /path/to/logs\n      #\n      # ----------------------------------- Memory -----------------------------------\n      #\n      # Lock the memory on startup:\n      #内存交换锁定，此处需要操作系统设置才生效\n      #bootstrap.memory_lock: true\n      #\n      # Make sure that the heap size is set to about half the memory available\n      # on the system and that the owner of the process is allowed to use this\n      # limit.\n      #\n      # Elasticsearch performs poorly when the system is swapping the memory.\n      #\n      # ---------------------------------- Network -----------------------------------\n      #\n      # Set the bind address to a specific IP (IPv4 or IPv6):\n      #IP 地址，默认是 local，仅限本机访问，外网不可访问，设置 0.0.0.0 通用做法\n      network.host: 192.168.135.111\n      #\n      # Set a custom port for HTTP:\n      #访问端口，默认 9200，9300，建议明确指定\n      http.port: 9200\n      transport.port: 9300\n      #\n      # For more information, consult the network module documentation.\n      #\n      # --------------------------------- Discovery ----------------------------------\n      #\n      # Pass an initial list of hosts to perform discovery when this node is started:\n      # The default list of hosts is [\"127.0.0.1\", \"[::1]\"]\n      ## 集群发现配置\n      discovery.seed_hosts: [\"192.168.135.111:9300\"]\n      #\n      # Bootstrap the cluster using an initial set of master-eligible nodes:\n      #\n      cluster.initial_master_nodes: [\"192.168.135.111:9300\"]\n      #\n      # For more information, consult the discovery and cluster formation module documentation.\n      #\n      # ---------------------------------- Gateway -----------------------------------\n      #\n      # Block initial recovery after a full cluster restart until N nodes are started:\n      #\n      #gateway.recover_after_nodes: 3\n      #\n      # For more information, consult the gateway module documentation.\n      #\n      # ---------------------------------- Various -----------------------------------\n      #\n      # Require explicit names when deleting indices:\n      ##防止批量删除索引\n      action.destructive_requires_name: true\n      #设置密码\n      xpack.security.enabled: true\n      xpack.license.self_generated.type: trial\n      xpack.security.transport.ssl.enabled: true\n      http.cors.enabled: true\n      http.cors.allow-origin: \"*\"\n      http.cors.allow-headers: Authorization\n    ```\n\n6. 切换为elastic search用户，然后启动elastic search\n\n    ```shell\n    su elastic\t\t\t#切换用户\n    ./bin/elasticsearch -d      #后台启动\n    ```\n\n7. 设置密码\n\n    ```shell\n      ./bin/elasticsearch-setup-passwords interactive\n\n      #执行设置用户名和密码的命令,这里需要为4个用户分别设置密码，elastic, kibana, logstash_system,beats_system\n      Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.\n      You will be prompted to enter passwords as the process progresses.\n      Please confirm that you would like to continue [y/N]y\n      Enter password for [elastic]:\n      passwords must be at least [6] characters long\n      Try again.\n      Enter password for [elastic]:\n      Reenter password for [elastic]:\n      Passwords do not match.\n      Try again.\n      Enter password for [elastic]:\n      Reenter password for [elastic]:\n      Enter password for [kibana]:\n      Reenter password for [kibana]:\n      Enter password for [logstash_system]:\n      Reenter password for [logstash_system]:\n      Enter password for [beats_system]:\n      Reenter password for [beats_system]:\n      Changed password for user [kibana]\n      Changed password for user [logstash_system]\n      Changed password for user [beats_system]\n      Changed password for user [elastic]\n    ```\n\n\n**常见异常：**\n\n```shell\n    #java.lang.RuntimeException: can not run elasticsearch as root\n    #切换为elastic search用户，不能用root项目启动\n  \n   su elastic\n```\n\n```shell\n   #Exception in thread \"main\" java.nio.file.AccessDeniedException: /usr/lib/tools/elasticsearch-7.8.0/config/elasticsearch.keystore\n   #elastic search用户没有操作该文件夹的权限\n  \n   su root\n   chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*\n   ```\n\n```shell\n    ERROR: [2] bootstrap checks failed\n    [1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]\n    [2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\n   \n    #分配内存不够\n    #1. 修改 /etc/security/limits.conf\n    sudo vi /etc/security/limits.conf\n    #在文件末尾加上\n    * soft nofile 65536\n    * hard nofile 65536\n    * soft nproc 4096\n    * hard nproc 4096\n    #2. 修改 /etc/sysctl.conf\n    sudo vi /etc/sysctl.conf\n    #在文件末尾增加\n    vm.max_map_count=262144\n    #3. 配置重新生效\n    sysctl -p\n```\n  \n**效果如下：**\n\n![image-20200807093208470](./ElasticSearch/image-20200807093208470.png)\n\n## 3. Kibana安装\n\n1. 解压文件\n\n    ```shell\n    tar -zxvf kibana-7.8.0-linux-x86_64.tar.gz\n    ```\n\n2. 修改配置文件\n\n    ```shell\n    vim ./config/kibana.yml\n    ```\n\n   **kibana.yml:**\n\n    ```yml\n      # Kibana is served by a back end server. This setting specifies the port to use.\n      ##访问端口，默认无需修改\n      server.port: 5601\n      \n      # Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.\n      # The default is 'localhost', which usually means remote machines will not be able to connect.\n      # To allow connections from remote users, set this parameter to a non-loopback address.\n      #访问地址 IP，默认本地 ;如果需要外网访问，则配置0.0.0.0\n      server.host: \"0.0.0.0\"\n      \n      # Enables you to specify a path to mount Kibana at if you are running behind a proxy.\n      # Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath\n      # from requests it receives, and to prevent a deprecation warning at startup.\n      # This setting cannot end in a slash.\n      #server.basePath: \"\"\n      \n      # Specifies whether Kibana should rewrite requests that are prefixed with\n      # `server.basePath` or require that they are rewritten by your reverse proxy.\n      # This setting was effectively always `false` before Kibana 6.3 and will\n      # default to `true` starting in Kibana 7.0.\n      #server.rewriteBasePath: false\n      \n      # The maximum payload size in bytes for incoming server requests.\n      #server.maxPayloadBytes: 1048576\n      \n      # The Kibana server's name.  This is used for display purposes.\n      #server.name: \"your-hostname\"\n      \n      # The URLs of the Elasticsearch instances to use for all your queries.\n      # ES 服务指向，集群下配置多个\n      elasticsearch.hosts: [\"http://192.168.135.111:9200\"]\n      \n      # When this setting's value is true Kibana uses the hostname specified in the server.host\n      # setting. When the value of this setting is false, Kibana uses the hostname of the host\n      # that connects to this Kibana instance.\n      #elasticsearch.preserveHost: true\n      \n      # Kibana uses an index in Elasticsearch to store saved searches, visualizations and\n      # dashboards. Kibana creates a new index if the index doesn't already exist.\n      # Kibana 元数据存储索引名字，默认.kibana 无需修改\n      #kibana.index: \".kibana\"\n      \n      # The default application to load.\n      #kibana.defaultAppId: \"home\"\n      \n      # If your Elasticsearch is protected with basic authentication, these settings provide\n      # the username and password that the Kibana server uses to perform maintenance on the Kibana\n    ```\n\n3. 启动\n\n    ```shell\n    # 当前窗口内启动\n    ./bin/kibana# \n   #后台进程启动\n   nohup ./bin/kibana &\n    ```\n\n   **效果如下**\n\n   ![image-20200807093309761](./ElasticSearch/image-20200807093309761.png)\n\n**遇见问题：**\n\n- root启动报错![image-20201211095101816](./ElasticSearch/image-20201211095101816.png)\n\n    ```shell\n    #切换到elastic账户\n    su xiaoyuge\n    ```\n- elastic用户权限不足 **Babel could not write cache to file: /usr/share/kibana/optimize/.babel_register_cache.json**![image-20201211095258901](./ElasticSearch/image-20201211095258901.png)\n\n    ```shell\n    #切换到root用户\n    su root \n    #赋予elastic账户 xiaoyuge操作权限\n    chown -R xiaoyuge /usr/local/kibana-7.7.1-linux-x86_64\n    #切换为elastic账户\n    su xiaoyuge\n    #再次启动即可\n    ```\n\n    ","source":"_posts/2021/07/ElasticSearch.md","raw":"---\ntitle: ElasticSearch安装\ntags: ELK\ncomments: true\ncategories: linux\nabbrlink: 1479\ndate: 2021-07-23 13:41:24\ntranslate_title: elastic-search-install\n---\n## 1. JDK14安装\n\n1. 下载jdk14：  https://jdk.java.net/14/\n\n2. 将文件存放在linux系统某文件夹内\n\n3. 解压\n\n    ```shell\n     tar -zxvf openjdk-14.0.2_linux-x64_bin.tar.gz\n    ```\n\n4. 配置环境变量\n\n    ```shell\n    vim /etc/profile\n    ##在文件最末尾添加，其中JAVA_HOME是jdk解压后的文件路径\n    JAVA_HOME=/usr/lib/tools/jdk-14.0.2\n    PATH=$JAVA_HOME/bin:$PATH\n    CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar\n    export PATH JAVA_HOME CLASSPATH\n    ```\n\n5. 保存后，更新配置文件\n\n    ```shell\n    source /etc/profile\n    ```\n\n6. 查看JDK是否配置完成\n\n    ```shell\n    java -version\n    ```\n\n   出现下图表示安装成功！\n\n   ![image-20200806170145844](./ElasticSearch/image-20200806170145844.png)\n\n\n\n## 2. ElasticSearch安装\n\n1. 解压tar.gz包\n\n    ```shell\n    tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz\n    ```\n\n2. 添加elasticsearch用户\n\n    ```shell\n    useradd elastic\n    ```\n\n3. 赋予elastic search操作文件夹的权限\n\n    ```shell\n    chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*\n    ```\n\n4. 查看本机的hostname\n\n    ```shell\n    hostname\n    #localhost.localdomain\n    ```\n\n5. 修改elastic search配置\n\n    ```shell\n    cd ./elasticsearch-7.8.0/config\n   vim elasticsearch.yml\n    ```\n\n   **elasticsearch.yml**\n\n    ```yml\n      # ======================== Elasticsearch Configuration =========================\n      #\n      # NOTE: Elasticsearch comes with reasonable defaults for most settings.\n      #       Before you set out to tweak and tune the configuration, make sure you\n      #       understand what are you trying to accomplish and the consequences.\n      #\n      # The primary way of configuring a node is via this file. This template lists\n      # the most important settings you may want to configure for a production cluster.\n      #\n      # Please consult the documentation for further information on configuration options:\n      # https://www.elastic.co/guide/en/elasticsearch/reference/index.html\n      #\n      # ---------------------------------- Cluster -----------------------------------\n      #\n      # Use a descriptive name for your cluster:\n      #集群名称，默认可以不修改，此处 xiaoyuge\n      cluster.name: xiaoyuge\n      # ------------------------------------ Node ------------------------------------\n      #\n      # Use a descriptive name for the node:\n      #节点名称，必须修改 ，默认修改为当前机器名称，若是多实例则需要区分\n      node.name: xiaoyuge-local1\n      #\n      # Add custom attributes to the node:\n      #\n      #node.attr.rack: r1\n      #\n      # ----------------------------------- Paths ------------------------------------\n      #\n      # Path to directory where to store the data (separate multiple locations by comma):\n      ##数据目录与日志目录，默认在当前运行程序下，生产环境需要指定\n      #path.data: /path/to/data\n      #\n      # Path to log files:\n      #\n      #path.logs: /path/to/logs\n      #\n      # ----------------------------------- Memory -----------------------------------\n      #\n      # Lock the memory on startup:\n      #内存交换锁定，此处需要操作系统设置才生效\n      #bootstrap.memory_lock: true\n      #\n      # Make sure that the heap size is set to about half the memory available\n      # on the system and that the owner of the process is allowed to use this\n      # limit.\n      #\n      # Elasticsearch performs poorly when the system is swapping the memory.\n      #\n      # ---------------------------------- Network -----------------------------------\n      #\n      # Set the bind address to a specific IP (IPv4 or IPv6):\n      #IP 地址，默认是 local，仅限本机访问，外网不可访问，设置 0.0.0.0 通用做法\n      network.host: 192.168.135.111\n      #\n      # Set a custom port for HTTP:\n      #访问端口，默认 9200，9300，建议明确指定\n      http.port: 9200\n      transport.port: 9300\n      #\n      # For more information, consult the network module documentation.\n      #\n      # --------------------------------- Discovery ----------------------------------\n      #\n      # Pass an initial list of hosts to perform discovery when this node is started:\n      # The default list of hosts is [\"127.0.0.1\", \"[::1]\"]\n      ## 集群发现配置\n      discovery.seed_hosts: [\"192.168.135.111:9300\"]\n      #\n      # Bootstrap the cluster using an initial set of master-eligible nodes:\n      #\n      cluster.initial_master_nodes: [\"192.168.135.111:9300\"]\n      #\n      # For more information, consult the discovery and cluster formation module documentation.\n      #\n      # ---------------------------------- Gateway -----------------------------------\n      #\n      # Block initial recovery after a full cluster restart until N nodes are started:\n      #\n      #gateway.recover_after_nodes: 3\n      #\n      # For more information, consult the gateway module documentation.\n      #\n      # ---------------------------------- Various -----------------------------------\n      #\n      # Require explicit names when deleting indices:\n      ##防止批量删除索引\n      action.destructive_requires_name: true\n      #设置密码\n      xpack.security.enabled: true\n      xpack.license.self_generated.type: trial\n      xpack.security.transport.ssl.enabled: true\n      http.cors.enabled: true\n      http.cors.allow-origin: \"*\"\n      http.cors.allow-headers: Authorization\n    ```\n\n6. 切换为elastic search用户，然后启动elastic search\n\n    ```shell\n    su elastic\t\t\t#切换用户\n    ./bin/elasticsearch -d      #后台启动\n    ```\n\n7. 设置密码\n\n    ```shell\n      ./bin/elasticsearch-setup-passwords interactive\n\n      #执行设置用户名和密码的命令,这里需要为4个用户分别设置密码，elastic, kibana, logstash_system,beats_system\n      Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.\n      You will be prompted to enter passwords as the process progresses.\n      Please confirm that you would like to continue [y/N]y\n      Enter password for [elastic]:\n      passwords must be at least [6] characters long\n      Try again.\n      Enter password for [elastic]:\n      Reenter password for [elastic]:\n      Passwords do not match.\n      Try again.\n      Enter password for [elastic]:\n      Reenter password for [elastic]:\n      Enter password for [kibana]:\n      Reenter password for [kibana]:\n      Enter password for [logstash_system]:\n      Reenter password for [logstash_system]:\n      Enter password for [beats_system]:\n      Reenter password for [beats_system]:\n      Changed password for user [kibana]\n      Changed password for user [logstash_system]\n      Changed password for user [beats_system]\n      Changed password for user [elastic]\n    ```\n\n\n**常见异常：**\n\n```shell\n    #java.lang.RuntimeException: can not run elasticsearch as root\n    #切换为elastic search用户，不能用root项目启动\n  \n   su elastic\n```\n\n```shell\n   #Exception in thread \"main\" java.nio.file.AccessDeniedException: /usr/lib/tools/elasticsearch-7.8.0/config/elasticsearch.keystore\n   #elastic search用户没有操作该文件夹的权限\n  \n   su root\n   chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*\n   ```\n\n```shell\n    ERROR: [2] bootstrap checks failed\n    [1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]\n    [2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\n   \n    #分配内存不够\n    #1. 修改 /etc/security/limits.conf\n    sudo vi /etc/security/limits.conf\n    #在文件末尾加上\n    * soft nofile 65536\n    * hard nofile 65536\n    * soft nproc 4096\n    * hard nproc 4096\n    #2. 修改 /etc/sysctl.conf\n    sudo vi /etc/sysctl.conf\n    #在文件末尾增加\n    vm.max_map_count=262144\n    #3. 配置重新生效\n    sysctl -p\n```\n  \n**效果如下：**\n\n![image-20200807093208470](./ElasticSearch/image-20200807093208470.png)\n\n## 3. Kibana安装\n\n1. 解压文件\n\n    ```shell\n    tar -zxvf kibana-7.8.0-linux-x86_64.tar.gz\n    ```\n\n2. 修改配置文件\n\n    ```shell\n    vim ./config/kibana.yml\n    ```\n\n   **kibana.yml:**\n\n    ```yml\n      # Kibana is served by a back end server. This setting specifies the port to use.\n      ##访问端口，默认无需修改\n      server.port: 5601\n      \n      # Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.\n      # The default is 'localhost', which usually means remote machines will not be able to connect.\n      # To allow connections from remote users, set this parameter to a non-loopback address.\n      #访问地址 IP，默认本地 ;如果需要外网访问，则配置0.0.0.0\n      server.host: \"0.0.0.0\"\n      \n      # Enables you to specify a path to mount Kibana at if you are running behind a proxy.\n      # Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath\n      # from requests it receives, and to prevent a deprecation warning at startup.\n      # This setting cannot end in a slash.\n      #server.basePath: \"\"\n      \n      # Specifies whether Kibana should rewrite requests that are prefixed with\n      # `server.basePath` or require that they are rewritten by your reverse proxy.\n      # This setting was effectively always `false` before Kibana 6.3 and will\n      # default to `true` starting in Kibana 7.0.\n      #server.rewriteBasePath: false\n      \n      # The maximum payload size in bytes for incoming server requests.\n      #server.maxPayloadBytes: 1048576\n      \n      # The Kibana server's name.  This is used for display purposes.\n      #server.name: \"your-hostname\"\n      \n      # The URLs of the Elasticsearch instances to use for all your queries.\n      # ES 服务指向，集群下配置多个\n      elasticsearch.hosts: [\"http://192.168.135.111:9200\"]\n      \n      # When this setting's value is true Kibana uses the hostname specified in the server.host\n      # setting. When the value of this setting is false, Kibana uses the hostname of the host\n      # that connects to this Kibana instance.\n      #elasticsearch.preserveHost: true\n      \n      # Kibana uses an index in Elasticsearch to store saved searches, visualizations and\n      # dashboards. Kibana creates a new index if the index doesn't already exist.\n      # Kibana 元数据存储索引名字，默认.kibana 无需修改\n      #kibana.index: \".kibana\"\n      \n      # The default application to load.\n      #kibana.defaultAppId: \"home\"\n      \n      # If your Elasticsearch is protected with basic authentication, these settings provide\n      # the username and password that the Kibana server uses to perform maintenance on the Kibana\n    ```\n\n3. 启动\n\n    ```shell\n    # 当前窗口内启动\n    ./bin/kibana# \n   #后台进程启动\n   nohup ./bin/kibana &\n    ```\n\n   **效果如下**\n\n   ![image-20200807093309761](./ElasticSearch/image-20200807093309761.png)\n\n**遇见问题：**\n\n- root启动报错![image-20201211095101816](./ElasticSearch/image-20201211095101816.png)\n\n    ```shell\n    #切换到elastic账户\n    su xiaoyuge\n    ```\n- elastic用户权限不足 **Babel could not write cache to file: /usr/share/kibana/optimize/.babel_register_cache.json**![image-20201211095258901](./ElasticSearch/image-20201211095258901.png)\n\n    ```shell\n    #切换到root用户\n    su root \n    #赋予elastic账户 xiaoyuge操作权限\n    chown -R xiaoyuge /usr/local/kibana-7.7.1-linux-x86_64\n    #切换为elastic账户\n    su xiaoyuge\n    #再次启动即可\n    ```\n\n    ","slug":"ElasticSearch","published":1,"updated":"2022-03-27T14:06:03.362Z","layout":"post","photos":[],"link":"","_id":"cl424hx5i001gad5i6y8419sb","content":"<h2 id=\"1-JDK14安装\"><a href=\"#1-JDK14安装\" class=\"headerlink\" title=\"1. JDK14安装\"></a>1. JDK14安装</h2><ol>\n<li><p>下载jdk14：  <a href=\"https://jdk.java.net/14/\">https://jdk.java.net/14/</a></p>\n</li>\n<li><p>将文件存放在linux系统某文件夹内</p>\n</li>\n<li><p>解压</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf openjdk-14.0.2_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li><p>配置环境变量</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#在文件最末尾添加，其中JAVA_HOME是jdk解压后的文件路径</span></span></span><br><span class=\"line\">JAVA_HOME=/usr/lib/tools/jdk-14.0.2</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure></li>\n<li><p>保存后，更新配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></li>\n<li><p>查看JDK是否配置完成</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<p>出现下图表示安装成功！</p>\n<p><img src=\"/ElasticSearch/image-20200806170145844.png\" alt=\"image-20200806170145844\"></p>\n</li>\n</ol>\n<h2 id=\"2-ElasticSearch安装\"><a href=\"#2-ElasticSearch安装\" class=\"headerlink\" title=\"2. ElasticSearch安装\"></a>2. ElasticSearch安装</h2><ol>\n<li><p>解压tar.gz包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li><p>添加elasticsearch用户</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd elastic</span><br></pre></td></tr></table></figure></li>\n<li><p>赋予elastic search操作文件夹的权限</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure></li>\n<li><p>查看本机的hostname</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostname</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">localhost.localdomain</span></span><br></pre></td></tr></table></figure></li>\n<li><p>修改elastic search配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> cd ./elasticsearch-7.8.0/config</span><br><span class=\"line\">vim elasticsearch.yml</span><br></pre></td></tr></table></figure>\n\n<p><strong>elasticsearch.yml</strong></p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ======================== Elasticsearch Configuration =========================</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Elasticsearch comes with reasonable defaults for most settings.</span></span><br><span class=\"line\"><span class=\"comment\">#       Before you set out to tweak and tune the configuration, make sure you</span></span><br><span class=\"line\"><span class=\"comment\">#       understand what are you trying to accomplish and the consequences.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The primary way of configuring a node is via this file. This template lists</span></span><br><span class=\"line\"><span class=\"comment\"># the most important settings you may want to configure for a production cluster.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Please consult the documentation for further information on configuration options:</span></span><br><span class=\"line\"><span class=\"comment\"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Cluster -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Use a descriptive name for your cluster:</span></span><br><span class=\"line\"><span class=\"comment\">#集群名称，默认可以不修改，此处 xiaoyuge</span></span><br><span class=\"line\"><span class=\"attr\">cluster.name:</span> <span class=\"string\">xiaoyuge</span></span><br><span class=\"line\"><span class=\"comment\"># ------------------------------------ Node ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Use a descriptive name for the node:</span></span><br><span class=\"line\"><span class=\"comment\">#节点名称，必须修改 ，默认修改为当前机器名称，若是多实例则需要区分</span></span><br><span class=\"line\"><span class=\"attr\">node.name:</span> <span class=\"string\">xiaoyuge-local1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Add custom attributes to the node:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#node.attr.rack: r1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------------- Paths ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Path to directory where to store the data (separate multiple locations by comma):</span></span><br><span class=\"line\"><span class=\"comment\">##数据目录与日志目录，默认在当前运行程序下，生产环境需要指定</span></span><br><span class=\"line\"><span class=\"comment\">#path.data: /path/to/data</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Path to log files:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#path.logs: /path/to/logs</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------------- Memory -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Lock the memory on startup:</span></span><br><span class=\"line\"><span class=\"comment\">#内存交换锁定，此处需要操作系统设置才生效</span></span><br><span class=\"line\"><span class=\"comment\">#bootstrap.memory_lock: true</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure that the heap size is set to about half the memory available</span></span><br><span class=\"line\"><span class=\"comment\"># on the system and that the owner of the process is allowed to use this</span></span><br><span class=\"line\"><span class=\"comment\"># limit.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Elasticsearch performs poorly when the system is swapping the memory.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Network -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set the bind address to a specific IP (IPv4 or IPv6):</span></span><br><span class=\"line\"><span class=\"comment\">#IP 地址，默认是 local，仅限本机访问，外网不可访问，设置 0.0.0.0 通用做法</span></span><br><span class=\"line\"><span class=\"attr\">network.host:</span> <span class=\"number\">192.168</span><span class=\"number\">.135</span><span class=\"number\">.111</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set a custom port for HTTP:</span></span><br><span class=\"line\"><span class=\"comment\">#访问端口，默认 9200，9300，建议明确指定</span></span><br><span class=\"line\"><span class=\"attr\">http.port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"><span class=\"attr\">transport.port:</span> <span class=\"number\">9300</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the network module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># --------------------------------- Discovery ----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Pass an initial list of hosts to perform discovery when this node is started:</span></span><br><span class=\"line\"><span class=\"comment\"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">## 集群发现配置</span></span><br><span class=\"line\"><span class=\"attr\">discovery.seed_hosts:</span> [<span class=\"string\">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Bootstrap the cluster using an initial set of master-eligible nodes:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">cluster.initial_master_nodes:</span> [<span class=\"string\">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the discovery and cluster formation module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Gateway -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Block initial recovery after a full cluster restart until N nodes are started:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#gateway.recover_after_nodes: 3</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the gateway module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Various -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Require explicit names when deleting indices:</span></span><br><span class=\"line\"><span class=\"comment\">##防止批量删除索引</span></span><br><span class=\"line\"><span class=\"attr\">action.destructive_requires_name:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">#设置密码</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.license.self_generated.type:</span> <span class=\"string\">trial</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-origin:</span> <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-headers:</span> <span class=\"string\">Authorization</span></span><br></pre></td></tr></table></figure></li>\n<li><p>切换为elastic search用户，然后启动elastic search</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su elastic\t\t\t#切换用户</span><br><span class=\"line\">./bin/elasticsearch -d      #后台启动</span><br></pre></td></tr></table></figure></li>\n<li><p>设置密码</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/elasticsearch-setup-passwords interactive</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">执行设置用户名和密码的命令,这里需要为4个用户分别设置密码，elastic, kibana, logstash_system,beats_system</span></span><br><span class=\"line\">Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.</span><br><span class=\"line\">You will be prompted to enter passwords as the process progresses.</span><br><span class=\"line\">Please confirm that you would like to continue [y/N]y</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">passwords must be at least [6] characters long</span><br><span class=\"line\">Try again.</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">Reenter password for [elastic]:</span><br><span class=\"line\">Passwords do not match.</span><br><span class=\"line\">Try again.</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">Reenter password for [elastic]:</span><br><span class=\"line\">Enter password for [kibana]:</span><br><span class=\"line\">Reenter password for [kibana]:</span><br><span class=\"line\">Enter password for [logstash_system]:</span><br><span class=\"line\">Reenter password for [logstash_system]:</span><br><span class=\"line\">Enter password for [beats_system]:</span><br><span class=\"line\">Reenter password for [beats_system]:</span><br><span class=\"line\">Changed password for user [kibana]</span><br><span class=\"line\">Changed password for user [logstash_system]</span><br><span class=\"line\">Changed password for user [beats_system]</span><br><span class=\"line\">Changed password for user [elastic]</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>常见异常：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">java.lang.RuntimeException: can not run elasticsearch as root</span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">切换为elastic search用户，不能用root项目启动</span></span><br><span class=\"line\">  </span><br><span class=\"line\">su elastic</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;main&quot;</span> java.nio.file.AccessDeniedException: /usr/lib/tools/elasticsearch-7.8.0/config/elasticsearch.keystore</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">elastic search用户没有操作该文件夹的权限</span></span><br><span class=\"line\">  </span><br><span class=\"line\">su root</span><br><span class=\"line\">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: [2] bootstrap checks failed</span><br><span class=\"line\">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</span><br><span class=\"line\">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">分配内存不够</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1. 修改 /etc/security/limits.conf</span></span><br><span class=\"line\">sudo vi /etc/security/limits.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在文件末尾加上</span></span><br><span class=\"line\">* soft nofile 65536</span><br><span class=\"line\">* hard nofile 65536</span><br><span class=\"line\">* soft nproc 4096</span><br><span class=\"line\">* hard nproc 4096</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2. 修改 /etc/sysctl.conf</span></span><br><span class=\"line\">sudo vi /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在文件末尾增加</span></span><br><span class=\"line\">vm.max_map_count=262144</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3. 配置重新生效</span></span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n<p><strong>效果如下：</strong></p>\n<p><img src=\"/ElasticSearch/image-20200807093208470.png\" alt=\"image-20200807093208470\"></p>\n<h2 id=\"3-Kibana安装\"><a href=\"#3-Kibana安装\" class=\"headerlink\" title=\"3. Kibana安装\"></a>3. Kibana安装</h2><ol>\n<li><p>解压文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf kibana-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li><p>修改配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ./config/kibana.yml</span><br></pre></td></tr></table></figure>\n\n<p><strong>kibana.yml:</strong></p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Kibana is served by a back end server. This setting specifies the port to use.</span></span><br><span class=\"line\"><span class=\"comment\">##访问端口，默认无需修改</span></span><br><span class=\"line\"><span class=\"attr\">server.port:</span> <span class=\"number\">5601</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span></span><br><span class=\"line\"><span class=\"comment\"># The default is &#x27;localhost&#x27;, which usually means remote machines will not be able to connect.</span></span><br><span class=\"line\"><span class=\"comment\"># To allow connections from remote users, set this parameter to a non-loopback address.</span></span><br><span class=\"line\"><span class=\"comment\">#访问地址 IP，默认本地 ;如果需要外网访问，则配置0.0.0.0</span></span><br><span class=\"line\"><span class=\"attr\">server.host:</span> <span class=\"string\">&quot;0.0.0.0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enables you to specify a path to mount Kibana at if you are running behind a proxy.</span></span><br><span class=\"line\"><span class=\"comment\"># Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath</span></span><br><span class=\"line\"><span class=\"comment\"># from requests it receives, and to prevent a deprecation warning at startup.</span></span><br><span class=\"line\"><span class=\"comment\"># This setting cannot end in a slash.</span></span><br><span class=\"line\"><span class=\"comment\">#server.basePath: &quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Specifies whether Kibana should rewrite requests that are prefixed with</span></span><br><span class=\"line\"><span class=\"comment\"># `server.basePath` or require that they are rewritten by your reverse proxy.</span></span><br><span class=\"line\"><span class=\"comment\"># This setting was effectively always `false` before Kibana 6.3 and will</span></span><br><span class=\"line\"><span class=\"comment\"># default to `true` starting in Kibana 7.0.</span></span><br><span class=\"line\"><span class=\"comment\">#server.rewriteBasePath: false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The maximum payload size in bytes for incoming server requests.</span></span><br><span class=\"line\"><span class=\"comment\">#server.maxPayloadBytes: 1048576</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Kibana server&#x27;s name.  This is used for display purposes.</span></span><br><span class=\"line\"><span class=\"comment\">#server.name: &quot;your-hostname&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The URLs of the Elasticsearch instances to use for all your queries.</span></span><br><span class=\"line\"><span class=\"comment\"># ES 服务指向，集群下配置多个</span></span><br><span class=\"line\"><span class=\"attr\">elasticsearch.hosts:</span> [<span class=\"string\">&quot;http://192.168.135.111:9200&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># When this setting&#x27;s value is true Kibana uses the hostname specified in the server.host</span></span><br><span class=\"line\"><span class=\"comment\"># setting. When the value of this setting is false, Kibana uses the hostname of the host</span></span><br><span class=\"line\"><span class=\"comment\"># that connects to this Kibana instance.</span></span><br><span class=\"line\"><span class=\"comment\">#elasticsearch.preserveHost: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Kibana uses an index in Elasticsearch to store saved searches, visualizations and</span></span><br><span class=\"line\"><span class=\"comment\"># dashboards. Kibana creates a new index if the index doesn&#x27;t already exist.</span></span><br><span class=\"line\"><span class=\"comment\"># Kibana 元数据存储索引名字，默认.kibana 无需修改</span></span><br><span class=\"line\"><span class=\"comment\">#kibana.index: &quot;.kibana&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The default application to load.</span></span><br><span class=\"line\"><span class=\"comment\">#kibana.defaultAppId: &quot;home&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If your Elasticsearch is protected with basic authentication, these settings provide</span></span><br><span class=\"line\"><span class=\"comment\"># the username and password that the Kibana server uses to perform maintenance on the Kibana</span></span><br></pre></td></tr></table></figure></li>\n<li><p>启动</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 当前窗口内启动</span></span><br><span class=\"line\"> ./bin/kibana# </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">后台进程启动</span></span><br><span class=\"line\">nohup ./bin/kibana &amp;</span><br></pre></td></tr></table></figure>\n\n<p><strong>效果如下</strong></p>\n<p><img src=\"/ElasticSearch/image-20200807093309761.png\" alt=\"image-20200807093309761\"></p>\n</li>\n</ol>\n<p><strong>遇见问题：</strong></p>\n<ul>\n<li><p>root启动报错<img src=\"/ElasticSearch/image-20201211095101816.png\" alt=\"image-20201211095101816\"></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换到elastic账户</span></span><br><span class=\"line\">su xiaoyuge</span><br></pre></td></tr></table></figure></li>\n<li><p>elastic用户权限不足 <strong>Babel could not write cache to file: /usr/share/kibana/optimize/.babel_register_cache.json</strong><img src=\"/ElasticSearch/image-20201211095258901.png\" alt=\"image-20201211095258901\"></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换到root用户</span></span><br><span class=\"line\">su root </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">赋予elastic账户 xiaoyuge操作权限</span></span><br><span class=\"line\">chown -R xiaoyuge /usr/local/kibana-7.7.1-linux-x86_64</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换为elastic账户</span></span><br><span class=\"line\">su xiaoyuge</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再次启动即可</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h2 id=\"1-JDK14安装\"><a href=\"#1-JDK14安装\" class=\"headerlink\" title=\"1. JDK14安装\"></a>1. JDK14安装</h2><ol>\n<li><p>下载jdk14：  <a href=\"https://jdk.java.net/14/\">https://jdk.java.net/14/</a></p>\n</li>\n<li><p>将文件存放在linux系统某文件夹内</p>\n</li>\n<li><p>解压</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf openjdk-14.0.2_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li><p>配置环境变量</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#在文件最末尾添加，其中JAVA_HOME是jdk解压后的文件路径</span></span></span><br><span class=\"line\">JAVA_HOME=/usr/lib/tools/jdk-14.0.2</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure></li>\n<li><p>保存后，更新配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></li>\n<li><p>查看JDK是否配置完成</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<p>出现下图表示安装成功！</p>\n<p><img src=\"/ElasticSearch/image-20200806170145844.png\" alt=\"image-20200806170145844\"></p>\n</li>\n</ol>\n<h2 id=\"2-ElasticSearch安装\"><a href=\"#2-ElasticSearch安装\" class=\"headerlink\" title=\"2. ElasticSearch安装\"></a>2. ElasticSearch安装</h2><ol>\n<li><p>解压tar.gz包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li><p>添加elasticsearch用户</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd elastic</span><br></pre></td></tr></table></figure></li>\n<li><p>赋予elastic search操作文件夹的权限</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure></li>\n<li><p>查看本机的hostname</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostname</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">localhost.localdomain</span></span><br></pre></td></tr></table></figure></li>\n<li><p>修改elastic search配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> cd ./elasticsearch-7.8.0/config</span><br><span class=\"line\">vim elasticsearch.yml</span><br></pre></td></tr></table></figure>\n\n<p><strong>elasticsearch.yml</strong></p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ======================== Elasticsearch Configuration =========================</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Elasticsearch comes with reasonable defaults for most settings.</span></span><br><span class=\"line\"><span class=\"comment\">#       Before you set out to tweak and tune the configuration, make sure you</span></span><br><span class=\"line\"><span class=\"comment\">#       understand what are you trying to accomplish and the consequences.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The primary way of configuring a node is via this file. This template lists</span></span><br><span class=\"line\"><span class=\"comment\"># the most important settings you may want to configure for a production cluster.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Please consult the documentation for further information on configuration options:</span></span><br><span class=\"line\"><span class=\"comment\"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Cluster -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Use a descriptive name for your cluster:</span></span><br><span class=\"line\"><span class=\"comment\">#集群名称，默认可以不修改，此处 xiaoyuge</span></span><br><span class=\"line\"><span class=\"attr\">cluster.name:</span> <span class=\"string\">xiaoyuge</span></span><br><span class=\"line\"><span class=\"comment\"># ------------------------------------ Node ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Use a descriptive name for the node:</span></span><br><span class=\"line\"><span class=\"comment\">#节点名称，必须修改 ，默认修改为当前机器名称，若是多实例则需要区分</span></span><br><span class=\"line\"><span class=\"attr\">node.name:</span> <span class=\"string\">xiaoyuge-local1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Add custom attributes to the node:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#node.attr.rack: r1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------------- Paths ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Path to directory where to store the data (separate multiple locations by comma):</span></span><br><span class=\"line\"><span class=\"comment\">##数据目录与日志目录，默认在当前运行程序下，生产环境需要指定</span></span><br><span class=\"line\"><span class=\"comment\">#path.data: /path/to/data</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Path to log files:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#path.logs: /path/to/logs</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------------- Memory -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Lock the memory on startup:</span></span><br><span class=\"line\"><span class=\"comment\">#内存交换锁定，此处需要操作系统设置才生效</span></span><br><span class=\"line\"><span class=\"comment\">#bootstrap.memory_lock: true</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure that the heap size is set to about half the memory available</span></span><br><span class=\"line\"><span class=\"comment\"># on the system and that the owner of the process is allowed to use this</span></span><br><span class=\"line\"><span class=\"comment\"># limit.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Elasticsearch performs poorly when the system is swapping the memory.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Network -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set the bind address to a specific IP (IPv4 or IPv6):</span></span><br><span class=\"line\"><span class=\"comment\">#IP 地址，默认是 local，仅限本机访问，外网不可访问，设置 0.0.0.0 通用做法</span></span><br><span class=\"line\"><span class=\"attr\">network.host:</span> <span class=\"number\">192.168</span><span class=\"number\">.135</span><span class=\"number\">.111</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set a custom port for HTTP:</span></span><br><span class=\"line\"><span class=\"comment\">#访问端口，默认 9200，9300，建议明确指定</span></span><br><span class=\"line\"><span class=\"attr\">http.port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"><span class=\"attr\">transport.port:</span> <span class=\"number\">9300</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the network module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># --------------------------------- Discovery ----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Pass an initial list of hosts to perform discovery when this node is started:</span></span><br><span class=\"line\"><span class=\"comment\"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">## 集群发现配置</span></span><br><span class=\"line\"><span class=\"attr\">discovery.seed_hosts:</span> [<span class=\"string\">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Bootstrap the cluster using an initial set of master-eligible nodes:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">cluster.initial_master_nodes:</span> [<span class=\"string\">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the discovery and cluster formation module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Gateway -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Block initial recovery after a full cluster restart until N nodes are started:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#gateway.recover_after_nodes: 3</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the gateway module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Various -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Require explicit names when deleting indices:</span></span><br><span class=\"line\"><span class=\"comment\">##防止批量删除索引</span></span><br><span class=\"line\"><span class=\"attr\">action.destructive_requires_name:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">#设置密码</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.license.self_generated.type:</span> <span class=\"string\">trial</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-origin:</span> <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-headers:</span> <span class=\"string\">Authorization</span></span><br></pre></td></tr></table></figure></li>\n<li><p>切换为elastic search用户，然后启动elastic search</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su elastic\t\t\t#切换用户</span><br><span class=\"line\">./bin/elasticsearch -d      #后台启动</span><br></pre></td></tr></table></figure></li>\n<li><p>设置密码</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/elasticsearch-setup-passwords interactive</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">执行设置用户名和密码的命令,这里需要为4个用户分别设置密码，elastic, kibana, logstash_system,beats_system</span></span><br><span class=\"line\">Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.</span><br><span class=\"line\">You will be prompted to enter passwords as the process progresses.</span><br><span class=\"line\">Please confirm that you would like to continue [y/N]y</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">passwords must be at least [6] characters long</span><br><span class=\"line\">Try again.</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">Reenter password for [elastic]:</span><br><span class=\"line\">Passwords do not match.</span><br><span class=\"line\">Try again.</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">Reenter password for [elastic]:</span><br><span class=\"line\">Enter password for [kibana]:</span><br><span class=\"line\">Reenter password for [kibana]:</span><br><span class=\"line\">Enter password for [logstash_system]:</span><br><span class=\"line\">Reenter password for [logstash_system]:</span><br><span class=\"line\">Enter password for [beats_system]:</span><br><span class=\"line\">Reenter password for [beats_system]:</span><br><span class=\"line\">Changed password for user [kibana]</span><br><span class=\"line\">Changed password for user [logstash_system]</span><br><span class=\"line\">Changed password for user [beats_system]</span><br><span class=\"line\">Changed password for user [elastic]</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>常见异常：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">java.lang.RuntimeException: can not run elasticsearch as root</span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">切换为elastic search用户，不能用root项目启动</span></span><br><span class=\"line\">  </span><br><span class=\"line\">su elastic</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;main&quot;</span> java.nio.file.AccessDeniedException: /usr/lib/tools/elasticsearch-7.8.0/config/elasticsearch.keystore</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">elastic search用户没有操作该文件夹的权限</span></span><br><span class=\"line\">  </span><br><span class=\"line\">su root</span><br><span class=\"line\">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: [2] bootstrap checks failed</span><br><span class=\"line\">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</span><br><span class=\"line\">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">分配内存不够</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1. 修改 /etc/security/limits.conf</span></span><br><span class=\"line\">sudo vi /etc/security/limits.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在文件末尾加上</span></span><br><span class=\"line\">* soft nofile 65536</span><br><span class=\"line\">* hard nofile 65536</span><br><span class=\"line\">* soft nproc 4096</span><br><span class=\"line\">* hard nproc 4096</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2. 修改 /etc/sysctl.conf</span></span><br><span class=\"line\">sudo vi /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在文件末尾增加</span></span><br><span class=\"line\">vm.max_map_count=262144</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3. 配置重新生效</span></span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n<p><strong>效果如下：</strong></p>\n<p><img src=\"/ElasticSearch/image-20200807093208470.png\" alt=\"image-20200807093208470\"></p>\n<h2 id=\"3-Kibana安装\"><a href=\"#3-Kibana安装\" class=\"headerlink\" title=\"3. Kibana安装\"></a>3. Kibana安装</h2><ol>\n<li><p>解压文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf kibana-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li><p>修改配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ./config/kibana.yml</span><br></pre></td></tr></table></figure>\n\n<p><strong>kibana.yml:</strong></p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Kibana is served by a back end server. This setting specifies the port to use.</span></span><br><span class=\"line\"><span class=\"comment\">##访问端口，默认无需修改</span></span><br><span class=\"line\"><span class=\"attr\">server.port:</span> <span class=\"number\">5601</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span></span><br><span class=\"line\"><span class=\"comment\"># The default is &#x27;localhost&#x27;, which usually means remote machines will not be able to connect.</span></span><br><span class=\"line\"><span class=\"comment\"># To allow connections from remote users, set this parameter to a non-loopback address.</span></span><br><span class=\"line\"><span class=\"comment\">#访问地址 IP，默认本地 ;如果需要外网访问，则配置0.0.0.0</span></span><br><span class=\"line\"><span class=\"attr\">server.host:</span> <span class=\"string\">&quot;0.0.0.0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enables you to specify a path to mount Kibana at if you are running behind a proxy.</span></span><br><span class=\"line\"><span class=\"comment\"># Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath</span></span><br><span class=\"line\"><span class=\"comment\"># from requests it receives, and to prevent a deprecation warning at startup.</span></span><br><span class=\"line\"><span class=\"comment\"># This setting cannot end in a slash.</span></span><br><span class=\"line\"><span class=\"comment\">#server.basePath: &quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Specifies whether Kibana should rewrite requests that are prefixed with</span></span><br><span class=\"line\"><span class=\"comment\"># `server.basePath` or require that they are rewritten by your reverse proxy.</span></span><br><span class=\"line\"><span class=\"comment\"># This setting was effectively always `false` before Kibana 6.3 and will</span></span><br><span class=\"line\"><span class=\"comment\"># default to `true` starting in Kibana 7.0.</span></span><br><span class=\"line\"><span class=\"comment\">#server.rewriteBasePath: false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The maximum payload size in bytes for incoming server requests.</span></span><br><span class=\"line\"><span class=\"comment\">#server.maxPayloadBytes: 1048576</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Kibana server&#x27;s name.  This is used for display purposes.</span></span><br><span class=\"line\"><span class=\"comment\">#server.name: &quot;your-hostname&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The URLs of the Elasticsearch instances to use for all your queries.</span></span><br><span class=\"line\"><span class=\"comment\"># ES 服务指向，集群下配置多个</span></span><br><span class=\"line\"><span class=\"attr\">elasticsearch.hosts:</span> [<span class=\"string\">&quot;http://192.168.135.111:9200&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># When this setting&#x27;s value is true Kibana uses the hostname specified in the server.host</span></span><br><span class=\"line\"><span class=\"comment\"># setting. When the value of this setting is false, Kibana uses the hostname of the host</span></span><br><span class=\"line\"><span class=\"comment\"># that connects to this Kibana instance.</span></span><br><span class=\"line\"><span class=\"comment\">#elasticsearch.preserveHost: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Kibana uses an index in Elasticsearch to store saved searches, visualizations and</span></span><br><span class=\"line\"><span class=\"comment\"># dashboards. Kibana creates a new index if the index doesn&#x27;t already exist.</span></span><br><span class=\"line\"><span class=\"comment\"># Kibana 元数据存储索引名字，默认.kibana 无需修改</span></span><br><span class=\"line\"><span class=\"comment\">#kibana.index: &quot;.kibana&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The default application to load.</span></span><br><span class=\"line\"><span class=\"comment\">#kibana.defaultAppId: &quot;home&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If your Elasticsearch is protected with basic authentication, these settings provide</span></span><br><span class=\"line\"><span class=\"comment\"># the username and password that the Kibana server uses to perform maintenance on the Kibana</span></span><br></pre></td></tr></table></figure></li>\n<li><p>启动</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 当前窗口内启动</span></span><br><span class=\"line\"> ./bin/kibana# </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">后台进程启动</span></span><br><span class=\"line\">nohup ./bin/kibana &amp;</span><br></pre></td></tr></table></figure>\n\n<p><strong>效果如下</strong></p>\n<p><img src=\"/ElasticSearch/image-20200807093309761.png\" alt=\"image-20200807093309761\"></p>\n</li>\n</ol>\n<p><strong>遇见问题：</strong></p>\n<ul>\n<li><p>root启动报错<img src=\"/ElasticSearch/image-20201211095101816.png\" alt=\"image-20201211095101816\"></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换到elastic账户</span></span><br><span class=\"line\">su xiaoyuge</span><br></pre></td></tr></table></figure></li>\n<li><p>elastic用户权限不足 <strong>Babel could not write cache to file: /usr/share/kibana/optimize/.babel_register_cache.json</strong><img src=\"/ElasticSearch/image-20201211095258901.png\" alt=\"image-20201211095258901\"></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换到root用户</span></span><br><span class=\"line\">su root </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">赋予elastic账户 xiaoyuge操作权限</span></span><br><span class=\"line\">chown -R xiaoyuge /usr/local/kibana-7.7.1-linux-x86_64</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换为elastic账户</span></span><br><span class=\"line\">su xiaoyuge</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再次启动即可</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n"},{"title":"二分查找","comments":1,"abbrlink":42877,"date":"2021-08-19T14:54:43.000Z","translate_title":"binary-search","_content":"二分法查找是一种基于比较目标值和数组中间元素的算法\n- 如果目标值 = 中间值，则找到目标值\n- 如果目标值 < 中间值，则在左侧继续搜索\n- 如果目标值 > 中间值，则在右侧继续搜索\n![二分查找](./algorithm/01.png)\n  \n**解题思路：**\n- 初始化指针left = 0, right=n-1;\n- 当left <= right： \n  - 比较中间元素nums[pivot]和目标值target\n    1.target = nums[pivot], 返回pivot\n    2.target > nums[pivot], 则在右侧继续搜索left = pivot+1\n    3.target < nums[pivot], 则在左侧继续搜索right = pivot+1\n    ![](./algorithm/02.png)\n    ![](./algorithm/03.png)\n    \n```java\n/**\n * 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，\n * 写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\n * 输入: nums = [-1,0,3,5,9,12], target = 9\n * 输出: 4\n * 解释: 9 出现在 nums 中并且下标为 4\n */\npublic int search(int[] nums, int target){\n    int pivot, left =0, right = nums.length - 1;\n    while (left <= right){\n        pivot = left + (right - left) / 2;\n        if (nums[pivot] == target){\n            return pivot;\n        }else if (nums[pivot] < target){\n            left = pivot + 1;\n        } else{\n            right = pivot - 1;\n        }\n    }\n    return -1;\n}\n```\n**复杂度分析：**\n- 时间复杂度：O(logN) \n- 空间复杂度：O(1)","source":"_posts/2021/07/algorithm.md","raw":"---\ntitle: 二分查找\ntags: algorithm\ncategories: 算法\ncomments: true\nabbrlink: 42877\ndate: 2021-08-19 22:54:43\ntranslate_title: binary-search\n---\n二分法查找是一种基于比较目标值和数组中间元素的算法\n- 如果目标值 = 中间值，则找到目标值\n- 如果目标值 < 中间值，则在左侧继续搜索\n- 如果目标值 > 中间值，则在右侧继续搜索\n![二分查找](./algorithm/01.png)\n  \n**解题思路：**\n- 初始化指针left = 0, right=n-1;\n- 当left <= right： \n  - 比较中间元素nums[pivot]和目标值target\n    1.target = nums[pivot], 返回pivot\n    2.target > nums[pivot], 则在右侧继续搜索left = pivot+1\n    3.target < nums[pivot], 则在左侧继续搜索right = pivot+1\n    ![](./algorithm/02.png)\n    ![](./algorithm/03.png)\n    \n```java\n/**\n * 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，\n * 写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\n * 输入: nums = [-1,0,3,5,9,12], target = 9\n * 输出: 4\n * 解释: 9 出现在 nums 中并且下标为 4\n */\npublic int search(int[] nums, int target){\n    int pivot, left =0, right = nums.length - 1;\n    while (left <= right){\n        pivot = left + (right - left) / 2;\n        if (nums[pivot] == target){\n            return pivot;\n        }else if (nums[pivot] < target){\n            left = pivot + 1;\n        } else{\n            right = pivot - 1;\n        }\n    }\n    return -1;\n}\n```\n**复杂度分析：**\n- 时间复杂度：O(logN) \n- 空间复杂度：O(1)","slug":"algorithm","published":1,"updated":"2022-03-27T14:06:03.470Z","layout":"post","photos":[],"link":"","_id":"cl424hx5j001jad5i6jvzehov","content":"<p>二分法查找是一种基于比较目标值和数组中间元素的算法</p>\n<ul>\n<li>如果目标值 = 中间值，则找到目标值</li>\n<li>如果目标值 &lt; 中间值，则在左侧继续搜索</li>\n<li>如果目标值 &gt; 中间值，则在右侧继续搜索<br><img src=\"/algorithm/01.png\" alt=\"二分查找\"></li>\n</ul>\n<p><strong>解题思路：</strong></p>\n<ul>\n<li>初始化指针left = 0, right=n-1;</li>\n<li>当left &lt;= right： <ul>\n<li>比较中间元素nums[pivot]和目标值target<br>1.target = nums[pivot], 返回pivot<br>2.target &gt; nums[pivot], 则在右侧继续搜索left = pivot+1<br>3.target &lt; nums[pivot], 则在左侧继续搜索right = pivot+1<br><img src=\"/algorithm/02.png\"><br><img src=\"/algorithm/03.png\"></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，</span></span><br><span class=\"line\"><span class=\"comment\"> * 写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</span></span><br><span class=\"line\"><span class=\"comment\"> * 输入: nums = [-1,0,3,5,9,12], target = 9</span></span><br><span class=\"line\"><span class=\"comment\"> * 输出: 4</span></span><br><span class=\"line\"><span class=\"comment\"> * 解释: 9 出现在 nums 中并且下标为 4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivot, left =<span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        pivot = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[pivot] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pivot;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[pivot] &lt; target)&#123;</span><br><span class=\"line\">            left = pivot + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            right = pivot - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>复杂度分析：</strong></p>\n<ul>\n<li>时间复杂度：O(logN) </li>\n<li>空间复杂度：O(1)</li>\n</ul>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>二分法查找是一种基于比较目标值和数组中间元素的算法</p>\n<ul>\n<li>如果目标值 = 中间值，则找到目标值</li>\n<li>如果目标值 &lt; 中间值，则在左侧继续搜索</li>\n<li>如果目标值 &gt; 中间值，则在右侧继续搜索<br><img src=\"/algorithm/01.png\" alt=\"二分查找\"></li>\n</ul>\n<p><strong>解题思路：</strong></p>\n<ul>\n<li>初始化指针left = 0, right=n-1;</li>\n<li>当left &lt;= right： <ul>\n<li>比较中间元素nums[pivot]和目标值target<br>1.target = nums[pivot], 返回pivot<br>2.target &gt; nums[pivot], 则在右侧继续搜索left = pivot+1<br>3.target &lt; nums[pivot], 则在左侧继续搜索right = pivot+1<br><img src=\"/algorithm/02.png\"><br><img src=\"/algorithm/03.png\"></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，</span></span><br><span class=\"line\"><span class=\"comment\"> * 写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</span></span><br><span class=\"line\"><span class=\"comment\"> * 输入: nums = [-1,0,3,5,9,12], target = 9</span></span><br><span class=\"line\"><span class=\"comment\"> * 输出: 4</span></span><br><span class=\"line\"><span class=\"comment\"> * 解释: 9 出现在 nums 中并且下标为 4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivot, left =<span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        pivot = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[pivot] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pivot;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[pivot] &lt; target)&#123;</span><br><span class=\"line\">            left = pivot + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            right = pivot - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>复杂度分析：</strong></p>\n<ul>\n<li>时间复杂度：O(logN) </li>\n<li>空间复杂度：O(1)</li>\n</ul>\n"},{"title":"springCloud之FeignClient访问微服务接口缓慢","comments":1,"abbrlink":54514,"date":"2021-07-03T09:08:10.000Z","translate_title":"feignclient-of-springcloud-accesses-microservice-interface-slowly","_content":"### 问题描述\n逻辑是A服务调用B服务(AB在同一个局域网内)。 经过反复测试，有一个访问缓慢的现象，具体表现为：\n程序启动第一次访问初始化1.2秒左右，还可以理解。\n但后面访问还是要1.1秒左右（格式化到SSS毫秒打印日志监控的）。\n但如果连续访问几次，后面几次又是几十毫秒。过一会再访问，或者换浏览器换post工具请求，又会1.2秒左右。\n\n### 原因排查1\n查看连接查实的接口\n![请求缓慢2](./bug-sprigCloud/02.png)\n发现接口调用的是这个地址，其实是别人启动项目的时候吧自己的ip注册到了eureka注册中心，导致接口有时候走的是getway，有时候又是走的别人的接口\n\n解决方法：eureka.client.register-with-eureka 为false  这样就不会注册到eureka注册中心了\n### 原因排查2\n1. 查看日志\n    ![请求缓慢](./bug-sprigCloud/01.png)\n查看是否是hystrix 配置的时间小于了ribbon的时间\n\n\n\n","source":"_posts/2021/07/bug-sprigCloud.md","raw":"---\ntitle: springCloud之FeignClient访问微服务接口缓慢\ntags: SpringCloud\ncategories: 踩坑记录\ncomments: true\nabbrlink: 54514\ndate: 2021-07-03 17:08:10\ntranslate_title: feignclient-of-springcloud-accesses-microservice-interface-slowly\n---\n### 问题描述\n逻辑是A服务调用B服务(AB在同一个局域网内)。 经过反复测试，有一个访问缓慢的现象，具体表现为：\n程序启动第一次访问初始化1.2秒左右，还可以理解。\n但后面访问还是要1.1秒左右（格式化到SSS毫秒打印日志监控的）。\n但如果连续访问几次，后面几次又是几十毫秒。过一会再访问，或者换浏览器换post工具请求，又会1.2秒左右。\n\n### 原因排查1\n查看连接查实的接口\n![请求缓慢2](./bug-sprigCloud/02.png)\n发现接口调用的是这个地址，其实是别人启动项目的时候吧自己的ip注册到了eureka注册中心，导致接口有时候走的是getway，有时候又是走的别人的接口\n\n解决方法：eureka.client.register-with-eureka 为false  这样就不会注册到eureka注册中心了\n### 原因排查2\n1. 查看日志\n    ![请求缓慢](./bug-sprigCloud/01.png)\n查看是否是hystrix 配置的时间小于了ribbon的时间\n\n\n\n","slug":"bug-sprigCloud","published":1,"updated":"2022-03-27T14:06:03.465Z","layout":"post","photos":[],"link":"","_id":"cl424hx5k001mad5iandh6k86","content":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>逻辑是A服务调用B服务(AB在同一个局域网内)。 经过反复测试，有一个访问缓慢的现象，具体表现为：<br>程序启动第一次访问初始化1.2秒左右，还可以理解。<br>但后面访问还是要1.1秒左右（格式化到SSS毫秒打印日志监控的）。<br>但如果连续访问几次，后面几次又是几十毫秒。过一会再访问，或者换浏览器换post工具请求，又会1.2秒左右。</p>\n<h3 id=\"原因排查1\"><a href=\"#原因排查1\" class=\"headerlink\" title=\"原因排查1\"></a>原因排查1</h3><p>查看连接查实的接口<br><img src=\"/bug-sprigCloud/02.png\" alt=\"请求缓慢2\"><br>发现接口调用的是这个地址，其实是别人启动项目的时候吧自己的ip注册到了eureka注册中心，导致接口有时候走的是getway，有时候又是走的别人的接口</p>\n<p>解决方法：eureka.client.register-with-eureka 为false  这样就不会注册到eureka注册中心了</p>\n<h3 id=\"原因排查2\"><a href=\"#原因排查2\" class=\"headerlink\" title=\"原因排查2\"></a>原因排查2</h3><ol>\n<li>查看日志<br> <img src=\"/bug-sprigCloud/01.png\" alt=\"请求缓慢\"><br>查看是否是hystrix 配置的时间小于了ribbon的时间</li>\n</ol>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>逻辑是A服务调用B服务(AB在同一个局域网内)。 经过反复测试，有一个访问缓慢的现象，具体表现为：<br>程序启动第一次访问初始化1.2秒左右，还可以理解。<br>但后面访问还是要1.1秒左右（格式化到SSS毫秒打印日志监控的）。<br>但如果连续访问几次，后面几次又是几十毫秒。过一会再访问，或者换浏览器换post工具请求，又会1.2秒左右。</p>\n<h3 id=\"原因排查1\"><a href=\"#原因排查1\" class=\"headerlink\" title=\"原因排查1\"></a>原因排查1</h3><p>查看连接查实的接口<br><img src=\"/bug-sprigCloud/02.png\" alt=\"请求缓慢2\"><br>发现接口调用的是这个地址，其实是别人启动项目的时候吧自己的ip注册到了eureka注册中心，导致接口有时候走的是getway，有时候又是走的别人的接口</p>\n<p>解决方法：eureka.client.register-with-eureka 为false  这样就不会注册到eureka注册中心了</p>\n<h3 id=\"原因排查2\"><a href=\"#原因排查2\" class=\"headerlink\" title=\"原因排查2\"></a>原因排查2</h3><ol>\n<li>查看日志<br> <img src=\"/bug-sprigCloud/01.png\" alt=\"请求缓慢\"><br>查看是否是hystrix 配置的时间小于了ribbon的时间</li>\n</ol>\n"},{"title":"java缓存一致性问题","comments":1,"abbrlink":15444,"date":"2021-08-11T05:31:52.000Z","translate_title":"java-cache-consistency-problem","_content":"","source":"_posts/2021/07/cache-consistency.md","raw":"---\ntitle: java缓存一致性问题\ntags: redis\ncategories: 中间件\ncomments: true\nabbrlink: 15444\ndate: 2021-08-11 13:31:52\ntranslate_title: java-cache-consistency-problem\n---\n","slug":"cache-consistency","published":1,"updated":"2022-03-27T14:06:03.477Z","layout":"post","photos":[],"link":"","_id":"cl424hx5k001pad5i74lzdgbe","content":"","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":""},{"title":"Hexo博客加密","comments":1,"abbrlink":58929,"date":"2021-07-05T01:28:20.000Z","theme":"xray","password":1234,"_content":"### 1.概述\nHexo编写Markdown文章后生成的静态页面默认是公开不加密的，所有人都可以访问，如果希望某些文章需要访问者只有输入正确的密码后才能继续访问，则需要使用插件hexo-blog-encrypt\n \n\n### 2.加密后的文章特性\n- 一旦你输入了正确的密码, 它将会被存储在本地浏览器的localStorage中。再次访问，不需输入密码\n- 支持按标签加密\n- 所有的核心功能都是由原生的API所提供的。 在 Node.js中, 我们使用 Crypto。在浏览器中, 我们使用 Web Crypto API\n- 所有的核心功能都是由原生的API所提供的。 在 Node.js中, 我们使用 Crypto。在浏览器中, 我们使用 Web Crypto API\n- 广泛地使用 Promise 来进行异步操作, 以此确保线程不被堵塞\n- 过时的浏览器将不能正常显示\n\n### 3.安装encrypt插件\n在博客目录下执行下面的指令安装encrypt\n```shell\nnpm install --save hexo-blog-encrypt\n```\n安装完成后，再package.json文件的dependecies依赖中看到encrypt插件\n```lombok.config\n\"dependencies\": {\n    \"hexo-blog-encrypt\": \"^3.0.16\",\n}\n```\n### 4.快速入门\n#### 4.1 加密文章设置(password属性)\n将\"password\"字段添加到文章信息头部：\n```text\n---\ntitle: 标题\ncategories:\n- 站点\n- WordPress\n  tags:\n- WordPress\n  abbrlink: asdfajklj3\n  date: 2021-05-07 12:23:11\n  password: 1234\n---\n```\n#### 4.2 执行hexo g&&hexo s后，便可在本地查看加密后的文章预览\n \n\n### 5.高级设置\n#### 5.1 博客根目录 _config.yml\n```yaml\n# Security\nencrypt: # hexo-blog-encrypt\n  abstract: Here's something encrypted, password is required to continue reading.\n  message: Hey, password is required here.\n  tags:\n    - {name: encryptAsDiary, password: passwordA}\n    - {name: encryptAsTips, password: passwordB}\n  theme: xray   #增加主题属性\n  wrong_pass_message: Oh, this is an invalid password. Check and try again, please.\n  wrong_hash_message: Oh, these decrypted content cannot be verified, but you can still have a look.\n```\n\n#### 5.2 修改文章信息头如下\n```text\npassword: 1234\nabstract: 文章已被加密，需要输入密码查看。\nmessage: 您好，这里需要密码。\nwrong_pass_message: 抱歉，这个密码看着不太对，请再试试。\nwrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。\n```\n#### 5.3 配置优先级\n\n文章信息头 > _config.yml (站点根目录下的) > 默认配置\n\n#### 5.4 修改hexo新建博客的模板\n打开博客目录下的 scaffolds/post.md文件，编辑\n```text\n---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\ncategories: \ncomments: true\npassword: 123456\nabstract: 文章已被加密，需要输入密码查看，如需查看请联系博主！\nmessage: 您好，这里需要密码。\nwrong_pass_message: 抱歉，这个密码看着不太对，请再试试。\nwrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。\n---\n```\n\n### 6.设置Hexo博客加密主题\n目前已有的加密主题如下，可以选择一个\n- default\n- blink\n- shrink\n- flip \n- up\n- surge\n- wave\n- xray\n\n编辑根路径下的_config.yml，如下\n```yaml\n# Security\nencrypt: # hexo-blog-encrypt\n  abstract: Here's something encrypted, password is required to continue reading.\n  message: Hey, password is required here.\n  tags:\n    - {name: encryptAsDiary, password: passwordA}\n    - {name: encryptAsTips, password: passwordB}\n  theme: xray   #增加主题属性\n  wrong_pass_message: Oh, this is an invalid password. Check and try again, please.\n  wrong_hash_message: Oh, these decrypted content cannot be verified, but you can still have a look.\n```\n\n在博客中增加\n```yaml\n---\ntitle: Theme test\ndate: 2019-12-21 11:54:07\ntags:\n    - A Tag should be encrypted\ntheme: xray   #主题名称\npassword: \"hello\"\n---\n```\n至此，完毕！可以参考：https://github.com/D0n9X1n/hexo-blog-encrypt#encrypt-theme\n\n","source":"_posts/2021/07/hexo-encrypt.md","raw":"---\ntitle: Hexo博客加密\ncomments: true\nabbrlink: 58929\ndate: 2021-07-05 09:28:20\ntags: hexo\ncategories: hexo\ntheme: xray\npassword: 1234\n---\n### 1.概述\nHexo编写Markdown文章后生成的静态页面默认是公开不加密的，所有人都可以访问，如果希望某些文章需要访问者只有输入正确的密码后才能继续访问，则需要使用插件hexo-blog-encrypt\n \n\n### 2.加密后的文章特性\n- 一旦你输入了正确的密码, 它将会被存储在本地浏览器的localStorage中。再次访问，不需输入密码\n- 支持按标签加密\n- 所有的核心功能都是由原生的API所提供的。 在 Node.js中, 我们使用 Crypto。在浏览器中, 我们使用 Web Crypto API\n- 所有的核心功能都是由原生的API所提供的。 在 Node.js中, 我们使用 Crypto。在浏览器中, 我们使用 Web Crypto API\n- 广泛地使用 Promise 来进行异步操作, 以此确保线程不被堵塞\n- 过时的浏览器将不能正常显示\n\n### 3.安装encrypt插件\n在博客目录下执行下面的指令安装encrypt\n```shell\nnpm install --save hexo-blog-encrypt\n```\n安装完成后，再package.json文件的dependecies依赖中看到encrypt插件\n```lombok.config\n\"dependencies\": {\n    \"hexo-blog-encrypt\": \"^3.0.16\",\n}\n```\n### 4.快速入门\n#### 4.1 加密文章设置(password属性)\n将\"password\"字段添加到文章信息头部：\n```text\n---\ntitle: 标题\ncategories:\n- 站点\n- WordPress\n  tags:\n- WordPress\n  abbrlink: asdfajklj3\n  date: 2021-05-07 12:23:11\n  password: 1234\n---\n```\n#### 4.2 执行hexo g&&hexo s后，便可在本地查看加密后的文章预览\n \n\n### 5.高级设置\n#### 5.1 博客根目录 _config.yml\n```yaml\n# Security\nencrypt: # hexo-blog-encrypt\n  abstract: Here's something encrypted, password is required to continue reading.\n  message: Hey, password is required here.\n  tags:\n    - {name: encryptAsDiary, password: passwordA}\n    - {name: encryptAsTips, password: passwordB}\n  theme: xray   #增加主题属性\n  wrong_pass_message: Oh, this is an invalid password. Check and try again, please.\n  wrong_hash_message: Oh, these decrypted content cannot be verified, but you can still have a look.\n```\n\n#### 5.2 修改文章信息头如下\n```text\npassword: 1234\nabstract: 文章已被加密，需要输入密码查看。\nmessage: 您好，这里需要密码。\nwrong_pass_message: 抱歉，这个密码看着不太对，请再试试。\nwrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。\n```\n#### 5.3 配置优先级\n\n文章信息头 > _config.yml (站点根目录下的) > 默认配置\n\n#### 5.4 修改hexo新建博客的模板\n打开博客目录下的 scaffolds/post.md文件，编辑\n```text\n---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\ncategories: \ncomments: true\npassword: 123456\nabstract: 文章已被加密，需要输入密码查看，如需查看请联系博主！\nmessage: 您好，这里需要密码。\nwrong_pass_message: 抱歉，这个密码看着不太对，请再试试。\nwrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。\n---\n```\n\n### 6.设置Hexo博客加密主题\n目前已有的加密主题如下，可以选择一个\n- default\n- blink\n- shrink\n- flip \n- up\n- surge\n- wave\n- xray\n\n编辑根路径下的_config.yml，如下\n```yaml\n# Security\nencrypt: # hexo-blog-encrypt\n  abstract: Here's something encrypted, password is required to continue reading.\n  message: Hey, password is required here.\n  tags:\n    - {name: encryptAsDiary, password: passwordA}\n    - {name: encryptAsTips, password: passwordB}\n  theme: xray   #增加主题属性\n  wrong_pass_message: Oh, this is an invalid password. Check and try again, please.\n  wrong_hash_message: Oh, these decrypted content cannot be verified, but you can still have a look.\n```\n\n在博客中增加\n```yaml\n---\ntitle: Theme test\ndate: 2019-12-21 11:54:07\ntags:\n    - A Tag should be encrypted\ntheme: xray   #主题名称\npassword: \"hello\"\n---\n```\n至此，完毕！可以参考：https://github.com/D0n9X1n/hexo-blog-encrypt#encrypt-theme\n\n","slug":"hexo-encrypt","published":1,"updated":"2022-05-07T00:09:50.618Z","layout":"post","photos":[],"link":"","_id":"cl424hx5l001sad5ibxdq73rz","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"Oh, these decrypted content cannot be verified, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"310f12fe1b1e78b54a5df19aaa04e467fa0fcc47678c2ec825f715ec1d7db8ba\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-xray\">\n      <input class=\"hbe hbe-input-field hbe-input-field-xray\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-xray\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-xray\">Hey, password is required here.</span>\n      </label>\n      <svg class=\"hbe hbe-graphic hbe-graphic-xray\" width=\"300%\" height=\"100%\" viewBox=\"0 0 1200 60\" preserveAspectRatio=\"none\">\n        <path d=\"M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0\"></path>\n        <path d=\"M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0\"></path>\n      </svg>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"Here's something encrypted, password is required to continue reading.","more":"Here's something encrypted, password is required to continue reading.","origin":"<h3 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1.概述\"></a>1.概述</h3><p>Hexo编写Markdown文章后生成的静态页面默认是公开不加密的，所有人都可以访问，如果希望某些文章需要访问者只有输入正确的密码后才能继续访问，则需要使用插件hexo-blog-encrypt</p>\n<h3 id=\"2-加密后的文章特性\"><a href=\"#2-加密后的文章特性\" class=\"headerlink\" title=\"2.加密后的文章特性\"></a>2.加密后的文章特性</h3><ul>\n<li>一旦你输入了正确的密码, 它将会被存储在本地浏览器的localStorage中。再次访问，不需输入密码</li>\n<li>支持按标签加密</li>\n<li>所有的核心功能都是由原生的API所提供的。 在 Node.js中, 我们使用 Crypto。在浏览器中, 我们使用 Web Crypto API</li>\n<li>所有的核心功能都是由原生的API所提供的。 在 Node.js中, 我们使用 Crypto。在浏览器中, 我们使用 Web Crypto API</li>\n<li>广泛地使用 Promise 来进行异步操作, 以此确保线程不被堵塞</li>\n<li>过时的浏览器将不能正常显示</li>\n</ul>\n<h3 id=\"3-安装encrypt插件\"><a href=\"#3-安装encrypt插件\" class=\"headerlink\" title=\"3.安装encrypt插件\"></a>3.安装encrypt插件</h3><p>在博客目录下执行下面的指令安装encrypt</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure>\n<p>安装完成后，再package.json文件的dependecies依赖中看到encrypt插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;hexo-blog-encrypt&quot;: &quot;^3.0.16&quot;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-快速入门\"><a href=\"#4-快速入门\" class=\"headerlink\" title=\"4.快速入门\"></a>4.快速入门</h3><h4 id=\"4-1-加密文章设置-password属性\"><a href=\"#4-1-加密文章设置-password属性\" class=\"headerlink\" title=\"4.1 加密文章设置(password属性)\"></a>4.1 加密文章设置(password属性)</h4><p>将”password”字段添加到文章信息头部：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标题</span><br><span class=\"line\">categories:</span><br><span class=\"line\">- 站点</span><br><span class=\"line\">- WordPress</span><br><span class=\"line\">  tags:</span><br><span class=\"line\">- WordPress</span><br><span class=\"line\">  abbrlink: asdfajklj3</span><br><span class=\"line\">  date: 2021-05-07 12:23:11</span><br><span class=\"line\">  password: 1234</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-执行hexo-g-amp-amp-hexo-s后，便可在本地查看加密后的文章预览\"><a href=\"#4-2-执行hexo-g-amp-amp-hexo-s后，便可在本地查看加密后的文章预览\" class=\"headerlink\" title=\"4.2 执行hexo g&amp;&amp;hexo s后，便可在本地查看加密后的文章预览\"></a>4.2 执行hexo g&amp;&amp;hexo s后，便可在本地查看加密后的文章预览</h4><h3 id=\"5-高级设置\"><a href=\"#5-高级设置\" class=\"headerlink\" title=\"5.高级设置\"></a>5.高级设置</h3><h4 id=\"5-1-博客根目录-config-yml\"><a href=\"#5-1-博客根目录-config-yml\" class=\"headerlink\" title=\"5.1 博客根目录 _config.yml\"></a>5.1 博客根目录 _config.yml</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Security</span></span><br><span class=\"line\"><span class=\"attr\">encrypt:</span> <span class=\"comment\"># hexo-blog-encrypt</span></span><br><span class=\"line\">  <span class=\"attr\">abstract:</span> <span class=\"string\">Here&#x27;s</span> <span class=\"string\">something</span> <span class=\"string\">encrypted,</span> <span class=\"string\">password</span> <span class=\"string\">is</span> <span class=\"string\">required</span> <span class=\"string\">to</span> <span class=\"string\">continue</span> <span class=\"string\">reading.</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span> <span class=\"string\">Hey,</span> <span class=\"string\">password</span> <span class=\"string\">is</span> <span class=\"string\">required</span> <span class=\"string\">here.</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">encryptAsDiary</span>, <span class=\"attr\">password:</span> <span class=\"string\">passwordA</span>&#125;</span><br><span class=\"line\">    <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">encryptAsTips</span>, <span class=\"attr\">password:</span> <span class=\"string\">passwordB</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">theme:</span> <span class=\"string\">xray</span>   <span class=\"comment\">#增加主题属性</span></span><br><span class=\"line\">  <span class=\"attr\">wrong_pass_message:</span> <span class=\"string\">Oh,</span> <span class=\"string\">this</span> <span class=\"string\">is</span> <span class=\"string\">an</span> <span class=\"string\">invalid</span> <span class=\"string\">password.</span> <span class=\"string\">Check</span> <span class=\"string\">and</span> <span class=\"string\">try</span> <span class=\"string\">again,</span> <span class=\"string\">please.</span></span><br><span class=\"line\">  <span class=\"attr\">wrong_hash_message:</span> <span class=\"string\">Oh,</span> <span class=\"string\">these</span> <span class=\"string\">decrypted</span> <span class=\"string\">content</span> <span class=\"string\">cannot</span> <span class=\"string\">be</span> <span class=\"string\">verified,</span> <span class=\"string\">but</span> <span class=\"string\">you</span> <span class=\"string\">can</span> <span class=\"string\">still</span> <span class=\"string\">have</span> <span class=\"string\">a</span> <span class=\"string\">look.</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-2-修改文章信息头如下\"><a href=\"#5-2-修改文章信息头如下\" class=\"headerlink\" title=\"5.2 修改文章信息头如下\"></a>5.2 修改文章信息头如下</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">password: 1234</span><br><span class=\"line\">abstract: 文章已被加密，需要输入密码查看。</span><br><span class=\"line\">message: 您好，这里需要密码。</span><br><span class=\"line\">wrong_pass_message: 抱歉，这个密码看着不太对，请再试试。</span><br><span class=\"line\">wrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-3-配置优先级\"><a href=\"#5-3-配置优先级\" class=\"headerlink\" title=\"5.3 配置优先级\"></a>5.3 配置优先级</h4><p>文章信息头 &gt; _config.yml (站点根目录下的) &gt; 默认配置</p>\n<h4 id=\"5-4-修改hexo新建博客的模板\"><a href=\"#5-4-修改hexo新建博客的模板\" class=\"headerlink\" title=\"5.4 修改hexo新建博客的模板\"></a>5.4 修改hexo新建博客的模板</h4><p>打开博客目录下的 scaffolds/post.md文件，编辑</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &#123;&#123; title &#125;&#125;</span><br><span class=\"line\">date: &#123;&#123; date &#125;&#125;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">categories: </span><br><span class=\"line\">comments: true</span><br><span class=\"line\">password: 123456</span><br><span class=\"line\">abstract: 文章已被加密，需要输入密码查看，如需查看请联系博主！</span><br><span class=\"line\">message: 您好，这里需要密码。</span><br><span class=\"line\">wrong_pass_message: 抱歉，这个密码看着不太对，请再试试。</span><br><span class=\"line\">wrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-设置Hexo博客加密主题\"><a href=\"#6-设置Hexo博客加密主题\" class=\"headerlink\" title=\"6.设置Hexo博客加密主题\"></a>6.设置Hexo博客加密主题</h3><p>目前已有的加密主题如下，可以选择一个</p>\n<ul>\n<li>default</li>\n<li>blink</li>\n<li>shrink</li>\n<li>flip </li>\n<li>up</li>\n<li>surge</li>\n<li>wave</li>\n<li>xray</li>\n</ul>\n<p>编辑根路径下的_config.yml，如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Security</span></span><br><span class=\"line\"><span class=\"attr\">encrypt:</span> <span class=\"comment\"># hexo-blog-encrypt</span></span><br><span class=\"line\">  <span class=\"attr\">abstract:</span> <span class=\"string\">Here&#x27;s</span> <span class=\"string\">something</span> <span class=\"string\">encrypted,</span> <span class=\"string\">password</span> <span class=\"string\">is</span> <span class=\"string\">required</span> <span class=\"string\">to</span> <span class=\"string\">continue</span> <span class=\"string\">reading.</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span> <span class=\"string\">Hey,</span> <span class=\"string\">password</span> <span class=\"string\">is</span> <span class=\"string\">required</span> <span class=\"string\">here.</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">encryptAsDiary</span>, <span class=\"attr\">password:</span> <span class=\"string\">passwordA</span>&#125;</span><br><span class=\"line\">    <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">encryptAsTips</span>, <span class=\"attr\">password:</span> <span class=\"string\">passwordB</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">theme:</span> <span class=\"string\">xray</span>   <span class=\"comment\">#增加主题属性</span></span><br><span class=\"line\">  <span class=\"attr\">wrong_pass_message:</span> <span class=\"string\">Oh,</span> <span class=\"string\">this</span> <span class=\"string\">is</span> <span class=\"string\">an</span> <span class=\"string\">invalid</span> <span class=\"string\">password.</span> <span class=\"string\">Check</span> <span class=\"string\">and</span> <span class=\"string\">try</span> <span class=\"string\">again,</span> <span class=\"string\">please.</span></span><br><span class=\"line\">  <span class=\"attr\">wrong_hash_message:</span> <span class=\"string\">Oh,</span> <span class=\"string\">these</span> <span class=\"string\">decrypted</span> <span class=\"string\">content</span> <span class=\"string\">cannot</span> <span class=\"string\">be</span> <span class=\"string\">verified,</span> <span class=\"string\">but</span> <span class=\"string\">you</span> <span class=\"string\">can</span> <span class=\"string\">still</span> <span class=\"string\">have</span> <span class=\"string\">a</span> <span class=\"string\">look.</span></span><br></pre></td></tr></table></figure>\n\n<p>在博客中增加</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Theme</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2019-12-21 11:54:07</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">A</span> <span class=\"string\">Tag</span> <span class=\"string\">should</span> <span class=\"string\">be</span> <span class=\"string\">encrypted</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">xray</span>   <span class=\"comment\">#主题名称</span></span><br><span class=\"line\"><span class=\"attr\">password:</span> <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<p>至此，完毕！可以参考：<a href=\"https://github.com/D0n9X1n/hexo-blog-encrypt#encrypt-theme\">https://github.com/D0n9X1n/hexo-blog-encrypt#encrypt-theme</a></p>\n","encrypt":true},{"title":"JAVA类加载过程","comments":1,"translate_title":"java-class-loading-process","abbrlink":61691,"date":"2021-07-31T03:04:02.000Z","_content":"\n## 1.类加载机制\nJVM将类描述数据从.class文件中加载到内存，并对数据进行解析、初始化，最终形成被JVM直接使用的Java类型；类从被加载到JVM中开始，到卸载为止，\n整个生命周期包括：**加载、验证、准备、解析、初始化、使用和卸载**7个阶段\n![完整的类加载过程](./classLoad/01.png)\n\n1. 加载\n\n    加载时jvm做了三件事\n    - 1)通过一个类的全限定名获取该类的二进制流\n    - 2)将这个字节流的静态存储结构转化为方法区运行时数据结构\n    - 3)在内存堆中生成一个代表该类的java.lang.class对象，最为该类数据的访问入口\n\n2. 验证\n   \n    验证、准备、解析这三步可以看作是一个连接的过程，将类的字节码连接到JVM的运行黄台之中;  验证是为了确保class文件的字节流中包含的信息符合当前虚拟机的要求，不会威胁到jvm的安全。\n   验证内容如下：\n    - 文件格式的验证： 验证字节流是否符合class文件袋额规范，是否能被当前版本的虚拟机处理\n    - 元数据验证： 对字节码描述的信息进行语义分析，确保符合Java语言规范\n    - 字节码验证：通过数据流和控制流分析，确定寓意是否合法，符合逻辑的\n    - 符号引用验证：这个娇艳在解析阶段发生\n    \n3. 准备\n\n    为类的静态变量分配内存，设置初始值，对于final static修饰的变量，直接赋值为用户的定义值。\n   ```java\n   //准备阶段过后的初始值为0， 而不是7\n    public static int a = 7;\n   ```\n\n4. 解析\n\n    解析是将常量池内的符号引用转化为直接引用（如物理内存地址指针）\n   \n5. 初始化\n   \n    初始化阶段，jvm才开始真正执行类中定义的Java代码\n    - 执行类构造器<clinit>()方法的过程，类构造器方法是有编译器自动手机类中所有类变量的赋值动作和静态语句块（static块）中的语句合并产生的\n    - 当初始化一个类的时候，如果发现其父类还没有进行过初始化，需有限触发其父类的初始化\n    - 虚拟机会保证一个类的<clinit>()方法在多线程环境被正确加锁和同步\n      ![完整的类加载过程2](./classLoad/02.png)\n\n## 2.类加载器\n类加载器的主要任务：对类加载过程中的加载操作（根据一个类的全限定名读取该类的二进制字节流到JVM内部，然后转换为一个对应的java.lang.Class对象实例）\n\n类加载器的分类\n   \n   - 启动类加载器Bootstrap ClassLoader:\n     在HotSpot虚拟机中，Bootstrap ClassLoader用C++语言编写并嵌入JVM内部，主要负载加载JAVA_HOME/lib目录中的所有类，或者加载由选项-Xbootcalsspath指定的路径下的类\n   - 拓展类加载器/ExtClassLoader：\n     ExtClassLoader继承ClassLoader类，负载加载JAVA_HOME/lib/ext目录中的所有类型，或者由参数-Xbootclasspath指定路径中的所有类型\n   - 应用程序类加载器/AppClassLoader: \n     ExtClassLoader继承ClassLoader类，负责加载用户类路径ClassPath下的所有类型，一般情况下为程序的默认类加载器\n   - 自定义加载器: \n     Java虚拟机规范将所有继承抽象类java.lang.ClassLoader的类加载器，定义为自定义类加载器\n     \n     \n## 3. 双亲委派模型\n![双亲委派模型](./classLoad/03.png)\n如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式 。\n- 除了启动类加载器以外，每个类加载器拥有一个父类加载器，用户的自定义类加载器的父类加载器是AppClassLoader；\n- 双亲委派模型可以保证全限名指定的类，只被加载一次；\n- 双亲委派模型不具有强制性约束，是Java设计者推荐的类加载器实现方式；\n\n### 3.1 双亲委派模式优势\n1. 采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次\n2. java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改\n3. 如果我们在classpath路径下自定义一个名为java.lang.SingleInterge类(该类是胡编的)呢？该类并不存在java.lang中，经过双亲委托模式，传递到启动类加载器中，由于父类加载器路径下并没有该类，所以不会加载，将反向委托给子类加载器加载，最终会通过系统类加载器加载该类。但是这样做是不允许，因为java.lang是核心API包，需要访问权限，强制加载将会报出如下异常\n\n### 3.2 双庆委派模型实现源码\n可以打开 java.lang.ClassLoader 类，其 loadClass方法如下：\n```java\nprotected Class<?> loadClass(String name, boolean resolve)\n        throws ClassNotFoundException\n    {\n        synchronized (getClassLoadingLock(name)) {\n            // First, check if the class has already been loaded\n            Class<?> c = findLoadedClass(name);\n            if (c == null) {\n                long t0 = System.nanoTime();\n                try {\n                    if (parent != null) {\n                        c = parent.loadClass(name, false);\n                    } else {\n                        c = findBootstrapClassOrNull(name);\n                    }\n                } catch (ClassNotFoundException e) {\n                    // ClassNotFoundException thrown if class not found\n                    // from the non-null parent class loader\n                }\n\n                if (c == null) {\n                    // If still not found, then invoke findClass in order\n                    // to find the class.\n                    long t1 = System.nanoTime();\n                    c = findClass(name);\n\n                    // this is the defining class loader; record the stats\n                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                    sun.misc.PerfCounter.getFindClasses().increment();\n                }\n            }\n            if (resolve) {\n                resolveClass(c);\n            }\n            return c;\n        }\n    }\n```\n实现方式很简单，首先会检查该类是否已经被加载过了，若加载过了直接返回（默认resolve取false）；若没有被加载，则调用父类加载器的 loadClass方法，若父类加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，则在抛出 ClassNotFoundException 异常后，在调用自己的 findClass 方法进行加载\n\n## 4.自定义类加载器\n1. 加密\n   \n   我们知道Java字节码是可以进行反编译的，在某些安全性高的场景，是不允许这种情况发生的。那么我们可以将编译后的代码用某种加密算法进行加密，加密后的文件就不能再用常规的类加载器去加载类了。而我们自己可以自定义类加载器在加载的时候先解密，然后在加载\n\n2. 动态创建\n\n   比如很有名的动态代理。\n\n3. 从非标准的来源加载代码\n   我们不用非要从class文件中获取定义此类的二进制流，还可以从数据库，从网络中，或者从zip包等。\n\n\n### 4.1 自定义类加载器方法\n   类加载时根据双亲委派模型会先一层层找到父加载器，如果加载失败，则会调用当前加载器的 findClass() 方法来完成加载。因此我们自定义类加载器，有两个步骤：\n   1、继承 ClassLoader\n\n   2、覆写 findClass() 方法","source":"_posts/2021/07/classLoad.md","raw":"---\ntitle: JAVA类加载过程\ntags: ClassLoader\ncategories: java\ncomments: true\ntranslate_title: java-class-loading-process\nabbrlink: 61691\ndate: 2021-07-31 11:04:02\n---\n\n## 1.类加载机制\nJVM将类描述数据从.class文件中加载到内存，并对数据进行解析、初始化，最终形成被JVM直接使用的Java类型；类从被加载到JVM中开始，到卸载为止，\n整个生命周期包括：**加载、验证、准备、解析、初始化、使用和卸载**7个阶段\n![完整的类加载过程](./classLoad/01.png)\n\n1. 加载\n\n    加载时jvm做了三件事\n    - 1)通过一个类的全限定名获取该类的二进制流\n    - 2)将这个字节流的静态存储结构转化为方法区运行时数据结构\n    - 3)在内存堆中生成一个代表该类的java.lang.class对象，最为该类数据的访问入口\n\n2. 验证\n   \n    验证、准备、解析这三步可以看作是一个连接的过程，将类的字节码连接到JVM的运行黄台之中;  验证是为了确保class文件的字节流中包含的信息符合当前虚拟机的要求，不会威胁到jvm的安全。\n   验证内容如下：\n    - 文件格式的验证： 验证字节流是否符合class文件袋额规范，是否能被当前版本的虚拟机处理\n    - 元数据验证： 对字节码描述的信息进行语义分析，确保符合Java语言规范\n    - 字节码验证：通过数据流和控制流分析，确定寓意是否合法，符合逻辑的\n    - 符号引用验证：这个娇艳在解析阶段发生\n    \n3. 准备\n\n    为类的静态变量分配内存，设置初始值，对于final static修饰的变量，直接赋值为用户的定义值。\n   ```java\n   //准备阶段过后的初始值为0， 而不是7\n    public static int a = 7;\n   ```\n\n4. 解析\n\n    解析是将常量池内的符号引用转化为直接引用（如物理内存地址指针）\n   \n5. 初始化\n   \n    初始化阶段，jvm才开始真正执行类中定义的Java代码\n    - 执行类构造器<clinit>()方法的过程，类构造器方法是有编译器自动手机类中所有类变量的赋值动作和静态语句块（static块）中的语句合并产生的\n    - 当初始化一个类的时候，如果发现其父类还没有进行过初始化，需有限触发其父类的初始化\n    - 虚拟机会保证一个类的<clinit>()方法在多线程环境被正确加锁和同步\n      ![完整的类加载过程2](./classLoad/02.png)\n\n## 2.类加载器\n类加载器的主要任务：对类加载过程中的加载操作（根据一个类的全限定名读取该类的二进制字节流到JVM内部，然后转换为一个对应的java.lang.Class对象实例）\n\n类加载器的分类\n   \n   - 启动类加载器Bootstrap ClassLoader:\n     在HotSpot虚拟机中，Bootstrap ClassLoader用C++语言编写并嵌入JVM内部，主要负载加载JAVA_HOME/lib目录中的所有类，或者加载由选项-Xbootcalsspath指定的路径下的类\n   - 拓展类加载器/ExtClassLoader：\n     ExtClassLoader继承ClassLoader类，负载加载JAVA_HOME/lib/ext目录中的所有类型，或者由参数-Xbootclasspath指定路径中的所有类型\n   - 应用程序类加载器/AppClassLoader: \n     ExtClassLoader继承ClassLoader类，负责加载用户类路径ClassPath下的所有类型，一般情况下为程序的默认类加载器\n   - 自定义加载器: \n     Java虚拟机规范将所有继承抽象类java.lang.ClassLoader的类加载器，定义为自定义类加载器\n     \n     \n## 3. 双亲委派模型\n![双亲委派模型](./classLoad/03.png)\n如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式 。\n- 除了启动类加载器以外，每个类加载器拥有一个父类加载器，用户的自定义类加载器的父类加载器是AppClassLoader；\n- 双亲委派模型可以保证全限名指定的类，只被加载一次；\n- 双亲委派模型不具有强制性约束，是Java设计者推荐的类加载器实现方式；\n\n### 3.1 双亲委派模式优势\n1. 采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次\n2. java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改\n3. 如果我们在classpath路径下自定义一个名为java.lang.SingleInterge类(该类是胡编的)呢？该类并不存在java.lang中，经过双亲委托模式，传递到启动类加载器中，由于父类加载器路径下并没有该类，所以不会加载，将反向委托给子类加载器加载，最终会通过系统类加载器加载该类。但是这样做是不允许，因为java.lang是核心API包，需要访问权限，强制加载将会报出如下异常\n\n### 3.2 双庆委派模型实现源码\n可以打开 java.lang.ClassLoader 类，其 loadClass方法如下：\n```java\nprotected Class<?> loadClass(String name, boolean resolve)\n        throws ClassNotFoundException\n    {\n        synchronized (getClassLoadingLock(name)) {\n            // First, check if the class has already been loaded\n            Class<?> c = findLoadedClass(name);\n            if (c == null) {\n                long t0 = System.nanoTime();\n                try {\n                    if (parent != null) {\n                        c = parent.loadClass(name, false);\n                    } else {\n                        c = findBootstrapClassOrNull(name);\n                    }\n                } catch (ClassNotFoundException e) {\n                    // ClassNotFoundException thrown if class not found\n                    // from the non-null parent class loader\n                }\n\n                if (c == null) {\n                    // If still not found, then invoke findClass in order\n                    // to find the class.\n                    long t1 = System.nanoTime();\n                    c = findClass(name);\n\n                    // this is the defining class loader; record the stats\n                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                    sun.misc.PerfCounter.getFindClasses().increment();\n                }\n            }\n            if (resolve) {\n                resolveClass(c);\n            }\n            return c;\n        }\n    }\n```\n实现方式很简单，首先会检查该类是否已经被加载过了，若加载过了直接返回（默认resolve取false）；若没有被加载，则调用父类加载器的 loadClass方法，若父类加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，则在抛出 ClassNotFoundException 异常后，在调用自己的 findClass 方法进行加载\n\n## 4.自定义类加载器\n1. 加密\n   \n   我们知道Java字节码是可以进行反编译的，在某些安全性高的场景，是不允许这种情况发生的。那么我们可以将编译后的代码用某种加密算法进行加密，加密后的文件就不能再用常规的类加载器去加载类了。而我们自己可以自定义类加载器在加载的时候先解密，然后在加载\n\n2. 动态创建\n\n   比如很有名的动态代理。\n\n3. 从非标准的来源加载代码\n   我们不用非要从class文件中获取定义此类的二进制流，还可以从数据库，从网络中，或者从zip包等。\n\n\n### 4.1 自定义类加载器方法\n   类加载时根据双亲委派模型会先一层层找到父加载器，如果加载失败，则会调用当前加载器的 findClass() 方法来完成加载。因此我们自定义类加载器，有两个步骤：\n   1、继承 ClassLoader\n\n   2、覆写 findClass() 方法","slug":"classLoad","published":1,"updated":"2022-03-27T14:06:03.354Z","layout":"post","photos":[],"link":"","_id":"cl424hx5m001vad5iazlze5nw","content":"<h2 id=\"1-类加载机制\"><a href=\"#1-类加载机制\" class=\"headerlink\" title=\"1.类加载机制\"></a>1.类加载机制</h2><p>JVM将类描述数据从.class文件中加载到内存，并对数据进行解析、初始化，最终形成被JVM直接使用的Java类型；类从被加载到JVM中开始，到卸载为止，<br>整个生命周期包括：<strong>加载、验证、准备、解析、初始化、使用和卸载</strong>7个阶段<br><img src=\"/classLoad/01.png\" alt=\"完整的类加载过程\"></p>\n<ol>\n<li><p>加载</p>\n<p> 加载时jvm做了三件事</p>\n<ul>\n<li>1)通过一个类的全限定名获取该类的二进制流</li>\n<li>2)将这个字节流的静态存储结构转化为方法区运行时数据结构</li>\n<li>3)在内存堆中生成一个代表该类的java.lang.class对象，最为该类数据的访问入口</li>\n</ul>\n</li>\n<li><p>验证</p>\n<p> 验证、准备、解析这三步可以看作是一个连接的过程，将类的字节码连接到JVM的运行黄台之中;  验证是为了确保class文件的字节流中包含的信息符合当前虚拟机的要求，不会威胁到jvm的安全。<br>验证内容如下：</p>\n<ul>\n<li>文件格式的验证： 验证字节流是否符合class文件袋额规范，是否能被当前版本的虚拟机处理</li>\n<li>元数据验证： 对字节码描述的信息进行语义分析，确保符合Java语言规范</li>\n<li>字节码验证：通过数据流和控制流分析，确定寓意是否合法，符合逻辑的</li>\n<li>符号引用验证：这个娇艳在解析阶段发生</li>\n</ul>\n</li>\n<li><p>准备</p>\n<p> 为类的静态变量分配内存，设置初始值，对于final static修饰的变量，直接赋值为用户的定义值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//准备阶段过后的初始值为0， 而不是7</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>解析</p>\n<p> 解析是将常量池内的符号引用转化为直接引用（如物理内存地址指针）</p>\n</li>\n<li><p>初始化</p>\n<p> 初始化阶段，jvm才开始真正执行类中定义的Java代码</p>\n<ul>\n<li>执行类构造器<clinit>()方法的过程，类构造器方法是有编译器自动手机类中所有类变量的赋值动作和静态语句块（static块）中的语句合并产生的</clinit></li>\n<li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，需有限触发其父类的初始化</li>\n<li>虚拟机会保证一个类的<clinit>()方法在多线程环境被正确加锁和同步<br><img src=\"/classLoad/02.png\" alt=\"完整的类加载过程2\"></clinit></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-类加载器\"><a href=\"#2-类加载器\" class=\"headerlink\" title=\"2.类加载器\"></a>2.类加载器</h2><p>类加载器的主要任务：对类加载过程中的加载操作（根据一个类的全限定名读取该类的二进制字节流到JVM内部，然后转换为一个对应的java.lang.Class对象实例）</p>\n<p>类加载器的分类</p>\n<ul>\n<li>启动类加载器Bootstrap ClassLoader:<br>在HotSpot虚拟机中，Bootstrap ClassLoader用C++语言编写并嵌入JVM内部，主要负载加载JAVA_HOME/lib目录中的所有类，或者加载由选项-Xbootcalsspath指定的路径下的类</li>\n<li>拓展类加载器/ExtClassLoader：<br>ExtClassLoader继承ClassLoader类，负载加载JAVA_HOME/lib/ext目录中的所有类型，或者由参数-Xbootclasspath指定路径中的所有类型</li>\n<li>应用程序类加载器/AppClassLoader:<br>ExtClassLoader继承ClassLoader类，负责加载用户类路径ClassPath下的所有类型，一般情况下为程序的默认类加载器</li>\n<li>自定义加载器:<br>Java虚拟机规范将所有继承抽象类java.lang.ClassLoader的类加载器，定义为自定义类加载器</li>\n</ul>\n<h2 id=\"3-双亲委派模型\"><a href=\"#3-双亲委派模型\" class=\"headerlink\" title=\"3. 双亲委派模型\"></a>3. 双亲委派模型</h2><p><img src=\"/classLoad/03.png\" alt=\"双亲委派模型\"><br>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式 。</p>\n<ul>\n<li>除了启动类加载器以外，每个类加载器拥有一个父类加载器，用户的自定义类加载器的父类加载器是AppClassLoader；</li>\n<li>双亲委派模型可以保证全限名指定的类，只被加载一次；</li>\n<li>双亲委派模型不具有强制性约束，是Java设计者推荐的类加载器实现方式；</li>\n</ul>\n<h3 id=\"3-1-双亲委派模式优势\"><a href=\"#3-1-双亲委派模式优势\" class=\"headerlink\" title=\"3.1 双亲委派模式优势\"></a>3.1 双亲委派模式优势</h3><ol>\n<li>采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次</li>\n<li>java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改</li>\n<li>如果我们在classpath路径下自定义一个名为java.lang.SingleInterge类(该类是胡编的)呢？该类并不存在java.lang中，经过双亲委托模式，传递到启动类加载器中，由于父类加载器路径下并没有该类，所以不会加载，将反向委托给子类加载器加载，最终会通过系统类加载器加载该类。但是这样做是不允许，因为java.lang是核心API包，需要访问权限，强制加载将会报出如下异常</li>\n</ol>\n<h3 id=\"3-2-双庆委派模型实现源码\"><a href=\"#3-2-双庆委派模型实现源码\" class=\"headerlink\" title=\"3.2 双庆委派模型实现源码\"></a>3.2 双庆委派模型实现源码</h3><p>可以打开 java.lang.ClassLoader 类，其 loadClass方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"keyword\">boolean</span> resolve)</span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> t0 = System.nanoTime();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        c = parent.loadClass(name, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></span><br><span class=\"line\">                    <span class=\"comment\">// from the non-null parent class loader</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If still not found, then invoke findClass in order</span></span><br><span class=\"line\">                    <span class=\"comment\">// to find the class.</span></span><br><span class=\"line\">                    <span class=\"keyword\">long</span> t1 = System.nanoTime();</span><br><span class=\"line\">                    c = findClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// this is the defining class loader; record the stats</span></span><br><span class=\"line\">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">                resolveClass(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>实现方式很简单，首先会检查该类是否已经被加载过了，若加载过了直接返回（默认resolve取false）；若没有被加载，则调用父类加载器的 loadClass方法，若父类加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，则在抛出 ClassNotFoundException 异常后，在调用自己的 findClass 方法进行加载</p>\n<h2 id=\"4-自定义类加载器\"><a href=\"#4-自定义类加载器\" class=\"headerlink\" title=\"4.自定义类加载器\"></a>4.自定义类加载器</h2><ol>\n<li><p>加密</p>\n<p>我们知道Java字节码是可以进行反编译的，在某些安全性高的场景，是不允许这种情况发生的。那么我们可以将编译后的代码用某种加密算法进行加密，加密后的文件就不能再用常规的类加载器去加载类了。而我们自己可以自定义类加载器在加载的时候先解密，然后在加载</p>\n</li>\n<li><p>动态创建</p>\n<p>比如很有名的动态代理。</p>\n</li>\n<li><p>从非标准的来源加载代码<br>我们不用非要从class文件中获取定义此类的二进制流，还可以从数据库，从网络中，或者从zip包等。</p>\n</li>\n</ol>\n<h3 id=\"4-1-自定义类加载器方法\"><a href=\"#4-1-自定义类加载器方法\" class=\"headerlink\" title=\"4.1 自定义类加载器方法\"></a>4.1 自定义类加载器方法</h3><p>   类加载时根据双亲委派模型会先一层层找到父加载器，如果加载失败，则会调用当前加载器的 findClass() 方法来完成加载。因此我们自定义类加载器，有两个步骤：<br>   1、继承 ClassLoader</p>\n<p>   2、覆写 findClass() 方法</p>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h2 id=\"1-类加载机制\"><a href=\"#1-类加载机制\" class=\"headerlink\" title=\"1.类加载机制\"></a>1.类加载机制</h2><p>JVM将类描述数据从.class文件中加载到内存，并对数据进行解析、初始化，最终形成被JVM直接使用的Java类型；类从被加载到JVM中开始，到卸载为止，<br>整个生命周期包括：<strong>加载、验证、准备、解析、初始化、使用和卸载</strong>7个阶段<br><img src=\"/classLoad/01.png\" alt=\"完整的类加载过程\"></p>\n<ol>\n<li><p>加载</p>\n<p> 加载时jvm做了三件事</p>\n<ul>\n<li>1)通过一个类的全限定名获取该类的二进制流</li>\n<li>2)将这个字节流的静态存储结构转化为方法区运行时数据结构</li>\n<li>3)在内存堆中生成一个代表该类的java.lang.class对象，最为该类数据的访问入口</li>\n</ul>\n</li>\n<li><p>验证</p>\n<p> 验证、准备、解析这三步可以看作是一个连接的过程，将类的字节码连接到JVM的运行黄台之中;  验证是为了确保class文件的字节流中包含的信息符合当前虚拟机的要求，不会威胁到jvm的安全。<br>验证内容如下：</p>\n<ul>\n<li>文件格式的验证： 验证字节流是否符合class文件袋额规范，是否能被当前版本的虚拟机处理</li>\n<li>元数据验证： 对字节码描述的信息进行语义分析，确保符合Java语言规范</li>\n<li>字节码验证：通过数据流和控制流分析，确定寓意是否合法，符合逻辑的</li>\n<li>符号引用验证：这个娇艳在解析阶段发生</li>\n</ul>\n</li>\n<li><p>准备</p>\n<p> 为类的静态变量分配内存，设置初始值，对于final static修饰的变量，直接赋值为用户的定义值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//准备阶段过后的初始值为0， 而不是7</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>解析</p>\n<p> 解析是将常量池内的符号引用转化为直接引用（如物理内存地址指针）</p>\n</li>\n<li><p>初始化</p>\n<p> 初始化阶段，jvm才开始真正执行类中定义的Java代码</p>\n<ul>\n<li>执行类构造器<clinit>()方法的过程，类构造器方法是有编译器自动手机类中所有类变量的赋值动作和静态语句块（static块）中的语句合并产生的</clinit></li>\n<li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，需有限触发其父类的初始化</li>\n<li>虚拟机会保证一个类的<clinit>()方法在多线程环境被正确加锁和同步<br><img src=\"/classLoad/02.png\" alt=\"完整的类加载过程2\"></clinit></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-类加载器\"><a href=\"#2-类加载器\" class=\"headerlink\" title=\"2.类加载器\"></a>2.类加载器</h2><p>类加载器的主要任务：对类加载过程中的加载操作（根据一个类的全限定名读取该类的二进制字节流到JVM内部，然后转换为一个对应的java.lang.Class对象实例）</p>\n<p>类加载器的分类</p>\n<ul>\n<li>启动类加载器Bootstrap ClassLoader:<br>在HotSpot虚拟机中，Bootstrap ClassLoader用C++语言编写并嵌入JVM内部，主要负载加载JAVA_HOME/lib目录中的所有类，或者加载由选项-Xbootcalsspath指定的路径下的类</li>\n<li>拓展类加载器/ExtClassLoader：<br>ExtClassLoader继承ClassLoader类，负载加载JAVA_HOME/lib/ext目录中的所有类型，或者由参数-Xbootclasspath指定路径中的所有类型</li>\n<li>应用程序类加载器/AppClassLoader:<br>ExtClassLoader继承ClassLoader类，负责加载用户类路径ClassPath下的所有类型，一般情况下为程序的默认类加载器</li>\n<li>自定义加载器:<br>Java虚拟机规范将所有继承抽象类java.lang.ClassLoader的类加载器，定义为自定义类加载器</li>\n</ul>\n<h2 id=\"3-双亲委派模型\"><a href=\"#3-双亲委派模型\" class=\"headerlink\" title=\"3. 双亲委派模型\"></a>3. 双亲委派模型</h2><p><img src=\"/classLoad/03.png\" alt=\"双亲委派模型\"><br>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式 。</p>\n<ul>\n<li>除了启动类加载器以外，每个类加载器拥有一个父类加载器，用户的自定义类加载器的父类加载器是AppClassLoader；</li>\n<li>双亲委派模型可以保证全限名指定的类，只被加载一次；</li>\n<li>双亲委派模型不具有强制性约束，是Java设计者推荐的类加载器实现方式；</li>\n</ul>\n<h3 id=\"3-1-双亲委派模式优势\"><a href=\"#3-1-双亲委派模式优势\" class=\"headerlink\" title=\"3.1 双亲委派模式优势\"></a>3.1 双亲委派模式优势</h3><ol>\n<li>采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次</li>\n<li>java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改</li>\n<li>如果我们在classpath路径下自定义一个名为java.lang.SingleInterge类(该类是胡编的)呢？该类并不存在java.lang中，经过双亲委托模式，传递到启动类加载器中，由于父类加载器路径下并没有该类，所以不会加载，将反向委托给子类加载器加载，最终会通过系统类加载器加载该类。但是这样做是不允许，因为java.lang是核心API包，需要访问权限，强制加载将会报出如下异常</li>\n</ol>\n<h3 id=\"3-2-双庆委派模型实现源码\"><a href=\"#3-2-双庆委派模型实现源码\" class=\"headerlink\" title=\"3.2 双庆委派模型实现源码\"></a>3.2 双庆委派模型实现源码</h3><p>可以打开 java.lang.ClassLoader 类，其 loadClass方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"keyword\">boolean</span> resolve)</span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> t0 = System.nanoTime();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        c = parent.loadClass(name, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></span><br><span class=\"line\">                    <span class=\"comment\">// from the non-null parent class loader</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If still not found, then invoke findClass in order</span></span><br><span class=\"line\">                    <span class=\"comment\">// to find the class.</span></span><br><span class=\"line\">                    <span class=\"keyword\">long</span> t1 = System.nanoTime();</span><br><span class=\"line\">                    c = findClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// this is the defining class loader; record the stats</span></span><br><span class=\"line\">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">                resolveClass(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>实现方式很简单，首先会检查该类是否已经被加载过了，若加载过了直接返回（默认resolve取false）；若没有被加载，则调用父类加载器的 loadClass方法，若父类加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，则在抛出 ClassNotFoundException 异常后，在调用自己的 findClass 方法进行加载</p>\n<h2 id=\"4-自定义类加载器\"><a href=\"#4-自定义类加载器\" class=\"headerlink\" title=\"4.自定义类加载器\"></a>4.自定义类加载器</h2><ol>\n<li><p>加密</p>\n<p>我们知道Java字节码是可以进行反编译的，在某些安全性高的场景，是不允许这种情况发生的。那么我们可以将编译后的代码用某种加密算法进行加密，加密后的文件就不能再用常规的类加载器去加载类了。而我们自己可以自定义类加载器在加载的时候先解密，然后在加载</p>\n</li>\n<li><p>动态创建</p>\n<p>比如很有名的动态代理。</p>\n</li>\n<li><p>从非标准的来源加载代码<br>我们不用非要从class文件中获取定义此类的二进制流，还可以从数据库，从网络中，或者从zip包等。</p>\n</li>\n</ol>\n<h3 id=\"4-1-自定义类加载器方法\"><a href=\"#4-1-自定义类加载器方法\" class=\"headerlink\" title=\"4.1 自定义类加载器方法\"></a>4.1 自定义类加载器方法</h3><p>   类加载时根据双亲委派模型会先一层层找到父加载器，如果加载失败，则会调用当前加载器的 findClass() 方法来完成加载。因此我们自定义类加载器，有两个步骤：<br>   1、继承 ClassLoader</p>\n<p>   2、覆写 findClass() 方法</p>\n"},{"title":"Hexo部署出现错误Error Spawn failed解决方式","comments":1,"translate_title":"error-spawn-failed","abbrlink":12688,"date":"2021-08-15T10:28:42.000Z","_content":"\n部署过程中可能会出现错误:\n```text\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\nremote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.\nfatal: unable to access 'https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git/': The requested URL returned error: 403\nFATAL {\n  err: Error: Spawn failed\n      at ChildProcess.<anonymous> (/Users/xiaoyuge/workspace/mybolg/node_modules/hexo-util/lib/spawn.js:51:21)\n      at ChildProcess.emit (events.js:315:20)\n      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) {\n    code: 128\n  }\n} Something's wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html\nxiaoyuge@xiaoyugedeMacBook-Pro mybolg % hexo clean\n```\n####解决方式一：\n```shell\n##进入站点根目录\ncd cd /Users/xiaoyuge/workspace/mybolg\n\n##删除git提交内容文件夹\nrm -rf .deploy_git/\n\n##执行\ngit config --global core.autocrlf false\n\n##最后\nhexo clean && hexo g && hexo d\n```\n####解决方式二：\n有可能是你的git repo配置地址不正确,可以将http方式变更为ssh方式（我的就是这个问题）\ngithub在2021-08-13正式启用personal access token后，原来的用户名+密码方式部署会报错，需要采用最新的token登录方式进行部署 。\n具体方式参考：https://cloud.tencent.com/developer/article/1861466\n```text\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\n```\n查看_config.yml文件，\n```yaml\ndeploy:\n  type: git\n  #repo:https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git  这是原来的路径，现在改成了下面这种\n  repo: git@github.com:xiaoyuge5201/xiaoyuge5201.github.io.git\n  branch: master\n```","source":"_posts/2021/07/hexo-spawn-failed.md","raw":"---\ntitle: Hexo部署出现错误Error Spawn failed解决方式\ntags: hexo\ncomments: true\ncategories: hexo\ntranslate_title: error-spawn-failed\nabbrlink: 12688\ndate: 2021-08-15 18:28:42\n---\n\n部署过程中可能会出现错误:\n```text\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\nremote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.\nfatal: unable to access 'https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git/': The requested URL returned error: 403\nFATAL {\n  err: Error: Spawn failed\n      at ChildProcess.<anonymous> (/Users/xiaoyuge/workspace/mybolg/node_modules/hexo-util/lib/spawn.js:51:21)\n      at ChildProcess.emit (events.js:315:20)\n      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) {\n    code: 128\n  }\n} Something's wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html\nxiaoyuge@xiaoyugedeMacBook-Pro mybolg % hexo clean\n```\n####解决方式一：\n```shell\n##进入站点根目录\ncd cd /Users/xiaoyuge/workspace/mybolg\n\n##删除git提交内容文件夹\nrm -rf .deploy_git/\n\n##执行\ngit config --global core.autocrlf false\n\n##最后\nhexo clean && hexo g && hexo d\n```\n####解决方式二：\n有可能是你的git repo配置地址不正确,可以将http方式变更为ssh方式（我的就是这个问题）\ngithub在2021-08-13正式启用personal access token后，原来的用户名+密码方式部署会报错，需要采用最新的token登录方式进行部署 。\n具体方式参考：https://cloud.tencent.com/developer/article/1861466\n```text\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\n```\n查看_config.yml文件，\n```yaml\ndeploy:\n  type: git\n  #repo:https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git  这是原来的路径，现在改成了下面这种\n  repo: git@github.com:xiaoyuge5201/xiaoyuge5201.github.io.git\n  branch: master\n```","slug":"hexo-spawn-failed","published":1,"updated":"2022-05-05T01:29:32.331Z","layout":"post","photos":[],"link":"","_id":"cl424hx5n001yad5i2kl2gcmx","content":"<p>部署过程中可能会出现错误:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br><span class=\"line\">remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.</span><br><span class=\"line\">fatal: unable to access &#x27;https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git/&#x27;: The requested URL returned error: 403</span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  err: Error: Spawn failed</span><br><span class=\"line\">      at ChildProcess.&lt;anonymous&gt; (/Users/xiaoyuge/workspace/mybolg/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class=\"line\">      at ChildProcess.emit (events.js:315:20)</span><br><span class=\"line\">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class=\"line\">    code: 128</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class=\"line\">xiaoyuge@xiaoyugedeMacBook-Pro mybolg % hexo clean</span><br></pre></td></tr></table></figure>\n<p>####解决方式一：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#进入站点根目录</span></span></span><br><span class=\"line\">cd cd /Users/xiaoyuge/workspace/mybolg</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#删除git提交内容文件夹</span></span></span><br><span class=\"line\">rm -rf .deploy_git/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#执行</span></span></span><br><span class=\"line\">git config --global core.autocrlf false</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#最后</span></span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n<p>####解决方式二：<br>有可能是你的git repo配置地址不正确,可以将http方式变更为ssh方式（我的就是这个问题）<br>github在2021-08-13正式启用personal access token后，原来的用户名+密码方式部署会报错，需要采用最新的token登录方式进行部署 。<br>具体方式参考：<a href=\"https://cloud.tencent.com/developer/article/1861466\">https://cloud.tencent.com/developer/article/1861466</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br></pre></td></tr></table></figure>\n<p>查看_config.yml文件，</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"comment\">#repo:https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git  这是原来的路径，现在改成了下面这种</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:xiaoyuge5201/xiaoyuge5201.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>部署过程中可能会出现错误:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br><span class=\"line\">remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.</span><br><span class=\"line\">fatal: unable to access &#x27;https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git/&#x27;: The requested URL returned error: 403</span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  err: Error: Spawn failed</span><br><span class=\"line\">      at ChildProcess.&lt;anonymous&gt; (/Users/xiaoyuge/workspace/mybolg/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class=\"line\">      at ChildProcess.emit (events.js:315:20)</span><br><span class=\"line\">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class=\"line\">    code: 128</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class=\"line\">xiaoyuge@xiaoyugedeMacBook-Pro mybolg % hexo clean</span><br></pre></td></tr></table></figure>\n<p>####解决方式一：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#进入站点根目录</span></span></span><br><span class=\"line\">cd cd /Users/xiaoyuge/workspace/mybolg</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#删除git提交内容文件夹</span></span></span><br><span class=\"line\">rm -rf .deploy_git/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#执行</span></span></span><br><span class=\"line\">git config --global core.autocrlf false</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#最后</span></span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n<p>####解决方式二：<br>有可能是你的git repo配置地址不正确,可以将http方式变更为ssh方式（我的就是这个问题）<br>github在2021-08-13正式启用personal access token后，原来的用户名+密码方式部署会报错，需要采用最新的token登录方式进行部署 。<br>具体方式参考：<a href=\"https://cloud.tencent.com/developer/article/1861466\">https://cloud.tencent.com/developer/article/1861466</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br></pre></td></tr></table></figure>\n<p>查看_config.yml文件，</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"comment\">#repo:https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git  这是原来的路径，现在改成了下面这种</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:xiaoyuge5201/xiaoyuge5201.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>"},{"title":"面试常见的趣味题","comments":1,"abbrlink":16635,"date":"2021-06-14T02:09:15.000Z","translate_title":"interesting-questions-in-interview","_content":"### 8升、5升、3升水桶各一个,如何分成两个4升\n![分成两个4升](./interest/3_5_8.png)\n\n### 以面向对象的思想设计长方形和正方形\n- 方式1：设计接口，然后长方形和正方形各自实现这个接口\n```java\n//形状类：结算面积和周长\npublic interface Shape {\n\tpublic double area();\n\tpublic double perimeter();\n}\n```\n```java\n//长方形：实现接口并实现方法\npublic class Rectangle implements Shape {\n\tprivate double width;\n\tprivate double height;\n\tpublic Rectangle(double width,double height){\n\t\tthis.width=width;\n\t\tthis.height=height;\n\t}\t\n\t@Override\n\tpublic double area() {\n\t\treturn this.width*this.height;\n\t}\n\t@Override\n\tpublic double perimeter() {\n\t\treturn 2*(this.width+this.height);\n\t}\n}\n```\n```java\n//正方形：实现接口并实现方法\npublic class Square implements Shape {\n\tprivate double side;\n\tpublic Square(double side){\n\t\tthis.side=side;\n\t}\n\t@Override\n\tpublic double area() {\n\t\treturn side*side;\n\t}\n \n\t@Override\n\tpublic double perimeter() {\n\t\treturn 4*side;\n\t}\n}\n```\n- 方式2：使用extents\n因为正方形 **is a** 长方形，所以可以使用继承来设计正方形，然后在构造函数中使用super函数；\n  \n```java\npublic class Square extends Rectangle{\n\tprivate double side;\n\tpublic Square(double side){\n\t\tsuper(side,side);\n\t\tthis.side=side;\n\t}\n\tpublic static void main(String[] args) {\n\t\tSquare s=new Square(2.5);\n\t\tSystem.out.println(s.perimeter());\n\t\tSystem.out.println(s.area());\n\t}\n}\n```\n\n### java使用递归计算1+2+3+...+n之间的和\n```java\npublic class SumNumber {\n\n    public static void main(String[] args) {\n        System.out.println(sumN(10));\n    }\n\n    //使用递归的方法计算1+2+3+4+....n的和; 切记注意n不能小于1\n    public static int sumN(int n) {\n        if (n == 1){\n            return 1;\n        }\n        return n+ sumN(n-1);\n    }\n}\n```\n\n### java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数\n文件文章中存在,.以及空格\n- 读取文件内容\n- 对文件进行内容匹配\n- 使用map 保存单词、次数\n- map排序\n- 输出\n```java\npublic class WordCount {\n\n    public static void main(String[] args) {\n        try {\n            //1. 使用流读取文件\n            BufferedReader reader = new BufferedReader(new FileReader(\"d:/n.txt\"));\n            StringBuffer sb = new StringBuffer();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n            reader.close();\n            //替换所有的英文逗号和句号\n            String temp = sb.toString().replaceAll(\"/[\\\\w\\\\,\\\\.]+/\", \"\");\n            //2.使用正则表达式匹配\n            Pattern pattern = Pattern.compile(\"/[a-zA-Z\\\\w\\\\,\\\\.]+/\");\n            Matcher matcher = pattern.matcher(temp);\n            Map<String, Integer> map = new HashMap<>(16);\n            String word;\n            int count;\n            while (matcher.find()) {\n                word = matcher.group();\n                if (map.containsKey(word)) {\n                    count = map.get(word);\n                    map.put(word, count + 1);\n                } else {\n                    map.put(word, 1);\n                }\n            }\n            //将map的数据根据count排序；\n            List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());\n            Collections.sort(list, Comparator.comparing(Map.Entry::getValue));\n            int last = list.size() - 1;\n            for (int i = last; i > last - 5; i--) {\n                System.out.println(\"key=\" + list.get(i).getKey() + \" value=\" + list.get(i).getValue());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### java 获取字符串第一次出现重复的字符\n```java\npublic static int findDuplicate(String str){\n    char[] chars = str.toCharArray();\n    Set<Character> uniqueChars = new HashSet(chars.length,1);\n    for (int i = 0; i < chars.length; i++) {\n        if (!uniqueChars.add(chars[i])){\n            return i;\n        }\n    }\n    return -1;\n}\n```\n\n\n","source":"_posts/2021/07/interest.md","raw":"---\ntitle: 面试常见的趣味题\ntags: algorithm\ncomments: true\ncategories: 算法\nabbrlink: 16635\ndate: 2021-06-14 10:09:15\ntranslate_title: interesting-questions-in-interview\n---\n### 8升、5升、3升水桶各一个,如何分成两个4升\n![分成两个4升](./interest/3_5_8.png)\n\n### 以面向对象的思想设计长方形和正方形\n- 方式1：设计接口，然后长方形和正方形各自实现这个接口\n```java\n//形状类：结算面积和周长\npublic interface Shape {\n\tpublic double area();\n\tpublic double perimeter();\n}\n```\n```java\n//长方形：实现接口并实现方法\npublic class Rectangle implements Shape {\n\tprivate double width;\n\tprivate double height;\n\tpublic Rectangle(double width,double height){\n\t\tthis.width=width;\n\t\tthis.height=height;\n\t}\t\n\t@Override\n\tpublic double area() {\n\t\treturn this.width*this.height;\n\t}\n\t@Override\n\tpublic double perimeter() {\n\t\treturn 2*(this.width+this.height);\n\t}\n}\n```\n```java\n//正方形：实现接口并实现方法\npublic class Square implements Shape {\n\tprivate double side;\n\tpublic Square(double side){\n\t\tthis.side=side;\n\t}\n\t@Override\n\tpublic double area() {\n\t\treturn side*side;\n\t}\n \n\t@Override\n\tpublic double perimeter() {\n\t\treturn 4*side;\n\t}\n}\n```\n- 方式2：使用extents\n因为正方形 **is a** 长方形，所以可以使用继承来设计正方形，然后在构造函数中使用super函数；\n  \n```java\npublic class Square extends Rectangle{\n\tprivate double side;\n\tpublic Square(double side){\n\t\tsuper(side,side);\n\t\tthis.side=side;\n\t}\n\tpublic static void main(String[] args) {\n\t\tSquare s=new Square(2.5);\n\t\tSystem.out.println(s.perimeter());\n\t\tSystem.out.println(s.area());\n\t}\n}\n```\n\n### java使用递归计算1+2+3+...+n之间的和\n```java\npublic class SumNumber {\n\n    public static void main(String[] args) {\n        System.out.println(sumN(10));\n    }\n\n    //使用递归的方法计算1+2+3+4+....n的和; 切记注意n不能小于1\n    public static int sumN(int n) {\n        if (n == 1){\n            return 1;\n        }\n        return n+ sumN(n-1);\n    }\n}\n```\n\n### java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数\n文件文章中存在,.以及空格\n- 读取文件内容\n- 对文件进行内容匹配\n- 使用map 保存单词、次数\n- map排序\n- 输出\n```java\npublic class WordCount {\n\n    public static void main(String[] args) {\n        try {\n            //1. 使用流读取文件\n            BufferedReader reader = new BufferedReader(new FileReader(\"d:/n.txt\"));\n            StringBuffer sb = new StringBuffer();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n            reader.close();\n            //替换所有的英文逗号和句号\n            String temp = sb.toString().replaceAll(\"/[\\\\w\\\\,\\\\.]+/\", \"\");\n            //2.使用正则表达式匹配\n            Pattern pattern = Pattern.compile(\"/[a-zA-Z\\\\w\\\\,\\\\.]+/\");\n            Matcher matcher = pattern.matcher(temp);\n            Map<String, Integer> map = new HashMap<>(16);\n            String word;\n            int count;\n            while (matcher.find()) {\n                word = matcher.group();\n                if (map.containsKey(word)) {\n                    count = map.get(word);\n                    map.put(word, count + 1);\n                } else {\n                    map.put(word, 1);\n                }\n            }\n            //将map的数据根据count排序；\n            List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());\n            Collections.sort(list, Comparator.comparing(Map.Entry::getValue));\n            int last = list.size() - 1;\n            for (int i = last; i > last - 5; i--) {\n                System.out.println(\"key=\" + list.get(i).getKey() + \" value=\" + list.get(i).getValue());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### java 获取字符串第一次出现重复的字符\n```java\npublic static int findDuplicate(String str){\n    char[] chars = str.toCharArray();\n    Set<Character> uniqueChars = new HashSet(chars.length,1);\n    for (int i = 0; i < chars.length; i++) {\n        if (!uniqueChars.add(chars[i])){\n            return i;\n        }\n    }\n    return -1;\n}\n```\n\n\n","slug":"interest","published":1,"updated":"2022-03-27T14:06:03.392Z","layout":"post","photos":[],"link":"","_id":"cl424hx5o0021ad5ifvgvf93z","content":"<h3 id=\"8升、5升、3升水桶各一个-如何分成两个4升\"><a href=\"#8升、5升、3升水桶各一个-如何分成两个4升\" class=\"headerlink\" title=\"8升、5升、3升水桶各一个,如何分成两个4升\"></a>8升、5升、3升水桶各一个,如何分成两个4升</h3><p><img src=\"/interest/3_5_8.png\" alt=\"分成两个4升\"></p>\n<h3 id=\"以面向对象的思想设计长方形和正方形\"><a href=\"#以面向对象的思想设计长方形和正方形\" class=\"headerlink\" title=\"以面向对象的思想设计长方形和正方形\"></a>以面向对象的思想设计长方形和正方形</h3><ul>\n<li>方式1：设计接口，然后长方形和正方形各自实现这个接口<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//形状类：结算面积和周长</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">perimeter</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//长方形：实现接口并实现方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> width;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> height;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Rectangle</span><span class=\"params\">(<span class=\"keyword\">double</span> width,<span class=\"keyword\">double</span> height)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.width=width;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.height=height;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width*<span class=\"keyword\">this</span>.height;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">perimeter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">2</span>*(<span class=\"keyword\">this</span>.width+<span class=\"keyword\">this</span>.height);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正方形：实现接口并实现方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> side;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> side)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.side=side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> side*side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">perimeter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">4</span>*side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>方式2：使用extents<br>因为正方形 <strong>is a</strong> 长方形，所以可以使用继承来设计正方形，然后在构造函数中使用super函数；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Rectangle</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> side;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> side)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(side,side);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.side=side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSquare s=<span class=\"keyword\">new</span> Square(<span class=\"number\">2.5</span>);</span><br><span class=\"line\">\t\tSystem.out.println(s.perimeter());</span><br><span class=\"line\">\t\tSystem.out.println(s.area());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"java使用递归计算1-2-3-…-n之间的和\"><a href=\"#java使用递归计算1-2-3-…-n之间的和\" class=\"headerlink\" title=\"java使用递归计算1+2+3+…+n之间的和\"></a>java使用递归计算1+2+3+…+n之间的和</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SumNumber</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(sumN(<span class=\"number\">10</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用递归的方法计算1+2+3+4+....n的和; 切记注意n不能小于1</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sumN</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n+ sumN(n-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数\"><a href=\"#java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数\" class=\"headerlink\" title=\"java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数\"></a>java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数</h3><p>文件文章中存在,.以及空格</p>\n<ul>\n<li>读取文件内容</li>\n<li>对文件进行内容匹配</li>\n<li>使用map 保存单词、次数</li>\n<li>map排序</li>\n<li>输出<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordCount</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//1. 使用流读取文件</span></span><br><span class=\"line\">            BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">&quot;d:/n.txt&quot;</span>));</span><br><span class=\"line\">            StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((line = reader.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                sb.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            reader.close();</span><br><span class=\"line\">            <span class=\"comment\">//替换所有的英文逗号和句号</span></span><br><span class=\"line\">            String temp = sb.toString().replaceAll(<span class=\"string\">&quot;/[\\\\w\\\\,\\\\.]+/&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//2.使用正则表达式匹配</span></span><br><span class=\"line\">            Pattern pattern = Pattern.compile(<span class=\"string\">&quot;/[a-zA-Z\\\\w\\\\,\\\\.]+/&quot;</span>);</span><br><span class=\"line\">            Matcher matcher = pattern.matcher(temp);</span><br><span class=\"line\">            Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">            String word;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (matcher.find()) &#123;</span><br><span class=\"line\">                word = matcher.group();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (map.containsKey(word)) &#123;</span><br><span class=\"line\">                    count = map.get(word);</span><br><span class=\"line\">                    map.put(word, count + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    map.put(word, <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//将map的数据根据count排序；</span></span><br><span class=\"line\">            List&lt;Map.Entry&lt;String, Integer&gt;&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(map.entrySet());</span><br><span class=\"line\">            Collections.sort(list, Comparator.comparing(Map.Entry::getValue));</span><br><span class=\"line\">            <span class=\"keyword\">int</span> last = list.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = last; i &gt; last - <span class=\"number\">5</span>; i--) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;key=&quot;</span> + list.get(i).getKey() + <span class=\"string\">&quot; value=&quot;</span> + list.get(i).getValue());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"java-获取字符串第一次出现重复的字符\"><a href=\"#java-获取字符串第一次出现重复的字符\" class=\"headerlink\" title=\"java 获取字符串第一次出现重复的字符\"></a>java 获取字符串第一次出现重复的字符</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">findDuplicate</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] chars = str.toCharArray();</span><br><span class=\"line\">    Set&lt;Character&gt; uniqueChars = <span class=\"keyword\">new</span> HashSet(chars.length,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!uniqueChars.add(chars[i]))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h3 id=\"8升、5升、3升水桶各一个-如何分成两个4升\"><a href=\"#8升、5升、3升水桶各一个-如何分成两个4升\" class=\"headerlink\" title=\"8升、5升、3升水桶各一个,如何分成两个4升\"></a>8升、5升、3升水桶各一个,如何分成两个4升</h3><p><img src=\"/interest/3_5_8.png\" alt=\"分成两个4升\"></p>\n<h3 id=\"以面向对象的思想设计长方形和正方形\"><a href=\"#以面向对象的思想设计长方形和正方形\" class=\"headerlink\" title=\"以面向对象的思想设计长方形和正方形\"></a>以面向对象的思想设计长方形和正方形</h3><ul>\n<li>方式1：设计接口，然后长方形和正方形各自实现这个接口<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//形状类：结算面积和周长</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">perimeter</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//长方形：实现接口并实现方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> width;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> height;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Rectangle</span><span class=\"params\">(<span class=\"keyword\">double</span> width,<span class=\"keyword\">double</span> height)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.width=width;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.height=height;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width*<span class=\"keyword\">this</span>.height;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">perimeter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">2</span>*(<span class=\"keyword\">this</span>.width+<span class=\"keyword\">this</span>.height);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正方形：实现接口并实现方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> side;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> side)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.side=side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> side*side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">perimeter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">4</span>*side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>方式2：使用extents<br>因为正方形 <strong>is a</strong> 长方形，所以可以使用继承来设计正方形，然后在构造函数中使用super函数；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Rectangle</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> side;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> side)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(side,side);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.side=side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSquare s=<span class=\"keyword\">new</span> Square(<span class=\"number\">2.5</span>);</span><br><span class=\"line\">\t\tSystem.out.println(s.perimeter());</span><br><span class=\"line\">\t\tSystem.out.println(s.area());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"java使用递归计算1-2-3-…-n之间的和\"><a href=\"#java使用递归计算1-2-3-…-n之间的和\" class=\"headerlink\" title=\"java使用递归计算1+2+3+…+n之间的和\"></a>java使用递归计算1+2+3+…+n之间的和</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SumNumber</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(sumN(<span class=\"number\">10</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用递归的方法计算1+2+3+4+....n的和; 切记注意n不能小于1</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sumN</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n+ sumN(n-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数\"><a href=\"#java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数\" class=\"headerlink\" title=\"java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数\"></a>java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数</h3><p>文件文章中存在,.以及空格</p>\n<ul>\n<li>读取文件内容</li>\n<li>对文件进行内容匹配</li>\n<li>使用map 保存单词、次数</li>\n<li>map排序</li>\n<li>输出<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordCount</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//1. 使用流读取文件</span></span><br><span class=\"line\">            BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">&quot;d:/n.txt&quot;</span>));</span><br><span class=\"line\">            StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((line = reader.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                sb.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            reader.close();</span><br><span class=\"line\">            <span class=\"comment\">//替换所有的英文逗号和句号</span></span><br><span class=\"line\">            String temp = sb.toString().replaceAll(<span class=\"string\">&quot;/[\\\\w\\\\,\\\\.]+/&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//2.使用正则表达式匹配</span></span><br><span class=\"line\">            Pattern pattern = Pattern.compile(<span class=\"string\">&quot;/[a-zA-Z\\\\w\\\\,\\\\.]+/&quot;</span>);</span><br><span class=\"line\">            Matcher matcher = pattern.matcher(temp);</span><br><span class=\"line\">            Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">            String word;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (matcher.find()) &#123;</span><br><span class=\"line\">                word = matcher.group();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (map.containsKey(word)) &#123;</span><br><span class=\"line\">                    count = map.get(word);</span><br><span class=\"line\">                    map.put(word, count + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    map.put(word, <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//将map的数据根据count排序；</span></span><br><span class=\"line\">            List&lt;Map.Entry&lt;String, Integer&gt;&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(map.entrySet());</span><br><span class=\"line\">            Collections.sort(list, Comparator.comparing(Map.Entry::getValue));</span><br><span class=\"line\">            <span class=\"keyword\">int</span> last = list.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = last; i &gt; last - <span class=\"number\">5</span>; i--) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;key=&quot;</span> + list.get(i).getKey() + <span class=\"string\">&quot; value=&quot;</span> + list.get(i).getValue());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"java-获取字符串第一次出现重复的字符\"><a href=\"#java-获取字符串第一次出现重复的字符\" class=\"headerlink\" title=\"java 获取字符串第一次出现重复的字符\"></a>java 获取字符串第一次出现重复的字符</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">findDuplicate</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] chars = str.toCharArray();</span><br><span class=\"line\">    Set&lt;Character&gt; uniqueChars = <span class=\"keyword\">new</span> HashSet(chars.length,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!uniqueChars.add(chars[i]))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"Java内部类初始化","comments":1,"translate_title":"java-internal-class-initialization","abbrlink":50009,"date":"2021-05-31T16:00:00.000Z","_content":"### 1. 在同个java文件中，但不是内部类\n```java\npublic class C {\n}\n//在同一个Java文件中只能存在一个public类，除内部类外\n//只允许使用“public”、“abstract”和“final”。\nclass D{\n    \n}\n```\n```java\n//实例化\npublic static void main(String[] args) {\n    D d = new D();\n}\n```\n\n### 2. 常规内部类\n要实例化内部类对象，必须先有外部类对象，通过外部类对象.new 内部类();来实例化内部类对象，在其他文件或者其他包内都是这样，只是要能在其他包实例化的话，内部类Inner还得加上修饰符public。\n```java\npublic class Outter {\n    class Inner { }\n\n    public static void main(String[] args) {\n        Outter out = new Outter();\n        Outter.Inner in = out.new Inner();\n    }\n}\n\n//第二种情况：通过提供方法来获取实例对象\npublic class A {\n    public class B{\n        public void test(){\n            System.out.println(111);\n        }\n    }\n\n    public B getInstance(){\n        return new B();\n    }\n    public static void main(String[] args) {\n        A a = new A();\n        B b = a.getInstance();\n        b.test();\n    }\n}\n```\n### 3. 静态内部类\n实例化静态内部类和实例化常规内部类有类似的地方，而不同之处在与静态内部类由于是静态的，所以不需要外部类对象就可以实例化，如上例Outter.Inner in = new Outter.Inner();\n在其他Java文件也是这么实例化的\n```java\nclass Outter {\n    \n    static class Inner {}\n}\n\npublic class TestDemo {\n    public static void main(String[] args) {\n        Outter.Inner in = new Outter.Inner();\n    }\n}\n```\n\n### 4. 局部内部类\n局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内，所以只能在方法或者该作用域内实例化,局部内部类不能有访问说明符,因为它不是外围类的一部分,但是可以访问当前代码块的常量,以及此外围类的所有成员\n```java\npublic class A {\n    class B {\n\n    }\n\n    public void pint() {\n        class C {\n        }\n        new C();\n    }\n\n    public void pint(boolean b) {\n        if (b) {\n            class D {\n            }\n            new D();\n        }\n    }\n}\n```\n\n### 5. 匿名内部类\n匿名内部类可以继承一个类或实现一个接口，这里的ClassOrInterfaceName是匿名内部类所继承的类名或实现的接口名。但匿名内部类不能同时实现一个接口和继承一个类，也不能实现多个接口。如果实现了一个接口，该类是Object类的直接子类，匿名类继承一个类或实现一个接口，不需要extends和implements关键字\n```java\nArrayList<String> list = new ArrayList<String>() {{\n        add(\"A\");\n        add(\"B\");\n        add(\"C\");\n}};\n\nnew Thread(\n        new Runnable() {\n            public void run() { ... }\n        }\n).start();\n```\n\n\n","source":"_posts/2021/07/java-inner-class-01.md","raw":"---\ntitle: Java内部类初始化\ntags: 内部类\ncategories: java\ncomments: true\ntranslate_title: java-internal-class-initialization\nabbrlink: 50009\ndate: 2021-06-01 00:00:00\n---\n### 1. 在同个java文件中，但不是内部类\n```java\npublic class C {\n}\n//在同一个Java文件中只能存在一个public类，除内部类外\n//只允许使用“public”、“abstract”和“final”。\nclass D{\n    \n}\n```\n```java\n//实例化\npublic static void main(String[] args) {\n    D d = new D();\n}\n```\n\n### 2. 常规内部类\n要实例化内部类对象，必须先有外部类对象，通过外部类对象.new 内部类();来实例化内部类对象，在其他文件或者其他包内都是这样，只是要能在其他包实例化的话，内部类Inner还得加上修饰符public。\n```java\npublic class Outter {\n    class Inner { }\n\n    public static void main(String[] args) {\n        Outter out = new Outter();\n        Outter.Inner in = out.new Inner();\n    }\n}\n\n//第二种情况：通过提供方法来获取实例对象\npublic class A {\n    public class B{\n        public void test(){\n            System.out.println(111);\n        }\n    }\n\n    public B getInstance(){\n        return new B();\n    }\n    public static void main(String[] args) {\n        A a = new A();\n        B b = a.getInstance();\n        b.test();\n    }\n}\n```\n### 3. 静态内部类\n实例化静态内部类和实例化常规内部类有类似的地方，而不同之处在与静态内部类由于是静态的，所以不需要外部类对象就可以实例化，如上例Outter.Inner in = new Outter.Inner();\n在其他Java文件也是这么实例化的\n```java\nclass Outter {\n    \n    static class Inner {}\n}\n\npublic class TestDemo {\n    public static void main(String[] args) {\n        Outter.Inner in = new Outter.Inner();\n    }\n}\n```\n\n### 4. 局部内部类\n局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内，所以只能在方法或者该作用域内实例化,局部内部类不能有访问说明符,因为它不是外围类的一部分,但是可以访问当前代码块的常量,以及此外围类的所有成员\n```java\npublic class A {\n    class B {\n\n    }\n\n    public void pint() {\n        class C {\n        }\n        new C();\n    }\n\n    public void pint(boolean b) {\n        if (b) {\n            class D {\n            }\n            new D();\n        }\n    }\n}\n```\n\n### 5. 匿名内部类\n匿名内部类可以继承一个类或实现一个接口，这里的ClassOrInterfaceName是匿名内部类所继承的类名或实现的接口名。但匿名内部类不能同时实现一个接口和继承一个类，也不能实现多个接口。如果实现了一个接口，该类是Object类的直接子类，匿名类继承一个类或实现一个接口，不需要extends和implements关键字\n```java\nArrayList<String> list = new ArrayList<String>() {{\n        add(\"A\");\n        add(\"B\");\n        add(\"C\");\n}};\n\nnew Thread(\n        new Runnable() {\n            public void run() { ... }\n        }\n).start();\n```\n\n\n","slug":"java-inner-class-01","published":1,"updated":"2022-03-27T14:06:03.357Z","layout":"post","photos":[],"link":"","_id":"cl424hx5p0025ad5iehwz6mgi","content":"<h3 id=\"1-在同个java文件中，但不是内部类\"><a href=\"#1-在同个java文件中，但不是内部类\" class=\"headerlink\" title=\"1. 在同个java文件中，但不是内部类\"></a>1. 在同个java文件中，但不是内部类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在同一个Java文件中只能存在一个public类，除内部类外</span></span><br><span class=\"line\"><span class=\"comment\">//只允许使用“public”、“abstract”和“final”。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    D d = <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-常规内部类\"><a href=\"#2-常规内部类\" class=\"headerlink\" title=\"2. 常规内部类\"></a>2. 常规内部类</h3><p>要实例化内部类对象，必须先有外部类对象，通过外部类对象.new 内部类();来实例化内部类对象，在其他文件或者其他包内都是这样，只是要能在其他包实例化的话，内部类Inner还得加上修饰符public。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Outter out = <span class=\"keyword\">new</span> Outter();</span><br><span class=\"line\">        Outter.Inner in = out.<span class=\"function\">new <span class=\"title\">Inner</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二种情况：通过提供方法来获取实例对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"number\">111</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> B <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        A a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">        B b = a.getInstance();</span><br><span class=\"line\">        b.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-静态内部类\"><a href=\"#3-静态内部类\" class=\"headerlink\" title=\"3. 静态内部类\"></a>3. 静态内部类</h3><p>实例化静态内部类和实例化常规内部类有类似的地方，而不同之处在与静态内部类由于是静态的，所以不需要外部类对象就可以实例化，如上例Outter.Inner in = new Outter.Inner();<br>在其他Java文件也是这么实例化的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outter</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Outter.Inner in = <span class=\"keyword\">new</span> Outter.Inner();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-局部内部类\"><a href=\"#4-局部内部类\" class=\"headerlink\" title=\"4. 局部内部类\"></a>4. 局部内部类</h3><p>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内，所以只能在方法或者该作用域内实例化,局部内部类不能有访问说明符,因为它不是外围类的一部分,但是可以访问当前代码块的常量,以及此外围类的所有成员</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pint</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pint</span><span class=\"params\">(<span class=\"keyword\">boolean</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b) &#123;</span><br><span class=\"line\">            <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-匿名内部类\"><a href=\"#5-匿名内部类\" class=\"headerlink\" title=\"5. 匿名内部类\"></a>5. 匿名内部类</h3><p>匿名内部类可以继承一个类或实现一个接口，这里的ClassOrInterfaceName是匿名内部类所继承的类名或实现的接口名。但匿名内部类不能同时实现一个接口和继承一个类，也不能实现多个接口。如果实现了一个接口，该类是Object类的直接子类，匿名类继承一个类或实现一个接口，不需要extends和implements关键字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;() &#123;&#123;</span><br><span class=\"line\">        add(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">        add(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">        add(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123; ... &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">).start();</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h3 id=\"1-在同个java文件中，但不是内部类\"><a href=\"#1-在同个java文件中，但不是内部类\" class=\"headerlink\" title=\"1. 在同个java文件中，但不是内部类\"></a>1. 在同个java文件中，但不是内部类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在同一个Java文件中只能存在一个public类，除内部类外</span></span><br><span class=\"line\"><span class=\"comment\">//只允许使用“public”、“abstract”和“final”。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    D d = <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-常规内部类\"><a href=\"#2-常规内部类\" class=\"headerlink\" title=\"2. 常规内部类\"></a>2. 常规内部类</h3><p>要实例化内部类对象，必须先有外部类对象，通过外部类对象.new 内部类();来实例化内部类对象，在其他文件或者其他包内都是这样，只是要能在其他包实例化的话，内部类Inner还得加上修饰符public。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Outter out = <span class=\"keyword\">new</span> Outter();</span><br><span class=\"line\">        Outter.Inner in = out.<span class=\"function\">new <span class=\"title\">Inner</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二种情况：通过提供方法来获取实例对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"number\">111</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> B <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        A a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">        B b = a.getInstance();</span><br><span class=\"line\">        b.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-静态内部类\"><a href=\"#3-静态内部类\" class=\"headerlink\" title=\"3. 静态内部类\"></a>3. 静态内部类</h3><p>实例化静态内部类和实例化常规内部类有类似的地方，而不同之处在与静态内部类由于是静态的，所以不需要外部类对象就可以实例化，如上例Outter.Inner in = new Outter.Inner();<br>在其他Java文件也是这么实例化的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outter</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Outter.Inner in = <span class=\"keyword\">new</span> Outter.Inner();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-局部内部类\"><a href=\"#4-局部内部类\" class=\"headerlink\" title=\"4. 局部内部类\"></a>4. 局部内部类</h3><p>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内，所以只能在方法或者该作用域内实例化,局部内部类不能有访问说明符,因为它不是外围类的一部分,但是可以访问当前代码块的常量,以及此外围类的所有成员</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pint</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pint</span><span class=\"params\">(<span class=\"keyword\">boolean</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b) &#123;</span><br><span class=\"line\">            <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-匿名内部类\"><a href=\"#5-匿名内部类\" class=\"headerlink\" title=\"5. 匿名内部类\"></a>5. 匿名内部类</h3><p>匿名内部类可以继承一个类或实现一个接口，这里的ClassOrInterfaceName是匿名内部类所继承的类名或实现的接口名。但匿名内部类不能同时实现一个接口和继承一个类，也不能实现多个接口。如果实现了一个接口，该类是Object类的直接子类，匿名类继承一个类或实现一个接口，不需要extends和implements关键字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;() &#123;&#123;</span><br><span class=\"line\">        add(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">        add(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">        add(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123; ... &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">).start();</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"Java 8学习","comments":1,"abbrlink":7605,"date":"2020-04-23T06:04:02.000Z","translate_title":"java8-learning","_content":"\n## 1. Optional\nOptional 类主要解决的问题是臭名昭著的空指针异常（NullPointerException)。\n本质上，这是一个包含有可选值的包装类，这意味着 Optional 类既可以含有对象也可以为空\n### 1.1. optional构造方式\n\n- Optional.of(T)\n\n    该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。\n\n- Optional.ofNullable(T)\n\n    该方式的入参可以为null，当入参不确定为非null时使用。\n\n- Optional.empty()\n\n    这种方式是返回一个空Optional，等效Optional.ofNullable(null)\n\n### 1.2. 如何正确的使用Optional\n\n- 尽量避免使用的地方\n\n    1. 避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null != obj没有区别，这样用就没什么意义了。\n\n    2. 避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。\n\n    3. 避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。\n\n    4. 避免使用Optional作为方法的参数，原因同3。\n\n- 正确使用方式\n\n    1. 实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse/orElseGet方式：\n\n        ```java\n        //存在则返回\n        User king = new User(1, \"king\");\n        Optional<User> userOpt = Optional.of(king);\n        User user =  userOpt.orElse(null);\n        System.out.println(user.getName());\n        \n        //不存在提供默认值\n        User user2 = null;\n        Optional<User> userOpt2 = Optional.ofNullable(user2);\n        User user3 = userOpt2.orElse(unknown);\n        System.out.println(user3.getName());\n        \n        //通过方法提供值\n        User user4 = userOpt2.orElseGet(() -> new User(0, \"DEFAULT\")); \n        System.out.println(user4.getName())\n            \n         //不建议下面这种使用\n        if(userOpt.isPresent()) {\n            System.out.println(userOpt.get().getName());\n        } else {\n            //。。。\n        }\n        ```\n\n    2. 使用ifPresent()来进行对象操作，存在则操作，否则不操作。\n\n        ```java\n        //实例存在则操作，否则不操作\n        userOpt.ifPresent(u -> System.out.println(u.getName()));\n        userOpt2.ifPresent(u -> System.out.println(u.getName()));\n        ```\n\n    3. 使用map/flatMap来获取关联数据\n\n        ```java\n        //使用map方法获取关联数据\n        System.out.println(userOpt.map(u -> u.getName()).orElse(\"Unknown\"));\n        System.out.println(userOpt2.map(u -> u.getName()).orElse(\"Default\"));\n        //使用flatMap方法获取关联数据\n        List<String> interests = new ArrayList<String>();\n        interests.add(\"a\");interests.add(\"b\");interests.add(\"c\");\n        user.setInterests(interests);\n        List<String> interests2 = Optional.of(user)\n            .flatMap(u -> Optional.ofNullable(u.getInterests()))\n            .orElse(Collections.emptyList());\n        System.out.println(interests2.isEmpty());\n        ```\n\n        \n\n### 1.3.Optional判断第三方接口\n\n使用java8的optional可以减少很多的NPE，再也不用当心别人的接口返回值问题了，也不用满屏的if（a != null）这种判断，下面是使用过程中遇到的问题以及如何使用Optional解决。\n\n#### 1.3.1. 接口返回参数问题\n\n1. 在微服务中使用feign调用其他接口，总担心别人返回的参数是否符合标准\n2. 参数符合标准后，然后再进行数据判断，先判断是否code为200，然后判断数据存不存在，这样冗余的代码就很多\n\n这是我们期望的返回格式\n\n```json\n{\n\t\"code\": \"200\",\n\t\"msg\": \"调用成功!\",\n\t\"data\": []\n}\n```\n\n```java\n//模拟接口调用方法\nMap<String,Object> map = serviceImpl.queryList();\n//即使map为空也能正常返回，配合map直接映射数据值\nreturn Optional.ofNullable(map).map(r-> r.get(\"data\")).orElseGet(ArrayList:: new)\n    \n //JSONObject 判断是否返回成功，如果成功返回200， 不成功返回400   \nJSONObject jsonObject = service.updateDate();\nOptional.ofNullable(jsonObject).map(r->r.getInteger(\"code\")).orElse(400)\n```\n\n#### 1.3.2. 避免判断风暴\n\n对象层层嵌套，为了逻辑严谨必须要进行空判断\n\n```java\n//对于一个对象里面嵌套对象，那么需要层层去判断非空\nSchool school = null;\nif(school != null){\n    Clazz clazz = school.getClazz();\n    if(clazz != null){\n        Student student = clazz.getStudent();\n        if(student != null){\n            String name = student.getName();\n            if(name == null || \"\".equals(name)){\n                name = \"学生的姓名为空\";\n            }\n        }\n    }\n}\n//使用Optional后\n String name = Optional.ofNullable(school)\n                .map(School::getClazz)\n                .map(Clazz::getStudent)\n                .map(Student::getName)\n                .orElse(\"学生的姓名为空\");\n```\n\n## 2. Stream\n\n```java\n//找出某一个字段等于某个值的那一条数据\nJaponicaRiceCheck1 streamCheck = listItemRice.stream()\n.filter(o -> o.getSYS_PARENTID().equals(check.getSYS_ID())).findAny().orElse(null);\n```\n\n","source":"_posts/2021/07/java8特性.md","raw":"---\ntitle: Java 8学习\ntags: java\ncategories: 知识整理\ncomments: true\nabbrlink: 7605\ndate: 2020-04-23 14:04:02\ntranslate_title: java8-learning\n---\n\n## 1. Optional\nOptional 类主要解决的问题是臭名昭著的空指针异常（NullPointerException)。\n本质上，这是一个包含有可选值的包装类，这意味着 Optional 类既可以含有对象也可以为空\n### 1.1. optional构造方式\n\n- Optional.of(T)\n\n    该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。\n\n- Optional.ofNullable(T)\n\n    该方式的入参可以为null，当入参不确定为非null时使用。\n\n- Optional.empty()\n\n    这种方式是返回一个空Optional，等效Optional.ofNullable(null)\n\n### 1.2. 如何正确的使用Optional\n\n- 尽量避免使用的地方\n\n    1. 避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null != obj没有区别，这样用就没什么意义了。\n\n    2. 避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。\n\n    3. 避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。\n\n    4. 避免使用Optional作为方法的参数，原因同3。\n\n- 正确使用方式\n\n    1. 实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse/orElseGet方式：\n\n        ```java\n        //存在则返回\n        User king = new User(1, \"king\");\n        Optional<User> userOpt = Optional.of(king);\n        User user =  userOpt.orElse(null);\n        System.out.println(user.getName());\n        \n        //不存在提供默认值\n        User user2 = null;\n        Optional<User> userOpt2 = Optional.ofNullable(user2);\n        User user3 = userOpt2.orElse(unknown);\n        System.out.println(user3.getName());\n        \n        //通过方法提供值\n        User user4 = userOpt2.orElseGet(() -> new User(0, \"DEFAULT\")); \n        System.out.println(user4.getName())\n            \n         //不建议下面这种使用\n        if(userOpt.isPresent()) {\n            System.out.println(userOpt.get().getName());\n        } else {\n            //。。。\n        }\n        ```\n\n    2. 使用ifPresent()来进行对象操作，存在则操作，否则不操作。\n\n        ```java\n        //实例存在则操作，否则不操作\n        userOpt.ifPresent(u -> System.out.println(u.getName()));\n        userOpt2.ifPresent(u -> System.out.println(u.getName()));\n        ```\n\n    3. 使用map/flatMap来获取关联数据\n\n        ```java\n        //使用map方法获取关联数据\n        System.out.println(userOpt.map(u -> u.getName()).orElse(\"Unknown\"));\n        System.out.println(userOpt2.map(u -> u.getName()).orElse(\"Default\"));\n        //使用flatMap方法获取关联数据\n        List<String> interests = new ArrayList<String>();\n        interests.add(\"a\");interests.add(\"b\");interests.add(\"c\");\n        user.setInterests(interests);\n        List<String> interests2 = Optional.of(user)\n            .flatMap(u -> Optional.ofNullable(u.getInterests()))\n            .orElse(Collections.emptyList());\n        System.out.println(interests2.isEmpty());\n        ```\n\n        \n\n### 1.3.Optional判断第三方接口\n\n使用java8的optional可以减少很多的NPE，再也不用当心别人的接口返回值问题了，也不用满屏的if（a != null）这种判断，下面是使用过程中遇到的问题以及如何使用Optional解决。\n\n#### 1.3.1. 接口返回参数问题\n\n1. 在微服务中使用feign调用其他接口，总担心别人返回的参数是否符合标准\n2. 参数符合标准后，然后再进行数据判断，先判断是否code为200，然后判断数据存不存在，这样冗余的代码就很多\n\n这是我们期望的返回格式\n\n```json\n{\n\t\"code\": \"200\",\n\t\"msg\": \"调用成功!\",\n\t\"data\": []\n}\n```\n\n```java\n//模拟接口调用方法\nMap<String,Object> map = serviceImpl.queryList();\n//即使map为空也能正常返回，配合map直接映射数据值\nreturn Optional.ofNullable(map).map(r-> r.get(\"data\")).orElseGet(ArrayList:: new)\n    \n //JSONObject 判断是否返回成功，如果成功返回200， 不成功返回400   \nJSONObject jsonObject = service.updateDate();\nOptional.ofNullable(jsonObject).map(r->r.getInteger(\"code\")).orElse(400)\n```\n\n#### 1.3.2. 避免判断风暴\n\n对象层层嵌套，为了逻辑严谨必须要进行空判断\n\n```java\n//对于一个对象里面嵌套对象，那么需要层层去判断非空\nSchool school = null;\nif(school != null){\n    Clazz clazz = school.getClazz();\n    if(clazz != null){\n        Student student = clazz.getStudent();\n        if(student != null){\n            String name = student.getName();\n            if(name == null || \"\".equals(name)){\n                name = \"学生的姓名为空\";\n            }\n        }\n    }\n}\n//使用Optional后\n String name = Optional.ofNullable(school)\n                .map(School::getClazz)\n                .map(Clazz::getStudent)\n                .map(Student::getName)\n                .orElse(\"学生的姓名为空\");\n```\n\n## 2. Stream\n\n```java\n//找出某一个字段等于某个值的那一条数据\nJaponicaRiceCheck1 streamCheck = listItemRice.stream()\n.filter(o -> o.getSYS_PARENTID().equals(check.getSYS_ID())).findAny().orElse(null);\n```\n\n","slug":"java8特性","published":1,"updated":"2022-03-27T14:06:03.457Z","layout":"post","photos":[],"link":"","_id":"cl424hx5p0028ad5i4ml99ujk","content":"<h2 id=\"1-Optional\"><a href=\"#1-Optional\" class=\"headerlink\" title=\"1. Optional\"></a>1. Optional</h2><p>Optional 类主要解决的问题是臭名昭著的空指针异常（NullPointerException)。<br>本质上，这是一个包含有可选值的包装类，这意味着 Optional 类既可以含有对象也可以为空</p>\n<h3 id=\"1-1-optional构造方式\"><a href=\"#1-1-optional构造方式\" class=\"headerlink\" title=\"1.1. optional构造方式\"></a>1.1. optional构造方式</h3><ul>\n<li><p>Optional.of(T)</p>\n<p>  该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。</p>\n</li>\n<li><p>Optional.ofNullable(T)</p>\n<p>  该方式的入参可以为null，当入参不确定为非null时使用。</p>\n</li>\n<li><p>Optional.empty()</p>\n<p>  这种方式是返回一个空Optional，等效Optional.ofNullable(null)</p>\n</li>\n</ul>\n<h3 id=\"1-2-如何正确的使用Optional\"><a href=\"#1-2-如何正确的使用Optional\" class=\"headerlink\" title=\"1.2. 如何正确的使用Optional\"></a>1.2. 如何正确的使用Optional</h3><ul>\n<li><p>尽量避免使用的地方</p>\n<ol>\n<li><p>避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null != obj没有区别，这样用就没什么意义了。</p>\n</li>\n<li><p>避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。</p>\n</li>\n<li><p>避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。</p>\n</li>\n<li><p>避免使用Optional作为方法的参数，原因同3。</p>\n</li>\n</ol>\n</li>\n<li><p>正确使用方式</p>\n<ol>\n<li><p>实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse/orElseGet方式：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//存在则返回</span></span><br><span class=\"line\">User king = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">&quot;king&quot;</span>);</span><br><span class=\"line\">Optional&lt;User&gt; userOpt = Optional.of(king);</span><br><span class=\"line\">User user =  userOpt.orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">System.out.println(user.getName());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不存在提供默认值</span></span><br><span class=\"line\">User user2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">Optional&lt;User&gt; userOpt2 = Optional.ofNullable(user2);</span><br><span class=\"line\">User user3 = userOpt2.orElse(unknown);</span><br><span class=\"line\">System.out.println(user3.getName());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过方法提供值</span></span><br><span class=\"line\">User user4 = userOpt2.orElseGet(() -&gt; <span class=\"keyword\">new</span> User(<span class=\"number\">0</span>, <span class=\"string\">&quot;DEFAULT&quot;</span>)); </span><br><span class=\"line\">System.out.println(user4.getName())</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\">//不建议下面这种使用</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(userOpt.isPresent()) &#123;</span><br><span class=\"line\">    System.out.println(userOpt.get().getName());</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//。。。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用ifPresent()来进行对象操作，存在则操作，否则不操作。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例存在则操作，否则不操作</span></span><br><span class=\"line\">userOpt.ifPresent(u -&gt; System.out.println(u.getName()));</span><br><span class=\"line\">userOpt2.ifPresent(u -&gt; System.out.println(u.getName()));</span><br></pre></td></tr></table></figure></li>\n<li><p>使用map/flatMap来获取关联数据</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用map方法获取关联数据</span></span><br><span class=\"line\">System.out.println(userOpt.map(u -&gt; u.getName()).orElse(<span class=\"string\">&quot;Unknown&quot;</span>));</span><br><span class=\"line\">System.out.println(userOpt2.map(u -&gt; u.getName()).orElse(<span class=\"string\">&quot;Default&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">//使用flatMap方法获取关联数据</span></span><br><span class=\"line\">List&lt;String&gt; interests = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">interests.add(<span class=\"string\">&quot;a&quot;</span>);interests.add(<span class=\"string\">&quot;b&quot;</span>);interests.add(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">user.setInterests(interests);</span><br><span class=\"line\">List&lt;String&gt; interests2 = Optional.of(user)</span><br><span class=\"line\">    .flatMap(u -&gt; Optional.ofNullable(u.getInterests()))</span><br><span class=\"line\">    .orElse(Collections.emptyList());</span><br><span class=\"line\">System.out.println(interests2.isEmpty());</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"1-3-Optional判断第三方接口\"><a href=\"#1-3-Optional判断第三方接口\" class=\"headerlink\" title=\"1.3.Optional判断第三方接口\"></a>1.3.Optional判断第三方接口</h3><p>使用java8的optional可以减少很多的NPE，再也不用当心别人的接口返回值问题了，也不用满屏的if（a != null）这种判断，下面是使用过程中遇到的问题以及如何使用Optional解决。</p>\n<h4 id=\"1-3-1-接口返回参数问题\"><a href=\"#1-3-1-接口返回参数问题\" class=\"headerlink\" title=\"1.3.1. 接口返回参数问题\"></a>1.3.1. 接口返回参数问题</h4><ol>\n<li>在微服务中使用feign调用其他接口，总担心别人返回的参数是否符合标准</li>\n<li>参数符合标准后，然后再进行数据判断，先判断是否code为200，然后判断数据存不存在，这样冗余的代码就很多</li>\n</ol>\n<p>这是我们期望的返回格式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;code&quot;</span>: <span class=\"string\">&quot;200&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;msg&quot;</span>: <span class=\"string\">&quot;调用成功!&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;data&quot;</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟接口调用方法</span></span><br><span class=\"line\">Map&lt;String,Object&gt; map = serviceImpl.queryList();</span><br><span class=\"line\"><span class=\"comment\">//即使map为空也能正常返回，配合map直接映射数据值</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> Optional.ofNullable(map).map(r-&gt; r.get(<span class=\"string\">&quot;data&quot;</span>)).orElseGet(ArrayList:: <span class=\"keyword\">new</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\">//JSONObject 判断是否返回成功，如果成功返回200， 不成功返回400   </span></span><br><span class=\"line\">JSONObject jsonObject = service.updateDate();</span><br><span class=\"line\">Optional.ofNullable(jsonObject).map(r-&gt;r.getInteger(<span class=\"string\">&quot;code&quot;</span>)).orElse(<span class=\"number\">400</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-2-避免判断风暴\"><a href=\"#1-3-2-避免判断风暴\" class=\"headerlink\" title=\"1.3.2. 避免判断风暴\"></a>1.3.2. 避免判断风暴</h4><p>对象层层嵌套，为了逻辑严谨必须要进行空判断</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对于一个对象里面嵌套对象，那么需要层层去判断非空</span></span><br><span class=\"line\">School school = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(school != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    Clazz clazz = school.getClazz();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(clazz != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Student student = clazz.getStudent();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(student != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            String name = student.getName();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(name == <span class=\"keyword\">null</span> || <span class=\"string\">&quot;&quot;</span>.equals(name))&#123;</span><br><span class=\"line\">                name = <span class=\"string\">&quot;学生的姓名为空&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用Optional后</span></span><br><span class=\"line\"> String name = Optional.ofNullable(school)</span><br><span class=\"line\">                .map(School::getClazz)</span><br><span class=\"line\">                .map(Clazz::getStudent)</span><br><span class=\"line\">                .map(Student::getName)</span><br><span class=\"line\">                .orElse(<span class=\"string\">&quot;学生的姓名为空&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Stream\"><a href=\"#2-Stream\" class=\"headerlink\" title=\"2. Stream\"></a>2. Stream</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//找出某一个字段等于某个值的那一条数据</span></span><br><span class=\"line\">JaponicaRiceCheck1 streamCheck = listItemRice.stream()</span><br><span class=\"line\">.filter(o -&gt; o.getSYS_PARENTID().equals(check.getSYS_ID())).findAny().orElse(<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h2 id=\"1-Optional\"><a href=\"#1-Optional\" class=\"headerlink\" title=\"1. Optional\"></a>1. Optional</h2><p>Optional 类主要解决的问题是臭名昭著的空指针异常（NullPointerException)。<br>本质上，这是一个包含有可选值的包装类，这意味着 Optional 类既可以含有对象也可以为空</p>\n<h3 id=\"1-1-optional构造方式\"><a href=\"#1-1-optional构造方式\" class=\"headerlink\" title=\"1.1. optional构造方式\"></a>1.1. optional构造方式</h3><ul>\n<li><p>Optional.of(T)</p>\n<p>  该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。</p>\n</li>\n<li><p>Optional.ofNullable(T)</p>\n<p>  该方式的入参可以为null，当入参不确定为非null时使用。</p>\n</li>\n<li><p>Optional.empty()</p>\n<p>  这种方式是返回一个空Optional，等效Optional.ofNullable(null)</p>\n</li>\n</ul>\n<h3 id=\"1-2-如何正确的使用Optional\"><a href=\"#1-2-如何正确的使用Optional\" class=\"headerlink\" title=\"1.2. 如何正确的使用Optional\"></a>1.2. 如何正确的使用Optional</h3><ul>\n<li><p>尽量避免使用的地方</p>\n<ol>\n<li><p>避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null != obj没有区别，这样用就没什么意义了。</p>\n</li>\n<li><p>避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。</p>\n</li>\n<li><p>避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。</p>\n</li>\n<li><p>避免使用Optional作为方法的参数，原因同3。</p>\n</li>\n</ol>\n</li>\n<li><p>正确使用方式</p>\n<ol>\n<li><p>实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse/orElseGet方式：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//存在则返回</span></span><br><span class=\"line\">User king = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">&quot;king&quot;</span>);</span><br><span class=\"line\">Optional&lt;User&gt; userOpt = Optional.of(king);</span><br><span class=\"line\">User user =  userOpt.orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">System.out.println(user.getName());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不存在提供默认值</span></span><br><span class=\"line\">User user2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">Optional&lt;User&gt; userOpt2 = Optional.ofNullable(user2);</span><br><span class=\"line\">User user3 = userOpt2.orElse(unknown);</span><br><span class=\"line\">System.out.println(user3.getName());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过方法提供值</span></span><br><span class=\"line\">User user4 = userOpt2.orElseGet(() -&gt; <span class=\"keyword\">new</span> User(<span class=\"number\">0</span>, <span class=\"string\">&quot;DEFAULT&quot;</span>)); </span><br><span class=\"line\">System.out.println(user4.getName())</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\">//不建议下面这种使用</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(userOpt.isPresent()) &#123;</span><br><span class=\"line\">    System.out.println(userOpt.get().getName());</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//。。。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用ifPresent()来进行对象操作，存在则操作，否则不操作。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例存在则操作，否则不操作</span></span><br><span class=\"line\">userOpt.ifPresent(u -&gt; System.out.println(u.getName()));</span><br><span class=\"line\">userOpt2.ifPresent(u -&gt; System.out.println(u.getName()));</span><br></pre></td></tr></table></figure></li>\n<li><p>使用map/flatMap来获取关联数据</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用map方法获取关联数据</span></span><br><span class=\"line\">System.out.println(userOpt.map(u -&gt; u.getName()).orElse(<span class=\"string\">&quot;Unknown&quot;</span>));</span><br><span class=\"line\">System.out.println(userOpt2.map(u -&gt; u.getName()).orElse(<span class=\"string\">&quot;Default&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">//使用flatMap方法获取关联数据</span></span><br><span class=\"line\">List&lt;String&gt; interests = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">interests.add(<span class=\"string\">&quot;a&quot;</span>);interests.add(<span class=\"string\">&quot;b&quot;</span>);interests.add(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">user.setInterests(interests);</span><br><span class=\"line\">List&lt;String&gt; interests2 = Optional.of(user)</span><br><span class=\"line\">    .flatMap(u -&gt; Optional.ofNullable(u.getInterests()))</span><br><span class=\"line\">    .orElse(Collections.emptyList());</span><br><span class=\"line\">System.out.println(interests2.isEmpty());</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"1-3-Optional判断第三方接口\"><a href=\"#1-3-Optional判断第三方接口\" class=\"headerlink\" title=\"1.3.Optional判断第三方接口\"></a>1.3.Optional判断第三方接口</h3><p>使用java8的optional可以减少很多的NPE，再也不用当心别人的接口返回值问题了，也不用满屏的if（a != null）这种判断，下面是使用过程中遇到的问题以及如何使用Optional解决。</p>\n<h4 id=\"1-3-1-接口返回参数问题\"><a href=\"#1-3-1-接口返回参数问题\" class=\"headerlink\" title=\"1.3.1. 接口返回参数问题\"></a>1.3.1. 接口返回参数问题</h4><ol>\n<li>在微服务中使用feign调用其他接口，总担心别人返回的参数是否符合标准</li>\n<li>参数符合标准后，然后再进行数据判断，先判断是否code为200，然后判断数据存不存在，这样冗余的代码就很多</li>\n</ol>\n<p>这是我们期望的返回格式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;code&quot;</span>: <span class=\"string\">&quot;200&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;msg&quot;</span>: <span class=\"string\">&quot;调用成功!&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;data&quot;</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟接口调用方法</span></span><br><span class=\"line\">Map&lt;String,Object&gt; map = serviceImpl.queryList();</span><br><span class=\"line\"><span class=\"comment\">//即使map为空也能正常返回，配合map直接映射数据值</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> Optional.ofNullable(map).map(r-&gt; r.get(<span class=\"string\">&quot;data&quot;</span>)).orElseGet(ArrayList:: <span class=\"keyword\">new</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\">//JSONObject 判断是否返回成功，如果成功返回200， 不成功返回400   </span></span><br><span class=\"line\">JSONObject jsonObject = service.updateDate();</span><br><span class=\"line\">Optional.ofNullable(jsonObject).map(r-&gt;r.getInteger(<span class=\"string\">&quot;code&quot;</span>)).orElse(<span class=\"number\">400</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-2-避免判断风暴\"><a href=\"#1-3-2-避免判断风暴\" class=\"headerlink\" title=\"1.3.2. 避免判断风暴\"></a>1.3.2. 避免判断风暴</h4><p>对象层层嵌套，为了逻辑严谨必须要进行空判断</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对于一个对象里面嵌套对象，那么需要层层去判断非空</span></span><br><span class=\"line\">School school = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(school != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    Clazz clazz = school.getClazz();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(clazz != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Student student = clazz.getStudent();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(student != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            String name = student.getName();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(name == <span class=\"keyword\">null</span> || <span class=\"string\">&quot;&quot;</span>.equals(name))&#123;</span><br><span class=\"line\">                name = <span class=\"string\">&quot;学生的姓名为空&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用Optional后</span></span><br><span class=\"line\"> String name = Optional.ofNullable(school)</span><br><span class=\"line\">                .map(School::getClazz)</span><br><span class=\"line\">                .map(Clazz::getStudent)</span><br><span class=\"line\">                .map(Student::getName)</span><br><span class=\"line\">                .orElse(<span class=\"string\">&quot;学生的姓名为空&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Stream\"><a href=\"#2-Stream\" class=\"headerlink\" title=\"2. Stream\"></a>2. Stream</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//找出某一个字段等于某个值的那一条数据</span></span><br><span class=\"line\">JaponicaRiceCheck1 streamCheck = listItemRice.stream()</span><br><span class=\"line\">.filter(o -&gt; o.getSYS_PARENTID().equals(check.getSYS_ID())).findAny().orElse(<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n\n"},{"title":"锁优化","comments":1,"translate_title":"lock-optimization","abbrlink":1446,"date":"2021-07-23T06:04:02.000Z","_content":"## 1. 优化思路以及方法\n\n- 减少锁持有时间\n- 减小锁粒度\n- 锁分离\n- 锁粗化\n- 锁消除\n\n### 1.1 减少锁持有时间\n\n```java\npublic synchronized void syncMethod(){\n    othercode1();\n    mutextMethod();\n    othercode2();\n}\n```\n\n像上述代码，在进入方法前就要得到锁，其他线程就要在外面等待。\n\n分析：锁里面的资源在同一时间只允许一个线程执行，我们不仅要减少其他线程等待的时间，也要尽力减少线程在锁里面的执行时间，所以，尽量只有在有线程安全要求的程序代码上加锁。\n\n```java\npublic void syncMethod(){\n    othercode1();\n    synchronized(this){\n        metextMethod();\n    }\n    othercode2();\n}\n```\n\n### 1.2 减小锁粒度\n\n将大对象（这个对象可能会被很多线程访问）拆成小对象，大大增加并行度。\n\n降低锁竞争，那么偏向锁、轻量级锁成功率才会提高。\n\n最最典型的减小锁粒度的案例就是ConcurrentHashMap。在HashMap的基础上进行优化，使用了cas与synchronized来确保安全性，在保证安全性的基础上为了充分利用线程资源，更是巧妙的设计了多线程同扩容的模式。\n\n\n\n### 1.3 锁分离\n\n最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁。这样读读不互斥，读写互斥，写写互斥。既保证了线程安全，又提高了性能。\n\n分析：读写分离这种思想可以延伸到我们其他的设计中，只要操作上互不影响，那锁就可以进行分离，比如：LinkedBlockingQueue\n\n<img src=\"..\\images/read_writer_Lock1.png\" alt=\"read_writer_Lock1\" style=\"zoom: 67%;\" />\n\n从头部获取数据，从尾部放入数据，使用两把锁。\n\n\n\n### 1.4 锁粗化\n\n通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁，只有这样，等待在这个锁上的其他线程才能尽早的获取资源执行任务；但是凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化。\n\n```java\npublic void demoMethod(){\n    synchronized{\n    \t//dow sth.\n\t}\n    //....做其他不需要同步的工作，但能很快执行完毕\n    synchronized{\n        //do sth.\n    }\n}\n```\n\n这种情况，根据锁粗化的思想，应该合并：\n\n```java\npublic void demoMethod(){\n    //整合成一次锁请求,前提时中间哪些不需要同步的工作很快就执行完成\n    synchronized(lock){\n        //do sth.\n        //....做其他不需要同步的工作，但能很快执行完毕\n    }\n}\n```\n\n再举一个极端的例子：\n\n```java\nfor(int i =0; i < circle; i++){\n    synchronized(lock){\n        //.....\n    }\n}\n```\n\n在一个循环内不同得获得锁。虽然JDK内部会对这个代码做些优化，但是还不如直接写成：\n\n```java\nsynchronized(lock){\n    for(int i =0; i < circle; i++){\n    }\n}\n```\n\n当然如果有需求说，这样的循环太久，需要给其他线程不要等待太久，那只能写成上面那种。如果没有这样类似的需求，还是直接写成后者那种比较好。\n**分析**: 锁粗化是JVM默认启动的一种机制，锁粗化针对的是对连续的区域进行分段加锁这种场景，JVM会自发进行优化。但作为开发者而言在满足业务的情况下，应该减少锁的使用。\n\n### 1.5 锁消除\n\n锁消除是在编译器级别的事情。在即时编译器(JIT)时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。也许你会觉得奇怪，既然有些对象不可能被多线程访问，那为什么要加锁呢？写代码时直接不加锁不就好了。\n但是有时，这些锁并不是程序员所写的，有的是JDK实现中就有锁的，比如Vector和StringBuffer这样的类，它们中的很多方法都是有锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。\n\n```java\npublic static void main(String args[]) throws InterrruptedException{\n    long start = System.currentTimeTimeMillis();\n    for(int i = 0;i < 20000; i++){\n        createStringBuffer(\"JVM\",\"asdfasdfasdf\");\n    }\n    long bufferCost = System.currentTimeTimeMillis() - start;\n    System.out.println(\"createStringBuffer:\"+bufferCost+\"ms\");\n}\npublic static String createStringBuffer(String s1, String s2){\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb.toString();\n}\n```\n\n上述代码中的StringBuffer.append是一个同步操作，但是StringBuffer却是一个局部变量，并且方法也并没有把StringBuffer返回，所以不可能会有多线程去访问它。那么此时StringBuffer中的同步操作就是没有意义的。\n开启锁消除是在JVM参数上设置的，当然需要在server模式下：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks\n```\n\n并且要开启逃逸分析。 逃逸分析的作用呢，就是看看变量是否有可能逃出作用域的范围。\n比如上述的StringBuffer，上述代码中craeteStringBuffer的返回是一个String，所以这个局部变量StringBuffer在其他地方都不会被使用。如果将craeteStringBuffer改成\n\n```java\npublic static StringBuffer createStringBuffer(String s1, String s2){\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb;\n}\n```\n\n那么这个 StringBuffer被返回后，是有可能被任何其他地方所使用的（譬如被主函数将返回结果put进map啊等等）。那么JVM的逃逸分析可以分析出，这个局部变量 StringBuffer逃出了它的作用域。\n所以基于逃逸分析，JVM可以判断，如果这个局部变量StringBuffer并没有逃出它的作用域，那么可以确定这个StringBuffer并不会被多线程所访问，那么就可以把这些多余的锁给去掉来提高性能。\n当JVM参数为：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks\n```\n\n输出：\n\n```tex\ncreateStringBuffer: 302ms\n```\n\nJVM参数为：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:-EliminateLocks\n```\n\n输出：\n\n```tex\ncreateStringBuffer: 660ms\n```\n\n显然，锁消除的效果还是很明显的。","source":"_posts/2021/07/lock01.md","raw":"---\ntitle: 锁优化\ntags: lock\ncomments: true\ncategories: java\ntranslate_title: lock-optimization\nabbrlink: 1446\ndate: 2021-07-23 14:04:02\n---\n## 1. 优化思路以及方法\n\n- 减少锁持有时间\n- 减小锁粒度\n- 锁分离\n- 锁粗化\n- 锁消除\n\n### 1.1 减少锁持有时间\n\n```java\npublic synchronized void syncMethod(){\n    othercode1();\n    mutextMethod();\n    othercode2();\n}\n```\n\n像上述代码，在进入方法前就要得到锁，其他线程就要在外面等待。\n\n分析：锁里面的资源在同一时间只允许一个线程执行，我们不仅要减少其他线程等待的时间，也要尽力减少线程在锁里面的执行时间，所以，尽量只有在有线程安全要求的程序代码上加锁。\n\n```java\npublic void syncMethod(){\n    othercode1();\n    synchronized(this){\n        metextMethod();\n    }\n    othercode2();\n}\n```\n\n### 1.2 减小锁粒度\n\n将大对象（这个对象可能会被很多线程访问）拆成小对象，大大增加并行度。\n\n降低锁竞争，那么偏向锁、轻量级锁成功率才会提高。\n\n最最典型的减小锁粒度的案例就是ConcurrentHashMap。在HashMap的基础上进行优化，使用了cas与synchronized来确保安全性，在保证安全性的基础上为了充分利用线程资源，更是巧妙的设计了多线程同扩容的模式。\n\n\n\n### 1.3 锁分离\n\n最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁。这样读读不互斥，读写互斥，写写互斥。既保证了线程安全，又提高了性能。\n\n分析：读写分离这种思想可以延伸到我们其他的设计中，只要操作上互不影响，那锁就可以进行分离，比如：LinkedBlockingQueue\n\n<img src=\"..\\images/read_writer_Lock1.png\" alt=\"read_writer_Lock1\" style=\"zoom: 67%;\" />\n\n从头部获取数据，从尾部放入数据，使用两把锁。\n\n\n\n### 1.4 锁粗化\n\n通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁，只有这样，等待在这个锁上的其他线程才能尽早的获取资源执行任务；但是凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化。\n\n```java\npublic void demoMethod(){\n    synchronized{\n    \t//dow sth.\n\t}\n    //....做其他不需要同步的工作，但能很快执行完毕\n    synchronized{\n        //do sth.\n    }\n}\n```\n\n这种情况，根据锁粗化的思想，应该合并：\n\n```java\npublic void demoMethod(){\n    //整合成一次锁请求,前提时中间哪些不需要同步的工作很快就执行完成\n    synchronized(lock){\n        //do sth.\n        //....做其他不需要同步的工作，但能很快执行完毕\n    }\n}\n```\n\n再举一个极端的例子：\n\n```java\nfor(int i =0; i < circle; i++){\n    synchronized(lock){\n        //.....\n    }\n}\n```\n\n在一个循环内不同得获得锁。虽然JDK内部会对这个代码做些优化，但是还不如直接写成：\n\n```java\nsynchronized(lock){\n    for(int i =0; i < circle; i++){\n    }\n}\n```\n\n当然如果有需求说，这样的循环太久，需要给其他线程不要等待太久，那只能写成上面那种。如果没有这样类似的需求，还是直接写成后者那种比较好。\n**分析**: 锁粗化是JVM默认启动的一种机制，锁粗化针对的是对连续的区域进行分段加锁这种场景，JVM会自发进行优化。但作为开发者而言在满足业务的情况下，应该减少锁的使用。\n\n### 1.5 锁消除\n\n锁消除是在编译器级别的事情。在即时编译器(JIT)时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。也许你会觉得奇怪，既然有些对象不可能被多线程访问，那为什么要加锁呢？写代码时直接不加锁不就好了。\n但是有时，这些锁并不是程序员所写的，有的是JDK实现中就有锁的，比如Vector和StringBuffer这样的类，它们中的很多方法都是有锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。\n\n```java\npublic static void main(String args[]) throws InterrruptedException{\n    long start = System.currentTimeTimeMillis();\n    for(int i = 0;i < 20000; i++){\n        createStringBuffer(\"JVM\",\"asdfasdfasdf\");\n    }\n    long bufferCost = System.currentTimeTimeMillis() - start;\n    System.out.println(\"createStringBuffer:\"+bufferCost+\"ms\");\n}\npublic static String createStringBuffer(String s1, String s2){\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb.toString();\n}\n```\n\n上述代码中的StringBuffer.append是一个同步操作，但是StringBuffer却是一个局部变量，并且方法也并没有把StringBuffer返回，所以不可能会有多线程去访问它。那么此时StringBuffer中的同步操作就是没有意义的。\n开启锁消除是在JVM参数上设置的，当然需要在server模式下：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks\n```\n\n并且要开启逃逸分析。 逃逸分析的作用呢，就是看看变量是否有可能逃出作用域的范围。\n比如上述的StringBuffer，上述代码中craeteStringBuffer的返回是一个String，所以这个局部变量StringBuffer在其他地方都不会被使用。如果将craeteStringBuffer改成\n\n```java\npublic static StringBuffer createStringBuffer(String s1, String s2){\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb;\n}\n```\n\n那么这个 StringBuffer被返回后，是有可能被任何其他地方所使用的（譬如被主函数将返回结果put进map啊等等）。那么JVM的逃逸分析可以分析出，这个局部变量 StringBuffer逃出了它的作用域。\n所以基于逃逸分析，JVM可以判断，如果这个局部变量StringBuffer并没有逃出它的作用域，那么可以确定这个StringBuffer并不会被多线程所访问，那么就可以把这些多余的锁给去掉来提高性能。\n当JVM参数为：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks\n```\n\n输出：\n\n```tex\ncreateStringBuffer: 302ms\n```\n\nJVM参数为：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:-EliminateLocks\n```\n\n输出：\n\n```tex\ncreateStringBuffer: 660ms\n```\n\n显然，锁消除的效果还是很明显的。","slug":"lock01","published":1,"updated":"2022-03-27T14:06:03.480Z","layout":"post","photos":[],"link":"","_id":"cl424hx5q002bad5i1zi13rik","content":"<h2 id=\"1-优化思路以及方法\"><a href=\"#1-优化思路以及方法\" class=\"headerlink\" title=\"1. 优化思路以及方法\"></a>1. 优化思路以及方法</h2><ul>\n<li>减少锁持有时间</li>\n<li>减小锁粒度</li>\n<li>锁分离</li>\n<li>锁粗化</li>\n<li>锁消除</li>\n</ul>\n<h3 id=\"1-1-减少锁持有时间\"><a href=\"#1-1-减少锁持有时间\" class=\"headerlink\" title=\"1.1 减少锁持有时间\"></a>1.1 减少锁持有时间</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">syncMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    othercode1();</span><br><span class=\"line\">    mutextMethod();</span><br><span class=\"line\">    othercode2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>像上述代码，在进入方法前就要得到锁，其他线程就要在外面等待。</p>\n<p>分析：锁里面的资源在同一时间只允许一个线程执行，我们不仅要减少其他线程等待的时间，也要尽力减少线程在锁里面的执行时间，所以，尽量只有在有线程安全要求的程序代码上加锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">syncMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    othercode1();</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">        metextMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    othercode2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-减小锁粒度\"><a href=\"#1-2-减小锁粒度\" class=\"headerlink\" title=\"1.2 减小锁粒度\"></a>1.2 减小锁粒度</h3><p>将大对象（这个对象可能会被很多线程访问）拆成小对象，大大增加并行度。</p>\n<p>降低锁竞争，那么偏向锁、轻量级锁成功率才会提高。</p>\n<p>最最典型的减小锁粒度的案例就是ConcurrentHashMap。在HashMap的基础上进行优化，使用了cas与synchronized来确保安全性，在保证安全性的基础上为了充分利用线程资源，更是巧妙的设计了多线程同扩容的模式。</p>\n<h3 id=\"1-3-锁分离\"><a href=\"#1-3-锁分离\" class=\"headerlink\" title=\"1.3 锁分离\"></a>1.3 锁分离</h3><p>最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁。这样读读不互斥，读写互斥，写写互斥。既保证了线程安全，又提高了性能。</p>\n<p>分析：读写分离这种思想可以延伸到我们其他的设计中，只要操作上互不影响，那锁就可以进行分离，比如：LinkedBlockingQueue</p>\n<img src=\"..\\images/read_writer_Lock1.png\" alt=\"read_writer_Lock1\" style=\"zoom: 67%;\">\n\n<p>从头部获取数据，从尾部放入数据，使用两把锁。</p>\n<h3 id=\"1-4-锁粗化\"><a href=\"#1-4-锁粗化\" class=\"headerlink\" title=\"1.4 锁粗化\"></a>1.4 锁粗化</h3><p>通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁，只有这样，等待在这个锁上的其他线程才能尽早的获取资源执行任务；但是凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//dow sth.</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种情况，根据锁粗化的思想，应该合并：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//整合成一次锁请求,前提时中间哪些不需要同步的工作很快就执行完成</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">        <span class=\"comment\">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再举一个极端的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; circle; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//.....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在一个循环内不同得获得锁。虽然JDK内部会对这个代码做些优化，但是还不如直接写成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; circle; i++)&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然如果有需求说，这样的循环太久，需要给其他线程不要等待太久，那只能写成上面那种。如果没有这样类似的需求，还是直接写成后者那种比较好。<br><strong>分析</strong>: 锁粗化是JVM默认启动的一种机制，锁粗化针对的是对连续的区域进行分段加锁这种场景，JVM会自发进行优化。但作为开发者而言在满足业务的情况下，应该减少锁的使用。</p>\n<h3 id=\"1-5-锁消除\"><a href=\"#1-5-锁消除\" class=\"headerlink\" title=\"1.5 锁消除\"></a>1.5 锁消除</h3><p>锁消除是在编译器级别的事情。在即时编译器(JIT)时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。也许你会觉得奇怪，既然有些对象不可能被多线程访问，那为什么要加锁呢？写代码时直接不加锁不就好了。<br>但是有时，这些锁并不是程序员所写的，有的是JDK实现中就有锁的，比如Vector和StringBuffer这样的类，它们中的很多方法都是有锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> InterrruptedException</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> start = System.currentTimeTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">20000</span>; i++)&#123;</span><br><span class=\"line\">        createStringBuffer(<span class=\"string\">&quot;JVM&quot;</span>,<span class=\"string\">&quot;asdfasdfasdf&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> bufferCost = System.currentTimeTimeMillis() - start;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;createStringBuffer:&quot;</span>+bufferCost+<span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span></span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    sb.append(s1);</span><br><span class=\"line\">    sb.append(s2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中的StringBuffer.append是一个同步操作，但是StringBuffer却是一个局部变量，并且方法也并没有把StringBuffer返回，所以不可能会有多线程去访问它。那么此时StringBuffer中的同步操作就是没有意义的。<br>开启锁消除是在JVM参数上设置的，当然需要在server模式下：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>\n\n<p>并且要开启逃逸分析。 逃逸分析的作用呢，就是看看变量是否有可能逃出作用域的范围。<br>比如上述的StringBuffer，上述代码中craeteStringBuffer的返回是一个String，所以这个局部变量StringBuffer在其他地方都不会被使用。如果将craeteStringBuffer改成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> StringBuffer <span class=\"title\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span></span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    sb.append(s1);</span><br><span class=\"line\">    sb.append(s2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么这个 StringBuffer被返回后，是有可能被任何其他地方所使用的（譬如被主函数将返回结果put进map啊等等）。那么JVM的逃逸分析可以分析出，这个局部变量 StringBuffer逃出了它的作用域。<br>所以基于逃逸分析，JVM可以判断，如果这个局部变量StringBuffer并没有逃出它的作用域，那么可以确定这个StringBuffer并不会被多线程所访问，那么就可以把这些多余的锁给去掉来提高性能。<br>当JVM参数为：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createStringBuffer: 302ms</span><br></pre></td></tr></table></figure>\n\n<p>JVM参数为：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:-EliminateLocks</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createStringBuffer: 660ms</span><br></pre></td></tr></table></figure>\n\n<p>显然，锁消除的效果还是很明显的。</p>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h2 id=\"1-优化思路以及方法\"><a href=\"#1-优化思路以及方法\" class=\"headerlink\" title=\"1. 优化思路以及方法\"></a>1. 优化思路以及方法</h2><ul>\n<li>减少锁持有时间</li>\n<li>减小锁粒度</li>\n<li>锁分离</li>\n<li>锁粗化</li>\n<li>锁消除</li>\n</ul>\n<h3 id=\"1-1-减少锁持有时间\"><a href=\"#1-1-减少锁持有时间\" class=\"headerlink\" title=\"1.1 减少锁持有时间\"></a>1.1 减少锁持有时间</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">syncMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    othercode1();</span><br><span class=\"line\">    mutextMethod();</span><br><span class=\"line\">    othercode2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>像上述代码，在进入方法前就要得到锁，其他线程就要在外面等待。</p>\n<p>分析：锁里面的资源在同一时间只允许一个线程执行，我们不仅要减少其他线程等待的时间，也要尽力减少线程在锁里面的执行时间，所以，尽量只有在有线程安全要求的程序代码上加锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">syncMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    othercode1();</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">        metextMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    othercode2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-减小锁粒度\"><a href=\"#1-2-减小锁粒度\" class=\"headerlink\" title=\"1.2 减小锁粒度\"></a>1.2 减小锁粒度</h3><p>将大对象（这个对象可能会被很多线程访问）拆成小对象，大大增加并行度。</p>\n<p>降低锁竞争，那么偏向锁、轻量级锁成功率才会提高。</p>\n<p>最最典型的减小锁粒度的案例就是ConcurrentHashMap。在HashMap的基础上进行优化，使用了cas与synchronized来确保安全性，在保证安全性的基础上为了充分利用线程资源，更是巧妙的设计了多线程同扩容的模式。</p>\n<h3 id=\"1-3-锁分离\"><a href=\"#1-3-锁分离\" class=\"headerlink\" title=\"1.3 锁分离\"></a>1.3 锁分离</h3><p>最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁。这样读读不互斥，读写互斥，写写互斥。既保证了线程安全，又提高了性能。</p>\n<p>分析：读写分离这种思想可以延伸到我们其他的设计中，只要操作上互不影响，那锁就可以进行分离，比如：LinkedBlockingQueue</p>\n<img src=\"..\\images/read_writer_Lock1.png\" alt=\"read_writer_Lock1\" style=\"zoom: 67%;\">\n\n<p>从头部获取数据，从尾部放入数据，使用两把锁。</p>\n<h3 id=\"1-4-锁粗化\"><a href=\"#1-4-锁粗化\" class=\"headerlink\" title=\"1.4 锁粗化\"></a>1.4 锁粗化</h3><p>通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁，只有这样，等待在这个锁上的其他线程才能尽早的获取资源执行任务；但是凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//dow sth.</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种情况，根据锁粗化的思想，应该合并：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//整合成一次锁请求,前提时中间哪些不需要同步的工作很快就执行完成</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">        <span class=\"comment\">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再举一个极端的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; circle; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//.....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在一个循环内不同得获得锁。虽然JDK内部会对这个代码做些优化，但是还不如直接写成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; circle; i++)&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然如果有需求说，这样的循环太久，需要给其他线程不要等待太久，那只能写成上面那种。如果没有这样类似的需求，还是直接写成后者那种比较好。<br><strong>分析</strong>: 锁粗化是JVM默认启动的一种机制，锁粗化针对的是对连续的区域进行分段加锁这种场景，JVM会自发进行优化。但作为开发者而言在满足业务的情况下，应该减少锁的使用。</p>\n<h3 id=\"1-5-锁消除\"><a href=\"#1-5-锁消除\" class=\"headerlink\" title=\"1.5 锁消除\"></a>1.5 锁消除</h3><p>锁消除是在编译器级别的事情。在即时编译器(JIT)时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。也许你会觉得奇怪，既然有些对象不可能被多线程访问，那为什么要加锁呢？写代码时直接不加锁不就好了。<br>但是有时，这些锁并不是程序员所写的，有的是JDK实现中就有锁的，比如Vector和StringBuffer这样的类，它们中的很多方法都是有锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> InterrruptedException</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> start = System.currentTimeTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">20000</span>; i++)&#123;</span><br><span class=\"line\">        createStringBuffer(<span class=\"string\">&quot;JVM&quot;</span>,<span class=\"string\">&quot;asdfasdfasdf&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> bufferCost = System.currentTimeTimeMillis() - start;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;createStringBuffer:&quot;</span>+bufferCost+<span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span></span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    sb.append(s1);</span><br><span class=\"line\">    sb.append(s2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中的StringBuffer.append是一个同步操作，但是StringBuffer却是一个局部变量，并且方法也并没有把StringBuffer返回，所以不可能会有多线程去访问它。那么此时StringBuffer中的同步操作就是没有意义的。<br>开启锁消除是在JVM参数上设置的，当然需要在server模式下：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>\n\n<p>并且要开启逃逸分析。 逃逸分析的作用呢，就是看看变量是否有可能逃出作用域的范围。<br>比如上述的StringBuffer，上述代码中craeteStringBuffer的返回是一个String，所以这个局部变量StringBuffer在其他地方都不会被使用。如果将craeteStringBuffer改成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> StringBuffer <span class=\"title\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span></span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    sb.append(s1);</span><br><span class=\"line\">    sb.append(s2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么这个 StringBuffer被返回后，是有可能被任何其他地方所使用的（譬如被主函数将返回结果put进map啊等等）。那么JVM的逃逸分析可以分析出，这个局部变量 StringBuffer逃出了它的作用域。<br>所以基于逃逸分析，JVM可以判断，如果这个局部变量StringBuffer并没有逃出它的作用域，那么可以确定这个StringBuffer并不会被多线程所访问，那么就可以把这些多余的锁给去掉来提高性能。<br>当JVM参数为：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createStringBuffer: 302ms</span><br></pre></td></tr></table></figure>\n\n<p>JVM参数为：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:-EliminateLocks</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createStringBuffer: 660ms</span><br></pre></td></tr></table></figure>\n\n<p>显然，锁消除的效果还是很明显的。</p>\n"},{"title":"MVCC多版本并发控制","comments":1,"abbrlink":39578,"date":"2021-08-14T03:03:40.000Z","translate_title":"mvcc","_content":"### 1. MVCC\n全称Multi-Version Concurrency Control即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中是心啊事务内存。\nMVCC在mysql Innodb中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使读写冲突时，也能做到不加锁，非阻塞并发读\n\n### 2. 当前读和快照读\n- 当前读\n    \n    像select lock in share mode（共享锁），select for update， update, insert,delete(排他锁)这些操作都是一种当前读；**当前读就是读取记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁**。\n\n- 快照读\n\n    像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别（串行级别快照读会变成当前读）；快照读的实现是基于多版本并发控制（即MVCC）；可以任务MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；\n    既然是基于多版本，即快照读可能读到的并不一定是最新版本的数据，有可能是之前的历史版本\n  \n**MVCC就是为了实现读（快照读）-写冲突不加锁，当前读实际上是一种加锁的操作，是悲观锁的实现。**\n\n---\n\n### 3. 当前读、快照读和MVCC的关系\nMVCC多版本并发控制指的是\"维持一个数据的多个版本，使得读写操作没有冲突\"；\nMysql通过快照读的方式去实现MVCC理想模型的其中一个具体非阻塞读功能，相对而言，当前读就是悲观锁的具体功能实现\n\nMVCC模型在Mysql中具体实现有3个隐式字段：undo日志、Read View等去完成的\n\n### 4. MVCC的作用与好处\n\n数据库并发场景分为以下三种：\n- 读-读：没有问题，也不需要并发控制\n- 读-写：有线程安全问题，可能会造成事务隔离性问题，（脏读、幻读、不可重复读）\n- 写-写：有线程安全问题，可能会存在更新丢失问题\n\n**MVCC带来的好处：**\n\nMVCC是一种用来解决读-写冲突的无所并发控制（在MVCC提出之前采用的是采用**悲观锁**），也就是事务分配增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务前的数据库快照，主要解决以下问题：\n- 在并发读写数据库时，可以做到在读操作是不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能；\n- 解决脏读、幻读、不可重复读等事务隔离性问题，但不能解决更新丢失问题\n\n**MVCC组合方法**\n- MVCC + 悲观锁： MVCC解决读写冲突，悲观锁解决写写冲突\n- MVCC + 乐观锁： MVCC解决读写冲突，乐观锁解决写写冲突，这种方式可能最大程度的提高数据库并发性能，并解决读写冲突和写写冲突导致的问题\n\n### 5. MVCC的实现原理\n实现原理主要是依赖记录中的 3个隐式字段、undo日志 、ReadView 来实现的\n\n\n在Mysql的InnoDB引擎中就是指在已提交读(READ COMMITTD)和可重复读(REPEATABLE READ)这两种隔离级别下的事务对于SELECT操作会访问版本链中的记录的过程\n这就使得别的事务可以修改这条记录，反正每次修改都会在版本链中记录。SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，提升了系统的性能。\n\n#### 5.1 版本链\n```sql\nbegin;\n#触发分配TRX_ID\nselect * from t_role;\n#指定TRX_MYSQL_THREAD_ID=当前CONNECTION_ID,表示查询当前连接\nselect TRX_ID, ROLL_PTR, ROW_ID  from INFORMATION_SCHEMA.INNODB_TRX where TRX_MYSQL_THREAD_ID = CONNECTION_ID();\ncommit;\n```\n在InnoDB引擎表中，它的聚簇索引记录中有两个必要的隐藏列：\n- TRX_ID\n\n  6byte，这个id用来存储的每次对某条聚簇索引记录进行修改的时候的事务id\n\n- roll_pointer\n\n  每次对哪条聚簇索引记录有修改的时候，都会把老版本写入undo日志中。这个roll_pointer就是存了一个指针，它指向这条聚簇索引记录的上一个版本的位置，通过它来获得上一个版本的记录信息。(注意插入操作的undo日志没有这个属性，因为它没有老版本)\n\n- ROW_ID\n\n  6byte，隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引\n\n- 实际还有一个删除flag隐藏字段, 既记录被更新或删除并不代表真的删除，而是删除flag变了\n![](./mvcc/02.png)\n\n比如现在有个事务id是60的执行的这条记录的修改语句\n\n![](./mvcc/03.png)\n\n此时在undo日志中就存在版本链\n![](./mvcc/04.png)\n\n#### 5.2 ReadView\n已提交读和可重复读的区别就在于它们生成ReadView的策略不同\nReadView中主要就是有个列表来存储我们系统中当前活跃着的读写事务，也就是begin了还未提交的事务。通过这个列表来判断记录的某个版本是否对当前事务可见。假设当前列表里的事务id为[80,100]。\n\n- 如果你要访问的记录版本的事务id为50，比当前列表最小的id80小，那说明这个事务在之前就提交了，所以对当前活动的事务来说是可访问的。\n- 如果你要访问的记录版本的事务id为90,发现此事务在列表id最大值和最小值之间，那就再判断一下是否在列表内，如果在那就说明此事务还未提交，所以版本不能被访问。如果不在那说明事务已经提交，所以版本可以被访问。\n- 如果你要访问的记录版本的事务id为110，那比事务列表最大id100都大，那说明这个版本是在ReadView生成之后才发生的，所以不能被访问。\n这些记录都是去版本链里面找的，先找最近记录，如果最近这一条记录事务id不符合条件，不可见的话，再去找上一个版本再比较当前事务的id和这个版本事务id看能不能访问，以此类推直到返回可见的版本或者结束。\n\n","source":"_posts/2021/07/mvcc.md","raw":"---\ntitle: MVCC多版本并发控制\ntags: mysql\ncategories: mysql\ncomments: true\nabbrlink: 39578\ndate: 2021-08-14 11:03:40\ntranslate_title: mvcc\n---\n### 1. MVCC\n全称Multi-Version Concurrency Control即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中是心啊事务内存。\nMVCC在mysql Innodb中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使读写冲突时，也能做到不加锁，非阻塞并发读\n\n### 2. 当前读和快照读\n- 当前读\n    \n    像select lock in share mode（共享锁），select for update， update, insert,delete(排他锁)这些操作都是一种当前读；**当前读就是读取记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁**。\n\n- 快照读\n\n    像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别（串行级别快照读会变成当前读）；快照读的实现是基于多版本并发控制（即MVCC）；可以任务MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；\n    既然是基于多版本，即快照读可能读到的并不一定是最新版本的数据，有可能是之前的历史版本\n  \n**MVCC就是为了实现读（快照读）-写冲突不加锁，当前读实际上是一种加锁的操作，是悲观锁的实现。**\n\n---\n\n### 3. 当前读、快照读和MVCC的关系\nMVCC多版本并发控制指的是\"维持一个数据的多个版本，使得读写操作没有冲突\"；\nMysql通过快照读的方式去实现MVCC理想模型的其中一个具体非阻塞读功能，相对而言，当前读就是悲观锁的具体功能实现\n\nMVCC模型在Mysql中具体实现有3个隐式字段：undo日志、Read View等去完成的\n\n### 4. MVCC的作用与好处\n\n数据库并发场景分为以下三种：\n- 读-读：没有问题，也不需要并发控制\n- 读-写：有线程安全问题，可能会造成事务隔离性问题，（脏读、幻读、不可重复读）\n- 写-写：有线程安全问题，可能会存在更新丢失问题\n\n**MVCC带来的好处：**\n\nMVCC是一种用来解决读-写冲突的无所并发控制（在MVCC提出之前采用的是采用**悲观锁**），也就是事务分配增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务前的数据库快照，主要解决以下问题：\n- 在并发读写数据库时，可以做到在读操作是不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能；\n- 解决脏读、幻读、不可重复读等事务隔离性问题，但不能解决更新丢失问题\n\n**MVCC组合方法**\n- MVCC + 悲观锁： MVCC解决读写冲突，悲观锁解决写写冲突\n- MVCC + 乐观锁： MVCC解决读写冲突，乐观锁解决写写冲突，这种方式可能最大程度的提高数据库并发性能，并解决读写冲突和写写冲突导致的问题\n\n### 5. MVCC的实现原理\n实现原理主要是依赖记录中的 3个隐式字段、undo日志 、ReadView 来实现的\n\n\n在Mysql的InnoDB引擎中就是指在已提交读(READ COMMITTD)和可重复读(REPEATABLE READ)这两种隔离级别下的事务对于SELECT操作会访问版本链中的记录的过程\n这就使得别的事务可以修改这条记录，反正每次修改都会在版本链中记录。SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，提升了系统的性能。\n\n#### 5.1 版本链\n```sql\nbegin;\n#触发分配TRX_ID\nselect * from t_role;\n#指定TRX_MYSQL_THREAD_ID=当前CONNECTION_ID,表示查询当前连接\nselect TRX_ID, ROLL_PTR, ROW_ID  from INFORMATION_SCHEMA.INNODB_TRX where TRX_MYSQL_THREAD_ID = CONNECTION_ID();\ncommit;\n```\n在InnoDB引擎表中，它的聚簇索引记录中有两个必要的隐藏列：\n- TRX_ID\n\n  6byte，这个id用来存储的每次对某条聚簇索引记录进行修改的时候的事务id\n\n- roll_pointer\n\n  每次对哪条聚簇索引记录有修改的时候，都会把老版本写入undo日志中。这个roll_pointer就是存了一个指针，它指向这条聚簇索引记录的上一个版本的位置，通过它来获得上一个版本的记录信息。(注意插入操作的undo日志没有这个属性，因为它没有老版本)\n\n- ROW_ID\n\n  6byte，隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引\n\n- 实际还有一个删除flag隐藏字段, 既记录被更新或删除并不代表真的删除，而是删除flag变了\n![](./mvcc/02.png)\n\n比如现在有个事务id是60的执行的这条记录的修改语句\n\n![](./mvcc/03.png)\n\n此时在undo日志中就存在版本链\n![](./mvcc/04.png)\n\n#### 5.2 ReadView\n已提交读和可重复读的区别就在于它们生成ReadView的策略不同\nReadView中主要就是有个列表来存储我们系统中当前活跃着的读写事务，也就是begin了还未提交的事务。通过这个列表来判断记录的某个版本是否对当前事务可见。假设当前列表里的事务id为[80,100]。\n\n- 如果你要访问的记录版本的事务id为50，比当前列表最小的id80小，那说明这个事务在之前就提交了，所以对当前活动的事务来说是可访问的。\n- 如果你要访问的记录版本的事务id为90,发现此事务在列表id最大值和最小值之间，那就再判断一下是否在列表内，如果在那就说明此事务还未提交，所以版本不能被访问。如果不在那说明事务已经提交，所以版本可以被访问。\n- 如果你要访问的记录版本的事务id为110，那比事务列表最大id100都大，那说明这个版本是在ReadView生成之后才发生的，所以不能被访问。\n这些记录都是去版本链里面找的，先找最近记录，如果最近这一条记录事务id不符合条件，不可见的话，再去找上一个版本再比较当前事务的id和这个版本事务id看能不能访问，以此类推直到返回可见的版本或者结束。\n\n","slug":"mvcc","published":1,"updated":"2022-04-06T09:51:44.961Z","layout":"post","photos":[],"link":"","_id":"cl424hx5r002fad5i3q275ekz","content":"<h3 id=\"1-MVCC\"><a href=\"#1-MVCC\" class=\"headerlink\" title=\"1. MVCC\"></a>1. MVCC</h3><p>全称Multi-Version Concurrency Control即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中是心啊事务内存。<br>MVCC在mysql Innodb中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使读写冲突时，也能做到不加锁，非阻塞并发读</p>\n<h3 id=\"2-当前读和快照读\"><a href=\"#2-当前读和快照读\" class=\"headerlink\" title=\"2. 当前读和快照读\"></a>2. 当前读和快照读</h3><ul>\n<li><p>当前读</p>\n<p>  像select lock in share mode（共享锁），select for update， update, insert,delete(排他锁)这些操作都是一种当前读；<strong>当前读就是读取记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁</strong>。</p>\n</li>\n<li><p>快照读</p>\n<p>  像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别（串行级别快照读会变成当前读）；快照读的实现是基于多版本并发控制（即MVCC）；可以任务MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；<br>  既然是基于多版本，即快照读可能读到的并不一定是最新版本的数据，有可能是之前的历史版本</p>\n</li>\n</ul>\n<p><strong>MVCC就是为了实现读（快照读）-写冲突不加锁，当前读实际上是一种加锁的操作，是悲观锁的实现。</strong></p>\n<hr>\n<h3 id=\"3-当前读、快照读和MVCC的关系\"><a href=\"#3-当前读、快照读和MVCC的关系\" class=\"headerlink\" title=\"3. 当前读、快照读和MVCC的关系\"></a>3. 当前读、快照读和MVCC的关系</h3><p>MVCC多版本并发控制指的是”维持一个数据的多个版本，使得读写操作没有冲突”；<br>Mysql通过快照读的方式去实现MVCC理想模型的其中一个具体非阻塞读功能，相对而言，当前读就是悲观锁的具体功能实现</p>\n<p>MVCC模型在Mysql中具体实现有3个隐式字段：undo日志、Read View等去完成的</p>\n<h3 id=\"4-MVCC的作用与好处\"><a href=\"#4-MVCC的作用与好处\" class=\"headerlink\" title=\"4. MVCC的作用与好处\"></a>4. MVCC的作用与好处</h3><p>数据库并发场景分为以下三种：</p>\n<ul>\n<li>读-读：没有问题，也不需要并发控制</li>\n<li>读-写：有线程安全问题，可能会造成事务隔离性问题，（脏读、幻读、不可重复读）</li>\n<li>写-写：有线程安全问题，可能会存在更新丢失问题</li>\n</ul>\n<p><strong>MVCC带来的好处：</strong></p>\n<p>MVCC是一种用来解决读-写冲突的无所并发控制（在MVCC提出之前采用的是采用<strong>悲观锁</strong>），也就是事务分配增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务前的数据库快照，主要解决以下问题：</p>\n<ul>\n<li>在并发读写数据库时，可以做到在读操作是不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能；</li>\n<li>解决脏读、幻读、不可重复读等事务隔离性问题，但不能解决更新丢失问题</li>\n</ul>\n<p><strong>MVCC组合方法</strong></p>\n<ul>\n<li>MVCC + 悲观锁： MVCC解决读写冲突，悲观锁解决写写冲突</li>\n<li>MVCC + 乐观锁： MVCC解决读写冲突，乐观锁解决写写冲突，这种方式可能最大程度的提高数据库并发性能，并解决读写冲突和写写冲突导致的问题</li>\n</ul>\n<h3 id=\"5-MVCC的实现原理\"><a href=\"#5-MVCC的实现原理\" class=\"headerlink\" title=\"5. MVCC的实现原理\"></a>5. MVCC的实现原理</h3><p>实现原理主要是依赖记录中的 3个隐式字段、undo日志 、ReadView 来实现的</p>\n<p>在Mysql的InnoDB引擎中就是指在已提交读(READ COMMITTD)和可重复读(REPEATABLE READ)这两种隔离级别下的事务对于SELECT操作会访问版本链中的记录的过程<br>这就使得别的事务可以修改这条记录，反正每次修改都会在版本链中记录。SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，提升了系统的性能。</p>\n<h4 id=\"5-1-版本链\"><a href=\"#5-1-版本链\" class=\"headerlink\" title=\"5.1 版本链\"></a>5.1 版本链</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span>;</span><br><span class=\"line\">#触发分配TRX_ID</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t_role;</span><br><span class=\"line\">#指定TRX_MYSQL_THREAD_ID<span class=\"operator\">=</span>当前CONNECTION_ID,表示查询当前连接</span><br><span class=\"line\"><span class=\"keyword\">select</span> TRX_ID, ROLL_PTR, ROW_ID  <span class=\"keyword\">from</span> INFORMATION_SCHEMA.INNODB_TRX <span class=\"keyword\">where</span> TRX_MYSQL_THREAD_ID <span class=\"operator\">=</span> CONNECTION_ID();</span><br><span class=\"line\"><span class=\"keyword\">commit</span>;</span><br></pre></td></tr></table></figure>\n<p>在InnoDB引擎表中，它的聚簇索引记录中有两个必要的隐藏列：</p>\n<ul>\n<li><p>TRX_ID</p>\n<p>6byte，这个id用来存储的每次对某条聚簇索引记录进行修改的时候的事务id</p>\n</li>\n<li><p>roll_pointer</p>\n<p>每次对哪条聚簇索引记录有修改的时候，都会把老版本写入undo日志中。这个roll_pointer就是存了一个指针，它指向这条聚簇索引记录的上一个版本的位置，通过它来获得上一个版本的记录信息。(注意插入操作的undo日志没有这个属性，因为它没有老版本)</p>\n</li>\n<li><p>ROW_ID</p>\n<p>6byte，隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引</p>\n</li>\n<li><p>实际还有一个删除flag隐藏字段, 既记录被更新或删除并不代表真的删除，而是删除flag变了<br><img src=\"/mvcc/02.png\"></p>\n</li>\n</ul>\n<p>比如现在有个事务id是60的执行的这条记录的修改语句</p>\n<p><img src=\"/mvcc/03.png\"></p>\n<p>此时在undo日志中就存在版本链<br><img src=\"/mvcc/04.png\"></p>\n<h4 id=\"5-2-ReadView\"><a href=\"#5-2-ReadView\" class=\"headerlink\" title=\"5.2 ReadView\"></a>5.2 ReadView</h4><p>已提交读和可重复读的区别就在于它们生成ReadView的策略不同<br>ReadView中主要就是有个列表来存储我们系统中当前活跃着的读写事务，也就是begin了还未提交的事务。通过这个列表来判断记录的某个版本是否对当前事务可见。假设当前列表里的事务id为[80,100]。</p>\n<ul>\n<li>如果你要访问的记录版本的事务id为50，比当前列表最小的id80小，那说明这个事务在之前就提交了，所以对当前活动的事务来说是可访问的。</li>\n<li>如果你要访问的记录版本的事务id为90,发现此事务在列表id最大值和最小值之间，那就再判断一下是否在列表内，如果在那就说明此事务还未提交，所以版本不能被访问。如果不在那说明事务已经提交，所以版本可以被访问。</li>\n<li>如果你要访问的记录版本的事务id为110，那比事务列表最大id100都大，那说明这个版本是在ReadView生成之后才发生的，所以不能被访问。<br>这些记录都是去版本链里面找的，先找最近记录，如果最近这一条记录事务id不符合条件，不可见的话，再去找上一个版本再比较当前事务的id和这个版本事务id看能不能访问，以此类推直到返回可见的版本或者结束。</li>\n</ul>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h3 id=\"1-MVCC\"><a href=\"#1-MVCC\" class=\"headerlink\" title=\"1. MVCC\"></a>1. MVCC</h3><p>全称Multi-Version Concurrency Control即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中是心啊事务内存。<br>MVCC在mysql Innodb中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使读写冲突时，也能做到不加锁，非阻塞并发读</p>\n<h3 id=\"2-当前读和快照读\"><a href=\"#2-当前读和快照读\" class=\"headerlink\" title=\"2. 当前读和快照读\"></a>2. 当前读和快照读</h3><ul>\n<li><p>当前读</p>\n<p>  像select lock in share mode（共享锁），select for update， update, insert,delete(排他锁)这些操作都是一种当前读；<strong>当前读就是读取记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁</strong>。</p>\n</li>\n<li><p>快照读</p>\n<p>  像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别（串行级别快照读会变成当前读）；快照读的实现是基于多版本并发控制（即MVCC）；可以任务MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；<br>  既然是基于多版本，即快照读可能读到的并不一定是最新版本的数据，有可能是之前的历史版本</p>\n</li>\n</ul>\n<p><strong>MVCC就是为了实现读（快照读）-写冲突不加锁，当前读实际上是一种加锁的操作，是悲观锁的实现。</strong></p>\n<hr>\n<h3 id=\"3-当前读、快照读和MVCC的关系\"><a href=\"#3-当前读、快照读和MVCC的关系\" class=\"headerlink\" title=\"3. 当前读、快照读和MVCC的关系\"></a>3. 当前读、快照读和MVCC的关系</h3><p>MVCC多版本并发控制指的是”维持一个数据的多个版本，使得读写操作没有冲突”；<br>Mysql通过快照读的方式去实现MVCC理想模型的其中一个具体非阻塞读功能，相对而言，当前读就是悲观锁的具体功能实现</p>\n<p>MVCC模型在Mysql中具体实现有3个隐式字段：undo日志、Read View等去完成的</p>\n<h3 id=\"4-MVCC的作用与好处\"><a href=\"#4-MVCC的作用与好处\" class=\"headerlink\" title=\"4. MVCC的作用与好处\"></a>4. MVCC的作用与好处</h3><p>数据库并发场景分为以下三种：</p>\n<ul>\n<li>读-读：没有问题，也不需要并发控制</li>\n<li>读-写：有线程安全问题，可能会造成事务隔离性问题，（脏读、幻读、不可重复读）</li>\n<li>写-写：有线程安全问题，可能会存在更新丢失问题</li>\n</ul>\n<p><strong>MVCC带来的好处：</strong></p>\n<p>MVCC是一种用来解决读-写冲突的无所并发控制（在MVCC提出之前采用的是采用<strong>悲观锁</strong>），也就是事务分配增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务前的数据库快照，主要解决以下问题：</p>\n<ul>\n<li>在并发读写数据库时，可以做到在读操作是不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能；</li>\n<li>解决脏读、幻读、不可重复读等事务隔离性问题，但不能解决更新丢失问题</li>\n</ul>\n<p><strong>MVCC组合方法</strong></p>\n<ul>\n<li>MVCC + 悲观锁： MVCC解决读写冲突，悲观锁解决写写冲突</li>\n<li>MVCC + 乐观锁： MVCC解决读写冲突，乐观锁解决写写冲突，这种方式可能最大程度的提高数据库并发性能，并解决读写冲突和写写冲突导致的问题</li>\n</ul>\n<h3 id=\"5-MVCC的实现原理\"><a href=\"#5-MVCC的实现原理\" class=\"headerlink\" title=\"5. MVCC的实现原理\"></a>5. MVCC的实现原理</h3><p>实现原理主要是依赖记录中的 3个隐式字段、undo日志 、ReadView 来实现的</p>\n<p>在Mysql的InnoDB引擎中就是指在已提交读(READ COMMITTD)和可重复读(REPEATABLE READ)这两种隔离级别下的事务对于SELECT操作会访问版本链中的记录的过程<br>这就使得别的事务可以修改这条记录，反正每次修改都会在版本链中记录。SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，提升了系统的性能。</p>\n<h4 id=\"5-1-版本链\"><a href=\"#5-1-版本链\" class=\"headerlink\" title=\"5.1 版本链\"></a>5.1 版本链</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span>;</span><br><span class=\"line\">#触发分配TRX_ID</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t_role;</span><br><span class=\"line\">#指定TRX_MYSQL_THREAD_ID<span class=\"operator\">=</span>当前CONNECTION_ID,表示查询当前连接</span><br><span class=\"line\"><span class=\"keyword\">select</span> TRX_ID, ROLL_PTR, ROW_ID  <span class=\"keyword\">from</span> INFORMATION_SCHEMA.INNODB_TRX <span class=\"keyword\">where</span> TRX_MYSQL_THREAD_ID <span class=\"operator\">=</span> CONNECTION_ID();</span><br><span class=\"line\"><span class=\"keyword\">commit</span>;</span><br></pre></td></tr></table></figure>\n<p>在InnoDB引擎表中，它的聚簇索引记录中有两个必要的隐藏列：</p>\n<ul>\n<li><p>TRX_ID</p>\n<p>6byte，这个id用来存储的每次对某条聚簇索引记录进行修改的时候的事务id</p>\n</li>\n<li><p>roll_pointer</p>\n<p>每次对哪条聚簇索引记录有修改的时候，都会把老版本写入undo日志中。这个roll_pointer就是存了一个指针，它指向这条聚簇索引记录的上一个版本的位置，通过它来获得上一个版本的记录信息。(注意插入操作的undo日志没有这个属性，因为它没有老版本)</p>\n</li>\n<li><p>ROW_ID</p>\n<p>6byte，隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引</p>\n</li>\n<li><p>实际还有一个删除flag隐藏字段, 既记录被更新或删除并不代表真的删除，而是删除flag变了<br><img src=\"/mvcc/02.png\"></p>\n</li>\n</ul>\n<p>比如现在有个事务id是60的执行的这条记录的修改语句</p>\n<p><img src=\"/mvcc/03.png\"></p>\n<p>此时在undo日志中就存在版本链<br><img src=\"/mvcc/04.png\"></p>\n<h4 id=\"5-2-ReadView\"><a href=\"#5-2-ReadView\" class=\"headerlink\" title=\"5.2 ReadView\"></a>5.2 ReadView</h4><p>已提交读和可重复读的区别就在于它们生成ReadView的策略不同<br>ReadView中主要就是有个列表来存储我们系统中当前活跃着的读写事务，也就是begin了还未提交的事务。通过这个列表来判断记录的某个版本是否对当前事务可见。假设当前列表里的事务id为[80,100]。</p>\n<ul>\n<li>如果你要访问的记录版本的事务id为50，比当前列表最小的id80小，那说明这个事务在之前就提交了，所以对当前活动的事务来说是可访问的。</li>\n<li>如果你要访问的记录版本的事务id为90,发现此事务在列表id最大值和最小值之间，那就再判断一下是否在列表内，如果在那就说明此事务还未提交，所以版本不能被访问。如果不在那说明事务已经提交，所以版本可以被访问。</li>\n<li>如果你要访问的记录版本的事务id为110，那比事务列表最大id100都大，那说明这个版本是在ReadView生成之后才发生的，所以不能被访问。<br>这些记录都是去版本链里面找的，先找最近记录，如果最近这一条记录事务id不符合条件，不可见的话，再去找上一个版本再比较当前事务的id和这个版本事务id看能不能访问，以此类推直到返回可见的版本或者结束。</li>\n</ul>\n"},{"title":"mysql索引","comments":1,"abbrlink":22569,"date":"2021-08-20T07:12:00.000Z","translate_title":"mysql_02","_content":"拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。\n索引分单列索引和组合索引。\n- 单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。 \n- 组合索引，即一个索引包含多个列。\n\n创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。\n实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。\n上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：\n虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。\n建立索引会占用磁盘空间的索引文件。\n\n## 1.普通索引\n- 创建索引\n    ```sql\n    -- 如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。\n    CREATE INDEX indexName on table_name (column_name )\n    ```\n- 添加索引（修改表结构）\n    ```sql\n    -- 表结构已经存在了，然后使用alter修改表结构添加索引\n    alter table table_name  add INDEX indexName(column_name )\n    ```\n- 创建表指定\n    ```sql\n    CREATE TABLE mytable(  \n        ID INT NOT NULL,   \n        username VARCHAR(16) NOT NULL,  \n        INDEX [indexName] (username(length))  \n    ); \n    ```\n- 删除索引\n    ```sql\n    drop index [indexName] on  table_name \n    ```\n  \n## 2. 唯一索引\n他和普通索引类似，不同的是：索引列的值必须唯一，但允许有控制。如果是组合索引，则列值的组合必须唯一。\n- 创建索引\n    ```sql\n    CREATE UNIQUE INDEX indexName ON table_name (column_name (length ))\n    ```\n  \n- 修改表结构\n    ```sql\n    ALTER table mytable ADD UNIQUE [indexName] (column_name(length))\n    ```\n  \n- 创建表的时候指定\n    ```sql\n    CREATE TABLE mytable(  \n        ID INT NOT NULL,   \n        username VARCHAR(16) NOT NULL,  \n        UNIQUE [indexName] (username(length))  \n    );\n    ```\n## 3.组合索引\n- 修改表结构指定索引\n    ```sql\n    ALTER TABLE table_name ADD INDEX indexName (column_name1 , column_name2,...)\n    ```\n- 创建表的时候指定\n    ```sql\n    CREATE TABLE mytable(  \n        ID INT NOT NULL,   \n        username VARCHAR(16) NOT NULL,  \n        KEY [indexName] (column_name1 , column_name2,...)  \n    );\n    ```\n### 3.1 组合索引查询问题\n**问题描述：**在mysql中有张表test_a，有3个字段id,name,num；对这三个字段建立组合索引，那么查询时使用其中某两个或者一个作为查询条件，是否还会走索引\n![表结构](./mysql-index/01.png)\n根据查询字段的位置不同来决定，如查询**id**、**id,num**、**id,num,name**、 **id, name** 都可以走索引的，其他条件的查询不能走索引。\n\n**组合索引 有“最左前缀”原则。就是只从最左面的开始组合，并不是所有只要含有这三列存在的字段的查询都会用到该组合索引**\n```sql\n-- 添加组合索引\nALTER TABLE test_a ADD INDEX 'lianhe'(id, num, name)\n```\n1. 使用三个字段id, num, name查询\n```sql\n-- 只要三个条件都有，可以随意变换位置，结果都会走索引\n-- 优化器会将条件顺序优化成上面三种情况后执行\nEXPLAIN SELECT * FROM test_a WHERE id=1 AND num='001' AND name = '1#'\n```\n![使用三个字段id, num, name查询](./mysql-index/02.png)\n从执行结果上可以看到是从走索引进行查询的\n\n2. 使用num, name 查询\n```sql\nEXPLAIN SELECT * FROM test_a WHERE name = '1#'\n\nEXPLAIN SELECT * FROM test_a WHERE num='001' \n```\n![使用id, name 查询](./mysql-index/03.png)\n3. 使用id, name或者id, num 查询\n```sql\n-- 只要包括id，可以随意变换位置，结果都会走索引\n-- 优化器会将条件顺序优化成上面三种情况后执行\n--如果只有两个字段，只有id条件命中，num或者name 条件不走联合索引。\nEXPLAIN SELECT * FROM test_a WHERE id=1 AND name = '1#'\n```\n![使用id, name 查询](./mysql-index/02.png)\n\n\n需要避免索引失效的情况，如：LIKE %xxx，或者条件中使用函数等。\n4. 使用id查询\n```sql\nEXPLAIN SELECT * FROM test_a WHERE id=1\n```\n![使用id查询](./mysql-index/02.png)\n\n5. 使用name或者num查询\n```sql\nEXPLAIN SELECT * FROM test_a WHERE name = '1#'\n\nEXPLAIN SELECT * FROM test_a WHERE num = '001'\n```\n\n### 3.2 创建组合索引选择规则\n- 经常用的列优先（最左匹配原则）\n- 离散度高的列优先（离散度高原则）\n- 宽度小的列优先（最少空间原则）\n\n## 4.使用alter命令添加索引\n```sql\n-- 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。\nALTER TABLE tbl_name ADD PRIMARY KEY (column_list): \n    \n--  这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。\nALTER TABLE tbl_name ADD UNIQUE index_name (column_list):\n\n-- 添加普通索引，索引值可出现多次。\nALTER TABLE tbl_name ADD INDEX index_name (column_list):\n\n--该语句指定了索引为 FULLTEXT ，用于全文索引。\nALTER TABLE tbl_name ADD FULLTEXT index_name (column_list):\n```\n  \n\n\n\n","source":"_posts/2021/07/mysql-index.md","raw":"---\ntitle: mysql索引\ntags: mysql\ncategories: mysql\ncomments: true\nabbrlink: 22569\ndate: 2021-08-20 15:12:00\ntranslate_title: mysql_02\n---\n拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。\n索引分单列索引和组合索引。\n- 单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。 \n- 组合索引，即一个索引包含多个列。\n\n创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。\n实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。\n上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：\n虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。\n建立索引会占用磁盘空间的索引文件。\n\n## 1.普通索引\n- 创建索引\n    ```sql\n    -- 如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。\n    CREATE INDEX indexName on table_name (column_name )\n    ```\n- 添加索引（修改表结构）\n    ```sql\n    -- 表结构已经存在了，然后使用alter修改表结构添加索引\n    alter table table_name  add INDEX indexName(column_name )\n    ```\n- 创建表指定\n    ```sql\n    CREATE TABLE mytable(  \n        ID INT NOT NULL,   \n        username VARCHAR(16) NOT NULL,  \n        INDEX [indexName] (username(length))  \n    ); \n    ```\n- 删除索引\n    ```sql\n    drop index [indexName] on  table_name \n    ```\n  \n## 2. 唯一索引\n他和普通索引类似，不同的是：索引列的值必须唯一，但允许有控制。如果是组合索引，则列值的组合必须唯一。\n- 创建索引\n    ```sql\n    CREATE UNIQUE INDEX indexName ON table_name (column_name (length ))\n    ```\n  \n- 修改表结构\n    ```sql\n    ALTER table mytable ADD UNIQUE [indexName] (column_name(length))\n    ```\n  \n- 创建表的时候指定\n    ```sql\n    CREATE TABLE mytable(  \n        ID INT NOT NULL,   \n        username VARCHAR(16) NOT NULL,  \n        UNIQUE [indexName] (username(length))  \n    );\n    ```\n## 3.组合索引\n- 修改表结构指定索引\n    ```sql\n    ALTER TABLE table_name ADD INDEX indexName (column_name1 , column_name2,...)\n    ```\n- 创建表的时候指定\n    ```sql\n    CREATE TABLE mytable(  \n        ID INT NOT NULL,   \n        username VARCHAR(16) NOT NULL,  \n        KEY [indexName] (column_name1 , column_name2,...)  \n    );\n    ```\n### 3.1 组合索引查询问题\n**问题描述：**在mysql中有张表test_a，有3个字段id,name,num；对这三个字段建立组合索引，那么查询时使用其中某两个或者一个作为查询条件，是否还会走索引\n![表结构](./mysql-index/01.png)\n根据查询字段的位置不同来决定，如查询**id**、**id,num**、**id,num,name**、 **id, name** 都可以走索引的，其他条件的查询不能走索引。\n\n**组合索引 有“最左前缀”原则。就是只从最左面的开始组合，并不是所有只要含有这三列存在的字段的查询都会用到该组合索引**\n```sql\n-- 添加组合索引\nALTER TABLE test_a ADD INDEX 'lianhe'(id, num, name)\n```\n1. 使用三个字段id, num, name查询\n```sql\n-- 只要三个条件都有，可以随意变换位置，结果都会走索引\n-- 优化器会将条件顺序优化成上面三种情况后执行\nEXPLAIN SELECT * FROM test_a WHERE id=1 AND num='001' AND name = '1#'\n```\n![使用三个字段id, num, name查询](./mysql-index/02.png)\n从执行结果上可以看到是从走索引进行查询的\n\n2. 使用num, name 查询\n```sql\nEXPLAIN SELECT * FROM test_a WHERE name = '1#'\n\nEXPLAIN SELECT * FROM test_a WHERE num='001' \n```\n![使用id, name 查询](./mysql-index/03.png)\n3. 使用id, name或者id, num 查询\n```sql\n-- 只要包括id，可以随意变换位置，结果都会走索引\n-- 优化器会将条件顺序优化成上面三种情况后执行\n--如果只有两个字段，只有id条件命中，num或者name 条件不走联合索引。\nEXPLAIN SELECT * FROM test_a WHERE id=1 AND name = '1#'\n```\n![使用id, name 查询](./mysql-index/02.png)\n\n\n需要避免索引失效的情况，如：LIKE %xxx，或者条件中使用函数等。\n4. 使用id查询\n```sql\nEXPLAIN SELECT * FROM test_a WHERE id=1\n```\n![使用id查询](./mysql-index/02.png)\n\n5. 使用name或者num查询\n```sql\nEXPLAIN SELECT * FROM test_a WHERE name = '1#'\n\nEXPLAIN SELECT * FROM test_a WHERE num = '001'\n```\n\n### 3.2 创建组合索引选择规则\n- 经常用的列优先（最左匹配原则）\n- 离散度高的列优先（离散度高原则）\n- 宽度小的列优先（最少空间原则）\n\n## 4.使用alter命令添加索引\n```sql\n-- 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。\nALTER TABLE tbl_name ADD PRIMARY KEY (column_list): \n    \n--  这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。\nALTER TABLE tbl_name ADD UNIQUE index_name (column_list):\n\n-- 添加普通索引，索引值可出现多次。\nALTER TABLE tbl_name ADD INDEX index_name (column_list):\n\n--该语句指定了索引为 FULLTEXT ，用于全文索引。\nALTER TABLE tbl_name ADD FULLTEXT index_name (column_list):\n```\n  \n\n\n\n","slug":"mysql-index","published":1,"updated":"2022-04-06T09:51:44.939Z","layout":"post","photos":[],"link":"","_id":"cl424hx5s002jad5ifru6fpmi","content":"<p>拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。<br>索引分单列索引和组合索引。</p>\n<ul>\n<li>单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。 </li>\n<li>组合索引，即一个索引包含多个列。</li>\n</ul>\n<p>创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。<br>实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。<br>上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：<br>虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。<br>建立索引会占用磁盘空间的索引文件。</p>\n<h2 id=\"1-普通索引\"><a href=\"#1-普通索引\" class=\"headerlink\" title=\"1.普通索引\"></a>1.普通索引</h2><ul>\n<li>创建索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX indexName <span class=\"keyword\">on</span> table_name (column_name )</span><br></pre></td></tr></table></figure></li>\n<li>添加索引（修改表结构）  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 表结构已经存在了，然后使用alter修改表结构添加索引</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name  <span class=\"keyword\">add</span> INDEX indexName(column_name )</span><br></pre></td></tr></table></figure></li>\n<li>创建表指定  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mytable(  </span><br><span class=\"line\">    ID <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,   </span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,  </span><br><span class=\"line\">    INDEX [indexName] (username(length))  </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure></li>\n<li>删除索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> index [indexName] <span class=\"keyword\">on</span>  table_name </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"2-唯一索引\"><a href=\"#2-唯一索引\" class=\"headerlink\" title=\"2. 唯一索引\"></a>2. 唯一索引</h2><p>他和普通索引类似，不同的是：索引列的值必须唯一，但允许有控制。如果是组合索引，则列值的组合必须唯一。</p>\n<ul>\n<li>创建索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX indexName <span class=\"keyword\">ON</span> table_name (column_name (length ))</span><br></pre></td></tr></table></figure></li>\n<li>修改表结构  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">table</span> mytable <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> [indexName] (column_name(length))</span><br></pre></td></tr></table></figure></li>\n<li>创建表的时候指定  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mytable(  </span><br><span class=\"line\">    ID <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,   </span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,  </span><br><span class=\"line\">    <span class=\"keyword\">UNIQUE</span> [indexName] (username(length))  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-组合索引\"><a href=\"#3-组合索引\" class=\"headerlink\" title=\"3.组合索引\"></a>3.组合索引</h2></li>\n<li>修改表结构指定索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> INDEX indexName (column_name1 , column_name2,...)</span><br></pre></td></tr></table></figure></li>\n<li>创建表的时候指定  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mytable(  </span><br><span class=\"line\">    ID <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,   </span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,  </span><br><span class=\"line\">    KEY [indexName] (column_name1 , column_name2,...)  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-组合索引查询问题\"><a href=\"#3-1-组合索引查询问题\" class=\"headerlink\" title=\"3.1 组合索引查询问题\"></a>3.1 组合索引查询问题</h3></li>\n</ul>\n<p><strong>问题描述：</strong>在mysql中有张表test_a，有3个字段id,name,num；对这三个字段建立组合索引，那么查询时使用其中某两个或者一个作为查询条件，是否还会走索引<br><img src=\"/mysql-index/01.png\" alt=\"表结构\"><br>根据查询字段的位置不同来决定，如查询<strong>id</strong>、<strong>id,num</strong>、<strong>id,num,name</strong>、 <strong>id, name</strong> 都可以走索引的，其他条件的查询不能走索引。</p>\n<p><strong>组合索引 有“最左前缀”原则。就是只从最左面的开始组合，并不是所有只要含有这三列存在的字段的查询都会用到该组合索引</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加组合索引</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> test_a <span class=\"keyword\">ADD</span> INDEX <span class=\"string\">&#x27;lianhe&#x27;</span>(id, num, name)</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>使用三个字段id, num, name查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 只要三个条件都有，可以随意变换位置，结果都会走索引</span></span><br><span class=\"line\"><span class=\"comment\">-- 优化器会将条件顺序优化成上面三种情况后执行</span></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">AND</span> num<span class=\"operator\">=</span><span class=\"string\">&#x27;001&#x27;</span> <span class=\"keyword\">AND</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-index/02.png\" alt=\"使用三个字段id, num, name查询\"><br>从执行结果上可以看到是从走索引进行查询的</p>\n</li>\n<li><p>使用num, name 查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> num<span class=\"operator\">=</span><span class=\"string\">&#x27;001&#x27;</span> </span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-index/03.png\" alt=\"使用id, name 查询\"></p>\n</li>\n<li><p>使用id, name或者id, num 查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 只要包括id，可以随意变换位置，结果都会走索引</span></span><br><span class=\"line\"><span class=\"comment\">-- 优化器会将条件顺序优化成上面三种情况后执行</span></span><br><span class=\"line\"><span class=\"comment\">--如果只有两个字段，只有id条件命中，num或者name 条件不走联合索引。</span></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">AND</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-index/02.png\" alt=\"使用id, name 查询\"></p>\n</li>\n</ol>\n<p>需要避免索引失效的情况，如：LIKE %xxx，或者条件中使用函数等。<br>4. 使用id查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-index/02.png\" alt=\"使用id查询\"></p>\n<ol start=\"5\">\n<li>使用name或者num查询<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> num <span class=\"operator\">=</span> <span class=\"string\">&#x27;001&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"3-2-创建组合索引选择规则\"><a href=\"#3-2-创建组合索引选择规则\" class=\"headerlink\" title=\"3.2 创建组合索引选择规则\"></a>3.2 创建组合索引选择规则</h3><ul>\n<li>经常用的列优先（最左匹配原则）</li>\n<li>离散度高的列优先（离散度高原则）</li>\n<li>宽度小的列优先（最少空间原则）</li>\n</ul>\n<h2 id=\"4-使用alter命令添加索引\"><a href=\"#4-使用alter命令添加索引\" class=\"headerlink\" title=\"4.使用alter命令添加索引\"></a>4.使用alter命令添加索引</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">PRIMARY</span> KEY (column_list): </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">--  这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> index_name (column_list):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 添加普通索引，索引值可出现多次。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> INDEX index_name (column_list):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--该语句指定了索引为 FULLTEXT ，用于全文索引。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> FULLTEXT index_name (column_list):</span><br></pre></td></tr></table></figure>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。<br>索引分单列索引和组合索引。</p>\n<ul>\n<li>单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。 </li>\n<li>组合索引，即一个索引包含多个列。</li>\n</ul>\n<p>创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。<br>实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。<br>上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：<br>虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。<br>建立索引会占用磁盘空间的索引文件。</p>\n<h2 id=\"1-普通索引\"><a href=\"#1-普通索引\" class=\"headerlink\" title=\"1.普通索引\"></a>1.普通索引</h2><ul>\n<li>创建索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX indexName <span class=\"keyword\">on</span> table_name (column_name )</span><br></pre></td></tr></table></figure></li>\n<li>添加索引（修改表结构）  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 表结构已经存在了，然后使用alter修改表结构添加索引</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name  <span class=\"keyword\">add</span> INDEX indexName(column_name )</span><br></pre></td></tr></table></figure></li>\n<li>创建表指定  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mytable(  </span><br><span class=\"line\">    ID <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,   </span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,  </span><br><span class=\"line\">    INDEX [indexName] (username(length))  </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure></li>\n<li>删除索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> index [indexName] <span class=\"keyword\">on</span>  table_name </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"2-唯一索引\"><a href=\"#2-唯一索引\" class=\"headerlink\" title=\"2. 唯一索引\"></a>2. 唯一索引</h2><p>他和普通索引类似，不同的是：索引列的值必须唯一，但允许有控制。如果是组合索引，则列值的组合必须唯一。</p>\n<ul>\n<li>创建索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX indexName <span class=\"keyword\">ON</span> table_name (column_name (length ))</span><br></pre></td></tr></table></figure></li>\n<li>修改表结构  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">table</span> mytable <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> [indexName] (column_name(length))</span><br></pre></td></tr></table></figure></li>\n<li>创建表的时候指定  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mytable(  </span><br><span class=\"line\">    ID <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,   </span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,  </span><br><span class=\"line\">    <span class=\"keyword\">UNIQUE</span> [indexName] (username(length))  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-组合索引\"><a href=\"#3-组合索引\" class=\"headerlink\" title=\"3.组合索引\"></a>3.组合索引</h2></li>\n<li>修改表结构指定索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> INDEX indexName (column_name1 , column_name2,...)</span><br></pre></td></tr></table></figure></li>\n<li>创建表的时候指定  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mytable(  </span><br><span class=\"line\">    ID <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,   </span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,  </span><br><span class=\"line\">    KEY [indexName] (column_name1 , column_name2,...)  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-组合索引查询问题\"><a href=\"#3-1-组合索引查询问题\" class=\"headerlink\" title=\"3.1 组合索引查询问题\"></a>3.1 组合索引查询问题</h3></li>\n</ul>\n<p><strong>问题描述：</strong>在mysql中有张表test_a，有3个字段id,name,num；对这三个字段建立组合索引，那么查询时使用其中某两个或者一个作为查询条件，是否还会走索引<br><img src=\"/mysql-index/01.png\" alt=\"表结构\"><br>根据查询字段的位置不同来决定，如查询<strong>id</strong>、<strong>id,num</strong>、<strong>id,num,name</strong>、 <strong>id, name</strong> 都可以走索引的，其他条件的查询不能走索引。</p>\n<p><strong>组合索引 有“最左前缀”原则。就是只从最左面的开始组合，并不是所有只要含有这三列存在的字段的查询都会用到该组合索引</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加组合索引</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> test_a <span class=\"keyword\">ADD</span> INDEX <span class=\"string\">&#x27;lianhe&#x27;</span>(id, num, name)</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>使用三个字段id, num, name查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 只要三个条件都有，可以随意变换位置，结果都会走索引</span></span><br><span class=\"line\"><span class=\"comment\">-- 优化器会将条件顺序优化成上面三种情况后执行</span></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">AND</span> num<span class=\"operator\">=</span><span class=\"string\">&#x27;001&#x27;</span> <span class=\"keyword\">AND</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-index/02.png\" alt=\"使用三个字段id, num, name查询\"><br>从执行结果上可以看到是从走索引进行查询的</p>\n</li>\n<li><p>使用num, name 查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> num<span class=\"operator\">=</span><span class=\"string\">&#x27;001&#x27;</span> </span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-index/03.png\" alt=\"使用id, name 查询\"></p>\n</li>\n<li><p>使用id, name或者id, num 查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 只要包括id，可以随意变换位置，结果都会走索引</span></span><br><span class=\"line\"><span class=\"comment\">-- 优化器会将条件顺序优化成上面三种情况后执行</span></span><br><span class=\"line\"><span class=\"comment\">--如果只有两个字段，只有id条件命中，num或者name 条件不走联合索引。</span></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">AND</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-index/02.png\" alt=\"使用id, name 查询\"></p>\n</li>\n</ol>\n<p>需要避免索引失效的情况，如：LIKE %xxx，或者条件中使用函数等。<br>4. 使用id查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-index/02.png\" alt=\"使用id查询\"></p>\n<ol start=\"5\">\n<li>使用name或者num查询<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> num <span class=\"operator\">=</span> <span class=\"string\">&#x27;001&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"3-2-创建组合索引选择规则\"><a href=\"#3-2-创建组合索引选择规则\" class=\"headerlink\" title=\"3.2 创建组合索引选择规则\"></a>3.2 创建组合索引选择规则</h3><ul>\n<li>经常用的列优先（最左匹配原则）</li>\n<li>离散度高的列优先（离散度高原则）</li>\n<li>宽度小的列优先（最少空间原则）</li>\n</ul>\n<h2 id=\"4-使用alter命令添加索引\"><a href=\"#4-使用alter命令添加索引\" class=\"headerlink\" title=\"4.使用alter命令添加索引\"></a>4.使用alter命令添加索引</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">PRIMARY</span> KEY (column_list): </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">--  这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> index_name (column_list):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 添加普通索引，索引值可出现多次。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> INDEX index_name (column_list):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--该语句指定了索引为 FULLTEXT ，用于全文索引。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> FULLTEXT index_name (column_list):</span><br></pre></td></tr></table></figure>\n"},{"title":"mysql事务","comments":1,"abbrlink":33118,"date":"2021-07-23T08:00:57.000Z","translate_title":"mysql_03","_content":"## 事务的定义\n\n事务是数据管理系统DBMS执行过程中的一个**逻辑单位**，有一个有限的数据库**操作序列**构成\n\n## 事务四大特性\n\n1.  原子性atomicity：依赖undo log做到全部失败\n2.  隔离性isolation：实现方式LBCC 和 MVCC\n3.  持久性durability ：实现方式redo log和double write\n4.  一致性consistency：通过上面的三种方式实现\n\n数据恢复：\n\n-   redo log 崩溃恢复\n-   双写缓冲（double write）\n\n\n\nMysql中insert、delete、update 自带事务\n\n```sql\nshow veriables like ‘autocommit’;\nset session autocommit = on;\nupdate xxx where set xx =1 ;\ncommit;\n```\n\n结束事务两种方式：rollback     commit\n\n## 事务并发的三大问题\n\n数据并发的三大问题其实都是数据库读一致性问题，必须有数据库提供一定的事务隔离机制来解决。\n\n### 脏读\n![image-20200727224117281](./mysql-transcation/image-20201202210510525.png)\n\n### 不可重复读\n![image-20200727224117281](./mysql-transcation/image-20201202210235089.png)\n\n\n\n### 幻读\n![image-20200727224117281](./mysql-transcation/image-20201202210357906.png)\n\n\n## 事务隔离级别\n\nhttp://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt\n![image-20200727224117281](./mysql-transcation/image-20201202210817094.png)\n![image-20200727224117281](./mysql-transcation/image-20201202211406282.png)\n\n![image-20201202211752764](./mysql-transcation/image-20201202211752764.png)\n\n### MVCC思想\n\n![image-20201202212103393](./mysql-transcation/image-20201202212103393.png)\n\n#### Read View（一致性试图）\n\n存储内容\n\n![image-20201202213520136](./mysql-transcation/image-20201202213520136.png)\n\n\n\n#### Read View判断规则\n\n![image-20201202213757692](./mysql-transcation/image-20201202213757692.png)\n\n#### RC与RR read View 的区别\n\n![image-20201202214418001](./mysql-transcation/image-20201202214418001.png)\n\n所以RC解决不了脏读的问题\n\n# Mysql InnoDb所得基本类型\n\nInnoDB支持行锁\n\nMyiSAM支持行锁\n\n表锁和行锁的区别\n\n-   锁力度：表锁 > 行锁\n-   加锁效率：表锁 > 行锁\n-   冲突概率：表锁 > 行锁\n-   并发性能：表锁 < 行锁\n\n## 表锁\n\n![image-20201202214957559](./mysql-transcation/image-20201202214957559.png)\n\n一个事务能够给一张表加上锁的前提是：没有其他任何一个事务锁定了这张表的任意一行数据。如果没有意向锁的话，那么加表锁需要扫描表中的每行数据，大大的浪费时间；\n\n如果在添加行锁的时候，会在表上添加意向锁，那么在添加表锁的时候就不需要去扫描所有表数据了，只需要看下表上是否由意向锁就可；\n\n## 行锁\n\n### 共享锁shared locks\n\n![image-20201202215350319](./mysql-transcation/image-20201202215350319.png)\n\n\n\n### 排它锁Exclusive locks\n\n![image-20201202215717524](./mysql-transcation/image-20201202215717524.png)\n\n\n\n\n\n### Innodb行锁锁定的是什么\n\n锁定的是index索引，如果表中没有索引，那么Innodb会把隐藏列DB_ROW_ID当作聚集索引\n\n加锁一定要加上条件，不然会锁表\n\n![image-20201202222250939](./mysql-transcation/image-20201202222250939.png)\n\n### 记录锁Rcord Lock 锁定记录\n\n![image-20201202222823984](./mysql-transcation/image-20201202222823984.png)\n\n### 间隙锁Gap Lock 锁定范围\n\n专门用于阻塞插入，间隙锁如果没有命中的话，会锁定最后一个值到正无穷，那么在最后一个值和正无穷之间的插入都不能成功。\n\n![image-20201202222914087](./mysql-transcation/image-20201202222914087.png)\n\n### 临健锁Next-key Lock ：锁定范围加记录\n\n![image-20201202223655445](./mysql-transcation/image-20201202223655445.png)\n\n**为了解决幻读的问题**\n\n### 事务隔离级别的实现\n\n![image-20201202224136052](./mysql-transcation/image-20201202224136052.png)\n\n### 事务隔离级别的选择\n\n![image-20201202224412832](./mysql-transcation/image-20201202224412832.png)\n\n\n","source":"_posts/2021/07/mysql-transcation.md","raw":"---\ntitle: mysql事务\ntags: mysql\ncategories: mysql\ncomments: true\nabbrlink: 33118\ndate: 2021-07-23 16:00:57\ntranslate_title: mysql_03\n---\n## 事务的定义\n\n事务是数据管理系统DBMS执行过程中的一个**逻辑单位**，有一个有限的数据库**操作序列**构成\n\n## 事务四大特性\n\n1.  原子性atomicity：依赖undo log做到全部失败\n2.  隔离性isolation：实现方式LBCC 和 MVCC\n3.  持久性durability ：实现方式redo log和double write\n4.  一致性consistency：通过上面的三种方式实现\n\n数据恢复：\n\n-   redo log 崩溃恢复\n-   双写缓冲（double write）\n\n\n\nMysql中insert、delete、update 自带事务\n\n```sql\nshow veriables like ‘autocommit’;\nset session autocommit = on;\nupdate xxx where set xx =1 ;\ncommit;\n```\n\n结束事务两种方式：rollback     commit\n\n## 事务并发的三大问题\n\n数据并发的三大问题其实都是数据库读一致性问题，必须有数据库提供一定的事务隔离机制来解决。\n\n### 脏读\n![image-20200727224117281](./mysql-transcation/image-20201202210510525.png)\n\n### 不可重复读\n![image-20200727224117281](./mysql-transcation/image-20201202210235089.png)\n\n\n\n### 幻读\n![image-20200727224117281](./mysql-transcation/image-20201202210357906.png)\n\n\n## 事务隔离级别\n\nhttp://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt\n![image-20200727224117281](./mysql-transcation/image-20201202210817094.png)\n![image-20200727224117281](./mysql-transcation/image-20201202211406282.png)\n\n![image-20201202211752764](./mysql-transcation/image-20201202211752764.png)\n\n### MVCC思想\n\n![image-20201202212103393](./mysql-transcation/image-20201202212103393.png)\n\n#### Read View（一致性试图）\n\n存储内容\n\n![image-20201202213520136](./mysql-transcation/image-20201202213520136.png)\n\n\n\n#### Read View判断规则\n\n![image-20201202213757692](./mysql-transcation/image-20201202213757692.png)\n\n#### RC与RR read View 的区别\n\n![image-20201202214418001](./mysql-transcation/image-20201202214418001.png)\n\n所以RC解决不了脏读的问题\n\n# Mysql InnoDb所得基本类型\n\nInnoDB支持行锁\n\nMyiSAM支持行锁\n\n表锁和行锁的区别\n\n-   锁力度：表锁 > 行锁\n-   加锁效率：表锁 > 行锁\n-   冲突概率：表锁 > 行锁\n-   并发性能：表锁 < 行锁\n\n## 表锁\n\n![image-20201202214957559](./mysql-transcation/image-20201202214957559.png)\n\n一个事务能够给一张表加上锁的前提是：没有其他任何一个事务锁定了这张表的任意一行数据。如果没有意向锁的话，那么加表锁需要扫描表中的每行数据，大大的浪费时间；\n\n如果在添加行锁的时候，会在表上添加意向锁，那么在添加表锁的时候就不需要去扫描所有表数据了，只需要看下表上是否由意向锁就可；\n\n## 行锁\n\n### 共享锁shared locks\n\n![image-20201202215350319](./mysql-transcation/image-20201202215350319.png)\n\n\n\n### 排它锁Exclusive locks\n\n![image-20201202215717524](./mysql-transcation/image-20201202215717524.png)\n\n\n\n\n\n### Innodb行锁锁定的是什么\n\n锁定的是index索引，如果表中没有索引，那么Innodb会把隐藏列DB_ROW_ID当作聚集索引\n\n加锁一定要加上条件，不然会锁表\n\n![image-20201202222250939](./mysql-transcation/image-20201202222250939.png)\n\n### 记录锁Rcord Lock 锁定记录\n\n![image-20201202222823984](./mysql-transcation/image-20201202222823984.png)\n\n### 间隙锁Gap Lock 锁定范围\n\n专门用于阻塞插入，间隙锁如果没有命中的话，会锁定最后一个值到正无穷，那么在最后一个值和正无穷之间的插入都不能成功。\n\n![image-20201202222914087](./mysql-transcation/image-20201202222914087.png)\n\n### 临健锁Next-key Lock ：锁定范围加记录\n\n![image-20201202223655445](./mysql-transcation/image-20201202223655445.png)\n\n**为了解决幻读的问题**\n\n### 事务隔离级别的实现\n\n![image-20201202224136052](./mysql-transcation/image-20201202224136052.png)\n\n### 事务隔离级别的选择\n\n![image-20201202224412832](./mysql-transcation/image-20201202224412832.png)\n\n\n","slug":"mysql-transcation","published":1,"updated":"2022-04-06T09:51:44.943Z","layout":"post","photos":[],"link":"","_id":"cl424hx5t002nad5ieeyx6ihz","content":"<h2 id=\"事务的定义\"><a href=\"#事务的定义\" class=\"headerlink\" title=\"事务的定义\"></a>事务的定义</h2><p>事务是数据管理系统DBMS执行过程中的一个<strong>逻辑单位</strong>，有一个有限的数据库<strong>操作序列</strong>构成</p>\n<h2 id=\"事务四大特性\"><a href=\"#事务四大特性\" class=\"headerlink\" title=\"事务四大特性\"></a>事务四大特性</h2><ol>\n<li> 原子性atomicity：依赖undo log做到全部失败</li>\n<li> 隔离性isolation：实现方式LBCC 和 MVCC</li>\n<li> 持久性durability ：实现方式redo log和double write</li>\n<li> 一致性consistency：通过上面的三种方式实现</li>\n</ol>\n<p>数据恢复：</p>\n<ul>\n<li>  redo log 崩溃恢复</li>\n<li>  双写缓冲（double write）</li>\n</ul>\n<p>Mysql中insert、delete、update 自带事务</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> veriables <span class=\"keyword\">like</span> ‘autocommit’;</span><br><span class=\"line\"><span class=\"keyword\">set</span> session autocommit <span class=\"operator\">=</span> <span class=\"keyword\">on</span>;</span><br><span class=\"line\">update xxx <span class=\"keyword\">where</span> <span class=\"keyword\">set</span> xx <span class=\"operator\">=</span><span class=\"number\">1</span> ;</span><br><span class=\"line\"><span class=\"keyword\">commit</span>;</span><br></pre></td></tr></table></figure>\n\n<p>结束事务两种方式：rollback     commit</p>\n<h2 id=\"事务并发的三大问题\"><a href=\"#事务并发的三大问题\" class=\"headerlink\" title=\"事务并发的三大问题\"></a>事务并发的三大问题</h2><p>数据并发的三大问题其实都是数据库读一致性问题，必须有数据库提供一定的事务隔离机制来解决。</p>\n<h3 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h3><p><img src=\"/mysql-transcation/image-20201202210510525.png\" alt=\"image-20200727224117281\"></p>\n<h3 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h3><p><img src=\"/mysql-transcation/image-20201202210235089.png\" alt=\"image-20200727224117281\"></p>\n<h3 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h3><p><img src=\"/mysql-transcation/image-20201202210357906.png\" alt=\"image-20200727224117281\"></p>\n<h2 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h2><p><a href=\"http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt\">http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt</a><br><img src=\"/mysql-transcation/image-20201202210817094.png\" alt=\"image-20200727224117281\"><br><img src=\"/mysql-transcation/image-20201202211406282.png\" alt=\"image-20200727224117281\"></p>\n<p><img src=\"/mysql-transcation/image-20201202211752764.png\" alt=\"image-20201202211752764\"></p>\n<h3 id=\"MVCC思想\"><a href=\"#MVCC思想\" class=\"headerlink\" title=\"MVCC思想\"></a>MVCC思想</h3><p><img src=\"/mysql-transcation/image-20201202212103393.png\" alt=\"image-20201202212103393\"></p>\n<h4 id=\"Read-View（一致性试图）\"><a href=\"#Read-View（一致性试图）\" class=\"headerlink\" title=\"Read View（一致性试图）\"></a>Read View（一致性试图）</h4><p>存储内容</p>\n<p><img src=\"/mysql-transcation/image-20201202213520136.png\" alt=\"image-20201202213520136\"></p>\n<h4 id=\"Read-View判断规则\"><a href=\"#Read-View判断规则\" class=\"headerlink\" title=\"Read View判断规则\"></a>Read View判断规则</h4><p><img src=\"/mysql-transcation/image-20201202213757692.png\" alt=\"image-20201202213757692\"></p>\n<h4 id=\"RC与RR-read-View-的区别\"><a href=\"#RC与RR-read-View-的区别\" class=\"headerlink\" title=\"RC与RR read View 的区别\"></a>RC与RR read View 的区别</h4><p><img src=\"/mysql-transcation/image-20201202214418001.png\" alt=\"image-20201202214418001\"></p>\n<p>所以RC解决不了脏读的问题</p>\n<h1 id=\"Mysql-InnoDb所得基本类型\"><a href=\"#Mysql-InnoDb所得基本类型\" class=\"headerlink\" title=\"Mysql InnoDb所得基本类型\"></a>Mysql InnoDb所得基本类型</h1><p>InnoDB支持行锁</p>\n<p>MyiSAM支持行锁</p>\n<p>表锁和行锁的区别</p>\n<ul>\n<li>  锁力度：表锁 &gt; 行锁</li>\n<li>  加锁效率：表锁 &gt; 行锁</li>\n<li>  冲突概率：表锁 &gt; 行锁</li>\n<li>  并发性能：表锁 &lt; 行锁</li>\n</ul>\n<h2 id=\"表锁\"><a href=\"#表锁\" class=\"headerlink\" title=\"表锁\"></a>表锁</h2><p><img src=\"/mysql-transcation/image-20201202214957559.png\" alt=\"image-20201202214957559\"></p>\n<p>一个事务能够给一张表加上锁的前提是：没有其他任何一个事务锁定了这张表的任意一行数据。如果没有意向锁的话，那么加表锁需要扫描表中的每行数据，大大的浪费时间；</p>\n<p>如果在添加行锁的时候，会在表上添加意向锁，那么在添加表锁的时候就不需要去扫描所有表数据了，只需要看下表上是否由意向锁就可；</p>\n<h2 id=\"行锁\"><a href=\"#行锁\" class=\"headerlink\" title=\"行锁\"></a>行锁</h2><h3 id=\"共享锁shared-locks\"><a href=\"#共享锁shared-locks\" class=\"headerlink\" title=\"共享锁shared locks\"></a>共享锁shared locks</h3><p><img src=\"/mysql-transcation/image-20201202215350319.png\" alt=\"image-20201202215350319\"></p>\n<h3 id=\"排它锁Exclusive-locks\"><a href=\"#排它锁Exclusive-locks\" class=\"headerlink\" title=\"排它锁Exclusive locks\"></a>排它锁Exclusive locks</h3><p><img src=\"/mysql-transcation/image-20201202215717524.png\" alt=\"image-20201202215717524\"></p>\n<h3 id=\"Innodb行锁锁定的是什么\"><a href=\"#Innodb行锁锁定的是什么\" class=\"headerlink\" title=\"Innodb行锁锁定的是什么\"></a>Innodb行锁锁定的是什么</h3><p>锁定的是index索引，如果表中没有索引，那么Innodb会把隐藏列DB_ROW_ID当作聚集索引</p>\n<p>加锁一定要加上条件，不然会锁表</p>\n<p><img src=\"/mysql-transcation/image-20201202222250939.png\" alt=\"image-20201202222250939\"></p>\n<h3 id=\"记录锁Rcord-Lock-锁定记录\"><a href=\"#记录锁Rcord-Lock-锁定记录\" class=\"headerlink\" title=\"记录锁Rcord Lock 锁定记录\"></a>记录锁Rcord Lock 锁定记录</h3><p><img src=\"/mysql-transcation/image-20201202222823984.png\" alt=\"image-20201202222823984\"></p>\n<h3 id=\"间隙锁Gap-Lock-锁定范围\"><a href=\"#间隙锁Gap-Lock-锁定范围\" class=\"headerlink\" title=\"间隙锁Gap Lock 锁定范围\"></a>间隙锁Gap Lock 锁定范围</h3><p>专门用于阻塞插入，间隙锁如果没有命中的话，会锁定最后一个值到正无穷，那么在最后一个值和正无穷之间的插入都不能成功。</p>\n<p><img src=\"/mysql-transcation/image-20201202222914087.png\" alt=\"image-20201202222914087\"></p>\n<h3 id=\"临健锁Next-key-Lock-：锁定范围加记录\"><a href=\"#临健锁Next-key-Lock-：锁定范围加记录\" class=\"headerlink\" title=\"临健锁Next-key Lock ：锁定范围加记录\"></a>临健锁Next-key Lock ：锁定范围加记录</h3><p><img src=\"/mysql-transcation/image-20201202223655445.png\" alt=\"image-20201202223655445\"></p>\n<p><strong>为了解决幻读的问题</strong></p>\n<h3 id=\"事务隔离级别的实现\"><a href=\"#事务隔离级别的实现\" class=\"headerlink\" title=\"事务隔离级别的实现\"></a>事务隔离级别的实现</h3><p><img src=\"/mysql-transcation/image-20201202224136052.png\" alt=\"image-20201202224136052\"></p>\n<h3 id=\"事务隔离级别的选择\"><a href=\"#事务隔离级别的选择\" class=\"headerlink\" title=\"事务隔离级别的选择\"></a>事务隔离级别的选择</h3><p><img src=\"/mysql-transcation/image-20201202224412832.png\" alt=\"image-20201202224412832\"></p>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h2 id=\"事务的定义\"><a href=\"#事务的定义\" class=\"headerlink\" title=\"事务的定义\"></a>事务的定义</h2><p>事务是数据管理系统DBMS执行过程中的一个<strong>逻辑单位</strong>，有一个有限的数据库<strong>操作序列</strong>构成</p>\n<h2 id=\"事务四大特性\"><a href=\"#事务四大特性\" class=\"headerlink\" title=\"事务四大特性\"></a>事务四大特性</h2><ol>\n<li> 原子性atomicity：依赖undo log做到全部失败</li>\n<li> 隔离性isolation：实现方式LBCC 和 MVCC</li>\n<li> 持久性durability ：实现方式redo log和double write</li>\n<li> 一致性consistency：通过上面的三种方式实现</li>\n</ol>\n<p>数据恢复：</p>\n<ul>\n<li>  redo log 崩溃恢复</li>\n<li>  双写缓冲（double write）</li>\n</ul>\n<p>Mysql中insert、delete、update 自带事务</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> veriables <span class=\"keyword\">like</span> ‘autocommit’;</span><br><span class=\"line\"><span class=\"keyword\">set</span> session autocommit <span class=\"operator\">=</span> <span class=\"keyword\">on</span>;</span><br><span class=\"line\">update xxx <span class=\"keyword\">where</span> <span class=\"keyword\">set</span> xx <span class=\"operator\">=</span><span class=\"number\">1</span> ;</span><br><span class=\"line\"><span class=\"keyword\">commit</span>;</span><br></pre></td></tr></table></figure>\n\n<p>结束事务两种方式：rollback     commit</p>\n<h2 id=\"事务并发的三大问题\"><a href=\"#事务并发的三大问题\" class=\"headerlink\" title=\"事务并发的三大问题\"></a>事务并发的三大问题</h2><p>数据并发的三大问题其实都是数据库读一致性问题，必须有数据库提供一定的事务隔离机制来解决。</p>\n<h3 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h3><p><img src=\"/mysql-transcation/image-20201202210510525.png\" alt=\"image-20200727224117281\"></p>\n<h3 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h3><p><img src=\"/mysql-transcation/image-20201202210235089.png\" alt=\"image-20200727224117281\"></p>\n<h3 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h3><p><img src=\"/mysql-transcation/image-20201202210357906.png\" alt=\"image-20200727224117281\"></p>\n<h2 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h2><p><a href=\"http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt\">http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt</a><br><img src=\"/mysql-transcation/image-20201202210817094.png\" alt=\"image-20200727224117281\"><br><img src=\"/mysql-transcation/image-20201202211406282.png\" alt=\"image-20200727224117281\"></p>\n<p><img src=\"/mysql-transcation/image-20201202211752764.png\" alt=\"image-20201202211752764\"></p>\n<h3 id=\"MVCC思想\"><a href=\"#MVCC思想\" class=\"headerlink\" title=\"MVCC思想\"></a>MVCC思想</h3><p><img src=\"/mysql-transcation/image-20201202212103393.png\" alt=\"image-20201202212103393\"></p>\n<h4 id=\"Read-View（一致性试图）\"><a href=\"#Read-View（一致性试图）\" class=\"headerlink\" title=\"Read View（一致性试图）\"></a>Read View（一致性试图）</h4><p>存储内容</p>\n<p><img src=\"/mysql-transcation/image-20201202213520136.png\" alt=\"image-20201202213520136\"></p>\n<h4 id=\"Read-View判断规则\"><a href=\"#Read-View判断规则\" class=\"headerlink\" title=\"Read View判断规则\"></a>Read View判断规则</h4><p><img src=\"/mysql-transcation/image-20201202213757692.png\" alt=\"image-20201202213757692\"></p>\n<h4 id=\"RC与RR-read-View-的区别\"><a href=\"#RC与RR-read-View-的区别\" class=\"headerlink\" title=\"RC与RR read View 的区别\"></a>RC与RR read View 的区别</h4><p><img src=\"/mysql-transcation/image-20201202214418001.png\" alt=\"image-20201202214418001\"></p>\n<p>所以RC解决不了脏读的问题</p>\n<h1 id=\"Mysql-InnoDb所得基本类型\"><a href=\"#Mysql-InnoDb所得基本类型\" class=\"headerlink\" title=\"Mysql InnoDb所得基本类型\"></a>Mysql InnoDb所得基本类型</h1><p>InnoDB支持行锁</p>\n<p>MyiSAM支持行锁</p>\n<p>表锁和行锁的区别</p>\n<ul>\n<li>  锁力度：表锁 &gt; 行锁</li>\n<li>  加锁效率：表锁 &gt; 行锁</li>\n<li>  冲突概率：表锁 &gt; 行锁</li>\n<li>  并发性能：表锁 &lt; 行锁</li>\n</ul>\n<h2 id=\"表锁\"><a href=\"#表锁\" class=\"headerlink\" title=\"表锁\"></a>表锁</h2><p><img src=\"/mysql-transcation/image-20201202214957559.png\" alt=\"image-20201202214957559\"></p>\n<p>一个事务能够给一张表加上锁的前提是：没有其他任何一个事务锁定了这张表的任意一行数据。如果没有意向锁的话，那么加表锁需要扫描表中的每行数据，大大的浪费时间；</p>\n<p>如果在添加行锁的时候，会在表上添加意向锁，那么在添加表锁的时候就不需要去扫描所有表数据了，只需要看下表上是否由意向锁就可；</p>\n<h2 id=\"行锁\"><a href=\"#行锁\" class=\"headerlink\" title=\"行锁\"></a>行锁</h2><h3 id=\"共享锁shared-locks\"><a href=\"#共享锁shared-locks\" class=\"headerlink\" title=\"共享锁shared locks\"></a>共享锁shared locks</h3><p><img src=\"/mysql-transcation/image-20201202215350319.png\" alt=\"image-20201202215350319\"></p>\n<h3 id=\"排它锁Exclusive-locks\"><a href=\"#排它锁Exclusive-locks\" class=\"headerlink\" title=\"排它锁Exclusive locks\"></a>排它锁Exclusive locks</h3><p><img src=\"/mysql-transcation/image-20201202215717524.png\" alt=\"image-20201202215717524\"></p>\n<h3 id=\"Innodb行锁锁定的是什么\"><a href=\"#Innodb行锁锁定的是什么\" class=\"headerlink\" title=\"Innodb行锁锁定的是什么\"></a>Innodb行锁锁定的是什么</h3><p>锁定的是index索引，如果表中没有索引，那么Innodb会把隐藏列DB_ROW_ID当作聚集索引</p>\n<p>加锁一定要加上条件，不然会锁表</p>\n<p><img src=\"/mysql-transcation/image-20201202222250939.png\" alt=\"image-20201202222250939\"></p>\n<h3 id=\"记录锁Rcord-Lock-锁定记录\"><a href=\"#记录锁Rcord-Lock-锁定记录\" class=\"headerlink\" title=\"记录锁Rcord Lock 锁定记录\"></a>记录锁Rcord Lock 锁定记录</h3><p><img src=\"/mysql-transcation/image-20201202222823984.png\" alt=\"image-20201202222823984\"></p>\n<h3 id=\"间隙锁Gap-Lock-锁定范围\"><a href=\"#间隙锁Gap-Lock-锁定范围\" class=\"headerlink\" title=\"间隙锁Gap Lock 锁定范围\"></a>间隙锁Gap Lock 锁定范围</h3><p>专门用于阻塞插入，间隙锁如果没有命中的话，会锁定最后一个值到正无穷，那么在最后一个值和正无穷之间的插入都不能成功。</p>\n<p><img src=\"/mysql-transcation/image-20201202222914087.png\" alt=\"image-20201202222914087\"></p>\n<h3 id=\"临健锁Next-key-Lock-：锁定范围加记录\"><a href=\"#临健锁Next-key-Lock-：锁定范围加记录\" class=\"headerlink\" title=\"临健锁Next-key Lock ：锁定范围加记录\"></a>临健锁Next-key Lock ：锁定范围加记录</h3><p><img src=\"/mysql-transcation/image-20201202223655445.png\" alt=\"image-20201202223655445\"></p>\n<p><strong>为了解决幻读的问题</strong></p>\n<h3 id=\"事务隔离级别的实现\"><a href=\"#事务隔离级别的实现\" class=\"headerlink\" title=\"事务隔离级别的实现\"></a>事务隔离级别的实现</h3><p><img src=\"/mysql-transcation/image-20201202224136052.png\" alt=\"image-20201202224136052\"></p>\n<h3 id=\"事务隔离级别的选择\"><a href=\"#事务隔离级别的选择\" class=\"headerlink\" title=\"事务隔离级别的选择\"></a>事务隔离级别的选择</h3><p><img src=\"/mysql-transcation/image-20201202224412832.png\" alt=\"image-20201202224412832\"></p>\n"},{"title":"mysql知识总结","comments":1,"abbrlink":54419,"date":"2021-07-23T08:00:57.000Z","translate_title":"mysql_01","_content":"# mysql 初识\n## 1. 版本历史\n\n-   1996年 mysql.10发布\n-   1996年10月3.11.1发布\n-   2000年ISAM升级成MyISAM引擎，mysql开源\n-   2003年 Mysql4.0发布集成InnoDB存储引擎\n-   2005年 MySQL 5.0版本发布，提供了试图，存储过程等功能\n-   2010年MySQL5.5发布，InnoDB成为默认的存储引擎\n-   2016年发布8.0.0版本\n\n## 2. 流行分支\n-   Maria DB\n-   Percona Server\n\n## 3. SQL 执行流程\n### 通信类型\n-   同步\n-   异步\n\n### 连接方式\n-   长连接\n-   短连接\n\n### 超时时间\n\n-   非交互式超时时间，如JDBC程序，单位s\n\n    ```sql\n    SHOW GLOBAL VARIABLES LIKE 'wait_timeout'\n    ```\n\n-   交互式超时间，如数据库工具\n\n    ```sql\n    SHOW GLOBAL variables LIKE 'interactive_timeout'\n    ```\n\n### 查看连接\n\n```sql\nshow GLOBAL STATUS LIKE 'Thread%'\n```\n|     连接名称      |      描述      |\n| :---------------: | :------------: |\n|  Threads_cached   |  缓存中的线程  |\n| Threads_connected |   连接中线程   |\n|  Threads_created  |  创建过的线程  |\n|  Threads_running  | 正在执行的线程 |\n\n#### 查看所有的线程\n\n如果是root权限，可以看到所有用户发起的线程，否则只能看到自己的线程\n\n```sql\nshow processlist\n```\n\n![image-20200727224117281](./mysql/image-20200727224117281.png)\n\n-   id ：一个表示，kill一个语句的时候可以使用\n-   user：显示当前用户，如果不是root，这个命令就只显示你权限范围内的sql语句\n-   host：显示这个语句是从哪个ip的端口上发出的，可以用来追踪出问题语句的用户\n-   db：显示这个进程目前连接的是哪个数据库\n-   commmand：显示当年连接的执行命令，一般分为休眠slee、查询query、连接connect\n-   time：此状态持续的时间，单位是秒\n-   state： 显示使用当年连接的sql语句状态，state只是语句执行中的某一个状态，如查询：需要经过copying to tmp table、sorting result、sending data等转台才可以完成\n-   info：显示这个sql语句，因为长度有限，所以长的sql语句就显示不全\n\n#### 查看最大连接数\n\n```sql\nshow variables LIKE 'max_connections'; //一般默认是151，最大可以是2的14次方\n```\n#### mysql变量级别\n-   global全局\n    ```tex\n    在mysql中修改全局变量global有两种方法：\n    1. 修改my.ini配置文件（永久有效）\n    2. 在不修改配置文件的基础上，使用关键字global设置全局变量\n       set global autocommit = 1;将autocommit变量的值设置为ON，需要注意的是此方法对global全局变量的设计进对于新开启的会话有效，对已开启的会话无效，同理，如果修改回哈session变量，可以使用session关键字，如set session autocommit = 1；这个仅对本session的变量配置有效，对其他的session无效；（在MySQL服务重启之后，数据库的配置重新按照my.ini文件 初始化，global和session 的配置都会失效）\n    ```\n\n-   session当前会话\n\n### 通信协议\n\n-   Unix Socket\n-   TCP/IP\n-   Named Pipes命名管道\n-   Share Memory共享内存\n\n### 通信方式\n\n-   单工\n-   半双工\n-   全双工\n\n![image-20200727231112059](./mysql/image-20200727231112059.png)\n\n### MySQL 缓存\n\n```sql\nSHOW VARIABLES LIKE 'query_cache%'\n#默认关闭，是因为mysql要保证两次执行的sql完全一致，连空格，大小写都一致，而且当数据表中的任何一条数据发生变化，整个缓存会失效；\n```\n\n#2. 删除数据\n## 1. 数据删除方式\n\n- DELETE\n- Truncate\n- Drop\n\n## 2. 执行速度\n\ndrop > truncate > delete\n\n### 2.1 DELETE\n\n```SQL\nDELETE FROM table_name WHERE XXX\n```\n\n- DELETE 数据数据库DML操作语言，只删除数据不删除表的结构，会走事务，执行时会触发trigger\n\n- 在InnoDB中，delete其实并不会真的把数据删除，mysqL实际上只是给删除的数据打个标记为删除，因此delete删除表中的数据，表文件在磁盘所占的控件不会变小，存储控件不会被释放，只是把删除的数据设置为不可见。虽然未释放磁盘控件，但是下次插入数据的时候，仍然可以重用这部分空间（重用->覆盖）\n\n- delete执行时，会先把所删除数据缓存到rollback segement中，事务commit之后生效\n\n- **delete from  table_name** 删除表的全部数据对于MyISAM会释放磁盘控件，Innodb不会释放磁盘空间\n\n- 对于**DELETE from table_name where xxx**带条件的删除，不管是Innodb还是MyISAM都不会释放磁盘控件\n\n- delete 操作以后使用**optimize table  table_name**会里级释放磁盘空间（不管是Innodb还是MyISAM）\n\n    ```sql\n    --查看表占用磁盘空间大小\n    select concat(round(sum(DATA_LENGTH/1024/1024),2),'M') as table_size\n    from information_schema.tables where table_schema='demo_db' AND table_name='demo_table';\n    \n    -- 执行空间优化语句，以及执行后的表size变化\n    optimize table demo_table\n    ```\n\n\n\n- **delete 操作时一行一行执行删除的，并且同时将该行的删除操作日志记录在redo和undo表空间中以便进行回滚（rollback）和重做操作**，生成大量日志也会占用磁盘空间\n\n### 2.2 Truncate\n\n```sql\n--删除表数据， 不带where条件\n--与不带where的delete ：只删除数据，而不删除表的结构\t\nTruncate table table_name\n```\n\n- **Truncate数据数据库DDL定义语言，不走事务，原数据不放到rollback segement中，操作不触发trigger**，执行后里级生效，无法找回；\n\n- **truncate table table_name里级释放磁盘空间不管是Innodb 和MyISAM**；truncate table其实有点类似余drop table然后create，只不过这个crate table的过程做了优化，比如表结构文件之前已经有了等，所以速度上应该是接近drop table的速度\n\n- truncate 能快速清空一个表，并且重置auto_increment的值\n\n  ​\t但是对于不同的类型存储引擎需要注意的地方是：\n\n    - **对于MyISAM**：truncate会重置auto_increment（自增序列）的值为1，而delete后表仍然保持auto_increment。\n    - **对于Innodb**：truncate会重置auto_increment（自增序列）的值为1， 而delete后表仍然保持auto_increment。但是在做delete整个表之后重启mysql的话，而重启后的auto_increment会被置为1\n\n  也就是说，Innodb的表本身是无法持久保存auto_increment。delete表之后auto_increment仍然保存在内存，但是重启后就丢失了，只能从1开始，实质上重启后的auto_increment会从SELETE 1+MAX(ai_col) FROM t开始\n\n- 小心使用 truncate，尤其没有备份的时候，如果误删除线上的表，记得及时联系中国民航，订票电话：400-806-9553\n\n### 2.3 Drop\n\n```sql\n-- 删除表结构以及表数据\nDrop table table_name\n```\n\n- **drop：属于数据库DDL定义语言，同Truncate；**\n\n  **执行后立即生效，无法找回！ 执行后立即生效，无法找回！ 执行后立即生效，无法找回！**\n\n- **drop table table_name 立刻释放磁盘空间 ，不管是 InnoDB 和 MyISAM; **drop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index); 依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。\n\n- 小心使用 drop ，要删表跑路的兄弟，请在订票成功后在执行操作！订票电话：400-806-9553\n\n## 3. 总结\n\n**可以这么理解，一本书，delete是把目录撕了，truncate是把书的内容撕下来烧了，drop是把书烧了**\n\n\n","source":"_posts/2021/07/mysql.md","raw":"---\ntitle: mysql知识总结\ntags: mysql\ncategories: mysql\ncomments: true\nabbrlink: 54419\ndate: 2021-07-23 16:00:57\ntranslate_title: mysql_01\n---\n# mysql 初识\n## 1. 版本历史\n\n-   1996年 mysql.10发布\n-   1996年10月3.11.1发布\n-   2000年ISAM升级成MyISAM引擎，mysql开源\n-   2003年 Mysql4.0发布集成InnoDB存储引擎\n-   2005年 MySQL 5.0版本发布，提供了试图，存储过程等功能\n-   2010年MySQL5.5发布，InnoDB成为默认的存储引擎\n-   2016年发布8.0.0版本\n\n## 2. 流行分支\n-   Maria DB\n-   Percona Server\n\n## 3. SQL 执行流程\n### 通信类型\n-   同步\n-   异步\n\n### 连接方式\n-   长连接\n-   短连接\n\n### 超时时间\n\n-   非交互式超时时间，如JDBC程序，单位s\n\n    ```sql\n    SHOW GLOBAL VARIABLES LIKE 'wait_timeout'\n    ```\n\n-   交互式超时间，如数据库工具\n\n    ```sql\n    SHOW GLOBAL variables LIKE 'interactive_timeout'\n    ```\n\n### 查看连接\n\n```sql\nshow GLOBAL STATUS LIKE 'Thread%'\n```\n|     连接名称      |      描述      |\n| :---------------: | :------------: |\n|  Threads_cached   |  缓存中的线程  |\n| Threads_connected |   连接中线程   |\n|  Threads_created  |  创建过的线程  |\n|  Threads_running  | 正在执行的线程 |\n\n#### 查看所有的线程\n\n如果是root权限，可以看到所有用户发起的线程，否则只能看到自己的线程\n\n```sql\nshow processlist\n```\n\n![image-20200727224117281](./mysql/image-20200727224117281.png)\n\n-   id ：一个表示，kill一个语句的时候可以使用\n-   user：显示当前用户，如果不是root，这个命令就只显示你权限范围内的sql语句\n-   host：显示这个语句是从哪个ip的端口上发出的，可以用来追踪出问题语句的用户\n-   db：显示这个进程目前连接的是哪个数据库\n-   commmand：显示当年连接的执行命令，一般分为休眠slee、查询query、连接connect\n-   time：此状态持续的时间，单位是秒\n-   state： 显示使用当年连接的sql语句状态，state只是语句执行中的某一个状态，如查询：需要经过copying to tmp table、sorting result、sending data等转台才可以完成\n-   info：显示这个sql语句，因为长度有限，所以长的sql语句就显示不全\n\n#### 查看最大连接数\n\n```sql\nshow variables LIKE 'max_connections'; //一般默认是151，最大可以是2的14次方\n```\n#### mysql变量级别\n-   global全局\n    ```tex\n    在mysql中修改全局变量global有两种方法：\n    1. 修改my.ini配置文件（永久有效）\n    2. 在不修改配置文件的基础上，使用关键字global设置全局变量\n       set global autocommit = 1;将autocommit变量的值设置为ON，需要注意的是此方法对global全局变量的设计进对于新开启的会话有效，对已开启的会话无效，同理，如果修改回哈session变量，可以使用session关键字，如set session autocommit = 1；这个仅对本session的变量配置有效，对其他的session无效；（在MySQL服务重启之后，数据库的配置重新按照my.ini文件 初始化，global和session 的配置都会失效）\n    ```\n\n-   session当前会话\n\n### 通信协议\n\n-   Unix Socket\n-   TCP/IP\n-   Named Pipes命名管道\n-   Share Memory共享内存\n\n### 通信方式\n\n-   单工\n-   半双工\n-   全双工\n\n![image-20200727231112059](./mysql/image-20200727231112059.png)\n\n### MySQL 缓存\n\n```sql\nSHOW VARIABLES LIKE 'query_cache%'\n#默认关闭，是因为mysql要保证两次执行的sql完全一致，连空格，大小写都一致，而且当数据表中的任何一条数据发生变化，整个缓存会失效；\n```\n\n#2. 删除数据\n## 1. 数据删除方式\n\n- DELETE\n- Truncate\n- Drop\n\n## 2. 执行速度\n\ndrop > truncate > delete\n\n### 2.1 DELETE\n\n```SQL\nDELETE FROM table_name WHERE XXX\n```\n\n- DELETE 数据数据库DML操作语言，只删除数据不删除表的结构，会走事务，执行时会触发trigger\n\n- 在InnoDB中，delete其实并不会真的把数据删除，mysqL实际上只是给删除的数据打个标记为删除，因此delete删除表中的数据，表文件在磁盘所占的控件不会变小，存储控件不会被释放，只是把删除的数据设置为不可见。虽然未释放磁盘控件，但是下次插入数据的时候，仍然可以重用这部分空间（重用->覆盖）\n\n- delete执行时，会先把所删除数据缓存到rollback segement中，事务commit之后生效\n\n- **delete from  table_name** 删除表的全部数据对于MyISAM会释放磁盘控件，Innodb不会释放磁盘空间\n\n- 对于**DELETE from table_name where xxx**带条件的删除，不管是Innodb还是MyISAM都不会释放磁盘控件\n\n- delete 操作以后使用**optimize table  table_name**会里级释放磁盘空间（不管是Innodb还是MyISAM）\n\n    ```sql\n    --查看表占用磁盘空间大小\n    select concat(round(sum(DATA_LENGTH/1024/1024),2),'M') as table_size\n    from information_schema.tables where table_schema='demo_db' AND table_name='demo_table';\n    \n    -- 执行空间优化语句，以及执行后的表size变化\n    optimize table demo_table\n    ```\n\n\n\n- **delete 操作时一行一行执行删除的，并且同时将该行的删除操作日志记录在redo和undo表空间中以便进行回滚（rollback）和重做操作**，生成大量日志也会占用磁盘空间\n\n### 2.2 Truncate\n\n```sql\n--删除表数据， 不带where条件\n--与不带where的delete ：只删除数据，而不删除表的结构\t\nTruncate table table_name\n```\n\n- **Truncate数据数据库DDL定义语言，不走事务，原数据不放到rollback segement中，操作不触发trigger**，执行后里级生效，无法找回；\n\n- **truncate table table_name里级释放磁盘空间不管是Innodb 和MyISAM**；truncate table其实有点类似余drop table然后create，只不过这个crate table的过程做了优化，比如表结构文件之前已经有了等，所以速度上应该是接近drop table的速度\n\n- truncate 能快速清空一个表，并且重置auto_increment的值\n\n  ​\t但是对于不同的类型存储引擎需要注意的地方是：\n\n    - **对于MyISAM**：truncate会重置auto_increment（自增序列）的值为1，而delete后表仍然保持auto_increment。\n    - **对于Innodb**：truncate会重置auto_increment（自增序列）的值为1， 而delete后表仍然保持auto_increment。但是在做delete整个表之后重启mysql的话，而重启后的auto_increment会被置为1\n\n  也就是说，Innodb的表本身是无法持久保存auto_increment。delete表之后auto_increment仍然保存在内存，但是重启后就丢失了，只能从1开始，实质上重启后的auto_increment会从SELETE 1+MAX(ai_col) FROM t开始\n\n- 小心使用 truncate，尤其没有备份的时候，如果误删除线上的表，记得及时联系中国民航，订票电话：400-806-9553\n\n### 2.3 Drop\n\n```sql\n-- 删除表结构以及表数据\nDrop table table_name\n```\n\n- **drop：属于数据库DDL定义语言，同Truncate；**\n\n  **执行后立即生效，无法找回！ 执行后立即生效，无法找回！ 执行后立即生效，无法找回！**\n\n- **drop table table_name 立刻释放磁盘空间 ，不管是 InnoDB 和 MyISAM; **drop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index); 依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。\n\n- 小心使用 drop ，要删表跑路的兄弟，请在订票成功后在执行操作！订票电话：400-806-9553\n\n## 3. 总结\n\n**可以这么理解，一本书，delete是把目录撕了，truncate是把书的内容撕下来烧了，drop是把书烧了**\n\n\n","slug":"mysql","published":1,"updated":"2022-04-06T09:51:44.967Z","layout":"post","photos":[],"link":"","_id":"cl424hx5u002rad5i1k6wdnrx","content":"<h1 id=\"mysql-初识\"><a href=\"#mysql-初识\" class=\"headerlink\" title=\"mysql 初识\"></a>mysql 初识</h1><h2 id=\"1-版本历史\"><a href=\"#1-版本历史\" class=\"headerlink\" title=\"1. 版本历史\"></a>1. 版本历史</h2><ul>\n<li>  1996年 mysql.10发布</li>\n<li>  1996年10月3.11.1发布</li>\n<li>  2000年ISAM升级成MyISAM引擎，mysql开源</li>\n<li>  2003年 Mysql4.0发布集成InnoDB存储引擎</li>\n<li>  2005年 MySQL 5.0版本发布，提供了试图，存储过程等功能</li>\n<li>  2010年MySQL5.5发布，InnoDB成为默认的存储引擎</li>\n<li>  2016年发布8.0.0版本</li>\n</ul>\n<h2 id=\"2-流行分支\"><a href=\"#2-流行分支\" class=\"headerlink\" title=\"2. 流行分支\"></a>2. 流行分支</h2><ul>\n<li>  Maria DB</li>\n<li>  Percona Server</li>\n</ul>\n<h2 id=\"3-SQL-执行流程\"><a href=\"#3-SQL-执行流程\" class=\"headerlink\" title=\"3. SQL 执行流程\"></a>3. SQL 执行流程</h2><h3 id=\"通信类型\"><a href=\"#通信类型\" class=\"headerlink\" title=\"通信类型\"></a>通信类型</h3><ul>\n<li>  同步</li>\n<li>  异步</li>\n</ul>\n<h3 id=\"连接方式\"><a href=\"#连接方式\" class=\"headerlink\" title=\"连接方式\"></a>连接方式</h3><ul>\n<li>  长连接</li>\n<li>  短连接</li>\n</ul>\n<h3 id=\"超时时间\"><a href=\"#超时时间\" class=\"headerlink\" title=\"超时时间\"></a>超时时间</h3><ul>\n<li><p>非交互式超时时间，如JDBC程序，单位s</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">GLOBAL</span> VARIABLES <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;wait_timeout&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>交互式超时间，如数据库工具</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">GLOBAL</span> variables <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;interactive_timeout&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"查看连接\"><a href=\"#查看连接\" class=\"headerlink\" title=\"查看连接\"></a>查看连接</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">GLOBAL</span> STATUS <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;Thread%&#x27;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th align=\"center\">连接名称</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Threads_cached</td>\n<td align=\"center\">缓存中的线程</td>\n</tr>\n<tr>\n<td align=\"center\">Threads_connected</td>\n<td align=\"center\">连接中线程</td>\n</tr>\n<tr>\n<td align=\"center\">Threads_created</td>\n<td align=\"center\">创建过的线程</td>\n</tr>\n<tr>\n<td align=\"center\">Threads_running</td>\n<td align=\"center\">正在执行的线程</td>\n</tr>\n</tbody></table>\n<h4 id=\"查看所有的线程\"><a href=\"#查看所有的线程\" class=\"headerlink\" title=\"查看所有的线程\"></a>查看所有的线程</h4><p>如果是root权限，可以看到所有用户发起的线程，否则只能看到自己的线程</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> processlist</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/mysql/image-20200727224117281.png\" alt=\"image-20200727224117281\"></p>\n<ul>\n<li>  id ：一个表示，kill一个语句的时候可以使用</li>\n<li>  user：显示当前用户，如果不是root，这个命令就只显示你权限范围内的sql语句</li>\n<li>  host：显示这个语句是从哪个ip的端口上发出的，可以用来追踪出问题语句的用户</li>\n<li>  db：显示这个进程目前连接的是哪个数据库</li>\n<li>  commmand：显示当年连接的执行命令，一般分为休眠slee、查询query、连接connect</li>\n<li>  time：此状态持续的时间，单位是秒</li>\n<li>  state： 显示使用当年连接的sql语句状态，state只是语句执行中的某一个状态，如查询：需要经过copying to tmp table、sorting result、sending data等转台才可以完成</li>\n<li>  info：显示这个sql语句，因为长度有限，所以长的sql语句就显示不全</li>\n</ul>\n<h4 id=\"查看最大连接数\"><a href=\"#查看最大连接数\" class=\"headerlink\" title=\"查看最大连接数\"></a>查看最大连接数</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;max_connections&#x27;</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span>一般默认是<span class=\"number\">151</span>，最大可以是<span class=\"number\">2</span>的<span class=\"number\">14</span>次方</span><br></pre></td></tr></table></figure>\n<h4 id=\"mysql变量级别\"><a href=\"#mysql变量级别\" class=\"headerlink\" title=\"mysql变量级别\"></a>mysql变量级别</h4><ul>\n<li><p>global全局</p>\n  <figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在mysql中修改全局变量global有两种方法：</span><br><span class=\"line\">1. 修改my.ini配置文件（永久有效）</span><br><span class=\"line\">2. 在不修改配置文件的基础上，使用关键字global设置全局变量</span><br><span class=\"line\">   set global autocommit = 1;将autocommit变量的值设置为ON，需要注意的是此方法对global全局变量的设计进对于新开启的会话有效，对已开启的会话无效，同理，如果修改回哈session变量，可以使用session关键字，如set session autocommit = 1；这个仅对本session的变量配置有效，对其他的session无效；（在MySQL服务重启之后，数据库的配置重新按照my.ini文件 初始化，global和session 的配置都会失效）</span><br></pre></td></tr></table></figure></li>\n<li><p>  session当前会话</p>\n</li>\n</ul>\n<h3 id=\"通信协议\"><a href=\"#通信协议\" class=\"headerlink\" title=\"通信协议\"></a>通信协议</h3><ul>\n<li>  Unix Socket</li>\n<li>  TCP/IP</li>\n<li>  Named Pipes命名管道</li>\n<li>  Share Memory共享内存</li>\n</ul>\n<h3 id=\"通信方式\"><a href=\"#通信方式\" class=\"headerlink\" title=\"通信方式\"></a>通信方式</h3><ul>\n<li>  单工</li>\n<li>  半双工</li>\n<li>  全双工</li>\n</ul>\n<p><img src=\"/mysql/image-20200727231112059.png\" alt=\"image-20200727231112059\"></p>\n<h3 id=\"MySQL-缓存\"><a href=\"#MySQL-缓存\" class=\"headerlink\" title=\"MySQL 缓存\"></a>MySQL 缓存</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> VARIABLES <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;query_cache%&#x27;</span></span><br><span class=\"line\">#默认关闭，是因为mysql要保证两次执行的<span class=\"keyword\">sql</span>完全一致，连空格，大小写都一致，而且当数据表中的任何一条数据发生变化，整个缓存会失效；</span><br></pre></td></tr></table></figure>\n\n<p>#2. 删除数据</p>\n<h2 id=\"1-数据删除方式\"><a href=\"#1-数据删除方式\" class=\"headerlink\" title=\"1. 数据删除方式\"></a>1. 数据删除方式</h2><ul>\n<li>DELETE</li>\n<li>Truncate</li>\n<li>Drop</li>\n</ul>\n<h2 id=\"2-执行速度\"><a href=\"#2-执行速度\" class=\"headerlink\" title=\"2. 执行速度\"></a>2. 执行速度</h2><p>drop &gt; truncate &gt; delete</p>\n<h3 id=\"2-1-DELETE\"><a href=\"#2-1-DELETE\" class=\"headerlink\" title=\"2.1 DELETE\"></a>2.1 DELETE</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> table_name <span class=\"keyword\">WHERE</span> XXX</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>DELETE 数据数据库DML操作语言，只删除数据不删除表的结构，会走事务，执行时会触发trigger</p>\n</li>\n<li><p>在InnoDB中，delete其实并不会真的把数据删除，mysqL实际上只是给删除的数据打个标记为删除，因此delete删除表中的数据，表文件在磁盘所占的控件不会变小，存储控件不会被释放，只是把删除的数据设置为不可见。虽然未释放磁盘控件，但是下次插入数据的时候，仍然可以重用这部分空间（重用-&gt;覆盖）</p>\n</li>\n<li><p>delete执行时，会先把所删除数据缓存到rollback segement中，事务commit之后生效</p>\n</li>\n<li><p><strong>delete from  table_name</strong> 删除表的全部数据对于MyISAM会释放磁盘控件，Innodb不会释放磁盘空间</p>\n</li>\n<li><p>对于<strong>DELETE from table_name where xxx</strong>带条件的删除，不管是Innodb还是MyISAM都不会释放磁盘控件</p>\n</li>\n<li><p>delete 操作以后使用<strong>optimize table  table_name</strong>会里级释放磁盘空间（不管是Innodb还是MyISAM）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查看表占用磁盘空间大小</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> concat(round(<span class=\"built_in\">sum</span>(DATA_LENGTH<span class=\"operator\">/</span><span class=\"number\">1024</span><span class=\"operator\">/</span><span class=\"number\">1024</span>),<span class=\"number\">2</span>),<span class=\"string\">&#x27;M&#x27;</span>) <span class=\"keyword\">as</span> table_size</span><br><span class=\"line\"><span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema<span class=\"operator\">=</span><span class=\"string\">&#x27;demo_db&#x27;</span> <span class=\"keyword\">AND</span> table_name<span class=\"operator\">=</span><span class=\"string\">&#x27;demo_table&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行空间优化语句，以及执行后的表size变化</span></span><br><span class=\"line\">optimize <span class=\"keyword\">table</span> demo_table</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li><strong>delete 操作时一行一行执行删除的，并且同时将该行的删除操作日志记录在redo和undo表空间中以便进行回滚（rollback）和重做操作</strong>，生成大量日志也会占用磁盘空间</li>\n</ul>\n<h3 id=\"2-2-Truncate\"><a href=\"#2-2-Truncate\" class=\"headerlink\" title=\"2.2 Truncate\"></a>2.2 Truncate</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--删除表数据， 不带where条件</span></span><br><span class=\"line\"><span class=\"comment\">--与不带where的delete ：只删除数据，而不删除表的结构\t</span></span><br><span class=\"line\"><span class=\"keyword\">Truncate</span> <span class=\"keyword\">table</span> table_name</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>Truncate数据数据库DDL定义语言，不走事务，原数据不放到rollback segement中，操作不触发trigger</strong>，执行后里级生效，无法找回；</p>\n</li>\n<li><p><strong>truncate table table_name里级释放磁盘空间不管是Innodb 和MyISAM</strong>；truncate table其实有点类似余drop table然后create，只不过这个crate table的过程做了优化，比如表结构文件之前已经有了等，所以速度上应该是接近drop table的速度</p>\n</li>\n<li><p>truncate 能快速清空一个表，并且重置auto_increment的值</p>\n<p>​    但是对于不同的类型存储引擎需要注意的地方是：</p>\n<ul>\n<li><strong>对于MyISAM</strong>：truncate会重置auto_increment（自增序列）的值为1，而delete后表仍然保持auto_increment。</li>\n<li><strong>对于Innodb</strong>：truncate会重置auto_increment（自增序列）的值为1， 而delete后表仍然保持auto_increment。但是在做delete整个表之后重启mysql的话，而重启后的auto_increment会被置为1</li>\n</ul>\n<p>也就是说，Innodb的表本身是无法持久保存auto_increment。delete表之后auto_increment仍然保存在内存，但是重启后就丢失了，只能从1开始，实质上重启后的auto_increment会从SELETE 1+MAX(ai_col) FROM t开始</p>\n</li>\n<li><p>小心使用 truncate，尤其没有备份的时候，如果误删除线上的表，记得及时联系中国民航，订票电话：400-806-9553</p>\n</li>\n</ul>\n<h3 id=\"2-3-Drop\"><a href=\"#2-3-Drop\" class=\"headerlink\" title=\"2.3 Drop\"></a>2.3 Drop</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除表结构以及表数据</span></span><br><span class=\"line\"><span class=\"keyword\">Drop</span> <span class=\"keyword\">table</span> table_name</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>drop：属于数据库DDL定义语言，同Truncate；</strong></p>\n<p><strong>执行后立即生效，无法找回！ 执行后立即生效，无法找回！ 执行后立即生效，无法找回！</strong></p>\n</li>\n<li><p>**drop table table_name 立刻释放磁盘空间 ，不管是 InnoDB 和 MyISAM; **drop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index); 依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。</p>\n</li>\n<li><p>小心使用 drop ，要删表跑路的兄弟，请在订票成功后在执行操作！订票电话：400-806-9553</p>\n</li>\n</ul>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p><strong>可以这么理解，一本书，delete是把目录撕了，truncate是把书的内容撕下来烧了，drop是把书烧了</strong></p>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h1 id=\"mysql-初识\"><a href=\"#mysql-初识\" class=\"headerlink\" title=\"mysql 初识\"></a>mysql 初识</h1><h2 id=\"1-版本历史\"><a href=\"#1-版本历史\" class=\"headerlink\" title=\"1. 版本历史\"></a>1. 版本历史</h2><ul>\n<li>  1996年 mysql.10发布</li>\n<li>  1996年10月3.11.1发布</li>\n<li>  2000年ISAM升级成MyISAM引擎，mysql开源</li>\n<li>  2003年 Mysql4.0发布集成InnoDB存储引擎</li>\n<li>  2005年 MySQL 5.0版本发布，提供了试图，存储过程等功能</li>\n<li>  2010年MySQL5.5发布，InnoDB成为默认的存储引擎</li>\n<li>  2016年发布8.0.0版本</li>\n</ul>\n<h2 id=\"2-流行分支\"><a href=\"#2-流行分支\" class=\"headerlink\" title=\"2. 流行分支\"></a>2. 流行分支</h2><ul>\n<li>  Maria DB</li>\n<li>  Percona Server</li>\n</ul>\n<h2 id=\"3-SQL-执行流程\"><a href=\"#3-SQL-执行流程\" class=\"headerlink\" title=\"3. SQL 执行流程\"></a>3. SQL 执行流程</h2><h3 id=\"通信类型\"><a href=\"#通信类型\" class=\"headerlink\" title=\"通信类型\"></a>通信类型</h3><ul>\n<li>  同步</li>\n<li>  异步</li>\n</ul>\n<h3 id=\"连接方式\"><a href=\"#连接方式\" class=\"headerlink\" title=\"连接方式\"></a>连接方式</h3><ul>\n<li>  长连接</li>\n<li>  短连接</li>\n</ul>\n<h3 id=\"超时时间\"><a href=\"#超时时间\" class=\"headerlink\" title=\"超时时间\"></a>超时时间</h3><ul>\n<li><p>非交互式超时时间，如JDBC程序，单位s</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">GLOBAL</span> VARIABLES <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;wait_timeout&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>交互式超时间，如数据库工具</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">GLOBAL</span> variables <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;interactive_timeout&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"查看连接\"><a href=\"#查看连接\" class=\"headerlink\" title=\"查看连接\"></a>查看连接</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">GLOBAL</span> STATUS <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;Thread%&#x27;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th align=\"center\">连接名称</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Threads_cached</td>\n<td align=\"center\">缓存中的线程</td>\n</tr>\n<tr>\n<td align=\"center\">Threads_connected</td>\n<td align=\"center\">连接中线程</td>\n</tr>\n<tr>\n<td align=\"center\">Threads_created</td>\n<td align=\"center\">创建过的线程</td>\n</tr>\n<tr>\n<td align=\"center\">Threads_running</td>\n<td align=\"center\">正在执行的线程</td>\n</tr>\n</tbody></table>\n<h4 id=\"查看所有的线程\"><a href=\"#查看所有的线程\" class=\"headerlink\" title=\"查看所有的线程\"></a>查看所有的线程</h4><p>如果是root权限，可以看到所有用户发起的线程，否则只能看到自己的线程</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> processlist</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/mysql/image-20200727224117281.png\" alt=\"image-20200727224117281\"></p>\n<ul>\n<li>  id ：一个表示，kill一个语句的时候可以使用</li>\n<li>  user：显示当前用户，如果不是root，这个命令就只显示你权限范围内的sql语句</li>\n<li>  host：显示这个语句是从哪个ip的端口上发出的，可以用来追踪出问题语句的用户</li>\n<li>  db：显示这个进程目前连接的是哪个数据库</li>\n<li>  commmand：显示当年连接的执行命令，一般分为休眠slee、查询query、连接connect</li>\n<li>  time：此状态持续的时间，单位是秒</li>\n<li>  state： 显示使用当年连接的sql语句状态，state只是语句执行中的某一个状态，如查询：需要经过copying to tmp table、sorting result、sending data等转台才可以完成</li>\n<li>  info：显示这个sql语句，因为长度有限，所以长的sql语句就显示不全</li>\n</ul>\n<h4 id=\"查看最大连接数\"><a href=\"#查看最大连接数\" class=\"headerlink\" title=\"查看最大连接数\"></a>查看最大连接数</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;max_connections&#x27;</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span>一般默认是<span class=\"number\">151</span>，最大可以是<span class=\"number\">2</span>的<span class=\"number\">14</span>次方</span><br></pre></td></tr></table></figure>\n<h4 id=\"mysql变量级别\"><a href=\"#mysql变量级别\" class=\"headerlink\" title=\"mysql变量级别\"></a>mysql变量级别</h4><ul>\n<li><p>global全局</p>\n  <figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在mysql中修改全局变量global有两种方法：</span><br><span class=\"line\">1. 修改my.ini配置文件（永久有效）</span><br><span class=\"line\">2. 在不修改配置文件的基础上，使用关键字global设置全局变量</span><br><span class=\"line\">   set global autocommit = 1;将autocommit变量的值设置为ON，需要注意的是此方法对global全局变量的设计进对于新开启的会话有效，对已开启的会话无效，同理，如果修改回哈session变量，可以使用session关键字，如set session autocommit = 1；这个仅对本session的变量配置有效，对其他的session无效；（在MySQL服务重启之后，数据库的配置重新按照my.ini文件 初始化，global和session 的配置都会失效）</span><br></pre></td></tr></table></figure></li>\n<li><p>  session当前会话</p>\n</li>\n</ul>\n<h3 id=\"通信协议\"><a href=\"#通信协议\" class=\"headerlink\" title=\"通信协议\"></a>通信协议</h3><ul>\n<li>  Unix Socket</li>\n<li>  TCP/IP</li>\n<li>  Named Pipes命名管道</li>\n<li>  Share Memory共享内存</li>\n</ul>\n<h3 id=\"通信方式\"><a href=\"#通信方式\" class=\"headerlink\" title=\"通信方式\"></a>通信方式</h3><ul>\n<li>  单工</li>\n<li>  半双工</li>\n<li>  全双工</li>\n</ul>\n<p><img src=\"/mysql/image-20200727231112059.png\" alt=\"image-20200727231112059\"></p>\n<h3 id=\"MySQL-缓存\"><a href=\"#MySQL-缓存\" class=\"headerlink\" title=\"MySQL 缓存\"></a>MySQL 缓存</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> VARIABLES <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;query_cache%&#x27;</span></span><br><span class=\"line\">#默认关闭，是因为mysql要保证两次执行的<span class=\"keyword\">sql</span>完全一致，连空格，大小写都一致，而且当数据表中的任何一条数据发生变化，整个缓存会失效；</span><br></pre></td></tr></table></figure>\n\n<p>#2. 删除数据</p>\n<h2 id=\"1-数据删除方式\"><a href=\"#1-数据删除方式\" class=\"headerlink\" title=\"1. 数据删除方式\"></a>1. 数据删除方式</h2><ul>\n<li>DELETE</li>\n<li>Truncate</li>\n<li>Drop</li>\n</ul>\n<h2 id=\"2-执行速度\"><a href=\"#2-执行速度\" class=\"headerlink\" title=\"2. 执行速度\"></a>2. 执行速度</h2><p>drop &gt; truncate &gt; delete</p>\n<h3 id=\"2-1-DELETE\"><a href=\"#2-1-DELETE\" class=\"headerlink\" title=\"2.1 DELETE\"></a>2.1 DELETE</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> table_name <span class=\"keyword\">WHERE</span> XXX</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>DELETE 数据数据库DML操作语言，只删除数据不删除表的结构，会走事务，执行时会触发trigger</p>\n</li>\n<li><p>在InnoDB中，delete其实并不会真的把数据删除，mysqL实际上只是给删除的数据打个标记为删除，因此delete删除表中的数据，表文件在磁盘所占的控件不会变小，存储控件不会被释放，只是把删除的数据设置为不可见。虽然未释放磁盘控件，但是下次插入数据的时候，仍然可以重用这部分空间（重用-&gt;覆盖）</p>\n</li>\n<li><p>delete执行时，会先把所删除数据缓存到rollback segement中，事务commit之后生效</p>\n</li>\n<li><p><strong>delete from  table_name</strong> 删除表的全部数据对于MyISAM会释放磁盘控件，Innodb不会释放磁盘空间</p>\n</li>\n<li><p>对于<strong>DELETE from table_name where xxx</strong>带条件的删除，不管是Innodb还是MyISAM都不会释放磁盘控件</p>\n</li>\n<li><p>delete 操作以后使用<strong>optimize table  table_name</strong>会里级释放磁盘空间（不管是Innodb还是MyISAM）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查看表占用磁盘空间大小</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> concat(round(<span class=\"built_in\">sum</span>(DATA_LENGTH<span class=\"operator\">/</span><span class=\"number\">1024</span><span class=\"operator\">/</span><span class=\"number\">1024</span>),<span class=\"number\">2</span>),<span class=\"string\">&#x27;M&#x27;</span>) <span class=\"keyword\">as</span> table_size</span><br><span class=\"line\"><span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema<span class=\"operator\">=</span><span class=\"string\">&#x27;demo_db&#x27;</span> <span class=\"keyword\">AND</span> table_name<span class=\"operator\">=</span><span class=\"string\">&#x27;demo_table&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行空间优化语句，以及执行后的表size变化</span></span><br><span class=\"line\">optimize <span class=\"keyword\">table</span> demo_table</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li><strong>delete 操作时一行一行执行删除的，并且同时将该行的删除操作日志记录在redo和undo表空间中以便进行回滚（rollback）和重做操作</strong>，生成大量日志也会占用磁盘空间</li>\n</ul>\n<h3 id=\"2-2-Truncate\"><a href=\"#2-2-Truncate\" class=\"headerlink\" title=\"2.2 Truncate\"></a>2.2 Truncate</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--删除表数据， 不带where条件</span></span><br><span class=\"line\"><span class=\"comment\">--与不带where的delete ：只删除数据，而不删除表的结构\t</span></span><br><span class=\"line\"><span class=\"keyword\">Truncate</span> <span class=\"keyword\">table</span> table_name</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>Truncate数据数据库DDL定义语言，不走事务，原数据不放到rollback segement中，操作不触发trigger</strong>，执行后里级生效，无法找回；</p>\n</li>\n<li><p><strong>truncate table table_name里级释放磁盘空间不管是Innodb 和MyISAM</strong>；truncate table其实有点类似余drop table然后create，只不过这个crate table的过程做了优化，比如表结构文件之前已经有了等，所以速度上应该是接近drop table的速度</p>\n</li>\n<li><p>truncate 能快速清空一个表，并且重置auto_increment的值</p>\n<p>​    但是对于不同的类型存储引擎需要注意的地方是：</p>\n<ul>\n<li><strong>对于MyISAM</strong>：truncate会重置auto_increment（自增序列）的值为1，而delete后表仍然保持auto_increment。</li>\n<li><strong>对于Innodb</strong>：truncate会重置auto_increment（自增序列）的值为1， 而delete后表仍然保持auto_increment。但是在做delete整个表之后重启mysql的话，而重启后的auto_increment会被置为1</li>\n</ul>\n<p>也就是说，Innodb的表本身是无法持久保存auto_increment。delete表之后auto_increment仍然保存在内存，但是重启后就丢失了，只能从1开始，实质上重启后的auto_increment会从SELETE 1+MAX(ai_col) FROM t开始</p>\n</li>\n<li><p>小心使用 truncate，尤其没有备份的时候，如果误删除线上的表，记得及时联系中国民航，订票电话：400-806-9553</p>\n</li>\n</ul>\n<h3 id=\"2-3-Drop\"><a href=\"#2-3-Drop\" class=\"headerlink\" title=\"2.3 Drop\"></a>2.3 Drop</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除表结构以及表数据</span></span><br><span class=\"line\"><span class=\"keyword\">Drop</span> <span class=\"keyword\">table</span> table_name</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>drop：属于数据库DDL定义语言，同Truncate；</strong></p>\n<p><strong>执行后立即生效，无法找回！ 执行后立即生效，无法找回！ 执行后立即生效，无法找回！</strong></p>\n</li>\n<li><p>**drop table table_name 立刻释放磁盘空间 ，不管是 InnoDB 和 MyISAM; **drop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index); 依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。</p>\n</li>\n<li><p>小心使用 drop ，要删表跑路的兄弟，请在订票成功后在执行操作！订票电话：400-806-9553</p>\n</li>\n</ul>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p><strong>可以这么理解，一本书，delete是把目录撕了，truncate是把书的内容撕下来烧了，drop是把书烧了</strong></p>\n"},{"title":"mysql数据库锁","comments":1,"abbrlink":33045,"date":"2021-07-24T08:57:10.000Z","translate_title":"mysql_04","_content":"当数据库有事物的时候，可能会产生数据的不一致，这时就需要一些机制来保证访问的次序，这就是锁的机制；\n**锁的作用**：用于挂你对共享资源的并发访问，保证数据库的完整性和一致性。\n##1. 不同引擎的锁以及锁分类\n**Mysql数据库中，InnoDB支持表、行级锁，而MyISAM支持表级锁**\n<br>\nMysql大致可以归纳为以下3种锁：\n- 表级锁：开销小，加锁块，不会出现死锁，发生锁冲突的概率最高，并发度最低。\n- 行级锁：开销大，加锁慢，会出现死锁，发生锁冲突的概率最低，并发度最高。\n- 页面锁：开销和加锁的时间介于表级锁和行级锁之间，会出现死锁，锁粒度介于两者之间；并发度一般，一次锁定相邻一组记录\n\nMysql表级锁两种模式: **表共享锁（Table Read Lock）和 表独占写锁（Table Write Lock）**，表现如下：\n- 对一个表的读操作，不会阻塞其他用户对同一表请求，但会阻塞对同一表的写请求；\n- 对MyISAM的写操作，则会则色其他用户对同一表的读和写操作；\n- MyISAM表的读操作和写操作之间，以及写操作之间是串行的。\n当一个线程获得对一个表的写锁后，只有持有锁的线程可以对表进行更新操作，其他线程的读、写操作都会等待。\n  \n##2.加表级锁\nMyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要直接用LOCK TABLE命令给MyISAM表显式加锁。\n给MyISAM表显式加锁，一般是为了一定程度模拟事务操作，实现对某一时间点多个表的一致性读取。例如，有一个订单表orders，其中记录有订单的总金额total，同时还有一个订单明细表order_detail，其中记录有订单每一产品的金额小计subtotal，假设我们需要检查这两个表的金额合计是否相等，可能就需要执行如下两条SQL\n\n\n","source":"_posts/2021/07/mysql数据库锁.md","raw":"---\ntitle: mysql数据库锁\ntags: mysql\ncategories: mysql\ncomments: true\nabbrlink: 33045\ndate: 2021-07-24 16:57:10\ntranslate_title: mysql_04\n---\n当数据库有事物的时候，可能会产生数据的不一致，这时就需要一些机制来保证访问的次序，这就是锁的机制；\n**锁的作用**：用于挂你对共享资源的并发访问，保证数据库的完整性和一致性。\n##1. 不同引擎的锁以及锁分类\n**Mysql数据库中，InnoDB支持表、行级锁，而MyISAM支持表级锁**\n<br>\nMysql大致可以归纳为以下3种锁：\n- 表级锁：开销小，加锁块，不会出现死锁，发生锁冲突的概率最高，并发度最低。\n- 行级锁：开销大，加锁慢，会出现死锁，发生锁冲突的概率最低，并发度最高。\n- 页面锁：开销和加锁的时间介于表级锁和行级锁之间，会出现死锁，锁粒度介于两者之间；并发度一般，一次锁定相邻一组记录\n\nMysql表级锁两种模式: **表共享锁（Table Read Lock）和 表独占写锁（Table Write Lock）**，表现如下：\n- 对一个表的读操作，不会阻塞其他用户对同一表请求，但会阻塞对同一表的写请求；\n- 对MyISAM的写操作，则会则色其他用户对同一表的读和写操作；\n- MyISAM表的读操作和写操作之间，以及写操作之间是串行的。\n当一个线程获得对一个表的写锁后，只有持有锁的线程可以对表进行更新操作，其他线程的读、写操作都会等待。\n  \n##2.加表级锁\nMyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要直接用LOCK TABLE命令给MyISAM表显式加锁。\n给MyISAM表显式加锁，一般是为了一定程度模拟事务操作，实现对某一时间点多个表的一致性读取。例如，有一个订单表orders，其中记录有订单的总金额total，同时还有一个订单明细表order_detail，其中记录有订单每一产品的金额小计subtotal，假设我们需要检查这两个表的金额合计是否相等，可能就需要执行如下两条SQL\n\n\n","slug":"mysql数据库锁","published":1,"updated":"2022-04-06T09:51:44.964Z","layout":"post","photos":[],"link":"","_id":"cl424hx5v002vad5i83kz0m02","content":"<p>当数据库有事物的时候，可能会产生数据的不一致，这时就需要一些机制来保证访问的次序，这就是锁的机制；<br><strong>锁的作用</strong>：用于挂你对共享资源的并发访问，保证数据库的完整性和一致性。<br>##1. 不同引擎的锁以及锁分类<br><strong>Mysql数据库中，InnoDB支持表、行级锁，而MyISAM支持表级锁</strong><br><br><br>Mysql大致可以归纳为以下3种锁：</p>\n<ul>\n<li>表级锁：开销小，加锁块，不会出现死锁，发生锁冲突的概率最高，并发度最低。</li>\n<li>行级锁：开销大，加锁慢，会出现死锁，发生锁冲突的概率最低，并发度最高。</li>\n<li>页面锁：开销和加锁的时间介于表级锁和行级锁之间，会出现死锁，锁粒度介于两者之间；并发度一般，一次锁定相邻一组记录</li>\n</ul>\n<p>Mysql表级锁两种模式: <strong>表共享锁（Table Read Lock）和 表独占写锁（Table Write Lock）</strong>，表现如下：</p>\n<ul>\n<li>对一个表的读操作，不会阻塞其他用户对同一表请求，但会阻塞对同一表的写请求；</li>\n<li>对MyISAM的写操作，则会则色其他用户对同一表的读和写操作；</li>\n<li>MyISAM表的读操作和写操作之间，以及写操作之间是串行的。<br>当一个线程获得对一个表的写锁后，只有持有锁的线程可以对表进行更新操作，其他线程的读、写操作都会等待。</li>\n</ul>\n<p>##2.加表级锁<br>MyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要直接用LOCK TABLE命令给MyISAM表显式加锁。<br>给MyISAM表显式加锁，一般是为了一定程度模拟事务操作，实现对某一时间点多个表的一致性读取。例如，有一个订单表orders，其中记录有订单的总金额total，同时还有一个订单明细表order_detail，其中记录有订单每一产品的金额小计subtotal，假设我们需要检查这两个表的金额合计是否相等，可能就需要执行如下两条SQL</p>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>当数据库有事物的时候，可能会产生数据的不一致，这时就需要一些机制来保证访问的次序，这就是锁的机制；<br><strong>锁的作用</strong>：用于挂你对共享资源的并发访问，保证数据库的完整性和一致性。<br>##1. 不同引擎的锁以及锁分类<br><strong>Mysql数据库中，InnoDB支持表、行级锁，而MyISAM支持表级锁</strong><br><br><br>Mysql大致可以归纳为以下3种锁：</p>\n<ul>\n<li>表级锁：开销小，加锁块，不会出现死锁，发生锁冲突的概率最高，并发度最低。</li>\n<li>行级锁：开销大，加锁慢，会出现死锁，发生锁冲突的概率最低，并发度最高。</li>\n<li>页面锁：开销和加锁的时间介于表级锁和行级锁之间，会出现死锁，锁粒度介于两者之间；并发度一般，一次锁定相邻一组记录</li>\n</ul>\n<p>Mysql表级锁两种模式: <strong>表共享锁（Table Read Lock）和 表独占写锁（Table Write Lock）</strong>，表现如下：</p>\n<ul>\n<li>对一个表的读操作，不会阻塞其他用户对同一表请求，但会阻塞对同一表的写请求；</li>\n<li>对MyISAM的写操作，则会则色其他用户对同一表的读和写操作；</li>\n<li>MyISAM表的读操作和写操作之间，以及写操作之间是串行的。<br>当一个线程获得对一个表的写锁后，只有持有锁的线程可以对表进行更新操作，其他线程的读、写操作都会等待。</li>\n</ul>\n<p>##2.加表级锁<br>MyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要直接用LOCK TABLE命令给MyISAM表显式加锁。<br>给MyISAM表显式加锁，一般是为了一定程度模拟事务操作，实现对某一时间点多个表的一致性读取。例如，有一个订单表orders，其中记录有订单的总金额total，同时还有一个订单明细表order_detail，其中记录有订单每一产品的金额小计subtotal，假设我们需要检查这两个表的金额合计是否相等，可能就需要执行如下两条SQL</p>\n"},{"title":"Java内存泄漏排查","comments":1,"translate_title":"java-memory-leak-troubleshooting","abbrlink":13887,"date":"2021-08-01T11:25:57.000Z","_content":"## 1.内存溢出\njava.lang.OutOfMemoryError：是指程序在申请内存是，没有足够的内存克难攻坚供其使用，出现OutOfMemoryError\n\n1. 产生原因\n    - JMM内存过小\n    - 程序不严谨，产生了过多的垃圾\n    \n2. 具体表现在以下集中情况\n    - 内存中加载的数据量过于庞大，如一次从数据库取出过多的数据\n    - 集合类中有对对象的引用，使用完后未清空，使得JVM不能回收\n    - 代码中存在死循环或循环过多产生过多重复的对象实体\n    - 使用第三方软件的bug\n    - 启动参数内存值设定过小\n    \n3. 常见错误提示\n    - tomcat:java.lang.OutOfMemoryError: PermGen space \n    - tomcat:java.lang.OutOfMemoryError: Java heap space\n    - weblogic:Root cause of ServletException java.lang.OutOfMemoryError\n    - resin:java.lang.OutOfMemoryError\n    - java:java.lang.OutOfMemoryError\n    \n4. 解决方法\n    - 增加JVM的内存大小\n      对于tomcat容器，找到tomcat在电脑中的安装目录，进入这个目录，然后进入bin目录中，在window环境下找到bin目录中的catalina.bat，在linux环境下找到catalina.sh。\n      编辑catalina.bat文件，找到JAVA_OPTS（具体来说是 set \"JAVA_OPTS=%JAVA_OPTS% %LOGGING_MANAGER%\"）这个选项的位置，这个参数是Java启动的时候，需要的启动参数。\n      也可以在操作系统的环境变量中对JAVA_OPTS进行设置，因为tomcat在启动的时候，也会读取操作系统中的环境变量的值，进行加载。\n      如果是修改了操作系统的环境变量，需要重启机器，再重启tomcat，如果修改的是tomcat配置文件，需要将配置文件保存，然后重启tomcat，设置就能生效了\n    - 优化程序，释放垃圾\n      主要思路就是避免程序体现上出现的情况。避免死循环，防止一次载入太多的数据，提高程序健壮型及时释放。因此，从根本上解决Java内存溢出的唯一方法就是修改程序，及时地释放没用的对象，释放内存空间  \n\n## 2. 内存泄漏\nMemory Leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，迟早会被占光。\n在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点：\n1）首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；\n2）其次，这些对象是无用的，即程序以后不会再使用这些对象。\n如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。\n关于内存泄露的处理页就是提高程序的健壮型，因为内存泄露是纯代码层面的问题\n\n## 3.内存溢出和内存泄漏的联系\n内存泄露会最终会导致内存溢出。\n**相同点**：都会导致应用程序运行出现问题，性能下降或挂起。\n**不同点**：\n    1) 内存泄露是导致内存溢出的原因之一，内存泄露积累起来将导致内存溢出。\n    2) 内存泄露可以通过完善代码来避免，内存溢出可以通过调整配置来减少发生频率，但无法彻底避免。\n\n## 4.排查案例\nJava的内存泄露多半是因为对象存在无效的引用，对象得不到释放，如果发现Java应用程序占用的内存出现了泄露的迹象，那么我们一般采用下面的步骤分析：\n1. 用工具生成java应用程序的heap dump（如jmap）\n2. 使用Java heap分析工具（如MAT），找出内存占用超出预期的嫌疑对象\n3. 根据情况，分析嫌疑对象和其他对象的引用关系。\n4. 分析程序的源代码，找出嫌疑对象数量过多的原因。\n\n实际操作如下：\n1.登录linux服务器，获取tomcat的pid\n```shell\nps -ef|grep java\n```\n2.利用jmap初步分析内存映射\n```shell\njmap -histo:live pid | head -7\n```\n![jmap](./outOfMemoryError/01.png)\n第2行是我们业务系统的对象，通过这个对象的引用可以初步分析出到底是哪里出现了引用未被垃圾回收收集，通知开发人员优化相关代码\n\n3.如果上面一步还无法定位到关键信息，那么需要拿到heap dump，生成离线文件，做进一步分析\n```shell\njmap -dump:live,format=b,file=heap.hprof 3514 \n```\n![jmap](./outOfMemoryError/02.png)\n4. 拿到heap dump文件，利用eclipse插件MAT来分析heap profile。 \n   - 1.安装MAT插件 \n   - 2.在eclipse里切换到Memory Analysis视图\n   - 3.用MAT打开heap profile文件。\n![jmap](./outOfMemoryError/03.png)\n直接看到下面Action窗口，有4种Action来分析heap profile，介绍其中最常用的2种:\n- **Histogram**：这个使用的最多，跟上面的jmap -histo 命令类似，只是在MAT里面可以用GUI来展示应用系统各个类产生的实例。\n  ![jmap](./outOfMemoryError/04.png)\n  Shllow Heap排序后发现 Cms_Organization 这个类占用的内存比较多（没有得到及时GC），查看引用\n  ![jmap](./outOfMemoryError/05.png)\n  分析引用栈，找到无效引用，打开源码\n  ![jmap](./outOfMemoryError/06.png)\n  **查看源码！！！**","source":"_posts/2021/07/outOfMemoryError.md","raw":"---\ntitle: Java内存泄漏排查\ntags: 内存溢出\ncategories: java\ncomments: true\ntranslate_title: java-memory-leak-troubleshooting\nabbrlink: 13887\ndate: 2021-08-01 19:25:57\n---\n## 1.内存溢出\njava.lang.OutOfMemoryError：是指程序在申请内存是，没有足够的内存克难攻坚供其使用，出现OutOfMemoryError\n\n1. 产生原因\n    - JMM内存过小\n    - 程序不严谨，产生了过多的垃圾\n    \n2. 具体表现在以下集中情况\n    - 内存中加载的数据量过于庞大，如一次从数据库取出过多的数据\n    - 集合类中有对对象的引用，使用完后未清空，使得JVM不能回收\n    - 代码中存在死循环或循环过多产生过多重复的对象实体\n    - 使用第三方软件的bug\n    - 启动参数内存值设定过小\n    \n3. 常见错误提示\n    - tomcat:java.lang.OutOfMemoryError: PermGen space \n    - tomcat:java.lang.OutOfMemoryError: Java heap space\n    - weblogic:Root cause of ServletException java.lang.OutOfMemoryError\n    - resin:java.lang.OutOfMemoryError\n    - java:java.lang.OutOfMemoryError\n    \n4. 解决方法\n    - 增加JVM的内存大小\n      对于tomcat容器，找到tomcat在电脑中的安装目录，进入这个目录，然后进入bin目录中，在window环境下找到bin目录中的catalina.bat，在linux环境下找到catalina.sh。\n      编辑catalina.bat文件，找到JAVA_OPTS（具体来说是 set \"JAVA_OPTS=%JAVA_OPTS% %LOGGING_MANAGER%\"）这个选项的位置，这个参数是Java启动的时候，需要的启动参数。\n      也可以在操作系统的环境变量中对JAVA_OPTS进行设置，因为tomcat在启动的时候，也会读取操作系统中的环境变量的值，进行加载。\n      如果是修改了操作系统的环境变量，需要重启机器，再重启tomcat，如果修改的是tomcat配置文件，需要将配置文件保存，然后重启tomcat，设置就能生效了\n    - 优化程序，释放垃圾\n      主要思路就是避免程序体现上出现的情况。避免死循环，防止一次载入太多的数据，提高程序健壮型及时释放。因此，从根本上解决Java内存溢出的唯一方法就是修改程序，及时地释放没用的对象，释放内存空间  \n\n## 2. 内存泄漏\nMemory Leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，迟早会被占光。\n在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点：\n1）首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；\n2）其次，这些对象是无用的，即程序以后不会再使用这些对象。\n如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。\n关于内存泄露的处理页就是提高程序的健壮型，因为内存泄露是纯代码层面的问题\n\n## 3.内存溢出和内存泄漏的联系\n内存泄露会最终会导致内存溢出。\n**相同点**：都会导致应用程序运行出现问题，性能下降或挂起。\n**不同点**：\n    1) 内存泄露是导致内存溢出的原因之一，内存泄露积累起来将导致内存溢出。\n    2) 内存泄露可以通过完善代码来避免，内存溢出可以通过调整配置来减少发生频率，但无法彻底避免。\n\n## 4.排查案例\nJava的内存泄露多半是因为对象存在无效的引用，对象得不到释放，如果发现Java应用程序占用的内存出现了泄露的迹象，那么我们一般采用下面的步骤分析：\n1. 用工具生成java应用程序的heap dump（如jmap）\n2. 使用Java heap分析工具（如MAT），找出内存占用超出预期的嫌疑对象\n3. 根据情况，分析嫌疑对象和其他对象的引用关系。\n4. 分析程序的源代码，找出嫌疑对象数量过多的原因。\n\n实际操作如下：\n1.登录linux服务器，获取tomcat的pid\n```shell\nps -ef|grep java\n```\n2.利用jmap初步分析内存映射\n```shell\njmap -histo:live pid | head -7\n```\n![jmap](./outOfMemoryError/01.png)\n第2行是我们业务系统的对象，通过这个对象的引用可以初步分析出到底是哪里出现了引用未被垃圾回收收集，通知开发人员优化相关代码\n\n3.如果上面一步还无法定位到关键信息，那么需要拿到heap dump，生成离线文件，做进一步分析\n```shell\njmap -dump:live,format=b,file=heap.hprof 3514 \n```\n![jmap](./outOfMemoryError/02.png)\n4. 拿到heap dump文件，利用eclipse插件MAT来分析heap profile。 \n   - 1.安装MAT插件 \n   - 2.在eclipse里切换到Memory Analysis视图\n   - 3.用MAT打开heap profile文件。\n![jmap](./outOfMemoryError/03.png)\n直接看到下面Action窗口，有4种Action来分析heap profile，介绍其中最常用的2种:\n- **Histogram**：这个使用的最多，跟上面的jmap -histo 命令类似，只是在MAT里面可以用GUI来展示应用系统各个类产生的实例。\n  ![jmap](./outOfMemoryError/04.png)\n  Shllow Heap排序后发现 Cms_Organization 这个类占用的内存比较多（没有得到及时GC），查看引用\n  ![jmap](./outOfMemoryError/05.png)\n  分析引用栈，找到无效引用，打开源码\n  ![jmap](./outOfMemoryError/06.png)\n  **查看源码！！！**","slug":"outOfMemoryError","published":1,"updated":"2022-03-27T14:06:03.447Z","layout":"post","photos":[],"link":"","_id":"cl424hx5w002zad5i5rxv1z9h","content":"<h2 id=\"1-内存溢出\"><a href=\"#1-内存溢出\" class=\"headerlink\" title=\"1.内存溢出\"></a>1.内存溢出</h2><p>java.lang.OutOfMemoryError：是指程序在申请内存是，没有足够的内存克难攻坚供其使用，出现OutOfMemoryError</p>\n<ol>\n<li>产生原因<ul>\n<li>JMM内存过小</li>\n<li>程序不严谨，产生了过多的垃圾</li>\n</ul>\n</li>\n<li>具体表现在以下集中情况<ul>\n<li>内存中加载的数据量过于庞大，如一次从数据库取出过多的数据</li>\n<li>集合类中有对对象的引用，使用完后未清空，使得JVM不能回收</li>\n<li>代码中存在死循环或循环过多产生过多重复的对象实体</li>\n<li>使用第三方软件的bug</li>\n<li>启动参数内存值设定过小</li>\n</ul>\n</li>\n<li>常见错误提示<ul>\n<li>tomcat:java.lang.OutOfMemoryError: PermGen space </li>\n<li>tomcat:java.lang.OutOfMemoryError: Java heap space</li>\n<li>weblogic:Root cause of ServletException java.lang.OutOfMemoryError</li>\n<li>resin:java.lang.OutOfMemoryError</li>\n<li>java:java.lang.OutOfMemoryError</li>\n</ul>\n</li>\n<li>解决方法<ul>\n<li>增加JVM的内存大小<br>对于tomcat容器，找到tomcat在电脑中的安装目录，进入这个目录，然后进入bin目录中，在window环境下找到bin目录中的catalina.bat，在linux环境下找到catalina.sh。<br>编辑catalina.bat文件，找到JAVA_OPTS（具体来说是 set “JAVA_OPTS=%JAVA_OPTS% %LOGGING_MANAGER%”）这个选项的位置，这个参数是Java启动的时候，需要的启动参数。<br>也可以在操作系统的环境变量中对JAVA_OPTS进行设置，因为tomcat在启动的时候，也会读取操作系统中的环境变量的值，进行加载。<br>如果是修改了操作系统的环境变量，需要重启机器，再重启tomcat，如果修改的是tomcat配置文件，需要将配置文件保存，然后重启tomcat，设置就能生效了</li>\n<li>优化程序，释放垃圾<br>主要思路就是避免程序体现上出现的情况。避免死循环，防止一次载入太多的数据，提高程序健壮型及时释放。因此，从根本上解决Java内存溢出的唯一方法就是修改程序，及时地释放没用的对象，释放内存空间  </li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-内存泄漏\"><a href=\"#2-内存泄漏\" class=\"headerlink\" title=\"2. 内存泄漏\"></a>2. 内存泄漏</h2><p>Memory Leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，迟早会被占光。<br>在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点：<br>1）首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；<br>2）其次，这些对象是无用的，即程序以后不会再使用这些对象。<br>如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。<br>关于内存泄露的处理页就是提高程序的健壮型，因为内存泄露是纯代码层面的问题</p>\n<h2 id=\"3-内存溢出和内存泄漏的联系\"><a href=\"#3-内存溢出和内存泄漏的联系\" class=\"headerlink\" title=\"3.内存溢出和内存泄漏的联系\"></a>3.内存溢出和内存泄漏的联系</h2><p>内存泄露会最终会导致内存溢出。<br><strong>相同点</strong>：都会导致应用程序运行出现问题，性能下降或挂起。<br><strong>不同点</strong>：<br>    1) 内存泄露是导致内存溢出的原因之一，内存泄露积累起来将导致内存溢出。<br>    2) 内存泄露可以通过完善代码来避免，内存溢出可以通过调整配置来减少发生频率，但无法彻底避免。</p>\n<h2 id=\"4-排查案例\"><a href=\"#4-排查案例\" class=\"headerlink\" title=\"4.排查案例\"></a>4.排查案例</h2><p>Java的内存泄露多半是因为对象存在无效的引用，对象得不到释放，如果发现Java应用程序占用的内存出现了泄露的迹象，那么我们一般采用下面的步骤分析：</p>\n<ol>\n<li>用工具生成java应用程序的heap dump（如jmap）</li>\n<li>使用Java heap分析工具（如MAT），找出内存占用超出预期的嫌疑对象</li>\n<li>根据情况，分析嫌疑对象和其他对象的引用关系。</li>\n<li>分析程序的源代码，找出嫌疑对象数量过多的原因。</li>\n</ol>\n<p>实际操作如下：<br>1.登录linux服务器，获取tomcat的pid</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef|grep java</span><br></pre></td></tr></table></figure>\n<p>2.利用jmap初步分析内存映射</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap -histo:live pid | head -7</span><br></pre></td></tr></table></figure>\n<p><img src=\"/outOfMemoryError/01.png\" alt=\"jmap\"><br>第2行是我们业务系统的对象，通过这个对象的引用可以初步分析出到底是哪里出现了引用未被垃圾回收收集，通知开发人员优化相关代码</p>\n<p>3.如果上面一步还无法定位到关键信息，那么需要拿到heap dump，生成离线文件，做进一步分析</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap -dump:live,format=b,file=heap.hprof 3514 </span><br></pre></td></tr></table></figure>\n<p><img src=\"/outOfMemoryError/02.png\" alt=\"jmap\"><br>4. 拿到heap dump文件，利用eclipse插件MAT来分析heap profile。 </p>\n<ul>\n<li>1.安装MAT插件 </li>\n<li>2.在eclipse里切换到Memory Analysis视图</li>\n<li>3.用MAT打开heap profile文件。<br><img src=\"/outOfMemoryError/03.png\" alt=\"jmap\"><br>直接看到下面Action窗口，有4种Action来分析heap profile，介绍其中最常用的2种:</li>\n<li><strong>Histogram</strong>：这个使用的最多，跟上面的jmap -histo 命令类似，只是在MAT里面可以用GUI来展示应用系统各个类产生的实例。<br><img src=\"/outOfMemoryError/04.png\" alt=\"jmap\"><br>Shllow Heap排序后发现 Cms_Organization 这个类占用的内存比较多（没有得到及时GC），查看引用<br><img src=\"/outOfMemoryError/05.png\" alt=\"jmap\"><br>分析引用栈，找到无效引用，打开源码<br><img src=\"/outOfMemoryError/06.png\" alt=\"jmap\"><br><strong>查看源码！！！</strong></li>\n</ul>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h2 id=\"1-内存溢出\"><a href=\"#1-内存溢出\" class=\"headerlink\" title=\"1.内存溢出\"></a>1.内存溢出</h2><p>java.lang.OutOfMemoryError：是指程序在申请内存是，没有足够的内存克难攻坚供其使用，出现OutOfMemoryError</p>\n<ol>\n<li>产生原因<ul>\n<li>JMM内存过小</li>\n<li>程序不严谨，产生了过多的垃圾</li>\n</ul>\n</li>\n<li>具体表现在以下集中情况<ul>\n<li>内存中加载的数据量过于庞大，如一次从数据库取出过多的数据</li>\n<li>集合类中有对对象的引用，使用完后未清空，使得JVM不能回收</li>\n<li>代码中存在死循环或循环过多产生过多重复的对象实体</li>\n<li>使用第三方软件的bug</li>\n<li>启动参数内存值设定过小</li>\n</ul>\n</li>\n<li>常见错误提示<ul>\n<li>tomcat:java.lang.OutOfMemoryError: PermGen space </li>\n<li>tomcat:java.lang.OutOfMemoryError: Java heap space</li>\n<li>weblogic:Root cause of ServletException java.lang.OutOfMemoryError</li>\n<li>resin:java.lang.OutOfMemoryError</li>\n<li>java:java.lang.OutOfMemoryError</li>\n</ul>\n</li>\n<li>解决方法<ul>\n<li>增加JVM的内存大小<br>对于tomcat容器，找到tomcat在电脑中的安装目录，进入这个目录，然后进入bin目录中，在window环境下找到bin目录中的catalina.bat，在linux环境下找到catalina.sh。<br>编辑catalina.bat文件，找到JAVA_OPTS（具体来说是 set “JAVA_OPTS=%JAVA_OPTS% %LOGGING_MANAGER%”）这个选项的位置，这个参数是Java启动的时候，需要的启动参数。<br>也可以在操作系统的环境变量中对JAVA_OPTS进行设置，因为tomcat在启动的时候，也会读取操作系统中的环境变量的值，进行加载。<br>如果是修改了操作系统的环境变量，需要重启机器，再重启tomcat，如果修改的是tomcat配置文件，需要将配置文件保存，然后重启tomcat，设置就能生效了</li>\n<li>优化程序，释放垃圾<br>主要思路就是避免程序体现上出现的情况。避免死循环，防止一次载入太多的数据，提高程序健壮型及时释放。因此，从根本上解决Java内存溢出的唯一方法就是修改程序，及时地释放没用的对象，释放内存空间  </li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-内存泄漏\"><a href=\"#2-内存泄漏\" class=\"headerlink\" title=\"2. 内存泄漏\"></a>2. 内存泄漏</h2><p>Memory Leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，迟早会被占光。<br>在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点：<br>1）首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；<br>2）其次，这些对象是无用的，即程序以后不会再使用这些对象。<br>如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。<br>关于内存泄露的处理页就是提高程序的健壮型，因为内存泄露是纯代码层面的问题</p>\n<h2 id=\"3-内存溢出和内存泄漏的联系\"><a href=\"#3-内存溢出和内存泄漏的联系\" class=\"headerlink\" title=\"3.内存溢出和内存泄漏的联系\"></a>3.内存溢出和内存泄漏的联系</h2><p>内存泄露会最终会导致内存溢出。<br><strong>相同点</strong>：都会导致应用程序运行出现问题，性能下降或挂起。<br><strong>不同点</strong>：<br>    1) 内存泄露是导致内存溢出的原因之一，内存泄露积累起来将导致内存溢出。<br>    2) 内存泄露可以通过完善代码来避免，内存溢出可以通过调整配置来减少发生频率，但无法彻底避免。</p>\n<h2 id=\"4-排查案例\"><a href=\"#4-排查案例\" class=\"headerlink\" title=\"4.排查案例\"></a>4.排查案例</h2><p>Java的内存泄露多半是因为对象存在无效的引用，对象得不到释放，如果发现Java应用程序占用的内存出现了泄露的迹象，那么我们一般采用下面的步骤分析：</p>\n<ol>\n<li>用工具生成java应用程序的heap dump（如jmap）</li>\n<li>使用Java heap分析工具（如MAT），找出内存占用超出预期的嫌疑对象</li>\n<li>根据情况，分析嫌疑对象和其他对象的引用关系。</li>\n<li>分析程序的源代码，找出嫌疑对象数量过多的原因。</li>\n</ol>\n<p>实际操作如下：<br>1.登录linux服务器，获取tomcat的pid</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef|grep java</span><br></pre></td></tr></table></figure>\n<p>2.利用jmap初步分析内存映射</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap -histo:live pid | head -7</span><br></pre></td></tr></table></figure>\n<p><img src=\"/outOfMemoryError/01.png\" alt=\"jmap\"><br>第2行是我们业务系统的对象，通过这个对象的引用可以初步分析出到底是哪里出现了引用未被垃圾回收收集，通知开发人员优化相关代码</p>\n<p>3.如果上面一步还无法定位到关键信息，那么需要拿到heap dump，生成离线文件，做进一步分析</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap -dump:live,format=b,file=heap.hprof 3514 </span><br></pre></td></tr></table></figure>\n<p><img src=\"/outOfMemoryError/02.png\" alt=\"jmap\"><br>4. 拿到heap dump文件，利用eclipse插件MAT来分析heap profile。 </p>\n<ul>\n<li>1.安装MAT插件 </li>\n<li>2.在eclipse里切换到Memory Analysis视图</li>\n<li>3.用MAT打开heap profile文件。<br><img src=\"/outOfMemoryError/03.png\" alt=\"jmap\"><br>直接看到下面Action窗口，有4种Action来分析heap profile，介绍其中最常用的2种:</li>\n<li><strong>Histogram</strong>：这个使用的最多，跟上面的jmap -histo 命令类似，只是在MAT里面可以用GUI来展示应用系统各个类产生的实例。<br><img src=\"/outOfMemoryError/04.png\" alt=\"jmap\"><br>Shllow Heap排序后发现 Cms_Organization 这个类占用的内存比较多（没有得到及时GC），查看引用<br><img src=\"/outOfMemoryError/05.png\" alt=\"jmap\"><br>分析引用栈，找到无效引用，打开源码<br><img src=\"/outOfMemoryError/06.png\" alt=\"jmap\"><br><strong>查看源码！！！</strong></li>\n</ul>\n"},{"title":"redis常见使用场景","comments":1,"abbrlink":58805,"date":"2021-08-14T09:51:30.000Z","translate_title":"redis-usage-scenario","_content":"##  1. 缓存\nString类型\n例如：热点数据缓存、对象缓存、全页缓存可以提升热点数据的访问效率\n\n##  2. 数据共享分布式\nString类型，因为redis是分布式的独立服务，可以在多个应用服务之间共享，例如分布式session\n```xml\n<dependency> \n    <groupId>org.springframework.session</groupId> \n    <artifactId>spring-session-data-redis</artifactId> \n</dependency>\n```\n\n## 3. 分布式锁\nString类型 setnx方法，只有不存在时才能添加成功返回true\n```java\npublic static boolean getLock(String key) {\n    Long flag = jedis.setnx(key, \"1\");\n    if (flag == 1) {\n        jedis.expire(key, 10);\n    }\n    return flag == 1;\n}\n\npublic static void releaseLock(String key) {\n    jedis.del(key);\n}\n```\n\n## 4. 全局ID\nint 类型， incrby, 利用原子性\n```shell\nincrby userid 1000\n```\n分库分表的场景，一次性拿一段。\n\n## 5. 计数器\nint 类型，incr方法\n例如：文章的阅读量、微博点赞数；允许一定的延迟，先写入redis在定时同步到数据库\n1. 第一种方法\n```java\n@Service\npublic class TestService {\n    \n    @Resource\n    RedisTemplate<String,Object> redisTemplate;\n    \n    @Resource(name=\"redisTemplate\")\n    private ValueOperations<String,Object> ops;\n    \n    public int testRedis() {\n        try {\n            //此方法会先检查key是否存在，存在+1，不存在先初始化，再+1\n            ops.increment(\"success\", 1);\n            \n            //return (int) ops.get(\"success\"); //使用这个会出现错误，报错信息 Caused by: org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is java.io.EOFException。\n            return Integer.valueOf(redisTemplate.boundValueOps(\"success\").get(0, -1));\n        } catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        }\n        \n        return 0 ;\n    }\n    \n}\n```\n\n2. 第二种方法\n```java\n@Service\npublic class TestService {\n    \n    @Resource\n    RedisTemplate<String,Object> redisTemplate;\n    \n    @Resource(name=\"redisTemplate\")\n    private ValueOperations<String,Object> ops;\n    \n    public int testRedis() {\n        try {\n            //此方法会先检查key是否存在，存在+1，不存在先初始化，再+1\n            ops.increment(\"success\", 1);\n            \n            //return (int) ops.get(\"success\");\n            //return Integer.valueOf(redisTemplate.boundValueOps(\"success\").get(0, -1));\n            return (int) getKey(\"success\");\n        } catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        }\n        \n        return 0 ;\n    }\n    \n    public long getKey(final String key) {\n        \n        return redisTemplate.execute(new RedisCallback<Long>() {\n            @Override\n            public Long doInRedis(RedisConnection connection) throws DataAccessException {\n                \n                RedisSerializer<String> redisSerializer = redisTemplate.getStringSerializer();\n                \n                byte[] rowkey = redisSerializer.serialize(key);\n                byte[] rowval = connection.get(rowkey);\n                \n                try {\n                    String val = redisSerializer.deserialize(rowval);\n                    return Long.parseLong(val);\n                } catch (Exception e) {\n                    return 0L;\n                }\n            }\n        });\n    }\n    \n}\n```\n设置每天零点过期，重新计数\n```java\n//当天时间\nDate date = new Date();\n//当天零点\ndate = DateUtils.truncate(date, Calendar.DAY_OF_MONTH);\n//第二天零点\ndate = DateUtils.addDays(date, +1);\nredisTemplate.expireAt(\"success\", date);\n```\n## 6. 限流\nint类型，incr方法\n以访问者的IP和其他信息作为key,访问一次增加一次次数，超过次数 则返回false\n\n## 7. 位统计\nString类型的bitcount\n字符是以8位二进制存储的\n```shell\nset k1 a\nsetbit k1 6 1\nsetbit k1 7 0\nget k1 \n/* 6 7 代表的a的二进制位的修改\n\na 对应的ASCII码是97，转换为二进制数据是01100001\nb 对应的ASCII码是98，转换为二进制数据是01100010\n\n因为bit非常节省空间（1 MB=8388608 bit），可以用来做大数据量的统计。\n*/\n```\n例如：在线用户统计，留存用户统计\n```shell\nsetbit onlineusers 01 \nsetbit onlineusers 11 \nsetbit onlineusers 20\n```\n支持按位与、按位或等等操作\n```shell\nBITOPANDdestkeykey[key...] ，对一个或多个 key 求逻辑并，并将结果保存到 destkey 。       \nBITOPORdestkeykey[key...] ，对一个或多个 key 求逻辑或，并将结果保存到 destkey 。 \nBITOPXORdestkeykey[key...] ，对一个或多个 key 求逻辑异或，并将结果保存到 destkey 。 \nBITOPNOTdestkeykey ，对给定 key 求逻辑非，并将结果保存到 destkey 。\n```\n计算出7天都在线的用户\n```shell\nBITOP \"AND\" \"7_days_both_online_users\" \"day_1_online_users\" \"day_2_online_users\" ...  \"day_7_online_users\"\n```\n\n##  8. 购物车\nString 或hash。所有String可以做的hash都可以\nhash类型是一个String类型的field和value的映射表，每个hash都可以存储2^32 -1键值对\n**使用hash做购物车：以用户id为key, 商品id为field，商品数量为value。**\n![](./redis-usage-scenario/01.png)\n## 9. 用户消息时间线timeline\nlist，双向链表，直接作为timeline就好了。插入有序\n\n## 10. 消息队列\nList提供了两个阻塞的弹出操作：blpop/brpop，可以设置超时时间\n\n- blpop：blpop key1 timeout 移除并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\n- brpop：brpop key1 timeout 移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\n上面的操作。其实就是java的阻塞队列。学习的东西越多。学习成本越低\n\n- 队列：先进先除：rpush blpop，左头右尾，右边进入队列，左边出队列\n- 栈：先进后出：rpush brpop\n\n## 11. 抽奖\n自带一个随机获得值\n```shell\nspop myset\n```\n\n## 12. 点赞、签到、打卡\n![点赞、签到、打卡](./redis-usage-scenario/02.png)\n假如上面的微博ID是t1001，用户ID是u3001\n\n用 like:t1001 来维护 t1001 这条微博的所有点赞用户\n\n- 点赞了这条微博：sadd like:t1001 u3001\n- 取消点赞：srem like:t1001 u3001\n- 是否点赞：sismember like:t1001 u3001\n- 点赞的所有用户：smembers like:t1001\n- 点赞数：scard like:t1001\n\n## 13. 商品标签\n![商品标签](./redis-usage-scenario/03.png)\n用 tags:i5001 来维护商品所有的标签。\n- sadd tags:i5001 画面清晰细腻\n- sadd tags:i5001 真彩清晰显示屏\n- sadd tags:i5001 流程至极\n\n## 14.商品筛选\n```shell\n// 获取差集\nsdiff set1 set2\n// 获取交集（intersection ）\nsinter set1 set2\n// 获取并集\nsunion set1 set2\n```\n![商品筛选](./redis-usage-scenario/04.png)\n```shell\nsadd brand:apple iPhone11\n\nsadd brand:ios iPhone11\n\nsad screensize:6.0-6.24 iPhone11\n\nsad screentype:lcd iPhone 11\n```\n筛选商品，苹果的、ios的、屏幕在6.0-6.24之间的，屏幕材质是LCD屏幕\n```shell\nsinter brand:apple brand:ios screensize:6.0-6.24 screentype:lcd\n```\n## 15. 用户关注、推荐模型\n```shell\n## follow 关注 fans 粉丝\nsadd 1:follow 2\nsadd 2:fans 1\nsadd 1:fans 2\nsadd 2:follow 1\n```\n我关注的人也关注了他(取交集)：\n```shell\nsinter 1:follow 2:fans\n```\n可能认识的人：\n```shell\n## 用户1可能认识的人(差集)：\nsdiff 2:follow 1:follow\n\n## 用户2可能认识的人：\nsdiff 1:follow 2:follow\n```\n\n## 16. 排行榜\nid 为6001 的新闻点击数加1：zincrby hotNews:20190926 1 n6001\n获取今天点击最多的15条：zrevrange hotNews:20190926 0 15 withscores\n![排行榜](./redis-usage-scenario/05.png)\n\n---\n\n![](./redis-usage-scenario/06.png)\n\n\n\n## redis不适用的场景\nRedis是一种缓存技术，主要用来提高应用的性能，更多的应用场景是对数据库读数据进行缓存，减轻数据库的IO的访问压力，以下场景不太适合使用Redis:\n- 数据规模大小角度\n\n    Redis是将数据放在内存进行缓存的，内存相对于磁盘来锁价格是比较贵的。**如果成本是需要考虑的重要因素，那么大规模的数据就不太适合**；\n  \n- 数据冷热程度角度\n\n    很多业务数据可以根据数据读的频繁程度分为热数据和冷数据；**频繁使用的热数据一般适合用redis，冷数据一般不太适合用redis**,如果大量的冷数据进行了缓存，那是对内存资源的浪费，\n  所以在应用场景上区分冷热数据，将热数据放在内存中，进而提高性能。","source":"_posts/2021/07/redis-usage-scenario.md","raw":"---\ntitle: redis常见使用场景\ntags: redis\ncategories: 中间件\ncomments: true\nabbrlink: 58805\ndate: 2021-08-14 17:51:30\ntranslate_title: redis-usage-scenario\n---\n##  1. 缓存\nString类型\n例如：热点数据缓存、对象缓存、全页缓存可以提升热点数据的访问效率\n\n##  2. 数据共享分布式\nString类型，因为redis是分布式的独立服务，可以在多个应用服务之间共享，例如分布式session\n```xml\n<dependency> \n    <groupId>org.springframework.session</groupId> \n    <artifactId>spring-session-data-redis</artifactId> \n</dependency>\n```\n\n## 3. 分布式锁\nString类型 setnx方法，只有不存在时才能添加成功返回true\n```java\npublic static boolean getLock(String key) {\n    Long flag = jedis.setnx(key, \"1\");\n    if (flag == 1) {\n        jedis.expire(key, 10);\n    }\n    return flag == 1;\n}\n\npublic static void releaseLock(String key) {\n    jedis.del(key);\n}\n```\n\n## 4. 全局ID\nint 类型， incrby, 利用原子性\n```shell\nincrby userid 1000\n```\n分库分表的场景，一次性拿一段。\n\n## 5. 计数器\nint 类型，incr方法\n例如：文章的阅读量、微博点赞数；允许一定的延迟，先写入redis在定时同步到数据库\n1. 第一种方法\n```java\n@Service\npublic class TestService {\n    \n    @Resource\n    RedisTemplate<String,Object> redisTemplate;\n    \n    @Resource(name=\"redisTemplate\")\n    private ValueOperations<String,Object> ops;\n    \n    public int testRedis() {\n        try {\n            //此方法会先检查key是否存在，存在+1，不存在先初始化，再+1\n            ops.increment(\"success\", 1);\n            \n            //return (int) ops.get(\"success\"); //使用这个会出现错误，报错信息 Caused by: org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is java.io.EOFException。\n            return Integer.valueOf(redisTemplate.boundValueOps(\"success\").get(0, -1));\n        } catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        }\n        \n        return 0 ;\n    }\n    \n}\n```\n\n2. 第二种方法\n```java\n@Service\npublic class TestService {\n    \n    @Resource\n    RedisTemplate<String,Object> redisTemplate;\n    \n    @Resource(name=\"redisTemplate\")\n    private ValueOperations<String,Object> ops;\n    \n    public int testRedis() {\n        try {\n            //此方法会先检查key是否存在，存在+1，不存在先初始化，再+1\n            ops.increment(\"success\", 1);\n            \n            //return (int) ops.get(\"success\");\n            //return Integer.valueOf(redisTemplate.boundValueOps(\"success\").get(0, -1));\n            return (int) getKey(\"success\");\n        } catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        }\n        \n        return 0 ;\n    }\n    \n    public long getKey(final String key) {\n        \n        return redisTemplate.execute(new RedisCallback<Long>() {\n            @Override\n            public Long doInRedis(RedisConnection connection) throws DataAccessException {\n                \n                RedisSerializer<String> redisSerializer = redisTemplate.getStringSerializer();\n                \n                byte[] rowkey = redisSerializer.serialize(key);\n                byte[] rowval = connection.get(rowkey);\n                \n                try {\n                    String val = redisSerializer.deserialize(rowval);\n                    return Long.parseLong(val);\n                } catch (Exception e) {\n                    return 0L;\n                }\n            }\n        });\n    }\n    \n}\n```\n设置每天零点过期，重新计数\n```java\n//当天时间\nDate date = new Date();\n//当天零点\ndate = DateUtils.truncate(date, Calendar.DAY_OF_MONTH);\n//第二天零点\ndate = DateUtils.addDays(date, +1);\nredisTemplate.expireAt(\"success\", date);\n```\n## 6. 限流\nint类型，incr方法\n以访问者的IP和其他信息作为key,访问一次增加一次次数，超过次数 则返回false\n\n## 7. 位统计\nString类型的bitcount\n字符是以8位二进制存储的\n```shell\nset k1 a\nsetbit k1 6 1\nsetbit k1 7 0\nget k1 \n/* 6 7 代表的a的二进制位的修改\n\na 对应的ASCII码是97，转换为二进制数据是01100001\nb 对应的ASCII码是98，转换为二进制数据是01100010\n\n因为bit非常节省空间（1 MB=8388608 bit），可以用来做大数据量的统计。\n*/\n```\n例如：在线用户统计，留存用户统计\n```shell\nsetbit onlineusers 01 \nsetbit onlineusers 11 \nsetbit onlineusers 20\n```\n支持按位与、按位或等等操作\n```shell\nBITOPANDdestkeykey[key...] ，对一个或多个 key 求逻辑并，并将结果保存到 destkey 。       \nBITOPORdestkeykey[key...] ，对一个或多个 key 求逻辑或，并将结果保存到 destkey 。 \nBITOPXORdestkeykey[key...] ，对一个或多个 key 求逻辑异或，并将结果保存到 destkey 。 \nBITOPNOTdestkeykey ，对给定 key 求逻辑非，并将结果保存到 destkey 。\n```\n计算出7天都在线的用户\n```shell\nBITOP \"AND\" \"7_days_both_online_users\" \"day_1_online_users\" \"day_2_online_users\" ...  \"day_7_online_users\"\n```\n\n##  8. 购物车\nString 或hash。所有String可以做的hash都可以\nhash类型是一个String类型的field和value的映射表，每个hash都可以存储2^32 -1键值对\n**使用hash做购物车：以用户id为key, 商品id为field，商品数量为value。**\n![](./redis-usage-scenario/01.png)\n## 9. 用户消息时间线timeline\nlist，双向链表，直接作为timeline就好了。插入有序\n\n## 10. 消息队列\nList提供了两个阻塞的弹出操作：blpop/brpop，可以设置超时时间\n\n- blpop：blpop key1 timeout 移除并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\n- brpop：brpop key1 timeout 移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\n上面的操作。其实就是java的阻塞队列。学习的东西越多。学习成本越低\n\n- 队列：先进先除：rpush blpop，左头右尾，右边进入队列，左边出队列\n- 栈：先进后出：rpush brpop\n\n## 11. 抽奖\n自带一个随机获得值\n```shell\nspop myset\n```\n\n## 12. 点赞、签到、打卡\n![点赞、签到、打卡](./redis-usage-scenario/02.png)\n假如上面的微博ID是t1001，用户ID是u3001\n\n用 like:t1001 来维护 t1001 这条微博的所有点赞用户\n\n- 点赞了这条微博：sadd like:t1001 u3001\n- 取消点赞：srem like:t1001 u3001\n- 是否点赞：sismember like:t1001 u3001\n- 点赞的所有用户：smembers like:t1001\n- 点赞数：scard like:t1001\n\n## 13. 商品标签\n![商品标签](./redis-usage-scenario/03.png)\n用 tags:i5001 来维护商品所有的标签。\n- sadd tags:i5001 画面清晰细腻\n- sadd tags:i5001 真彩清晰显示屏\n- sadd tags:i5001 流程至极\n\n## 14.商品筛选\n```shell\n// 获取差集\nsdiff set1 set2\n// 获取交集（intersection ）\nsinter set1 set2\n// 获取并集\nsunion set1 set2\n```\n![商品筛选](./redis-usage-scenario/04.png)\n```shell\nsadd brand:apple iPhone11\n\nsadd brand:ios iPhone11\n\nsad screensize:6.0-6.24 iPhone11\n\nsad screentype:lcd iPhone 11\n```\n筛选商品，苹果的、ios的、屏幕在6.0-6.24之间的，屏幕材质是LCD屏幕\n```shell\nsinter brand:apple brand:ios screensize:6.0-6.24 screentype:lcd\n```\n## 15. 用户关注、推荐模型\n```shell\n## follow 关注 fans 粉丝\nsadd 1:follow 2\nsadd 2:fans 1\nsadd 1:fans 2\nsadd 2:follow 1\n```\n我关注的人也关注了他(取交集)：\n```shell\nsinter 1:follow 2:fans\n```\n可能认识的人：\n```shell\n## 用户1可能认识的人(差集)：\nsdiff 2:follow 1:follow\n\n## 用户2可能认识的人：\nsdiff 1:follow 2:follow\n```\n\n## 16. 排行榜\nid 为6001 的新闻点击数加1：zincrby hotNews:20190926 1 n6001\n获取今天点击最多的15条：zrevrange hotNews:20190926 0 15 withscores\n![排行榜](./redis-usage-scenario/05.png)\n\n---\n\n![](./redis-usage-scenario/06.png)\n\n\n\n## redis不适用的场景\nRedis是一种缓存技术，主要用来提高应用的性能，更多的应用场景是对数据库读数据进行缓存，减轻数据库的IO的访问压力，以下场景不太适合使用Redis:\n- 数据规模大小角度\n\n    Redis是将数据放在内存进行缓存的，内存相对于磁盘来锁价格是比较贵的。**如果成本是需要考虑的重要因素，那么大规模的数据就不太适合**；\n  \n- 数据冷热程度角度\n\n    很多业务数据可以根据数据读的频繁程度分为热数据和冷数据；**频繁使用的热数据一般适合用redis，冷数据一般不太适合用redis**,如果大量的冷数据进行了缓存，那是对内存资源的浪费，\n  所以在应用场景上区分冷热数据，将热数据放在内存中，进而提高性能。","slug":"redis-usage-scenario","published":1,"updated":"2022-03-27T14:06:03.486Z","layout":"post","photos":[],"link":"","_id":"cl424hx5w0033ad5idewu28ka","content":"<h2 id=\"1-缓存\"><a href=\"#1-缓存\" class=\"headerlink\" title=\"1. 缓存\"></a>1. 缓存</h2><p>String类型<br>例如：热点数据缓存、对象缓存、全页缓存可以提升热点数据的访问效率</p>\n<h2 id=\"2-数据共享分布式\"><a href=\"#2-数据共享分布式\" class=\"headerlink\" title=\"2. 数据共享分布式\"></a>2. 数据共享分布式</h2><p>String类型，因为redis是分布式的独立服务，可以在多个应用服务之间共享，例如分布式session</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.session<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-session-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-分布式锁\"><a href=\"#3-分布式锁\" class=\"headerlink\" title=\"3. 分布式锁\"></a>3. 分布式锁</h2><p>String类型 setnx方法，只有不存在时才能添加成功返回true</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">getLock</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    Long flag = jedis.setnx(key, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        jedis.expire(key, <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">releaseLock</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    jedis.del(key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-全局ID\"><a href=\"#4-全局ID\" class=\"headerlink\" title=\"4. 全局ID\"></a>4. 全局ID</h2><p>int 类型， incrby, 利用原子性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incrby userid 1000</span><br></pre></td></tr></table></figure>\n<p>分库分表的场景，一次性拿一段。</p>\n<h2 id=\"5-计数器\"><a href=\"#5-计数器\" class=\"headerlink\" title=\"5. 计数器\"></a>5. 计数器</h2><p>int 类型，incr方法<br>例如：文章的阅读量、微博点赞数；允许一定的延迟，先写入redis在定时同步到数据库</p>\n<ol>\n<li><p>第一种方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource(name=&quot;redisTemplate&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ValueOperations&lt;String,Object&gt; ops;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testRedis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//此方法会先检查key是否存在，存在+1，不存在先初始化，再+1</span></span><br><span class=\"line\">            ops.increment(<span class=\"string\">&quot;success&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//return (int) ops.get(&quot;success&quot;); //使用这个会出现错误，报错信息 Caused by: org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is java.io.EOFException。</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Integer.valueOf(redisTemplate.boundValueOps(<span class=\"string\">&quot;success&quot;</span>).get(<span class=\"number\">0</span>, -<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>第二种方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource(name=&quot;redisTemplate&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ValueOperations&lt;String,Object&gt; ops;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testRedis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//此方法会先检查key是否存在，存在+1，不存在先初始化，再+1</span></span><br><span class=\"line\">            ops.increment(<span class=\"string\">&quot;success&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//return (int) ops.get(&quot;success&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">//return Integer.valueOf(redisTemplate.boundValueOps(&quot;success&quot;).get(0, -1));</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) getKey(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getKey</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.execute(<span class=\"keyword\">new</span> RedisCallback&lt;Long&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">doInRedis</span><span class=\"params\">(RedisConnection connection)</span> <span class=\"keyword\">throws</span> DataAccessException </span>&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                RedisSerializer&lt;String&gt; redisSerializer = redisTemplate.getStringSerializer();</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] rowkey = redisSerializer.serialize(key);</span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] rowval = connection.get(rowkey);</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    String val = redisSerializer.deserialize(rowval);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Long.parseLong(val);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0L</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置每天零点过期，重新计数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当天时间</span></span><br><span class=\"line\">Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\"><span class=\"comment\">//当天零点</span></span><br><span class=\"line\">date = DateUtils.truncate(date, Calendar.DAY_OF_MONTH);</span><br><span class=\"line\"><span class=\"comment\">//第二天零点</span></span><br><span class=\"line\">date = DateUtils.addDays(date, +<span class=\"number\">1</span>);</span><br><span class=\"line\">redisTemplate.expireAt(<span class=\"string\">&quot;success&quot;</span>, date);</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-限流\"><a href=\"#6-限流\" class=\"headerlink\" title=\"6. 限流\"></a>6. 限流</h2><p>int类型，incr方法<br>以访问者的IP和其他信息作为key,访问一次增加一次次数，超过次数 则返回false</p>\n</li>\n</ol>\n<h2 id=\"7-位统计\"><a href=\"#7-位统计\" class=\"headerlink\" title=\"7. 位统计\"></a>7. 位统计</h2><p>String类型的bitcount<br>字符是以8位二进制存储的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set k1 a</span><br><span class=\"line\">setbit k1 6 1</span><br><span class=\"line\">setbit k1 7 0</span><br><span class=\"line\">get k1 </span><br><span class=\"line\">/* 6 7 代表的a的二进制位的修改</span><br><span class=\"line\"></span><br><span class=\"line\">a 对应的ASCII码是97，转换为二进制数据是01100001</span><br><span class=\"line\">b 对应的ASCII码是98，转换为二进制数据是01100010</span><br><span class=\"line\"></span><br><span class=\"line\">因为bit非常节省空间（1 MB=8388608 bit），可以用来做大数据量的统计。</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>例如：在线用户统计，留存用户统计</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setbit onlineusers 01 </span><br><span class=\"line\">setbit onlineusers 11 </span><br><span class=\"line\">setbit onlineusers 20</span><br></pre></td></tr></table></figure>\n<p>支持按位与、按位或等等操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BITOPANDdestkeykey[key...] ，对一个或多个 key 求逻辑并，并将结果保存到 destkey 。       </span><br><span class=\"line\">BITOPORdestkeykey[key...] ，对一个或多个 key 求逻辑或，并将结果保存到 destkey 。 </span><br><span class=\"line\">BITOPXORdestkeykey[key...] ，对一个或多个 key 求逻辑异或，并将结果保存到 destkey 。 </span><br><span class=\"line\">BITOPNOTdestkeykey ，对给定 key 求逻辑非，并将结果保存到 destkey 。</span><br></pre></td></tr></table></figure>\n<p>计算出7天都在线的用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BITOP &quot;AND&quot; &quot;7_days_both_online_users&quot; &quot;day_1_online_users&quot; &quot;day_2_online_users&quot; ...  &quot;day_7_online_users&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-购物车\"><a href=\"#8-购物车\" class=\"headerlink\" title=\"8. 购物车\"></a>8. 购物车</h2><p>String 或hash。所有String可以做的hash都可以<br>hash类型是一个String类型的field和value的映射表，每个hash都可以存储2^32 -1键值对<br><strong>使用hash做购物车：以用户id为key, 商品id为field，商品数量为value。</strong><br><img src=\"/redis-usage-scenario/01.png\"></p>\n<h2 id=\"9-用户消息时间线timeline\"><a href=\"#9-用户消息时间线timeline\" class=\"headerlink\" title=\"9. 用户消息时间线timeline\"></a>9. 用户消息时间线timeline</h2><p>list，双向链表，直接作为timeline就好了。插入有序</p>\n<h2 id=\"10-消息队列\"><a href=\"#10-消息队列\" class=\"headerlink\" title=\"10. 消息队列\"></a>10. 消息队列</h2><p>List提供了两个阻塞的弹出操作：blpop/brpop，可以设置超时时间</p>\n<ul>\n<li><p>blpop：blpop key1 timeout 移除并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p>\n</li>\n<li><p>brpop：brpop key1 timeout 移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。<br>上面的操作。其实就是java的阻塞队列。学习的东西越多。学习成本越低</p>\n</li>\n<li><p>队列：先进先除：rpush blpop，左头右尾，右边进入队列，左边出队列</p>\n</li>\n<li><p>栈：先进后出：rpush brpop</p>\n</li>\n</ul>\n<h2 id=\"11-抽奖\"><a href=\"#11-抽奖\" class=\"headerlink\" title=\"11. 抽奖\"></a>11. 抽奖</h2><p>自带一个随机获得值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spop myset</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-点赞、签到、打卡\"><a href=\"#12-点赞、签到、打卡\" class=\"headerlink\" title=\"12. 点赞、签到、打卡\"></a>12. 点赞、签到、打卡</h2><p><img src=\"/redis-usage-scenario/02.png\" alt=\"点赞、签到、打卡\"><br>假如上面的微博ID是t1001，用户ID是u3001</p>\n<p>用 like:t1001 来维护 t1001 这条微博的所有点赞用户</p>\n<ul>\n<li>点赞了这条微博：sadd like:t1001 u3001</li>\n<li>取消点赞：srem like:t1001 u3001</li>\n<li>是否点赞：sismember like:t1001 u3001</li>\n<li>点赞的所有用户：smembers like:t1001</li>\n<li>点赞数：scard like:t1001</li>\n</ul>\n<h2 id=\"13-商品标签\"><a href=\"#13-商品标签\" class=\"headerlink\" title=\"13. 商品标签\"></a>13. 商品标签</h2><p><img src=\"/redis-usage-scenario/03.png\" alt=\"商品标签\"><br>用 tags:i5001 来维护商品所有的标签。</p>\n<ul>\n<li>sadd tags:i5001 画面清晰细腻</li>\n<li>sadd tags:i5001 真彩清晰显示屏</li>\n<li>sadd tags:i5001 流程至极</li>\n</ul>\n<h2 id=\"14-商品筛选\"><a href=\"#14-商品筛选\" class=\"headerlink\" title=\"14.商品筛选\"></a>14.商品筛选</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取差集</span><br><span class=\"line\">sdiff set1 set2</span><br><span class=\"line\">// 获取交集（intersection ）</span><br><span class=\"line\">sinter set1 set2</span><br><span class=\"line\">// 获取并集</span><br><span class=\"line\">sunion set1 set2</span><br></pre></td></tr></table></figure>\n<p><img src=\"/redis-usage-scenario/04.png\" alt=\"商品筛选\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sadd brand:apple iPhone11</span><br><span class=\"line\"></span><br><span class=\"line\">sadd brand:ios iPhone11</span><br><span class=\"line\"></span><br><span class=\"line\">sad screensize:6.0-6.24 iPhone11</span><br><span class=\"line\"></span><br><span class=\"line\">sad screentype:lcd iPhone 11</span><br></pre></td></tr></table></figure>\n<p>筛选商品，苹果的、ios的、屏幕在6.0-6.24之间的，屏幕材质是LCD屏幕</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinter brand:apple brand:ios screensize:6.0-6.24 screentype:lcd</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-用户关注、推荐模型\"><a href=\"#15-用户关注、推荐模型\" class=\"headerlink\" title=\"15. 用户关注、推荐模型\"></a>15. 用户关注、推荐模型</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># follow 关注 fans 粉丝</span></span></span><br><span class=\"line\">sadd 1:follow 2</span><br><span class=\"line\">sadd 2:fans 1</span><br><span class=\"line\">sadd 1:fans 2</span><br><span class=\"line\">sadd 2:follow 1</span><br></pre></td></tr></table></figure>\n<p>我关注的人也关注了他(取交集)：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinter 1:follow 2:fans</span><br></pre></td></tr></table></figure>\n<p>可能认识的人：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 用户1可能认识的人(差集)：</span></span></span><br><span class=\"line\">sdiff 2:follow 1:follow</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 用户2可能认识的人：</span></span></span><br><span class=\"line\">sdiff 1:follow 2:follow</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16-排行榜\"><a href=\"#16-排行榜\" class=\"headerlink\" title=\"16. 排行榜\"></a>16. 排行榜</h2><p>id 为6001 的新闻点击数加1：zincrby hotNews:20190926 1 n6001<br>获取今天点击最多的15条：zrevrange hotNews:20190926 0 15 withscores<br><img src=\"/redis-usage-scenario/05.png\" alt=\"排行榜\"></p>\n<hr>\n<p><img src=\"/redis-usage-scenario/06.png\"></p>\n<h2 id=\"redis不适用的场景\"><a href=\"#redis不适用的场景\" class=\"headerlink\" title=\"redis不适用的场景\"></a>redis不适用的场景</h2><p>Redis是一种缓存技术，主要用来提高应用的性能，更多的应用场景是对数据库读数据进行缓存，减轻数据库的IO的访问压力，以下场景不太适合使用Redis:</p>\n<ul>\n<li><p>数据规模大小角度</p>\n<p>  Redis是将数据放在内存进行缓存的，内存相对于磁盘来锁价格是比较贵的。<strong>如果成本是需要考虑的重要因素，那么大规模的数据就不太适合</strong>；</p>\n</li>\n<li><p>数据冷热程度角度</p>\n<p>  很多业务数据可以根据数据读的频繁程度分为热数据和冷数据；<strong>频繁使用的热数据一般适合用redis，冷数据一般不太适合用redis</strong>,如果大量的冷数据进行了缓存，那是对内存资源的浪费，<br>所以在应用场景上区分冷热数据，将热数据放在内存中，进而提高性能。</p>\n</li>\n</ul>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h2 id=\"1-缓存\"><a href=\"#1-缓存\" class=\"headerlink\" title=\"1. 缓存\"></a>1. 缓存</h2><p>String类型<br>例如：热点数据缓存、对象缓存、全页缓存可以提升热点数据的访问效率</p>\n<h2 id=\"2-数据共享分布式\"><a href=\"#2-数据共享分布式\" class=\"headerlink\" title=\"2. 数据共享分布式\"></a>2. 数据共享分布式</h2><p>String类型，因为redis是分布式的独立服务，可以在多个应用服务之间共享，例如分布式session</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.session<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-session-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-分布式锁\"><a href=\"#3-分布式锁\" class=\"headerlink\" title=\"3. 分布式锁\"></a>3. 分布式锁</h2><p>String类型 setnx方法，只有不存在时才能添加成功返回true</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">getLock</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    Long flag = jedis.setnx(key, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        jedis.expire(key, <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">releaseLock</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    jedis.del(key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-全局ID\"><a href=\"#4-全局ID\" class=\"headerlink\" title=\"4. 全局ID\"></a>4. 全局ID</h2><p>int 类型， incrby, 利用原子性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incrby userid 1000</span><br></pre></td></tr></table></figure>\n<p>分库分表的场景，一次性拿一段。</p>\n<h2 id=\"5-计数器\"><a href=\"#5-计数器\" class=\"headerlink\" title=\"5. 计数器\"></a>5. 计数器</h2><p>int 类型，incr方法<br>例如：文章的阅读量、微博点赞数；允许一定的延迟，先写入redis在定时同步到数据库</p>\n<ol>\n<li><p>第一种方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource(name=&quot;redisTemplate&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ValueOperations&lt;String,Object&gt; ops;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testRedis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//此方法会先检查key是否存在，存在+1，不存在先初始化，再+1</span></span><br><span class=\"line\">            ops.increment(<span class=\"string\">&quot;success&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//return (int) ops.get(&quot;success&quot;); //使用这个会出现错误，报错信息 Caused by: org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is java.io.EOFException。</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Integer.valueOf(redisTemplate.boundValueOps(<span class=\"string\">&quot;success&quot;</span>).get(<span class=\"number\">0</span>, -<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>第二种方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource(name=&quot;redisTemplate&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ValueOperations&lt;String,Object&gt; ops;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testRedis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//此方法会先检查key是否存在，存在+1，不存在先初始化，再+1</span></span><br><span class=\"line\">            ops.increment(<span class=\"string\">&quot;success&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//return (int) ops.get(&quot;success&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">//return Integer.valueOf(redisTemplate.boundValueOps(&quot;success&quot;).get(0, -1));</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) getKey(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getKey</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.execute(<span class=\"keyword\">new</span> RedisCallback&lt;Long&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">doInRedis</span><span class=\"params\">(RedisConnection connection)</span> <span class=\"keyword\">throws</span> DataAccessException </span>&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                RedisSerializer&lt;String&gt; redisSerializer = redisTemplate.getStringSerializer();</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] rowkey = redisSerializer.serialize(key);</span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] rowval = connection.get(rowkey);</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    String val = redisSerializer.deserialize(rowval);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Long.parseLong(val);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0L</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置每天零点过期，重新计数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当天时间</span></span><br><span class=\"line\">Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\"><span class=\"comment\">//当天零点</span></span><br><span class=\"line\">date = DateUtils.truncate(date, Calendar.DAY_OF_MONTH);</span><br><span class=\"line\"><span class=\"comment\">//第二天零点</span></span><br><span class=\"line\">date = DateUtils.addDays(date, +<span class=\"number\">1</span>);</span><br><span class=\"line\">redisTemplate.expireAt(<span class=\"string\">&quot;success&quot;</span>, date);</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-限流\"><a href=\"#6-限流\" class=\"headerlink\" title=\"6. 限流\"></a>6. 限流</h2><p>int类型，incr方法<br>以访问者的IP和其他信息作为key,访问一次增加一次次数，超过次数 则返回false</p>\n</li>\n</ol>\n<h2 id=\"7-位统计\"><a href=\"#7-位统计\" class=\"headerlink\" title=\"7. 位统计\"></a>7. 位统计</h2><p>String类型的bitcount<br>字符是以8位二进制存储的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set k1 a</span><br><span class=\"line\">setbit k1 6 1</span><br><span class=\"line\">setbit k1 7 0</span><br><span class=\"line\">get k1 </span><br><span class=\"line\">/* 6 7 代表的a的二进制位的修改</span><br><span class=\"line\"></span><br><span class=\"line\">a 对应的ASCII码是97，转换为二进制数据是01100001</span><br><span class=\"line\">b 对应的ASCII码是98，转换为二进制数据是01100010</span><br><span class=\"line\"></span><br><span class=\"line\">因为bit非常节省空间（1 MB=8388608 bit），可以用来做大数据量的统计。</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>例如：在线用户统计，留存用户统计</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setbit onlineusers 01 </span><br><span class=\"line\">setbit onlineusers 11 </span><br><span class=\"line\">setbit onlineusers 20</span><br></pre></td></tr></table></figure>\n<p>支持按位与、按位或等等操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BITOPANDdestkeykey[key...] ，对一个或多个 key 求逻辑并，并将结果保存到 destkey 。       </span><br><span class=\"line\">BITOPORdestkeykey[key...] ，对一个或多个 key 求逻辑或，并将结果保存到 destkey 。 </span><br><span class=\"line\">BITOPXORdestkeykey[key...] ，对一个或多个 key 求逻辑异或，并将结果保存到 destkey 。 </span><br><span class=\"line\">BITOPNOTdestkeykey ，对给定 key 求逻辑非，并将结果保存到 destkey 。</span><br></pre></td></tr></table></figure>\n<p>计算出7天都在线的用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BITOP &quot;AND&quot; &quot;7_days_both_online_users&quot; &quot;day_1_online_users&quot; &quot;day_2_online_users&quot; ...  &quot;day_7_online_users&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-购物车\"><a href=\"#8-购物车\" class=\"headerlink\" title=\"8. 购物车\"></a>8. 购物车</h2><p>String 或hash。所有String可以做的hash都可以<br>hash类型是一个String类型的field和value的映射表，每个hash都可以存储2^32 -1键值对<br><strong>使用hash做购物车：以用户id为key, 商品id为field，商品数量为value。</strong><br><img src=\"/redis-usage-scenario/01.png\"></p>\n<h2 id=\"9-用户消息时间线timeline\"><a href=\"#9-用户消息时间线timeline\" class=\"headerlink\" title=\"9. 用户消息时间线timeline\"></a>9. 用户消息时间线timeline</h2><p>list，双向链表，直接作为timeline就好了。插入有序</p>\n<h2 id=\"10-消息队列\"><a href=\"#10-消息队列\" class=\"headerlink\" title=\"10. 消息队列\"></a>10. 消息队列</h2><p>List提供了两个阻塞的弹出操作：blpop/brpop，可以设置超时时间</p>\n<ul>\n<li><p>blpop：blpop key1 timeout 移除并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p>\n</li>\n<li><p>brpop：brpop key1 timeout 移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。<br>上面的操作。其实就是java的阻塞队列。学习的东西越多。学习成本越低</p>\n</li>\n<li><p>队列：先进先除：rpush blpop，左头右尾，右边进入队列，左边出队列</p>\n</li>\n<li><p>栈：先进后出：rpush brpop</p>\n</li>\n</ul>\n<h2 id=\"11-抽奖\"><a href=\"#11-抽奖\" class=\"headerlink\" title=\"11. 抽奖\"></a>11. 抽奖</h2><p>自带一个随机获得值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spop myset</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-点赞、签到、打卡\"><a href=\"#12-点赞、签到、打卡\" class=\"headerlink\" title=\"12. 点赞、签到、打卡\"></a>12. 点赞、签到、打卡</h2><p><img src=\"/redis-usage-scenario/02.png\" alt=\"点赞、签到、打卡\"><br>假如上面的微博ID是t1001，用户ID是u3001</p>\n<p>用 like:t1001 来维护 t1001 这条微博的所有点赞用户</p>\n<ul>\n<li>点赞了这条微博：sadd like:t1001 u3001</li>\n<li>取消点赞：srem like:t1001 u3001</li>\n<li>是否点赞：sismember like:t1001 u3001</li>\n<li>点赞的所有用户：smembers like:t1001</li>\n<li>点赞数：scard like:t1001</li>\n</ul>\n<h2 id=\"13-商品标签\"><a href=\"#13-商品标签\" class=\"headerlink\" title=\"13. 商品标签\"></a>13. 商品标签</h2><p><img src=\"/redis-usage-scenario/03.png\" alt=\"商品标签\"><br>用 tags:i5001 来维护商品所有的标签。</p>\n<ul>\n<li>sadd tags:i5001 画面清晰细腻</li>\n<li>sadd tags:i5001 真彩清晰显示屏</li>\n<li>sadd tags:i5001 流程至极</li>\n</ul>\n<h2 id=\"14-商品筛选\"><a href=\"#14-商品筛选\" class=\"headerlink\" title=\"14.商品筛选\"></a>14.商品筛选</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取差集</span><br><span class=\"line\">sdiff set1 set2</span><br><span class=\"line\">// 获取交集（intersection ）</span><br><span class=\"line\">sinter set1 set2</span><br><span class=\"line\">// 获取并集</span><br><span class=\"line\">sunion set1 set2</span><br></pre></td></tr></table></figure>\n<p><img src=\"/redis-usage-scenario/04.png\" alt=\"商品筛选\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sadd brand:apple iPhone11</span><br><span class=\"line\"></span><br><span class=\"line\">sadd brand:ios iPhone11</span><br><span class=\"line\"></span><br><span class=\"line\">sad screensize:6.0-6.24 iPhone11</span><br><span class=\"line\"></span><br><span class=\"line\">sad screentype:lcd iPhone 11</span><br></pre></td></tr></table></figure>\n<p>筛选商品，苹果的、ios的、屏幕在6.0-6.24之间的，屏幕材质是LCD屏幕</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinter brand:apple brand:ios screensize:6.0-6.24 screentype:lcd</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-用户关注、推荐模型\"><a href=\"#15-用户关注、推荐模型\" class=\"headerlink\" title=\"15. 用户关注、推荐模型\"></a>15. 用户关注、推荐模型</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># follow 关注 fans 粉丝</span></span></span><br><span class=\"line\">sadd 1:follow 2</span><br><span class=\"line\">sadd 2:fans 1</span><br><span class=\"line\">sadd 1:fans 2</span><br><span class=\"line\">sadd 2:follow 1</span><br></pre></td></tr></table></figure>\n<p>我关注的人也关注了他(取交集)：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinter 1:follow 2:fans</span><br></pre></td></tr></table></figure>\n<p>可能认识的人：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 用户1可能认识的人(差集)：</span></span></span><br><span class=\"line\">sdiff 2:follow 1:follow</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 用户2可能认识的人：</span></span></span><br><span class=\"line\">sdiff 1:follow 2:follow</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16-排行榜\"><a href=\"#16-排行榜\" class=\"headerlink\" title=\"16. 排行榜\"></a>16. 排行榜</h2><p>id 为6001 的新闻点击数加1：zincrby hotNews:20190926 1 n6001<br>获取今天点击最多的15条：zrevrange hotNews:20190926 0 15 withscores<br><img src=\"/redis-usage-scenario/05.png\" alt=\"排行榜\"></p>\n<hr>\n<p><img src=\"/redis-usage-scenario/06.png\"></p>\n<h2 id=\"redis不适用的场景\"><a href=\"#redis不适用的场景\" class=\"headerlink\" title=\"redis不适用的场景\"></a>redis不适用的场景</h2><p>Redis是一种缓存技术，主要用来提高应用的性能，更多的应用场景是对数据库读数据进行缓存，减轻数据库的IO的访问压力，以下场景不太适合使用Redis:</p>\n<ul>\n<li><p>数据规模大小角度</p>\n<p>  Redis是将数据放在内存进行缓存的，内存相对于磁盘来锁价格是比较贵的。<strong>如果成本是需要考虑的重要因素，那么大规模的数据就不太适合</strong>；</p>\n</li>\n<li><p>数据冷热程度角度</p>\n<p>  很多业务数据可以根据数据读的频繁程度分为热数据和冷数据；<strong>频繁使用的热数据一般适合用redis，冷数据一般不太适合用redis</strong>,如果大量的冷数据进行了缓存，那是对内存资源的浪费，<br>所以在应用场景上区分冷热数据，将热数据放在内存中，进而提高性能。</p>\n</li>\n</ul>\n"},{"title":"Linux环境下安装Redis","comments":1,"abbrlink":52569,"date":"2021-05-13T05:40:44.000Z","translate_title":"redis-install","_content":"#####  1. 安装gcc\n   ```shell\n   yum -y install gcc gcc-c++\n   ```\n##### 2. 下载安装包\n   ```shell\n   wget http://download.redis.io/redis-stable.tar.gz \n   ```\n##### 3. 解压\n\n   ```shell\n   tar xvzf redis-stable.tar.gz\n   \n   #移动redis目录，一般都会将redis目录放置到 /usr/local/redis目录\n   mv redis-6.2.6 /usr/local/redis\n   ```\n#####    4. 编译\n\n   ```shell\n   cd /usr/local/redis\n   make\n   # 如果执行make命令报错：cc 未找到命令，原因是虚拟机系统中缺少gcc，执行下面命令安装gcc：yum -y install gcc automake autoconf libtool make\n   \n   #如果使用make失败，致命错误:jemalloc/jemalloc.h: 没有那个文件或目录，则需要在make指定分配器为libc make MALLOC=libc\n   //make之后如果出现Hint: To run 'make test' is a good idea ;\n   //运行make test, 会提示需要安装tcl,执行yum install tcl\n   \n   \n   #执行下面命令安装redis，并指定安装目录\n   make install PREFIX=/usr/local/redis\n   ```\n\n##### 5. 配置密码以及允许外网ip访问\n\n   ```properties\n   #在redis.conf中配置requirepass 密码以及port端口号（非必须）\n   requirepass xxx\n   port 6379 \n   \n   #开启redis允许外网ip访问，在 Linux 中安装了redis 服务，当在客户端通过远程连接的方式连接时，报could not connect错误。错误的原因为：redis采用的安全策略，默认会只准许本地访问。\n   #将所有的bing信息全部屏蔽\n   #bind 192.168.1.100 10.0.0.1\n   \n   #配置redis后台启动，如果不配置的话可以使用hohup启动\n   daemonize yes\n   ```\n##### 6. 启动redis服务\n   ```shell\n   cd ./src\n   nohup ./redis-server ../redis.conf &\n   ```\n##### 7. 查看redis进程\n   ```shell\n   [root@localhost redis]# pstree\n   ```\n   ![image-20201210103251475](./redis_install/image-20201201155441018.png)","source":"_posts/2021/07/redis_install.md","raw":"---\ntitle: Linux环境下安装Redis\ntags: redis\ncategories: linux\ncomments: true\nabbrlink: 52569\ndate: 2021-05-13 13:40:44\ntranslate_title: redis-install\n---\n#####  1. 安装gcc\n   ```shell\n   yum -y install gcc gcc-c++\n   ```\n##### 2. 下载安装包\n   ```shell\n   wget http://download.redis.io/redis-stable.tar.gz \n   ```\n##### 3. 解压\n\n   ```shell\n   tar xvzf redis-stable.tar.gz\n   \n   #移动redis目录，一般都会将redis目录放置到 /usr/local/redis目录\n   mv redis-6.2.6 /usr/local/redis\n   ```\n#####    4. 编译\n\n   ```shell\n   cd /usr/local/redis\n   make\n   # 如果执行make命令报错：cc 未找到命令，原因是虚拟机系统中缺少gcc，执行下面命令安装gcc：yum -y install gcc automake autoconf libtool make\n   \n   #如果使用make失败，致命错误:jemalloc/jemalloc.h: 没有那个文件或目录，则需要在make指定分配器为libc make MALLOC=libc\n   //make之后如果出现Hint: To run 'make test' is a good idea ;\n   //运行make test, 会提示需要安装tcl,执行yum install tcl\n   \n   \n   #执行下面命令安装redis，并指定安装目录\n   make install PREFIX=/usr/local/redis\n   ```\n\n##### 5. 配置密码以及允许外网ip访问\n\n   ```properties\n   #在redis.conf中配置requirepass 密码以及port端口号（非必须）\n   requirepass xxx\n   port 6379 \n   \n   #开启redis允许外网ip访问，在 Linux 中安装了redis 服务，当在客户端通过远程连接的方式连接时，报could not connect错误。错误的原因为：redis采用的安全策略，默认会只准许本地访问。\n   #将所有的bing信息全部屏蔽\n   #bind 192.168.1.100 10.0.0.1\n   \n   #配置redis后台启动，如果不配置的话可以使用hohup启动\n   daemonize yes\n   ```\n##### 6. 启动redis服务\n   ```shell\n   cd ./src\n   nohup ./redis-server ../redis.conf &\n   ```\n##### 7. 查看redis进程\n   ```shell\n   [root@localhost redis]# pstree\n   ```\n   ![image-20201210103251475](./redis_install/image-20201201155441018.png)","slug":"redis_install","published":1,"updated":"2022-05-22T03:45:44.918Z","layout":"post","photos":[],"link":"","_id":"cl424hx5x0036ad5i1umid7js","content":"<h5 id=\"1-安装gcc\"><a href=\"#1-安装gcc\" class=\"headerlink\" title=\"1. 安装gcc\"></a>1. 安装gcc</h5>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-下载安装包\"><a href=\"#2-下载安装包\" class=\"headerlink\" title=\"2. 下载安装包\"></a>2. 下载安装包</h5>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/redis-stable.tar.gz </span><br></pre></td></tr></table></figure>\n<h5 id=\"3-解压\"><a href=\"#3-解压\" class=\"headerlink\" title=\"3. 解压\"></a>3. 解压</h5>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvzf redis-stable.tar.gz</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">移动redis目录，一般都会将redis目录放置到 /usr/<span class=\"built_in\">local</span>/redis目录</span></span><br><span class=\"line\">mv redis-6.2.6 /usr/local/redis</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-编译\"><a href=\"#4-编译\" class=\"headerlink\" title=\"4. 编译\"></a>4. 编译</h5>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/redis</span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果执行make命令报错：cc 未找到命令，原因是虚拟机系统中缺少gcc，执行下面命令安装gcc：yum -y install gcc automake autoconf libtool make</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果使用make失败，致命错误:jemalloc/jemalloc.h: 没有那个文件或目录，则需要在make指定分配器为libc make MALLOC=libc</span></span><br><span class=\"line\">//make之后如果出现Hint: To run &#x27;make test&#x27; is a good idea ;</span><br><span class=\"line\">//运行make test, 会提示需要安装tcl,执行yum install tcl</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">执行下面命令安装redis，并指定安装目录</span></span><br><span class=\"line\">make install PREFIX=/usr/local/redis</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-配置密码以及允许外网ip访问\"><a href=\"#5-配置密码以及允许外网ip访问\" class=\"headerlink\" title=\"5. 配置密码以及允许外网ip访问\"></a>5. 配置密码以及允许外网ip访问</h5>   <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在redis.conf中配置requirepass 密码以及port端口号（非必须）</span></span><br><span class=\"line\"><span class=\"attr\">requirepass</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"attr\">port</span> <span class=\"string\">6379 </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#开启redis允许外网ip访问，在 Linux 中安装了redis 服务，当在客户端通过远程连接的方式连接时，报could not connect错误。错误的原因为：redis采用的安全策略，默认会只准许本地访问。</span></span><br><span class=\"line\"><span class=\"comment\">#将所有的bing信息全部屏蔽</span></span><br><span class=\"line\"><span class=\"comment\">#bind 192.168.1.100 10.0.0.1</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#配置redis后台启动，如果不配置的话可以使用hohup启动</span></span><br><span class=\"line\"><span class=\"attr\">daemonize</span> <span class=\"string\">yes</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"6-启动redis服务\"><a href=\"#6-启动redis服务\" class=\"headerlink\" title=\"6. 启动redis服务\"></a>6. 启动redis服务</h5>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ./src</span><br><span class=\"line\">nohup ./redis-server ../redis.conf &amp;</span><br></pre></td></tr></table></figure>\n<h5 id=\"7-查看redis进程\"><a href=\"#7-查看redis进程\" class=\"headerlink\" title=\"7. 查看redis进程\"></a>7. 查看redis进程</h5>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost redis]# pstree</span><br></pre></td></tr></table></figure>\n<p>   <img src=\"/redis_install/image-20201201155441018.png\" alt=\"image-20201210103251475\"></p>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h5 id=\"1-安装gcc\"><a href=\"#1-安装gcc\" class=\"headerlink\" title=\"1. 安装gcc\"></a>1. 安装gcc</h5>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-下载安装包\"><a href=\"#2-下载安装包\" class=\"headerlink\" title=\"2. 下载安装包\"></a>2. 下载安装包</h5>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/redis-stable.tar.gz </span><br></pre></td></tr></table></figure>\n<h5 id=\"3-解压\"><a href=\"#3-解压\" class=\"headerlink\" title=\"3. 解压\"></a>3. 解压</h5>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvzf redis-stable.tar.gz</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">移动redis目录，一般都会将redis目录放置到 /usr/<span class=\"built_in\">local</span>/redis目录</span></span><br><span class=\"line\">mv redis-6.2.6 /usr/local/redis</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-编译\"><a href=\"#4-编译\" class=\"headerlink\" title=\"4. 编译\"></a>4. 编译</h5>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/redis</span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果执行make命令报错：cc 未找到命令，原因是虚拟机系统中缺少gcc，执行下面命令安装gcc：yum -y install gcc automake autoconf libtool make</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果使用make失败，致命错误:jemalloc/jemalloc.h: 没有那个文件或目录，则需要在make指定分配器为libc make MALLOC=libc</span></span><br><span class=\"line\">//make之后如果出现Hint: To run &#x27;make test&#x27; is a good idea ;</span><br><span class=\"line\">//运行make test, 会提示需要安装tcl,执行yum install tcl</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">执行下面命令安装redis，并指定安装目录</span></span><br><span class=\"line\">make install PREFIX=/usr/local/redis</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-配置密码以及允许外网ip访问\"><a href=\"#5-配置密码以及允许外网ip访问\" class=\"headerlink\" title=\"5. 配置密码以及允许外网ip访问\"></a>5. 配置密码以及允许外网ip访问</h5>   <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在redis.conf中配置requirepass 密码以及port端口号（非必须）</span></span><br><span class=\"line\"><span class=\"attr\">requirepass</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"attr\">port</span> <span class=\"string\">6379 </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#开启redis允许外网ip访问，在 Linux 中安装了redis 服务，当在客户端通过远程连接的方式连接时，报could not connect错误。错误的原因为：redis采用的安全策略，默认会只准许本地访问。</span></span><br><span class=\"line\"><span class=\"comment\">#将所有的bing信息全部屏蔽</span></span><br><span class=\"line\"><span class=\"comment\">#bind 192.168.1.100 10.0.0.1</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#配置redis后台启动，如果不配置的话可以使用hohup启动</span></span><br><span class=\"line\"><span class=\"attr\">daemonize</span> <span class=\"string\">yes</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"6-启动redis服务\"><a href=\"#6-启动redis服务\" class=\"headerlink\" title=\"6. 启动redis服务\"></a>6. 启动redis服务</h5>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ./src</span><br><span class=\"line\">nohup ./redis-server ../redis.conf &amp;</span><br></pre></td></tr></table></figure>\n<h5 id=\"7-查看redis进程\"><a href=\"#7-查看redis进程\" class=\"headerlink\" title=\"7. 查看redis进程\"></a>7. 查看redis进程</h5>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost redis]# pstree</span><br></pre></td></tr></table></figure>\n<p>   <img src=\"/redis_install/image-20201201155441018.png\" alt=\"image-20201210103251475\"></p>\n"},{"title":"springboot读取yml配置的方式","comments":1,"translate_title":"springboot-yaml","abbrlink":58807,"date":"2021-08-18T13:41:24.000Z","_content":"springboot项目中默认的配置文件是application.properties；\n### 1.yml文件规则\n- 树状结构，结构清晰\n- 不支持tab缩进\n- 可以使用\"_\"或\"-\"消协字母代替大写字母；如userName 与user-name， user_name含义是一样的（宽松绑定原则 relaxed binding）; key: value格式书写，value前面有个空格\n\n### 2. 数据格式\n- 普通的值（数字，字符串，布尔）如：\n    ```yaml\n    port: 123      \n    name: abc      \n    flag: true\n    ```\n    字符串默认不用加上单引号或者双引号；\n  \n    \"\"：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思,name: \"zhangsan \\n lisi\"：输出；zhangsan 换行 lisi\n  \n    ''：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据,name: ‘zhangsan \\n lisi’：输出；zhangsan \\n lisi\n- 对象、Map(属性和值)如：\n    ```yaml\n    #k: v：在下一行来写对象的属性和值的关系；注意缩进(不支持tab,使用空格)\n    server:\n      port: 8123\n      tomcat:\n        uri-encoding: utf-8\n      servlet:\n        context-path: /app\n    ```\n  \n- 数组（list， set）\n    ```yaml\n    #用- 值表示数组中的一个元素\n    hands:\n        - left\n        - right\n    ```\n  \n### 3. 读取方式\n1. @Value注解\n    ```yaml\n    server:\n      port: 8081\n    ```\n    ```text\n    @Value(\"${server.port}\")\n    public String port;\n    ```\n    此处的port所在的类需要是一个组件,如果是实体类需要加上@Component\n   \n\n2. @ConfigurationProperties\n   \n   需要一个JavaBean 来专门映射配置的话,我们一般会使用@ConfigurationProperties来读取.\n   \n   使用的使用需要@EnableConfigurationProperties注解让类被springboot扫描到；\n    ```yaml\n    spring:\n      datasource:\n        druid:\n          url: jdbc:mysql://localhost:3307/app?useUnicode=yes&characterEncoding=UTF-8&useSSL=false&serverTimezone=GMT%2B8&useLegacyDatetimeCode=false\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: root\n    ```\n    ```java\n    //prefix 指定前缀\n    @ConfigurationProperties(prefix = \"spring.datasource\")\n    public class MyDataSourceProperties {\n    \n        private String type;\n        private String driverClassName;\n        private String url;\n        private String username;\n        private String password;\n        //省略getter setter方法\n    }\n    ```\n   - 前缀定义了哪些外部属性将绑定到类的字段上\n   - 根据 Spring Boot 宽松的绑定规则，类的属性名称必须与外部属性的名称匹配\n   - 我们可以简单地用一个值初始化一个字段来定义一个默认值\n   - 类本身可以是包私有的\n   - 类的字段必须有公共 setter 方法\n    \n\n   \n3. Environment\n   \n   Spring Environment bean\n    ```yaml\n    @RestController\n    @RequestMapping(\"/test\")\n    public class TestC {\n    \n        @Autowired\n        private Environment env;\n    \n        @RequestMapping(value = \"index\", method = RequestMethod.GET)\n        public String index() {\n            return \"environment : \"+ env.getProperty(\"spring.datasource.druid.url\");\n        }\n    }\n    ```","source":"_posts/2021/07/springboot-yml.md","raw":"---\ntitle: springboot读取yml配置的方式\ntags: springboot\ncategories: java\ncomments: true\ntranslate_title: springboot-yaml\nabbrlink: 58807\ndate: 2021-08-18 21:41:24\n---\nspringboot项目中默认的配置文件是application.properties；\n### 1.yml文件规则\n- 树状结构，结构清晰\n- 不支持tab缩进\n- 可以使用\"_\"或\"-\"消协字母代替大写字母；如userName 与user-name， user_name含义是一样的（宽松绑定原则 relaxed binding）; key: value格式书写，value前面有个空格\n\n### 2. 数据格式\n- 普通的值（数字，字符串，布尔）如：\n    ```yaml\n    port: 123      \n    name: abc      \n    flag: true\n    ```\n    字符串默认不用加上单引号或者双引号；\n  \n    \"\"：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思,name: \"zhangsan \\n lisi\"：输出；zhangsan 换行 lisi\n  \n    ''：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据,name: ‘zhangsan \\n lisi’：输出；zhangsan \\n lisi\n- 对象、Map(属性和值)如：\n    ```yaml\n    #k: v：在下一行来写对象的属性和值的关系；注意缩进(不支持tab,使用空格)\n    server:\n      port: 8123\n      tomcat:\n        uri-encoding: utf-8\n      servlet:\n        context-path: /app\n    ```\n  \n- 数组（list， set）\n    ```yaml\n    #用- 值表示数组中的一个元素\n    hands:\n        - left\n        - right\n    ```\n  \n### 3. 读取方式\n1. @Value注解\n    ```yaml\n    server:\n      port: 8081\n    ```\n    ```text\n    @Value(\"${server.port}\")\n    public String port;\n    ```\n    此处的port所在的类需要是一个组件,如果是实体类需要加上@Component\n   \n\n2. @ConfigurationProperties\n   \n   需要一个JavaBean 来专门映射配置的话,我们一般会使用@ConfigurationProperties来读取.\n   \n   使用的使用需要@EnableConfigurationProperties注解让类被springboot扫描到；\n    ```yaml\n    spring:\n      datasource:\n        druid:\n          url: jdbc:mysql://localhost:3307/app?useUnicode=yes&characterEncoding=UTF-8&useSSL=false&serverTimezone=GMT%2B8&useLegacyDatetimeCode=false\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: root\n    ```\n    ```java\n    //prefix 指定前缀\n    @ConfigurationProperties(prefix = \"spring.datasource\")\n    public class MyDataSourceProperties {\n    \n        private String type;\n        private String driverClassName;\n        private String url;\n        private String username;\n        private String password;\n        //省略getter setter方法\n    }\n    ```\n   - 前缀定义了哪些外部属性将绑定到类的字段上\n   - 根据 Spring Boot 宽松的绑定规则，类的属性名称必须与外部属性的名称匹配\n   - 我们可以简单地用一个值初始化一个字段来定义一个默认值\n   - 类本身可以是包私有的\n   - 类的字段必须有公共 setter 方法\n    \n\n   \n3. Environment\n   \n   Spring Environment bean\n    ```yaml\n    @RestController\n    @RequestMapping(\"/test\")\n    public class TestC {\n    \n        @Autowired\n        private Environment env;\n    \n        @RequestMapping(value = \"index\", method = RequestMethod.GET)\n        public String index() {\n            return \"environment : \"+ env.getProperty(\"spring.datasource.druid.url\");\n        }\n    }\n    ```","slug":"springboot-yml","published":1,"updated":"2022-03-27T14:06:03.467Z","layout":"post","photos":[],"link":"","_id":"cl424hx5y003bad5ieh4cd4qc","content":"<p>springboot项目中默认的配置文件是application.properties；</p>\n<h3 id=\"1-yml文件规则\"><a href=\"#1-yml文件规则\" class=\"headerlink\" title=\"1.yml文件规则\"></a>1.yml文件规则</h3><ul>\n<li>树状结构，结构清晰</li>\n<li>不支持tab缩进</li>\n<li>可以使用”_”或”-“消协字母代替大写字母；如userName 与user-name， user_name含义是一样的（宽松绑定原则 relaxed binding）; key: value格式书写，value前面有个空格</li>\n</ul>\n<h3 id=\"2-数据格式\"><a href=\"#2-数据格式\" class=\"headerlink\" title=\"2. 数据格式\"></a>2. 数据格式</h3><ul>\n<li>普通的值（数字，字符串，布尔）如：  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">port:</span> <span class=\"number\">123</span>      </span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">abc</span>      </span><br><span class=\"line\"><span class=\"attr\">flag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n  字符串默认不用加上单引号或者双引号；  “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思,name: “zhangsan \\n lisi”：输出；zhangsan 换行 lisi  ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据,name: ‘zhangsan \\n lisi’：输出；zhangsan \\n lisi</li>\n<li>对象、Map(属性和值)如：  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#k: v：在下一行来写对象的属性和值的关系；注意缩进(不支持tab,使用空格)</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8123</span></span><br><span class=\"line\">  <span class=\"attr\">tomcat:</span></span><br><span class=\"line\">    <span class=\"attr\">uri-encoding:</span> <span class=\"string\">utf-8</span></span><br><span class=\"line\">  <span class=\"attr\">servlet:</span></span><br><span class=\"line\">    <span class=\"attr\">context-path:</span> <span class=\"string\">/app</span></span><br></pre></td></tr></table></figure></li>\n<li>数组（list， set）  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#用- 值表示数组中的一个元素</span></span><br><span class=\"line\"><span class=\"attr\">hands:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">left</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">right</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-读取方式\"><a href=\"#3-读取方式\" class=\"headerlink\" title=\"3. 读取方式\"></a>3. 读取方式</h3><ol>\n<li><p>@Value注解</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class=\"line\">public String port;</span><br></pre></td></tr></table></figure>\n<p> 此处的port所在的类需要是一个组件,如果是实体类需要加上@Component</p>\n</li>\n<li><p>@ConfigurationProperties</p>\n<p>需要一个JavaBean 来专门映射配置的话,我们一般会使用@ConfigurationProperties来读取.</p>\n<p>使用的使用需要@EnableConfigurationProperties注解让类被springboot扫描到；</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">druid:</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3307/app?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8&amp;useLegacyDatetimeCode=false</span></span><br><span class=\"line\">      <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//prefix 指定前缀</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDataSourceProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String type;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String driverClassName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"comment\">//省略getter setter方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>前缀定义了哪些外部属性将绑定到类的字段上</li>\n<li>根据 Spring Boot 宽松的绑定规则，类的属性名称必须与外部属性的名称匹配</li>\n<li>我们可以简单地用一个值初始化一个字段来定义一个默认值</li>\n<li>类本身可以是包私有的</li>\n<li>类的字段必须有公共 setter 方法</li>\n</ul>\n</li>\n<li><p>Environment</p>\n<p>Spring Environment bean</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">@RestController</span></span><br><span class=\"line\"><span class=\"string\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"string\">public</span> <span class=\"string\">class</span> <span class=\"string\">TestC</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@Autowired</span></span><br><span class=\"line\">    <span class=\"string\">private</span> <span class=\"string\">Environment</span> <span class=\"string\">env;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@RequestMapping(value</span> <span class=\"string\">=</span> <span class=\"string\">&quot;index&quot;</span>, <span class=\"string\">method</span> <span class=\"string\">=</span> <span class=\"string\">RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"string\">public</span> <span class=\"string\">String</span> <span class=\"string\">index()</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">&quot;environment : &quot;</span><span class=\"string\">+</span> <span class=\"string\">env.getProperty(&quot;spring.datasource.druid.url&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>springboot项目中默认的配置文件是application.properties；</p>\n<h3 id=\"1-yml文件规则\"><a href=\"#1-yml文件规则\" class=\"headerlink\" title=\"1.yml文件规则\"></a>1.yml文件规则</h3><ul>\n<li>树状结构，结构清晰</li>\n<li>不支持tab缩进</li>\n<li>可以使用”_”或”-“消协字母代替大写字母；如userName 与user-name， user_name含义是一样的（宽松绑定原则 relaxed binding）; key: value格式书写，value前面有个空格</li>\n</ul>\n<h3 id=\"2-数据格式\"><a href=\"#2-数据格式\" class=\"headerlink\" title=\"2. 数据格式\"></a>2. 数据格式</h3><ul>\n<li>普通的值（数字，字符串，布尔）如：  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">port:</span> <span class=\"number\">123</span>      </span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">abc</span>      </span><br><span class=\"line\"><span class=\"attr\">flag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n  字符串默认不用加上单引号或者双引号；  “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思,name: “zhangsan \\n lisi”：输出；zhangsan 换行 lisi  ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据,name: ‘zhangsan \\n lisi’：输出；zhangsan \\n lisi</li>\n<li>对象、Map(属性和值)如：  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#k: v：在下一行来写对象的属性和值的关系；注意缩进(不支持tab,使用空格)</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8123</span></span><br><span class=\"line\">  <span class=\"attr\">tomcat:</span></span><br><span class=\"line\">    <span class=\"attr\">uri-encoding:</span> <span class=\"string\">utf-8</span></span><br><span class=\"line\">  <span class=\"attr\">servlet:</span></span><br><span class=\"line\">    <span class=\"attr\">context-path:</span> <span class=\"string\">/app</span></span><br></pre></td></tr></table></figure></li>\n<li>数组（list， set）  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#用- 值表示数组中的一个元素</span></span><br><span class=\"line\"><span class=\"attr\">hands:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">left</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">right</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-读取方式\"><a href=\"#3-读取方式\" class=\"headerlink\" title=\"3. 读取方式\"></a>3. 读取方式</h3><ol>\n<li><p>@Value注解</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class=\"line\">public String port;</span><br></pre></td></tr></table></figure>\n<p> 此处的port所在的类需要是一个组件,如果是实体类需要加上@Component</p>\n</li>\n<li><p>@ConfigurationProperties</p>\n<p>需要一个JavaBean 来专门映射配置的话,我们一般会使用@ConfigurationProperties来读取.</p>\n<p>使用的使用需要@EnableConfigurationProperties注解让类被springboot扫描到；</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">druid:</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3307/app?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8&amp;useLegacyDatetimeCode=false</span></span><br><span class=\"line\">      <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//prefix 指定前缀</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDataSourceProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String type;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String driverClassName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"comment\">//省略getter setter方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>前缀定义了哪些外部属性将绑定到类的字段上</li>\n<li>根据 Spring Boot 宽松的绑定规则，类的属性名称必须与外部属性的名称匹配</li>\n<li>我们可以简单地用一个值初始化一个字段来定义一个默认值</li>\n<li>类本身可以是包私有的</li>\n<li>类的字段必须有公共 setter 方法</li>\n</ul>\n</li>\n<li><p>Environment</p>\n<p>Spring Environment bean</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">@RestController</span></span><br><span class=\"line\"><span class=\"string\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"string\">public</span> <span class=\"string\">class</span> <span class=\"string\">TestC</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@Autowired</span></span><br><span class=\"line\">    <span class=\"string\">private</span> <span class=\"string\">Environment</span> <span class=\"string\">env;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@RequestMapping(value</span> <span class=\"string\">=</span> <span class=\"string\">&quot;index&quot;</span>, <span class=\"string\">method</span> <span class=\"string\">=</span> <span class=\"string\">RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"string\">public</span> <span class=\"string\">String</span> <span class=\"string\">index()</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">&quot;environment : &quot;</span><span class=\"string\">+</span> <span class=\"string\">env.getProperty(&quot;spring.datasource.druid.url&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"常见sql优化方式","comments":1,"abbrlink":9311,"date":"2021-07-01T08:00:57.000Z","translate_title":"common-SQL-optimization-methods","_content":"1. 对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。\n\n2. 应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：    \n    ```sql\n    select id from t where num is null    \n    -- 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：    \n    select id from t where num=0\n    ```\n\n3. 应尽量避免在 where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。\n\n4. 应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：    \n    ```sql\n    select id from t where num=10 or num=20    \n    --可以这样查询：    \n    select id from t where num=10    \n    union all    \n    select id from t where num=20\n    ```\n\n5. in 和 not in 也要慎用，否则会导致全表扫描，如：    \n    ```sql\n    select id from t where num in(1,2,3)    \n    --对于连续的数值，能用 between 就不要用 in 了：    \n    select id from t where num between 1 and 3\n    ```\n\n6. 下面的查询也将导致全表扫描：\n    ```sql\n    select id from t where name like '%abc%'\n    ```\n7. 应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：    \n    ```sql\n    select id from t where num/2=100    \n    ---应改为:    \n    select id from t where num=100*2\n    ```\n\n8. 应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：    \n    ```sql\n    select id from t where substring(name,1,3)='abc'--name以abc开头的id    \n    ---应改为:    \n    select id from t where name like 'abc%'\n    ```\n\n9. 不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。\n\n10. 在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。\n\n11. 不要写一些没有意义的查询，如需要生成一个空表结构：    \n    ```sql\n    select col1,col2 into #t from t where 1=0    \n    --这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：    \n    create table #t(...)\n    ```\n\n12. 很多时候用 exists 代替 in 是一个好的选择：    \n    ```sql\n    select num from a where num in(select num from b)    \n    --用下面的语句替换：    \n    select num from a where exists(select 1 from b where num=a.num)\n    ```\n\n13. 并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。\n\n14. 索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。    \n一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。\n\n15. 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。    \n这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。\n\n16. 尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。\n\n17. 任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。\n\n18. 避免频繁创建和删除临时表，以减少系统表资源的消耗。\n\n19. 临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。\n\n20. 在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。\n\n21. 如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。\n\n22. 尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。\n\n23. 使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。\n\n24. 与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。\n在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。\n\n25. 尽量避免大事务操作，提高系统并发能力。\n\n26. 尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。","source":"_posts/2021/07/sql-01.md","raw":"---\ntitle: 常见sql优化方式\ntags: mysql\ncategories: mysql\ncomments: true\nabbrlink: 9311\ndate: 2021-07-01 16:00:57\ntranslate_title: common-SQL-optimization-methods\n---\n1. 对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。\n\n2. 应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：    \n    ```sql\n    select id from t where num is null    \n    -- 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：    \n    select id from t where num=0\n    ```\n\n3. 应尽量避免在 where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。\n\n4. 应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：    \n    ```sql\n    select id from t where num=10 or num=20    \n    --可以这样查询：    \n    select id from t where num=10    \n    union all    \n    select id from t where num=20\n    ```\n\n5. in 和 not in 也要慎用，否则会导致全表扫描，如：    \n    ```sql\n    select id from t where num in(1,2,3)    \n    --对于连续的数值，能用 between 就不要用 in 了：    \n    select id from t where num between 1 and 3\n    ```\n\n6. 下面的查询也将导致全表扫描：\n    ```sql\n    select id from t where name like '%abc%'\n    ```\n7. 应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：    \n    ```sql\n    select id from t where num/2=100    \n    ---应改为:    \n    select id from t where num=100*2\n    ```\n\n8. 应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：    \n    ```sql\n    select id from t where substring(name,1,3)='abc'--name以abc开头的id    \n    ---应改为:    \n    select id from t where name like 'abc%'\n    ```\n\n9. 不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。\n\n10. 在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。\n\n11. 不要写一些没有意义的查询，如需要生成一个空表结构：    \n    ```sql\n    select col1,col2 into #t from t where 1=0    \n    --这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：    \n    create table #t(...)\n    ```\n\n12. 很多时候用 exists 代替 in 是一个好的选择：    \n    ```sql\n    select num from a where num in(select num from b)    \n    --用下面的语句替换：    \n    select num from a where exists(select 1 from b where num=a.num)\n    ```\n\n13. 并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。\n\n14. 索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。    \n一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。\n\n15. 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。    \n这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。\n\n16. 尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。\n\n17. 任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。\n\n18. 避免频繁创建和删除临时表，以减少系统表资源的消耗。\n\n19. 临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。\n\n20. 在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。\n\n21. 如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。\n\n22. 尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。\n\n23. 使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。\n\n24. 与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。\n在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。\n\n25. 尽量避免大事务操作，提高系统并发能力。\n\n26. 尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。","slug":"sql-01","published":1,"updated":"2022-04-06T09:51:44.934Z","layout":"post","photos":[],"link":"","_id":"cl424hx5z003ead5id8v24of0","content":"<ol>\n<li><p>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>\n</li>\n<li><p>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：    </p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">is</span> <span class=\"keyword\">null</span>    </span><br><span class=\"line\"><span class=\"comment\">-- 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">0</span></span><br></pre></td></tr></table></figure></li>\n<li><p>应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p>\n</li>\n<li><p>应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：    </p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">or</span> num<span class=\"operator\">=</span><span class=\"number\">20</span>    </span><br><span class=\"line\"><span class=\"comment\">--可以这样查询：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">10</span>    </span><br><span class=\"line\"><span class=\"keyword\">union</span> <span class=\"keyword\">all</span>    </span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">20</span></span><br></pre></td></tr></table></figure></li>\n<li><p>in 和 not in 也要慎用，否则会导致全表扫描，如：    </p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">in</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)    </span><br><span class=\"line\"><span class=\"comment\">--对于连续的数值，能用 between 就不要用 in 了：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">between</span> <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></li>\n<li><p>下面的查询也将导致全表扫描：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%abc%&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：    </p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">/</span><span class=\"number\">2</span><span class=\"operator\">=</span><span class=\"number\">100</span>    </span><br><span class=\"line\"><span class=\"comment\">---应改为:    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">100</span><span class=\"operator\">*</span><span class=\"number\">2</span></span><br></pre></td></tr></table></figure></li>\n<li><p>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：    </p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> <span class=\"built_in\">substring</span>(name,<span class=\"number\">1</span>,<span class=\"number\">3</span>)<span class=\"operator\">=</span><span class=\"string\">&#x27;abc&#x27;</span><span class=\"comment\">--name以abc开头的id    </span></span><br><span class=\"line\"><span class=\"comment\">---应改为:    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;abc%&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p>\n</li>\n<li><p>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p>\n</li>\n<li><p>不要写一些没有意义的查询，如需要生成一个空表结构：    </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> col1,col2 <span class=\"keyword\">into</span> #t <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">0</span>    </span><br><span class=\"line\"><span class=\"comment\">--这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：    </span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> #t(...)</span><br></pre></td></tr></table></figure></li>\n<li><p>很多时候用 exists 代替 in 是一个好的选择：    </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> a <span class=\"keyword\">where</span> num <span class=\"keyword\">in</span>(<span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> b)    </span><br><span class=\"line\"><span class=\"comment\">--用下面的语句替换：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> a <span class=\"keyword\">where</span> <span class=\"keyword\">exists</span>(<span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> b <span class=\"keyword\">where</span> num<span class=\"operator\">=</span>a.num)</span><br></pre></td></tr></table></figure></li>\n<li><p>并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p>\n</li>\n<li><p>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。<br>一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p>\n</li>\n<li><p>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。<br>这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p>\n</li>\n<li><p>尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>\n</li>\n<li><p>任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</p>\n</li>\n<li><p>避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>\n</li>\n<li><p>临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p>\n</li>\n<li><p>在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>\n</li>\n<li><p>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p>\n</li>\n<li><p>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p>\n</li>\n<li><p>使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>\n</li>\n<li><p>与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。<br>在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p>\n</li>\n<li><p>尽量避免大事务操作，提高系统并发能力。</p>\n</li>\n<li><p>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>\n</li>\n</ol>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<ol>\n<li><p>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>\n</li>\n<li><p>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：    </p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">is</span> <span class=\"keyword\">null</span>    </span><br><span class=\"line\"><span class=\"comment\">-- 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">0</span></span><br></pre></td></tr></table></figure></li>\n<li><p>应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p>\n</li>\n<li><p>应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：    </p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">or</span> num<span class=\"operator\">=</span><span class=\"number\">20</span>    </span><br><span class=\"line\"><span class=\"comment\">--可以这样查询：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">10</span>    </span><br><span class=\"line\"><span class=\"keyword\">union</span> <span class=\"keyword\">all</span>    </span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">20</span></span><br></pre></td></tr></table></figure></li>\n<li><p>in 和 not in 也要慎用，否则会导致全表扫描，如：    </p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">in</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)    </span><br><span class=\"line\"><span class=\"comment\">--对于连续的数值，能用 between 就不要用 in 了：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">between</span> <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></li>\n<li><p>下面的查询也将导致全表扫描：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%abc%&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：    </p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">/</span><span class=\"number\">2</span><span class=\"operator\">=</span><span class=\"number\">100</span>    </span><br><span class=\"line\"><span class=\"comment\">---应改为:    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">100</span><span class=\"operator\">*</span><span class=\"number\">2</span></span><br></pre></td></tr></table></figure></li>\n<li><p>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：    </p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> <span class=\"built_in\">substring</span>(name,<span class=\"number\">1</span>,<span class=\"number\">3</span>)<span class=\"operator\">=</span><span class=\"string\">&#x27;abc&#x27;</span><span class=\"comment\">--name以abc开头的id    </span></span><br><span class=\"line\"><span class=\"comment\">---应改为:    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;abc%&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p>\n</li>\n<li><p>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p>\n</li>\n<li><p>不要写一些没有意义的查询，如需要生成一个空表结构：    </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> col1,col2 <span class=\"keyword\">into</span> #t <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">0</span>    </span><br><span class=\"line\"><span class=\"comment\">--这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：    </span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> #t(...)</span><br></pre></td></tr></table></figure></li>\n<li><p>很多时候用 exists 代替 in 是一个好的选择：    </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> a <span class=\"keyword\">where</span> num <span class=\"keyword\">in</span>(<span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> b)    </span><br><span class=\"line\"><span class=\"comment\">--用下面的语句替换：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> a <span class=\"keyword\">where</span> <span class=\"keyword\">exists</span>(<span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> b <span class=\"keyword\">where</span> num<span class=\"operator\">=</span>a.num)</span><br></pre></td></tr></table></figure></li>\n<li><p>并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p>\n</li>\n<li><p>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。<br>一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p>\n</li>\n<li><p>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。<br>这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p>\n</li>\n<li><p>尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>\n</li>\n<li><p>任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</p>\n</li>\n<li><p>避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>\n</li>\n<li><p>临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p>\n</li>\n<li><p>在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>\n</li>\n<li><p>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p>\n</li>\n<li><p>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p>\n</li>\n<li><p>使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>\n</li>\n<li><p>与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。<br>在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p>\n</li>\n<li><p>尽量避免大事务操作，提高系统并发能力。</p>\n</li>\n<li><p>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>\n</li>\n</ol>\n"},{"title":"Java守护线程和非守护线程","comments":1,"translate_title":"thread-01","abbrlink":46320,"date":"2021-08-15T06:14:56.000Z","_content":"用户线程：我们平常创建的普通线程。\n\n守护线程：用来服务于用户线程；不需要上层逻辑介入\n\njava线程分为守护线程和非守护线程，当java jvm检测主线程或其他子线程执行完之后，守护线程也会马上停止执行，我们可以使用Thread.setDaemon(ture或false)来设置一个线程是守护线程还是非守护线程，默认为false，可以通过Thread.isDaemon()方法查询该线程是否是守护线程\n\n守护线程是所有的用户线程结束生命周期，守护线程才会结束生命周期，只要有一个用户线程存在，那么守护线程就不会结束，例如Java中的垃圾 回收器就是一个守护线程，只有应用程序中所有的线程结束，它才会结束。\n```java\npublic class DaemonThread {\n    public static void main(String[] args) {\n        Thread thread = new Thread(DaemonThread::print);\n        thread.setDaemon(true);\n        thread.start();\n        System.out.println(\"主线程main 结束\");\n    }\n\n    public static void print() {\n        int counter = 1;\n        //写一个死循环的方法来测试\n        while (true) {\n            try {\n                System.out.println(\"Counter:\" + counter++);\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n输出：\n```text\n主线程main 结束\nCounter:1\n```\n如果我们将daemon设置为非守护线程，代码如下:\n```java\nthread.setDaemon(false);\n```\n这个时候就不会退出while(true)循环了，会一直执行下去，结果如下：\n```text\n主线程main 结束\nCounter:1\nCounter:2\nCounter:3\nCounter:4\nCounter:5\n....\n```\n\n**总结：守护线程是为用户线程服务的，当用户线程全部结束，守护线程会自动结束。**\n\n**注意事项：**\n1. thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。\n2. 在Daemon线程中产生的新线程也是Daemon的。\n3. 守护线程不能用于去访问固有资源，比如读写操作或者计算逻辑。因为它会在任何时候甚至在一个操作的中间发生中断。\n4. Java自带的多线程框架，比如ExecutorService，会将守护线程转换为用户线程，所以如果要使用后台线程就不能用Java的线程池。\n\n**意义以及应用场景:**\n\n当主线程结束时，结束其余的子线程（守护线程）自动关闭，就免去了还要继续关闭子线程的麻烦。如：Java垃圾回收线程就是一个典型的守护线程；内存资源或者线程的管理，但是非守护线程也可以。","source":"_posts/2021/07/thread-01.md","raw":"---\ntitle: Java守护线程和非守护线程\ntags: 守护线程\ncategories: java\ncomments: true\ntranslate_title: thread-01\nabbrlink: 46320\ndate: 2021-08-15 14:14:56\n---\n用户线程：我们平常创建的普通线程。\n\n守护线程：用来服务于用户线程；不需要上层逻辑介入\n\njava线程分为守护线程和非守护线程，当java jvm检测主线程或其他子线程执行完之后，守护线程也会马上停止执行，我们可以使用Thread.setDaemon(ture或false)来设置一个线程是守护线程还是非守护线程，默认为false，可以通过Thread.isDaemon()方法查询该线程是否是守护线程\n\n守护线程是所有的用户线程结束生命周期，守护线程才会结束生命周期，只要有一个用户线程存在，那么守护线程就不会结束，例如Java中的垃圾 回收器就是一个守护线程，只有应用程序中所有的线程结束，它才会结束。\n```java\npublic class DaemonThread {\n    public static void main(String[] args) {\n        Thread thread = new Thread(DaemonThread::print);\n        thread.setDaemon(true);\n        thread.start();\n        System.out.println(\"主线程main 结束\");\n    }\n\n    public static void print() {\n        int counter = 1;\n        //写一个死循环的方法来测试\n        while (true) {\n            try {\n                System.out.println(\"Counter:\" + counter++);\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n输出：\n```text\n主线程main 结束\nCounter:1\n```\n如果我们将daemon设置为非守护线程，代码如下:\n```java\nthread.setDaemon(false);\n```\n这个时候就不会退出while(true)循环了，会一直执行下去，结果如下：\n```text\n主线程main 结束\nCounter:1\nCounter:2\nCounter:3\nCounter:4\nCounter:5\n....\n```\n\n**总结：守护线程是为用户线程服务的，当用户线程全部结束，守护线程会自动结束。**\n\n**注意事项：**\n1. thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。\n2. 在Daemon线程中产生的新线程也是Daemon的。\n3. 守护线程不能用于去访问固有资源，比如读写操作或者计算逻辑。因为它会在任何时候甚至在一个操作的中间发生中断。\n4. Java自带的多线程框架，比如ExecutorService，会将守护线程转换为用户线程，所以如果要使用后台线程就不能用Java的线程池。\n\n**意义以及应用场景:**\n\n当主线程结束时，结束其余的子线程（守护线程）自动关闭，就免去了还要继续关闭子线程的麻烦。如：Java垃圾回收线程就是一个典型的守护线程；内存资源或者线程的管理，但是非守护线程也可以。","slug":"thread-01","published":1,"updated":"2022-03-27T14:06:03.452Z","layout":"post","photos":[],"link":"","_id":"cl424hx61003jad5igwxn3i3e","content":"<p>用户线程：我们平常创建的普通线程。</p>\n<p>守护线程：用来服务于用户线程；不需要上层逻辑介入</p>\n<p>java线程分为守护线程和非守护线程，当java jvm检测主线程或其他子线程执行完之后，守护线程也会马上停止执行，我们可以使用Thread.setDaemon(ture或false)来设置一个线程是守护线程还是非守护线程，默认为false，可以通过Thread.isDaemon()方法查询该线程是否是守护线程</p>\n<p>守护线程是所有的用户线程结束生命周期，守护线程才会结束生命周期，只要有一个用户线程存在，那么守护线程就不会结束，例如Java中的垃圾 回收器就是一个守护线程，只有应用程序中所有的线程结束，它才会结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaemonThread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(DaemonThread::print);</span><br><span class=\"line\">        thread.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;主线程main 结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> counter = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//写一个死循环的方法来测试</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Counter:&quot;</span> + counter++);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主线程main 结束</span><br><span class=\"line\">Counter:1</span><br></pre></td></tr></table></figure>\n<p>如果我们将daemon设置为非守护线程，代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread.setDaemon(<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>这个时候就不会退出while(true)循环了，会一直执行下去，结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主线程main 结束</span><br><span class=\"line\">Counter:1</span><br><span class=\"line\">Counter:2</span><br><span class=\"line\">Counter:3</span><br><span class=\"line\">Counter:4</span><br><span class=\"line\">Counter:5</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：守护线程是为用户线程服务的，当用户线程全部结束，守护线程会自动结束。</strong></p>\n<p><strong>注意事项：</strong></p>\n<ol>\n<li>thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。</li>\n<li>在Daemon线程中产生的新线程也是Daemon的。</li>\n<li>守护线程不能用于去访问固有资源，比如读写操作或者计算逻辑。因为它会在任何时候甚至在一个操作的中间发生中断。</li>\n<li>Java自带的多线程框架，比如ExecutorService，会将守护线程转换为用户线程，所以如果要使用后台线程就不能用Java的线程池。</li>\n</ol>\n<p><strong>意义以及应用场景:</strong></p>\n<p>当主线程结束时，结束其余的子线程（守护线程）自动关闭，就免去了还要继续关闭子线程的麻烦。如：Java垃圾回收线程就是一个典型的守护线程；内存资源或者线程的管理，但是非守护线程也可以。</p>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>用户线程：我们平常创建的普通线程。</p>\n<p>守护线程：用来服务于用户线程；不需要上层逻辑介入</p>\n<p>java线程分为守护线程和非守护线程，当java jvm检测主线程或其他子线程执行完之后，守护线程也会马上停止执行，我们可以使用Thread.setDaemon(ture或false)来设置一个线程是守护线程还是非守护线程，默认为false，可以通过Thread.isDaemon()方法查询该线程是否是守护线程</p>\n<p>守护线程是所有的用户线程结束生命周期，守护线程才会结束生命周期，只要有一个用户线程存在，那么守护线程就不会结束，例如Java中的垃圾 回收器就是一个守护线程，只有应用程序中所有的线程结束，它才会结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaemonThread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(DaemonThread::print);</span><br><span class=\"line\">        thread.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;主线程main 结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> counter = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//写一个死循环的方法来测试</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Counter:&quot;</span> + counter++);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主线程main 结束</span><br><span class=\"line\">Counter:1</span><br></pre></td></tr></table></figure>\n<p>如果我们将daemon设置为非守护线程，代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread.setDaemon(<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>这个时候就不会退出while(true)循环了，会一直执行下去，结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主线程main 结束</span><br><span class=\"line\">Counter:1</span><br><span class=\"line\">Counter:2</span><br><span class=\"line\">Counter:3</span><br><span class=\"line\">Counter:4</span><br><span class=\"line\">Counter:5</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：守护线程是为用户线程服务的，当用户线程全部结束，守护线程会自动结束。</strong></p>\n<p><strong>注意事项：</strong></p>\n<ol>\n<li>thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。</li>\n<li>在Daemon线程中产生的新线程也是Daemon的。</li>\n<li>守护线程不能用于去访问固有资源，比如读写操作或者计算逻辑。因为它会在任何时候甚至在一个操作的中间发生中断。</li>\n<li>Java自带的多线程框架，比如ExecutorService，会将守护线程转换为用户线程，所以如果要使用后台线程就不能用Java的线程池。</li>\n</ol>\n<p><strong>意义以及应用场景:</strong></p>\n<p>当主线程结束时，结束其余的子线程（守护线程）自动关闭，就免去了还要继续关闭子线程的麻烦。如：Java垃圾回收线程就是一个典型的守护线程；内存资源或者线程的管理，但是非守护线程也可以。</p>\n"},{"title":"Hexo添加评论系统Valine","comments":1,"abbrlink":39319,"date":"2021-07-27T13:49:57.000Z","translate_title":"valine","_content":" \nHexo的评论系统有很多，常见的有以下几个\n- ~~多说~~\n- ~~网易云跟帖~~\n- 畅言\n- 来必力（LiveRe）\n- Disqus\n- Hypercomments\n- valine\n\n首先多说和网易云已经倒下了，其次畅言需要备案，Disqus，Hypercomments和LiveRe都是国外的，加载速度贼慢，甚至有被墙的可能，寻觅了很久之后，从Material主题换成next主题之后，终于找到了一个好用的评论系统，那就是 valine\n\n我使用的是Next 6.x版本，本身就已经集成了valine，因此正常情况下是按照官方文档走就可以了，5分钟开启你的评论系统~\n\n1. 注册LeanCloud\n   \n   我们的评论系统其实是放在Leancloud上的，因此首先需要去注册一个账号，注册地址：https://www.leancloud.cn/\n   ![](./valine/1.png)\n   \n2. 获取AppId\n   \n   注册完了之后 创建一个应用，名字随便起；然后进入应用->设置->应用凭证 中获取appid 和 appkey\n   ![](./valine/2.png)\n   \n3. 配置valine\n   \n   拿到appid和appkey之后，打开主题配置文件_config.yml 搜索 valine，填入appid 和 appkey\n   ```yaml\n     comment:\n         type: valine  # 启用哪种评论系统\n         valine: # Valine. https://valine.js.org\n            appid: your leancloud application appid\n            appkey: your leancloud application appkey\n            notify: false # mail notifier , https://github.com/xCss/Valine/wiki\n            verify: false # Verification code\n            placeholder: Just go go # comment box placeholder\n            avatar: mm # gravatar style\n            meta: nick,mail #,link      #   custom comment header\n            pageSize: 10 # pagination size\n            visitor: true # Article reading statistic https://valine.js.org/visitor.html\n    ```\n   \n4. LeanCloud 安全域名配置\n   \n   在LeanCloud -> 设置 -> 安全中心 -> Web 安全域名 把你的域名加进去\n   ![](./valine/3.png)\n   \n5. 查看评论数据\n   \n   在数据存储 -> 结构化数据 中可以查看到所有的存储的数据信息\n   ![](./valine/4.png)","source":"_posts/2021/07/valine.md","raw":"---\ntitle: Hexo添加评论系统Valine\ncomments: true\nabbrlink: 39319\ndate: 2021-07-27 21:49:57\ntags: hexo\ncategories: hexo\ntranslate_title: valine\n---\n \nHexo的评论系统有很多，常见的有以下几个\n- ~~多说~~\n- ~~网易云跟帖~~\n- 畅言\n- 来必力（LiveRe）\n- Disqus\n- Hypercomments\n- valine\n\n首先多说和网易云已经倒下了，其次畅言需要备案，Disqus，Hypercomments和LiveRe都是国外的，加载速度贼慢，甚至有被墙的可能，寻觅了很久之后，从Material主题换成next主题之后，终于找到了一个好用的评论系统，那就是 valine\n\n我使用的是Next 6.x版本，本身就已经集成了valine，因此正常情况下是按照官方文档走就可以了，5分钟开启你的评论系统~\n\n1. 注册LeanCloud\n   \n   我们的评论系统其实是放在Leancloud上的，因此首先需要去注册一个账号，注册地址：https://www.leancloud.cn/\n   ![](./valine/1.png)\n   \n2. 获取AppId\n   \n   注册完了之后 创建一个应用，名字随便起；然后进入应用->设置->应用凭证 中获取appid 和 appkey\n   ![](./valine/2.png)\n   \n3. 配置valine\n   \n   拿到appid和appkey之后，打开主题配置文件_config.yml 搜索 valine，填入appid 和 appkey\n   ```yaml\n     comment:\n         type: valine  # 启用哪种评论系统\n         valine: # Valine. https://valine.js.org\n            appid: your leancloud application appid\n            appkey: your leancloud application appkey\n            notify: false # mail notifier , https://github.com/xCss/Valine/wiki\n            verify: false # Verification code\n            placeholder: Just go go # comment box placeholder\n            avatar: mm # gravatar style\n            meta: nick,mail #,link      #   custom comment header\n            pageSize: 10 # pagination size\n            visitor: true # Article reading statistic https://valine.js.org/visitor.html\n    ```\n   \n4. LeanCloud 安全域名配置\n   \n   在LeanCloud -> 设置 -> 安全中心 -> Web 安全域名 把你的域名加进去\n   ![](./valine/3.png)\n   \n5. 查看评论数据\n   \n   在数据存储 -> 结构化数据 中可以查看到所有的存储的数据信息\n   ![](./valine/4.png)","slug":"valine","published":1,"updated":"2022-05-05T01:43:21.800Z","layout":"post","photos":[],"link":"","_id":"cl424hx61003mad5i9shyhc7a","content":"<p>Hexo的评论系统有很多，常见的有以下几个</p>\n<ul>\n<li><del>多说</del></li>\n<li><del>网易云跟帖</del></li>\n<li>畅言</li>\n<li>来必力（LiveRe）</li>\n<li>Disqus</li>\n<li>Hypercomments</li>\n<li>valine</li>\n</ul>\n<p>首先多说和网易云已经倒下了，其次畅言需要备案，Disqus，Hypercomments和LiveRe都是国外的，加载速度贼慢，甚至有被墙的可能，寻觅了很久之后，从Material主题换成next主题之后，终于找到了一个好用的评论系统，那就是 valine</p>\n<p>我使用的是Next 6.x版本，本身就已经集成了valine，因此正常情况下是按照官方文档走就可以了，5分钟开启你的评论系统~</p>\n<ol>\n<li>注册LeanCloud我们的评论系统其实是放在Leancloud上的，因此首先需要去注册一个账号，注册地址：<a href=\"https://www.leancloud.cn/\">https://www.leancloud.cn/</a><br><img src=\"/valine/1.png\"></li>\n<li>获取AppId注册完了之后 创建一个应用，名字随便起；然后进入应用-&gt;设置-&gt;应用凭证 中获取appid 和 appkey<br><img src=\"/valine/2.png\"></li>\n<li>配置valine拿到appid和appkey之后，打开主题配置文件_config.yml 搜索 valine，填入appid 和 appkey<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">comment:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">valine</span>  <span class=\"comment\"># 启用哪种评论系统</span></span><br><span class=\"line\">    <span class=\"attr\">valine:</span> <span class=\"comment\"># Valine. https://valine.js.org</span></span><br><span class=\"line\">       <span class=\"attr\">appid:</span> <span class=\"string\">your</span> <span class=\"string\">leancloud</span> <span class=\"string\">application</span> <span class=\"string\">appid</span></span><br><span class=\"line\">       <span class=\"attr\">appkey:</span> <span class=\"string\">your</span> <span class=\"string\">leancloud</span> <span class=\"string\">application</span> <span class=\"string\">appkey</span></span><br><span class=\"line\">       <span class=\"attr\">notify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class=\"line\">       <span class=\"attr\">verify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Verification code</span></span><br><span class=\"line\">       <span class=\"attr\">placeholder:</span> <span class=\"string\">Just</span> <span class=\"string\">go</span> <span class=\"string\">go</span> <span class=\"comment\"># comment box placeholder</span></span><br><span class=\"line\">       <span class=\"attr\">avatar:</span> <span class=\"string\">mm</span> <span class=\"comment\"># gravatar style</span></span><br><span class=\"line\">       <span class=\"attr\">meta:</span> <span class=\"string\">nick,mail</span> <span class=\"comment\">#,link      #   custom comment header</span></span><br><span class=\"line\">       <span class=\"attr\">pageSize:</span> <span class=\"number\">10</span> <span class=\"comment\"># pagination size</span></span><br><span class=\"line\">       <span class=\"attr\">visitor:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Article reading statistic https://valine.js.org/visitor.html</span></span><br></pre></td></tr></table></figure></li>\n<li>LeanCloud 安全域名配置在LeanCloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去<br><img src=\"/valine/3.png\"></li>\n<li>查看评论数据在数据存储 -&gt; 结构化数据 中可以查看到所有的存储的数据信息<br><img src=\"/valine/4.png\"></li>\n</ol>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>Hexo的评论系统有很多，常见的有以下几个</p>\n<ul>\n<li><del>多说</del></li>\n<li><del>网易云跟帖</del></li>\n<li>畅言</li>\n<li>来必力（LiveRe）</li>\n<li>Disqus</li>\n<li>Hypercomments</li>\n<li>valine</li>\n</ul>\n<p>首先多说和网易云已经倒下了，其次畅言需要备案，Disqus，Hypercomments和LiveRe都是国外的，加载速度贼慢，甚至有被墙的可能，寻觅了很久之后，从Material主题换成next主题之后，终于找到了一个好用的评论系统，那就是 valine</p>\n<p>我使用的是Next 6.x版本，本身就已经集成了valine，因此正常情况下是按照官方文档走就可以了，5分钟开启你的评论系统~</p>\n<ol>\n<li>注册LeanCloud我们的评论系统其实是放在Leancloud上的，因此首先需要去注册一个账号，注册地址：<a href=\"https://www.leancloud.cn/\">https://www.leancloud.cn/</a><br><img src=\"/valine/1.png\"></li>\n<li>获取AppId注册完了之后 创建一个应用，名字随便起；然后进入应用-&gt;设置-&gt;应用凭证 中获取appid 和 appkey<br><img src=\"/valine/2.png\"></li>\n<li>配置valine拿到appid和appkey之后，打开主题配置文件_config.yml 搜索 valine，填入appid 和 appkey<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">comment:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">valine</span>  <span class=\"comment\"># 启用哪种评论系统</span></span><br><span class=\"line\">    <span class=\"attr\">valine:</span> <span class=\"comment\"># Valine. https://valine.js.org</span></span><br><span class=\"line\">       <span class=\"attr\">appid:</span> <span class=\"string\">your</span> <span class=\"string\">leancloud</span> <span class=\"string\">application</span> <span class=\"string\">appid</span></span><br><span class=\"line\">       <span class=\"attr\">appkey:</span> <span class=\"string\">your</span> <span class=\"string\">leancloud</span> <span class=\"string\">application</span> <span class=\"string\">appkey</span></span><br><span class=\"line\">       <span class=\"attr\">notify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class=\"line\">       <span class=\"attr\">verify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Verification code</span></span><br><span class=\"line\">       <span class=\"attr\">placeholder:</span> <span class=\"string\">Just</span> <span class=\"string\">go</span> <span class=\"string\">go</span> <span class=\"comment\"># comment box placeholder</span></span><br><span class=\"line\">       <span class=\"attr\">avatar:</span> <span class=\"string\">mm</span> <span class=\"comment\"># gravatar style</span></span><br><span class=\"line\">       <span class=\"attr\">meta:</span> <span class=\"string\">nick,mail</span> <span class=\"comment\">#,link      #   custom comment header</span></span><br><span class=\"line\">       <span class=\"attr\">pageSize:</span> <span class=\"number\">10</span> <span class=\"comment\"># pagination size</span></span><br><span class=\"line\">       <span class=\"attr\">visitor:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Article reading statistic https://valine.js.org/visitor.html</span></span><br></pre></td></tr></table></figure></li>\n<li>LeanCloud 安全域名配置在LeanCloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去<br><img src=\"/valine/3.png\"></li>\n<li>查看评论数据在数据存储 -&gt; 结构化数据 中可以查看到所有的存储的数据信息<br><img src=\"/valine/4.png\"></li>\n</ol>\n"},{"title":"volatile关键字","comments":1,"translate_title":"volatile1","abbrlink":63695,"date":"2021-08-02T10:20:38.000Z","_content":"## 1.volatile作用\n  volatile保证有序性，可见性，不能保证原子性\n  \n1. 禁止指令重排\n2. 保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量值，这个新值对其他线程立即可见的\n3. 不能保证原子性(线程不安全)\n\n## 2. 实现原理\n1. 通过插入内存屏障指令禁止编译器和CPU对程序进行重排序。\n2. 当对声明了volatile的变量进行写操作时，JVM就会向处理器发送一条Lock前缀的指令，这条Lock前缀指令产生如下两个作用：\n    - Lock前缀指令会引起处理器缓存回写到系统内存，并使用缓存一致性机制来确保回写的原子性。\n    - 一个处理器的缓存回写到系统内存会导致其他处理器的缓存无效。处理器使用MESI控制协议去维护内部缓存和其他处理器缓存的一致性。处理器能嗅探其他处理器访问系统内存和它们的内部缓存。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。例如，在Pentium和P6 family处理器中，如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充\n## 3.synchronized与volatile比较\n1. volatile关键字是线程同步的轻量级实现，性能较synchronized好；但是volatile关键字只能用于变量，而synchronized关键字可以修饰方法以及代码块\n2. synchronized关键字在java1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其他各种优化之后执行效率有了显著的提升；\n3. 多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞\n4. volatile关键字保证数据的可见性，但是不能保证数据的原子性；synchronized关键字两者都能保证（synchronized保证原子性，有序性，可见性）\n5. volatile关键字主要用于解决变量在多个线程之间的可见性，而synchronized关键字解决的是多个线程之间访问资源的同步性。\n6. synchronized是同步锁，同步快内的代码相当于同一时刻单线程执行\n   \n## 4. 可见性问题\nJava虚拟机规范中定义了一种Java内存 模型（Java Memory Model，即JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的并发效果。Java内存模型的主要目标就是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的细节。\n\nJMM中规定所有的变量都存储在主内存（Main Memory）中，每条线程都有自己的工作内存（Work Memory），线程的工作内存中保存了该线程所使用的变量的从主内存中拷贝的副本。线程对于变量的读、写都必须在工作内存中进行，而不能直接读、写主内存中的变量。同时，本线程的工作内存的变量也无法被其他线程直接访问，必须通过主内存完成\n整体内存模型如下：\n![image-20201210103251475](./volatile/01.png)\n\n### 4.1 synchronized\nsynchronized关键字的语义JMM（Java Main Memory）有两个规定，保证其实现内存可见性：\n    - **线程解锁前，必须把共享变量的最新值刷新到主内存中**\n    - **线程加锁前，将清空工作内存中共享变量的值，从主内存中重新取值**\n    \n### 4.2 volatile\n- 当对volatile变量执行写操作后，JMM会把工作内存中的最新变量值强制刷新到主内存\n- 写操作会导致其他线程中的缓存无效\n这样，其他线程使用缓存时，发现本地工作内存中此变量无效，便从主内存中获取，这样获取到的变量便是最新的值，实现了线程的可见性。","source":"_posts/2021/07/volatile.md","raw":"---\ntitle: volatile关键字\ntags: thread\ncategories: java\ncomments: true\ntranslate_title: volatile1\nabbrlink: 63695\ndate: 2021-08-02 18:20:38\n---\n## 1.volatile作用\n  volatile保证有序性，可见性，不能保证原子性\n  \n1. 禁止指令重排\n2. 保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量值，这个新值对其他线程立即可见的\n3. 不能保证原子性(线程不安全)\n\n## 2. 实现原理\n1. 通过插入内存屏障指令禁止编译器和CPU对程序进行重排序。\n2. 当对声明了volatile的变量进行写操作时，JVM就会向处理器发送一条Lock前缀的指令，这条Lock前缀指令产生如下两个作用：\n    - Lock前缀指令会引起处理器缓存回写到系统内存，并使用缓存一致性机制来确保回写的原子性。\n    - 一个处理器的缓存回写到系统内存会导致其他处理器的缓存无效。处理器使用MESI控制协议去维护内部缓存和其他处理器缓存的一致性。处理器能嗅探其他处理器访问系统内存和它们的内部缓存。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。例如，在Pentium和P6 family处理器中，如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充\n## 3.synchronized与volatile比较\n1. volatile关键字是线程同步的轻量级实现，性能较synchronized好；但是volatile关键字只能用于变量，而synchronized关键字可以修饰方法以及代码块\n2. synchronized关键字在java1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其他各种优化之后执行效率有了显著的提升；\n3. 多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞\n4. volatile关键字保证数据的可见性，但是不能保证数据的原子性；synchronized关键字两者都能保证（synchronized保证原子性，有序性，可见性）\n5. volatile关键字主要用于解决变量在多个线程之间的可见性，而synchronized关键字解决的是多个线程之间访问资源的同步性。\n6. synchronized是同步锁，同步快内的代码相当于同一时刻单线程执行\n   \n## 4. 可见性问题\nJava虚拟机规范中定义了一种Java内存 模型（Java Memory Model，即JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的并发效果。Java内存模型的主要目标就是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的细节。\n\nJMM中规定所有的变量都存储在主内存（Main Memory）中，每条线程都有自己的工作内存（Work Memory），线程的工作内存中保存了该线程所使用的变量的从主内存中拷贝的副本。线程对于变量的读、写都必须在工作内存中进行，而不能直接读、写主内存中的变量。同时，本线程的工作内存的变量也无法被其他线程直接访问，必须通过主内存完成\n整体内存模型如下：\n![image-20201210103251475](./volatile/01.png)\n\n### 4.1 synchronized\nsynchronized关键字的语义JMM（Java Main Memory）有两个规定，保证其实现内存可见性：\n    - **线程解锁前，必须把共享变量的最新值刷新到主内存中**\n    - **线程加锁前，将清空工作内存中共享变量的值，从主内存中重新取值**\n    \n### 4.2 volatile\n- 当对volatile变量执行写操作后，JMM会把工作内存中的最新变量值强制刷新到主内存\n- 写操作会导致其他线程中的缓存无效\n这样，其他线程使用缓存时，发现本地工作内存中此变量无效，便从主内存中获取，这样获取到的变量便是最新的值，实现了线程的可见性。","slug":"volatile","published":1,"updated":"2022-06-06T02:37:32.781Z","layout":"post","photos":[],"link":"","_id":"cl424hx62003pad5i640s8buc","content":"<h2 id=\"1-volatile作用\"><a href=\"#1-volatile作用\" class=\"headerlink\" title=\"1.volatile作用\"></a>1.volatile作用</h2><p>  volatile保证有序性，可见性，不能保证原子性</p>\n<ol>\n<li>禁止指令重排</li>\n<li>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量值，这个新值对其他线程立即可见的</li>\n<li>不能保证原子性(线程不安全)</li>\n</ol>\n<h2 id=\"2-实现原理\"><a href=\"#2-实现原理\" class=\"headerlink\" title=\"2. 实现原理\"></a>2. 实现原理</h2><ol>\n<li>通过插入内存屏障指令禁止编译器和CPU对程序进行重排序。</li>\n<li>当对声明了volatile的变量进行写操作时，JVM就会向处理器发送一条Lock前缀的指令，这条Lock前缀指令产生如下两个作用：<ul>\n<li>Lock前缀指令会引起处理器缓存回写到系统内存，并使用缓存一致性机制来确保回写的原子性。</li>\n<li>一个处理器的缓存回写到系统内存会导致其他处理器的缓存无效。处理器使用MESI控制协议去维护内部缓存和其他处理器缓存的一致性。处理器能嗅探其他处理器访问系统内存和它们的内部缓存。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。例如，在Pentium和P6 family处理器中，如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充<h2 id=\"3-synchronized与volatile比较\"><a href=\"#3-synchronized与volatile比较\" class=\"headerlink\" title=\"3.synchronized与volatile比较\"></a>3.synchronized与volatile比较</h2></li>\n</ul>\n</li>\n<li>volatile关键字是线程同步的轻量级实现，性能较synchronized好；但是volatile关键字只能用于变量，而synchronized关键字可以修饰方法以及代码块</li>\n<li>synchronized关键字在java1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其他各种优化之后执行效率有了显著的提升；</li>\n<li>多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞</li>\n<li>volatile关键字保证数据的可见性，但是不能保证数据的原子性；synchronized关键字两者都能保证（synchronized保证原子性，有序性，可见性）</li>\n<li>volatile关键字主要用于解决变量在多个线程之间的可见性，而synchronized关键字解决的是多个线程之间访问资源的同步性。</li>\n<li>synchronized是同步锁，同步快内的代码相当于同一时刻单线程执行</li>\n</ol>\n<h2 id=\"4-可见性问题\"><a href=\"#4-可见性问题\" class=\"headerlink\" title=\"4. 可见性问题\"></a>4. 可见性问题</h2><p>Java虚拟机规范中定义了一种Java内存 模型（Java Memory Model，即JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的并发效果。Java内存模型的主要目标就是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的细节。</p>\n<p>JMM中规定所有的变量都存储在主内存（Main Memory）中，每条线程都有自己的工作内存（Work Memory），线程的工作内存中保存了该线程所使用的变量的从主内存中拷贝的副本。线程对于变量的读、写都必须在工作内存中进行，而不能直接读、写主内存中的变量。同时，本线程的工作内存的变量也无法被其他线程直接访问，必须通过主内存完成<br>整体内存模型如下：<br><img src=\"/volatile/01.png\" alt=\"image-20201210103251475\"></p>\n<h3 id=\"4-1-synchronized\"><a href=\"#4-1-synchronized\" class=\"headerlink\" title=\"4.1 synchronized\"></a>4.1 synchronized</h3><p>synchronized关键字的语义JMM（Java Main Memory）有两个规定，保证其实现内存可见性：<br>    - <strong>线程解锁前，必须把共享变量的最新值刷新到主内存中</strong><br>    - <strong>线程加锁前，将清空工作内存中共享变量的值，从主内存中重新取值</strong></p>\n<h3 id=\"4-2-volatile\"><a href=\"#4-2-volatile\" class=\"headerlink\" title=\"4.2 volatile\"></a>4.2 volatile</h3><ul>\n<li>当对volatile变量执行写操作后，JMM会把工作内存中的最新变量值强制刷新到主内存</li>\n<li>写操作会导致其他线程中的缓存无效<br>这样，其他线程使用缓存时，发现本地工作内存中此变量无效，便从主内存中获取，这样获取到的变量便是最新的值，实现了线程的可见性。</li>\n</ul>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h2 id=\"1-volatile作用\"><a href=\"#1-volatile作用\" class=\"headerlink\" title=\"1.volatile作用\"></a>1.volatile作用</h2><p>  volatile保证有序性，可见性，不能保证原子性</p>\n<ol>\n<li>禁止指令重排</li>\n<li>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量值，这个新值对其他线程立即可见的</li>\n<li>不能保证原子性(线程不安全)</li>\n</ol>\n<h2 id=\"2-实现原理\"><a href=\"#2-实现原理\" class=\"headerlink\" title=\"2. 实现原理\"></a>2. 实现原理</h2><ol>\n<li>通过插入内存屏障指令禁止编译器和CPU对程序进行重排序。</li>\n<li>当对声明了volatile的变量进行写操作时，JVM就会向处理器发送一条Lock前缀的指令，这条Lock前缀指令产生如下两个作用：<ul>\n<li>Lock前缀指令会引起处理器缓存回写到系统内存，并使用缓存一致性机制来确保回写的原子性。</li>\n<li>一个处理器的缓存回写到系统内存会导致其他处理器的缓存无效。处理器使用MESI控制协议去维护内部缓存和其他处理器缓存的一致性。处理器能嗅探其他处理器访问系统内存和它们的内部缓存。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。例如，在Pentium和P6 family处理器中，如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充<h2 id=\"3-synchronized与volatile比较\"><a href=\"#3-synchronized与volatile比较\" class=\"headerlink\" title=\"3.synchronized与volatile比较\"></a>3.synchronized与volatile比较</h2></li>\n</ul>\n</li>\n<li>volatile关键字是线程同步的轻量级实现，性能较synchronized好；但是volatile关键字只能用于变量，而synchronized关键字可以修饰方法以及代码块</li>\n<li>synchronized关键字在java1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其他各种优化之后执行效率有了显著的提升；</li>\n<li>多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞</li>\n<li>volatile关键字保证数据的可见性，但是不能保证数据的原子性；synchronized关键字两者都能保证（synchronized保证原子性，有序性，可见性）</li>\n<li>volatile关键字主要用于解决变量在多个线程之间的可见性，而synchronized关键字解决的是多个线程之间访问资源的同步性。</li>\n<li>synchronized是同步锁，同步快内的代码相当于同一时刻单线程执行</li>\n</ol>\n<h2 id=\"4-可见性问题\"><a href=\"#4-可见性问题\" class=\"headerlink\" title=\"4. 可见性问题\"></a>4. 可见性问题</h2><p>Java虚拟机规范中定义了一种Java内存 模型（Java Memory Model，即JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的并发效果。Java内存模型的主要目标就是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的细节。</p>\n<p>JMM中规定所有的变量都存储在主内存（Main Memory）中，每条线程都有自己的工作内存（Work Memory），线程的工作内存中保存了该线程所使用的变量的从主内存中拷贝的副本。线程对于变量的读、写都必须在工作内存中进行，而不能直接读、写主内存中的变量。同时，本线程的工作内存的变量也无法被其他线程直接访问，必须通过主内存完成<br>整体内存模型如下：<br><img src=\"/volatile/01.png\" alt=\"image-20201210103251475\"></p>\n<h3 id=\"4-1-synchronized\"><a href=\"#4-1-synchronized\" class=\"headerlink\" title=\"4.1 synchronized\"></a>4.1 synchronized</h3><p>synchronized关键字的语义JMM（Java Main Memory）有两个规定，保证其实现内存可见性：<br>    - <strong>线程解锁前，必须把共享变量的最新值刷新到主内存中</strong><br>    - <strong>线程加锁前，将清空工作内存中共享变量的值，从主内存中重新取值</strong></p>\n<h3 id=\"4-2-volatile\"><a href=\"#4-2-volatile\" class=\"headerlink\" title=\"4.2 volatile\"></a>4.2 volatile</h3><ul>\n<li>当对volatile变量执行写操作后，JMM会把工作内存中的最新变量值强制刷新到主内存</li>\n<li>写操作会导致其他线程中的缓存无效<br>这样，其他线程使用缓存时，发现本地工作内存中此变量无效，便从主内存中获取，这样获取到的变量便是最新的值，实现了线程的可见性。</li>\n</ul>\n"},{"title":"在线修改静态文件","comments":1,"abbrlink":35817,"date":"2021-05-13T05:40:44.000Z","translate_title":"static-file-modify-online","_content":"项目运行时，如果需要修改某个css、js、html等文件的时候，需要自己连接到服务器然后修改，更有甚者需要连接vpn、堡垒机等等，特别烦！！！！于是弄了一个在线修改静态文件的工具，在此记录一下。\n#### 1. 引入pom\n\n```xml\n<dependency>\n  \t<groupId>com.github.xiaoyuge5201</groupId>\n  \t<artifactId>static-file-modify-online</artifactId>\n  \t<version>1.2.1</version>\n</dependency>\n```\n#### 2. 添加前后台代码\n前台使用的是thymeleaf，根据自己项目的实际情况修改！\n```txt\n链接: https://pan.baidu.com/s/1oW38vpj74yKOOtbu5xGCOQ  \n密码: tcmg\n```","source":"_posts/2021/07/在线修改静态文件.md","raw":"---\ntitle: 在线修改静态文件\ntags: java\ncategories: java\ncomments: true\nabbrlink: 35817\ndate: 2021-05-13 13:40:44\ntranslate_title: static-file-modify-online\n---\n项目运行时，如果需要修改某个css、js、html等文件的时候，需要自己连接到服务器然后修改，更有甚者需要连接vpn、堡垒机等等，特别烦！！！！于是弄了一个在线修改静态文件的工具，在此记录一下。\n#### 1. 引入pom\n\n```xml\n<dependency>\n  \t<groupId>com.github.xiaoyuge5201</groupId>\n  \t<artifactId>static-file-modify-online</artifactId>\n  \t<version>1.2.1</version>\n</dependency>\n```\n#### 2. 添加前后台代码\n前台使用的是thymeleaf，根据自己项目的实际情况修改！\n```txt\n链接: https://pan.baidu.com/s/1oW38vpj74yKOOtbu5xGCOQ  \n密码: tcmg\n```","slug":"在线修改静态文件","published":1,"updated":"2022-04-17T03:47:28.555Z","layout":"post","photos":[],"link":"","_id":"cl424hx63003tad5igsgn8j8n","content":"<p>项目运行时，如果需要修改某个css、js、html等文件的时候，需要自己连接到服务器然后修改，更有甚者需要连接vpn、堡垒机等等，特别烦！！！！于是弄了一个在线修改静态文件的工具，在此记录一下。</p>\n<h4 id=\"1-引入pom\"><a href=\"#1-引入pom\" class=\"headerlink\" title=\"1. 引入pom\"></a>1. 引入pom</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.xiaoyuge5201<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>static-file-modify-online<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-添加前后台代码\"><a href=\"#2-添加前后台代码\" class=\"headerlink\" title=\"2. 添加前后台代码\"></a>2. 添加前后台代码</h4><p>前台使用的是thymeleaf，根据自己项目的实际情况修改！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">链接: https://pan.baidu.com/s/1oW38vpj74yKOOtbu5xGCOQ  </span><br><span class=\"line\">密码: tcmg</span><br></pre></td></tr></table></figure>","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>项目运行时，如果需要修改某个css、js、html等文件的时候，需要自己连接到服务器然后修改，更有甚者需要连接vpn、堡垒机等等，特别烦！！！！于是弄了一个在线修改静态文件的工具，在此记录一下。</p>\n<h4 id=\"1-引入pom\"><a href=\"#1-引入pom\" class=\"headerlink\" title=\"1. 引入pom\"></a>1. 引入pom</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.xiaoyuge5201<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>static-file-modify-online<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-添加前后台代码\"><a href=\"#2-添加前后台代码\" class=\"headerlink\" title=\"2. 添加前后台代码\"></a>2. 添加前后台代码</h4><p>前台使用的是thymeleaf，根据自己项目的实际情况修改！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">链接: https://pan.baidu.com/s/1oW38vpj74yKOOtbu5xGCOQ  </span><br><span class=\"line\">密码: tcmg</span><br></pre></td></tr></table></figure>"},{"title":"安装Centos系统以及配置IP","comments":1,"abbrlink":23533,"date":"2021-10-01T08:47:11.000Z","translate_title":"installing-centOS-system-and-configuring-IP","_content":"\n## 1. 系统安装\n1. 安装\n    ![](Installing-CentOS-system/1.png)\n   \n2. 选择语言\n    ![](Installing-CentOS-system/2.png)\n\n3. 设置时区以及软件安装\n    ![](Installing-CentOS-system/3.png)\n   \n4. 选择GNOME桌面，开发工具。然后点击左上角的完成\n   ![](Installing-CentOS-system/4.png)\n\n5. 配置分区，选址本地标准磁盘，并且在分区中勾选\"我要配置分区\",\"我想让额外空间可用\"；初学者可以使用自动配置分区\n   ![](Installing-CentOS-system/5.png)\n   \n6. 开始安装\n   ![](Installing-CentOS-system/6.png)\n\n7. 设置Root账户\n   ![](Installing-CentOS-system/7.png) \n   \n8. 等待安装成功,安装成功后会提示重启；\n   ![](Installing-CentOS-system/8.png) \n   \n\n## 2. 永久关闭防火墙\n\n```shell\n一、下面是red hat/CentOs7关闭防火墙的命令!\n#1:查看防火状态\nsystemctl status firewalld\nservice iptables status\n\n#2:暂时关闭防火墙\nsystemctl stop firewalld\nservice iptables stop\n\n#3:永久关闭防火墙\nsystemctl disable firewalld\nchkconfig iptables off\n\n#4:重启防火墙\n\nsystemctl enable firewalld\nservice iptables restart\n```\n## 3. 配置SELinux\nSELinux是Linux 内核中提供的强制访问控制系统。selinux有disabled、permissive、enforcing 三种选择：\n- disabled ：不启用控制系统。\n- permissive：开启控制系统，但是处于警告模式。即使你违反了策略的话它让你继续操作，但是把你的违反的内容记录下来。\n- Enforcing：开启控制系统，处于强制状态。一旦违反了策略，就无法继续操作下去\n\n使用命令：\n```shell\ncd /etc/sysconfig/\nvim selinux\n```\n![](Installing-CentOS-system/3-1.png) \n\n## 4.修改ip配置文件\n1. 进入文件目录\n    ```shell\n    cd /etc/sysconfig/network-scripts/   #进入配置文件\n    ```\n    ![](Installing-CentOS-system/4-1.png) \n\n2. 写入配置信息并保存退出\n    ```shell\n    vim ifcfg-ens33 #编辑配置文件ifcfg-ens33\n    ```\n    如果要设置固定IP的话，常见设置属性有：BOOTPROTO、ONBOOT、IPADDR、NETMASK、GATEWAY\n    ```yaml\n    #以下为配置文件的内容\n    TYPE=\"Ethernet\"\t\t#网卡类型（通常是Ethemet以太网）\n    PROXY_METHOD=\"none\"\t#代理方式：为关闭状态\n    BROWSER_ONLY=\"no\"\t#只是浏览器：否\n    BOOTPROTO=\"static\"\t#网卡的引导协议【static：静态IP(指定静态后IP地址就固定了,不建议采用动态分配)  dhcp：动态IP   none：不指定，不指定容易出现各种各样的网络受限】\n    DEFROUTE=\"yes\"\t\t#默认路由\n    IPV4_FAILURE_FATAL=\"no\"\t\t#是否开启IPV4致命错误检测\n    IPV6INIT=\"yes\"\t\t#IPV6是否自动初始化：是（现在还未用到IPV6，不会有任何影响）\n    IPV6_AUTOCONF=\"yes\"\t#IPV6是否自动配置：是（现在还未用到IPV6，不会有任何影响）\n    IPV6_DEFROUTE=\"yes\"\t#IPV6是否可以为默认路由：是（现在还未用到IPV6，不会有任何影响）\n    IPV6_FAILURE_FATAL=\"no\"\t\t#是否开启IPV6致命错误检测\n    IPV6_ADDR_GEN_MODE=\"stable-privacy\"\t#IPV6地址生成模型\n    NAME=\"ens33\"\t\t#网卡物理设备名称\n    UUID=\"ab60d501-535b-49f5-a76b-3336a4120f64\" #通用唯一识别码，每一个网卡都会有，不能重复，否则两台linux机器只有一台可上网,可不写\n    DEVICE=\"ens33\"\t\t#网卡设备名称，必须和‘NAME’值一样\n    ONBOOT=\"yes\"\t\t#是否开机启动(如果yes则开机后自动加载使用当前配置文件)，要想网卡开机就启动或通过 `systemctl restart network`控制网卡,必须设置为 `yes`\n    IPADDR=192.168.1.111\t\t# 本机IP 设置固定IP 对应上面的BOOTPROTO\n    NETMASK=255.255.255.0\t\t#子网掩码 ,可不写\n    GATEWAY=192.168.137.2\t\t#默认网关 ,可不写\n    DNS1=8.8.8.8 # 可不写\n    DNS2=8.8.8.5 # 可不写\n    ZONE=public # 可不写\n    ```\n\n3. 重启网络服务\n    ```shell\n    service network restart  #重启网卡\n    ```\n    ![](Installing-CentOS-system/4-2.png) \n\n4. 查看IP\n    ```shell\n    ip addr\n    ```\n    ![](Installing-CentOS-system/4-3.png) \n\n5. 重启系统\n    ```shell\n    reboot\n    ```\n\n\n\n   \n\n   \n\n\n","source":"_posts/2021/10/Installing-CentOS-system.md","raw":"---\ntitle: 安装Centos系统以及配置IP\ncomments: true\ntags: linux\ncategories: linux\nabbrlink: 23533\ndate: 2021-10-01 16:47:11\ntranslate_title: installing-centOS-system-and-configuring-IP\n---\n\n## 1. 系统安装\n1. 安装\n    ![](Installing-CentOS-system/1.png)\n   \n2. 选择语言\n    ![](Installing-CentOS-system/2.png)\n\n3. 设置时区以及软件安装\n    ![](Installing-CentOS-system/3.png)\n   \n4. 选择GNOME桌面，开发工具。然后点击左上角的完成\n   ![](Installing-CentOS-system/4.png)\n\n5. 配置分区，选址本地标准磁盘，并且在分区中勾选\"我要配置分区\",\"我想让额外空间可用\"；初学者可以使用自动配置分区\n   ![](Installing-CentOS-system/5.png)\n   \n6. 开始安装\n   ![](Installing-CentOS-system/6.png)\n\n7. 设置Root账户\n   ![](Installing-CentOS-system/7.png) \n   \n8. 等待安装成功,安装成功后会提示重启；\n   ![](Installing-CentOS-system/8.png) \n   \n\n## 2. 永久关闭防火墙\n\n```shell\n一、下面是red hat/CentOs7关闭防火墙的命令!\n#1:查看防火状态\nsystemctl status firewalld\nservice iptables status\n\n#2:暂时关闭防火墙\nsystemctl stop firewalld\nservice iptables stop\n\n#3:永久关闭防火墙\nsystemctl disable firewalld\nchkconfig iptables off\n\n#4:重启防火墙\n\nsystemctl enable firewalld\nservice iptables restart\n```\n## 3. 配置SELinux\nSELinux是Linux 内核中提供的强制访问控制系统。selinux有disabled、permissive、enforcing 三种选择：\n- disabled ：不启用控制系统。\n- permissive：开启控制系统，但是处于警告模式。即使你违反了策略的话它让你继续操作，但是把你的违反的内容记录下来。\n- Enforcing：开启控制系统，处于强制状态。一旦违反了策略，就无法继续操作下去\n\n使用命令：\n```shell\ncd /etc/sysconfig/\nvim selinux\n```\n![](Installing-CentOS-system/3-1.png) \n\n## 4.修改ip配置文件\n1. 进入文件目录\n    ```shell\n    cd /etc/sysconfig/network-scripts/   #进入配置文件\n    ```\n    ![](Installing-CentOS-system/4-1.png) \n\n2. 写入配置信息并保存退出\n    ```shell\n    vim ifcfg-ens33 #编辑配置文件ifcfg-ens33\n    ```\n    如果要设置固定IP的话，常见设置属性有：BOOTPROTO、ONBOOT、IPADDR、NETMASK、GATEWAY\n    ```yaml\n    #以下为配置文件的内容\n    TYPE=\"Ethernet\"\t\t#网卡类型（通常是Ethemet以太网）\n    PROXY_METHOD=\"none\"\t#代理方式：为关闭状态\n    BROWSER_ONLY=\"no\"\t#只是浏览器：否\n    BOOTPROTO=\"static\"\t#网卡的引导协议【static：静态IP(指定静态后IP地址就固定了,不建议采用动态分配)  dhcp：动态IP   none：不指定，不指定容易出现各种各样的网络受限】\n    DEFROUTE=\"yes\"\t\t#默认路由\n    IPV4_FAILURE_FATAL=\"no\"\t\t#是否开启IPV4致命错误检测\n    IPV6INIT=\"yes\"\t\t#IPV6是否自动初始化：是（现在还未用到IPV6，不会有任何影响）\n    IPV6_AUTOCONF=\"yes\"\t#IPV6是否自动配置：是（现在还未用到IPV6，不会有任何影响）\n    IPV6_DEFROUTE=\"yes\"\t#IPV6是否可以为默认路由：是（现在还未用到IPV6，不会有任何影响）\n    IPV6_FAILURE_FATAL=\"no\"\t\t#是否开启IPV6致命错误检测\n    IPV6_ADDR_GEN_MODE=\"stable-privacy\"\t#IPV6地址生成模型\n    NAME=\"ens33\"\t\t#网卡物理设备名称\n    UUID=\"ab60d501-535b-49f5-a76b-3336a4120f64\" #通用唯一识别码，每一个网卡都会有，不能重复，否则两台linux机器只有一台可上网,可不写\n    DEVICE=\"ens33\"\t\t#网卡设备名称，必须和‘NAME’值一样\n    ONBOOT=\"yes\"\t\t#是否开机启动(如果yes则开机后自动加载使用当前配置文件)，要想网卡开机就启动或通过 `systemctl restart network`控制网卡,必须设置为 `yes`\n    IPADDR=192.168.1.111\t\t# 本机IP 设置固定IP 对应上面的BOOTPROTO\n    NETMASK=255.255.255.0\t\t#子网掩码 ,可不写\n    GATEWAY=192.168.137.2\t\t#默认网关 ,可不写\n    DNS1=8.8.8.8 # 可不写\n    DNS2=8.8.8.5 # 可不写\n    ZONE=public # 可不写\n    ```\n\n3. 重启网络服务\n    ```shell\n    service network restart  #重启网卡\n    ```\n    ![](Installing-CentOS-system/4-2.png) \n\n4. 查看IP\n    ```shell\n    ip addr\n    ```\n    ![](Installing-CentOS-system/4-3.png) \n\n5. 重启系统\n    ```shell\n    reboot\n    ```\n\n\n\n   \n\n   \n\n\n","slug":"Installing-CentOS-system","published":1,"updated":"2022-03-29T06:26:02.010Z","layout":"post","photos":[],"link":"","_id":"cl424hx64003vad5i9xwb4dor","content":"<h2 id=\"1-系统安装\"><a href=\"#1-系统安装\" class=\"headerlink\" title=\"1. 系统安装\"></a>1. 系统安装</h2><ol>\n<li><p>安装<br> <img src=\"/Installing-CentOS-system/1.png\"></p>\n</li>\n<li><p>选择语言<br> <img src=\"/Installing-CentOS-system/2.png\"></p>\n</li>\n<li><p>设置时区以及软件安装<br> <img src=\"/Installing-CentOS-system/3.png\"></p>\n</li>\n<li><p>选择GNOME桌面，开发工具。然后点击左上角的完成<br><img src=\"/Installing-CentOS-system/4.png\"></p>\n</li>\n<li><p>配置分区，选址本地标准磁盘，并且在分区中勾选”我要配置分区”,”我想让额外空间可用”；初学者可以使用自动配置分区<br><img src=\"/Installing-CentOS-system/5.png\"></p>\n</li>\n<li><p>开始安装<br><img src=\"/Installing-CentOS-system/6.png\"></p>\n</li>\n<li><p>设置Root账户<br><img src=\"/Installing-CentOS-system/7.png\"> </p>\n</li>\n<li><p>等待安装成功,安装成功后会提示重启；<br><img src=\"/Installing-CentOS-system/8.png\"> </p>\n</li>\n</ol>\n<h2 id=\"2-永久关闭防火墙\"><a href=\"#2-永久关闭防火墙\" class=\"headerlink\" title=\"2. 永久关闭防火墙\"></a>2. 永久关闭防火墙</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一、下面是red hat/CentOs7关闭防火墙的命令!</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1:查看防火状态</span></span><br><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\">service iptables status</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2:暂时关闭防火墙</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">service iptables stop</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3:永久关闭防火墙</span></span><br><span class=\"line\">systemctl disable firewalld</span><br><span class=\"line\">chkconfig iptables off</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">4:重启防火墙</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl enable firewalld</span><br><span class=\"line\">service iptables restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-配置SELinux\"><a href=\"#3-配置SELinux\" class=\"headerlink\" title=\"3. 配置SELinux\"></a>3. 配置SELinux</h2><p>SELinux是Linux 内核中提供的强制访问控制系统。selinux有disabled、permissive、enforcing 三种选择：</p>\n<ul>\n<li>disabled ：不启用控制系统。</li>\n<li>permissive：开启控制系统，但是处于警告模式。即使你违反了策略的话它让你继续操作，但是把你的违反的内容记录下来。</li>\n<li>Enforcing：开启控制系统，处于强制状态。一旦违反了策略，就无法继续操作下去</li>\n</ul>\n<p>使用命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/sysconfig/</span><br><span class=\"line\">vim selinux</span><br></pre></td></tr></table></figure>\n<p><img src=\"/Installing-CentOS-system/3-1.png\"> </p>\n<h2 id=\"4-修改ip配置文件\"><a href=\"#4-修改ip配置文件\" class=\"headerlink\" title=\"4.修改ip配置文件\"></a>4.修改ip配置文件</h2><ol>\n<li><p>进入文件目录</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/sysconfig/network-scripts/   #进入配置文件</span><br></pre></td></tr></table></figure>\n<p> <img src=\"/Installing-CentOS-system/4-1.png\"> </p>\n</li>\n<li><p>写入配置信息并保存退出</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ifcfg-ens33 #编辑配置文件ifcfg-ens33</span><br></pre></td></tr></table></figure>\n<p> 如果要设置固定IP的话，常见设置属性有：BOOTPROTO、ONBOOT、IPADDR、NETMASK、GATEWAY</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#以下为配置文件的内容</span></span><br><span class=\"line\"><span class=\"string\">TYPE=&quot;Ethernet&quot;</span>\t\t<span class=\"comment\">#网卡类型（通常是Ethemet以太网）</span></span><br><span class=\"line\"><span class=\"string\">PROXY_METHOD=&quot;none&quot;</span>\t<span class=\"comment\">#代理方式：为关闭状态</span></span><br><span class=\"line\"><span class=\"string\">BROWSER_ONLY=&quot;no&quot;</span>\t<span class=\"comment\">#只是浏览器：否</span></span><br><span class=\"line\"><span class=\"string\">BOOTPROTO=&quot;static&quot;</span>\t<span class=\"comment\">#网卡的引导协议【static：静态IP(指定静态后IP地址就固定了,不建议采用动态分配)  dhcp：动态IP   none：不指定，不指定容易出现各种各样的网络受限】</span></span><br><span class=\"line\"><span class=\"string\">DEFROUTE=&quot;yes&quot;</span>\t\t<span class=\"comment\">#默认路由</span></span><br><span class=\"line\"><span class=\"string\">IPV4_FAILURE_FATAL=&quot;no&quot;</span>\t\t<span class=\"comment\">#是否开启IPV4致命错误检测</span></span><br><span class=\"line\"><span class=\"string\">IPV6INIT=&quot;yes&quot;</span>\t\t<span class=\"comment\">#IPV6是否自动初始化：是（现在还未用到IPV6，不会有任何影响）</span></span><br><span class=\"line\"><span class=\"string\">IPV6_AUTOCONF=&quot;yes&quot;</span>\t<span class=\"comment\">#IPV6是否自动配置：是（现在还未用到IPV6，不会有任何影响）</span></span><br><span class=\"line\"><span class=\"string\">IPV6_DEFROUTE=&quot;yes&quot;</span>\t<span class=\"comment\">#IPV6是否可以为默认路由：是（现在还未用到IPV6，不会有任何影响）</span></span><br><span class=\"line\"><span class=\"string\">IPV6_FAILURE_FATAL=&quot;no&quot;</span>\t\t<span class=\"comment\">#是否开启IPV6致命错误检测</span></span><br><span class=\"line\"><span class=\"string\">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span>\t<span class=\"comment\">#IPV6地址生成模型</span></span><br><span class=\"line\"><span class=\"string\">NAME=&quot;ens33&quot;</span>\t\t<span class=\"comment\">#网卡物理设备名称</span></span><br><span class=\"line\"><span class=\"string\">UUID=&quot;ab60d501-535b-49f5-a76b-3336a4120f64&quot;</span> <span class=\"comment\">#通用唯一识别码，每一个网卡都会有，不能重复，否则两台linux机器只有一台可上网,可不写</span></span><br><span class=\"line\"><span class=\"string\">DEVICE=&quot;ens33&quot;</span>\t\t<span class=\"comment\">#网卡设备名称，必须和‘NAME’值一样</span></span><br><span class=\"line\"><span class=\"string\">ONBOOT=&quot;yes&quot;</span>\t\t<span class=\"comment\">#是否开机启动(如果yes则开机后自动加载使用当前配置文件)，要想网卡开机就启动或通过 `systemctl restart network`控制网卡,必须设置为 `yes`</span></span><br><span class=\"line\"><span class=\"string\">IPADDR=192.168.1.111</span>\t\t<span class=\"comment\"># 本机IP 设置固定IP 对应上面的BOOTPROTO</span></span><br><span class=\"line\"><span class=\"string\">NETMASK=255.255.255.0</span>\t\t<span class=\"comment\">#子网掩码 ,可不写</span></span><br><span class=\"line\"><span class=\"string\">GATEWAY=192.168.137.2</span>\t\t<span class=\"comment\">#默认网关 ,可不写</span></span><br><span class=\"line\"><span class=\"string\">DNS1=8.8.8.8</span> <span class=\"comment\"># 可不写</span></span><br><span class=\"line\"><span class=\"string\">DNS2=8.8.8.5</span> <span class=\"comment\"># 可不写</span></span><br><span class=\"line\"><span class=\"string\">ZONE=public</span> <span class=\"comment\"># 可不写</span></span><br></pre></td></tr></table></figure></li>\n<li><p>重启网络服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service network restart  #重启网卡</span><br></pre></td></tr></table></figure>\n<p> <img src=\"/Installing-CentOS-system/4-2.png\"> </p>\n</li>\n<li><p>查看IP</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr</span><br></pre></td></tr></table></figure>\n<p> <img src=\"/Installing-CentOS-system/4-3.png\"> </p>\n</li>\n<li><p>重启系统</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h2 id=\"1-系统安装\"><a href=\"#1-系统安装\" class=\"headerlink\" title=\"1. 系统安装\"></a>1. 系统安装</h2><ol>\n<li><p>安装<br> <img src=\"/Installing-CentOS-system/1.png\"></p>\n</li>\n<li><p>选择语言<br> <img src=\"/Installing-CentOS-system/2.png\"></p>\n</li>\n<li><p>设置时区以及软件安装<br> <img src=\"/Installing-CentOS-system/3.png\"></p>\n</li>\n<li><p>选择GNOME桌面，开发工具。然后点击左上角的完成<br><img src=\"/Installing-CentOS-system/4.png\"></p>\n</li>\n<li><p>配置分区，选址本地标准磁盘，并且在分区中勾选”我要配置分区”,”我想让额外空间可用”；初学者可以使用自动配置分区<br><img src=\"/Installing-CentOS-system/5.png\"></p>\n</li>\n<li><p>开始安装<br><img src=\"/Installing-CentOS-system/6.png\"></p>\n</li>\n<li><p>设置Root账户<br><img src=\"/Installing-CentOS-system/7.png\"> </p>\n</li>\n<li><p>等待安装成功,安装成功后会提示重启；<br><img src=\"/Installing-CentOS-system/8.png\"> </p>\n</li>\n</ol>\n<h2 id=\"2-永久关闭防火墙\"><a href=\"#2-永久关闭防火墙\" class=\"headerlink\" title=\"2. 永久关闭防火墙\"></a>2. 永久关闭防火墙</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一、下面是red hat/CentOs7关闭防火墙的命令!</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1:查看防火状态</span></span><br><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\">service iptables status</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2:暂时关闭防火墙</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">service iptables stop</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3:永久关闭防火墙</span></span><br><span class=\"line\">systemctl disable firewalld</span><br><span class=\"line\">chkconfig iptables off</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">4:重启防火墙</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl enable firewalld</span><br><span class=\"line\">service iptables restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-配置SELinux\"><a href=\"#3-配置SELinux\" class=\"headerlink\" title=\"3. 配置SELinux\"></a>3. 配置SELinux</h2><p>SELinux是Linux 内核中提供的强制访问控制系统。selinux有disabled、permissive、enforcing 三种选择：</p>\n<ul>\n<li>disabled ：不启用控制系统。</li>\n<li>permissive：开启控制系统，但是处于警告模式。即使你违反了策略的话它让你继续操作，但是把你的违反的内容记录下来。</li>\n<li>Enforcing：开启控制系统，处于强制状态。一旦违反了策略，就无法继续操作下去</li>\n</ul>\n<p>使用命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/sysconfig/</span><br><span class=\"line\">vim selinux</span><br></pre></td></tr></table></figure>\n<p><img src=\"/Installing-CentOS-system/3-1.png\"> </p>\n<h2 id=\"4-修改ip配置文件\"><a href=\"#4-修改ip配置文件\" class=\"headerlink\" title=\"4.修改ip配置文件\"></a>4.修改ip配置文件</h2><ol>\n<li><p>进入文件目录</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/sysconfig/network-scripts/   #进入配置文件</span><br></pre></td></tr></table></figure>\n<p> <img src=\"/Installing-CentOS-system/4-1.png\"> </p>\n</li>\n<li><p>写入配置信息并保存退出</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ifcfg-ens33 #编辑配置文件ifcfg-ens33</span><br></pre></td></tr></table></figure>\n<p> 如果要设置固定IP的话，常见设置属性有：BOOTPROTO、ONBOOT、IPADDR、NETMASK、GATEWAY</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#以下为配置文件的内容</span></span><br><span class=\"line\"><span class=\"string\">TYPE=&quot;Ethernet&quot;</span>\t\t<span class=\"comment\">#网卡类型（通常是Ethemet以太网）</span></span><br><span class=\"line\"><span class=\"string\">PROXY_METHOD=&quot;none&quot;</span>\t<span class=\"comment\">#代理方式：为关闭状态</span></span><br><span class=\"line\"><span class=\"string\">BROWSER_ONLY=&quot;no&quot;</span>\t<span class=\"comment\">#只是浏览器：否</span></span><br><span class=\"line\"><span class=\"string\">BOOTPROTO=&quot;static&quot;</span>\t<span class=\"comment\">#网卡的引导协议【static：静态IP(指定静态后IP地址就固定了,不建议采用动态分配)  dhcp：动态IP   none：不指定，不指定容易出现各种各样的网络受限】</span></span><br><span class=\"line\"><span class=\"string\">DEFROUTE=&quot;yes&quot;</span>\t\t<span class=\"comment\">#默认路由</span></span><br><span class=\"line\"><span class=\"string\">IPV4_FAILURE_FATAL=&quot;no&quot;</span>\t\t<span class=\"comment\">#是否开启IPV4致命错误检测</span></span><br><span class=\"line\"><span class=\"string\">IPV6INIT=&quot;yes&quot;</span>\t\t<span class=\"comment\">#IPV6是否自动初始化：是（现在还未用到IPV6，不会有任何影响）</span></span><br><span class=\"line\"><span class=\"string\">IPV6_AUTOCONF=&quot;yes&quot;</span>\t<span class=\"comment\">#IPV6是否自动配置：是（现在还未用到IPV6，不会有任何影响）</span></span><br><span class=\"line\"><span class=\"string\">IPV6_DEFROUTE=&quot;yes&quot;</span>\t<span class=\"comment\">#IPV6是否可以为默认路由：是（现在还未用到IPV6，不会有任何影响）</span></span><br><span class=\"line\"><span class=\"string\">IPV6_FAILURE_FATAL=&quot;no&quot;</span>\t\t<span class=\"comment\">#是否开启IPV6致命错误检测</span></span><br><span class=\"line\"><span class=\"string\">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span>\t<span class=\"comment\">#IPV6地址生成模型</span></span><br><span class=\"line\"><span class=\"string\">NAME=&quot;ens33&quot;</span>\t\t<span class=\"comment\">#网卡物理设备名称</span></span><br><span class=\"line\"><span class=\"string\">UUID=&quot;ab60d501-535b-49f5-a76b-3336a4120f64&quot;</span> <span class=\"comment\">#通用唯一识别码，每一个网卡都会有，不能重复，否则两台linux机器只有一台可上网,可不写</span></span><br><span class=\"line\"><span class=\"string\">DEVICE=&quot;ens33&quot;</span>\t\t<span class=\"comment\">#网卡设备名称，必须和‘NAME’值一样</span></span><br><span class=\"line\"><span class=\"string\">ONBOOT=&quot;yes&quot;</span>\t\t<span class=\"comment\">#是否开机启动(如果yes则开机后自动加载使用当前配置文件)，要想网卡开机就启动或通过 `systemctl restart network`控制网卡,必须设置为 `yes`</span></span><br><span class=\"line\"><span class=\"string\">IPADDR=192.168.1.111</span>\t\t<span class=\"comment\"># 本机IP 设置固定IP 对应上面的BOOTPROTO</span></span><br><span class=\"line\"><span class=\"string\">NETMASK=255.255.255.0</span>\t\t<span class=\"comment\">#子网掩码 ,可不写</span></span><br><span class=\"line\"><span class=\"string\">GATEWAY=192.168.137.2</span>\t\t<span class=\"comment\">#默认网关 ,可不写</span></span><br><span class=\"line\"><span class=\"string\">DNS1=8.8.8.8</span> <span class=\"comment\"># 可不写</span></span><br><span class=\"line\"><span class=\"string\">DNS2=8.8.8.5</span> <span class=\"comment\"># 可不写</span></span><br><span class=\"line\"><span class=\"string\">ZONE=public</span> <span class=\"comment\"># 可不写</span></span><br></pre></td></tr></table></figure></li>\n<li><p>重启网络服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service network restart  #重启网卡</span><br></pre></td></tr></table></figure>\n<p> <img src=\"/Installing-CentOS-system/4-2.png\"> </p>\n</li>\n<li><p>查看IP</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr</span><br></pre></td></tr></table></figure>\n<p> <img src=\"/Installing-CentOS-system/4-3.png\"> </p>\n</li>\n<li><p>重启系统</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Java中将List列表转换为字符串","comments":1,"abbrlink":28733,"date":"2021-10-10T09:48:19.000Z","translate_title":"list_to_string","_content":"\n### 1. toString() 方法\nList.toString()是最简单的，但它在开头和结尾添加方括号，每个字符串用逗号分隔符分隔。\n缺点是我们不能用另一个分隔符替换逗号，也不能去掉方括号\n```java\npublic class ListToStringUsingToStringExample {\n\n    public static void main(String args) {\n        \n    // creating a list with strings.\n    List<String> list = Arrays.asList(\"One\",\n                      \"Two\",\n                      \"Three\",\n                      \"Four\",\n                      \"Five\");\n    \n    // converting List<String> to String using toString() method\n    String stringFromList = list.toString();\n    \n    // priting the string\n    System.out.println(\"String : \"+stringFromList);        \n    }\n}\n// 输出：String : [One, Two, Three, Four, Five]\n```\n\n### 2. Java 8 String.join() \njava 8 String添加了一个特殊的方法String.join()以将集合转换为具有给定分隔符的字符串\n```java\npublic class ListToStringUsingString_JoinExample {\n\n    public static void main(String args) {\n        // creating a list with strings.\n        List<String> list = Arrays.asList(\"One\",\n                          \"Two\",\n                          \"Three\",\n                          \"Four\",\n                          \"Five\");\n        \n        // converting List<String> to String using toString() method\n        String stringFromList = String.join(\"~\", list);\n        \n        // priting the string\n        System.out.println(\"String with tilde delimiter: \"+stringFromList);\n        \n        // delimiting with pipe | symbol.\n        String stringPipe = String.join(\"|\", list);\n        \n        // printing\n        System.out.println(\"String with pipe delimiter : \"+stringPipe);\n    \n    }\n}\n//输出：\n//  String with tilde delimiter: One~Two~Three~Four~Five\n//  String with pipe delimiter : One|Two|Three|Four|Five\n```\n\n### 3. Collectors.joining() \nCollectors.join()方法来自 java 8 stream api。Collctors.joining()方法将分隔符、前缀和后缀作为参数。此方法将列表转换为具有给定分隔符、前缀和后缀的字符串。\n\n查看以下有关使用不同分隔符的 join() 方法的示例。但是，String.join() 方法不提供前缀和后缀选项。\n```java\npublic class ListToStringUsingString_JoinExample {\n\n    public static void main(String args) {\n        // creating a list with strings.\n        List<String> list = Arrays.asList(\"One\",\n                          \"Two\",\n                          \"Three\",\n                          \"Four\",\n                          \"Five\");\n    \n        // using java 8 Collectors.joining with delimiter, prefix and suffix\n        String joiningString = list.stream().collect(Collectors.joining(\"-\", \"{\", \"}\"));\n        // printing\n        System.out.println(\"Collectors.joining string : \"+joiningString);\n        String joiningString3 = list.stream().collect(Collectors.joining(\"@\", \"\", \"\"));\n        // printing\n        System.out.println(\"Collectors.joining string with @ separator : \"+joiningString3);\n    \n    \n    }\n}\n//输出：\n//Collectors.joining string : {One-Two-Three-Four-Five}\n//Collectors.joining string with @ separator : One@Two@Three@Four@Five\n```\n### 4. Apache Commons StringUtils.join() \n使用来自 apache commons 包的外部库。该库有一个方法StringUtils.join() ，它采用类似于 String.join() 方法的列表和分隔符\n```java\npublic class ListToStringUsingStringUtils_JoinExample {\n\n    public static void main(String args) {\n        // creating a list with strings.\n        List<String> list = Arrays.asList(\"One\",\n                          \"Two\",\n                          \"Three\",\n                          \"Four\",\n                          \"Five\");\n    \n        // using java 8 Collectors.joining with delimiter, prefix and suffix\n        String joiningString = StringUtils.join(list, \"^\");\n        \n        // printing\n        System.out.println(\"StringUtils.join string with ^ delimiter : \"+joiningString);\n        \n        String joiningString3 = StringUtils.join(list, \"$\");\n        \n        // printing\n        System.out.println(\"StringUtils.join string with @ separator : \"+joiningString3);\n    }\n}\n//输出：\n//  StringUtils.join string with ^ delimiter : One^Two^Three^Four^Five\n//  StringUtils.join string with @ separator : One$Two$Three$Four$Five\n```","source":"_posts/2021/10/list-to-string.md","raw":"---\ntitle: Java中将List列表转换为字符串\ncomments: true\ntags: 集合\nabbrlink: 28733\ndate: 2021-10-10 17:48:19\ncategories: java\ntranslate_title: list_to_string\n---\n\n### 1. toString() 方法\nList.toString()是最简单的，但它在开头和结尾添加方括号，每个字符串用逗号分隔符分隔。\n缺点是我们不能用另一个分隔符替换逗号，也不能去掉方括号\n```java\npublic class ListToStringUsingToStringExample {\n\n    public static void main(String args) {\n        \n    // creating a list with strings.\n    List<String> list = Arrays.asList(\"One\",\n                      \"Two\",\n                      \"Three\",\n                      \"Four\",\n                      \"Five\");\n    \n    // converting List<String> to String using toString() method\n    String stringFromList = list.toString();\n    \n    // priting the string\n    System.out.println(\"String : \"+stringFromList);        \n    }\n}\n// 输出：String : [One, Two, Three, Four, Five]\n```\n\n### 2. Java 8 String.join() \njava 8 String添加了一个特殊的方法String.join()以将集合转换为具有给定分隔符的字符串\n```java\npublic class ListToStringUsingString_JoinExample {\n\n    public static void main(String args) {\n        // creating a list with strings.\n        List<String> list = Arrays.asList(\"One\",\n                          \"Two\",\n                          \"Three\",\n                          \"Four\",\n                          \"Five\");\n        \n        // converting List<String> to String using toString() method\n        String stringFromList = String.join(\"~\", list);\n        \n        // priting the string\n        System.out.println(\"String with tilde delimiter: \"+stringFromList);\n        \n        // delimiting with pipe | symbol.\n        String stringPipe = String.join(\"|\", list);\n        \n        // printing\n        System.out.println(\"String with pipe delimiter : \"+stringPipe);\n    \n    }\n}\n//输出：\n//  String with tilde delimiter: One~Two~Three~Four~Five\n//  String with pipe delimiter : One|Two|Three|Four|Five\n```\n\n### 3. Collectors.joining() \nCollectors.join()方法来自 java 8 stream api。Collctors.joining()方法将分隔符、前缀和后缀作为参数。此方法将列表转换为具有给定分隔符、前缀和后缀的字符串。\n\n查看以下有关使用不同分隔符的 join() 方法的示例。但是，String.join() 方法不提供前缀和后缀选项。\n```java\npublic class ListToStringUsingString_JoinExample {\n\n    public static void main(String args) {\n        // creating a list with strings.\n        List<String> list = Arrays.asList(\"One\",\n                          \"Two\",\n                          \"Three\",\n                          \"Four\",\n                          \"Five\");\n    \n        // using java 8 Collectors.joining with delimiter, prefix and suffix\n        String joiningString = list.stream().collect(Collectors.joining(\"-\", \"{\", \"}\"));\n        // printing\n        System.out.println(\"Collectors.joining string : \"+joiningString);\n        String joiningString3 = list.stream().collect(Collectors.joining(\"@\", \"\", \"\"));\n        // printing\n        System.out.println(\"Collectors.joining string with @ separator : \"+joiningString3);\n    \n    \n    }\n}\n//输出：\n//Collectors.joining string : {One-Two-Three-Four-Five}\n//Collectors.joining string with @ separator : One@Two@Three@Four@Five\n```\n### 4. Apache Commons StringUtils.join() \n使用来自 apache commons 包的外部库。该库有一个方法StringUtils.join() ，它采用类似于 String.join() 方法的列表和分隔符\n```java\npublic class ListToStringUsingStringUtils_JoinExample {\n\n    public static void main(String args) {\n        // creating a list with strings.\n        List<String> list = Arrays.asList(\"One\",\n                          \"Two\",\n                          \"Three\",\n                          \"Four\",\n                          \"Five\");\n    \n        // using java 8 Collectors.joining with delimiter, prefix and suffix\n        String joiningString = StringUtils.join(list, \"^\");\n        \n        // printing\n        System.out.println(\"StringUtils.join string with ^ delimiter : \"+joiningString);\n        \n        String joiningString3 = StringUtils.join(list, \"$\");\n        \n        // printing\n        System.out.println(\"StringUtils.join string with @ separator : \"+joiningString3);\n    }\n}\n//输出：\n//  StringUtils.join string with ^ delimiter : One^Two^Three^Four^Five\n//  StringUtils.join string with @ separator : One$Two$Three$Four$Five\n```","slug":"list-to-string","published":1,"updated":"2022-03-27T14:06:03.359Z","layout":"post","photos":[],"link":"","_id":"cl424hx65003zad5iavcpgbqk","content":"<h3 id=\"1-toString-方法\"><a href=\"#1-toString-方法\" class=\"headerlink\" title=\"1. toString() 方法\"></a>1. toString() 方法</h3><p>List.toString()是最简单的，但它在开头和结尾添加方括号，每个字符串用逗号分隔符分隔。<br>缺点是我们不能用另一个分隔符替换逗号，也不能去掉方括号</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListToStringUsingToStringExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// creating a list with strings.</span></span><br><span class=\"line\">    List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;One&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;Two&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;Three&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;Four&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;Five&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// converting List&lt;String&gt; to String using toString() method</span></span><br><span class=\"line\">    String stringFromList = list.toString();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// priting the string</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;String : &quot;</span>+stringFromList);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：String : [One, Two, Three, Four, Five]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Java-8-String-join\"><a href=\"#2-Java-8-String-join\" class=\"headerlink\" title=\"2. Java 8 String.join()\"></a>2. Java 8 String.join()</h3><p>java 8 String添加了一个特殊的方法String.join()以将集合转换为具有给定分隔符的字符串</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListToStringUsingString_JoinExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// creating a list with strings.</span></span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;One&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Two&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Three&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Four&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Five&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// converting List&lt;String&gt; to String using toString() method</span></span><br><span class=\"line\">        String stringFromList = String.join(<span class=\"string\">&quot;~&quot;</span>, list);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// priting the string</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;String with tilde delimiter: &quot;</span>+stringFromList);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// delimiting with pipe | symbol.</span></span><br><span class=\"line\">        String stringPipe = String.join(<span class=\"string\">&quot;|&quot;</span>, list);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;String with pipe delimiter : &quot;</span>+stringPipe);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：</span></span><br><span class=\"line\"><span class=\"comment\">//  String with tilde delimiter: One~Two~Three~Four~Five</span></span><br><span class=\"line\"><span class=\"comment\">//  String with pipe delimiter : One|Two|Three|Four|Five</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Collectors-joining\"><a href=\"#3-Collectors-joining\" class=\"headerlink\" title=\"3. Collectors.joining()\"></a>3. Collectors.joining()</h3><p>Collectors.join()方法来自 java 8 stream api。Collctors.joining()方法将分隔符、前缀和后缀作为参数。此方法将列表转换为具有给定分隔符、前缀和后缀的字符串。</p>\n<p>查看以下有关使用不同分隔符的 join() 方法的示例。但是，String.join() 方法不提供前缀和后缀选项。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListToStringUsingString_JoinExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// creating a list with strings.</span></span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;One&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Two&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Three&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Four&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Five&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// using java 8 Collectors.joining with delimiter, prefix and suffix</span></span><br><span class=\"line\">        String joiningString = list.stream().collect(Collectors.joining(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;&#123;&quot;</span>, <span class=\"string\">&quot;&#125;&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Collectors.joining string : &quot;</span>+joiningString);</span><br><span class=\"line\">        String joiningString3 = list.stream().collect(Collectors.joining(<span class=\"string\">&quot;@&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Collectors.joining string with @ separator : &quot;</span>+joiningString3);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：</span></span><br><span class=\"line\"><span class=\"comment\">//Collectors.joining string : &#123;One-Two-Three-Four-Five&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//Collectors.joining string with @ separator : One@Two@Three@Four@Five</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-Apache-Commons-StringUtils-join\"><a href=\"#4-Apache-Commons-StringUtils-join\" class=\"headerlink\" title=\"4. Apache Commons StringUtils.join()\"></a>4. Apache Commons StringUtils.join()</h3><p>使用来自 apache commons 包的外部库。该库有一个方法StringUtils.join() ，它采用类似于 String.join() 方法的列表和分隔符</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListToStringUsingStringUtils_JoinExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// creating a list with strings.</span></span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;One&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Two&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Three&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Four&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Five&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// using java 8 Collectors.joining with delimiter, prefix and suffix</span></span><br><span class=\"line\">        String joiningString = StringUtils.join(list, <span class=\"string\">&quot;^&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;StringUtils.join string with ^ delimiter : &quot;</span>+joiningString);</span><br><span class=\"line\">        </span><br><span class=\"line\">        String joiningString3 = StringUtils.join(list, <span class=\"string\">&quot;$&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;StringUtils.join string with @ separator : &quot;</span>+joiningString3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：</span></span><br><span class=\"line\"><span class=\"comment\">//  StringUtils.join string with ^ delimiter : One^Two^Three^Four^Five</span></span><br><span class=\"line\"><span class=\"comment\">//  StringUtils.join string with @ separator : One$Two$Three$Four$Five</span></span><br></pre></td></tr></table></figure>","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h3 id=\"1-toString-方法\"><a href=\"#1-toString-方法\" class=\"headerlink\" title=\"1. toString() 方法\"></a>1. toString() 方法</h3><p>List.toString()是最简单的，但它在开头和结尾添加方括号，每个字符串用逗号分隔符分隔。<br>缺点是我们不能用另一个分隔符替换逗号，也不能去掉方括号</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListToStringUsingToStringExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// creating a list with strings.</span></span><br><span class=\"line\">    List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;One&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;Two&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;Three&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;Four&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;Five&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// converting List&lt;String&gt; to String using toString() method</span></span><br><span class=\"line\">    String stringFromList = list.toString();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// priting the string</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;String : &quot;</span>+stringFromList);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：String : [One, Two, Three, Four, Five]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Java-8-String-join\"><a href=\"#2-Java-8-String-join\" class=\"headerlink\" title=\"2. Java 8 String.join()\"></a>2. Java 8 String.join()</h3><p>java 8 String添加了一个特殊的方法String.join()以将集合转换为具有给定分隔符的字符串</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListToStringUsingString_JoinExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// creating a list with strings.</span></span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;One&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Two&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Three&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Four&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Five&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// converting List&lt;String&gt; to String using toString() method</span></span><br><span class=\"line\">        String stringFromList = String.join(<span class=\"string\">&quot;~&quot;</span>, list);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// priting the string</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;String with tilde delimiter: &quot;</span>+stringFromList);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// delimiting with pipe | symbol.</span></span><br><span class=\"line\">        String stringPipe = String.join(<span class=\"string\">&quot;|&quot;</span>, list);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;String with pipe delimiter : &quot;</span>+stringPipe);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：</span></span><br><span class=\"line\"><span class=\"comment\">//  String with tilde delimiter: One~Two~Three~Four~Five</span></span><br><span class=\"line\"><span class=\"comment\">//  String with pipe delimiter : One|Two|Three|Four|Five</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Collectors-joining\"><a href=\"#3-Collectors-joining\" class=\"headerlink\" title=\"3. Collectors.joining()\"></a>3. Collectors.joining()</h3><p>Collectors.join()方法来自 java 8 stream api。Collctors.joining()方法将分隔符、前缀和后缀作为参数。此方法将列表转换为具有给定分隔符、前缀和后缀的字符串。</p>\n<p>查看以下有关使用不同分隔符的 join() 方法的示例。但是，String.join() 方法不提供前缀和后缀选项。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListToStringUsingString_JoinExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// creating a list with strings.</span></span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;One&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Two&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Three&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Four&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Five&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// using java 8 Collectors.joining with delimiter, prefix and suffix</span></span><br><span class=\"line\">        String joiningString = list.stream().collect(Collectors.joining(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;&#123;&quot;</span>, <span class=\"string\">&quot;&#125;&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Collectors.joining string : &quot;</span>+joiningString);</span><br><span class=\"line\">        String joiningString3 = list.stream().collect(Collectors.joining(<span class=\"string\">&quot;@&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Collectors.joining string with @ separator : &quot;</span>+joiningString3);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：</span></span><br><span class=\"line\"><span class=\"comment\">//Collectors.joining string : &#123;One-Two-Three-Four-Five&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//Collectors.joining string with @ separator : One@Two@Three@Four@Five</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-Apache-Commons-StringUtils-join\"><a href=\"#4-Apache-Commons-StringUtils-join\" class=\"headerlink\" title=\"4. Apache Commons StringUtils.join()\"></a>4. Apache Commons StringUtils.join()</h3><p>使用来自 apache commons 包的外部库。该库有一个方法StringUtils.join() ，它采用类似于 String.join() 方法的列表和分隔符</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListToStringUsingStringUtils_JoinExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// creating a list with strings.</span></span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;One&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Two&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Three&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Four&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Five&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// using java 8 Collectors.joining with delimiter, prefix and suffix</span></span><br><span class=\"line\">        String joiningString = StringUtils.join(list, <span class=\"string\">&quot;^&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;StringUtils.join string with ^ delimiter : &quot;</span>+joiningString);</span><br><span class=\"line\">        </span><br><span class=\"line\">        String joiningString3 = StringUtils.join(list, <span class=\"string\">&quot;$&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;StringUtils.join string with @ separator : &quot;</span>+joiningString3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：</span></span><br><span class=\"line\"><span class=\"comment\">//  StringUtils.join string with ^ delimiter : One^Two^Three^Four^Five</span></span><br><span class=\"line\"><span class=\"comment\">//  StringUtils.join string with @ separator : One$Two$Three$Four$Five</span></span><br></pre></td></tr></table></figure>"},{"title":"linux关机命令","comments":1,"abbrlink":2292,"date":"2021-10-02T03:39:17.000Z","translate_title":"Linux-shutdown-command","_content":"\n### 1. shutdown命令\n\nshutdown会给系统计划一个时间关机。它可以被用于停止、关机、重启机器。\n你可以指定一个时间字符串（通常是 now或者用hh:mm 指定小时/分钟）作为第一个参数。\n\nshutdown命令示例：\n```shell\nshutdown\n\nshutdown now  #立即关机\n\nshutdown 13:20  # 下午13：20关机\n\nshutdown -p now  ### 关闭机器\n\nshutdown -H now  ### 停止机器      \n\nshutdown -r09:35 ### 在 09:35am 重启机器\n\nshutdown -c  ## 取消关机\n```\n\n### 2. halt 命令\n\nhalt通知硬件来停止所有的 CPU 功能，但是仍然保持通电。你可以用它使系统处于低层维护状态。\n注意在有些情况会它会完全关闭系统。\n\nhalt 命令示例：\n```shell\nhalt             ### 停止机器\n\nhalt -p          ### 关闭机器\n\nhalt --reboot    ### 重启机器\n```\n\n### 3.poweroff 命令\npoweroff会发送一个 ACPI 信号来通知系统关机\n\n```shell\npoweroff           ### 关闭机器\n\npoweroff --halt    ### 停止机器\n\npoweroff --reboot  ### 重启机器\n```\n\n### 4.reboot 命令\n\nreboot 通知系统重启。\n```shell\nreboot           ### 重启机器\n\nreboot --halt    ### 停止机器\n\nreboot -p        ### 关闭机器\n```\n\n### 5. init 命令\n一. init是Linux系统操作中不可缺少的程序之一。\n所谓的init进程，它是一个由内核启动的用户级进程。\n内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。所以,init始终是第一个进程（其进程编号始终为1）。\n内核会在过去曾使用过init的几个地方查找它，它的正确位置（对Linux系统来说）是/sbin/init。如果内核找不到init，它就会试着运行/bin/sh，如果运行失败，系统的启动也会失败。\n\n二. init一共分为7个级别，这7个级别的所代表的含义如下\n\n0：停机或者关机（千万不能将initdefault设置为0）\n\n1：单用户模式，只root用户进行维护\n\n2：多用户模式，不能使用NFS(Net File System)\n\n3：完全多用户模式（标准的运行级别）\n\n4：安全模式\n\n5：图形化（即图形界面）\n\n6：重启（千万不要把initdefault设置为6）\n","source":"_posts/2021/10/shutdown.md","raw":"---\ntitle: linux关机命令\ncomments: true\ntags: shutdown\ncategories: linux\nabbrlink: 2292\ndate: 2021-10-02 11:39:17\ntranslate_title: Linux-shutdown-command\n---\n\n### 1. shutdown命令\n\nshutdown会给系统计划一个时间关机。它可以被用于停止、关机、重启机器。\n你可以指定一个时间字符串（通常是 now或者用hh:mm 指定小时/分钟）作为第一个参数。\n\nshutdown命令示例：\n```shell\nshutdown\n\nshutdown now  #立即关机\n\nshutdown 13:20  # 下午13：20关机\n\nshutdown -p now  ### 关闭机器\n\nshutdown -H now  ### 停止机器      \n\nshutdown -r09:35 ### 在 09:35am 重启机器\n\nshutdown -c  ## 取消关机\n```\n\n### 2. halt 命令\n\nhalt通知硬件来停止所有的 CPU 功能，但是仍然保持通电。你可以用它使系统处于低层维护状态。\n注意在有些情况会它会完全关闭系统。\n\nhalt 命令示例：\n```shell\nhalt             ### 停止机器\n\nhalt -p          ### 关闭机器\n\nhalt --reboot    ### 重启机器\n```\n\n### 3.poweroff 命令\npoweroff会发送一个 ACPI 信号来通知系统关机\n\n```shell\npoweroff           ### 关闭机器\n\npoweroff --halt    ### 停止机器\n\npoweroff --reboot  ### 重启机器\n```\n\n### 4.reboot 命令\n\nreboot 通知系统重启。\n```shell\nreboot           ### 重启机器\n\nreboot --halt    ### 停止机器\n\nreboot -p        ### 关闭机器\n```\n\n### 5. init 命令\n一. init是Linux系统操作中不可缺少的程序之一。\n所谓的init进程，它是一个由内核启动的用户级进程。\n内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。所以,init始终是第一个进程（其进程编号始终为1）。\n内核会在过去曾使用过init的几个地方查找它，它的正确位置（对Linux系统来说）是/sbin/init。如果内核找不到init，它就会试着运行/bin/sh，如果运行失败，系统的启动也会失败。\n\n二. init一共分为7个级别，这7个级别的所代表的含义如下\n\n0：停机或者关机（千万不能将initdefault设置为0）\n\n1：单用户模式，只root用户进行维护\n\n2：多用户模式，不能使用NFS(Net File System)\n\n3：完全多用户模式（标准的运行级别）\n\n4：安全模式\n\n5：图形化（即图形界面）\n\n6：重启（千万不要把initdefault设置为6）\n","slug":"shutdown","published":1,"updated":"2022-03-27T14:06:03.482Z","layout":"post","photos":[],"link":"","_id":"cl424hx660042ad5i8nw66np8","content":"<h3 id=\"1-shutdown命令\"><a href=\"#1-shutdown命令\" class=\"headerlink\" title=\"1. shutdown命令\"></a>1. shutdown命令</h3><p>shutdown会给系统计划一个时间关机。它可以被用于停止、关机、重启机器。<br>你可以指定一个时间字符串（通常是 now或者用hh:mm 指定小时/分钟）作为第一个参数。</p>\n<p>shutdown命令示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shutdown</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown now  #立即关机</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown 13:20  # 下午13：20关机</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown -p now  ### 关闭机器</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown -H now  ### 停止机器      </span><br><span class=\"line\"></span><br><span class=\"line\">shutdown -r09:35 ### 在 09:35am 重启机器</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown -c  ## 取消关机</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-halt-命令\"><a href=\"#2-halt-命令\" class=\"headerlink\" title=\"2. halt 命令\"></a>2. halt 命令</h3><p>halt通知硬件来停止所有的 CPU 功能，但是仍然保持通电。你可以用它使系统处于低层维护状态。<br>注意在有些情况会它会完全关闭系统。</p>\n<p>halt 命令示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">halt             ### 停止机器</span><br><span class=\"line\"></span><br><span class=\"line\">halt -p          ### 关闭机器</span><br><span class=\"line\"></span><br><span class=\"line\">halt --reboot    ### 重启机器</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-poweroff-命令\"><a href=\"#3-poweroff-命令\" class=\"headerlink\" title=\"3.poweroff 命令\"></a>3.poweroff 命令</h3><p>poweroff会发送一个 ACPI 信号来通知系统关机</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poweroff           ### 关闭机器</span><br><span class=\"line\"></span><br><span class=\"line\">poweroff --halt    ### 停止机器</span><br><span class=\"line\"></span><br><span class=\"line\">poweroff --reboot  ### 重启机器</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-reboot-命令\"><a href=\"#4-reboot-命令\" class=\"headerlink\" title=\"4.reboot 命令\"></a>4.reboot 命令</h3><p>reboot 通知系统重启。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot           ### 重启机器</span><br><span class=\"line\"></span><br><span class=\"line\">reboot --halt    ### 停止机器</span><br><span class=\"line\"></span><br><span class=\"line\">reboot -p        ### 关闭机器</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-init-命令\"><a href=\"#5-init-命令\" class=\"headerlink\" title=\"5. init 命令\"></a>5. init 命令</h3><p>一. init是Linux系统操作中不可缺少的程序之一。<br>所谓的init进程，它是一个由内核启动的用户级进程。<br>内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。所以,init始终是第一个进程（其进程编号始终为1）。<br>内核会在过去曾使用过init的几个地方查找它，它的正确位置（对Linux系统来说）是/sbin/init。如果内核找不到init，它就会试着运行/bin/sh，如果运行失败，系统的启动也会失败。</p>\n<p>二. init一共分为7个级别，这7个级别的所代表的含义如下</p>\n<p>0：停机或者关机（千万不能将initdefault设置为0）</p>\n<p>1：单用户模式，只root用户进行维护</p>\n<p>2：多用户模式，不能使用NFS(Net File System)</p>\n<p>3：完全多用户模式（标准的运行级别）</p>\n<p>4：安全模式</p>\n<p>5：图形化（即图形界面）</p>\n<p>6：重启（千万不要把initdefault设置为6）</p>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h3 id=\"1-shutdown命令\"><a href=\"#1-shutdown命令\" class=\"headerlink\" title=\"1. shutdown命令\"></a>1. shutdown命令</h3><p>shutdown会给系统计划一个时间关机。它可以被用于停止、关机、重启机器。<br>你可以指定一个时间字符串（通常是 now或者用hh:mm 指定小时/分钟）作为第一个参数。</p>\n<p>shutdown命令示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shutdown</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown now  #立即关机</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown 13:20  # 下午13：20关机</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown -p now  ### 关闭机器</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown -H now  ### 停止机器      </span><br><span class=\"line\"></span><br><span class=\"line\">shutdown -r09:35 ### 在 09:35am 重启机器</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown -c  ## 取消关机</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-halt-命令\"><a href=\"#2-halt-命令\" class=\"headerlink\" title=\"2. halt 命令\"></a>2. halt 命令</h3><p>halt通知硬件来停止所有的 CPU 功能，但是仍然保持通电。你可以用它使系统处于低层维护状态。<br>注意在有些情况会它会完全关闭系统。</p>\n<p>halt 命令示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">halt             ### 停止机器</span><br><span class=\"line\"></span><br><span class=\"line\">halt -p          ### 关闭机器</span><br><span class=\"line\"></span><br><span class=\"line\">halt --reboot    ### 重启机器</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-poweroff-命令\"><a href=\"#3-poweroff-命令\" class=\"headerlink\" title=\"3.poweroff 命令\"></a>3.poweroff 命令</h3><p>poweroff会发送一个 ACPI 信号来通知系统关机</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poweroff           ### 关闭机器</span><br><span class=\"line\"></span><br><span class=\"line\">poweroff --halt    ### 停止机器</span><br><span class=\"line\"></span><br><span class=\"line\">poweroff --reboot  ### 重启机器</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-reboot-命令\"><a href=\"#4-reboot-命令\" class=\"headerlink\" title=\"4.reboot 命令\"></a>4.reboot 命令</h3><p>reboot 通知系统重启。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot           ### 重启机器</span><br><span class=\"line\"></span><br><span class=\"line\">reboot --halt    ### 停止机器</span><br><span class=\"line\"></span><br><span class=\"line\">reboot -p        ### 关闭机器</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-init-命令\"><a href=\"#5-init-命令\" class=\"headerlink\" title=\"5. init 命令\"></a>5. init 命令</h3><p>一. init是Linux系统操作中不可缺少的程序之一。<br>所谓的init进程，它是一个由内核启动的用户级进程。<br>内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。所以,init始终是第一个进程（其进程编号始终为1）。<br>内核会在过去曾使用过init的几个地方查找它，它的正确位置（对Linux系统来说）是/sbin/init。如果内核找不到init，它就会试着运行/bin/sh，如果运行失败，系统的启动也会失败。</p>\n<p>二. init一共分为7个级别，这7个级别的所代表的含义如下</p>\n<p>0：停机或者关机（千万不能将initdefault设置为0）</p>\n<p>1：单用户模式，只root用户进行维护</p>\n<p>2：多用户模式，不能使用NFS(Net File System)</p>\n<p>3：完全多用户模式（标准的运行级别）</p>\n<p>4：安全模式</p>\n<p>5：图形化（即图形界面）</p>\n<p>6：重启（千万不要把initdefault设置为6）</p>\n"},{"title":"LockSupport一个很灵活的线程工具类","comments":1,"translate_title":"locksupport-learning","abbrlink":41846,"date":"2021-09-25T04:59:36.000Z","_content":"LockSupport是一个编程工具类， 主要是为了阻塞和唤醒线程用的。所有的方法都是静态方法，可以让线程在任意位置阻塞，也可以在任意位置唤醒\n\n主要的方法： park(阻塞线程)  和  unpark(启动唤醒线程)\n```java\n//源码\npackage java.util.concurrent.locks;\nimport sun.misc.Unsafe;\n \npublic class LockSupport {\n    private LockSupport() {} // Cannot be instantiated.\n\n    private static void setBlocker(Thread t, Object arg) {\n        // Even though volatile, hotspot doesn't need a write barrier here.\n        UNSAFE.putObject(t, parkBlockerOffset, arg);\n    }\n\n    /**\n     * @param thread the thread to unpark, or {@code null}, in which case\n     *        this operation has no effect\n     */\n    public static void unpark(Thread thread) {\n        if (thread != null)\n            UNSAFE.unpark(thread);\n    }\n\n    /**\n     * 阻塞当前线程\n     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。\n     * @param blocker the synchronization object responsible for this\n     *        thread parking\n     * @since 1.6\n     */\n    public static void park(Object blocker) {\n        Thread t = Thread.currentThread();\n        //setBlocker作用是记录t线程是被broker阻塞的\n        setBlocker(t, blocker);\n        //UNSAFE是一个非常强大的类，他的的操作是基于底层的\n        UNSAFE.park(false, 0L);\n        setBlocker(t, null);\n    }\n\n    /**\n     * 暂停当前线程，有超时时间\n     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。\n     * @param blocker the synchronization object responsible for this\n     *        thread parking\n     * @param nanos the maximum number of nanoseconds to wait\n     * @since 1.6\n     */\n    public static void parkNanos(Object blocker, long nanos) {\n        if (nanos > 0) {\n            Thread t = Thread.currentThread();\n            setBlocker(t, blocker);\n            UNSAFE.park(false, nanos);\n            setBlocker(t, null);\n        }\n    }\n\n    /**\n     * 暂停当前线程，知道某个时间\n     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。\n     * @param blocker the synchronization object responsible for this\n     *        thread parking\n     * @param deadline the absolute time, in milliseconds from the Epoch,\n     *        to wait until\n     * @since 1.6\n     */\n    public static void parkUntil(Object blocker, long deadline) {\n        Thread t = Thread.currentThread();\n        setBlocker(t, blocker);\n        UNSAFE.park(true, deadline);\n        setBlocker(t, null);\n    }\n\n    /**\n     * Returns the blocker object supplied to the most recent\n     * invocation of a park method that has not yet unblocked, or null\n     * if not blocked.  The value returned is just a momentary\n     * snapshot -- the thread may have since unblocked or blocked on a\n     * different blocker object.\n     *\n     * @param t the thread\n     * @return the blocker\n     * @throws NullPointerException if argument is null\n     * @since 1.6\n     */\n    public static Object getBlocker(Thread t) {\n        if (t == null)\n            throw new NullPointerException();\n        return UNSAFE.getObjectVolatile(t, parkBlockerOffset);\n    }\n\n    /**\n     * 无期限暂停当前线程\n     */\n    public static void park() {\n        UNSAFE.park(false, 0L);\n    }\n\n    /**\n     * 暂停当前线程，不过有超时时间限制\n     */\n    public static void parkNanos(long nanos) {\n        if (nanos > 0)\n            UNSAFE.park(false, nanos);\n    }\n\n    /**\n     * 暂停当前线程，知道某个时间\n     * @param deadline 暂停结束时间\n     */\n    public static void parkUntil(long deadline) {\n        UNSAFE.park(true, deadline);\n    }\n\n    /**\n     * Returns the pseudo-randomly initialized or updated secondary seed.\n     * Copied from ThreadLocalRandom due to package access restrictions.\n     */\n    static final int nextSecondarySeed() {\n        int r;\n        Thread t = Thread.currentThread();\n        if ((r = UNSAFE.getInt(t, SECONDARY)) != 0) {\n            r ^= r << 13;   // xorshift\n            r ^= r >>> 17;\n            r ^= r << 5;\n        }\n        else if ((r = java.util.concurrent.ThreadLocalRandom.current().nextInt()) == 0)\n            r = 1; // avoid zero\n        UNSAFE.putInt(t, SECONDARY, r);\n        return r;\n    }\n\n    // Hotspot implementation via intrinsics API\n    private static final sun.misc.Unsafe UNSAFE;\n    private static final long parkBlockerOffset;\n    private static final long SEED;\n    private static final long PROBE;\n    private static final long SECONDARY;\n    static {\n        try {\n            UNSAFE = sun.misc.Unsafe.getUnsafe();\n            Class<?> tk = Thread.class;\n            parkBlockerOffset = UNSAFE.objectFieldOffset\n                (tk.getDeclaredField(\"parkBlocker\"));\n            SEED = UNSAFE.objectFieldOffset\n                (tk.getDeclaredField(\"threadLocalRandomSeed\"));\n            PROBE = UNSAFE.objectFieldOffset\n                (tk.getDeclaredField(\"threadLocalRandomProbe\"));\n            SECONDARY = UNSAFE.objectFieldOffset\n                (tk.getDeclaredField(\"threadLocalRandomSecondarySeed\"));\n        } catch (Exception ex) { throw new Error(ex); }\n    }\n}\n\n```\n### 与wait / notify对比\nLockSupport是用来阻塞和环线线程的，wait/notify同样也是，那么两者的区别是什么？\n- wait和notify都是Object中的方法，在调用这两个方法前必须获得锁对象，但是park不需要获取某个对象的锁就可以锁住线程\n- notify只能随机选择一个线程唤醒，无法唤醒指定的线程，unpark可以唤醒一个指定的线程\n\n### LockSupport使用\n#### 1. 先interrupt在park\n```java\npublic class LockSupportTest {\n\n    public static class MyThread extends  Thread{\n        @Override\n        public void run() {\n            System.out.println(getName() + \"进入线程\");\n            LockSupport.park();\n            System.out.println(\"运行结束\");\n            System.out.println(\"是否中断：\"+Thread.currentThread().isInterrupted());\n        }\n    }\n\n    public static void main(String[] args) {\n        MyThread thread = new MyThread();\n        thread.start();\n        System.out.println(\"线程启动了，但是在内部进行了park\");\n        thread.interrupt();\n        System.out.println(\"main 线程结束\");\n    }\n}\n//输出\n//       线程启动了，但是在内部进行了park\n//       main 线程结束\n//       Thread-0进入线程\n//       运行结束\n```\n#### 2. 先park在interrupt\n```java\npublic static class MyThread extends  Thread{\n    @Override\n    public void run() {\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(getName() + \"进入线程\");\n        LockSupport.park();\n        System.out.println(\"运行结束\");\n    }\n}\n/**\n * 输出：\n * 线程启动了，但是在内部进行了park\n * main 线程结束\n * Thread-0进入线程\n * 运行结束\n */\n```\n\n### 趣味题\n用两个线程，一个输出字母，一个输出数字交替输出如：1A2B3C4D...\n```java\npublic class ThreadDemoTest {\n    static Thread t1 = null, t2 = null;\n    public static void main(String[] args) {\n        char[] a = \"1234567\".toCharArray();\n        char[] b = \"ABCDEFG\".toCharArray();\n\n        t1 = new Thread(() -> {\n            for (char i : a) {\n                System.out.print(i);\n                LockSupport.unpark(t2);\n                LockSupport.park();\n            }\n        }, \"t1\");\n\n        t2 = new Thread(() -> {\n            for (char i : b) {\n                LockSupport.park();\n                System.out.print(i);\n                LockSupport.unpark(t1);\n            }\n        }, \"t1\");\n        t1.start();\n        t2.start();\n    }\n}\n//输出：  1A2B3C4D5E6F7G\n```\n使用自旋锁也可以实现上面的结果\n```java\npublic class CasTest {\n    //定义枚举，包含两个变量\n    enum ReadyToRun{T1, T2};\n\n    static volatile ReadyToRun r = ReadyToRun.T1;\n\n    public static void main(String[] args) {\n\n        char[] a = \"1234567\".toCharArray();\n        char[] b = \"ABCDEFG\".toCharArray();\n\n        new Thread(()->{\n            for (char c : a){\n                //当r不为T1时， 空转占着cpu等待，然后输出字符，将r的值设置为T2\n                while (r != ReadyToRun.T1){}\n                System.out.print(c+\" \");\n                r = ReadyToRun.T2;\n            }\n        },\"t1\").start();\n        new Thread(()->{\n            for (char c : b){\n                while (r != ReadyToRun.T2){}\n                System.out.print(c+\" \");\n                r = ReadyToRun.T1;\n            }\n        },\"t2\").start();\n    }\n}\n```\n\n","source":"_posts/2021/09/locksupport.md","raw":"---\ntitle: LockSupport一个很灵活的线程工具类\ncomments: true\ntags: thread\ncategories: java\ntranslate_title: locksupport-learning\nabbrlink: 41846\ndate: 2021-09-25 12:59:36\n---\nLockSupport是一个编程工具类， 主要是为了阻塞和唤醒线程用的。所有的方法都是静态方法，可以让线程在任意位置阻塞，也可以在任意位置唤醒\n\n主要的方法： park(阻塞线程)  和  unpark(启动唤醒线程)\n```java\n//源码\npackage java.util.concurrent.locks;\nimport sun.misc.Unsafe;\n \npublic class LockSupport {\n    private LockSupport() {} // Cannot be instantiated.\n\n    private static void setBlocker(Thread t, Object arg) {\n        // Even though volatile, hotspot doesn't need a write barrier here.\n        UNSAFE.putObject(t, parkBlockerOffset, arg);\n    }\n\n    /**\n     * @param thread the thread to unpark, or {@code null}, in which case\n     *        this operation has no effect\n     */\n    public static void unpark(Thread thread) {\n        if (thread != null)\n            UNSAFE.unpark(thread);\n    }\n\n    /**\n     * 阻塞当前线程\n     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。\n     * @param blocker the synchronization object responsible for this\n     *        thread parking\n     * @since 1.6\n     */\n    public static void park(Object blocker) {\n        Thread t = Thread.currentThread();\n        //setBlocker作用是记录t线程是被broker阻塞的\n        setBlocker(t, blocker);\n        //UNSAFE是一个非常强大的类，他的的操作是基于底层的\n        UNSAFE.park(false, 0L);\n        setBlocker(t, null);\n    }\n\n    /**\n     * 暂停当前线程，有超时时间\n     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。\n     * @param blocker the synchronization object responsible for this\n     *        thread parking\n     * @param nanos the maximum number of nanoseconds to wait\n     * @since 1.6\n     */\n    public static void parkNanos(Object blocker, long nanos) {\n        if (nanos > 0) {\n            Thread t = Thread.currentThread();\n            setBlocker(t, blocker);\n            UNSAFE.park(false, nanos);\n            setBlocker(t, null);\n        }\n    }\n\n    /**\n     * 暂停当前线程，知道某个时间\n     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。\n     * @param blocker the synchronization object responsible for this\n     *        thread parking\n     * @param deadline the absolute time, in milliseconds from the Epoch,\n     *        to wait until\n     * @since 1.6\n     */\n    public static void parkUntil(Object blocker, long deadline) {\n        Thread t = Thread.currentThread();\n        setBlocker(t, blocker);\n        UNSAFE.park(true, deadline);\n        setBlocker(t, null);\n    }\n\n    /**\n     * Returns the blocker object supplied to the most recent\n     * invocation of a park method that has not yet unblocked, or null\n     * if not blocked.  The value returned is just a momentary\n     * snapshot -- the thread may have since unblocked or blocked on a\n     * different blocker object.\n     *\n     * @param t the thread\n     * @return the blocker\n     * @throws NullPointerException if argument is null\n     * @since 1.6\n     */\n    public static Object getBlocker(Thread t) {\n        if (t == null)\n            throw new NullPointerException();\n        return UNSAFE.getObjectVolatile(t, parkBlockerOffset);\n    }\n\n    /**\n     * 无期限暂停当前线程\n     */\n    public static void park() {\n        UNSAFE.park(false, 0L);\n    }\n\n    /**\n     * 暂停当前线程，不过有超时时间限制\n     */\n    public static void parkNanos(long nanos) {\n        if (nanos > 0)\n            UNSAFE.park(false, nanos);\n    }\n\n    /**\n     * 暂停当前线程，知道某个时间\n     * @param deadline 暂停结束时间\n     */\n    public static void parkUntil(long deadline) {\n        UNSAFE.park(true, deadline);\n    }\n\n    /**\n     * Returns the pseudo-randomly initialized or updated secondary seed.\n     * Copied from ThreadLocalRandom due to package access restrictions.\n     */\n    static final int nextSecondarySeed() {\n        int r;\n        Thread t = Thread.currentThread();\n        if ((r = UNSAFE.getInt(t, SECONDARY)) != 0) {\n            r ^= r << 13;   // xorshift\n            r ^= r >>> 17;\n            r ^= r << 5;\n        }\n        else if ((r = java.util.concurrent.ThreadLocalRandom.current().nextInt()) == 0)\n            r = 1; // avoid zero\n        UNSAFE.putInt(t, SECONDARY, r);\n        return r;\n    }\n\n    // Hotspot implementation via intrinsics API\n    private static final sun.misc.Unsafe UNSAFE;\n    private static final long parkBlockerOffset;\n    private static final long SEED;\n    private static final long PROBE;\n    private static final long SECONDARY;\n    static {\n        try {\n            UNSAFE = sun.misc.Unsafe.getUnsafe();\n            Class<?> tk = Thread.class;\n            parkBlockerOffset = UNSAFE.objectFieldOffset\n                (tk.getDeclaredField(\"parkBlocker\"));\n            SEED = UNSAFE.objectFieldOffset\n                (tk.getDeclaredField(\"threadLocalRandomSeed\"));\n            PROBE = UNSAFE.objectFieldOffset\n                (tk.getDeclaredField(\"threadLocalRandomProbe\"));\n            SECONDARY = UNSAFE.objectFieldOffset\n                (tk.getDeclaredField(\"threadLocalRandomSecondarySeed\"));\n        } catch (Exception ex) { throw new Error(ex); }\n    }\n}\n\n```\n### 与wait / notify对比\nLockSupport是用来阻塞和环线线程的，wait/notify同样也是，那么两者的区别是什么？\n- wait和notify都是Object中的方法，在调用这两个方法前必须获得锁对象，但是park不需要获取某个对象的锁就可以锁住线程\n- notify只能随机选择一个线程唤醒，无法唤醒指定的线程，unpark可以唤醒一个指定的线程\n\n### LockSupport使用\n#### 1. 先interrupt在park\n```java\npublic class LockSupportTest {\n\n    public static class MyThread extends  Thread{\n        @Override\n        public void run() {\n            System.out.println(getName() + \"进入线程\");\n            LockSupport.park();\n            System.out.println(\"运行结束\");\n            System.out.println(\"是否中断：\"+Thread.currentThread().isInterrupted());\n        }\n    }\n\n    public static void main(String[] args) {\n        MyThread thread = new MyThread();\n        thread.start();\n        System.out.println(\"线程启动了，但是在内部进行了park\");\n        thread.interrupt();\n        System.out.println(\"main 线程结束\");\n    }\n}\n//输出\n//       线程启动了，但是在内部进行了park\n//       main 线程结束\n//       Thread-0进入线程\n//       运行结束\n```\n#### 2. 先park在interrupt\n```java\npublic static class MyThread extends  Thread{\n    @Override\n    public void run() {\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(getName() + \"进入线程\");\n        LockSupport.park();\n        System.out.println(\"运行结束\");\n    }\n}\n/**\n * 输出：\n * 线程启动了，但是在内部进行了park\n * main 线程结束\n * Thread-0进入线程\n * 运行结束\n */\n```\n\n### 趣味题\n用两个线程，一个输出字母，一个输出数字交替输出如：1A2B3C4D...\n```java\npublic class ThreadDemoTest {\n    static Thread t1 = null, t2 = null;\n    public static void main(String[] args) {\n        char[] a = \"1234567\".toCharArray();\n        char[] b = \"ABCDEFG\".toCharArray();\n\n        t1 = new Thread(() -> {\n            for (char i : a) {\n                System.out.print(i);\n                LockSupport.unpark(t2);\n                LockSupport.park();\n            }\n        }, \"t1\");\n\n        t2 = new Thread(() -> {\n            for (char i : b) {\n                LockSupport.park();\n                System.out.print(i);\n                LockSupport.unpark(t1);\n            }\n        }, \"t1\");\n        t1.start();\n        t2.start();\n    }\n}\n//输出：  1A2B3C4D5E6F7G\n```\n使用自旋锁也可以实现上面的结果\n```java\npublic class CasTest {\n    //定义枚举，包含两个变量\n    enum ReadyToRun{T1, T2};\n\n    static volatile ReadyToRun r = ReadyToRun.T1;\n\n    public static void main(String[] args) {\n\n        char[] a = \"1234567\".toCharArray();\n        char[] b = \"ABCDEFG\".toCharArray();\n\n        new Thread(()->{\n            for (char c : a){\n                //当r不为T1时， 空转占着cpu等待，然后输出字符，将r的值设置为T2\n                while (r != ReadyToRun.T1){}\n                System.out.print(c+\" \");\n                r = ReadyToRun.T2;\n            }\n        },\"t1\").start();\n        new Thread(()->{\n            for (char c : b){\n                while (r != ReadyToRun.T2){}\n                System.out.print(c+\" \");\n                r = ReadyToRun.T1;\n            }\n        },\"t2\").start();\n    }\n}\n```\n\n","slug":"locksupport","published":1,"updated":"2022-06-06T02:37:32.776Z","layout":"post","photos":[],"link":"","_id":"cl424hx670045ad5i43uj70ow","content":"<p>LockSupport是一个编程工具类， 主要是为了阻塞和唤醒线程用的。所有的方法都是静态方法，可以让线程在任意位置阻塞，也可以在任意位置唤醒</p>\n<p>主要的方法： park(阻塞线程)  和  unpark(启动唤醒线程)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//源码</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> java.util.concurrent.locks;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.Unsafe;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LockSupport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LockSupport</span><span class=\"params\">()</span> </span>&#123;&#125; <span class=\"comment\">// Cannot be instantiated.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setBlocker</span><span class=\"params\">(Thread t, Object arg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Even though volatile, hotspot doesn&#x27;t need a write barrier here.</span></span><br><span class=\"line\">        UNSAFE.putObject(t, parkBlockerOffset, arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> thread the thread to unpark, or &#123;<span class=\"doctag\">@code</span> null&#125;, in which case</span></span><br><span class=\"line\"><span class=\"comment\">     *        this operation has no effect</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">unpark</span><span class=\"params\">(Thread thread)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (thread != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            UNSAFE.unpark(thread);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 阻塞当前线程</span></span><br><span class=\"line\"><span class=\"comment\">     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> blocker the synchronization object responsible for this</span></span><br><span class=\"line\"><span class=\"comment\">     *        thread parking</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">park</span><span class=\"params\">(Object blocker)</span> </span>&#123;</span><br><span class=\"line\">        Thread t = Thread.currentThread();</span><br><span class=\"line\">        <span class=\"comment\">//setBlocker作用是记录t线程是被broker阻塞的</span></span><br><span class=\"line\">        setBlocker(t, blocker);</span><br><span class=\"line\">        <span class=\"comment\">//UNSAFE是一个非常强大的类，他的的操作是基于底层的</span></span><br><span class=\"line\">        UNSAFE.park(<span class=\"keyword\">false</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">        setBlocker(t, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停当前线程，有超时时间</span></span><br><span class=\"line\"><span class=\"comment\">     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> blocker the synchronization object responsible for this</span></span><br><span class=\"line\"><span class=\"comment\">     *        thread parking</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nanos the maximum number of nanoseconds to wait</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">parkNanos</span><span class=\"params\">(Object blocker, <span class=\"keyword\">long</span> nanos)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nanos &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            Thread t = Thread.currentThread();</span><br><span class=\"line\">            setBlocker(t, blocker);</span><br><span class=\"line\">            UNSAFE.park(<span class=\"keyword\">false</span>, nanos);</span><br><span class=\"line\">            setBlocker(t, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停当前线程，知道某个时间</span></span><br><span class=\"line\"><span class=\"comment\">     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> blocker the synchronization object responsible for this</span></span><br><span class=\"line\"><span class=\"comment\">     *        thread parking</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> deadline the absolute time, in milliseconds from the Epoch,</span></span><br><span class=\"line\"><span class=\"comment\">     *        to wait until</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">parkUntil</span><span class=\"params\">(Object blocker, <span class=\"keyword\">long</span> deadline)</span> </span>&#123;</span><br><span class=\"line\">        Thread t = Thread.currentThread();</span><br><span class=\"line\">        setBlocker(t, blocker);</span><br><span class=\"line\">        UNSAFE.park(<span class=\"keyword\">true</span>, deadline);</span><br><span class=\"line\">        setBlocker(t, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the blocker object supplied to the most recent</span></span><br><span class=\"line\"><span class=\"comment\">     * invocation of a park method that has not yet unblocked, or null</span></span><br><span class=\"line\"><span class=\"comment\">     * if not blocked.  The value returned is just a momentary</span></span><br><span class=\"line\"><span class=\"comment\">     * snapshot -- the thread may have since unblocked or blocked on a</span></span><br><span class=\"line\"><span class=\"comment\">     * different blocker object.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t the thread</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the blocker</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> NullPointerException if argument is null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">getBlocker</span><span class=\"params\">(Thread t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UNSAFE.getObjectVolatile(t, parkBlockerOffset);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 无期限暂停当前线程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">park</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        UNSAFE.park(<span class=\"keyword\">false</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停当前线程，不过有超时时间限制</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">parkNanos</span><span class=\"params\">(<span class=\"keyword\">long</span> nanos)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nanos &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            UNSAFE.park(<span class=\"keyword\">false</span>, nanos);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停当前线程，知道某个时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> deadline 暂停结束时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">parkUntil</span><span class=\"params\">(<span class=\"keyword\">long</span> deadline)</span> </span>&#123;</span><br><span class=\"line\">        UNSAFE.park(<span class=\"keyword\">true</span>, deadline);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the pseudo-randomly initialized or updated secondary seed.</span></span><br><span class=\"line\"><span class=\"comment\">     * Copied from ThreadLocalRandom due to package access restrictions.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">nextSecondarySeed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> r;</span><br><span class=\"line\">        Thread t = Thread.currentThread();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((r = UNSAFE.getInt(t, SECONDARY)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            r ^= r &lt;&lt; <span class=\"number\">13</span>;   <span class=\"comment\">// xorshift</span></span><br><span class=\"line\">            r ^= r &gt;&gt;&gt; <span class=\"number\">17</span>;</span><br><span class=\"line\">            r ^= r &lt;&lt; <span class=\"number\">5</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((r = java.util.concurrent.ThreadLocalRandom.current().nextInt()) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            r = <span class=\"number\">1</span>; <span class=\"comment\">// avoid zero</span></span><br><span class=\"line\">        UNSAFE.putInt(t, SECONDARY, r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Hotspot implementation via intrinsics API</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> parkBlockerOffset;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> SEED;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> PROBE;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> SECONDARY;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class=\"line\">            Class&lt;?&gt; tk = Thread.class;</span><br><span class=\"line\">            parkBlockerOffset = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;parkBlocker&quot;</span>));</span><br><span class=\"line\">            SEED = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;threadLocalRandomSeed&quot;</span>));</span><br><span class=\"line\">            PROBE = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;threadLocalRandomProbe&quot;</span>));</span><br><span class=\"line\">            SECONDARY = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;threadLocalRandomSecondarySeed&quot;</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(ex); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"与wait-notify对比\"><a href=\"#与wait-notify对比\" class=\"headerlink\" title=\"与wait / notify对比\"></a>与wait / notify对比</h3><p>LockSupport是用来阻塞和环线线程的，wait/notify同样也是，那么两者的区别是什么？</p>\n<ul>\n<li>wait和notify都是Object中的方法，在调用这两个方法前必须获得锁对象，但是park不需要获取某个对象的锁就可以锁住线程</li>\n<li>notify只能随机选择一个线程唤醒，无法唤醒指定的线程，unpark可以唤醒一个指定的线程</li>\n</ul>\n<h3 id=\"LockSupport使用\"><a href=\"#LockSupport使用\" class=\"headerlink\" title=\"LockSupport使用\"></a>LockSupport使用</h3><h4 id=\"1-先interrupt在park\"><a href=\"#1-先interrupt在park\" class=\"headerlink\" title=\"1. 先interrupt在park\"></a>1. 先interrupt在park</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LockSupportTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span>  <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(getName() + <span class=\"string\">&quot;进入线程&quot;</span>);</span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;运行结束&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;是否中断：&quot;</span>+Thread.currentThread().isInterrupted());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyThread thread = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程启动了，但是在内部进行了park&quot;</span>);</span><br><span class=\"line\">        thread.interrupt();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;main 线程结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"comment\">//       线程启动了，但是在内部进行了park</span></span><br><span class=\"line\"><span class=\"comment\">//       main 线程结束</span></span><br><span class=\"line\"><span class=\"comment\">//       Thread-0进入线程</span></span><br><span class=\"line\"><span class=\"comment\">//       运行结束</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-先park在interrupt\"><a href=\"#2-先park在interrupt\" class=\"headerlink\" title=\"2. 先park在interrupt\"></a>2. 先park在interrupt</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span>  <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(getName() + <span class=\"string\">&quot;进入线程&quot;</span>);</span><br><span class=\"line\">        LockSupport.park();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;运行结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 输出：</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程启动了，但是在内部进行了park</span></span><br><span class=\"line\"><span class=\"comment\"> * main 线程结束</span></span><br><span class=\"line\"><span class=\"comment\"> * Thread-0进入线程</span></span><br><span class=\"line\"><span class=\"comment\"> * 运行结束</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"趣味题\"><a href=\"#趣味题\" class=\"headerlink\" title=\"趣味题\"></a>趣味题</h3><p>用两个线程，一个输出字母，一个输出数字交替输出如：1A2B3C4D…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadDemoTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Thread t1 = <span class=\"keyword\">null</span>, t2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] a = <span class=\"string\">&quot;1234567&quot;</span>.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] b = <span class=\"string\">&quot;ABCDEFG&quot;</span>.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">        t1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> i : a) &#123;</span><br><span class=\"line\">                System.out.print(i);</span><br><span class=\"line\">                LockSupport.unpark(t2);</span><br><span class=\"line\">                LockSupport.park();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        t2 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> i : b) &#123;</span><br><span class=\"line\">                LockSupport.park();</span><br><span class=\"line\">                System.out.print(i);</span><br><span class=\"line\">                LockSupport.unpark(t1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：  1A2B3C4D5E6F7G</span></span><br></pre></td></tr></table></figure>\n<p>使用自旋锁也可以实现上面的结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CasTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义枚举，包含两个变量</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ReadyToRun</span></span>&#123;T1, T2&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> ReadyToRun r = ReadyToRun.T1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] a = <span class=\"string\">&quot;1234567&quot;</span>.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] b = <span class=\"string\">&quot;ABCDEFG&quot;</span>.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : a)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//当r不为T1时， 空转占着cpu等待，然后输出字符，将r的值设置为T2</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (r != ReadyToRun.T1)&#123;&#125;</span><br><span class=\"line\">                System.out.print(c+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">                r = ReadyToRun.T2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : b)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (r != ReadyToRun.T2)&#123;&#125;</span><br><span class=\"line\">                System.out.print(c+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">                r = ReadyToRun.T1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>LockSupport是一个编程工具类， 主要是为了阻塞和唤醒线程用的。所有的方法都是静态方法，可以让线程在任意位置阻塞，也可以在任意位置唤醒</p>\n<p>主要的方法： park(阻塞线程)  和  unpark(启动唤醒线程)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//源码</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> java.util.concurrent.locks;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.Unsafe;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LockSupport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LockSupport</span><span class=\"params\">()</span> </span>&#123;&#125; <span class=\"comment\">// Cannot be instantiated.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setBlocker</span><span class=\"params\">(Thread t, Object arg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Even though volatile, hotspot doesn&#x27;t need a write barrier here.</span></span><br><span class=\"line\">        UNSAFE.putObject(t, parkBlockerOffset, arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> thread the thread to unpark, or &#123;<span class=\"doctag\">@code</span> null&#125;, in which case</span></span><br><span class=\"line\"><span class=\"comment\">     *        this operation has no effect</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">unpark</span><span class=\"params\">(Thread thread)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (thread != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            UNSAFE.unpark(thread);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 阻塞当前线程</span></span><br><span class=\"line\"><span class=\"comment\">     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> blocker the synchronization object responsible for this</span></span><br><span class=\"line\"><span class=\"comment\">     *        thread parking</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">park</span><span class=\"params\">(Object blocker)</span> </span>&#123;</span><br><span class=\"line\">        Thread t = Thread.currentThread();</span><br><span class=\"line\">        <span class=\"comment\">//setBlocker作用是记录t线程是被broker阻塞的</span></span><br><span class=\"line\">        setBlocker(t, blocker);</span><br><span class=\"line\">        <span class=\"comment\">//UNSAFE是一个非常强大的类，他的的操作是基于底层的</span></span><br><span class=\"line\">        UNSAFE.park(<span class=\"keyword\">false</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">        setBlocker(t, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停当前线程，有超时时间</span></span><br><span class=\"line\"><span class=\"comment\">     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> blocker the synchronization object responsible for this</span></span><br><span class=\"line\"><span class=\"comment\">     *        thread parking</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nanos the maximum number of nanoseconds to wait</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">parkNanos</span><span class=\"params\">(Object blocker, <span class=\"keyword\">long</span> nanos)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nanos &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            Thread t = Thread.currentThread();</span><br><span class=\"line\">            setBlocker(t, blocker);</span><br><span class=\"line\">            UNSAFE.park(<span class=\"keyword\">false</span>, nanos);</span><br><span class=\"line\">            setBlocker(t, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停当前线程，知道某个时间</span></span><br><span class=\"line\"><span class=\"comment\">     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> blocker the synchronization object responsible for this</span></span><br><span class=\"line\"><span class=\"comment\">     *        thread parking</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> deadline the absolute time, in milliseconds from the Epoch,</span></span><br><span class=\"line\"><span class=\"comment\">     *        to wait until</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">parkUntil</span><span class=\"params\">(Object blocker, <span class=\"keyword\">long</span> deadline)</span> </span>&#123;</span><br><span class=\"line\">        Thread t = Thread.currentThread();</span><br><span class=\"line\">        setBlocker(t, blocker);</span><br><span class=\"line\">        UNSAFE.park(<span class=\"keyword\">true</span>, deadline);</span><br><span class=\"line\">        setBlocker(t, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the blocker object supplied to the most recent</span></span><br><span class=\"line\"><span class=\"comment\">     * invocation of a park method that has not yet unblocked, or null</span></span><br><span class=\"line\"><span class=\"comment\">     * if not blocked.  The value returned is just a momentary</span></span><br><span class=\"line\"><span class=\"comment\">     * snapshot -- the thread may have since unblocked or blocked on a</span></span><br><span class=\"line\"><span class=\"comment\">     * different blocker object.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t the thread</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the blocker</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> NullPointerException if argument is null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">getBlocker</span><span class=\"params\">(Thread t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UNSAFE.getObjectVolatile(t, parkBlockerOffset);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 无期限暂停当前线程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">park</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        UNSAFE.park(<span class=\"keyword\">false</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停当前线程，不过有超时时间限制</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">parkNanos</span><span class=\"params\">(<span class=\"keyword\">long</span> nanos)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nanos &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            UNSAFE.park(<span class=\"keyword\">false</span>, nanos);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停当前线程，知道某个时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> deadline 暂停结束时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">parkUntil</span><span class=\"params\">(<span class=\"keyword\">long</span> deadline)</span> </span>&#123;</span><br><span class=\"line\">        UNSAFE.park(<span class=\"keyword\">true</span>, deadline);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the pseudo-randomly initialized or updated secondary seed.</span></span><br><span class=\"line\"><span class=\"comment\">     * Copied from ThreadLocalRandom due to package access restrictions.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">nextSecondarySeed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> r;</span><br><span class=\"line\">        Thread t = Thread.currentThread();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((r = UNSAFE.getInt(t, SECONDARY)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            r ^= r &lt;&lt; <span class=\"number\">13</span>;   <span class=\"comment\">// xorshift</span></span><br><span class=\"line\">            r ^= r &gt;&gt;&gt; <span class=\"number\">17</span>;</span><br><span class=\"line\">            r ^= r &lt;&lt; <span class=\"number\">5</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((r = java.util.concurrent.ThreadLocalRandom.current().nextInt()) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            r = <span class=\"number\">1</span>; <span class=\"comment\">// avoid zero</span></span><br><span class=\"line\">        UNSAFE.putInt(t, SECONDARY, r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Hotspot implementation via intrinsics API</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> parkBlockerOffset;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> SEED;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> PROBE;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> SECONDARY;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class=\"line\">            Class&lt;?&gt; tk = Thread.class;</span><br><span class=\"line\">            parkBlockerOffset = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;parkBlocker&quot;</span>));</span><br><span class=\"line\">            SEED = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;threadLocalRandomSeed&quot;</span>));</span><br><span class=\"line\">            PROBE = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;threadLocalRandomProbe&quot;</span>));</span><br><span class=\"line\">            SECONDARY = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;threadLocalRandomSecondarySeed&quot;</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(ex); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"与wait-notify对比\"><a href=\"#与wait-notify对比\" class=\"headerlink\" title=\"与wait / notify对比\"></a>与wait / notify对比</h3><p>LockSupport是用来阻塞和环线线程的，wait/notify同样也是，那么两者的区别是什么？</p>\n<ul>\n<li>wait和notify都是Object中的方法，在调用这两个方法前必须获得锁对象，但是park不需要获取某个对象的锁就可以锁住线程</li>\n<li>notify只能随机选择一个线程唤醒，无法唤醒指定的线程，unpark可以唤醒一个指定的线程</li>\n</ul>\n<h3 id=\"LockSupport使用\"><a href=\"#LockSupport使用\" class=\"headerlink\" title=\"LockSupport使用\"></a>LockSupport使用</h3><h4 id=\"1-先interrupt在park\"><a href=\"#1-先interrupt在park\" class=\"headerlink\" title=\"1. 先interrupt在park\"></a>1. 先interrupt在park</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LockSupportTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span>  <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(getName() + <span class=\"string\">&quot;进入线程&quot;</span>);</span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;运行结束&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;是否中断：&quot;</span>+Thread.currentThread().isInterrupted());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyThread thread = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程启动了，但是在内部进行了park&quot;</span>);</span><br><span class=\"line\">        thread.interrupt();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;main 线程结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"comment\">//       线程启动了，但是在内部进行了park</span></span><br><span class=\"line\"><span class=\"comment\">//       main 线程结束</span></span><br><span class=\"line\"><span class=\"comment\">//       Thread-0进入线程</span></span><br><span class=\"line\"><span class=\"comment\">//       运行结束</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-先park在interrupt\"><a href=\"#2-先park在interrupt\" class=\"headerlink\" title=\"2. 先park在interrupt\"></a>2. 先park在interrupt</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span>  <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(getName() + <span class=\"string\">&quot;进入线程&quot;</span>);</span><br><span class=\"line\">        LockSupport.park();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;运行结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 输出：</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程启动了，但是在内部进行了park</span></span><br><span class=\"line\"><span class=\"comment\"> * main 线程结束</span></span><br><span class=\"line\"><span class=\"comment\"> * Thread-0进入线程</span></span><br><span class=\"line\"><span class=\"comment\"> * 运行结束</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"趣味题\"><a href=\"#趣味题\" class=\"headerlink\" title=\"趣味题\"></a>趣味题</h3><p>用两个线程，一个输出字母，一个输出数字交替输出如：1A2B3C4D…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadDemoTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Thread t1 = <span class=\"keyword\">null</span>, t2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] a = <span class=\"string\">&quot;1234567&quot;</span>.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] b = <span class=\"string\">&quot;ABCDEFG&quot;</span>.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">        t1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> i : a) &#123;</span><br><span class=\"line\">                System.out.print(i);</span><br><span class=\"line\">                LockSupport.unpark(t2);</span><br><span class=\"line\">                LockSupport.park();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        t2 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> i : b) &#123;</span><br><span class=\"line\">                LockSupport.park();</span><br><span class=\"line\">                System.out.print(i);</span><br><span class=\"line\">                LockSupport.unpark(t1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：  1A2B3C4D5E6F7G</span></span><br></pre></td></tr></table></figure>\n<p>使用自旋锁也可以实现上面的结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CasTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义枚举，包含两个变量</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ReadyToRun</span></span>&#123;T1, T2&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> ReadyToRun r = ReadyToRun.T1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] a = <span class=\"string\">&quot;1234567&quot;</span>.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] b = <span class=\"string\">&quot;ABCDEFG&quot;</span>.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : a)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//当r不为T1时， 空转占着cpu等待，然后输出字符，将r的值设置为T2</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (r != ReadyToRun.T1)&#123;&#125;</span><br><span class=\"line\">                System.out.print(c+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">                r = ReadyToRun.T2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : b)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (r != ReadyToRun.T2)&#123;&#125;</span><br><span class=\"line\">                System.out.print(c+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">                r = ReadyToRun.T1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"二分法查找题","comments":1,"abbrlink":47921,"date":"2021-11-26T13:57:32.000Z","translate_title":"binary-search","_content":"### 1. 第一个错误的版本\n\n### 1.1 题目描述\n你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。\n假设你有 n 个版本 [1, 2, ..., n]，你想找出导致之后所有版本出错的第一个错误的版本。\n你可以通过调用bool isBadVersion(version)接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。\n示例\n```text\n输入：n = 5, bad = 4\n输出：4\n解释：\n    调用 isBadVersion(3) -> false \n    调用 isBadVersion(5) -> true \n    调用 isBadVersion(4) -> true\n所以，4 是第一个错误的版本\n```\n\n### 1.2 解题思路\n当一个版本为正确版本，则该版本之前的所有版本均为正确版本；当一个版本为错误版本，则该版本之后的所有版本均为错误版本。我们可以利用这个性质进行二分查找。\n\n具体地，将左右边界分别初始化为 1和 n ，其中 n 是给定的版本数量。设定左右边界之后，每次我们都依据左右边界找到其中间的版本，检查其是否为正确版本。如果该版本为正确版本，那么第一个错误的版本必然位于该版本的右侧，我们缩紧左边界；否则第一个错误的版本必然位于该版本及该版本的左侧，我们缩紧右边界。\n这样我们每判断一次都可以缩紧一次边界，而每次缩紧时两边界距离将变为原来的一半，因此我们至多只需要缩紧 O(logn) 次。\n\n\n### 1.3 代码\n```java\npublic int firstBadVersion(int n) {\n    int left = 1, right = n;\n    while (left < right){\n        int mid = left + (right - left) / 2;    // 防止计算时溢出\n        if (isBadVersion(mid)){\n            // 答案在区间 [left, mid] 中\n           right = mid; //如果中间版本是错误的版本，那么它之后的都是错误的;\n        }else {\n            // 答案在区间 [mid+1, right] 中\n            left = mid + 1;\n        }\n    }\n    //此时有 left == right,退出了while循环\n    return left;\n}\n```\n","source":"_posts/2021/11/algorithm-dinary-search.md","raw":"---\ntitle: 二分法查找题\ncomments: true\nabbrlink: 47921\ndate: 2021-11-26 21:57:32\ntags: algorithm\ncategories: 算法\ntranslate_title: binary-search\n---\n### 1. 第一个错误的版本\n\n### 1.1 题目描述\n你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。\n假设你有 n 个版本 [1, 2, ..., n]，你想找出导致之后所有版本出错的第一个错误的版本。\n你可以通过调用bool isBadVersion(version)接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。\n示例\n```text\n输入：n = 5, bad = 4\n输出：4\n解释：\n    调用 isBadVersion(3) -> false \n    调用 isBadVersion(5) -> true \n    调用 isBadVersion(4) -> true\n所以，4 是第一个错误的版本\n```\n\n### 1.2 解题思路\n当一个版本为正确版本，则该版本之前的所有版本均为正确版本；当一个版本为错误版本，则该版本之后的所有版本均为错误版本。我们可以利用这个性质进行二分查找。\n\n具体地，将左右边界分别初始化为 1和 n ，其中 n 是给定的版本数量。设定左右边界之后，每次我们都依据左右边界找到其中间的版本，检查其是否为正确版本。如果该版本为正确版本，那么第一个错误的版本必然位于该版本的右侧，我们缩紧左边界；否则第一个错误的版本必然位于该版本及该版本的左侧，我们缩紧右边界。\n这样我们每判断一次都可以缩紧一次边界，而每次缩紧时两边界距离将变为原来的一半，因此我们至多只需要缩紧 O(logn) 次。\n\n\n### 1.3 代码\n```java\npublic int firstBadVersion(int n) {\n    int left = 1, right = n;\n    while (left < right){\n        int mid = left + (right - left) / 2;    // 防止计算时溢出\n        if (isBadVersion(mid)){\n            // 答案在区间 [left, mid] 中\n           right = mid; //如果中间版本是错误的版本，那么它之后的都是错误的;\n        }else {\n            // 答案在区间 [mid+1, right] 中\n            left = mid + 1;\n        }\n    }\n    //此时有 left == right,退出了while循环\n    return left;\n}\n```\n","slug":"algorithm-dinary-search","published":1,"updated":"2022-03-27T14:06:03.335Z","layout":"post","photos":[],"link":"","_id":"cl424hx670048ad5ih871bvk3","content":"<h3 id=\"1-第一个错误的版本\"><a href=\"#1-第一个错误的版本\" class=\"headerlink\" title=\"1. 第一个错误的版本\"></a>1. 第一个错误的版本</h3><h3 id=\"1-1-题目描述\"><a href=\"#1-1-题目描述\" class=\"headerlink\" title=\"1.1 题目描述\"></a>1.1 题目描述</h3><p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。<br>假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。<br>你可以通过调用bool isBadVersion(version)接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。<br>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：n = 5, bad = 4</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：</span><br><span class=\"line\">    调用 isBadVersion(3) -&gt; false </span><br><span class=\"line\">    调用 isBadVersion(5) -&gt; true </span><br><span class=\"line\">    调用 isBadVersion(4) -&gt; true</span><br><span class=\"line\">所以，4 是第一个错误的版本</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-解题思路\"><a href=\"#1-2-解题思路\" class=\"headerlink\" title=\"1.2 解题思路\"></a>1.2 解题思路</h3><p>当一个版本为正确版本，则该版本之前的所有版本均为正确版本；当一个版本为错误版本，则该版本之后的所有版本均为错误版本。我们可以利用这个性质进行二分查找。</p>\n<p>具体地，将左右边界分别初始化为 1和 n ，其中 n 是给定的版本数量。设定左右边界之后，每次我们都依据左右边界找到其中间的版本，检查其是否为正确版本。如果该版本为正确版本，那么第一个错误的版本必然位于该版本的右侧，我们缩紧左边界；否则第一个错误的版本必然位于该版本及该版本的左侧，我们缩紧右边界。<br>这样我们每判断一次都可以缩紧一次边界，而每次缩紧时两边界距离将变为原来的一半，因此我们至多只需要缩紧 O(logn) 次。</p>\n<h3 id=\"1-3-代码\"><a href=\"#1-3-代码\" class=\"headerlink\" title=\"1.3 代码\"></a>1.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">firstBadVersion</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">1</span>, right = n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;    <span class=\"comment\">// 防止计算时溢出</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isBadVersion(mid))&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 答案在区间 [left, mid] 中</span></span><br><span class=\"line\">           right = mid; <span class=\"comment\">//如果中间版本是错误的版本，那么它之后的都是错误的;</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 答案在区间 [mid+1, right] 中</span></span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//此时有 left == right,退出了while循环</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h3 id=\"1-第一个错误的版本\"><a href=\"#1-第一个错误的版本\" class=\"headerlink\" title=\"1. 第一个错误的版本\"></a>1. 第一个错误的版本</h3><h3 id=\"1-1-题目描述\"><a href=\"#1-1-题目描述\" class=\"headerlink\" title=\"1.1 题目描述\"></a>1.1 题目描述</h3><p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。<br>假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。<br>你可以通过调用bool isBadVersion(version)接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。<br>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：n = 5, bad = 4</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：</span><br><span class=\"line\">    调用 isBadVersion(3) -&gt; false </span><br><span class=\"line\">    调用 isBadVersion(5) -&gt; true </span><br><span class=\"line\">    调用 isBadVersion(4) -&gt; true</span><br><span class=\"line\">所以，4 是第一个错误的版本</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-解题思路\"><a href=\"#1-2-解题思路\" class=\"headerlink\" title=\"1.2 解题思路\"></a>1.2 解题思路</h3><p>当一个版本为正确版本，则该版本之前的所有版本均为正确版本；当一个版本为错误版本，则该版本之后的所有版本均为错误版本。我们可以利用这个性质进行二分查找。</p>\n<p>具体地，将左右边界分别初始化为 1和 n ，其中 n 是给定的版本数量。设定左右边界之后，每次我们都依据左右边界找到其中间的版本，检查其是否为正确版本。如果该版本为正确版本，那么第一个错误的版本必然位于该版本的右侧，我们缩紧左边界；否则第一个错误的版本必然位于该版本及该版本的左侧，我们缩紧右边界。<br>这样我们每判断一次都可以缩紧一次边界，而每次缩紧时两边界距离将变为原来的一半，因此我们至多只需要缩紧 O(logn) 次。</p>\n<h3 id=\"1-3-代码\"><a href=\"#1-3-代码\" class=\"headerlink\" title=\"1.3 代码\"></a>1.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">firstBadVersion</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">1</span>, right = n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;    <span class=\"comment\">// 防止计算时溢出</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isBadVersion(mid))&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 答案在区间 [left, mid] 中</span></span><br><span class=\"line\">           right = mid; <span class=\"comment\">//如果中间版本是错误的版本，那么它之后的都是错误的;</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 答案在区间 [mid+1, right] 中</span></span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//此时有 left == right,退出了while循环</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Mysql添加/修改/删除字段","comments":1,"abbrlink":11250,"date":"2021-11-15T13:13:42.000Z","translate_title":"mysql-operate-column","_content":"### 1. 添加字段\n#### 1.1 在末尾添加字段\n1）语法：\n```sql\nALTER TABLE <表名> ADD <字段名> <数据类型> [约束条件];\n```\n语法格式的说明：\n- <表名> 为数据表的名字；\n- <字段名> 为所要添加的字段的名字；\n- <数据类型> 为所要添加的字段能存储数据的数据类型；\n- [约束条件] 是可选的，用来对添加的字段进行约束。\n- 这种语法格式默认在表的最后位置（最后一列的后面）添加新字段\n\n2）示例：在user表末尾添加字段phone\n```sql\nALTER TABLE user ADD phone VARCHAR(11) DEFAULT NULL COMMENT '电话号码';\n```\n#### 1.2 在开头添加字段\n1）语法：\n```sql\nALTER TABLE <表名> ADD <字段名> <数据类型> [约束条件] FIRST;\n```\nFIRST 关键字一般放在语句的末尾\n2）示例：在user表开头添加字段user_id\n```sql\nALTER TABLE user ADD user_id VARCHAR(32) NOT NULL COMMENT '用户主键' FIRST;\n```\n#### 1.3 在中间添加字段\n1）语法：\n```sql\nALTER TABLE <表名> ADD <字段名> <数据类型> [约束条件] AFTER <已经存在的字段名>;\n```\nAFTER 的作用是将新字段添加到某个已有字段后面。\n注意：只能在某个已有字段的后面添加新字段，不能在它的前面添加新字段\n\n2）示例：在user表的user_id字段后添加username字段\n```sql\nALTER TABLE user ADD username VARCHAR(30) DEFAULT NULL COMMENT '用户名' AFTER `user_id`;\n```\n### 2. 修改字段\n#### 2.1 修改字段属性\n1）语法：\n```sql\nALTER TABLE <表名> MODIFY <字段名> <数据类型> [约束条件];\n```\n2）示例1：修改字段属性\n```sql\n-- 将email字段VARCHAR(50)修改成VARCHAR(200)\nALTER TABLE user MODIFY email VARCHAR(200) NOT NULL DEFAULT 'email@163.com';\n```\n注意：修改时如果不带完整性约束条件，原有的约束条件将丢失，如果想保留修改时就得带上完整性约束条件\n\n3）示例2： 将email移到phone后面\n```sql\nALTER TABLE user MODIFY email VARCHAR(50) AFTER `phone`;\n```\n4）示例3：放置第一个，保留原完成性约束条件\n```sql\nALTER TABLE user`MODIFY email VARCHAR(50) NOT NULL DEFAULT 'test@163.com' FIRST;\n```\n5）示例4：修改成大小写敏感，即查询区分大小写\n```sql\nALTER TABLE user MODIFY username VARCHAR(30) BINARY CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT '用户名';\n```\n#### 2.2 修改字段名称和属性\n1）语法：\n```sql\nALTER TABLE <表名> CHANGE <原字段名> <新字段名> <数据类型> [约束条件];\n```\n2）示例：将username字段修改成user_name\n```sql\nALTER TABLE user CHANGE username user_name VARCHAR(30) DEFAULT NULL COMMENT '用户名';\n```\n\n#### 2.3 添加、删除默认值\n1）语法：\n```sql\n-- 添加默认值\nALTER TABLE <表名> ALTER <字段名> SET DEFAULT <默认值>;\n\n-- 删除默认值\nALTER TABLE <表名> ALTER <字段名> DROP DEFAULT;\n```\n2）示例：给sex添加默认值\n```sql\nALTER TABLE USER ALTER sex SET DEFAULT  '难';\n```\n3）示例：删除sex默认值\n```sql\nALTER TABLE user ALTER sex DROP DEFAULT;\n```\n\n#### 2.4 添加、删除主键\n1) 语法：\n```sql\n-- 添加主键\nALTER TABLE <表名> ADD [CONSTRAINT <约束名>] PRIMARY KEY (<字段名称,...>);\n\n-- 删除主键\nALTER TABLE <表名> DROP PRIMARY KEY;\n```\n2）示例：添加主键\n```sql\nALTER TABLE user ADD PRIMARY  KEY (user_id)\n```\n\n3）示例：添加复合主键\n```sql\nALTER TABLE  user_role ADD PRIMARY KEY (user_id, role_id);\n```\n4）示例：删除主键\n```sql\nALTER TABLE user DROP PRIMARY KEY;\n```\n5）示例：删除带自增长属性的主键\n```sql\n-- 先用MODIFY删除自增长属性，注意MODIFY不能去掉主键属性\nALTER TABLE test MODIFY id INT UNSIGNED;\n-- 再来删除主键\nALTER TABLE test DROP PRIMARY KEY;\n```\n#### 2.5 添加、删除唯一索引\n1）语法：\n```sql\n-- 添加唯一性约束\nALTER TABLE <表名> ADD [CONSTANT <约束名>] UNIQUE [INDEX | KEY] [索引名称](<字段名称,...>)\n\n-- 删除唯一性约束\nALTER TABLE <表名> DROP [INDEX | KEY] [索引名称];\n```\n2）示例：为username添加唯一性约束，如果没有指定索引名称，系统会以字段名建立索引\n```sql\nALTER TABLE user ADD UNIQUE(username);\n```\n3）示例：为username添加唯一性约束，并指定索引名称\n```sql\nALTER TABLE user ADD UNION KEY uni_username(username);\n```\n4）示例：查看索引\n```sql\nSHOW CREATE TABLE user;\n```\n5）示例：添加联合UNIQUE\n```sql\nALTER TABLE user ADD UNIQUE INDEX uni_nickname_username(nickname, username);\n```\n6）示例：删除索引\n```sql\nALTER TABLE user DROP INDEX username;\nALTER TABLE user DROP KEY uni_username;\nALTER TABLE user DROP INDEX uni_nickname_username;\n```\n#### 2.6 修改表的存储引擎\n1）语法：\n```sql\nALTER TABLE <表名> ENGINE=<存储引擎名称>\n```\n2）示例：\n```sql\nALTER TABLE user ENGINE=MyISAM;\nALTER TABLE user ENGINE=INNODB;\n```\n#### 2.7 修改自增长值\n1）语法：\n```sql\nALTER TABLE <表名> AUTO_INCREMENT=[值];\n```\n2）示例：\n```sql\nALTER TABLE user AUTO_INCREMENT= 100;\n```\n\n\n博客原文链接：https://www.cnblogs.com/Jimc/p/12979319.html\n如有侵权，请联系删除！\n","source":"_posts/2021/11/mysql-column.md","raw":"---\ntitle: Mysql添加/修改/删除字段\ntags: mysql\ncomments: true\ncategories: mysql\nabbrlink: 11250\ndate: 2021-11-15 21:13:42\ntranslate_title: mysql-operate-column\n---\n### 1. 添加字段\n#### 1.1 在末尾添加字段\n1）语法：\n```sql\nALTER TABLE <表名> ADD <字段名> <数据类型> [约束条件];\n```\n语法格式的说明：\n- <表名> 为数据表的名字；\n- <字段名> 为所要添加的字段的名字；\n- <数据类型> 为所要添加的字段能存储数据的数据类型；\n- [约束条件] 是可选的，用来对添加的字段进行约束。\n- 这种语法格式默认在表的最后位置（最后一列的后面）添加新字段\n\n2）示例：在user表末尾添加字段phone\n```sql\nALTER TABLE user ADD phone VARCHAR(11) DEFAULT NULL COMMENT '电话号码';\n```\n#### 1.2 在开头添加字段\n1）语法：\n```sql\nALTER TABLE <表名> ADD <字段名> <数据类型> [约束条件] FIRST;\n```\nFIRST 关键字一般放在语句的末尾\n2）示例：在user表开头添加字段user_id\n```sql\nALTER TABLE user ADD user_id VARCHAR(32) NOT NULL COMMENT '用户主键' FIRST;\n```\n#### 1.3 在中间添加字段\n1）语法：\n```sql\nALTER TABLE <表名> ADD <字段名> <数据类型> [约束条件] AFTER <已经存在的字段名>;\n```\nAFTER 的作用是将新字段添加到某个已有字段后面。\n注意：只能在某个已有字段的后面添加新字段，不能在它的前面添加新字段\n\n2）示例：在user表的user_id字段后添加username字段\n```sql\nALTER TABLE user ADD username VARCHAR(30) DEFAULT NULL COMMENT '用户名' AFTER `user_id`;\n```\n### 2. 修改字段\n#### 2.1 修改字段属性\n1）语法：\n```sql\nALTER TABLE <表名> MODIFY <字段名> <数据类型> [约束条件];\n```\n2）示例1：修改字段属性\n```sql\n-- 将email字段VARCHAR(50)修改成VARCHAR(200)\nALTER TABLE user MODIFY email VARCHAR(200) NOT NULL DEFAULT 'email@163.com';\n```\n注意：修改时如果不带完整性约束条件，原有的约束条件将丢失，如果想保留修改时就得带上完整性约束条件\n\n3）示例2： 将email移到phone后面\n```sql\nALTER TABLE user MODIFY email VARCHAR(50) AFTER `phone`;\n```\n4）示例3：放置第一个，保留原完成性约束条件\n```sql\nALTER TABLE user`MODIFY email VARCHAR(50) NOT NULL DEFAULT 'test@163.com' FIRST;\n```\n5）示例4：修改成大小写敏感，即查询区分大小写\n```sql\nALTER TABLE user MODIFY username VARCHAR(30) BINARY CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT '用户名';\n```\n#### 2.2 修改字段名称和属性\n1）语法：\n```sql\nALTER TABLE <表名> CHANGE <原字段名> <新字段名> <数据类型> [约束条件];\n```\n2）示例：将username字段修改成user_name\n```sql\nALTER TABLE user CHANGE username user_name VARCHAR(30) DEFAULT NULL COMMENT '用户名';\n```\n\n#### 2.3 添加、删除默认值\n1）语法：\n```sql\n-- 添加默认值\nALTER TABLE <表名> ALTER <字段名> SET DEFAULT <默认值>;\n\n-- 删除默认值\nALTER TABLE <表名> ALTER <字段名> DROP DEFAULT;\n```\n2）示例：给sex添加默认值\n```sql\nALTER TABLE USER ALTER sex SET DEFAULT  '难';\n```\n3）示例：删除sex默认值\n```sql\nALTER TABLE user ALTER sex DROP DEFAULT;\n```\n\n#### 2.4 添加、删除主键\n1) 语法：\n```sql\n-- 添加主键\nALTER TABLE <表名> ADD [CONSTRAINT <约束名>] PRIMARY KEY (<字段名称,...>);\n\n-- 删除主键\nALTER TABLE <表名> DROP PRIMARY KEY;\n```\n2）示例：添加主键\n```sql\nALTER TABLE user ADD PRIMARY  KEY (user_id)\n```\n\n3）示例：添加复合主键\n```sql\nALTER TABLE  user_role ADD PRIMARY KEY (user_id, role_id);\n```\n4）示例：删除主键\n```sql\nALTER TABLE user DROP PRIMARY KEY;\n```\n5）示例：删除带自增长属性的主键\n```sql\n-- 先用MODIFY删除自增长属性，注意MODIFY不能去掉主键属性\nALTER TABLE test MODIFY id INT UNSIGNED;\n-- 再来删除主键\nALTER TABLE test DROP PRIMARY KEY;\n```\n#### 2.5 添加、删除唯一索引\n1）语法：\n```sql\n-- 添加唯一性约束\nALTER TABLE <表名> ADD [CONSTANT <约束名>] UNIQUE [INDEX | KEY] [索引名称](<字段名称,...>)\n\n-- 删除唯一性约束\nALTER TABLE <表名> DROP [INDEX | KEY] [索引名称];\n```\n2）示例：为username添加唯一性约束，如果没有指定索引名称，系统会以字段名建立索引\n```sql\nALTER TABLE user ADD UNIQUE(username);\n```\n3）示例：为username添加唯一性约束，并指定索引名称\n```sql\nALTER TABLE user ADD UNION KEY uni_username(username);\n```\n4）示例：查看索引\n```sql\nSHOW CREATE TABLE user;\n```\n5）示例：添加联合UNIQUE\n```sql\nALTER TABLE user ADD UNIQUE INDEX uni_nickname_username(nickname, username);\n```\n6）示例：删除索引\n```sql\nALTER TABLE user DROP INDEX username;\nALTER TABLE user DROP KEY uni_username;\nALTER TABLE user DROP INDEX uni_nickname_username;\n```\n#### 2.6 修改表的存储引擎\n1）语法：\n```sql\nALTER TABLE <表名> ENGINE=<存储引擎名称>\n```\n2）示例：\n```sql\nALTER TABLE user ENGINE=MyISAM;\nALTER TABLE user ENGINE=INNODB;\n```\n#### 2.7 修改自增长值\n1）语法：\n```sql\nALTER TABLE <表名> AUTO_INCREMENT=[值];\n```\n2）示例：\n```sql\nALTER TABLE user AUTO_INCREMENT= 100;\n```\n\n\n博客原文链接：https://www.cnblogs.com/Jimc/p/12979319.html\n如有侵权，请联系删除！\n","slug":"mysql-column","published":1,"updated":"2022-04-06T09:51:44.947Z","layout":"post","photos":[],"link":"","_id":"cl424hx68004bad5i1lphhnyx","content":"<h3 id=\"1-添加字段\"><a href=\"#1-添加字段\" class=\"headerlink\" title=\"1. 添加字段\"></a>1. 添加字段</h3><h4 id=\"1-1-在末尾添加字段\"><a href=\"#1-1-在末尾添加字段\" class=\"headerlink\" title=\"1.1 在末尾添加字段\"></a>1.1 在末尾添加字段</h4><p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件];</span><br></pre></td></tr></table></figure>\n<p>语法格式的说明：</p>\n<ul>\n<li>&lt;表名&gt; 为数据表的名字；</li>\n<li>&lt;字段名&gt; 为所要添加的字段的名字；</li>\n<li>&lt;数据类型&gt; 为所要添加的字段能存储数据的数据类型；</li>\n<li>[约束条件] 是可选的，用来对添加的字段进行约束。</li>\n<li>这种语法格式默认在表的最后位置（最后一列的后面）添加新字段</li>\n</ul>\n<p>2）示例：在user表末尾添加字段phone</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> phone <span class=\"type\">VARCHAR</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;电话号码&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-2-在开头添加字段\"><a href=\"#1-2-在开头添加字段\" class=\"headerlink\" title=\"1.2 在开头添加字段\"></a>1.2 在开头添加字段</h4><p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件] <span class=\"keyword\">FIRST</span>;</span><br></pre></td></tr></table></figure>\n<p>FIRST 关键字一般放在语句的末尾<br>2）示例：在user表开头添加字段user_id</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> user_id <span class=\"type\">VARCHAR</span>(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户主键&#x27;</span> <span class=\"keyword\">FIRST</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-3-在中间添加字段\"><a href=\"#1-3-在中间添加字段\" class=\"headerlink\" title=\"1.3 在中间添加字段\"></a>1.3 在中间添加字段</h4><p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件] AFTER <span class=\"operator\">&lt;</span>已经存在的字段名<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure>\n<p>AFTER 的作用是将新字段添加到某个已有字段后面。<br>注意：只能在某个已有字段的后面添加新字段，不能在它的前面添加新字段</p>\n<p>2）示例：在user表的user_id字段后添加username字段</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> username <span class=\"type\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户名&#x27;</span> AFTER `user_id`;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-修改字段\"><a href=\"#2-修改字段\" class=\"headerlink\" title=\"2. 修改字段\"></a>2. 修改字段</h3><h4 id=\"2-1-修改字段属性\"><a href=\"#2-1-修改字段属性\" class=\"headerlink\" title=\"2.1 修改字段属性\"></a>2.1 修改字段属性</h4><p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> MODIFY <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件];</span><br></pre></td></tr></table></figure>\n<p>2）示例1：修改字段属性</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 将email字段VARCHAR(50)修改成VARCHAR(200)</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> MODIFY email <span class=\"type\">VARCHAR</span>(<span class=\"number\">200</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;email@163.com&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>注意：修改时如果不带完整性约束条件，原有的约束条件将丢失，如果想保留修改时就得带上完整性约束条件</p>\n<p>3）示例2： 将email移到phone后面</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> MODIFY email <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) AFTER `phone`;</span><br></pre></td></tr></table></figure>\n<p>4）示例3：放置第一个，保留原完成性约束条件</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span>`MODIFY email <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;test@163.com&#x27;</span> <span class=\"keyword\">FIRST</span>;</span><br></pre></td></tr></table></figure>\n<p>5）示例4：修改成大小写敏感，即查询区分大小写</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> MODIFY username <span class=\"type\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"type\">BINARY</span> <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_bin <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户名&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-修改字段名称和属性\"><a href=\"#2-2-修改字段名称和属性\" class=\"headerlink\" title=\"2.2 修改字段名称和属性\"></a>2.2 修改字段名称和属性</h4><p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> CHANGE <span class=\"operator\">&lt;</span>原字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>新字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件];</span><br></pre></td></tr></table></figure>\n<p>2）示例：将username字段修改成user_name</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> CHANGE username user_name <span class=\"type\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户名&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-添加、删除默认值\"><a href=\"#2-3-添加、删除默认值\" class=\"headerlink\" title=\"2.3 添加、删除默认值\"></a>2.3 添加、删除默认值</h4><p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加默认值</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ALTER</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span> <span class=\"operator\">&lt;</span>默认值<span class=\"operator\">&gt;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除默认值</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ALTER</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"keyword\">DROP</span> <span class=\"keyword\">DEFAULT</span>;</span><br></pre></td></tr></table></figure>\n<p>2）示例：给sex添加默认值</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">USER</span> <span class=\"keyword\">ALTER</span> sex <span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span>  <span class=\"string\">&#x27;难&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>3）示例：删除sex默认值</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ALTER</span> sex <span class=\"keyword\">DROP</span> <span class=\"keyword\">DEFAULT</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-添加、删除主键\"><a href=\"#2-4-添加、删除主键\" class=\"headerlink\" title=\"2.4 添加、删除主键\"></a>2.4 添加、删除主键</h4><ol>\n<li>语法：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加主键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> [<span class=\"keyword\">CONSTRAINT</span> <span class=\"operator\">&lt;</span>约束名<span class=\"operator\">&gt;</span>] <span class=\"keyword\">PRIMARY</span> KEY (<span class=\"operator\">&lt;</span>字段名称,...<span class=\"operator\">&gt;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除主键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">DROP</span> <span class=\"keyword\">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>\n2）示例：添加主键<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">PRIMARY</span>  KEY (user_id)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>3）示例：添加复合主键</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span>  user_role <span class=\"keyword\">ADD</span> <span class=\"keyword\">PRIMARY</span> KEY (user_id, role_id);</span><br></pre></td></tr></table></figure>\n<p>4）示例：删除主键</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">DROP</span> <span class=\"keyword\">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>\n<p>5）示例：删除带自增长属性的主键</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 先用MODIFY删除自增长属性，注意MODIFY不能去掉主键属性</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> test MODIFY id <span class=\"type\">INT</span> UNSIGNED;</span><br><span class=\"line\"><span class=\"comment\">-- 再来删除主键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> test <span class=\"keyword\">DROP</span> <span class=\"keyword\">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-5-添加、删除唯一索引\"><a href=\"#2-5-添加、删除唯一索引\" class=\"headerlink\" title=\"2.5 添加、删除唯一索引\"></a>2.5 添加、删除唯一索引</h4><p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加唯一性约束</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> [CONSTANT <span class=\"operator\">&lt;</span>约束名<span class=\"operator\">&gt;</span>] <span class=\"keyword\">UNIQUE</span> [INDEX <span class=\"operator\">|</span> KEY] [索引名称](<span class=\"operator\">&lt;</span>字段名称,...<span class=\"operator\">&gt;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除唯一性约束</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">DROP</span> [INDEX <span class=\"operator\">|</span> KEY] [索引名称];</span><br></pre></td></tr></table></figure>\n<p>2）示例：为username添加唯一性约束，如果没有指定索引名称，系统会以字段名建立索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span>(username);</span><br></pre></td></tr></table></figure>\n<p>3）示例：为username添加唯一性约束，并指定索引名称</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNION</span> KEY uni_username(username);</span><br></pre></td></tr></table></figure>\n<p>4）示例：查看索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure>\n<p>5）示例：添加联合UNIQUE</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> INDEX uni_nickname_username(nickname, username);</span><br></pre></td></tr></table></figure>\n<p>6）示例：删除索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">DROP</span> INDEX username;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">DROP</span> KEY uni_username;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">DROP</span> INDEX uni_nickname_username;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-6-修改表的存储引擎\"><a href=\"#2-6-修改表的存储引擎\" class=\"headerlink\" title=\"2.6 修改表的存储引擎\"></a>2.6 修改表的存储引擎</h4><p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> ENGINE<span class=\"operator\">=</span><span class=\"operator\">&lt;</span>存储引擎名称<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2）示例：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> ENGINE<span class=\"operator\">=</span>MyISAM;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> ENGINE<span class=\"operator\">=</span>INNODB;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-7-修改自增长值\"><a href=\"#2-7-修改自增长值\" class=\"headerlink\" title=\"2.7 修改自增长值\"></a>2.7 修改自增长值</h4><p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> AUTO_INCREMENT<span class=\"operator\">=</span>[值];</span><br></pre></td></tr></table></figure>\n<p>2）示例：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> AUTO_INCREMENT<span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n\n\n<p>博客原文链接：<a href=\"https://www.cnblogs.com/Jimc/p/12979319.html\">https://www.cnblogs.com/Jimc/p/12979319.html</a><br>如有侵权，请联系删除！</p>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h3 id=\"1-添加字段\"><a href=\"#1-添加字段\" class=\"headerlink\" title=\"1. 添加字段\"></a>1. 添加字段</h3><h4 id=\"1-1-在末尾添加字段\"><a href=\"#1-1-在末尾添加字段\" class=\"headerlink\" title=\"1.1 在末尾添加字段\"></a>1.1 在末尾添加字段</h4><p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件];</span><br></pre></td></tr></table></figure>\n<p>语法格式的说明：</p>\n<ul>\n<li>&lt;表名&gt; 为数据表的名字；</li>\n<li>&lt;字段名&gt; 为所要添加的字段的名字；</li>\n<li>&lt;数据类型&gt; 为所要添加的字段能存储数据的数据类型；</li>\n<li>[约束条件] 是可选的，用来对添加的字段进行约束。</li>\n<li>这种语法格式默认在表的最后位置（最后一列的后面）添加新字段</li>\n</ul>\n<p>2）示例：在user表末尾添加字段phone</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> phone <span class=\"type\">VARCHAR</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;电话号码&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-2-在开头添加字段\"><a href=\"#1-2-在开头添加字段\" class=\"headerlink\" title=\"1.2 在开头添加字段\"></a>1.2 在开头添加字段</h4><p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件] <span class=\"keyword\">FIRST</span>;</span><br></pre></td></tr></table></figure>\n<p>FIRST 关键字一般放在语句的末尾<br>2）示例：在user表开头添加字段user_id</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> user_id <span class=\"type\">VARCHAR</span>(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户主键&#x27;</span> <span class=\"keyword\">FIRST</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-3-在中间添加字段\"><a href=\"#1-3-在中间添加字段\" class=\"headerlink\" title=\"1.3 在中间添加字段\"></a>1.3 在中间添加字段</h4><p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件] AFTER <span class=\"operator\">&lt;</span>已经存在的字段名<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure>\n<p>AFTER 的作用是将新字段添加到某个已有字段后面。<br>注意：只能在某个已有字段的后面添加新字段，不能在它的前面添加新字段</p>\n<p>2）示例：在user表的user_id字段后添加username字段</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> username <span class=\"type\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户名&#x27;</span> AFTER `user_id`;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-修改字段\"><a href=\"#2-修改字段\" class=\"headerlink\" title=\"2. 修改字段\"></a>2. 修改字段</h3><h4 id=\"2-1-修改字段属性\"><a href=\"#2-1-修改字段属性\" class=\"headerlink\" title=\"2.1 修改字段属性\"></a>2.1 修改字段属性</h4><p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> MODIFY <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件];</span><br></pre></td></tr></table></figure>\n<p>2）示例1：修改字段属性</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 将email字段VARCHAR(50)修改成VARCHAR(200)</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> MODIFY email <span class=\"type\">VARCHAR</span>(<span class=\"number\">200</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;email@163.com&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>注意：修改时如果不带完整性约束条件，原有的约束条件将丢失，如果想保留修改时就得带上完整性约束条件</p>\n<p>3）示例2： 将email移到phone后面</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> MODIFY email <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) AFTER `phone`;</span><br></pre></td></tr></table></figure>\n<p>4）示例3：放置第一个，保留原完成性约束条件</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span>`MODIFY email <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;test@163.com&#x27;</span> <span class=\"keyword\">FIRST</span>;</span><br></pre></td></tr></table></figure>\n<p>5）示例4：修改成大小写敏感，即查询区分大小写</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> MODIFY username <span class=\"type\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"type\">BINARY</span> <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_bin <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户名&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-修改字段名称和属性\"><a href=\"#2-2-修改字段名称和属性\" class=\"headerlink\" title=\"2.2 修改字段名称和属性\"></a>2.2 修改字段名称和属性</h4><p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> CHANGE <span class=\"operator\">&lt;</span>原字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>新字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件];</span><br></pre></td></tr></table></figure>\n<p>2）示例：将username字段修改成user_name</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> CHANGE username user_name <span class=\"type\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户名&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-添加、删除默认值\"><a href=\"#2-3-添加、删除默认值\" class=\"headerlink\" title=\"2.3 添加、删除默认值\"></a>2.3 添加、删除默认值</h4><p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加默认值</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ALTER</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span> <span class=\"operator\">&lt;</span>默认值<span class=\"operator\">&gt;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除默认值</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ALTER</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"keyword\">DROP</span> <span class=\"keyword\">DEFAULT</span>;</span><br></pre></td></tr></table></figure>\n<p>2）示例：给sex添加默认值</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">USER</span> <span class=\"keyword\">ALTER</span> sex <span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span>  <span class=\"string\">&#x27;难&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>3）示例：删除sex默认值</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ALTER</span> sex <span class=\"keyword\">DROP</span> <span class=\"keyword\">DEFAULT</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-添加、删除主键\"><a href=\"#2-4-添加、删除主键\" class=\"headerlink\" title=\"2.4 添加、删除主键\"></a>2.4 添加、删除主键</h4><ol>\n<li>语法：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加主键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> [<span class=\"keyword\">CONSTRAINT</span> <span class=\"operator\">&lt;</span>约束名<span class=\"operator\">&gt;</span>] <span class=\"keyword\">PRIMARY</span> KEY (<span class=\"operator\">&lt;</span>字段名称,...<span class=\"operator\">&gt;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除主键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">DROP</span> <span class=\"keyword\">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>\n2）示例：添加主键<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">PRIMARY</span>  KEY (user_id)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>3）示例：添加复合主键</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span>  user_role <span class=\"keyword\">ADD</span> <span class=\"keyword\">PRIMARY</span> KEY (user_id, role_id);</span><br></pre></td></tr></table></figure>\n<p>4）示例：删除主键</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">DROP</span> <span class=\"keyword\">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>\n<p>5）示例：删除带自增长属性的主键</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 先用MODIFY删除自增长属性，注意MODIFY不能去掉主键属性</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> test MODIFY id <span class=\"type\">INT</span> UNSIGNED;</span><br><span class=\"line\"><span class=\"comment\">-- 再来删除主键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> test <span class=\"keyword\">DROP</span> <span class=\"keyword\">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-5-添加、删除唯一索引\"><a href=\"#2-5-添加、删除唯一索引\" class=\"headerlink\" title=\"2.5 添加、删除唯一索引\"></a>2.5 添加、删除唯一索引</h4><p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加唯一性约束</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> [CONSTANT <span class=\"operator\">&lt;</span>约束名<span class=\"operator\">&gt;</span>] <span class=\"keyword\">UNIQUE</span> [INDEX <span class=\"operator\">|</span> KEY] [索引名称](<span class=\"operator\">&lt;</span>字段名称,...<span class=\"operator\">&gt;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除唯一性约束</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">DROP</span> [INDEX <span class=\"operator\">|</span> KEY] [索引名称];</span><br></pre></td></tr></table></figure>\n<p>2）示例：为username添加唯一性约束，如果没有指定索引名称，系统会以字段名建立索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span>(username);</span><br></pre></td></tr></table></figure>\n<p>3）示例：为username添加唯一性约束，并指定索引名称</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNION</span> KEY uni_username(username);</span><br></pre></td></tr></table></figure>\n<p>4）示例：查看索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure>\n<p>5）示例：添加联合UNIQUE</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> INDEX uni_nickname_username(nickname, username);</span><br></pre></td></tr></table></figure>\n<p>6）示例：删除索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">DROP</span> INDEX username;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">DROP</span> KEY uni_username;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">DROP</span> INDEX uni_nickname_username;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-6-修改表的存储引擎\"><a href=\"#2-6-修改表的存储引擎\" class=\"headerlink\" title=\"2.6 修改表的存储引擎\"></a>2.6 修改表的存储引擎</h4><p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> ENGINE<span class=\"operator\">=</span><span class=\"operator\">&lt;</span>存储引擎名称<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2）示例：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> ENGINE<span class=\"operator\">=</span>MyISAM;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> ENGINE<span class=\"operator\">=</span>INNODB;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-7-修改自增长值\"><a href=\"#2-7-修改自增长值\" class=\"headerlink\" title=\"2.7 修改自增长值\"></a>2.7 修改自增长值</h4><p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> AUTO_INCREMENT<span class=\"operator\">=</span>[值];</span><br></pre></td></tr></table></figure>\n<p>2）示例：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> AUTO_INCREMENT<span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n\n\n<p>博客原文链接：<a href=\"https://www.cnblogs.com/Jimc/p/12979319.html\">https://www.cnblogs.com/Jimc/p/12979319.html</a><br>如有侵权，请联系删除！</p>\n"},{"title":"TIDB设置sql_mode","comments":1,"abbrlink":47745,"date":"2021-11-15T12:57:46.000Z","translate_title":"tidb-set-sql-mode","_content":"### 1. 使用命令查询当前sql_mode\n```sql\nselect @@sql_mode\n-- 或者\nselect @@GLOBAL.sql_mode\n```\n![sql_mode](./sql-model/1.png)\n\n##### sql_mode常用值：\n- ONLY_FULL_GROUP_BY\n  对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中\n  \n- NO_AUTO_VALUE_ON_ZERO\n  该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。如果用户希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。\n\n- STRICT_TRANS_TABLES \n  在该模式下，如果一个值不能插入到一个事务中，则中断当前的操作，对非事务表不做限制\n\n- NO_ZERO_IN_DATE \n  在严格模式下，不允许日期和月份为零\n\n- NO_ZERO_DATE \n  设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告\n\n- ERROR_FOR_DIVISION_BY_ZERO \n  在insert或update过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时Mysql返回NULL\n\n- NO_AUTO_CREATE_USER \n  禁止GRANT创建密码为空的用户\n\n- NO_ENGINE_SUBSTITUTION \n  如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常\n\n- PIPES_AS_CONCAT \n  将\"||\"视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样是，也和字符串的拼接函数Concat想类似\n\n- ANSI_QUOTES \n  启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符\n  \n### 2. 临时设置（新session仍然使用之前的sql_mode）\n```sql\nset sql_mode=‘ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES’;\n```\n\n### 3. 全局设置（新session仍然使用修改后的sql_mode）\n```sql\nset @@global.sql_mode='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE‘；\n```","source":"_posts/2021/11/sql-model.md","raw":"---\ntitle: TIDB设置sql_mode\ncomments: true\ntags: tidb\ncategories: mysql\nabbrlink: 47745\ndate: 2021-11-15 20:57:46\ntranslate_title: tidb-set-sql-mode\n---\n### 1. 使用命令查询当前sql_mode\n```sql\nselect @@sql_mode\n-- 或者\nselect @@GLOBAL.sql_mode\n```\n![sql_mode](./sql-model/1.png)\n\n##### sql_mode常用值：\n- ONLY_FULL_GROUP_BY\n  对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中\n  \n- NO_AUTO_VALUE_ON_ZERO\n  该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。如果用户希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。\n\n- STRICT_TRANS_TABLES \n  在该模式下，如果一个值不能插入到一个事务中，则中断当前的操作，对非事务表不做限制\n\n- NO_ZERO_IN_DATE \n  在严格模式下，不允许日期和月份为零\n\n- NO_ZERO_DATE \n  设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告\n\n- ERROR_FOR_DIVISION_BY_ZERO \n  在insert或update过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时Mysql返回NULL\n\n- NO_AUTO_CREATE_USER \n  禁止GRANT创建密码为空的用户\n\n- NO_ENGINE_SUBSTITUTION \n  如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常\n\n- PIPES_AS_CONCAT \n  将\"||\"视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样是，也和字符串的拼接函数Concat想类似\n\n- ANSI_QUOTES \n  启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符\n  \n### 2. 临时设置（新session仍然使用之前的sql_mode）\n```sql\nset sql_mode=‘ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES’;\n```\n\n### 3. 全局设置（新session仍然使用修改后的sql_mode）\n```sql\nset @@global.sql_mode='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE‘；\n```","slug":"sql-model","published":1,"updated":"2022-04-06T09:51:44.957Z","layout":"post","photos":[],"link":"","_id":"cl424hx69004ead5iawz32gid","content":"<h3 id=\"1-使用命令查询当前sql-mode\"><a href=\"#1-使用命令查询当前sql-mode\" class=\"headerlink\" title=\"1. 使用命令查询当前sql_mode\"></a>1. 使用命令查询当前sql_mode</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> @<span class=\"variable\">@sql</span>_mode</span><br><span class=\"line\"><span class=\"comment\">-- 或者</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> @<span class=\"variable\">@GLOBAL</span>.sql_mode</span><br></pre></td></tr></table></figure>\n<p><img src=\"/sql-model/1.png\" alt=\"sql_mode\"></p>\n<h5 id=\"sql-mode常用值：\"><a href=\"#sql-mode常用值：\" class=\"headerlink\" title=\"sql_mode常用值：\"></a>sql_mode常用值：</h5><ul>\n<li><p>ONLY_FULL_GROUP_BY<br>对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中</p>\n</li>\n<li><p>NO_AUTO_VALUE_ON_ZERO<br>该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。如果用户希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。</p>\n</li>\n<li><p>STRICT_TRANS_TABLES<br>在该模式下，如果一个值不能插入到一个事务中，则中断当前的操作，对非事务表不做限制</p>\n</li>\n<li><p>NO_ZERO_IN_DATE<br>在严格模式下，不允许日期和月份为零</p>\n</li>\n<li><p>NO_ZERO_DATE<br>设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告</p>\n</li>\n<li><p>ERROR_FOR_DIVISION_BY_ZERO<br>在insert或update过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时Mysql返回NULL</p>\n</li>\n<li><p>NO_AUTO_CREATE_USER<br>禁止GRANT创建密码为空的用户</p>\n</li>\n<li><p>NO_ENGINE_SUBSTITUTION<br>如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常</p>\n</li>\n<li><p>PIPES_AS_CONCAT<br>将”||”视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样是，也和字符串的拼接函数Concat想类似</p>\n</li>\n<li><p>ANSI_QUOTES<br>启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符</p>\n</li>\n</ul>\n<h3 id=\"2-临时设置（新session仍然使用之前的sql-mode）\"><a href=\"#2-临时设置（新session仍然使用之前的sql-mode）\" class=\"headerlink\" title=\"2. 临时设置（新session仍然使用之前的sql_mode）\"></a>2. 临时设置（新session仍然使用之前的sql_mode）</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> sql_mode<span class=\"operator\">=</span>‘ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES’;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-全局设置（新session仍然使用修改后的sql-mode）\"><a href=\"#3-全局设置（新session仍然使用修改后的sql-mode）\" class=\"headerlink\" title=\"3. 全局设置（新session仍然使用修改后的sql_mode）\"></a>3. 全局设置（新session仍然使用修改后的sql_mode）</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> @<span class=\"variable\">@global</span>.sql_mode<span class=\"operator\">=</span><span class=\"string\">&#x27;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE‘；</span></span><br></pre></td></tr></table></figure>","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h3 id=\"1-使用命令查询当前sql-mode\"><a href=\"#1-使用命令查询当前sql-mode\" class=\"headerlink\" title=\"1. 使用命令查询当前sql_mode\"></a>1. 使用命令查询当前sql_mode</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> @<span class=\"variable\">@sql</span>_mode</span><br><span class=\"line\"><span class=\"comment\">-- 或者</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> @<span class=\"variable\">@GLOBAL</span>.sql_mode</span><br></pre></td></tr></table></figure>\n<p><img src=\"/sql-model/1.png\" alt=\"sql_mode\"></p>\n<h5 id=\"sql-mode常用值：\"><a href=\"#sql-mode常用值：\" class=\"headerlink\" title=\"sql_mode常用值：\"></a>sql_mode常用值：</h5><ul>\n<li><p>ONLY_FULL_GROUP_BY<br>对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中</p>\n</li>\n<li><p>NO_AUTO_VALUE_ON_ZERO<br>该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。如果用户希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。</p>\n</li>\n<li><p>STRICT_TRANS_TABLES<br>在该模式下，如果一个值不能插入到一个事务中，则中断当前的操作，对非事务表不做限制</p>\n</li>\n<li><p>NO_ZERO_IN_DATE<br>在严格模式下，不允许日期和月份为零</p>\n</li>\n<li><p>NO_ZERO_DATE<br>设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告</p>\n</li>\n<li><p>ERROR_FOR_DIVISION_BY_ZERO<br>在insert或update过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时Mysql返回NULL</p>\n</li>\n<li><p>NO_AUTO_CREATE_USER<br>禁止GRANT创建密码为空的用户</p>\n</li>\n<li><p>NO_ENGINE_SUBSTITUTION<br>如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常</p>\n</li>\n<li><p>PIPES_AS_CONCAT<br>将”||”视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样是，也和字符串的拼接函数Concat想类似</p>\n</li>\n<li><p>ANSI_QUOTES<br>启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符</p>\n</li>\n</ul>\n<h3 id=\"2-临时设置（新session仍然使用之前的sql-mode）\"><a href=\"#2-临时设置（新session仍然使用之前的sql-mode）\" class=\"headerlink\" title=\"2. 临时设置（新session仍然使用之前的sql_mode）\"></a>2. 临时设置（新session仍然使用之前的sql_mode）</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> sql_mode<span class=\"operator\">=</span>‘ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES’;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-全局设置（新session仍然使用修改后的sql-mode）\"><a href=\"#3-全局设置（新session仍然使用修改后的sql-mode）\" class=\"headerlink\" title=\"3. 全局设置（新session仍然使用修改后的sql_mode）\"></a>3. 全局设置（新session仍然使用修改后的sql_mode）</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> @<span class=\"variable\">@global</span>.sql_mode<span class=\"operator\">=</span><span class=\"string\">&#x27;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE‘；</span></span><br></pre></td></tr></table></figure>"},{"title":"docker安装","comments":1,"abbrlink":8175,"date":"2021-12-09T13:20:57.000Z","translate_title":"docker-01","_content":"新的服务器没有安装docker，使用docker命令时提示：docker: command not found错误信息\n##### 1. 更新yum包\n```shell\nyum update\n```\n\n##### 2.安装依赖软件包\n```shell\nyum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n##### 3.设置yum源\n```shell\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n```\n#####  4.安装docker\n```shell\n#默认安装最新的docker稳定版本。\nyum install docker-ce\n```\n##### 5.启动docker服务\n```shell\nsystemctl start docker\n```\n##### 6.设置开机自启动\n```shell\nsystemctl enable docker\n```\n##### 7. 查看docker版本信息\n```shell\ndocker version\n```\n![查看docker版本](./docker-01/1.png)\n至此，解决。\n\n##### 8. 停止所有容器\n```shell\ndocker stop $(docker ps -a | awk '{ print $1}' | tail -n +2)\n```\n","source":"_posts/2021/12/docker-01.md","raw":"---\ntitle: docker安装\ncomments: true\ntags: docker\ncategories: Docker\nabbrlink: 8175\ndate: 2021-12-09 21:20:57\ntranslate_title: docker-01\n---\n新的服务器没有安装docker，使用docker命令时提示：docker: command not found错误信息\n##### 1. 更新yum包\n```shell\nyum update\n```\n\n##### 2.安装依赖软件包\n```shell\nyum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n##### 3.设置yum源\n```shell\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n```\n#####  4.安装docker\n```shell\n#默认安装最新的docker稳定版本。\nyum install docker-ce\n```\n##### 5.启动docker服务\n```shell\nsystemctl start docker\n```\n##### 6.设置开机自启动\n```shell\nsystemctl enable docker\n```\n##### 7. 查看docker版本信息\n```shell\ndocker version\n```\n![查看docker版本](./docker-01/1.png)\n至此，解决。\n\n##### 8. 停止所有容器\n```shell\ndocker stop $(docker ps -a | awk '{ print $1}' | tail -n +2)\n```\n","slug":"docker-01","published":1,"updated":"2022-04-02T07:45:56.614Z","layout":"post","photos":[],"link":"","_id":"cl424hx6a004iad5i6gcce91h","content":"<p>新的服务器没有安装docker，使用docker命令时提示：docker: command not found错误信息</p>\n<h5 id=\"1-更新yum包\"><a href=\"#1-更新yum包\" class=\"headerlink\" title=\"1. 更新yum包\"></a>1. 更新yum包</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-安装依赖软件包\"><a href=\"#2-安装依赖软件包\" class=\"headerlink\" title=\"2.安装依赖软件包\"></a>2.安装依赖软件包</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-设置yum源\"><a href=\"#3-设置yum源\" class=\"headerlink\" title=\"3.设置yum源\"></a>3.设置yum源</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-安装docker\"><a href=\"#4-安装docker\" class=\"headerlink\" title=\"4.安装docker\"></a>4.安装docker</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">默认安装最新的docker稳定版本。</span></span><br><span class=\"line\">yum install docker-ce</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-启动docker服务\"><a href=\"#5-启动docker服务\" class=\"headerlink\" title=\"5.启动docker服务\"></a>5.启动docker服务</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n<h5 id=\"6-设置开机自启动\"><a href=\"#6-设置开机自启动\" class=\"headerlink\" title=\"6.设置开机自启动\"></a>6.设置开机自启动</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure>\n<h5 id=\"7-查看docker版本信息\"><a href=\"#7-查看docker版本信息\" class=\"headerlink\" title=\"7. 查看docker版本信息\"></a>7. 查看docker版本信息</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-01/1.png\" alt=\"查看docker版本\"><br>至此，解决。</p>\n<h5 id=\"8-停止所有容器\"><a href=\"#8-停止所有容器\" class=\"headerlink\" title=\"8. 停止所有容器\"></a>8. 停止所有容器</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop $(docker ps -a | awk &#x27;&#123; print $1&#125;&#x27; | tail -n +2)</span><br></pre></td></tr></table></figure>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>新的服务器没有安装docker，使用docker命令时提示：docker: command not found错误信息</p>\n<h5 id=\"1-更新yum包\"><a href=\"#1-更新yum包\" class=\"headerlink\" title=\"1. 更新yum包\"></a>1. 更新yum包</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-安装依赖软件包\"><a href=\"#2-安装依赖软件包\" class=\"headerlink\" title=\"2.安装依赖软件包\"></a>2.安装依赖软件包</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-设置yum源\"><a href=\"#3-设置yum源\" class=\"headerlink\" title=\"3.设置yum源\"></a>3.设置yum源</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-安装docker\"><a href=\"#4-安装docker\" class=\"headerlink\" title=\"4.安装docker\"></a>4.安装docker</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">默认安装最新的docker稳定版本。</span></span><br><span class=\"line\">yum install docker-ce</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-启动docker服务\"><a href=\"#5-启动docker服务\" class=\"headerlink\" title=\"5.启动docker服务\"></a>5.启动docker服务</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n<h5 id=\"6-设置开机自启动\"><a href=\"#6-设置开机自启动\" class=\"headerlink\" title=\"6.设置开机自启动\"></a>6.设置开机自启动</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure>\n<h5 id=\"7-查看docker版本信息\"><a href=\"#7-查看docker版本信息\" class=\"headerlink\" title=\"7. 查看docker版本信息\"></a>7. 查看docker版本信息</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-01/1.png\" alt=\"查看docker版本\"><br>至此，解决。</p>\n<h5 id=\"8-停止所有容器\"><a href=\"#8-停止所有容器\" class=\"headerlink\" title=\"8. 停止所有容器\"></a>8. 停止所有容器</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop $(docker ps -a | awk &#x27;&#123; print $1&#125;&#x27; | tail -n +2)</span><br></pre></td></tr></table></figure>\n"},{"title":"docker安装mysql","comments":1,"abbrlink":12467,"date":"2021-12-09T13:32:36.000Z","translate_title":"docker-02","_content":"##### 1.查看所有的镜像\n```shell\ndocker search mysql\n```\n![](./docker-mysql/1.png)\n##### 2.拉取最新版本的镜像\n```shell\ndocker pull mysql\n\n#或者指定版本\ndocker pull mysql:8.0.16\n```\n![](./docker-mysql/2.png)\n\n##### 3.创建数据目录和配置文件\n```shell\nmkdir -p /usr/mysql/conf /usr/mysql/data\n\nchmod -R 777 /usr/mysql/\n```\n##### 4.创建配置文件\n在上面创建的配置文件目录/usr/mysql/conf下创建MySQL的配置文件my.cnf\n```shell\ntouch my.cnf;\n\nvim /usr/mysql/conf/my.cnf;\n```\n添加以下内容到上述创建的配置文件中\n```properties\n[client]\n#socket = /usr/mysql/mysqld.sock\ndefault-character-set = utf8mb4\n[mysqld]\n#pid-file        = /var/run/mysqld/mysqld.pid\n#socket          = /var/run/mysqld/mysqld.sock\n#datadir         = /var/lib/mysql\n#socket = /usr/mysql/mysqld.sock\n#pid-file = /usr/mysql/mysqld.pid\ndatadir = /usr/mysql/data\ncharacter_set_server = utf8mb4\ncollation_server = utf8mb4_bin\nsecure-file-priv= NULL\n\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\n# Custom config should go here\n!includedir /etc/mysql/conf.d/\n```\n##### 5.启动创建容器\n```shell\ndocker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql\n```\n参数解释：\n```text\n–name mysql5.7 容器别名\n-p 3307:3306 映射容器端口号和宿主机端口号（本机3307端口映射容器3306端口）\n-v /data/mysql/datadir:/var/lib/mysql 目录映射（挂载宿主机目录和 docker容器中的目录，前面是宿主机目录，后面是容器内部目录）\n-v /data/mysql/conf.d:/etc/mysql/conf.d 目录映射（mysql配置目录）\n-d 后台运行\n-e 环境参数，MYSQL_ROOT_PASSWORD设置root用户的密码\n```\n![启动创建容器](./docker-mysql/3.png)\n执行上述命令后，执行查询容器的命令就可以看到创建的mysql容器\n```shell\ndocker ps -a\n```\n![启动创建容器](./docker-mysql/4.png)\n\n##### 常见问题\n\n###### 1.远程无法链接\n上述虽然安装好了mysql，但是使用远程的Navicat连接时提示错误，不能正确连接mysql，此时需要修改按照下面说的步骤修改一下mysql的密码模式以及主机等内容才可以。\n修改mysql密码以及可访问主机\n1. 进入容器内部\n    ```shell\n    docker exec -it mysql /bin/bash\n    ```\n2. 连接mysql\n    ```shell\n    mysql -uroot -p\n    ```\n3. 使用mysql库\n    ```shell\n    use mysql;\n    ```\n4. 修改访问主机以及密码等，设置为所有主机可访问\n    ```shell\n    ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '新密码';\n    \n    #注意： mysql_native_password，mysql8.x版本必须使用这种模式，否则navicate无法正确连接\n    ```\n5. 刷新\n    ```shell\n    flush privileges;\n    \n    exit;\n    ```\n6. 远程使用Navicat连接数据库\n![连接](./docker-mysql/5.png)\n\n###### 2.docker启动mysql容器报错\n```shell\ndocker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql\n```\n启动时提示：Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: Running hook #0:: error running hook: signal: segmentation fault (core dumped), stdout: , stderr:: unknown\n\n![](./docker-mysql/6.png)\n解决方式：\n```shell\nsudo yum upgrade\n```\n或者可以试下\n```shell\nrm -rf /usr/mysql/conf/my.cnf\ntouch /usr/mysql/conf/my.cnf\nvim my.cnf\n\n#然后重新配置一下\n```","source":"_posts/2021/12/docker-mysql.md","raw":"---\ntitle: docker安装mysql\ncomments: true\ntags: mysql\ncategories: Docker\nabbrlink: 12467\ndate: 2021-12-09 21:32:36\ntranslate_title: docker-02\n---\n##### 1.查看所有的镜像\n```shell\ndocker search mysql\n```\n![](./docker-mysql/1.png)\n##### 2.拉取最新版本的镜像\n```shell\ndocker pull mysql\n\n#或者指定版本\ndocker pull mysql:8.0.16\n```\n![](./docker-mysql/2.png)\n\n##### 3.创建数据目录和配置文件\n```shell\nmkdir -p /usr/mysql/conf /usr/mysql/data\n\nchmod -R 777 /usr/mysql/\n```\n##### 4.创建配置文件\n在上面创建的配置文件目录/usr/mysql/conf下创建MySQL的配置文件my.cnf\n```shell\ntouch my.cnf;\n\nvim /usr/mysql/conf/my.cnf;\n```\n添加以下内容到上述创建的配置文件中\n```properties\n[client]\n#socket = /usr/mysql/mysqld.sock\ndefault-character-set = utf8mb4\n[mysqld]\n#pid-file        = /var/run/mysqld/mysqld.pid\n#socket          = /var/run/mysqld/mysqld.sock\n#datadir         = /var/lib/mysql\n#socket = /usr/mysql/mysqld.sock\n#pid-file = /usr/mysql/mysqld.pid\ndatadir = /usr/mysql/data\ncharacter_set_server = utf8mb4\ncollation_server = utf8mb4_bin\nsecure-file-priv= NULL\n\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\n# Custom config should go here\n!includedir /etc/mysql/conf.d/\n```\n##### 5.启动创建容器\n```shell\ndocker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql\n```\n参数解释：\n```text\n–name mysql5.7 容器别名\n-p 3307:3306 映射容器端口号和宿主机端口号（本机3307端口映射容器3306端口）\n-v /data/mysql/datadir:/var/lib/mysql 目录映射（挂载宿主机目录和 docker容器中的目录，前面是宿主机目录，后面是容器内部目录）\n-v /data/mysql/conf.d:/etc/mysql/conf.d 目录映射（mysql配置目录）\n-d 后台运行\n-e 环境参数，MYSQL_ROOT_PASSWORD设置root用户的密码\n```\n![启动创建容器](./docker-mysql/3.png)\n执行上述命令后，执行查询容器的命令就可以看到创建的mysql容器\n```shell\ndocker ps -a\n```\n![启动创建容器](./docker-mysql/4.png)\n\n##### 常见问题\n\n###### 1.远程无法链接\n上述虽然安装好了mysql，但是使用远程的Navicat连接时提示错误，不能正确连接mysql，此时需要修改按照下面说的步骤修改一下mysql的密码模式以及主机等内容才可以。\n修改mysql密码以及可访问主机\n1. 进入容器内部\n    ```shell\n    docker exec -it mysql /bin/bash\n    ```\n2. 连接mysql\n    ```shell\n    mysql -uroot -p\n    ```\n3. 使用mysql库\n    ```shell\n    use mysql;\n    ```\n4. 修改访问主机以及密码等，设置为所有主机可访问\n    ```shell\n    ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '新密码';\n    \n    #注意： mysql_native_password，mysql8.x版本必须使用这种模式，否则navicate无法正确连接\n    ```\n5. 刷新\n    ```shell\n    flush privileges;\n    \n    exit;\n    ```\n6. 远程使用Navicat连接数据库\n![连接](./docker-mysql/5.png)\n\n###### 2.docker启动mysql容器报错\n```shell\ndocker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql\n```\n启动时提示：Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: Running hook #0:: error running hook: signal: segmentation fault (core dumped), stdout: , stderr:: unknown\n\n![](./docker-mysql/6.png)\n解决方式：\n```shell\nsudo yum upgrade\n```\n或者可以试下\n```shell\nrm -rf /usr/mysql/conf/my.cnf\ntouch /usr/mysql/conf/my.cnf\nvim my.cnf\n\n#然后重新配置一下\n```","slug":"docker-mysql","published":1,"updated":"2022-04-02T07:53:19.044Z","layout":"post","photos":[],"link":"","_id":"cl424hx6a004lad5ial1xe94z","content":"<h5 id=\"1-查看所有的镜像\"><a href=\"#1-查看所有的镜像\" class=\"headerlink\" title=\"1.查看所有的镜像\"></a>1.查看所有的镜像</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search mysql</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-mysql/1.png\"></p>\n<h5 id=\"2-拉取最新版本的镜像\"><a href=\"#2-拉取最新版本的镜像\" class=\"headerlink\" title=\"2.拉取最新版本的镜像\"></a>2.拉取最新版本的镜像</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者指定版本</span></span><br><span class=\"line\">docker pull mysql:8.0.16</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-mysql/2.png\"></p>\n<h5 id=\"3-创建数据目录和配置文件\"><a href=\"#3-创建数据目录和配置文件\" class=\"headerlink\" title=\"3.创建数据目录和配置文件\"></a>3.创建数据目录和配置文件</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /usr/mysql/conf /usr/mysql/data</span><br><span class=\"line\"></span><br><span class=\"line\">chmod -R 777 /usr/mysql/</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-创建配置文件\"><a href=\"#4-创建配置文件\" class=\"headerlink\" title=\"4.创建配置文件\"></a>4.创建配置文件</h5><p>在上面创建的配置文件目录/usr/mysql/conf下创建MySQL的配置文件my.cnf</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch my.cnf;</span><br><span class=\"line\"></span><br><span class=\"line\">vim /usr/mysql/conf/my.cnf;</span><br></pre></td></tr></table></figure>\n<p>添加以下内容到上述创建的配置文件中</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">[client]</span></span><br><span class=\"line\"><span class=\"comment\">#socket = /usr/mysql/mysqld.sock</span></span><br><span class=\"line\"><span class=\"meta\">default-character-set</span> = <span class=\"string\">utf8mb4</span></span><br><span class=\"line\"><span class=\"attr\">[mysqld]</span></span><br><span class=\"line\"><span class=\"comment\">#pid-file        = /var/run/mysqld/mysqld.pid</span></span><br><span class=\"line\"><span class=\"comment\">#socket          = /var/run/mysqld/mysqld.sock</span></span><br><span class=\"line\"><span class=\"comment\">#datadir         = /var/lib/mysql</span></span><br><span class=\"line\"><span class=\"comment\">#socket = /usr/mysql/mysqld.sock</span></span><br><span class=\"line\"><span class=\"comment\">#pid-file = /usr/mysql/mysqld.pid</span></span><br><span class=\"line\"><span class=\"attr\">datadir</span> = <span class=\"string\">/usr/mysql/data</span></span><br><span class=\"line\"><span class=\"attr\">character_set_server</span> = <span class=\"string\">utf8mb4</span></span><br><span class=\"line\"><span class=\"attr\">collation_server</span> = <span class=\"string\">utf8mb4_bin</span></span><br><span class=\"line\"><span class=\"meta\">secure-file-priv</span>= <span class=\"string\">NULL</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\"><span class=\"meta\">symbolic-links</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"comment\"># Custom config should go here</span></span><br><span class=\"line\"><span class=\"comment\">!includedir /etc/mysql/conf.d/</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"5-启动创建容器\"><a href=\"#5-启动创建容器\" class=\"headerlink\" title=\"5.启动创建容器\"></a>5.启动创建容器</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql</span><br></pre></td></tr></table></figure>\n<p>参数解释：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">–name mysql5.7 容器别名</span><br><span class=\"line\">-p 3307:3306 映射容器端口号和宿主机端口号（本机3307端口映射容器3306端口）</span><br><span class=\"line\">-v /data/mysql/datadir:/var/lib/mysql 目录映射（挂载宿主机目录和 docker容器中的目录，前面是宿主机目录，后面是容器内部目录）</span><br><span class=\"line\">-v /data/mysql/conf.d:/etc/mysql/conf.d 目录映射（mysql配置目录）</span><br><span class=\"line\">-d 后台运行</span><br><span class=\"line\">-e 环境参数，MYSQL_ROOT_PASSWORD设置root用户的密码</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-mysql/3.png\" alt=\"启动创建容器\"><br>执行上述命令后，执行查询容器的命令就可以看到创建的mysql容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-mysql/4.png\" alt=\"启动创建容器\"></p>\n<h5 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h5><h6 id=\"1-远程无法链接\"><a href=\"#1-远程无法链接\" class=\"headerlink\" title=\"1.远程无法链接\"></a>1.远程无法链接</h6><p>上述虽然安装好了mysql，但是使用远程的Navicat连接时提示错误，不能正确连接mysql，此时需要修改按照下面说的步骤修改一下mysql的密码模式以及主机等内容才可以。<br>修改mysql密码以及可访问主机</p>\n<ol>\n<li>进入容器内部 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure></li>\n<li>连接mysql <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br></pre></td></tr></table></figure></li>\n<li>使用mysql库 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br></pre></td></tr></table></figure></li>\n<li>修改访问主机以及密码等，设置为所有主机可访问 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注意： mysql_native_password，mysql8.x版本必须使用这种模式，否则navicate无法正确连接</span></span><br></pre></td></tr></table></figure></li>\n<li>刷新 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\">exit;</span><br></pre></td></tr></table></figure></li>\n<li>远程使用Navicat连接数据库<br><img src=\"/docker-mysql/5.png\" alt=\"连接\"></li>\n</ol>\n<h6 id=\"2-docker启动mysql容器报错\"><a href=\"#2-docker启动mysql容器报错\" class=\"headerlink\" title=\"2.docker启动mysql容器报错\"></a>2.docker启动mysql容器报错</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql</span><br></pre></td></tr></table></figure>\n<p>启动时提示：Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: Running hook #0:: error running hook: signal: segmentation fault (core dumped), stdout: , stderr:: unknown</p>\n<p><img src=\"/docker-mysql/6.png\"><br>解决方式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum upgrade</span><br></pre></td></tr></table></figure>\n<p>或者可以试下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /usr/mysql/conf/my.cnf</span><br><span class=\"line\">touch /usr/mysql/conf/my.cnf</span><br><span class=\"line\">vim my.cnf</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">然后重新配置一下</span></span><br></pre></td></tr></table></figure>","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h5 id=\"1-查看所有的镜像\"><a href=\"#1-查看所有的镜像\" class=\"headerlink\" title=\"1.查看所有的镜像\"></a>1.查看所有的镜像</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search mysql</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-mysql/1.png\"></p>\n<h5 id=\"2-拉取最新版本的镜像\"><a href=\"#2-拉取最新版本的镜像\" class=\"headerlink\" title=\"2.拉取最新版本的镜像\"></a>2.拉取最新版本的镜像</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者指定版本</span></span><br><span class=\"line\">docker pull mysql:8.0.16</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-mysql/2.png\"></p>\n<h5 id=\"3-创建数据目录和配置文件\"><a href=\"#3-创建数据目录和配置文件\" class=\"headerlink\" title=\"3.创建数据目录和配置文件\"></a>3.创建数据目录和配置文件</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /usr/mysql/conf /usr/mysql/data</span><br><span class=\"line\"></span><br><span class=\"line\">chmod -R 777 /usr/mysql/</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-创建配置文件\"><a href=\"#4-创建配置文件\" class=\"headerlink\" title=\"4.创建配置文件\"></a>4.创建配置文件</h5><p>在上面创建的配置文件目录/usr/mysql/conf下创建MySQL的配置文件my.cnf</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch my.cnf;</span><br><span class=\"line\"></span><br><span class=\"line\">vim /usr/mysql/conf/my.cnf;</span><br></pre></td></tr></table></figure>\n<p>添加以下内容到上述创建的配置文件中</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">[client]</span></span><br><span class=\"line\"><span class=\"comment\">#socket = /usr/mysql/mysqld.sock</span></span><br><span class=\"line\"><span class=\"meta\">default-character-set</span> = <span class=\"string\">utf8mb4</span></span><br><span class=\"line\"><span class=\"attr\">[mysqld]</span></span><br><span class=\"line\"><span class=\"comment\">#pid-file        = /var/run/mysqld/mysqld.pid</span></span><br><span class=\"line\"><span class=\"comment\">#socket          = /var/run/mysqld/mysqld.sock</span></span><br><span class=\"line\"><span class=\"comment\">#datadir         = /var/lib/mysql</span></span><br><span class=\"line\"><span class=\"comment\">#socket = /usr/mysql/mysqld.sock</span></span><br><span class=\"line\"><span class=\"comment\">#pid-file = /usr/mysql/mysqld.pid</span></span><br><span class=\"line\"><span class=\"attr\">datadir</span> = <span class=\"string\">/usr/mysql/data</span></span><br><span class=\"line\"><span class=\"attr\">character_set_server</span> = <span class=\"string\">utf8mb4</span></span><br><span class=\"line\"><span class=\"attr\">collation_server</span> = <span class=\"string\">utf8mb4_bin</span></span><br><span class=\"line\"><span class=\"meta\">secure-file-priv</span>= <span class=\"string\">NULL</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\"><span class=\"meta\">symbolic-links</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"comment\"># Custom config should go here</span></span><br><span class=\"line\"><span class=\"comment\">!includedir /etc/mysql/conf.d/</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"5-启动创建容器\"><a href=\"#5-启动创建容器\" class=\"headerlink\" title=\"5.启动创建容器\"></a>5.启动创建容器</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql</span><br></pre></td></tr></table></figure>\n<p>参数解释：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">–name mysql5.7 容器别名</span><br><span class=\"line\">-p 3307:3306 映射容器端口号和宿主机端口号（本机3307端口映射容器3306端口）</span><br><span class=\"line\">-v /data/mysql/datadir:/var/lib/mysql 目录映射（挂载宿主机目录和 docker容器中的目录，前面是宿主机目录，后面是容器内部目录）</span><br><span class=\"line\">-v /data/mysql/conf.d:/etc/mysql/conf.d 目录映射（mysql配置目录）</span><br><span class=\"line\">-d 后台运行</span><br><span class=\"line\">-e 环境参数，MYSQL_ROOT_PASSWORD设置root用户的密码</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-mysql/3.png\" alt=\"启动创建容器\"><br>执行上述命令后，执行查询容器的命令就可以看到创建的mysql容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-mysql/4.png\" alt=\"启动创建容器\"></p>\n<h5 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h5><h6 id=\"1-远程无法链接\"><a href=\"#1-远程无法链接\" class=\"headerlink\" title=\"1.远程无法链接\"></a>1.远程无法链接</h6><p>上述虽然安装好了mysql，但是使用远程的Navicat连接时提示错误，不能正确连接mysql，此时需要修改按照下面说的步骤修改一下mysql的密码模式以及主机等内容才可以。<br>修改mysql密码以及可访问主机</p>\n<ol>\n<li>进入容器内部 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure></li>\n<li>连接mysql <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br></pre></td></tr></table></figure></li>\n<li>使用mysql库 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br></pre></td></tr></table></figure></li>\n<li>修改访问主机以及密码等，设置为所有主机可访问 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注意： mysql_native_password，mysql8.x版本必须使用这种模式，否则navicate无法正确连接</span></span><br></pre></td></tr></table></figure></li>\n<li>刷新 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\">exit;</span><br></pre></td></tr></table></figure></li>\n<li>远程使用Navicat连接数据库<br><img src=\"/docker-mysql/5.png\" alt=\"连接\"></li>\n</ol>\n<h6 id=\"2-docker启动mysql容器报错\"><a href=\"#2-docker启动mysql容器报错\" class=\"headerlink\" title=\"2.docker启动mysql容器报错\"></a>2.docker启动mysql容器报错</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql</span><br></pre></td></tr></table></figure>\n<p>启动时提示：Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: Running hook #0:: error running hook: signal: segmentation fault (core dumped), stdout: , stderr:: unknown</p>\n<p><img src=\"/docker-mysql/6.png\"><br>解决方式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum upgrade</span><br></pre></td></tr></table></figure>\n<p>或者可以试下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /usr/mysql/conf/my.cnf</span><br><span class=\"line\">touch /usr/mysql/conf/my.cnf</span><br><span class=\"line\">vim my.cnf</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">然后重新配置一下</span></span><br></pre></td></tr></table></figure>"},{"title":"docker安装nginx","comments":1,"abbrlink":57560,"date":"2021-12-09T13:47:19.000Z","translate_title":"docker-03","_content":"##### 1.查看所有的镜像\n```shell\ndocker search nginx\n```\n![](./docker-nginx/1.png)\n##### 2.拉取最新版本的镜像\n```shell\ndocker pull nginx\n\n#或者指定最新版本\ndocker pull nginx:latest\n```\n![](./docker-nginx/2.png)\n\n##### 3.使用命令查看本地镜像，确定nginx镜像已下载到本地\n```shell\ndocker images\n```\n![](./docker-nginx/3.png)\n##### 4. 创建挂载目录\n```shell\nmkdir -p /data/nginx/{conf,conf.d,html,logs}\n```\n##### 5. 创建配置文件\n```shell\ntouch nginx.cnf\n```\n##### 6. Nginx详情配置请参考：https://xiaoyuge.work/2021/12/05/nginx-02/\n\n##### 7. 查看容器\n```shell\ndocker ps -a\n\n# docker stop xxx  停止某个容器运行\n# docker rm xxx  删除容器\n```\n![查看容器](./docker-nginx/6.png)\n##### 8.启动容器，挂载配置文件\n```shell\ndocker run --name mynginx -d -p 80:80 -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /data/nginx/logs:/var/log/nginx -d docker.io/nginx\n```\n可以通过命令docker exec -it nginx-test bash进入容器内容修改配置\n\n![](./docker-nginx/4.png)\n##### 9.安装完毕，访问地址 http://localhost:8080，出现如下内容，安装成功！！！\n![](./docker-nginx/5.png)\n\n##### 10.域名解析配置\n我买的是阿里云的服务器以及域名，上面操作后，忘记在阿里云控制台中去配置\n![](./docker-nginx/7.png)\n![域名解析](./docker-nginx/8.png)\n\n##### 11.配置多个二级域名\n在第8步的时候将docker容器中的nginx配置映射到了目录/data/nginx/conf下面；\n修改nginx.conf\n```text\n\nuser  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    access_log  /var/log/nginx/access.log  main;\n    sendfile        on;\n    #tcp_nopush     on;\n    keepalive_timeout  65;\n    #gzip  on;\n    \n    #引入conf.d下面所有的配置文件\n    include /etc/nginx/conf.d/*.conf;\n}\n```\n然后在conf.d目录下面创建了两个子域名反向代理配置文件,其他的域名代理相同，只要改server_name和proxy_pass代理端口，配置文件需以.conf结尾\n![域名解析](./docker-nginx/8.png)\n- note.xiaoyuge520.vip.conf\n  ```text\n        ########   Nginx的main(全局配置)文件\n        #指定nginx运行的用户及用户组,默认为nobody\n        #user  nobody;\n        #开启的线程数，一般跟逻辑CPU核数一致\n        worker_processes  1;\n        events {\n        #设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式\n        #use epoll;\n            #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。\n            worker_connections  1024;\n        }\n        #######Nginx的Http服务器配置,Gzip配置\n        http {\n            include       mime.types;\n            #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式\n            default_type  application/octet-stream;\n            #开启高效文件传输模式\n            sendfile        on;\n            keepalive_timeout  65;\n            ########Nginx的server虚拟主机配置\n            server {\n                #监听端口为 80\n                listen       80;\n                #设置主机域名\n                server_name  note.xiaoyuge520.vip;\n                #设置访问的语言编码\n                #charset koi8-r;\n                #设置虚拟主机访问日志的存放路径及日志的格式为main\n                #access_log  logs/host.access.log  main;\n        \n                #设置虚拟主机的基本信息\n                location / {\n                    proxy_set_header  Host  $http_host;\n                    proxy_set_header  X-Real-IP  $remote_addr;\n                    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n                    proxy_pass http://47.101.130.163:8086/note; # 代理ip:端口\n                }\n                error_page   500 502 503 504  /50x.html;\n                location = /50x.html {\n                    root   html;\n                }\n            }\n        }\n    ```\n  \n- record.xiaoyuge520.vip.conf\n    ```text\n        worker_processes  1;\n        events {\n            worker_connections  1024;\n        }\n        #######Nginx的Http服务器配置,Gzip配置\n        http {\n            include       mime.types;\n            default_type  application/octet-stream;\n            sendfile        on;\n            keepalive_timeout  65;\n            server {\n                listen       80;\n                server_name  record.xiaoyuge520.vip;\n                #access_log  logs/host.access.log  main;\n                location / {\n                    proxy_set_header  Host  $http_host;\n                    proxy_set_header  X-Real-IP  $remote_addr;\n                    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n                    proxy_pass http://47.101.130.163:8888/record; # 代理ip:端口\n                }\n                error_page   500 502 503 504  /50x.html;\n                location = /50x.html {\n                    root   html;\n                }\n            }\n        }\n    ```\n  \n**如果挂载之后容器运行正常却依然不能通过域名访问可尝试以下操作**\n  ```shell\n  #查看所有容器,获取nginx的container 名称\n  docker ps -a\n  \n  #向名称为nginx的容器发送脚本命令, mynginx 为容器名称\n  docker exec -it mynginx /bin/bash\n  \n  #重新加载配置命令\n  cd /etc/nginx/conf.d\n  service nginx reload\n  #检查配置文件路径是否正确\n  ```\n  \n**每一次更改配置文件都需要重启容器**\n  ```shell\n    # 重启nginx容器\n    docker restart nginx \n  \n    #查看容器状态\n    docker ps\n  \n    #如果挂载失败，查看nginx容器log,显示错误信息，根据错误信息 更改配置文件等\n    docker logs -t nginx\n  ```\n---\n\n以上配置完成之后能够通过域名访问网站，但是css样式却被nginx解析成text/plain，打开控制台可看到warn信息\n\n**解决nginx将css文件解析为text/plain**\n- 方法一： ngin.conf中http添加：\n  ```text\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n  ```\n  注：此办法并不能使我网站的css正确解析，因为在拷贝nginx镜像中的原配置文件时，就已经添加mime.types了。却依然不能正确解析。\n\n- 方法二：解析成功，原因未知\n  ```html\n  将index.html中<!DOCTYPE html>去掉。\n  ```\n通过域名访问：成功！！\n","source":"_posts/2021/12/docker-nginx.md","raw":"---\ntitle: docker安装nginx\ncomments: true\ntags: nginx\ncategories: Docker\nabbrlink: 57560\ndate: 2021-12-09 21:47:19\ntranslate_title: docker-03\n---\n##### 1.查看所有的镜像\n```shell\ndocker search nginx\n```\n![](./docker-nginx/1.png)\n##### 2.拉取最新版本的镜像\n```shell\ndocker pull nginx\n\n#或者指定最新版本\ndocker pull nginx:latest\n```\n![](./docker-nginx/2.png)\n\n##### 3.使用命令查看本地镜像，确定nginx镜像已下载到本地\n```shell\ndocker images\n```\n![](./docker-nginx/3.png)\n##### 4. 创建挂载目录\n```shell\nmkdir -p /data/nginx/{conf,conf.d,html,logs}\n```\n##### 5. 创建配置文件\n```shell\ntouch nginx.cnf\n```\n##### 6. Nginx详情配置请参考：https://xiaoyuge.work/2021/12/05/nginx-02/\n\n##### 7. 查看容器\n```shell\ndocker ps -a\n\n# docker stop xxx  停止某个容器运行\n# docker rm xxx  删除容器\n```\n![查看容器](./docker-nginx/6.png)\n##### 8.启动容器，挂载配置文件\n```shell\ndocker run --name mynginx -d -p 80:80 -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /data/nginx/logs:/var/log/nginx -d docker.io/nginx\n```\n可以通过命令docker exec -it nginx-test bash进入容器内容修改配置\n\n![](./docker-nginx/4.png)\n##### 9.安装完毕，访问地址 http://localhost:8080，出现如下内容，安装成功！！！\n![](./docker-nginx/5.png)\n\n##### 10.域名解析配置\n我买的是阿里云的服务器以及域名，上面操作后，忘记在阿里云控制台中去配置\n![](./docker-nginx/7.png)\n![域名解析](./docker-nginx/8.png)\n\n##### 11.配置多个二级域名\n在第8步的时候将docker容器中的nginx配置映射到了目录/data/nginx/conf下面；\n修改nginx.conf\n```text\n\nuser  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    access_log  /var/log/nginx/access.log  main;\n    sendfile        on;\n    #tcp_nopush     on;\n    keepalive_timeout  65;\n    #gzip  on;\n    \n    #引入conf.d下面所有的配置文件\n    include /etc/nginx/conf.d/*.conf;\n}\n```\n然后在conf.d目录下面创建了两个子域名反向代理配置文件,其他的域名代理相同，只要改server_name和proxy_pass代理端口，配置文件需以.conf结尾\n![域名解析](./docker-nginx/8.png)\n- note.xiaoyuge520.vip.conf\n  ```text\n        ########   Nginx的main(全局配置)文件\n        #指定nginx运行的用户及用户组,默认为nobody\n        #user  nobody;\n        #开启的线程数，一般跟逻辑CPU核数一致\n        worker_processes  1;\n        events {\n        #设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式\n        #use epoll;\n            #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。\n            worker_connections  1024;\n        }\n        #######Nginx的Http服务器配置,Gzip配置\n        http {\n            include       mime.types;\n            #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式\n            default_type  application/octet-stream;\n            #开启高效文件传输模式\n            sendfile        on;\n            keepalive_timeout  65;\n            ########Nginx的server虚拟主机配置\n            server {\n                #监听端口为 80\n                listen       80;\n                #设置主机域名\n                server_name  note.xiaoyuge520.vip;\n                #设置访问的语言编码\n                #charset koi8-r;\n                #设置虚拟主机访问日志的存放路径及日志的格式为main\n                #access_log  logs/host.access.log  main;\n        \n                #设置虚拟主机的基本信息\n                location / {\n                    proxy_set_header  Host  $http_host;\n                    proxy_set_header  X-Real-IP  $remote_addr;\n                    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n                    proxy_pass http://47.101.130.163:8086/note; # 代理ip:端口\n                }\n                error_page   500 502 503 504  /50x.html;\n                location = /50x.html {\n                    root   html;\n                }\n            }\n        }\n    ```\n  \n- record.xiaoyuge520.vip.conf\n    ```text\n        worker_processes  1;\n        events {\n            worker_connections  1024;\n        }\n        #######Nginx的Http服务器配置,Gzip配置\n        http {\n            include       mime.types;\n            default_type  application/octet-stream;\n            sendfile        on;\n            keepalive_timeout  65;\n            server {\n                listen       80;\n                server_name  record.xiaoyuge520.vip;\n                #access_log  logs/host.access.log  main;\n                location / {\n                    proxy_set_header  Host  $http_host;\n                    proxy_set_header  X-Real-IP  $remote_addr;\n                    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n                    proxy_pass http://47.101.130.163:8888/record; # 代理ip:端口\n                }\n                error_page   500 502 503 504  /50x.html;\n                location = /50x.html {\n                    root   html;\n                }\n            }\n        }\n    ```\n  \n**如果挂载之后容器运行正常却依然不能通过域名访问可尝试以下操作**\n  ```shell\n  #查看所有容器,获取nginx的container 名称\n  docker ps -a\n  \n  #向名称为nginx的容器发送脚本命令, mynginx 为容器名称\n  docker exec -it mynginx /bin/bash\n  \n  #重新加载配置命令\n  cd /etc/nginx/conf.d\n  service nginx reload\n  #检查配置文件路径是否正确\n  ```\n  \n**每一次更改配置文件都需要重启容器**\n  ```shell\n    # 重启nginx容器\n    docker restart nginx \n  \n    #查看容器状态\n    docker ps\n  \n    #如果挂载失败，查看nginx容器log,显示错误信息，根据错误信息 更改配置文件等\n    docker logs -t nginx\n  ```\n---\n\n以上配置完成之后能够通过域名访问网站，但是css样式却被nginx解析成text/plain，打开控制台可看到warn信息\n\n**解决nginx将css文件解析为text/plain**\n- 方法一： ngin.conf中http添加：\n  ```text\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n  ```\n  注：此办法并不能使我网站的css正确解析，因为在拷贝nginx镜像中的原配置文件时，就已经添加mime.types了。却依然不能正确解析。\n\n- 方法二：解析成功，原因未知\n  ```html\n  将index.html中<!DOCTYPE html>去掉。\n  ```\n通过域名访问：成功！！\n","slug":"docker-nginx","published":1,"updated":"2022-03-27T14:06:03.386Z","layout":"post","photos":[],"link":"","_id":"cl424hx6b004pad5i3wfjbi3i","content":"<h5 id=\"1-查看所有的镜像\"><a href=\"#1-查看所有的镜像\" class=\"headerlink\" title=\"1.查看所有的镜像\"></a>1.查看所有的镜像</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search nginx</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-nginx/1.png\"></p>\n<h5 id=\"2-拉取最新版本的镜像\"><a href=\"#2-拉取最新版本的镜像\" class=\"headerlink\" title=\"2.拉取最新版本的镜像\"></a>2.拉取最新版本的镜像</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者指定最新版本</span></span><br><span class=\"line\">docker pull nginx:latest</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-nginx/2.png\"></p>\n<h5 id=\"3-使用命令查看本地镜像，确定nginx镜像已下载到本地\"><a href=\"#3-使用命令查看本地镜像，确定nginx镜像已下载到本地\" class=\"headerlink\" title=\"3.使用命令查看本地镜像，确定nginx镜像已下载到本地\"></a>3.使用命令查看本地镜像，确定nginx镜像已下载到本地</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-nginx/3.png\"></p>\n<h5 id=\"4-创建挂载目录\"><a href=\"#4-创建挂载目录\" class=\"headerlink\" title=\"4. 创建挂载目录\"></a>4. 创建挂载目录</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/nginx/&#123;conf,conf.d,html,logs&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-创建配置文件\"><a href=\"#5-创建配置文件\" class=\"headerlink\" title=\"5. 创建配置文件\"></a>5. 创建配置文件</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch nginx.cnf</span><br></pre></td></tr></table></figure>\n<h5 id=\"6-Nginx详情配置请参考：https-xiaoyuge-work-2021-12-05-nginx-02\"><a href=\"#6-Nginx详情配置请参考：https-xiaoyuge-work-2021-12-05-nginx-02\" class=\"headerlink\" title=\"6. Nginx详情配置请参考：https://xiaoyuge.work/2021/12/05/nginx-02/\"></a>6. Nginx详情配置请参考：<a href=\"https://xiaoyuge.work/2021/12/05/nginx-02/\">https://xiaoyuge.work/2021/12/05/nginx-02/</a></h5><h5 id=\"7-查看容器\"><a href=\"#7-查看容器\" class=\"headerlink\" title=\"7. 查看容器\"></a>7. 查看容器</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker stop xxx  停止某个容器运行</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker rm xxx  删除容器</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-nginx/6.png\" alt=\"查看容器\"></p>\n<h5 id=\"8-启动容器，挂载配置文件\"><a href=\"#8-启动容器，挂载配置文件\" class=\"headerlink\" title=\"8.启动容器，挂载配置文件\"></a>8.启动容器，挂载配置文件</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mynginx -d -p 80:80 -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /data/nginx/logs:/var/log/nginx -d docker.io/nginx</span><br></pre></td></tr></table></figure>\n<p>可以通过命令docker exec -it nginx-test bash进入容器内容修改配置</p>\n<p><img src=\"/docker-nginx/4.png\"></p>\n<h5 id=\"9-安装完毕，访问地址-http-localhost-8080，出现如下内容，安装成功！！！\"><a href=\"#9-安装完毕，访问地址-http-localhost-8080，出现如下内容，安装成功！！！\" class=\"headerlink\" title=\"9.安装完毕，访问地址 http://localhost:8080，出现如下内容，安装成功！！！\"></a>9.安装完毕，访问地址 <a href=\"http://localhost:8080，出现如下内容，安装成功！！！\">http://localhost:8080，出现如下内容，安装成功！！！</a></h5><p><img src=\"/docker-nginx/5.png\"></p>\n<h5 id=\"10-域名解析配置\"><a href=\"#10-域名解析配置\" class=\"headerlink\" title=\"10.域名解析配置\"></a>10.域名解析配置</h5><p>我买的是阿里云的服务器以及域名，上面操作后，忘记在阿里云控制台中去配置<br><img src=\"/docker-nginx/7.png\"><br><img src=\"/docker-nginx/8.png\" alt=\"域名解析\"></p>\n<h5 id=\"11-配置多个二级域名\"><a href=\"#11-配置多个二级域名\" class=\"headerlink\" title=\"11.配置多个二级域名\"></a>11.配置多个二级域名</h5><p>在第8步的时候将docker容器中的nginx配置映射到了目录/data/nginx/conf下面；<br>修改nginx.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">user  nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">    </span><br><span class=\"line\">    #引入conf.d下面所有的配置文件</span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在conf.d目录下面创建了两个子域名反向代理配置文件,其他的域名代理相同，只要改server_name和proxy_pass代理端口，配置文件需以.conf结尾<br><img src=\"/docker-nginx/8.png\" alt=\"域名解析\"></p>\n<ul>\n<li>note.xiaoyuge520.vip.conf<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">########   Nginx的main(全局配置)文件</span><br><span class=\"line\">#指定nginx运行的用户及用户组,默认为nobody</span><br><span class=\"line\">#user  nobody;</span><br><span class=\"line\">#开启的线程数，一般跟逻辑CPU核数一致</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">#设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式</span><br><span class=\"line\">#use epoll;</span><br><span class=\"line\">    #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#######Nginx的Http服务器配置,Gzip配置</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    #开启高效文件传输模式</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    ########Nginx的server虚拟主机配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        #监听端口为 80</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        #设置主机域名</span><br><span class=\"line\">        server_name  note.xiaoyuge520.vip;</span><br><span class=\"line\">        #设置访问的语言编码</span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\">        #设置虚拟主机访问日志的存放路径及日志的格式为main</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置虚拟主机的基本信息</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_set_header  Host  $http_host;</span><br><span class=\"line\">            proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class=\"line\">            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_pass http://47.101.130.163:8086/note; # 代理ip:端口</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>record.xiaoyuge520.vip.conf  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#######Nginx的Http服务器配置,Gzip配置</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  record.xiaoyuge520.vip;</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_set_header  Host  $http_host;</span><br><span class=\"line\">            proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class=\"line\">            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_pass http://47.101.130.163:8888/record; # 代理ip:端口</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>如果挂载之后容器运行正常却依然不能通过域名访问可尝试以下操作</strong><br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看所有容器,获取nginx的container 名称</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">向名称为nginx的容器发送脚本命令, mynginx 为容器名称</span></span><br><span class=\"line\">docker exec -it mynginx /bin/bash</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重新加载配置命令</span></span><br><span class=\"line\">cd /etc/nginx/conf.d</span><br><span class=\"line\">service nginx reload</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">检查配置文件路径是否正确</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>每一次更改配置文件都需要重启容器</strong><br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启nginx容器</span></span><br><span class=\"line\">docker restart nginx </span><br><span class=\"line\"><span class=\"meta\">  </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看容器状态</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"><span class=\"meta\">  </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果挂载失败，查看nginx容器<span class=\"built_in\">log</span>,显示错误信息，根据错误信息 更改配置文件等</span></span><br><span class=\"line\">docker logs -t nginx</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>以上配置完成之后能够通过域名访问网站，但是css样式却被nginx解析成text/plain，打开控制台可看到warn信息</p>\n<p><strong>解决nginx将css文件解析为text/plain</strong></p>\n<ul>\n<li><p>方法一： ngin.conf中http添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include       /etc/nginx/mime.types;</span><br><span class=\"line\">default_type  application/octet-stream;</span><br></pre></td></tr></table></figure>\n<p>注：此办法并不能使我网站的css正确解析，因为在拷贝nginx镜像中的原配置文件时，就已经添加mime.types了。却依然不能正确解析。</p>\n</li>\n<li><p>方法二：解析成功，原因未知</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将index.html中<span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span>去掉。</span><br></pre></td></tr></table></figure>\n<p>通过域名访问：成功！！</p>\n</li>\n</ul>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h5 id=\"1-查看所有的镜像\"><a href=\"#1-查看所有的镜像\" class=\"headerlink\" title=\"1.查看所有的镜像\"></a>1.查看所有的镜像</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search nginx</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-nginx/1.png\"></p>\n<h5 id=\"2-拉取最新版本的镜像\"><a href=\"#2-拉取最新版本的镜像\" class=\"headerlink\" title=\"2.拉取最新版本的镜像\"></a>2.拉取最新版本的镜像</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者指定最新版本</span></span><br><span class=\"line\">docker pull nginx:latest</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-nginx/2.png\"></p>\n<h5 id=\"3-使用命令查看本地镜像，确定nginx镜像已下载到本地\"><a href=\"#3-使用命令查看本地镜像，确定nginx镜像已下载到本地\" class=\"headerlink\" title=\"3.使用命令查看本地镜像，确定nginx镜像已下载到本地\"></a>3.使用命令查看本地镜像，确定nginx镜像已下载到本地</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-nginx/3.png\"></p>\n<h5 id=\"4-创建挂载目录\"><a href=\"#4-创建挂载目录\" class=\"headerlink\" title=\"4. 创建挂载目录\"></a>4. 创建挂载目录</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/nginx/&#123;conf,conf.d,html,logs&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-创建配置文件\"><a href=\"#5-创建配置文件\" class=\"headerlink\" title=\"5. 创建配置文件\"></a>5. 创建配置文件</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch nginx.cnf</span><br></pre></td></tr></table></figure>\n<h5 id=\"6-Nginx详情配置请参考：https-xiaoyuge-work-2021-12-05-nginx-02\"><a href=\"#6-Nginx详情配置请参考：https-xiaoyuge-work-2021-12-05-nginx-02\" class=\"headerlink\" title=\"6. Nginx详情配置请参考：https://xiaoyuge.work/2021/12/05/nginx-02/\"></a>6. Nginx详情配置请参考：<a href=\"https://xiaoyuge.work/2021/12/05/nginx-02/\">https://xiaoyuge.work/2021/12/05/nginx-02/</a></h5><h5 id=\"7-查看容器\"><a href=\"#7-查看容器\" class=\"headerlink\" title=\"7. 查看容器\"></a>7. 查看容器</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker stop xxx  停止某个容器运行</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker rm xxx  删除容器</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-nginx/6.png\" alt=\"查看容器\"></p>\n<h5 id=\"8-启动容器，挂载配置文件\"><a href=\"#8-启动容器，挂载配置文件\" class=\"headerlink\" title=\"8.启动容器，挂载配置文件\"></a>8.启动容器，挂载配置文件</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mynginx -d -p 80:80 -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /data/nginx/logs:/var/log/nginx -d docker.io/nginx</span><br></pre></td></tr></table></figure>\n<p>可以通过命令docker exec -it nginx-test bash进入容器内容修改配置</p>\n<p><img src=\"/docker-nginx/4.png\"></p>\n<h5 id=\"9-安装完毕，访问地址-http-localhost-8080，出现如下内容，安装成功！！！\"><a href=\"#9-安装完毕，访问地址-http-localhost-8080，出现如下内容，安装成功！！！\" class=\"headerlink\" title=\"9.安装完毕，访问地址 http://localhost:8080，出现如下内容，安装成功！！！\"></a>9.安装完毕，访问地址 <a href=\"http://localhost:8080，出现如下内容，安装成功！！！\">http://localhost:8080，出现如下内容，安装成功！！！</a></h5><p><img src=\"/docker-nginx/5.png\"></p>\n<h5 id=\"10-域名解析配置\"><a href=\"#10-域名解析配置\" class=\"headerlink\" title=\"10.域名解析配置\"></a>10.域名解析配置</h5><p>我买的是阿里云的服务器以及域名，上面操作后，忘记在阿里云控制台中去配置<br><img src=\"/docker-nginx/7.png\"><br><img src=\"/docker-nginx/8.png\" alt=\"域名解析\"></p>\n<h5 id=\"11-配置多个二级域名\"><a href=\"#11-配置多个二级域名\" class=\"headerlink\" title=\"11.配置多个二级域名\"></a>11.配置多个二级域名</h5><p>在第8步的时候将docker容器中的nginx配置映射到了目录/data/nginx/conf下面；<br>修改nginx.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">user  nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">    </span><br><span class=\"line\">    #引入conf.d下面所有的配置文件</span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在conf.d目录下面创建了两个子域名反向代理配置文件,其他的域名代理相同，只要改server_name和proxy_pass代理端口，配置文件需以.conf结尾<br><img src=\"/docker-nginx/8.png\" alt=\"域名解析\"></p>\n<ul>\n<li>note.xiaoyuge520.vip.conf<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">########   Nginx的main(全局配置)文件</span><br><span class=\"line\">#指定nginx运行的用户及用户组,默认为nobody</span><br><span class=\"line\">#user  nobody;</span><br><span class=\"line\">#开启的线程数，一般跟逻辑CPU核数一致</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">#设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式</span><br><span class=\"line\">#use epoll;</span><br><span class=\"line\">    #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#######Nginx的Http服务器配置,Gzip配置</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    #开启高效文件传输模式</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    ########Nginx的server虚拟主机配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        #监听端口为 80</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        #设置主机域名</span><br><span class=\"line\">        server_name  note.xiaoyuge520.vip;</span><br><span class=\"line\">        #设置访问的语言编码</span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\">        #设置虚拟主机访问日志的存放路径及日志的格式为main</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置虚拟主机的基本信息</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_set_header  Host  $http_host;</span><br><span class=\"line\">            proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class=\"line\">            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_pass http://47.101.130.163:8086/note; # 代理ip:端口</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>record.xiaoyuge520.vip.conf  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#######Nginx的Http服务器配置,Gzip配置</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  record.xiaoyuge520.vip;</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_set_header  Host  $http_host;</span><br><span class=\"line\">            proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class=\"line\">            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_pass http://47.101.130.163:8888/record; # 代理ip:端口</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>如果挂载之后容器运行正常却依然不能通过域名访问可尝试以下操作</strong><br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看所有容器,获取nginx的container 名称</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">向名称为nginx的容器发送脚本命令, mynginx 为容器名称</span></span><br><span class=\"line\">docker exec -it mynginx /bin/bash</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重新加载配置命令</span></span><br><span class=\"line\">cd /etc/nginx/conf.d</span><br><span class=\"line\">service nginx reload</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">检查配置文件路径是否正确</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>每一次更改配置文件都需要重启容器</strong><br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启nginx容器</span></span><br><span class=\"line\">docker restart nginx </span><br><span class=\"line\"><span class=\"meta\">  </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看容器状态</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"><span class=\"meta\">  </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果挂载失败，查看nginx容器<span class=\"built_in\">log</span>,显示错误信息，根据错误信息 更改配置文件等</span></span><br><span class=\"line\">docker logs -t nginx</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>以上配置完成之后能够通过域名访问网站，但是css样式却被nginx解析成text/plain，打开控制台可看到warn信息</p>\n<p><strong>解决nginx将css文件解析为text/plain</strong></p>\n<ul>\n<li><p>方法一： ngin.conf中http添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include       /etc/nginx/mime.types;</span><br><span class=\"line\">default_type  application/octet-stream;</span><br></pre></td></tr></table></figure>\n<p>注：此办法并不能使我网站的css正确解析，因为在拷贝nginx镜像中的原配置文件时，就已经添加mime.types了。却依然不能正确解析。</p>\n</li>\n<li><p>方法二：解析成功，原因未知</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将index.html中<span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span>去掉。</span><br></pre></td></tr></table></figure>\n<p>通过域名访问：成功！！</p>\n</li>\n</ul>\n"},{"title":"Nginx基础篇（二）安装","comments":1,"abbrlink":14520,"date":"2021-12-05T08:10:44.000Z","translate_title":"nginx-install","_content":"## 1.Nginx安装\n\n1. 安装nginx前首先要确认系统中是否安装了gcc 、pcre-devel、zlib-devel、openssl-devel\n\n    ```shell\n    #1、rpm包安装的，可以用 rpm -qa 看到，如果要查找某软件包是否安装，用 rpm -qa | grep \"软件或者包的名字\"\n    #2、以deb包安装的，可以用 dpkg -l 看到。如果是查找指定软件包，用 dpkg -l | grep \"软件或者包的名字\"\n    #3、yum方法安装的，可以用 yum list installed 查找，如果是查找指定包，用 yum list installed | grep \"软件名或者包名\"\n    yum list installed | grep \"gcc\"\n    ```\n   ![image-20201210103251475](./nginx-02/image-20201210100736952.png)\n2. 安装依赖包\n\n    ```shell\n    yum -y install gcc pcre-devel zlib-devel openssl openssl-devel\n    ```\n\n3. 下载并解压安装包\n\n    ```shell\n    //创建nginx存放文件夹\n    cd /usr/local\n    mkdir nginx\n    cd nginx\n    #下载tar包\n    wget http://nginx.org/download/nginx-1.13.7.tar.gz\n    tar -xvf nginx-1.13.7.tar.gz\n    ```\n\n4. 配置\n\n    ```shell\n    cd nginx-1.13.7\n    ./configure --prefix=/usr/local/nginx\n    \n    make\n    make install\n    ```\n\n5. 测试是否安装成功\n\n    ```shell\n    ./sbin/nginx -t\n    ```\n\n    <img src=\"source/_posts/2021/07/nginx/image-20201210101238462.png\" alt=\"image-20201210101238462\" style=\"zoom: 67%;float:right;\" />\n\n6. 配置nginx.conf\n\n    ```yml\n    vim /usr/local/nginx/cong/nginx.conf\n    \n    #修改如下\n    server {\n      listen 80;\n      server_name localhost;\n    \n      # 注意设定 root路径是有dist的\n      location / {\n        root /usr/local/webapp/dist;\n        index /index.html;\n      }\n    \n      #跨域 ip和port自行替换\n      location /adminApi {\n        proxy_pass http://ip:port;\n      }\n    \n    }\n    \n    ```\n\n7. 启动\n   ```shell\n       #启动nginx\n       cd /usr/local/nginx/sbin\n       ./nginx-02 \n     ```\n\n   **常用命令：**\n   \n   ```shell\n       #修改配置后重新启动\n       ./nginx-02 -s reload\n       #如果出现：nginx: [error] open() ＂/usr/local/nginx/logs/nginx.pid＂ failed\n       /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\n       #再次启动即可\n       \n       #查看nginx进程是否启动\n       ps -ef|grep nginx\n       \n       #平滑启动nginx\n       kill -HUP\n       #主进程号或进程号文件路径 或者使用\n       \n       /usr/nginx/sbin/nginx -s reload\n       \n       #注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。\n       #判断Nginx配置是否正确命令如下：\n       nginx -t -c /usr/nginx/conf/nginx.conf\n       #或者使用\n       /usr/nginx/sbin/nginx -t\n       \n       #重启\n       nginx reload\n       /usr/local/nginx/sbin/nginx -s reload \n       service nginx restart\n       \n       #启动\n       ./nginx-02\n       #关闭\n       ./nginx-02 -s stop\n       \n       \n       #配置nginx开机自启动\n       vim /etc/rc.d/rc.local\n       \n       #再文件中添加nginx启动地址\n        \n       touch /var/lock/subsys/local\n       /usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf\n       \n       #设置开机自启动nginx\n       /usr/local/nginx/sb/nginx\n    ```\n![image-20201210103251475](./nginx-02/image-20210606160947369.png)\n\n启动后访问localhost 效果如下：\n![image-20201210103251475](./nginx-02/image-20201210103251475.png)\n\n## 2.Nginx配置\n```shell\n...... 全局块\n\nevents {\n\t//events 块\n}\n\n###数据库配置\nstream {\n    server {\n       listen 3306;\n       proxy_pass db;    \n    }\n    upstream db {\n       server 192.168.18.130:3305;\n       server 192.168.18.129:3305;\n    }\n \n}\n\nhttp{\n    ##http全局块\n\tserver+{\n\t\tlocation +[]\n\t}\n}\n```\n### 2.1配置内容规则\n官网配置教程：https://nginx.org/en/docs/dirindex.html\n变量应用：https://nginx.org/en/docs/varindex.html\n- 用#表示注释\n- 每行配置的结尾需要加上分号\n- 如果配置项值中包括语法符号，比如空格符，那么需要使用单引号或者双引号行括住配置项值，否则ngin x会报语法错误\n- 单位简写：\n   - K或者k千字节（kilo byte, KB）\n   - M或者m兆字节（megabyte MB）\n   - ms(毫秒)，s(秒)， m(分)， h(小时) ， d (天)， w（周）， M（月，包含30天），y（年）\n    \n### 2.2 详细配置内容\n```text\n########   Nginx的main(全局配置)文件\n#指定nginx运行的用户及用户组,默认为nobody\n#user  nobody;\n\n#开启的线程数，一般跟逻辑CPU核数一致\nworker_processes  1;\n\n#定位全局错误日志文件，级别以notice显示，还有debug,info,warn,error,crit模式，debug输出最多，crir输出最少，根据实际环境而定\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#指定进程id的存储文件位置\n#pid        logs/nginx.pid;\n\n#指定一个nginx进程打开的最多文件描述符数目，受系统进程的最大打开文件数量限制\n#worker_rlimit_nofile 65535\n\nevents {\n    #设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式\n    #use epoll;\n\n    #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。\n    worker_connections  1024;\n}\n###数据库的负载均衡\nstream {\n  upstream mysql_nginx {\n      hash $remote_addr consistent;\n      server 192.168.18.128:3306 weight=5 max_fails=3 fail_timeout=30s;\n      server 192.168.18.129:3306;\n      server 192.168.18.130:3306;\n      ##last_conn; #最小连接\n  }\n  server {\n      listen 3306; # 数据库服务器监听端口\n      proxy_connect_timeout 10s;\n      proxy_timeout 300s; # 设置客户端和代理服务之间的超时时间，如果5分钟内没操作将自动断开。\n      proxy_pass mysql_nginx;\n  }\n}\n#######Nginx的Http服务器配置,Gzip配置\nhttp {\n    #主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度，DNS主配置文件中的zonerfc1912,acl基本上都是用include语句。\n    include       mime.types;\n\n    #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式\n    default_type  application/octet-stream;\n\n    #下面代码为日志格式的设定，main为日志格式的名称，可自行设置，后面引用\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #引用日志main， main是log-format的格式，在上面配置了；后面可以加上日志缓冲区大小，写满了就flush到磁盘中buffer = 1M;\n    #access_log  logs/access.log  main;\n\n    #设置允许客户端请求的最大的单个文件字节数\n    #client_max_body_size 20M;\n    #指定来自客户端请求头的headebuffer大小\n    #client_header_buffer_size  32k;\n    #指定连接请求试图写入缓存文件的目录路径\n    #client_body_temp_path /dev/shm/client_body_temp;\n    #指定客户端请求中较大的消息头的缓存最大数量和大小，目前设置为4个32KB\n    #large client_header_buffers 4 32k;\n\n    #开启高效文件传输模式\n    sendfile        on;\n    #开启防止网络阻塞\n    #tcp_nopush     on;\n    #开启防止网络阻塞\n    #tcp_nodelay    on;\n\n    #设置客户端连接保存活动的超时时间\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #设置客户端请求读取超时时间\n    #client_header_timeout 10;\n    #设置客户端请求主体读取超时时间\n    #client_body_timeout 10;\n    #用于设置相应客户端的超时时间\n    #send_timeout\n\n    ####HttpGZip模块配置\n    #httpGzip modules\n    #开启gzip压缩\n    #gzip  on;\n    #设置允许压缩的页面最小字节数\n    #gzip_min_length 1k;\n    #申请4个单位为16K的内存作为压缩结果流缓存\n    #gzip_buffers 4 16k;\n    #设置识别http协议的版本，默认为1.1\n    #gzip_http_version 1.1;\n    #指定gzip压缩比，1-9数字越小，压缩比越小，速度越快\n    #gzip_comp_level 2;\n    #指定压缩的类型\n    #gzip_types text/plain application/x-javascript text/css application/xml;\n    #让前端的缓存服务器进过gzip压缩的页面\n    #gzip_vary on;\n\n    #########Nginx的server虚拟主机配置\n    server {\n        #监听端口为 80\n        listen       80;\n\n        #设置主机域名\n        server_name  localhost;\n\n        #设置访问的语言编码\n        #charset koi8-r;\n\n        #设置虚拟主机访问日志的存放路径及日志的格式为main\n        #access_log  logs/host.access.log  main;\n\n        #设置虚拟主机的基本信息\n        location / {\n            #设置虚拟主机的网站根目录\n            root   html;\n\n            #设置虚拟主机默认访问的网页\n            index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n}\n```\n\n### 2.3 日志\n在nginx同级目录下logs文件夹\n- access.log  正常日志\n- error.log 错误日期\n\n需要在nginx.conf中的http模块配置access_log","source":"_posts/2021/12/nginx-02.md","raw":"---\ntitle: Nginx基础篇（二）安装\ntags: nginx\ncategories: linux\ncomments: true\nabbrlink: 14520\ndate: 2021-12-05 16:10:44\ntranslate_title: nginx-install\n---\n## 1.Nginx安装\n\n1. 安装nginx前首先要确认系统中是否安装了gcc 、pcre-devel、zlib-devel、openssl-devel\n\n    ```shell\n    #1、rpm包安装的，可以用 rpm -qa 看到，如果要查找某软件包是否安装，用 rpm -qa | grep \"软件或者包的名字\"\n    #2、以deb包安装的，可以用 dpkg -l 看到。如果是查找指定软件包，用 dpkg -l | grep \"软件或者包的名字\"\n    #3、yum方法安装的，可以用 yum list installed 查找，如果是查找指定包，用 yum list installed | grep \"软件名或者包名\"\n    yum list installed | grep \"gcc\"\n    ```\n   ![image-20201210103251475](./nginx-02/image-20201210100736952.png)\n2. 安装依赖包\n\n    ```shell\n    yum -y install gcc pcre-devel zlib-devel openssl openssl-devel\n    ```\n\n3. 下载并解压安装包\n\n    ```shell\n    //创建nginx存放文件夹\n    cd /usr/local\n    mkdir nginx\n    cd nginx\n    #下载tar包\n    wget http://nginx.org/download/nginx-1.13.7.tar.gz\n    tar -xvf nginx-1.13.7.tar.gz\n    ```\n\n4. 配置\n\n    ```shell\n    cd nginx-1.13.7\n    ./configure --prefix=/usr/local/nginx\n    \n    make\n    make install\n    ```\n\n5. 测试是否安装成功\n\n    ```shell\n    ./sbin/nginx -t\n    ```\n\n    <img src=\"source/_posts/2021/07/nginx/image-20201210101238462.png\" alt=\"image-20201210101238462\" style=\"zoom: 67%;float:right;\" />\n\n6. 配置nginx.conf\n\n    ```yml\n    vim /usr/local/nginx/cong/nginx.conf\n    \n    #修改如下\n    server {\n      listen 80;\n      server_name localhost;\n    \n      # 注意设定 root路径是有dist的\n      location / {\n        root /usr/local/webapp/dist;\n        index /index.html;\n      }\n    \n      #跨域 ip和port自行替换\n      location /adminApi {\n        proxy_pass http://ip:port;\n      }\n    \n    }\n    \n    ```\n\n7. 启动\n   ```shell\n       #启动nginx\n       cd /usr/local/nginx/sbin\n       ./nginx-02 \n     ```\n\n   **常用命令：**\n   \n   ```shell\n       #修改配置后重新启动\n       ./nginx-02 -s reload\n       #如果出现：nginx: [error] open() ＂/usr/local/nginx/logs/nginx.pid＂ failed\n       /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\n       #再次启动即可\n       \n       #查看nginx进程是否启动\n       ps -ef|grep nginx\n       \n       #平滑启动nginx\n       kill -HUP\n       #主进程号或进程号文件路径 或者使用\n       \n       /usr/nginx/sbin/nginx -s reload\n       \n       #注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。\n       #判断Nginx配置是否正确命令如下：\n       nginx -t -c /usr/nginx/conf/nginx.conf\n       #或者使用\n       /usr/nginx/sbin/nginx -t\n       \n       #重启\n       nginx reload\n       /usr/local/nginx/sbin/nginx -s reload \n       service nginx restart\n       \n       #启动\n       ./nginx-02\n       #关闭\n       ./nginx-02 -s stop\n       \n       \n       #配置nginx开机自启动\n       vim /etc/rc.d/rc.local\n       \n       #再文件中添加nginx启动地址\n        \n       touch /var/lock/subsys/local\n       /usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf\n       \n       #设置开机自启动nginx\n       /usr/local/nginx/sb/nginx\n    ```\n![image-20201210103251475](./nginx-02/image-20210606160947369.png)\n\n启动后访问localhost 效果如下：\n![image-20201210103251475](./nginx-02/image-20201210103251475.png)\n\n## 2.Nginx配置\n```shell\n...... 全局块\n\nevents {\n\t//events 块\n}\n\n###数据库配置\nstream {\n    server {\n       listen 3306;\n       proxy_pass db;    \n    }\n    upstream db {\n       server 192.168.18.130:3305;\n       server 192.168.18.129:3305;\n    }\n \n}\n\nhttp{\n    ##http全局块\n\tserver+{\n\t\tlocation +[]\n\t}\n}\n```\n### 2.1配置内容规则\n官网配置教程：https://nginx.org/en/docs/dirindex.html\n变量应用：https://nginx.org/en/docs/varindex.html\n- 用#表示注释\n- 每行配置的结尾需要加上分号\n- 如果配置项值中包括语法符号，比如空格符，那么需要使用单引号或者双引号行括住配置项值，否则ngin x会报语法错误\n- 单位简写：\n   - K或者k千字节（kilo byte, KB）\n   - M或者m兆字节（megabyte MB）\n   - ms(毫秒)，s(秒)， m(分)， h(小时) ， d (天)， w（周）， M（月，包含30天），y（年）\n    \n### 2.2 详细配置内容\n```text\n########   Nginx的main(全局配置)文件\n#指定nginx运行的用户及用户组,默认为nobody\n#user  nobody;\n\n#开启的线程数，一般跟逻辑CPU核数一致\nworker_processes  1;\n\n#定位全局错误日志文件，级别以notice显示，还有debug,info,warn,error,crit模式，debug输出最多，crir输出最少，根据实际环境而定\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#指定进程id的存储文件位置\n#pid        logs/nginx.pid;\n\n#指定一个nginx进程打开的最多文件描述符数目，受系统进程的最大打开文件数量限制\n#worker_rlimit_nofile 65535\n\nevents {\n    #设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式\n    #use epoll;\n\n    #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。\n    worker_connections  1024;\n}\n###数据库的负载均衡\nstream {\n  upstream mysql_nginx {\n      hash $remote_addr consistent;\n      server 192.168.18.128:3306 weight=5 max_fails=3 fail_timeout=30s;\n      server 192.168.18.129:3306;\n      server 192.168.18.130:3306;\n      ##last_conn; #最小连接\n  }\n  server {\n      listen 3306; # 数据库服务器监听端口\n      proxy_connect_timeout 10s;\n      proxy_timeout 300s; # 设置客户端和代理服务之间的超时时间，如果5分钟内没操作将自动断开。\n      proxy_pass mysql_nginx;\n  }\n}\n#######Nginx的Http服务器配置,Gzip配置\nhttp {\n    #主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度，DNS主配置文件中的zonerfc1912,acl基本上都是用include语句。\n    include       mime.types;\n\n    #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式\n    default_type  application/octet-stream;\n\n    #下面代码为日志格式的设定，main为日志格式的名称，可自行设置，后面引用\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #引用日志main， main是log-format的格式，在上面配置了；后面可以加上日志缓冲区大小，写满了就flush到磁盘中buffer = 1M;\n    #access_log  logs/access.log  main;\n\n    #设置允许客户端请求的最大的单个文件字节数\n    #client_max_body_size 20M;\n    #指定来自客户端请求头的headebuffer大小\n    #client_header_buffer_size  32k;\n    #指定连接请求试图写入缓存文件的目录路径\n    #client_body_temp_path /dev/shm/client_body_temp;\n    #指定客户端请求中较大的消息头的缓存最大数量和大小，目前设置为4个32KB\n    #large client_header_buffers 4 32k;\n\n    #开启高效文件传输模式\n    sendfile        on;\n    #开启防止网络阻塞\n    #tcp_nopush     on;\n    #开启防止网络阻塞\n    #tcp_nodelay    on;\n\n    #设置客户端连接保存活动的超时时间\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #设置客户端请求读取超时时间\n    #client_header_timeout 10;\n    #设置客户端请求主体读取超时时间\n    #client_body_timeout 10;\n    #用于设置相应客户端的超时时间\n    #send_timeout\n\n    ####HttpGZip模块配置\n    #httpGzip modules\n    #开启gzip压缩\n    #gzip  on;\n    #设置允许压缩的页面最小字节数\n    #gzip_min_length 1k;\n    #申请4个单位为16K的内存作为压缩结果流缓存\n    #gzip_buffers 4 16k;\n    #设置识别http协议的版本，默认为1.1\n    #gzip_http_version 1.1;\n    #指定gzip压缩比，1-9数字越小，压缩比越小，速度越快\n    #gzip_comp_level 2;\n    #指定压缩的类型\n    #gzip_types text/plain application/x-javascript text/css application/xml;\n    #让前端的缓存服务器进过gzip压缩的页面\n    #gzip_vary on;\n\n    #########Nginx的server虚拟主机配置\n    server {\n        #监听端口为 80\n        listen       80;\n\n        #设置主机域名\n        server_name  localhost;\n\n        #设置访问的语言编码\n        #charset koi8-r;\n\n        #设置虚拟主机访问日志的存放路径及日志的格式为main\n        #access_log  logs/host.access.log  main;\n\n        #设置虚拟主机的基本信息\n        location / {\n            #设置虚拟主机的网站根目录\n            root   html;\n\n            #设置虚拟主机默认访问的网页\n            index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n}\n```\n\n### 2.3 日志\n在nginx同级目录下logs文件夹\n- access.log  正常日志\n- error.log 错误日期\n\n需要在nginx.conf中的http模块配置access_log","slug":"nginx-02","published":1,"updated":"2022-03-27T14:06:03.400Z","layout":"post","photos":[],"link":"","_id":"cl424hx6c004tad5i84ag7j8p","content":"<h2 id=\"1-Nginx安装\"><a href=\"#1-Nginx安装\" class=\"headerlink\" title=\"1.Nginx安装\"></a>1.Nginx安装</h2><ol>\n<li><p>安装nginx前首先要确认系统中是否安装了gcc 、pcre-devel、zlib-devel、openssl-devel</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1、rpm包安装的，可以用 rpm -qa 看到，如果要查找某软件包是否安装，用 rpm -qa | grep <span class=\"string\">&quot;软件或者包的名字&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2、以deb包安装的，可以用 dpkg -l 看到。如果是查找指定软件包，用 dpkg -l | grep <span class=\"string\">&quot;软件或者包的名字&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3、yum方法安装的，可以用 yum list installed 查找，如果是查找指定包，用 yum list installed | grep <span class=\"string\">&quot;软件名或者包名&quot;</span></span></span><br><span class=\"line\">yum list installed | grep &quot;gcc&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/nginx-02/image-20201210100736952.png\" alt=\"image-20201210103251475\"></p>\n</li>\n<li><p>安装依赖包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure></li>\n<li><p>下载并解压安装包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建nginx存放文件夹</span><br><span class=\"line\">cd /usr/local</span><br><span class=\"line\">mkdir nginx</span><br><span class=\"line\">cd nginx</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载tar包</span></span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.13.7.tar.gz</span><br><span class=\"line\">tar -xvf nginx-1.13.7.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li><p>配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nginx-1.13.7</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></li>\n<li><p>测试是否安装成功</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./sbin/nginx -t</span><br></pre></td></tr></table></figure>\n\n <img src=\"/nginx-02/_posts/2021/07/nginx/image-20201210101238462.png\" alt=\"image-20201210101238462\" style=\"zoom: 67%;float:right;\"></li>\n<li><p>配置nginx.conf</p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">vim</span> <span class=\"string\">/usr/local/nginx/cong/nginx.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#修改如下</span></span><br><span class=\"line\"><span class=\"string\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">listen</span> <span class=\"number\">80</span><span class=\"string\">;</span></span><br><span class=\"line\">  <span class=\"string\">server_name</span> <span class=\"string\">localhost;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 注意设定 root路径是有dist的</span></span><br><span class=\"line\">  <span class=\"string\">location</span> <span class=\"string\">/</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">root</span> <span class=\"string\">/usr/local/webapp/dist;</span></span><br><span class=\"line\">    <span class=\"string\">index</span> <span class=\"string\">/index.html;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#跨域 ip和port自行替换</span></span><br><span class=\"line\">  <span class=\"string\">location</span> <span class=\"string\">/adminApi</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">proxy_pass</span> <span class=\"string\">http://ip:port;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动nginx</span></span><br><span class=\"line\">cd /usr/local/nginx/sbin</span><br><span class=\"line\">./nginx-02 </span><br></pre></td></tr></table></figure>\n\n<p><strong>常用命令：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改配置后重新启动</span></span><br><span class=\"line\">./nginx-02 -s reload</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果出现：nginx: [error] open() ＂/usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid＂ failed</span></span><br><span class=\"line\">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再次启动即可</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看nginx进程是否启动</span></span><br><span class=\"line\">ps -ef|grep nginx</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">平滑启动nginx</span></span><br><span class=\"line\">kill -HUP</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">主进程号或进程号文件路径 或者使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">/usr/nginx/sbin/nginx -s reload</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">判断Nginx配置是否正确命令如下：</span></span><br><span class=\"line\">nginx -t -c /usr/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者使用</span></span><br><span class=\"line\">/usr/nginx/sbin/nginx -t</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启</span></span><br><span class=\"line\">nginx reload</span><br><span class=\"line\">/usr/local/nginx/sbin/nginx -s reload </span><br><span class=\"line\">service nginx restart</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动</span></span><br><span class=\"line\">./nginx-02</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">关闭</span></span><br><span class=\"line\">./nginx-02 -s stop</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置nginx开机自启动</span></span><br><span class=\"line\">vim /etc/rc.d/rc.local</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再文件中添加nginx启动地址</span></span><br><span class=\"line\"> </span><br><span class=\"line\">touch /var/lock/subsys/local</span><br><span class=\"line\">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置开机自启动nginx</span></span><br><span class=\"line\">/usr/local/nginx/sb/nginx</span><br></pre></td></tr></table></figure>\n<p><img src=\"/nginx-02/image-20210606160947369.png\" alt=\"image-20201210103251475\"></p>\n</li>\n</ol>\n<p>启动后访问localhost 效果如下：<br><img src=\"/nginx-02/image-20201210103251475.png\" alt=\"image-20201210103251475\"></p>\n<h2 id=\"2-Nginx配置\"><a href=\"#2-Nginx配置\" class=\"headerlink\" title=\"2.Nginx配置\"></a>2.Nginx配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...... 全局块</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">\t//events 块</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##数据库配置</span></span></span><br><span class=\"line\">stream &#123;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">       listen 3306;</span><br><span class=\"line\">       proxy_pass db;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    upstream db &#123;</span><br><span class=\"line\">       server 192.168.18.130:3305;</span><br><span class=\"line\">       server 192.168.18.129:3305;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http&#123;</span><br><span class=\"line\">    ##http全局块</span><br><span class=\"line\">\tserver+&#123;</span><br><span class=\"line\">\t\tlocation +[]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-1配置内容规则\"><a href=\"#2-1配置内容规则\" class=\"headerlink\" title=\"2.1配置内容规则\"></a>2.1配置内容规则</h3><p>官网配置教程：<a href=\"https://nginx.org/en/docs/dirindex.html\">https://nginx.org/en/docs/dirindex.html</a><br>变量应用：<a href=\"https://nginx.org/en/docs/varindex.html\">https://nginx.org/en/docs/varindex.html</a></p>\n<ul>\n<li>用#表示注释</li>\n<li>每行配置的结尾需要加上分号</li>\n<li>如果配置项值中包括语法符号，比如空格符，那么需要使用单引号或者双引号行括住配置项值，否则ngin x会报语法错误</li>\n<li>单位简写：<ul>\n<li>K或者k千字节（kilo byte, KB）</li>\n<li>M或者m兆字节（megabyte MB）</li>\n<li>ms(毫秒)，s(秒)， m(分)， h(小时) ， d (天)， w（周）， M（月，包含30天），y（年）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-2-详细配置内容\"><a href=\"#2-2-详细配置内容\" class=\"headerlink\" title=\"2.2 详细配置内容\"></a>2.2 详细配置内容</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">########   Nginx的main(全局配置)文件</span><br><span class=\"line\">#指定nginx运行的用户及用户组,默认为nobody</span><br><span class=\"line\">#user  nobody;</span><br><span class=\"line\"></span><br><span class=\"line\">#开启的线程数，一般跟逻辑CPU核数一致</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#定位全局错误日志文件，级别以notice显示，还有debug,info,warn,error,crit模式，debug输出最多，crir输出最少，根据实际环境而定</span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#指定进程id的存储文件位置</span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">#指定一个nginx进程打开的最多文件描述符数目，受系统进程的最大打开文件数量限制</span><br><span class=\"line\">#worker_rlimit_nofile 65535</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    #设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式</span><br><span class=\"line\">    #use epoll;</span><br><span class=\"line\"></span><br><span class=\"line\">    #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">###数据库的负载均衡</span><br><span class=\"line\">stream &#123;</span><br><span class=\"line\">  upstream mysql_nginx &#123;</span><br><span class=\"line\">      hash $remote_addr consistent;</span><br><span class=\"line\">      server 192.168.18.128:3306 weight=5 max_fails=3 fail_timeout=30s;</span><br><span class=\"line\">      server 192.168.18.129:3306;</span><br><span class=\"line\">      server 192.168.18.130:3306;</span><br><span class=\"line\">      ##last_conn; #最小连接</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">      listen 3306; # 数据库服务器监听端口</span><br><span class=\"line\">      proxy_connect_timeout 10s;</span><br><span class=\"line\">      proxy_timeout 300s; # 设置客户端和代理服务之间的超时时间，如果5分钟内没操作将自动断开。</span><br><span class=\"line\">      proxy_pass mysql_nginx;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#######Nginx的Http服务器配置,Gzip配置</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    #主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度，DNS主配置文件中的zonerfc1912,acl基本上都是用include语句。</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\"></span><br><span class=\"line\">    #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #下面代码为日志格式的设定，main为日志格式的名称，可自行设置，后面引用</span><br><span class=\"line\">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #引用日志main， main是log-format的格式，在上面配置了；后面可以加上日志缓冲区大小，写满了就flush到磁盘中buffer = 1M;</span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设置允许客户端请求的最大的单个文件字节数</span><br><span class=\"line\">    #client_max_body_size 20M;</span><br><span class=\"line\">    #指定来自客户端请求头的headebuffer大小</span><br><span class=\"line\">    #client_header_buffer_size  32k;</span><br><span class=\"line\">    #指定连接请求试图写入缓存文件的目录路径</span><br><span class=\"line\">    #client_body_temp_path /dev/shm/client_body_temp;</span><br><span class=\"line\">    #指定客户端请求中较大的消息头的缓存最大数量和大小，目前设置为4个32KB</span><br><span class=\"line\">    #large client_header_buffers 4 32k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启高效文件传输模式</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #开启防止网络阻塞</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\">    #开启防止网络阻塞</span><br><span class=\"line\">    #tcp_nodelay    on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设置客户端连接保存活动的超时时间</span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设置客户端请求读取超时时间</span><br><span class=\"line\">    #client_header_timeout 10;</span><br><span class=\"line\">    #设置客户端请求主体读取超时时间</span><br><span class=\"line\">    #client_body_timeout 10;</span><br><span class=\"line\">    #用于设置相应客户端的超时时间</span><br><span class=\"line\">    #send_timeout</span><br><span class=\"line\"></span><br><span class=\"line\">    ####HttpGZip模块配置</span><br><span class=\"line\">    #httpGzip modules</span><br><span class=\"line\">    #开启gzip压缩</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">    #设置允许压缩的页面最小字节数</span><br><span class=\"line\">    #gzip_min_length 1k;</span><br><span class=\"line\">    #申请4个单位为16K的内存作为压缩结果流缓存</span><br><span class=\"line\">    #gzip_buffers 4 16k;</span><br><span class=\"line\">    #设置识别http协议的版本，默认为1.1</span><br><span class=\"line\">    #gzip_http_version 1.1;</span><br><span class=\"line\">    #指定gzip压缩比，1-9数字越小，压缩比越小，速度越快</span><br><span class=\"line\">    #gzip_comp_level 2;</span><br><span class=\"line\">    #指定压缩的类型</span><br><span class=\"line\">    #gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class=\"line\">    #让前端的缓存服务器进过gzip压缩的页面</span><br><span class=\"line\">    #gzip_vary on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #########Nginx的server虚拟主机配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        #监听端口为 80</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置主机域名</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置访问的语言编码</span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置虚拟主机访问日志的存放路径及日志的格式为main</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置虚拟主机的基本信息</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            #设置虚拟主机的网站根目录</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\"></span><br><span class=\"line\">            #设置虚拟主机默认访问的网页</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class=\"line\">        # concurs with nginx&#x27;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-日志\"><a href=\"#2-3-日志\" class=\"headerlink\" title=\"2.3 日志\"></a>2.3 日志</h3><p>在nginx同级目录下logs文件夹</p>\n<ul>\n<li>access.log  正常日志</li>\n<li>error.log 错误日期</li>\n</ul>\n<p>需要在nginx.conf中的http模块配置access_log</p>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h2 id=\"1-Nginx安装\"><a href=\"#1-Nginx安装\" class=\"headerlink\" title=\"1.Nginx安装\"></a>1.Nginx安装</h2><ol>\n<li><p>安装nginx前首先要确认系统中是否安装了gcc 、pcre-devel、zlib-devel、openssl-devel</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1、rpm包安装的，可以用 rpm -qa 看到，如果要查找某软件包是否安装，用 rpm -qa | grep <span class=\"string\">&quot;软件或者包的名字&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2、以deb包安装的，可以用 dpkg -l 看到。如果是查找指定软件包，用 dpkg -l | grep <span class=\"string\">&quot;软件或者包的名字&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3、yum方法安装的，可以用 yum list installed 查找，如果是查找指定包，用 yum list installed | grep <span class=\"string\">&quot;软件名或者包名&quot;</span></span></span><br><span class=\"line\">yum list installed | grep &quot;gcc&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/nginx-02/image-20201210100736952.png\" alt=\"image-20201210103251475\"></p>\n</li>\n<li><p>安装依赖包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure></li>\n<li><p>下载并解压安装包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建nginx存放文件夹</span><br><span class=\"line\">cd /usr/local</span><br><span class=\"line\">mkdir nginx</span><br><span class=\"line\">cd nginx</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载tar包</span></span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.13.7.tar.gz</span><br><span class=\"line\">tar -xvf nginx-1.13.7.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li><p>配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nginx-1.13.7</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></li>\n<li><p>测试是否安装成功</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./sbin/nginx -t</span><br></pre></td></tr></table></figure>\n\n <img src=\"/nginx-02/_posts/2021/07/nginx/image-20201210101238462.png\" alt=\"image-20201210101238462\" style=\"zoom: 67%;float:right;\"></li>\n<li><p>配置nginx.conf</p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">vim</span> <span class=\"string\">/usr/local/nginx/cong/nginx.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#修改如下</span></span><br><span class=\"line\"><span class=\"string\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">listen</span> <span class=\"number\">80</span><span class=\"string\">;</span></span><br><span class=\"line\">  <span class=\"string\">server_name</span> <span class=\"string\">localhost;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 注意设定 root路径是有dist的</span></span><br><span class=\"line\">  <span class=\"string\">location</span> <span class=\"string\">/</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">root</span> <span class=\"string\">/usr/local/webapp/dist;</span></span><br><span class=\"line\">    <span class=\"string\">index</span> <span class=\"string\">/index.html;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#跨域 ip和port自行替换</span></span><br><span class=\"line\">  <span class=\"string\">location</span> <span class=\"string\">/adminApi</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">proxy_pass</span> <span class=\"string\">http://ip:port;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动nginx</span></span><br><span class=\"line\">cd /usr/local/nginx/sbin</span><br><span class=\"line\">./nginx-02 </span><br></pre></td></tr></table></figure>\n\n<p><strong>常用命令：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改配置后重新启动</span></span><br><span class=\"line\">./nginx-02 -s reload</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果出现：nginx: [error] open() ＂/usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid＂ failed</span></span><br><span class=\"line\">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再次启动即可</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看nginx进程是否启动</span></span><br><span class=\"line\">ps -ef|grep nginx</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">平滑启动nginx</span></span><br><span class=\"line\">kill -HUP</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">主进程号或进程号文件路径 或者使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">/usr/nginx/sbin/nginx -s reload</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">判断Nginx配置是否正确命令如下：</span></span><br><span class=\"line\">nginx -t -c /usr/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者使用</span></span><br><span class=\"line\">/usr/nginx/sbin/nginx -t</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启</span></span><br><span class=\"line\">nginx reload</span><br><span class=\"line\">/usr/local/nginx/sbin/nginx -s reload </span><br><span class=\"line\">service nginx restart</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动</span></span><br><span class=\"line\">./nginx-02</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">关闭</span></span><br><span class=\"line\">./nginx-02 -s stop</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置nginx开机自启动</span></span><br><span class=\"line\">vim /etc/rc.d/rc.local</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再文件中添加nginx启动地址</span></span><br><span class=\"line\"> </span><br><span class=\"line\">touch /var/lock/subsys/local</span><br><span class=\"line\">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置开机自启动nginx</span></span><br><span class=\"line\">/usr/local/nginx/sb/nginx</span><br></pre></td></tr></table></figure>\n<p><img src=\"/nginx-02/image-20210606160947369.png\" alt=\"image-20201210103251475\"></p>\n</li>\n</ol>\n<p>启动后访问localhost 效果如下：<br><img src=\"/nginx-02/image-20201210103251475.png\" alt=\"image-20201210103251475\"></p>\n<h2 id=\"2-Nginx配置\"><a href=\"#2-Nginx配置\" class=\"headerlink\" title=\"2.Nginx配置\"></a>2.Nginx配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...... 全局块</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">\t//events 块</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##数据库配置</span></span></span><br><span class=\"line\">stream &#123;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">       listen 3306;</span><br><span class=\"line\">       proxy_pass db;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    upstream db &#123;</span><br><span class=\"line\">       server 192.168.18.130:3305;</span><br><span class=\"line\">       server 192.168.18.129:3305;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http&#123;</span><br><span class=\"line\">    ##http全局块</span><br><span class=\"line\">\tserver+&#123;</span><br><span class=\"line\">\t\tlocation +[]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-1配置内容规则\"><a href=\"#2-1配置内容规则\" class=\"headerlink\" title=\"2.1配置内容规则\"></a>2.1配置内容规则</h3><p>官网配置教程：<a href=\"https://nginx.org/en/docs/dirindex.html\">https://nginx.org/en/docs/dirindex.html</a><br>变量应用：<a href=\"https://nginx.org/en/docs/varindex.html\">https://nginx.org/en/docs/varindex.html</a></p>\n<ul>\n<li>用#表示注释</li>\n<li>每行配置的结尾需要加上分号</li>\n<li>如果配置项值中包括语法符号，比如空格符，那么需要使用单引号或者双引号行括住配置项值，否则ngin x会报语法错误</li>\n<li>单位简写：<ul>\n<li>K或者k千字节（kilo byte, KB）</li>\n<li>M或者m兆字节（megabyte MB）</li>\n<li>ms(毫秒)，s(秒)， m(分)， h(小时) ， d (天)， w（周）， M（月，包含30天），y（年）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-2-详细配置内容\"><a href=\"#2-2-详细配置内容\" class=\"headerlink\" title=\"2.2 详细配置内容\"></a>2.2 详细配置内容</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">########   Nginx的main(全局配置)文件</span><br><span class=\"line\">#指定nginx运行的用户及用户组,默认为nobody</span><br><span class=\"line\">#user  nobody;</span><br><span class=\"line\"></span><br><span class=\"line\">#开启的线程数，一般跟逻辑CPU核数一致</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#定位全局错误日志文件，级别以notice显示，还有debug,info,warn,error,crit模式，debug输出最多，crir输出最少，根据实际环境而定</span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#指定进程id的存储文件位置</span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">#指定一个nginx进程打开的最多文件描述符数目，受系统进程的最大打开文件数量限制</span><br><span class=\"line\">#worker_rlimit_nofile 65535</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    #设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式</span><br><span class=\"line\">    #use epoll;</span><br><span class=\"line\"></span><br><span class=\"line\">    #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">###数据库的负载均衡</span><br><span class=\"line\">stream &#123;</span><br><span class=\"line\">  upstream mysql_nginx &#123;</span><br><span class=\"line\">      hash $remote_addr consistent;</span><br><span class=\"line\">      server 192.168.18.128:3306 weight=5 max_fails=3 fail_timeout=30s;</span><br><span class=\"line\">      server 192.168.18.129:3306;</span><br><span class=\"line\">      server 192.168.18.130:3306;</span><br><span class=\"line\">      ##last_conn; #最小连接</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">      listen 3306; # 数据库服务器监听端口</span><br><span class=\"line\">      proxy_connect_timeout 10s;</span><br><span class=\"line\">      proxy_timeout 300s; # 设置客户端和代理服务之间的超时时间，如果5分钟内没操作将自动断开。</span><br><span class=\"line\">      proxy_pass mysql_nginx;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#######Nginx的Http服务器配置,Gzip配置</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    #主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度，DNS主配置文件中的zonerfc1912,acl基本上都是用include语句。</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\"></span><br><span class=\"line\">    #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #下面代码为日志格式的设定，main为日志格式的名称，可自行设置，后面引用</span><br><span class=\"line\">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #引用日志main， main是log-format的格式，在上面配置了；后面可以加上日志缓冲区大小，写满了就flush到磁盘中buffer = 1M;</span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设置允许客户端请求的最大的单个文件字节数</span><br><span class=\"line\">    #client_max_body_size 20M;</span><br><span class=\"line\">    #指定来自客户端请求头的headebuffer大小</span><br><span class=\"line\">    #client_header_buffer_size  32k;</span><br><span class=\"line\">    #指定连接请求试图写入缓存文件的目录路径</span><br><span class=\"line\">    #client_body_temp_path /dev/shm/client_body_temp;</span><br><span class=\"line\">    #指定客户端请求中较大的消息头的缓存最大数量和大小，目前设置为4个32KB</span><br><span class=\"line\">    #large client_header_buffers 4 32k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启高效文件传输模式</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #开启防止网络阻塞</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\">    #开启防止网络阻塞</span><br><span class=\"line\">    #tcp_nodelay    on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设置客户端连接保存活动的超时时间</span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设置客户端请求读取超时时间</span><br><span class=\"line\">    #client_header_timeout 10;</span><br><span class=\"line\">    #设置客户端请求主体读取超时时间</span><br><span class=\"line\">    #client_body_timeout 10;</span><br><span class=\"line\">    #用于设置相应客户端的超时时间</span><br><span class=\"line\">    #send_timeout</span><br><span class=\"line\"></span><br><span class=\"line\">    ####HttpGZip模块配置</span><br><span class=\"line\">    #httpGzip modules</span><br><span class=\"line\">    #开启gzip压缩</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">    #设置允许压缩的页面最小字节数</span><br><span class=\"line\">    #gzip_min_length 1k;</span><br><span class=\"line\">    #申请4个单位为16K的内存作为压缩结果流缓存</span><br><span class=\"line\">    #gzip_buffers 4 16k;</span><br><span class=\"line\">    #设置识别http协议的版本，默认为1.1</span><br><span class=\"line\">    #gzip_http_version 1.1;</span><br><span class=\"line\">    #指定gzip压缩比，1-9数字越小，压缩比越小，速度越快</span><br><span class=\"line\">    #gzip_comp_level 2;</span><br><span class=\"line\">    #指定压缩的类型</span><br><span class=\"line\">    #gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class=\"line\">    #让前端的缓存服务器进过gzip压缩的页面</span><br><span class=\"line\">    #gzip_vary on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #########Nginx的server虚拟主机配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        #监听端口为 80</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置主机域名</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置访问的语言编码</span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置虚拟主机访问日志的存放路径及日志的格式为main</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置虚拟主机的基本信息</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            #设置虚拟主机的网站根目录</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\"></span><br><span class=\"line\">            #设置虚拟主机默认访问的网页</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class=\"line\">        # concurs with nginx&#x27;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-日志\"><a href=\"#2-3-日志\" class=\"headerlink\" title=\"2.3 日志\"></a>2.3 日志</h3><p>在nginx同级目录下logs文件夹</p>\n<ul>\n<li>access.log  正常日志</li>\n<li>error.log 错误日期</li>\n</ul>\n<p>需要在nginx.conf中的http模块配置access_log</p>\n"},{"title":"Nginx基础篇（三）实现虚拟主机","comments":1,"abbrlink":59090,"date":"2021-12-05T08:31:25.000Z","translate_title":"nginx-install","_content":"### 1. 虚拟主机Virtual Host\n一种在单一主机或主机群上，实现多网域服务的方法，可以运行多个网站或服务的技术，虚拟主机之间完全独立，并可由用户自行管理虚拟并非指不存在，而是指空间是由实体的服务器延伸而来，其硬件系统可以是基于服务器群，或者单个服务器\n\n使用域名访问虚拟主机，虚拟主机会给一个文件路径，然后部署自己的内容；访问域名时就会访问改文件夹下的某 个资源\n\n### 2. 使用Nginx配置虚拟主机\n1. 在nginx下建立一个ygb的文件夹，里面新建一个index.html\n2. 在nginx.conf配置下http -> server块内配置\n   ```text\n    server {\n        #监听端口为 80\n        listen       80;\n        #设置主机域名\n        server_name  www.xiaoyuge.work;\n        #设置访问的语言编码\n        #charset koi8-r;\n        #设置虚拟主机访问日志的存放路径及日志的格式为main\n        #access_log  logs/host.access.log  main;\n   \n        #    这个是域名反问的虚拟主机的文件路径\n        root  /usr/local/nginx/data/ygb\n        #设置虚拟主机的基本信息\n        location / {\n            #设置虚拟主机默认访问的网页\n            index  index.html index.htm;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n   ```\n\n3. 启动,然后在浏览器访问域名www.xiaoyuge.work\n    ```shell\n      ./nginx -c ./nginx.conf\n   ```","source":"_posts/2021/12/nginx-03.md","raw":"---\ntitle: Nginx基础篇（三）实现虚拟主机\ncomments: true\ntags: nginx\ncategories: nginx\nabbrlink: 59090\ndate: 2021-12-05 16:31:25\ntranslate_title: nginx-install\n---\n### 1. 虚拟主机Virtual Host\n一种在单一主机或主机群上，实现多网域服务的方法，可以运行多个网站或服务的技术，虚拟主机之间完全独立，并可由用户自行管理虚拟并非指不存在，而是指空间是由实体的服务器延伸而来，其硬件系统可以是基于服务器群，或者单个服务器\n\n使用域名访问虚拟主机，虚拟主机会给一个文件路径，然后部署自己的内容；访问域名时就会访问改文件夹下的某 个资源\n\n### 2. 使用Nginx配置虚拟主机\n1. 在nginx下建立一个ygb的文件夹，里面新建一个index.html\n2. 在nginx.conf配置下http -> server块内配置\n   ```text\n    server {\n        #监听端口为 80\n        listen       80;\n        #设置主机域名\n        server_name  www.xiaoyuge.work;\n        #设置访问的语言编码\n        #charset koi8-r;\n        #设置虚拟主机访问日志的存放路径及日志的格式为main\n        #access_log  logs/host.access.log  main;\n   \n        #    这个是域名反问的虚拟主机的文件路径\n        root  /usr/local/nginx/data/ygb\n        #设置虚拟主机的基本信息\n        location / {\n            #设置虚拟主机默认访问的网页\n            index  index.html index.htm;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n   ```\n\n3. 启动,然后在浏览器访问域名www.xiaoyuge.work\n    ```shell\n      ./nginx -c ./nginx.conf\n   ```","slug":"nginx-03","published":1,"updated":"2022-03-27T14:06:03.463Z","layout":"post","photos":[],"link":"","_id":"cl424hx6c004wad5i70z31sg8","content":"<h3 id=\"1-虚拟主机Virtual-Host\"><a href=\"#1-虚拟主机Virtual-Host\" class=\"headerlink\" title=\"1. 虚拟主机Virtual Host\"></a>1. 虚拟主机Virtual Host</h3><p>一种在单一主机或主机群上，实现多网域服务的方法，可以运行多个网站或服务的技术，虚拟主机之间完全独立，并可由用户自行管理虚拟并非指不存在，而是指空间是由实体的服务器延伸而来，其硬件系统可以是基于服务器群，或者单个服务器</p>\n<p>使用域名访问虚拟主机，虚拟主机会给一个文件路径，然后部署自己的内容；访问域名时就会访问改文件夹下的某 个资源</p>\n<h3 id=\"2-使用Nginx配置虚拟主机\"><a href=\"#2-使用Nginx配置虚拟主机\" class=\"headerlink\" title=\"2. 使用Nginx配置虚拟主机\"></a>2. 使用Nginx配置虚拟主机</h3><ol>\n<li><p>在nginx下建立一个ygb的文件夹，里面新建一个index.html</p>\n</li>\n<li><p>在nginx.conf配置下http -&gt; server块内配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    #监听端口为 80</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    #设置主机域名</span><br><span class=\"line\">    server_name  www.xiaoyuge.work;</span><br><span class=\"line\">    #设置访问的语言编码</span><br><span class=\"line\">    #charset koi8-r;</span><br><span class=\"line\">    #设置虚拟主机访问日志的存放路径及日志的格式为main</span><br><span class=\"line\">    #access_log  logs/host.access.log  main;</span><br><span class=\"line\">   </span><br><span class=\"line\">    #    这个是域名反问的虚拟主机的文件路径</span><br><span class=\"line\">    root  /usr/local/nginx/data/ygb</span><br><span class=\"line\">    #设置虚拟主机的基本信息</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        #设置虚拟主机默认访问的网页</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>启动,然后在浏览器访问域名<a href=\"http://www.xiaoyuge.work/\">www.xiaoyuge.work</a></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -c ./nginx.conf</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h3 id=\"1-虚拟主机Virtual-Host\"><a href=\"#1-虚拟主机Virtual-Host\" class=\"headerlink\" title=\"1. 虚拟主机Virtual Host\"></a>1. 虚拟主机Virtual Host</h3><p>一种在单一主机或主机群上，实现多网域服务的方法，可以运行多个网站或服务的技术，虚拟主机之间完全独立，并可由用户自行管理虚拟并非指不存在，而是指空间是由实体的服务器延伸而来，其硬件系统可以是基于服务器群，或者单个服务器</p>\n<p>使用域名访问虚拟主机，虚拟主机会给一个文件路径，然后部署自己的内容；访问域名时就会访问改文件夹下的某 个资源</p>\n<h3 id=\"2-使用Nginx配置虚拟主机\"><a href=\"#2-使用Nginx配置虚拟主机\" class=\"headerlink\" title=\"2. 使用Nginx配置虚拟主机\"></a>2. 使用Nginx配置虚拟主机</h3><ol>\n<li><p>在nginx下建立一个ygb的文件夹，里面新建一个index.html</p>\n</li>\n<li><p>在nginx.conf配置下http -&gt; server块内配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    #监听端口为 80</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    #设置主机域名</span><br><span class=\"line\">    server_name  www.xiaoyuge.work;</span><br><span class=\"line\">    #设置访问的语言编码</span><br><span class=\"line\">    #charset koi8-r;</span><br><span class=\"line\">    #设置虚拟主机访问日志的存放路径及日志的格式为main</span><br><span class=\"line\">    #access_log  logs/host.access.log  main;</span><br><span class=\"line\">   </span><br><span class=\"line\">    #    这个是域名反问的虚拟主机的文件路径</span><br><span class=\"line\">    root  /usr/local/nginx/data/ygb</span><br><span class=\"line\">    #设置虚拟主机的基本信息</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        #设置虚拟主机默认访问的网页</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>启动,然后在浏览器访问域名<a href=\"http://www.xiaoyuge.work/\">www.xiaoyuge.work</a></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -c ./nginx.conf</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Nginx基础篇（四）Nginx实现反向代理","comments":1,"translate_title":"nginx-04","abbrlink":29976,"date":"2021-12-05T08:52:42.000Z","_content":"### 1. 正向代理和反向代理\n1. 正向代理：\n   正向代理类似一个跳板机，代理访问外部资源\n比如我们国内访问谷歌，直接访问访问不到，我们可以通过一个正向代理服务器，请求发到代理服，代理服务器能够访问谷歌，这样由代理去谷歌取到返回数据，再返回给我们，这样我们就能访问谷歌了\n![正向代理](./nginx-04/1.png)\n\n    **正向代理的用途**：\n    \n    （1）访问原来无法访问的资源，如google\n    \n    （2） 可以做缓存，加速访问资源\n    \n    （3）对客户端访问授权，上网进行认证\n    \n    （4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息\n    \n    **正向代理即是客户端代理, 代理客户端, 服务端不知道实际发起请求的客户端**\n   ![正反向代理](./nginx-04/3.png)\n   \n2. 反向代理：\n   反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器\n   ![反向代理](./nginx-04/2.png)\n   \n   **反向代理的作用**：\n   \n   （1）保证内网的安全，阻止web攻击，大型网站，通常将反向代理作为公网访问地址，Web服务器是内网\n   \n   （2）负载均衡，通过反向代理服务器来优化网站的负载\n\n   **反向代理即是服务端代理, 代理服务端, 客户端不知道实际提供服务的服务端**\n\n\n### 2. Nginx配置反向代理\n在http-> server块中配置server_name\n```shell\nserver {\n    #监听端口为 80\n    listen       80;\n    #设置主机域名\n    server_name  http://192.168.44.99;\n    #设置虚拟主机的基本信息\n    location / {\n        proxy_pass http://192.168.44.1:9096;      ###最重要的配置，转发到目标地址， 也可以配置服务器组，然后upstream一个服务器组\n        proxy_method POST;   #设置转发请求的格式\n        #Nginx在header里面增加一个自定义字段 Host， 用于存放当前客户端IP地址\n        proxy_set_header  Host $host;\n        #获取客户端的真实IP地址设置到header中的字段名为X-Real-IP里面\n        proxy_set_header X-Real-IP  $remote_addr;\n        #获取所有转发请求的IP信息列表\n        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;\n    }\n}\n```\n那么访问http://192.168.44.99 ， nginx会将请求转发给目标服务器http://192.168.44.1:9096\n\n#### 2.1 location 匹配规则\n匹配规则从上到下，匹配规则越宽松；\n\n|   模式   |   含义   | \n| ---- | ---- |\n|   location=/uri   |   = 表示精确匹配，只有完全匹配才能生效   |      \n|   location ^~ /uri   |   ^~ 开头对URL路径进行前缀匹配，并且在正则之前   |      \n|   location ~ pattern   |   开头表示区分大小写的正则匹配   |   \n|   location ~* pattern   |   开头表示不区分大小写的正则匹配   |     \n|   location /uri   |   不带任何修饰符，也表示前缀匹配，但是在正则匹配之后   |     \n|   location /  |   通用匹配，任何未匹配到其他location的请求都会匹配到，相当于switch中的default   |     \n\n\n","source":"_posts/2021/12/nginx-04.md","raw":"---\ntitle: Nginx基础篇（四）Nginx实现反向代理\ncomments: true\ntags: nginx\ncategories: nginx\ntranslate_title: nginx-04\nabbrlink: 29976\ndate: 2021-12-05 16:52:42\n---\n### 1. 正向代理和反向代理\n1. 正向代理：\n   正向代理类似一个跳板机，代理访问外部资源\n比如我们国内访问谷歌，直接访问访问不到，我们可以通过一个正向代理服务器，请求发到代理服，代理服务器能够访问谷歌，这样由代理去谷歌取到返回数据，再返回给我们，这样我们就能访问谷歌了\n![正向代理](./nginx-04/1.png)\n\n    **正向代理的用途**：\n    \n    （1）访问原来无法访问的资源，如google\n    \n    （2） 可以做缓存，加速访问资源\n    \n    （3）对客户端访问授权，上网进行认证\n    \n    （4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息\n    \n    **正向代理即是客户端代理, 代理客户端, 服务端不知道实际发起请求的客户端**\n   ![正反向代理](./nginx-04/3.png)\n   \n2. 反向代理：\n   反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器\n   ![反向代理](./nginx-04/2.png)\n   \n   **反向代理的作用**：\n   \n   （1）保证内网的安全，阻止web攻击，大型网站，通常将反向代理作为公网访问地址，Web服务器是内网\n   \n   （2）负载均衡，通过反向代理服务器来优化网站的负载\n\n   **反向代理即是服务端代理, 代理服务端, 客户端不知道实际提供服务的服务端**\n\n\n### 2. Nginx配置反向代理\n在http-> server块中配置server_name\n```shell\nserver {\n    #监听端口为 80\n    listen       80;\n    #设置主机域名\n    server_name  http://192.168.44.99;\n    #设置虚拟主机的基本信息\n    location / {\n        proxy_pass http://192.168.44.1:9096;      ###最重要的配置，转发到目标地址， 也可以配置服务器组，然后upstream一个服务器组\n        proxy_method POST;   #设置转发请求的格式\n        #Nginx在header里面增加一个自定义字段 Host， 用于存放当前客户端IP地址\n        proxy_set_header  Host $host;\n        #获取客户端的真实IP地址设置到header中的字段名为X-Real-IP里面\n        proxy_set_header X-Real-IP  $remote_addr;\n        #获取所有转发请求的IP信息列表\n        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;\n    }\n}\n```\n那么访问http://192.168.44.99 ， nginx会将请求转发给目标服务器http://192.168.44.1:9096\n\n#### 2.1 location 匹配规则\n匹配规则从上到下，匹配规则越宽松；\n\n|   模式   |   含义   | \n| ---- | ---- |\n|   location=/uri   |   = 表示精确匹配，只有完全匹配才能生效   |      \n|   location ^~ /uri   |   ^~ 开头对URL路径进行前缀匹配，并且在正则之前   |      \n|   location ~ pattern   |   开头表示区分大小写的正则匹配   |   \n|   location ~* pattern   |   开头表示不区分大小写的正则匹配   |     \n|   location /uri   |   不带任何修饰符，也表示前缀匹配，但是在正则匹配之后   |     \n|   location /  |   通用匹配，任何未匹配到其他location的请求都会匹配到，相当于switch中的default   |     \n\n\n","slug":"nginx-04","published":1,"updated":"2022-03-27T14:06:03.384Z","layout":"post","photos":[],"link":"","_id":"cl424hx6d0051ad5igzzxab17","content":"<h3 id=\"1-正向代理和反向代理\"><a href=\"#1-正向代理和反向代理\" class=\"headerlink\" title=\"1. 正向代理和反向代理\"></a>1. 正向代理和反向代理</h3><ol>\n<li><p>正向代理：<br>正向代理类似一个跳板机，代理访问外部资源<br>比如我们国内访问谷歌，直接访问访问不到，我们可以通过一个正向代理服务器，请求发到代理服，代理服务器能够访问谷歌，这样由代理去谷歌取到返回数据，再返回给我们，这样我们就能访问谷歌了<br><img src=\"/nginx-04/1.png\" alt=\"正向代理\"></p>\n<p> <strong>正向代理的用途</strong>：</p>\n<p> （1）访问原来无法访问的资源，如google</p>\n<p> （2） 可以做缓存，加速访问资源</p>\n<p> （3）对客户端访问授权，上网进行认证</p>\n<p> （4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</p>\n<p> <strong>正向代理即是客户端代理, 代理客户端, 服务端不知道实际发起请求的客户端</strong><br><img src=\"/nginx-04/3.png\" alt=\"正反向代理\"></p>\n</li>\n<li><p>反向代理：<br>反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器<br><img src=\"/nginx-04/2.png\" alt=\"反向代理\"></p>\n<p><strong>反向代理的作用</strong>：</p>\n<p>（1）保证内网的安全，阻止web攻击，大型网站，通常将反向代理作为公网访问地址，Web服务器是内网</p>\n<p>（2）负载均衡，通过反向代理服务器来优化网站的负载</p>\n<p><strong>反向代理即是服务端代理, 代理服务端, 客户端不知道实际提供服务的服务端</strong></p>\n</li>\n</ol>\n<h3 id=\"2-Nginx配置反向代理\"><a href=\"#2-Nginx配置反向代理\" class=\"headerlink\" title=\"2. Nginx配置反向代理\"></a>2. Nginx配置反向代理</h3><p>在http-&gt; server块中配置server_name</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    #监听端口为 80</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    #设置主机域名</span><br><span class=\"line\">    server_name  http://192.168.44.99;</span><br><span class=\"line\">    #设置虚拟主机的基本信息</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://192.168.44.1:9096;      ###最重要的配置，转发到目标地址， 也可以配置服务器组，然后upstream一个服务器组</span><br><span class=\"line\">        proxy_method POST;   #设置转发请求的格式</span><br><span class=\"line\">        #Nginx在header里面增加一个自定义字段 Host， 用于存放当前客户端IP地址</span><br><span class=\"line\">        proxy_set_header  Host $host;</span><br><span class=\"line\">        #获取客户端的真实IP地址设置到header中的字段名为X-Real-IP里面</span><br><span class=\"line\">        proxy_set_header X-Real-IP  $remote_addr;</span><br><span class=\"line\">        #获取所有转发请求的IP信息列表</span><br><span class=\"line\">        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么访问<a href=\"http://192.168.44.99/\">http://192.168.44.99</a> ， nginx会将请求转发给目标服务器<a href=\"http://192.168.44.1:9096/\">http://192.168.44.1:9096</a></p>\n<h4 id=\"2-1-location-匹配规则\"><a href=\"#2-1-location-匹配规则\" class=\"headerlink\" title=\"2.1 location 匹配规则\"></a>2.1 location 匹配规则</h4><p>匹配规则从上到下，匹配规则越宽松；</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>location=/uri</td>\n<td>= 表示精确匹配，只有完全匹配才能生效</td>\n</tr>\n<tr>\n<td>location ^~ /uri</td>\n<td>^~ 开头对URL路径进行前缀匹配，并且在正则之前</td>\n</tr>\n<tr>\n<td>location ~ pattern</td>\n<td>开头表示区分大小写的正则匹配</td>\n</tr>\n<tr>\n<td>location ~* pattern</td>\n<td>开头表示不区分大小写的正则匹配</td>\n</tr>\n<tr>\n<td>location /uri</td>\n<td>不带任何修饰符，也表示前缀匹配，但是在正则匹配之后</td>\n</tr>\n<tr>\n<td>location /</td>\n<td>通用匹配，任何未匹配到其他location的请求都会匹配到，相当于switch中的default</td>\n</tr>\n</tbody></table>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h3 id=\"1-正向代理和反向代理\"><a href=\"#1-正向代理和反向代理\" class=\"headerlink\" title=\"1. 正向代理和反向代理\"></a>1. 正向代理和反向代理</h3><ol>\n<li><p>正向代理：<br>正向代理类似一个跳板机，代理访问外部资源<br>比如我们国内访问谷歌，直接访问访问不到，我们可以通过一个正向代理服务器，请求发到代理服，代理服务器能够访问谷歌，这样由代理去谷歌取到返回数据，再返回给我们，这样我们就能访问谷歌了<br><img src=\"/nginx-04/1.png\" alt=\"正向代理\"></p>\n<p> <strong>正向代理的用途</strong>：</p>\n<p> （1）访问原来无法访问的资源，如google</p>\n<p> （2） 可以做缓存，加速访问资源</p>\n<p> （3）对客户端访问授权，上网进行认证</p>\n<p> （4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</p>\n<p> <strong>正向代理即是客户端代理, 代理客户端, 服务端不知道实际发起请求的客户端</strong><br><img src=\"/nginx-04/3.png\" alt=\"正反向代理\"></p>\n</li>\n<li><p>反向代理：<br>反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器<br><img src=\"/nginx-04/2.png\" alt=\"反向代理\"></p>\n<p><strong>反向代理的作用</strong>：</p>\n<p>（1）保证内网的安全，阻止web攻击，大型网站，通常将反向代理作为公网访问地址，Web服务器是内网</p>\n<p>（2）负载均衡，通过反向代理服务器来优化网站的负载</p>\n<p><strong>反向代理即是服务端代理, 代理服务端, 客户端不知道实际提供服务的服务端</strong></p>\n</li>\n</ol>\n<h3 id=\"2-Nginx配置反向代理\"><a href=\"#2-Nginx配置反向代理\" class=\"headerlink\" title=\"2. Nginx配置反向代理\"></a>2. Nginx配置反向代理</h3><p>在http-&gt; server块中配置server_name</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    #监听端口为 80</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    #设置主机域名</span><br><span class=\"line\">    server_name  http://192.168.44.99;</span><br><span class=\"line\">    #设置虚拟主机的基本信息</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://192.168.44.1:9096;      ###最重要的配置，转发到目标地址， 也可以配置服务器组，然后upstream一个服务器组</span><br><span class=\"line\">        proxy_method POST;   #设置转发请求的格式</span><br><span class=\"line\">        #Nginx在header里面增加一个自定义字段 Host， 用于存放当前客户端IP地址</span><br><span class=\"line\">        proxy_set_header  Host $host;</span><br><span class=\"line\">        #获取客户端的真实IP地址设置到header中的字段名为X-Real-IP里面</span><br><span class=\"line\">        proxy_set_header X-Real-IP  $remote_addr;</span><br><span class=\"line\">        #获取所有转发请求的IP信息列表</span><br><span class=\"line\">        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么访问<a href=\"http://192.168.44.99/\">http://192.168.44.99</a> ， nginx会将请求转发给目标服务器<a href=\"http://192.168.44.1:9096/\">http://192.168.44.1:9096</a></p>\n<h4 id=\"2-1-location-匹配规则\"><a href=\"#2-1-location-匹配规则\" class=\"headerlink\" title=\"2.1 location 匹配规则\"></a>2.1 location 匹配规则</h4><p>匹配规则从上到下，匹配规则越宽松；</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>location=/uri</td>\n<td>= 表示精确匹配，只有完全匹配才能生效</td>\n</tr>\n<tr>\n<td>location ^~ /uri</td>\n<td>^~ 开头对URL路径进行前缀匹配，并且在正则之前</td>\n</tr>\n<tr>\n<td>location ~ pattern</td>\n<td>开头表示区分大小写的正则匹配</td>\n</tr>\n<tr>\n<td>location ~* pattern</td>\n<td>开头表示不区分大小写的正则匹配</td>\n</tr>\n<tr>\n<td>location /uri</td>\n<td>不带任何修饰符，也表示前缀匹配，但是在正则匹配之后</td>\n</tr>\n<tr>\n<td>location /</td>\n<td>通用匹配，任何未匹配到其他location的请求都会匹配到，相当于switch中的default</td>\n</tr>\n</tbody></table>\n"},{"title":"Nginx基础篇（一）扫盲","comments":1,"translate_title":"Nginx-Basics-I-literacy","abbrlink":58927,"date":"2021-12-05T06:56:36.000Z","_content":"### 1.Nginx发展史\n作者：logo Sysoev\n- 2000年地洞，c语言编写\n- 2004年开源\n- 2011年成立商业公司\n- 2013 发布商业版本Nginx plus\n- 2019.5月F5 Networks收购nginx\n- 2019.12被Rambler集团起诉\n\n\n### 2.Nginx与其他web服务器对比\n\n1. Nginx与Apache HTTP server project区别\n   用来响应用户请求的web服务器\n2. Nginx 和tomcat区别\n   Nginx是HTTP Server，主要是用于访问一些静态资源，可以用做代理服务器\n   Tomcat是Application Server应用服务器，用来存放和运行程序；\n3. HTTP Server 和Application Server区别与联系\n\n### 3. HTTP知识\n#### 3.1 IP和端口\n120.77.38.160:80\n\n0为A类，10为B类，110为C类，1110为D类，1111为E类。D类地址供组播使用，E类地址保留。\n\n![img](./nginx-md/1.png)\n\n![img](./nginx-md/2.png)\n\n端口是：0～65535\n#### 3.2 域名\n协议、子域名、顶级域名、域名类型、资源路径、参数\n```text\n#https 协议默认端口443 可以省略\nhttps://www.baidu.com:443\n\n#user：子域名， com为域名类型（cn中国， us美国...）； 3623252831 为资源路径\nhttps://user.qzone.qq.com/3623252831\n\n#？号后面为参数\nhttps://baike.baidu.com/item/测试/232323?fr=asdfasdf\n```\n**域名(domainName)和IP的关系以及域名的组成**\n\n域名：https://www.baidu.com:443/member/query?far=adsfad\n   - http/ https: 协议\n   - baidu: 顶级域名\n   - Com： 域名类型\n   - www: 子域名，可以有多级：user.qzone.qq.com/232323\n   - far=asdfa: 参数\n   - member/query: 资源路径\nDNS(domain name server)将域名转化为ip+port\n     \n\n##### 3.3 HTTP协议的特点\n- 简单快速\n- 灵活\n- 无连接（一次请求，连接关闭）\n- 无状态（每次请求都和之前的请求无关）\n\n\n##### 3.4 HTTP协议的请求格式\n```text\nRequest URL: https://prtas.videocc.net/v2/view?pid=1638687363047X1327470&vid=8c8d9388d0b4c16f41ef557fba23dede_8&uid=8c8d9388d0&flow=0&ts=1638688553584&href=aHR0cHM6Ly9rZS5ndXBhb2VkdS5jbi9wbGF5LzI4OD9waGFzZUlkPTU&duration=1278&cts=789&sign=fcf19468eff088e983796d5826268f2d&sd=1190&pd=788&pn=HTML5&pv=v1.15.0&sid=ZDIzZGM4ODUtNDM2My00MTQ3LWJmYTktY2M3MDgwM2U0NDc5&param1=&param2=MTc2MjEyODQ5OTg&param3=&cataid=1591268435818\nRequest Method: GET\nStatus Code: 200 \nRemote Address: 221.231.81.238:443\nReferrer Policy: strict-origin-when-cross-origin\n```\n- 请求行\n- 请求类型 Request Method\n   1. GET: 请求指定的页面细腻，并返回尸体主题\n   2. HEAD: 类似于GET请求，只不过返回的相应中没有具体的内容，用于获取报头\n   3. POST：想指定资源提交数据进行处理请求，数据被高喊在请求体中\n   4. PUT: 从客户端想服务器传送的数据取代指定的文档的内容\n   5. DELETE: 请求服务器删除指定的页面\n   6. CONNECT: HTTP/1.1协议中预留给能够将连接方式改为管道方式的代理服务器\n   7. OPTIONS: 允许客户端查看服务器的性能\n   8. TRACE: 回显服务器收到的请求，主要用于测试后诊断\n- 请求头\n- 空行和请求数据\n\n##### 3.5 HTTP协议的返回格式\n状态行、小洗头、空行和响应正文\n```text\nHTTP/1.1 200\nServer: nginx/1.20.1\nDate: Sun, 05 Dec 2021 07:24:45 GMT\nContent-Type: application/json;charset=UTF-8\nTransfer-Encoding: chunked\nConnection: keep-alive\nAccess-Control-Allow-Origin: https://ke.gupaoedu.cn\nAccess-Control-Allow-Credentials: true\nAccess-Control-Allow-Methods: PUT,POST,GET,DELETE,OPTIONS,PATCH\nAccess-Control-Allow-Headers: DNT,web-token,app-token,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-Mx-ReqToken,X-Data-Type,X-Auth-Token,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,token,showerr\nAccess-Control-Max-Age: 86400\n```\n\n**Http格式响应状态码有哪些**\n\n- 1xx: informational(信息性状态码) 接受的请求正在处理\n- 2xx: success(成功状态码)  请求正常处理完毕\n- 3xx：redirection（重定向状态码）需要进行复检操作以完成请求\n- 4xx：client error（客户端错误状态码） 服务器无法处理请求\n- 5xx: server error（服务器错误错误状态码） 服务器处理请求出错\n\n##### 3.6 通用头字段Common Header\n|   字段   |   含义   | \n| ---- | ---- |\n|   Cache-control   |   控制缓存的行为   |      \n|   Connection   |   控制不再转发给代理的收不字段、管理持久连接   |      \n|   Date   |   创建报文的日期时间   |   \n|   Pragma   |   报文指令   |     \n|   Trailer   |   报文末端的首部一览   |     \n|   Transfer-Encoding   |   指定报文主题的传输编码方式   |     \n|   Upgrade   |   升级为其他协议   |     \n|   Via    |   代理服务器的相关信息   |     \n|   Warning   |   错误通知   |  \n\n##### 3.7 响应头字段Response Header\n|   字段   |   含义   | \n| ---- | ---- |\n|   Accept-Ranges   |   是否接收字节范围请求   |      \n|   Age   |   推算资源创建经过的时间   |      \n|   ETag   |   资源的匹配信息   |   \n|   Location   |   另客户端重定向至指定的URI   |      \n|   Proxy-Authenticate   |   代理服务器对客户端的认证信息   |     \n|   Retry-After   |   对再次发起请求的时机要求   |     \n|   Vary  |   代理服务器缓存的管理信息   |     \n|   WWW-Authenticate   |   服务器对客户端的认证信息   |  \n\n##### 3.8 实体头字段 Entity Header\n|   字段   |   含义   | \n| ---- | ---- |\n|   Allow  |   资源科支持的http方法   |      \n|   Connect-Encoding   |   实体主体适用的编码格式   |      \n|   Content-Language   |   实体主体的自然语言   |   \n|   Content-length   |   实体主体的大小   |      \n|   Content-Location   |   替代敌营资源的URI   |     \n|   Content-MD5   |   实体主体的报文摘要   |     \n|   Content-Range  |   实体主体的位置范围   |     \n|   Content-Type   |   实体主体的媒体类型   |\n|   Expires  |   实体主体过期的日期时间   |     \n|   Last-Modified   |   资源的最后修改日期时间   |  \n\n\n","source":"_posts/2021/12/nginx-md.md","raw":"---\ntitle: Nginx基础篇（一）扫盲\ncomments: true\ntags: nginx\ncategories: nginx\ntranslate_title: Nginx-Basics-I-literacy\nabbrlink: 58927\ndate: 2021-12-05 14:56:36\n---\n### 1.Nginx发展史\n作者：logo Sysoev\n- 2000年地洞，c语言编写\n- 2004年开源\n- 2011年成立商业公司\n- 2013 发布商业版本Nginx plus\n- 2019.5月F5 Networks收购nginx\n- 2019.12被Rambler集团起诉\n\n\n### 2.Nginx与其他web服务器对比\n\n1. Nginx与Apache HTTP server project区别\n   用来响应用户请求的web服务器\n2. Nginx 和tomcat区别\n   Nginx是HTTP Server，主要是用于访问一些静态资源，可以用做代理服务器\n   Tomcat是Application Server应用服务器，用来存放和运行程序；\n3. HTTP Server 和Application Server区别与联系\n\n### 3. HTTP知识\n#### 3.1 IP和端口\n120.77.38.160:80\n\n0为A类，10为B类，110为C类，1110为D类，1111为E类。D类地址供组播使用，E类地址保留。\n\n![img](./nginx-md/1.png)\n\n![img](./nginx-md/2.png)\n\n端口是：0～65535\n#### 3.2 域名\n协议、子域名、顶级域名、域名类型、资源路径、参数\n```text\n#https 协议默认端口443 可以省略\nhttps://www.baidu.com:443\n\n#user：子域名， com为域名类型（cn中国， us美国...）； 3623252831 为资源路径\nhttps://user.qzone.qq.com/3623252831\n\n#？号后面为参数\nhttps://baike.baidu.com/item/测试/232323?fr=asdfasdf\n```\n**域名(domainName)和IP的关系以及域名的组成**\n\n域名：https://www.baidu.com:443/member/query?far=adsfad\n   - http/ https: 协议\n   - baidu: 顶级域名\n   - Com： 域名类型\n   - www: 子域名，可以有多级：user.qzone.qq.com/232323\n   - far=asdfa: 参数\n   - member/query: 资源路径\nDNS(domain name server)将域名转化为ip+port\n     \n\n##### 3.3 HTTP协议的特点\n- 简单快速\n- 灵活\n- 无连接（一次请求，连接关闭）\n- 无状态（每次请求都和之前的请求无关）\n\n\n##### 3.4 HTTP协议的请求格式\n```text\nRequest URL: https://prtas.videocc.net/v2/view?pid=1638687363047X1327470&vid=8c8d9388d0b4c16f41ef557fba23dede_8&uid=8c8d9388d0&flow=0&ts=1638688553584&href=aHR0cHM6Ly9rZS5ndXBhb2VkdS5jbi9wbGF5LzI4OD9waGFzZUlkPTU&duration=1278&cts=789&sign=fcf19468eff088e983796d5826268f2d&sd=1190&pd=788&pn=HTML5&pv=v1.15.0&sid=ZDIzZGM4ODUtNDM2My00MTQ3LWJmYTktY2M3MDgwM2U0NDc5&param1=&param2=MTc2MjEyODQ5OTg&param3=&cataid=1591268435818\nRequest Method: GET\nStatus Code: 200 \nRemote Address: 221.231.81.238:443\nReferrer Policy: strict-origin-when-cross-origin\n```\n- 请求行\n- 请求类型 Request Method\n   1. GET: 请求指定的页面细腻，并返回尸体主题\n   2. HEAD: 类似于GET请求，只不过返回的相应中没有具体的内容，用于获取报头\n   3. POST：想指定资源提交数据进行处理请求，数据被高喊在请求体中\n   4. PUT: 从客户端想服务器传送的数据取代指定的文档的内容\n   5. DELETE: 请求服务器删除指定的页面\n   6. CONNECT: HTTP/1.1协议中预留给能够将连接方式改为管道方式的代理服务器\n   7. OPTIONS: 允许客户端查看服务器的性能\n   8. TRACE: 回显服务器收到的请求，主要用于测试后诊断\n- 请求头\n- 空行和请求数据\n\n##### 3.5 HTTP协议的返回格式\n状态行、小洗头、空行和响应正文\n```text\nHTTP/1.1 200\nServer: nginx/1.20.1\nDate: Sun, 05 Dec 2021 07:24:45 GMT\nContent-Type: application/json;charset=UTF-8\nTransfer-Encoding: chunked\nConnection: keep-alive\nAccess-Control-Allow-Origin: https://ke.gupaoedu.cn\nAccess-Control-Allow-Credentials: true\nAccess-Control-Allow-Methods: PUT,POST,GET,DELETE,OPTIONS,PATCH\nAccess-Control-Allow-Headers: DNT,web-token,app-token,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-Mx-ReqToken,X-Data-Type,X-Auth-Token,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,token,showerr\nAccess-Control-Max-Age: 86400\n```\n\n**Http格式响应状态码有哪些**\n\n- 1xx: informational(信息性状态码) 接受的请求正在处理\n- 2xx: success(成功状态码)  请求正常处理完毕\n- 3xx：redirection（重定向状态码）需要进行复检操作以完成请求\n- 4xx：client error（客户端错误状态码） 服务器无法处理请求\n- 5xx: server error（服务器错误错误状态码） 服务器处理请求出错\n\n##### 3.6 通用头字段Common Header\n|   字段   |   含义   | \n| ---- | ---- |\n|   Cache-control   |   控制缓存的行为   |      \n|   Connection   |   控制不再转发给代理的收不字段、管理持久连接   |      \n|   Date   |   创建报文的日期时间   |   \n|   Pragma   |   报文指令   |     \n|   Trailer   |   报文末端的首部一览   |     \n|   Transfer-Encoding   |   指定报文主题的传输编码方式   |     \n|   Upgrade   |   升级为其他协议   |     \n|   Via    |   代理服务器的相关信息   |     \n|   Warning   |   错误通知   |  \n\n##### 3.7 响应头字段Response Header\n|   字段   |   含义   | \n| ---- | ---- |\n|   Accept-Ranges   |   是否接收字节范围请求   |      \n|   Age   |   推算资源创建经过的时间   |      \n|   ETag   |   资源的匹配信息   |   \n|   Location   |   另客户端重定向至指定的URI   |      \n|   Proxy-Authenticate   |   代理服务器对客户端的认证信息   |     \n|   Retry-After   |   对再次发起请求的时机要求   |     \n|   Vary  |   代理服务器缓存的管理信息   |     \n|   WWW-Authenticate   |   服务器对客户端的认证信息   |  \n\n##### 3.8 实体头字段 Entity Header\n|   字段   |   含义   | \n| ---- | ---- |\n|   Allow  |   资源科支持的http方法   |      \n|   Connect-Encoding   |   实体主体适用的编码格式   |      \n|   Content-Language   |   实体主体的自然语言   |   \n|   Content-length   |   实体主体的大小   |      \n|   Content-Location   |   替代敌营资源的URI   |     \n|   Content-MD5   |   实体主体的报文摘要   |     \n|   Content-Range  |   实体主体的位置范围   |     \n|   Content-Type   |   实体主体的媒体类型   |\n|   Expires  |   实体主体过期的日期时间   |     \n|   Last-Modified   |   资源的最后修改日期时间   |  \n\n\n","slug":"nginx-md","published":1,"updated":"2022-03-27T14:06:03.377Z","layout":"post","photos":[],"link":"","_id":"cl424hx6p006iad5i39udgrg1","content":"<h3 id=\"1-Nginx发展史\"><a href=\"#1-Nginx发展史\" class=\"headerlink\" title=\"1.Nginx发展史\"></a>1.Nginx发展史</h3><p>作者：logo Sysoev</p>\n<ul>\n<li>2000年地洞，c语言编写</li>\n<li>2004年开源</li>\n<li>2011年成立商业公司</li>\n<li>2013 发布商业版本Nginx plus</li>\n<li>2019.5月F5 Networks收购nginx</li>\n<li>2019.12被Rambler集团起诉</li>\n</ul>\n<h3 id=\"2-Nginx与其他web服务器对比\"><a href=\"#2-Nginx与其他web服务器对比\" class=\"headerlink\" title=\"2.Nginx与其他web服务器对比\"></a>2.Nginx与其他web服务器对比</h3><ol>\n<li>Nginx与Apache HTTP server project区别<br>用来响应用户请求的web服务器</li>\n<li>Nginx 和tomcat区别<br>Nginx是HTTP Server，主要是用于访问一些静态资源，可以用做代理服务器<br>Tomcat是Application Server应用服务器，用来存放和运行程序；</li>\n<li>HTTP Server 和Application Server区别与联系</li>\n</ol>\n<h3 id=\"3-HTTP知识\"><a href=\"#3-HTTP知识\" class=\"headerlink\" title=\"3. HTTP知识\"></a>3. HTTP知识</h3><h4 id=\"3-1-IP和端口\"><a href=\"#3-1-IP和端口\" class=\"headerlink\" title=\"3.1 IP和端口\"></a>3.1 IP和端口</h4><p>120.77.38.160:80</p>\n<p>0为A类，10为B类，110为C类，1110为D类，1111为E类。D类地址供组播使用，E类地址保留。</p>\n<p><img src=\"/nginx-md/1.png\" alt=\"img\"></p>\n<p><img src=\"/nginx-md/2.png\" alt=\"img\"></p>\n<p>端口是：0～65535</p>\n<h4 id=\"3-2-域名\"><a href=\"#3-2-域名\" class=\"headerlink\" title=\"3.2 域名\"></a>3.2 域名</h4><p>协议、子域名、顶级域名、域名类型、资源路径、参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#https 协议默认端口443 可以省略</span><br><span class=\"line\">https://www.baidu.com:443</span><br><span class=\"line\"></span><br><span class=\"line\">#user：子域名， com为域名类型（cn中国， us美国...）； 3623252831 为资源路径</span><br><span class=\"line\">https://user.qzone.qq.com/3623252831</span><br><span class=\"line\"></span><br><span class=\"line\">#？号后面为参数</span><br><span class=\"line\">https://baike.baidu.com/item/测试/232323?fr=asdfasdf</span><br></pre></td></tr></table></figure>\n<p><strong>域名(domainName)和IP的关系以及域名的组成</strong></p>\n<p>域名：<a href=\"https://www.baidu.com/member/query?far=adsfad\">https://www.baidu.com:443/member/query?far=adsfad</a></p>\n<ul>\n<li>http/ https: 协议</li>\n<li>baidu: 顶级域名</li>\n<li>Com： 域名类型</li>\n<li>www: 子域名，可以有多级：user.qzone.qq.com/232323</li>\n<li>far=asdfa: 参数</li>\n<li>member/query: 资源路径<br>DNS(domain name server)将域名转化为ip+port</li>\n</ul>\n<h5 id=\"3-3-HTTP协议的特点\"><a href=\"#3-3-HTTP协议的特点\" class=\"headerlink\" title=\"3.3 HTTP协议的特点\"></a>3.3 HTTP协议的特点</h5><ul>\n<li>简单快速</li>\n<li>灵活</li>\n<li>无连接（一次请求，连接关闭）</li>\n<li>无状态（每次请求都和之前的请求无关）</li>\n</ul>\n<h5 id=\"3-4-HTTP协议的请求格式\"><a href=\"#3-4-HTTP协议的请求格式\" class=\"headerlink\" title=\"3.4 HTTP协议的请求格式\"></a>3.4 HTTP协议的请求格式</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request URL: https://prtas.videocc.net/v2/view?pid=1638687363047X1327470&amp;vid=8c8d9388d0b4c16f41ef557fba23dede_8&amp;uid=8c8d9388d0&amp;flow=0&amp;ts=1638688553584&amp;href=aHR0cHM6Ly9rZS5ndXBhb2VkdS5jbi9wbGF5LzI4OD9waGFzZUlkPTU&amp;duration=1278&amp;cts=789&amp;sign=fcf19468eff088e983796d5826268f2d&amp;sd=1190&amp;pd=788&amp;pn=HTML5&amp;pv=v1.15.0&amp;sid=ZDIzZGM4ODUtNDM2My00MTQ3LWJmYTktY2M3MDgwM2U0NDc5&amp;param1=&amp;param2=MTc2MjEyODQ5OTg&amp;param3=&amp;cataid=1591268435818</span><br><span class=\"line\">Request Method: GET</span><br><span class=\"line\">Status Code: 200 </span><br><span class=\"line\">Remote Address: 221.231.81.238:443</span><br><span class=\"line\">Referrer Policy: strict-origin-when-cross-origin</span><br></pre></td></tr></table></figure>\n<ul>\n<li>请求行</li>\n<li>请求类型 Request Method<ol>\n<li>GET: 请求指定的页面细腻，并返回尸体主题</li>\n<li>HEAD: 类似于GET请求，只不过返回的相应中没有具体的内容，用于获取报头</li>\n<li>POST：想指定资源提交数据进行处理请求，数据被高喊在请求体中</li>\n<li>PUT: 从客户端想服务器传送的数据取代指定的文档的内容</li>\n<li>DELETE: 请求服务器删除指定的页面</li>\n<li>CONNECT: HTTP/1.1协议中预留给能够将连接方式改为管道方式的代理服务器</li>\n<li>OPTIONS: 允许客户端查看服务器的性能</li>\n<li>TRACE: 回显服务器收到的请求，主要用于测试后诊断</li>\n</ol>\n</li>\n<li>请求头</li>\n<li>空行和请求数据</li>\n</ul>\n<h5 id=\"3-5-HTTP协议的返回格式\"><a href=\"#3-5-HTTP协议的返回格式\" class=\"headerlink\" title=\"3.5 HTTP协议的返回格式\"></a>3.5 HTTP协议的返回格式</h5><p>状态行、小洗头、空行和响应正文</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200</span><br><span class=\"line\">Server: nginx/1.20.1</span><br><span class=\"line\">Date: Sun, 05 Dec 2021 07:24:45 GMT</span><br><span class=\"line\">Content-Type: application/json;charset=UTF-8</span><br><span class=\"line\">Transfer-Encoding: chunked</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Access-Control-Allow-Origin: https://ke.gupaoedu.cn</span><br><span class=\"line\">Access-Control-Allow-Credentials: true</span><br><span class=\"line\">Access-Control-Allow-Methods: PUT,POST,GET,DELETE,OPTIONS,PATCH</span><br><span class=\"line\">Access-Control-Allow-Headers: DNT,web-token,app-token,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-Mx-ReqToken,X-Data-Type,X-Auth-Token,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,token,showerr</span><br><span class=\"line\">Access-Control-Max-Age: 86400</span><br></pre></td></tr></table></figure>\n\n<p><strong>Http格式响应状态码有哪些</strong></p>\n<ul>\n<li>1xx: informational(信息性状态码) 接受的请求正在处理</li>\n<li>2xx: success(成功状态码)  请求正常处理完毕</li>\n<li>3xx：redirection（重定向状态码）需要进行复检操作以完成请求</li>\n<li>4xx：client error（客户端错误状态码） 服务器无法处理请求</li>\n<li>5xx: server error（服务器错误错误状态码） 服务器处理请求出错</li>\n</ul>\n<h5 id=\"3-6-通用头字段Common-Header\"><a href=\"#3-6-通用头字段Common-Header\" class=\"headerlink\" title=\"3.6 通用头字段Common Header\"></a>3.6 通用头字段Common Header</h5><table>\n<thead>\n<tr>\n<th>字段</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Cache-control</td>\n<td>控制缓存的行为</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>控制不再转发给代理的收不字段、管理持久连接</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>创建报文的日期时间</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>报文指令</td>\n</tr>\n<tr>\n<td>Trailer</td>\n<td>报文末端的首部一览</td>\n</tr>\n<tr>\n<td>Transfer-Encoding</td>\n<td>指定报文主题的传输编码方式</td>\n</tr>\n<tr>\n<td>Upgrade</td>\n<td>升级为其他协议</td>\n</tr>\n<tr>\n<td>Via</td>\n<td>代理服务器的相关信息</td>\n</tr>\n<tr>\n<td>Warning</td>\n<td>错误通知</td>\n</tr>\n</tbody></table>\n<h5 id=\"3-7-响应头字段Response-Header\"><a href=\"#3-7-响应头字段Response-Header\" class=\"headerlink\" title=\"3.7 响应头字段Response Header\"></a>3.7 响应头字段Response Header</h5><table>\n<thead>\n<tr>\n<th>字段</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Accept-Ranges</td>\n<td>是否接收字节范围请求</td>\n</tr>\n<tr>\n<td>Age</td>\n<td>推算资源创建经过的时间</td>\n</tr>\n<tr>\n<td>ETag</td>\n<td>资源的匹配信息</td>\n</tr>\n<tr>\n<td>Location</td>\n<td>另客户端重定向至指定的URI</td>\n</tr>\n<tr>\n<td>Proxy-Authenticate</td>\n<td>代理服务器对客户端的认证信息</td>\n</tr>\n<tr>\n<td>Retry-After</td>\n<td>对再次发起请求的时机要求</td>\n</tr>\n<tr>\n<td>Vary</td>\n<td>代理服务器缓存的管理信息</td>\n</tr>\n<tr>\n<td>WWW-Authenticate</td>\n<td>服务器对客户端的认证信息</td>\n</tr>\n</tbody></table>\n<h5 id=\"3-8-实体头字段-Entity-Header\"><a href=\"#3-8-实体头字段-Entity-Header\" class=\"headerlink\" title=\"3.8 实体头字段 Entity Header\"></a>3.8 实体头字段 Entity Header</h5><table>\n<thead>\n<tr>\n<th>字段</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Allow</td>\n<td>资源科支持的http方法</td>\n</tr>\n<tr>\n<td>Connect-Encoding</td>\n<td>实体主体适用的编码格式</td>\n</tr>\n<tr>\n<td>Content-Language</td>\n<td>实体主体的自然语言</td>\n</tr>\n<tr>\n<td>Content-length</td>\n<td>实体主体的大小</td>\n</tr>\n<tr>\n<td>Content-Location</td>\n<td>替代敌营资源的URI</td>\n</tr>\n<tr>\n<td>Content-MD5</td>\n<td>实体主体的报文摘要</td>\n</tr>\n<tr>\n<td>Content-Range</td>\n<td>实体主体的位置范围</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>实体主体的媒体类型</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>实体主体过期的日期时间</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>资源的最后修改日期时间</td>\n</tr>\n</tbody></table>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h3 id=\"1-Nginx发展史\"><a href=\"#1-Nginx发展史\" class=\"headerlink\" title=\"1.Nginx发展史\"></a>1.Nginx发展史</h3><p>作者：logo Sysoev</p>\n<ul>\n<li>2000年地洞，c语言编写</li>\n<li>2004年开源</li>\n<li>2011年成立商业公司</li>\n<li>2013 发布商业版本Nginx plus</li>\n<li>2019.5月F5 Networks收购nginx</li>\n<li>2019.12被Rambler集团起诉</li>\n</ul>\n<h3 id=\"2-Nginx与其他web服务器对比\"><a href=\"#2-Nginx与其他web服务器对比\" class=\"headerlink\" title=\"2.Nginx与其他web服务器对比\"></a>2.Nginx与其他web服务器对比</h3><ol>\n<li>Nginx与Apache HTTP server project区别<br>用来响应用户请求的web服务器</li>\n<li>Nginx 和tomcat区别<br>Nginx是HTTP Server，主要是用于访问一些静态资源，可以用做代理服务器<br>Tomcat是Application Server应用服务器，用来存放和运行程序；</li>\n<li>HTTP Server 和Application Server区别与联系</li>\n</ol>\n<h3 id=\"3-HTTP知识\"><a href=\"#3-HTTP知识\" class=\"headerlink\" title=\"3. HTTP知识\"></a>3. HTTP知识</h3><h4 id=\"3-1-IP和端口\"><a href=\"#3-1-IP和端口\" class=\"headerlink\" title=\"3.1 IP和端口\"></a>3.1 IP和端口</h4><p>120.77.38.160:80</p>\n<p>0为A类，10为B类，110为C类，1110为D类，1111为E类。D类地址供组播使用，E类地址保留。</p>\n<p><img src=\"/nginx-md/1.png\" alt=\"img\"></p>\n<p><img src=\"/nginx-md/2.png\" alt=\"img\"></p>\n<p>端口是：0～65535</p>\n<h4 id=\"3-2-域名\"><a href=\"#3-2-域名\" class=\"headerlink\" title=\"3.2 域名\"></a>3.2 域名</h4><p>协议、子域名、顶级域名、域名类型、资源路径、参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#https 协议默认端口443 可以省略</span><br><span class=\"line\">https://www.baidu.com:443</span><br><span class=\"line\"></span><br><span class=\"line\">#user：子域名， com为域名类型（cn中国， us美国...）； 3623252831 为资源路径</span><br><span class=\"line\">https://user.qzone.qq.com/3623252831</span><br><span class=\"line\"></span><br><span class=\"line\">#？号后面为参数</span><br><span class=\"line\">https://baike.baidu.com/item/测试/232323?fr=asdfasdf</span><br></pre></td></tr></table></figure>\n<p><strong>域名(domainName)和IP的关系以及域名的组成</strong></p>\n<p>域名：<a href=\"https://www.baidu.com/member/query?far=adsfad\">https://www.baidu.com:443/member/query?far=adsfad</a></p>\n<ul>\n<li>http/ https: 协议</li>\n<li>baidu: 顶级域名</li>\n<li>Com： 域名类型</li>\n<li>www: 子域名，可以有多级：user.qzone.qq.com/232323</li>\n<li>far=asdfa: 参数</li>\n<li>member/query: 资源路径<br>DNS(domain name server)将域名转化为ip+port</li>\n</ul>\n<h5 id=\"3-3-HTTP协议的特点\"><a href=\"#3-3-HTTP协议的特点\" class=\"headerlink\" title=\"3.3 HTTP协议的特点\"></a>3.3 HTTP协议的特点</h5><ul>\n<li>简单快速</li>\n<li>灵活</li>\n<li>无连接（一次请求，连接关闭）</li>\n<li>无状态（每次请求都和之前的请求无关）</li>\n</ul>\n<h5 id=\"3-4-HTTP协议的请求格式\"><a href=\"#3-4-HTTP协议的请求格式\" class=\"headerlink\" title=\"3.4 HTTP协议的请求格式\"></a>3.4 HTTP协议的请求格式</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request URL: https://prtas.videocc.net/v2/view?pid=1638687363047X1327470&amp;vid=8c8d9388d0b4c16f41ef557fba23dede_8&amp;uid=8c8d9388d0&amp;flow=0&amp;ts=1638688553584&amp;href=aHR0cHM6Ly9rZS5ndXBhb2VkdS5jbi9wbGF5LzI4OD9waGFzZUlkPTU&amp;duration=1278&amp;cts=789&amp;sign=fcf19468eff088e983796d5826268f2d&amp;sd=1190&amp;pd=788&amp;pn=HTML5&amp;pv=v1.15.0&amp;sid=ZDIzZGM4ODUtNDM2My00MTQ3LWJmYTktY2M3MDgwM2U0NDc5&amp;param1=&amp;param2=MTc2MjEyODQ5OTg&amp;param3=&amp;cataid=1591268435818</span><br><span class=\"line\">Request Method: GET</span><br><span class=\"line\">Status Code: 200 </span><br><span class=\"line\">Remote Address: 221.231.81.238:443</span><br><span class=\"line\">Referrer Policy: strict-origin-when-cross-origin</span><br></pre></td></tr></table></figure>\n<ul>\n<li>请求行</li>\n<li>请求类型 Request Method<ol>\n<li>GET: 请求指定的页面细腻，并返回尸体主题</li>\n<li>HEAD: 类似于GET请求，只不过返回的相应中没有具体的内容，用于获取报头</li>\n<li>POST：想指定资源提交数据进行处理请求，数据被高喊在请求体中</li>\n<li>PUT: 从客户端想服务器传送的数据取代指定的文档的内容</li>\n<li>DELETE: 请求服务器删除指定的页面</li>\n<li>CONNECT: HTTP/1.1协议中预留给能够将连接方式改为管道方式的代理服务器</li>\n<li>OPTIONS: 允许客户端查看服务器的性能</li>\n<li>TRACE: 回显服务器收到的请求，主要用于测试后诊断</li>\n</ol>\n</li>\n<li>请求头</li>\n<li>空行和请求数据</li>\n</ul>\n<h5 id=\"3-5-HTTP协议的返回格式\"><a href=\"#3-5-HTTP协议的返回格式\" class=\"headerlink\" title=\"3.5 HTTP协议的返回格式\"></a>3.5 HTTP协议的返回格式</h5><p>状态行、小洗头、空行和响应正文</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200</span><br><span class=\"line\">Server: nginx/1.20.1</span><br><span class=\"line\">Date: Sun, 05 Dec 2021 07:24:45 GMT</span><br><span class=\"line\">Content-Type: application/json;charset=UTF-8</span><br><span class=\"line\">Transfer-Encoding: chunked</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Access-Control-Allow-Origin: https://ke.gupaoedu.cn</span><br><span class=\"line\">Access-Control-Allow-Credentials: true</span><br><span class=\"line\">Access-Control-Allow-Methods: PUT,POST,GET,DELETE,OPTIONS,PATCH</span><br><span class=\"line\">Access-Control-Allow-Headers: DNT,web-token,app-token,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-Mx-ReqToken,X-Data-Type,X-Auth-Token,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,token,showerr</span><br><span class=\"line\">Access-Control-Max-Age: 86400</span><br></pre></td></tr></table></figure>\n\n<p><strong>Http格式响应状态码有哪些</strong></p>\n<ul>\n<li>1xx: informational(信息性状态码) 接受的请求正在处理</li>\n<li>2xx: success(成功状态码)  请求正常处理完毕</li>\n<li>3xx：redirection（重定向状态码）需要进行复检操作以完成请求</li>\n<li>4xx：client error（客户端错误状态码） 服务器无法处理请求</li>\n<li>5xx: server error（服务器错误错误状态码） 服务器处理请求出错</li>\n</ul>\n<h5 id=\"3-6-通用头字段Common-Header\"><a href=\"#3-6-通用头字段Common-Header\" class=\"headerlink\" title=\"3.6 通用头字段Common Header\"></a>3.6 通用头字段Common Header</h5><table>\n<thead>\n<tr>\n<th>字段</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Cache-control</td>\n<td>控制缓存的行为</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>控制不再转发给代理的收不字段、管理持久连接</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>创建报文的日期时间</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>报文指令</td>\n</tr>\n<tr>\n<td>Trailer</td>\n<td>报文末端的首部一览</td>\n</tr>\n<tr>\n<td>Transfer-Encoding</td>\n<td>指定报文主题的传输编码方式</td>\n</tr>\n<tr>\n<td>Upgrade</td>\n<td>升级为其他协议</td>\n</tr>\n<tr>\n<td>Via</td>\n<td>代理服务器的相关信息</td>\n</tr>\n<tr>\n<td>Warning</td>\n<td>错误通知</td>\n</tr>\n</tbody></table>\n<h5 id=\"3-7-响应头字段Response-Header\"><a href=\"#3-7-响应头字段Response-Header\" class=\"headerlink\" title=\"3.7 响应头字段Response Header\"></a>3.7 响应头字段Response Header</h5><table>\n<thead>\n<tr>\n<th>字段</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Accept-Ranges</td>\n<td>是否接收字节范围请求</td>\n</tr>\n<tr>\n<td>Age</td>\n<td>推算资源创建经过的时间</td>\n</tr>\n<tr>\n<td>ETag</td>\n<td>资源的匹配信息</td>\n</tr>\n<tr>\n<td>Location</td>\n<td>另客户端重定向至指定的URI</td>\n</tr>\n<tr>\n<td>Proxy-Authenticate</td>\n<td>代理服务器对客户端的认证信息</td>\n</tr>\n<tr>\n<td>Retry-After</td>\n<td>对再次发起请求的时机要求</td>\n</tr>\n<tr>\n<td>Vary</td>\n<td>代理服务器缓存的管理信息</td>\n</tr>\n<tr>\n<td>WWW-Authenticate</td>\n<td>服务器对客户端的认证信息</td>\n</tr>\n</tbody></table>\n<h5 id=\"3-8-实体头字段-Entity-Header\"><a href=\"#3-8-实体头字段-Entity-Header\" class=\"headerlink\" title=\"3.8 实体头字段 Entity Header\"></a>3.8 实体头字段 Entity Header</h5><table>\n<thead>\n<tr>\n<th>字段</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Allow</td>\n<td>资源科支持的http方法</td>\n</tr>\n<tr>\n<td>Connect-Encoding</td>\n<td>实体主体适用的编码格式</td>\n</tr>\n<tr>\n<td>Content-Language</td>\n<td>实体主体的自然语言</td>\n</tr>\n<tr>\n<td>Content-length</td>\n<td>实体主体的大小</td>\n</tr>\n<tr>\n<td>Content-Location</td>\n<td>替代敌营资源的URI</td>\n</tr>\n<tr>\n<td>Content-MD5</td>\n<td>实体主体的报文摘要</td>\n</tr>\n<tr>\n<td>Content-Range</td>\n<td>实体主体的位置范围</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>实体主体的媒体类型</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>实体主体过期的日期时间</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>资源的最后修改日期时间</td>\n</tr>\n</tbody></table>\n"},{"title":"常见的接口测试工具","comments":1,"abbrlink":56669,"date":"2022-04-17T09:10:15.000Z","_content":"## 1. Swagger\nSwagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。\nSwagger 的目标是对 REST API 定义一个标准且和语言无关的接口，可以让人和计算机拥有无须访问源码、文档或网络流量监测就可以发现和理解服务的能力。\n \n静态的swagger跟不上频繁变更的代码，容易出现以下问题\n- “为什么改了这个没告诉我” \n  \n- “实际功能和文档上说的不一样啊”\n\n这样会带来的问题是：\n 1. Swagger，postman，MockJS只能完成软件研发流程中某个环节的功能，造成完成接口设计，文档编写，调试，测试验证等工作需要使用好几个工具；\n 2. 更麻烦的是这些工具数据格式不互通，无法互相导入，造成用Swagger定义和编写完成接口后，在Postman，MockJS，Jmeter等工具还要再去手动填写一遍才能开始工作，增加了无意义的工作量。\n 3. 沟通成本总是被忽略不计，但实际上不仅占据了很大时间，各种沟通不及时、沟通不到位还非常让人心累。\n 4. 老板的需求来得急，老板的需求变得快，各种代码修改和变更难以及时通知和同步到团队成员手中。\n\n## 2. 常见的可视化RestFul风格的服务\n\n- springfox-swagger2\n- springdoc\n- Apifox（接口测试工具，非集成在项目中postman加强升级版）\n\n## 3. 各个工具的使用以及风格\n使用Springboot项目分别集成各个组件，看下具体的实现效果；\n\n### 3.1 springfox-swagger2\n1. 引入依赖\n   ```java\n   <dependency>\n       <groupId>io.springfox</groupId>\n       <artifactId>springfox-swagger2</artifactId>\n       <version>2.10.5</version>\n   </dependency>\n       <dependency>\n        <groupId>io.springfox</groupId>\n        <artifactId>springfox-swagger-ui</artifactId>\n        <version>2.9.2</version>\n   </dependency>\n   <dependency>\n        <groupId>com.github.xiaoymin</groupId>\n        <artifactId>knife4j-spring-boot-starter</artifactId>\n        <version>2.0.8</version>\n   </dependency>\n   ```\n   \n2. 编写配置类\n   - SwaggerConfiguration类\n       ```java    \n        @Configuration\n        @EnableSwagger2WebMvc\n        @EnableKnife4j\n        public class SwaggerConfiguration {\n        \n            @Value(\"${spring.application.name}\")\n            private String applicationName;\n        \n            @Bean(value = \"defaultApi\")\n            public Docket defaultApi2() {\n                //设置处理请求的包，我的controller类都在com.yugb.controller中\n                Predicate<RequestHandler> apiPackage = RequestHandlerSelectors.basePackage(\"com.yugb.controller\");\n        \n                Docket docket = new Docket(DocumentationType.SWAGGER_2)\n                        .apiInfo(new ApiInfoBuilder()\n                                .version(\"1.0\")\n                                .contact(new Contact(\"xiaoyuge\",\"123\", \"12342qq.com\"))\n                                .title(applicationName + \" 文档中心\")\n                                .description(\"<div style='font-size:15px;'>\" + applicationName + \" RESTful APIs</div>\")\n                                .build())\n                        //分组名称\n                        .groupName(\"2.X版本\")\n                        .select()\n                        //这里指定Controller扫描包路径\n                        .apis(apiPackage)\n                        .paths(PathSelectors.any())\n                        .build();\n                return docket;\n            }\n        \n        }\n       ```\n     \n    - SwaggerWebMvcConfigurer 类\n        ```java\n        @Configuration\n        public class SwaggerWebMvcConfigurer implements WebMvcConfigurer {\n            @Override\n            public void addResourceHandlers(ResourceHandlerRegistry registry) {\n                registry.addResourceHandler(\"doc.html\").addResourceLocations(\"classpath:/META-INF/resources/\");\n                registry.addResourceHandler(\"/webjars/**\").addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n            }\n        }\n       ```\n      \n    \n3. 添加注解\n   \n   我们接口文档的直接描述主要就是在Controller这一层，比如这个接口的功能，参数的名称，返回值的名称等。这些值我们都需要在Controller上通过给方法上，请求参数和返回参数上添加对应的注解，swagger才能帮我们生成相应的接口文档。\n   \n\n   - **JavaBean**: @ApiModel注解和 @@ApiModelProperty 注解定义了实体的名称和字段的名称\n       ```java\n        @Data\n        @ApiModel(\"创建Swagger响应结果\")\n        public class SwaggerResVO {\n\n            @ApiModelProperty(\"id\")\n            private Integer id;\n        \n            @ApiModelProperty(\"姓名\")\n            private String name;\n        \n            @ApiModelProperty(\"性别\")\n            private Integer gender;\n        \n            @ApiModelProperty(\"啥啥\")\n            private String what;\n        }\n        ```\n     \n - **controller**: @Api注解和 @ApiOperation注解分别标注了接口组名和接口的名称\n    ```java\n    @RestController\n    @RequestMapping(\"/swagger\")\n    @Api(value = \"用户接口\", tags = {\"用户接口\"})\n    public class SwaggerController {\n    \n        @ApiOperation(\"新增用户\")\n        @PostMapping(\"save\")\n        public String save(@RequestBody SwaggerReqVO req) {\n            return \"success\";\n        }\n     \n        @GetMapping(\"getById\")\n        @ApiOperation(\"根据条件查询用户\")\n        public SwaggerResVO getById(@RequestBody SwaggerResVO req) {\n            return new SwaggerResVO();\n        }\n    }\n   ```\n3. 启动项目\n    \n    访问 http://localhost:8080/doc.html 查看springfox-swagger2的文档中心\n    ![springfox-swagger2](./swagger/1.png)\n   \n    查看GET请求的界面\n    ![springfox-swagger2](./swagger/2.png)\n    ![springfox-swagger2](./swagger/3.png)\n\n4. 优缺点\n\n    - 优点：界面美观，集成方便，不同类型的接口按照controller分组，**可以导出所有的接口文档！！！！！**\n    \n    - 缺点：暂时没有遇到\n\n\n### 3.2 springdoc\n\n1. 引入依赖\n   ```java\n   <dependency>\n        <groupId>org.springdoc</groupId>\n        <artifactId>springdoc-openapi-ui</artifactId>\n        <version>1.5.8</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springdoc</groupId>\n        <artifactId>springdoc-openapi-webmvc-core</artifactId>\n        <version>1.5.8</version>\n    </dependency>\n   ```\n   \n2. 配置yml /yaml /properties\n    ```yaml\n    springdoc:\n      api-docs:\n        enabled: true\n        groups:\n          enabled: true\n        path: /api-docs\n      cache:\n        disabled: true\n      swagger-ui:\n        groups-order: asc\n        # 自定义的文档界面访问路径。默认访问路径是/swagger-ui.html\n        path: /springdoc/docs.html\n      # 布尔值。实现OpenApi规范的打印。\n      writer-with-default-pretty-printer: true\n    ```\n   \n3. 编写配置类\n\n    - SpringdocOpenapiConfiguration\n        ```java\n        @Configuration\n        public class SpringdocOpenapiConfiguration implements WebMvcConfigurer {\n        \n            private final SwaggerProperties swaggerProperties;\n        \n            public SpringdocOpenapiConfiguration(SwaggerProperties swaggerProperties) {\n                this.swaggerProperties = swaggerProperties;\n            }\n        \n            @Bean\n            public OpenAPI springDocOpenAPI() {\n                //配置认证、请求头参数\n                Components components = new Components();\n        //        Map<String, Object> myHeader2extensions = new HashMap<>(2);\n        //        myHeader2extensions.put(\"name\", \"myHeader2\");\n        //        components\n        //                .addSecuritySchemes(\"bearer-key\", new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(\"bearer\").bearerFormat(\"JWT\"))\n        //                .addSecuritySchemes(\"basicScheme\", new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(\"basic\"))\n        //                .addHeaders(\"myHeader2\", new Header().description(\"myHeader2 header\").schema(new StringSchema()).extensions(myHeader2extensions))\n        //                .addParameters(\"myGlobalHeader\", new HeaderParameter().required(true).name(\"My-Global-Header\").description(\"My Global Header\").schema(new StringSchema()).required(false))\n        //        ;\n      \n                // 接口调试路径\n                Server tryServer = new Server();\n                tryServer.setUrl(swaggerProperties.getTryHost());\n        \n                return new OpenAPI()\n                        .components(components)\n                        .servers(Collections.singletonList(tryServer))\n                        .info(new Info()\n                                .title(swaggerProperties.getApplicationName() + \" Api Doc\")\n                                .description(swaggerProperties.getApplicationDescription())\n                                .version(\"Application Version: \" + swaggerProperties.getApplicationVersion() + \"\\n Spring Boot Version: \" + SpringBootVersion.getVersion())\n                                .license(new License().name(\"Apache 2.0\").url(\"https://www.apache.org/licenses/LICENSE-2.0.html\"))\n                        )\n                        .externalDocs(new ExternalDocumentation()\n                                .description(\"SpringDoc Full Documentation\")\n                                .url(\"https://springdoc.org/\")\n                        );\n            }\n        \n            /**\n             * 添加全局的请求头参数\n             */\n        //    @Bean\n        //    public OpenApiCustomiser customerGlobalHeaderOpenApiCustomiser() {\n        //        return openApi -> openApi.getPaths().values().stream().flatMap(pathItem -> pathItem.readOperations().stream())\n        //                .forEach(operation -> {\n        //                    operation.addParametersItem(new HeaderParameter().$ref(\"#/components/parameters/myGlobalHeader\"));\n        //                });\n        //    }\n        \n            /**\n             * 通用拦截器排除设置，所有拦截器都会自动加springdoc-opapi相关的资源排除信息，不用在应用程序自身拦截器定义的地方去添加，算是良心解耦实现。\n             */\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void addInterceptors(InterceptorRegistry registry) {\n                try {\n                    Field registrationsField = FieldUtils.getField(InterceptorRegistry.class, \"registrations\", true);\n                    List<InterceptorRegistration> registrations = (List<InterceptorRegistration>) ReflectionUtils.getField(registrationsField, registry);\n                    if (registrations != null) {\n                        for (InterceptorRegistration interceptorRegistration : registrations) {\n                            interceptorRegistration.excludePathPatterns(\"/springdoc**/**\");\n                        }\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        \n            // 服务器支持跨域\n            @Override\n            public void addCorsMappings(CorsRegistry registry) {\n                registry.addMapping(\"/**\")\n                        .allowedOrigins(\"*\")\n                        .allowedMethods(\"GET\", \"POST\", \"OPTIONS\")\n                        .allowedHeaders(\"*\")\n                        .exposedHeaders(\"Access-Control-Allow-Headers\",\n                                \"Access-Control-Allow-Methods\",\n                                \"Access-Control-Allow-Origin\",\n                                \"Access-Control-Max-Age\",\n                                \"X-Frame-Options\")\n                        .allowCredentials(false)\n                        .maxAge(3600);\n            }\n        \n        }\n        ```\n    - SwaggerProperties\n        ```java\n        @Getter\n        @Setter\n        @Component\n        @ConfigurationProperties(\"swagger\")\n        public class SwaggerProperties {\n        /**\n        * 项目应用名\n        */\n        private String applicationName;\n            /**\n             * 项目版本信息\n             */\n            private String applicationVersion;\n            /**\n             * 项目描述信息\n             */\n            private String applicationDescription;\n            /**\n             * 接口调试地址\n             */\n            private String tryHost;\n        }\n        ```\n      \n    - 编写接口方法\n      - 在controller上添加@Tag注解\n      - 在接口方法上添加@Operation 注解\n      - 在接口参数添加@Parameter 或@Parameters 注解\n      ```java\n      @Tags({\n        @Tag(name = \"ExpirationWarningController\", description = \"设备寿命到期预警\"),\n      })\n      @RestController\n      @RequestMapping(\"/test\")\n      public class ExpirationWarningController {\n          //需要使用@Operation竹节\n          @PostMapping(\"/getOne/{id}/{type}\")\n          @Operation(summary = \"按ID查询\", description = \"按ID查询\")\n          public ResponseResult getOne(@Parameter(description = \"主键ID\") @PathVariable Integer id,\n          @Parameter(description = \"类型\") @PathVariable String type) {\n         \n              return ResponseResult.success(expirationWarningVO);\n          }\n      \n          @PostMapping(\"/save\")\n          @ResponseBody\n          @Operation(summary = \"保存\", description = \"保存\")\n          public ResponseResult save(@RequestBody ExpirationWarning expirationWarning) {\n             return null;\n          }\n        }\n      ```\n    - 在springboot启动类上加上以下配置\n      ```java\n      @OpenAPIDefinition(\n          info = @Info(\n              title = \"测试springdoc\",\n              version = \"1.0\"\n          ),\n          externalDocs = @ExternalDocumentation(description = \"swagger-api参考文档\",\n              url = \"https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Annotations\"\n          ),\n          servers = {\n              @Server(\n                  url = \"http://localhost:8123/app\",\n                  description = \"本地地址\"\n              ),\n              @Server(\n                  url = \"http://www.xiaoyuge.vip/app\",\n                  description = \"公网测试环境\"\n              )\n          }\n      )\n      public class ResolutionApplication {\n          public static void main(String[] args) {\n              SpringApplication.run(ResolutionApplication.class, args);\n              logger.info(\"============= Start Success =============\");\n          }\n      }\n      ```\n4. 启动项目\n\n   访问 http://localhost:8123/app/springdoc/swagger-ui/index.html 查看springdox的文档中心\n   ![springdoc](./swagger/4.png)\n   ![springdoc](./swagger/5.png)\n\n\n5. 优缺点\n\n    - 优点：不好说\n\n    - 缺点：界面没有按照每个controller分组，不直观！；\n\n\n### 3.3 Apifox\n一款研发全流程，接口全周期的生产力工具，这款软件真正完成了数据流的打通，在一个软件上就能实现**接口设计--接口文档--接口调试--接口修改--接口mock--接口测试--接口自动化--接口迭代**的工作流闭环；\n\n#### 3.3.1 Apifox上的协作流程\n1. 后端在Apifox可视化接口设计界面上定义好项目各个接口及对应参数同时编写接口文档说明\n2. 前后端一起评审，修改完善接口并在同一界面顺手更新接口文档\n3. 后端使用接口调试功能调试接口\n4. 前端使用零配置高仿真mock功能对前端页面进行调试，无需手写mock规则\n5. 后端使用代码生成功能直接生成接口代码\n6. 测试在接口管理页面一键生成接口参数测试用例,并依据业务场景生成自动化测试用例，一键运行接口用例并生成接口测试报告并分享给相关人员。\n7. 前后端 都开发完，前端从Mock 数据切换到正式数据，进行联调，由于使用同一个接口数据源，且遵循了接口规范，联调顺利\n8. 由于bug修复或需求变更，接口发生了变化，后端修改提交后，前端和测试实时同步到了修改后的数据\n9. 项目经理通过权限设置给研发,产品,测试,外部合作人员分配编辑,只读等各种操作权限，维护了项目安全\n10. 项目经理通过各个接口的状态开发中,测试中,已发布来跟进项目的进度情况，把控项目风险。\n\n#### 3.3.2 Apifox做的增速提效优化\n- 接口设计：从代码生成界面到可视化接口设计界面\n  \n  Apifox 接口文档遵循 OpenApi 3.0 (原 Swagger)、JSON Schema 规范，可生成在线文档；零学习成本即可编写出符合RESTful风格的接口文档，新人上手快；所见即所得，不易出错\n  ![Apifox](./swagger/6.png)\n  ![Apifox](./swagger/7.png)\n  \n- 文档维护：从接口与文档分离到接口与文档合并\n\n  Apifox的接口设计界面提供了Markdown格式的文档说明区，修改完接口就如同commit代码时添加变更说明般\n  ![Apifox](./swagger/8.png)\n  \n- 数据复用：从各自为政到定义一次、多次复用\n  - 接口数据复用：Swagger，Postman，MockJS，Jmeter等软件彼此之间数据不互通，数据格式不一致，接口导入非常耗时麻烦。\n    而Apifox能身兼多职，包揽上述软件功能，在Apifox中定义一次接口，能被后端直接用来调试，前端直接用来mock界面，测试直接执行接口自动化。\n  \n  - 数据模型复用：可复用的数据结构，定义接口返回数据结构及请求参数数据结构（仅 JSON 和 XML 模式）时可直接引用。\n    \n\n- 同步更新，高效沟通:从沟通滞后到数据变更即时同步\n  \n  Apifox为此提供了同步功能，一旦接口数据有更新发生，就会即时同步更新并通知到项目内所有成员。\n\n\n- Apihub\n\n  内置企业微信开放API，抖音开放API等第三方接口开放项目，接口可以直接在Apifox中调试，不需要到处找接口文档和手工填写接口\n#### 3.3.3 下载地址\n官网地址： http://www.apifox.cn/?utm_medium=WCSA&utm_source=xxzsq","source":"_posts/2022/04/swagger.md","raw":"---\ntitle: 常见的接口测试工具\ncomments: true\ntags: swagger\ncategories: swagger\nabbrlink: 56669\ndate: 2022-04-17 17:10:15\n---\n## 1. Swagger\nSwagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。\nSwagger 的目标是对 REST API 定义一个标准且和语言无关的接口，可以让人和计算机拥有无须访问源码、文档或网络流量监测就可以发现和理解服务的能力。\n \n静态的swagger跟不上频繁变更的代码，容易出现以下问题\n- “为什么改了这个没告诉我” \n  \n- “实际功能和文档上说的不一样啊”\n\n这样会带来的问题是：\n 1. Swagger，postman，MockJS只能完成软件研发流程中某个环节的功能，造成完成接口设计，文档编写，调试，测试验证等工作需要使用好几个工具；\n 2. 更麻烦的是这些工具数据格式不互通，无法互相导入，造成用Swagger定义和编写完成接口后，在Postman，MockJS，Jmeter等工具还要再去手动填写一遍才能开始工作，增加了无意义的工作量。\n 3. 沟通成本总是被忽略不计，但实际上不仅占据了很大时间，各种沟通不及时、沟通不到位还非常让人心累。\n 4. 老板的需求来得急，老板的需求变得快，各种代码修改和变更难以及时通知和同步到团队成员手中。\n\n## 2. 常见的可视化RestFul风格的服务\n\n- springfox-swagger2\n- springdoc\n- Apifox（接口测试工具，非集成在项目中postman加强升级版）\n\n## 3. 各个工具的使用以及风格\n使用Springboot项目分别集成各个组件，看下具体的实现效果；\n\n### 3.1 springfox-swagger2\n1. 引入依赖\n   ```java\n   <dependency>\n       <groupId>io.springfox</groupId>\n       <artifactId>springfox-swagger2</artifactId>\n       <version>2.10.5</version>\n   </dependency>\n       <dependency>\n        <groupId>io.springfox</groupId>\n        <artifactId>springfox-swagger-ui</artifactId>\n        <version>2.9.2</version>\n   </dependency>\n   <dependency>\n        <groupId>com.github.xiaoymin</groupId>\n        <artifactId>knife4j-spring-boot-starter</artifactId>\n        <version>2.0.8</version>\n   </dependency>\n   ```\n   \n2. 编写配置类\n   - SwaggerConfiguration类\n       ```java    \n        @Configuration\n        @EnableSwagger2WebMvc\n        @EnableKnife4j\n        public class SwaggerConfiguration {\n        \n            @Value(\"${spring.application.name}\")\n            private String applicationName;\n        \n            @Bean(value = \"defaultApi\")\n            public Docket defaultApi2() {\n                //设置处理请求的包，我的controller类都在com.yugb.controller中\n                Predicate<RequestHandler> apiPackage = RequestHandlerSelectors.basePackage(\"com.yugb.controller\");\n        \n                Docket docket = new Docket(DocumentationType.SWAGGER_2)\n                        .apiInfo(new ApiInfoBuilder()\n                                .version(\"1.0\")\n                                .contact(new Contact(\"xiaoyuge\",\"123\", \"12342qq.com\"))\n                                .title(applicationName + \" 文档中心\")\n                                .description(\"<div style='font-size:15px;'>\" + applicationName + \" RESTful APIs</div>\")\n                                .build())\n                        //分组名称\n                        .groupName(\"2.X版本\")\n                        .select()\n                        //这里指定Controller扫描包路径\n                        .apis(apiPackage)\n                        .paths(PathSelectors.any())\n                        .build();\n                return docket;\n            }\n        \n        }\n       ```\n     \n    - SwaggerWebMvcConfigurer 类\n        ```java\n        @Configuration\n        public class SwaggerWebMvcConfigurer implements WebMvcConfigurer {\n            @Override\n            public void addResourceHandlers(ResourceHandlerRegistry registry) {\n                registry.addResourceHandler(\"doc.html\").addResourceLocations(\"classpath:/META-INF/resources/\");\n                registry.addResourceHandler(\"/webjars/**\").addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n            }\n        }\n       ```\n      \n    \n3. 添加注解\n   \n   我们接口文档的直接描述主要就是在Controller这一层，比如这个接口的功能，参数的名称，返回值的名称等。这些值我们都需要在Controller上通过给方法上，请求参数和返回参数上添加对应的注解，swagger才能帮我们生成相应的接口文档。\n   \n\n   - **JavaBean**: @ApiModel注解和 @@ApiModelProperty 注解定义了实体的名称和字段的名称\n       ```java\n        @Data\n        @ApiModel(\"创建Swagger响应结果\")\n        public class SwaggerResVO {\n\n            @ApiModelProperty(\"id\")\n            private Integer id;\n        \n            @ApiModelProperty(\"姓名\")\n            private String name;\n        \n            @ApiModelProperty(\"性别\")\n            private Integer gender;\n        \n            @ApiModelProperty(\"啥啥\")\n            private String what;\n        }\n        ```\n     \n - **controller**: @Api注解和 @ApiOperation注解分别标注了接口组名和接口的名称\n    ```java\n    @RestController\n    @RequestMapping(\"/swagger\")\n    @Api(value = \"用户接口\", tags = {\"用户接口\"})\n    public class SwaggerController {\n    \n        @ApiOperation(\"新增用户\")\n        @PostMapping(\"save\")\n        public String save(@RequestBody SwaggerReqVO req) {\n            return \"success\";\n        }\n     \n        @GetMapping(\"getById\")\n        @ApiOperation(\"根据条件查询用户\")\n        public SwaggerResVO getById(@RequestBody SwaggerResVO req) {\n            return new SwaggerResVO();\n        }\n    }\n   ```\n3. 启动项目\n    \n    访问 http://localhost:8080/doc.html 查看springfox-swagger2的文档中心\n    ![springfox-swagger2](./swagger/1.png)\n   \n    查看GET请求的界面\n    ![springfox-swagger2](./swagger/2.png)\n    ![springfox-swagger2](./swagger/3.png)\n\n4. 优缺点\n\n    - 优点：界面美观，集成方便，不同类型的接口按照controller分组，**可以导出所有的接口文档！！！！！**\n    \n    - 缺点：暂时没有遇到\n\n\n### 3.2 springdoc\n\n1. 引入依赖\n   ```java\n   <dependency>\n        <groupId>org.springdoc</groupId>\n        <artifactId>springdoc-openapi-ui</artifactId>\n        <version>1.5.8</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springdoc</groupId>\n        <artifactId>springdoc-openapi-webmvc-core</artifactId>\n        <version>1.5.8</version>\n    </dependency>\n   ```\n   \n2. 配置yml /yaml /properties\n    ```yaml\n    springdoc:\n      api-docs:\n        enabled: true\n        groups:\n          enabled: true\n        path: /api-docs\n      cache:\n        disabled: true\n      swagger-ui:\n        groups-order: asc\n        # 自定义的文档界面访问路径。默认访问路径是/swagger-ui.html\n        path: /springdoc/docs.html\n      # 布尔值。实现OpenApi规范的打印。\n      writer-with-default-pretty-printer: true\n    ```\n   \n3. 编写配置类\n\n    - SpringdocOpenapiConfiguration\n        ```java\n        @Configuration\n        public class SpringdocOpenapiConfiguration implements WebMvcConfigurer {\n        \n            private final SwaggerProperties swaggerProperties;\n        \n            public SpringdocOpenapiConfiguration(SwaggerProperties swaggerProperties) {\n                this.swaggerProperties = swaggerProperties;\n            }\n        \n            @Bean\n            public OpenAPI springDocOpenAPI() {\n                //配置认证、请求头参数\n                Components components = new Components();\n        //        Map<String, Object> myHeader2extensions = new HashMap<>(2);\n        //        myHeader2extensions.put(\"name\", \"myHeader2\");\n        //        components\n        //                .addSecuritySchemes(\"bearer-key\", new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(\"bearer\").bearerFormat(\"JWT\"))\n        //                .addSecuritySchemes(\"basicScheme\", new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(\"basic\"))\n        //                .addHeaders(\"myHeader2\", new Header().description(\"myHeader2 header\").schema(new StringSchema()).extensions(myHeader2extensions))\n        //                .addParameters(\"myGlobalHeader\", new HeaderParameter().required(true).name(\"My-Global-Header\").description(\"My Global Header\").schema(new StringSchema()).required(false))\n        //        ;\n      \n                // 接口调试路径\n                Server tryServer = new Server();\n                tryServer.setUrl(swaggerProperties.getTryHost());\n        \n                return new OpenAPI()\n                        .components(components)\n                        .servers(Collections.singletonList(tryServer))\n                        .info(new Info()\n                                .title(swaggerProperties.getApplicationName() + \" Api Doc\")\n                                .description(swaggerProperties.getApplicationDescription())\n                                .version(\"Application Version: \" + swaggerProperties.getApplicationVersion() + \"\\n Spring Boot Version: \" + SpringBootVersion.getVersion())\n                                .license(new License().name(\"Apache 2.0\").url(\"https://www.apache.org/licenses/LICENSE-2.0.html\"))\n                        )\n                        .externalDocs(new ExternalDocumentation()\n                                .description(\"SpringDoc Full Documentation\")\n                                .url(\"https://springdoc.org/\")\n                        );\n            }\n        \n            /**\n             * 添加全局的请求头参数\n             */\n        //    @Bean\n        //    public OpenApiCustomiser customerGlobalHeaderOpenApiCustomiser() {\n        //        return openApi -> openApi.getPaths().values().stream().flatMap(pathItem -> pathItem.readOperations().stream())\n        //                .forEach(operation -> {\n        //                    operation.addParametersItem(new HeaderParameter().$ref(\"#/components/parameters/myGlobalHeader\"));\n        //                });\n        //    }\n        \n            /**\n             * 通用拦截器排除设置，所有拦截器都会自动加springdoc-opapi相关的资源排除信息，不用在应用程序自身拦截器定义的地方去添加，算是良心解耦实现。\n             */\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void addInterceptors(InterceptorRegistry registry) {\n                try {\n                    Field registrationsField = FieldUtils.getField(InterceptorRegistry.class, \"registrations\", true);\n                    List<InterceptorRegistration> registrations = (List<InterceptorRegistration>) ReflectionUtils.getField(registrationsField, registry);\n                    if (registrations != null) {\n                        for (InterceptorRegistration interceptorRegistration : registrations) {\n                            interceptorRegistration.excludePathPatterns(\"/springdoc**/**\");\n                        }\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        \n            // 服务器支持跨域\n            @Override\n            public void addCorsMappings(CorsRegistry registry) {\n                registry.addMapping(\"/**\")\n                        .allowedOrigins(\"*\")\n                        .allowedMethods(\"GET\", \"POST\", \"OPTIONS\")\n                        .allowedHeaders(\"*\")\n                        .exposedHeaders(\"Access-Control-Allow-Headers\",\n                                \"Access-Control-Allow-Methods\",\n                                \"Access-Control-Allow-Origin\",\n                                \"Access-Control-Max-Age\",\n                                \"X-Frame-Options\")\n                        .allowCredentials(false)\n                        .maxAge(3600);\n            }\n        \n        }\n        ```\n    - SwaggerProperties\n        ```java\n        @Getter\n        @Setter\n        @Component\n        @ConfigurationProperties(\"swagger\")\n        public class SwaggerProperties {\n        /**\n        * 项目应用名\n        */\n        private String applicationName;\n            /**\n             * 项目版本信息\n             */\n            private String applicationVersion;\n            /**\n             * 项目描述信息\n             */\n            private String applicationDescription;\n            /**\n             * 接口调试地址\n             */\n            private String tryHost;\n        }\n        ```\n      \n    - 编写接口方法\n      - 在controller上添加@Tag注解\n      - 在接口方法上添加@Operation 注解\n      - 在接口参数添加@Parameter 或@Parameters 注解\n      ```java\n      @Tags({\n        @Tag(name = \"ExpirationWarningController\", description = \"设备寿命到期预警\"),\n      })\n      @RestController\n      @RequestMapping(\"/test\")\n      public class ExpirationWarningController {\n          //需要使用@Operation竹节\n          @PostMapping(\"/getOne/{id}/{type}\")\n          @Operation(summary = \"按ID查询\", description = \"按ID查询\")\n          public ResponseResult getOne(@Parameter(description = \"主键ID\") @PathVariable Integer id,\n          @Parameter(description = \"类型\") @PathVariable String type) {\n         \n              return ResponseResult.success(expirationWarningVO);\n          }\n      \n          @PostMapping(\"/save\")\n          @ResponseBody\n          @Operation(summary = \"保存\", description = \"保存\")\n          public ResponseResult save(@RequestBody ExpirationWarning expirationWarning) {\n             return null;\n          }\n        }\n      ```\n    - 在springboot启动类上加上以下配置\n      ```java\n      @OpenAPIDefinition(\n          info = @Info(\n              title = \"测试springdoc\",\n              version = \"1.0\"\n          ),\n          externalDocs = @ExternalDocumentation(description = \"swagger-api参考文档\",\n              url = \"https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Annotations\"\n          ),\n          servers = {\n              @Server(\n                  url = \"http://localhost:8123/app\",\n                  description = \"本地地址\"\n              ),\n              @Server(\n                  url = \"http://www.xiaoyuge.vip/app\",\n                  description = \"公网测试环境\"\n              )\n          }\n      )\n      public class ResolutionApplication {\n          public static void main(String[] args) {\n              SpringApplication.run(ResolutionApplication.class, args);\n              logger.info(\"============= Start Success =============\");\n          }\n      }\n      ```\n4. 启动项目\n\n   访问 http://localhost:8123/app/springdoc/swagger-ui/index.html 查看springdox的文档中心\n   ![springdoc](./swagger/4.png)\n   ![springdoc](./swagger/5.png)\n\n\n5. 优缺点\n\n    - 优点：不好说\n\n    - 缺点：界面没有按照每个controller分组，不直观！；\n\n\n### 3.3 Apifox\n一款研发全流程，接口全周期的生产力工具，这款软件真正完成了数据流的打通，在一个软件上就能实现**接口设计--接口文档--接口调试--接口修改--接口mock--接口测试--接口自动化--接口迭代**的工作流闭环；\n\n#### 3.3.1 Apifox上的协作流程\n1. 后端在Apifox可视化接口设计界面上定义好项目各个接口及对应参数同时编写接口文档说明\n2. 前后端一起评审，修改完善接口并在同一界面顺手更新接口文档\n3. 后端使用接口调试功能调试接口\n4. 前端使用零配置高仿真mock功能对前端页面进行调试，无需手写mock规则\n5. 后端使用代码生成功能直接生成接口代码\n6. 测试在接口管理页面一键生成接口参数测试用例,并依据业务场景生成自动化测试用例，一键运行接口用例并生成接口测试报告并分享给相关人员。\n7. 前后端 都开发完，前端从Mock 数据切换到正式数据，进行联调，由于使用同一个接口数据源，且遵循了接口规范，联调顺利\n8. 由于bug修复或需求变更，接口发生了变化，后端修改提交后，前端和测试实时同步到了修改后的数据\n9. 项目经理通过权限设置给研发,产品,测试,外部合作人员分配编辑,只读等各种操作权限，维护了项目安全\n10. 项目经理通过各个接口的状态开发中,测试中,已发布来跟进项目的进度情况，把控项目风险。\n\n#### 3.3.2 Apifox做的增速提效优化\n- 接口设计：从代码生成界面到可视化接口设计界面\n  \n  Apifox 接口文档遵循 OpenApi 3.0 (原 Swagger)、JSON Schema 规范，可生成在线文档；零学习成本即可编写出符合RESTful风格的接口文档，新人上手快；所见即所得，不易出错\n  ![Apifox](./swagger/6.png)\n  ![Apifox](./swagger/7.png)\n  \n- 文档维护：从接口与文档分离到接口与文档合并\n\n  Apifox的接口设计界面提供了Markdown格式的文档说明区，修改完接口就如同commit代码时添加变更说明般\n  ![Apifox](./swagger/8.png)\n  \n- 数据复用：从各自为政到定义一次、多次复用\n  - 接口数据复用：Swagger，Postman，MockJS，Jmeter等软件彼此之间数据不互通，数据格式不一致，接口导入非常耗时麻烦。\n    而Apifox能身兼多职，包揽上述软件功能，在Apifox中定义一次接口，能被后端直接用来调试，前端直接用来mock界面，测试直接执行接口自动化。\n  \n  - 数据模型复用：可复用的数据结构，定义接口返回数据结构及请求参数数据结构（仅 JSON 和 XML 模式）时可直接引用。\n    \n\n- 同步更新，高效沟通:从沟通滞后到数据变更即时同步\n  \n  Apifox为此提供了同步功能，一旦接口数据有更新发生，就会即时同步更新并通知到项目内所有成员。\n\n\n- Apihub\n\n  内置企业微信开放API，抖音开放API等第三方接口开放项目，接口可以直接在Apifox中调试，不需要到处找接口文档和手工填写接口\n#### 3.3.3 下载地址\n官网地址： http://www.apifox.cn/?utm_medium=WCSA&utm_source=xxzsq","slug":"swagger","published":1,"updated":"2022-05-23T05:14:16.803Z","layout":"post","photos":[],"link":"","_id":"cl424hx6q006jad5i42wv6v7p","content":"<h2 id=\"1-Swagger\"><a href=\"#1-Swagger\" class=\"headerlink\" title=\"1. Swagger\"></a>1. Swagger</h2><p>Swagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。<br>Swagger 的目标是对 REST API 定义一个标准且和语言无关的接口，可以让人和计算机拥有无须访问源码、文档或网络流量监测就可以发现和理解服务的能力。</p>\n<p>静态的swagger跟不上频繁变更的代码，容易出现以下问题</p>\n<ul>\n<li>“为什么改了这个没告诉我” </li>\n<li>“实际功能和文档上说的不一样啊”</li>\n</ul>\n<p>这样会带来的问题是：</p>\n<ol>\n<li>Swagger，postman，MockJS只能完成软件研发流程中某个环节的功能，造成完成接口设计，文档编写，调试，测试验证等工作需要使用好几个工具；</li>\n<li>更麻烦的是这些工具数据格式不互通，无法互相导入，造成用Swagger定义和编写完成接口后，在Postman，MockJS，Jmeter等工具还要再去手动填写一遍才能开始工作，增加了无意义的工作量。</li>\n<li>沟通成本总是被忽略不计，但实际上不仅占据了很大时间，各种沟通不及时、沟通不到位还非常让人心累。</li>\n<li>老板的需求来得急，老板的需求变得快，各种代码修改和变更难以及时通知和同步到团队成员手中。</li>\n</ol>\n<h2 id=\"2-常见的可视化RestFul风格的服务\"><a href=\"#2-常见的可视化RestFul风格的服务\" class=\"headerlink\" title=\"2. 常见的可视化RestFul风格的服务\"></a>2. 常见的可视化RestFul风格的服务</h2><ul>\n<li>springfox-swagger2</li>\n<li>springdoc</li>\n<li>Apifox（接口测试工具，非集成在项目中postman加强升级版）</li>\n</ul>\n<h2 id=\"3-各个工具的使用以及风格\"><a href=\"#3-各个工具的使用以及风格\" class=\"headerlink\" title=\"3. 各个工具的使用以及风格\"></a>3. 各个工具的使用以及风格</h2><p>使用Springboot项目分别集成各个组件，看下具体的实现效果；</p>\n<h3 id=\"3-1-springfox-swagger2\"><a href=\"#3-1-springfox-swagger2\" class=\"headerlink\" title=\"3.1 springfox-swagger2\"></a>3.1 springfox-swagger2</h3><ol>\n<li><p>引入依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">2.10</span><span class=\"number\">.5</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;<span class=\"number\">2.9</span><span class=\"number\">.2</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;<span class=\"number\">2.0</span><span class=\"number\">.8</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>编写配置类</p>\n<ul>\n<li>SwaggerConfiguration类  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger2WebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@EnableKnife4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String applicationName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(value = &quot;defaultApi&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">defaultApi2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//设置处理请求的包，我的controller类都在com.yugb.controller中</span></span><br><span class=\"line\">        Predicate&lt;RequestHandler&gt; apiPackage = RequestHandlerSelectors.basePackage(<span class=\"string\">&quot;com.yugb.controller&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Docket docket = <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .apiInfo(<span class=\"keyword\">new</span> ApiInfoBuilder()</span><br><span class=\"line\">                        .version(<span class=\"string\">&quot;1.0&quot;</span>)</span><br><span class=\"line\">                        .contact(<span class=\"keyword\">new</span> Contact(<span class=\"string\">&quot;xiaoyuge&quot;</span>,<span class=\"string\">&quot;123&quot;</span>, <span class=\"string\">&quot;12342qq.com&quot;</span>))</span><br><span class=\"line\">                        .title(applicationName + <span class=\"string\">&quot; 文档中心&quot;</span>)</span><br><span class=\"line\">                        .description(<span class=\"string\">&quot;&lt;div style=&#x27;font-size:15px;&#x27;&gt;&quot;</span> + applicationName + <span class=\"string\">&quot; RESTful APIs&lt;/div&gt;&quot;</span>)</span><br><span class=\"line\">                        .build())</span><br><span class=\"line\">                <span class=\"comment\">//分组名称</span></span><br><span class=\"line\">                .groupName(<span class=\"string\">&quot;2.X版本&quot;</span>)</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                <span class=\"comment\">//这里指定Controller扫描包路径</span></span><br><span class=\"line\">                .apis(apiPackage)</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> docket;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>SwaggerWebMvcConfigurer 类  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerWebMvcConfigurer</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addResourceHandler(<span class=\"string\">&quot;doc.html&quot;</span>).addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class=\"line\">        registry.addResourceHandler(<span class=\"string\">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>添加注解</p>\n<p>我们接口文档的直接描述主要就是在Controller这一层，比如这个接口的功能，参数的名称，返回值的名称等。这些值我们都需要在Controller上通过给方法上，请求参数和返回参数上添加对应的注解，swagger才能帮我们生成相应的接口文档。</p>\n<ul>\n<li><strong>JavaBean</strong>: @ApiModel注解和 @@ApiModelProperty 注解定义了实体的名称和字段的名称  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel(&quot;创建Swagger响应结果&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerResVO</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;姓名&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;性别&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer gender;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;啥啥&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String what;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><strong>controller</strong>: @Api注解和 @ApiOperation注解分别标注了接口组名和接口的名称 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/swagger&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Api(value = &quot;用户接口&quot;, tags = &#123;&quot;用户接口&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;新增用户&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;save&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">save</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> SwaggerReqVO req)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;getById&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;根据条件查询用户&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SwaggerResVO <span class=\"title\">getById</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> SwaggerResVO req)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SwaggerResVO();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li><p>启动项目</p>\n<p> 访问 <a href=\"http://localhost:8080/doc.html\">http://localhost:8080/doc.html</a> 查看springfox-swagger2的文档中心<br> <img src=\"/swagger/1.png\" alt=\"springfox-swagger2\"></p>\n<p> 查看GET请求的界面<br> <img src=\"/swagger/2.png\" alt=\"springfox-swagger2\"><br> <img src=\"/swagger/3.png\" alt=\"springfox-swagger2\"></p>\n</li>\n<li><p>优缺点</p>\n<ul>\n<li>优点：界面美观，集成方便，不同类型的接口按照controller分组，<strong>可以导出所有的接口文档！！！！！</strong></li>\n<li>缺点：暂时没有遇到</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-2-springdoc\"><a href=\"#3-2-springdoc\" class=\"headerlink\" title=\"3.2 springdoc\"></a>3.2 springdoc</h3><ol>\n<li><p>引入依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.springdoc&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;springdoc-openapi-ui&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;<span class=\"number\">1.5</span><span class=\"number\">.8</span>&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.springdoc&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;springdoc-openapi-webmvc-core&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;<span class=\"number\">1.5</span><span class=\"number\">.8</span>&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>配置yml /yaml /properties</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">springdoc:</span></span><br><span class=\"line\">  <span class=\"attr\">api-docs:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">groups:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/api-docs</span></span><br><span class=\"line\">  <span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">disabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">swagger-ui:</span></span><br><span class=\"line\">    <span class=\"attr\">groups-order:</span> <span class=\"string\">asc</span></span><br><span class=\"line\">    <span class=\"comment\"># 自定义的文档界面访问路径。默认访问路径是/swagger-ui.html</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/springdoc/docs.html</span></span><br><span class=\"line\">  <span class=\"comment\"># 布尔值。实现OpenApi规范的打印。</span></span><br><span class=\"line\">  <span class=\"attr\">writer-with-default-pretty-printer:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n<li><p>编写配置类</p>\n<ul>\n<li>SpringdocOpenapiConfiguration  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringdocOpenapiConfiguration</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SwaggerProperties swaggerProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpringdocOpenapiConfiguration</span><span class=\"params\">(SwaggerProperties swaggerProperties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.swaggerProperties = swaggerProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> OpenAPI <span class=\"title\">springDocOpenAPI</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//配置认证、请求头参数</span></span><br><span class=\"line\">        Components components = <span class=\"keyword\">new</span> Components();</span><br><span class=\"line\"><span class=\"comment\">//        Map&lt;String, Object&gt; myHeader2extensions = new HashMap&lt;&gt;(2);</span></span><br><span class=\"line\"><span class=\"comment\">//        myHeader2extensions.put(&quot;name&quot;, &quot;myHeader2&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        components</span></span><br><span class=\"line\"><span class=\"comment\">//                .addSecuritySchemes(&quot;bearer-key&quot;, new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(&quot;bearer&quot;).bearerFormat(&quot;JWT&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">//                .addSecuritySchemes(&quot;basicScheme&quot;, new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(&quot;basic&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">//                .addHeaders(&quot;myHeader2&quot;, new Header().description(&quot;myHeader2 header&quot;).schema(new StringSchema()).extensions(myHeader2extensions))</span></span><br><span class=\"line\"><span class=\"comment\">//                .addParameters(&quot;myGlobalHeader&quot;, new HeaderParameter().required(true).name(&quot;My-Global-Header&quot;).description(&quot;My Global Header&quot;).schema(new StringSchema()).required(false))</span></span><br><span class=\"line\"><span class=\"comment\">//        ;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"comment\">// 接口调试路径</span></span><br><span class=\"line\">        Server tryServer = <span class=\"keyword\">new</span> Server();</span><br><span class=\"line\">        tryServer.setUrl(swaggerProperties.getTryHost());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OpenAPI()</span><br><span class=\"line\">                .components(components)</span><br><span class=\"line\">                .servers(Collections.singletonList(tryServer))</span><br><span class=\"line\">                .info(<span class=\"keyword\">new</span> Info()</span><br><span class=\"line\">                        .title(swaggerProperties.getApplicationName() + <span class=\"string\">&quot; Api Doc&quot;</span>)</span><br><span class=\"line\">                        .description(swaggerProperties.getApplicationDescription())</span><br><span class=\"line\">                        .version(<span class=\"string\">&quot;Application Version: &quot;</span> + swaggerProperties.getApplicationVersion() + <span class=\"string\">&quot;\\n Spring Boot Version: &quot;</span> + SpringBootVersion.getVersion())</span><br><span class=\"line\">                        .license(<span class=\"keyword\">new</span> License().name(<span class=\"string\">&quot;Apache 2.0&quot;</span>).url(<span class=\"string\">&quot;https://www.apache.org/licenses/LICENSE-2.0.html&quot;</span>))</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .externalDocs(<span class=\"keyword\">new</span> ExternalDocumentation()</span><br><span class=\"line\">                        .description(<span class=\"string\">&quot;SpringDoc Full Documentation&quot;</span>)</span><br><span class=\"line\">                        .url(<span class=\"string\">&quot;https://springdoc.org/&quot;</span>)</span><br><span class=\"line\">                );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加全局的请求头参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"comment\">//    @Bean</span></span><br><span class=\"line\"><span class=\"comment\">//    public OpenApiCustomiser customerGlobalHeaderOpenApiCustomiser() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        return openApi -&gt; openApi.getPaths().values().stream().flatMap(pathItem -&gt; pathItem.readOperations().stream())</span></span><br><span class=\"line\"><span class=\"comment\">//                .forEach(operation -&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                    operation.addParametersItem(new HeaderParameter().$ref(&quot;#/components/parameters/myGlobalHeader&quot;));</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通用拦截器排除设置，所有拦截器都会自动加springdoc-opapi相关的资源排除信息，不用在应用程序自身拦截器定义的地方去添加，算是良心解耦实现。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Field registrationsField = FieldUtils.getField(InterceptorRegistry.class, <span class=\"string\">&quot;registrations&quot;</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            List&lt;InterceptorRegistration&gt; registrations = (List&lt;InterceptorRegistration&gt;) ReflectionUtils.getField(registrationsField, registry);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (registrations != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (InterceptorRegistration interceptorRegistration : registrations) &#123;</span><br><span class=\"line\">                    interceptorRegistration.excludePathPatterns(<span class=\"string\">&quot;/springdoc**/**&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 服务器支持跨域</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCorsMappings</span><span class=\"params\">(CorsRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addMapping(<span class=\"string\">&quot;/**&quot;</span>)</span><br><span class=\"line\">                .allowedOrigins(<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">                .allowedMethods(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;OPTIONS&quot;</span>)</span><br><span class=\"line\">                .allowedHeaders(<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">                .exposedHeaders(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;Access-Control-Max-Age&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;X-Frame-Options&quot;</span>)</span><br><span class=\"line\">                .allowCredentials(<span class=\"keyword\">false</span>)</span><br><span class=\"line\">                .maxAge(<span class=\"number\">3600</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>SwaggerProperties  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;swagger&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerProperties</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 项目应用名</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String applicationName;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 项目版本信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String applicationVersion;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 项目描述信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String applicationDescription;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 接口调试地址</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tryHost;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>编写接口方法<ul>\n<li>在controller上添加@Tag注解</li>\n<li>在接口方法上添加@Operation 注解</li>\n<li>在接口参数添加@Parameter 或@Parameters 注解<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Tags(&#123;</span></span><br><span class=\"line\"><span class=\"meta\">  @Tag(name = &quot;ExpirationWarningController&quot;, description = &quot;设备寿命到期预警&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExpirationWarningController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//需要使用@Operation竹节</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/getOne/&#123;id&#125;/&#123;type&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Operation(summary = &quot;按ID查询&quot;, description = &quot;按ID查询&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResponseResult <span class=\"title\">getOne</span><span class=\"params\">(<span class=\"meta\">@Parameter(description = &quot;主键ID&quot;)</span> <span class=\"meta\">@PathVariable</span> Integer id,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"meta\">@Parameter(description = &quot;类型&quot;)</span> <span class=\"meta\">@PathVariable</span> String type)</span> </span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseResult.success(expirationWarningVO);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/save&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@Operation(summary = &quot;保存&quot;, description = &quot;保存&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResponseResult <span class=\"title\">save</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> ExpirationWarning expirationWarning)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>在springboot启动类上加上以下配置<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@OpenAPIDefinition(</span></span><br><span class=\"line\"><span class=\"meta\">    info = @Info(</span></span><br><span class=\"line\"><span class=\"meta\">        title = &quot;测试springdoc&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">        version = &quot;1.0&quot;</span></span><br><span class=\"line\"><span class=\"meta\">    ),</span></span><br><span class=\"line\"><span class=\"meta\">    externalDocs = @ExternalDocumentation(description = &quot;swagger-api参考文档&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">        url = &quot;https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Annotations&quot;</span></span><br><span class=\"line\"><span class=\"meta\">    ),</span></span><br><span class=\"line\"><span class=\"meta\">    servers = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">        @Server(</span></span><br><span class=\"line\"><span class=\"meta\">            url = &quot;http://localhost:8123/app&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">            description = &quot;本地地址&quot;</span></span><br><span class=\"line\"><span class=\"meta\">        ),</span></span><br><span class=\"line\"><span class=\"meta\">        @Server(</span></span><br><span class=\"line\"><span class=\"meta\">            url = &quot;http://www.xiaoyuge.vip/app&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">            description = &quot;公网测试环境&quot;</span></span><br><span class=\"line\"><span class=\"meta\">        )</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResolutionApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(ResolutionApplication.class, args);</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;============= Start Success =============&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>启动项目</p>\n<p>访问 <a href=\"http://localhost:8123/app/springdoc/swagger-ui/index.html\">http://localhost:8123/app/springdoc/swagger-ui/index.html</a> 查看springdox的文档中心<br><img src=\"/swagger/4.png\" alt=\"springdoc\"><br><img src=\"/swagger/5.png\" alt=\"springdoc\"></p>\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>优缺点</p>\n<ul>\n<li><p>优点：不好说</p>\n</li>\n<li><p>缺点：界面没有按照每个controller分组，不直观！；</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-3-Apifox\"><a href=\"#3-3-Apifox\" class=\"headerlink\" title=\"3.3 Apifox\"></a>3.3 Apifox</h3><p>一款研发全流程，接口全周期的生产力工具，这款软件真正完成了数据流的打通，在一个软件上就能实现<strong>接口设计–接口文档–接口调试–接口修改–接口mock–接口测试–接口自动化–接口迭代</strong>的工作流闭环；</p>\n<h4 id=\"3-3-1-Apifox上的协作流程\"><a href=\"#3-3-1-Apifox上的协作流程\" class=\"headerlink\" title=\"3.3.1 Apifox上的协作流程\"></a>3.3.1 Apifox上的协作流程</h4><ol>\n<li>后端在Apifox可视化接口设计界面上定义好项目各个接口及对应参数同时编写接口文档说明</li>\n<li>前后端一起评审，修改完善接口并在同一界面顺手更新接口文档</li>\n<li>后端使用接口调试功能调试接口</li>\n<li>前端使用零配置高仿真mock功能对前端页面进行调试，无需手写mock规则</li>\n<li>后端使用代码生成功能直接生成接口代码</li>\n<li>测试在接口管理页面一键生成接口参数测试用例,并依据业务场景生成自动化测试用例，一键运行接口用例并生成接口测试报告并分享给相关人员。</li>\n<li>前后端 都开发完，前端从Mock 数据切换到正式数据，进行联调，由于使用同一个接口数据源，且遵循了接口规范，联调顺利</li>\n<li>由于bug修复或需求变更，接口发生了变化，后端修改提交后，前端和测试实时同步到了修改后的数据</li>\n<li>项目经理通过权限设置给研发,产品,测试,外部合作人员分配编辑,只读等各种操作权限，维护了项目安全</li>\n<li>项目经理通过各个接口的状态开发中,测试中,已发布来跟进项目的进度情况，把控项目风险。</li>\n</ol>\n<h4 id=\"3-3-2-Apifox做的增速提效优化\"><a href=\"#3-3-2-Apifox做的增速提效优化\" class=\"headerlink\" title=\"3.3.2 Apifox做的增速提效优化\"></a>3.3.2 Apifox做的增速提效优化</h4><ul>\n<li><p>接口设计：从代码生成界面到可视化接口设计界面</p>\n<p>Apifox 接口文档遵循 OpenApi 3.0 (原 Swagger)、JSON Schema 规范，可生成在线文档；零学习成本即可编写出符合RESTful风格的接口文档，新人上手快；所见即所得，不易出错<br><img src=\"/swagger/6.png\" alt=\"Apifox\"><br><img src=\"/swagger/7.png\" alt=\"Apifox\"></p>\n</li>\n<li><p>文档维护：从接口与文档分离到接口与文档合并</p>\n<p>Apifox的接口设计界面提供了Markdown格式的文档说明区，修改完接口就如同commit代码时添加变更说明般<br><img src=\"/swagger/8.png\" alt=\"Apifox\"></p>\n</li>\n<li><p>数据复用：从各自为政到定义一次、多次复用</p>\n<ul>\n<li><p>接口数据复用：Swagger，Postman，MockJS，Jmeter等软件彼此之间数据不互通，数据格式不一致，接口导入非常耗时麻烦。<br>而Apifox能身兼多职，包揽上述软件功能，在Apifox中定义一次接口，能被后端直接用来调试，前端直接用来mock界面，测试直接执行接口自动化。</p>\n</li>\n<li><p>数据模型复用：可复用的数据结构，定义接口返回数据结构及请求参数数据结构（仅 JSON 和 XML 模式）时可直接引用。</p>\n</li>\n</ul>\n</li>\n<li><p>同步更新，高效沟通:从沟通滞后到数据变更即时同步</p>\n<p>Apifox为此提供了同步功能，一旦接口数据有更新发生，就会即时同步更新并通知到项目内所有成员。</p>\n</li>\n</ul>\n<ul>\n<li><p>Apihub</p>\n<p>内置企业微信开放API，抖音开放API等第三方接口开放项目，接口可以直接在Apifox中调试，不需要到处找接口文档和手工填写接口</p>\n<h4 id=\"3-3-3-下载地址\"><a href=\"#3-3-3-下载地址\" class=\"headerlink\" title=\"3.3.3 下载地址\"></a>3.3.3 下载地址</h4><p>官网地址： <a href=\"http://www.apifox.cn/?utm_medium=WCSA&amp;utm_source=xxzsq\">http://www.apifox.cn/?utm_medium=WCSA&amp;utm_source=xxzsq</a></p>\n</li>\n</ul>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h2 id=\"1-Swagger\"><a href=\"#1-Swagger\" class=\"headerlink\" title=\"1. Swagger\"></a>1. Swagger</h2><p>Swagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。<br>Swagger 的目标是对 REST API 定义一个标准且和语言无关的接口，可以让人和计算机拥有无须访问源码、文档或网络流量监测就可以发现和理解服务的能力。</p>\n<p>静态的swagger跟不上频繁变更的代码，容易出现以下问题</p>\n<ul>\n<li>“为什么改了这个没告诉我” </li>\n<li>“实际功能和文档上说的不一样啊”</li>\n</ul>\n<p>这样会带来的问题是：</p>\n<ol>\n<li>Swagger，postman，MockJS只能完成软件研发流程中某个环节的功能，造成完成接口设计，文档编写，调试，测试验证等工作需要使用好几个工具；</li>\n<li>更麻烦的是这些工具数据格式不互通，无法互相导入，造成用Swagger定义和编写完成接口后，在Postman，MockJS，Jmeter等工具还要再去手动填写一遍才能开始工作，增加了无意义的工作量。</li>\n<li>沟通成本总是被忽略不计，但实际上不仅占据了很大时间，各种沟通不及时、沟通不到位还非常让人心累。</li>\n<li>老板的需求来得急，老板的需求变得快，各种代码修改和变更难以及时通知和同步到团队成员手中。</li>\n</ol>\n<h2 id=\"2-常见的可视化RestFul风格的服务\"><a href=\"#2-常见的可视化RestFul风格的服务\" class=\"headerlink\" title=\"2. 常见的可视化RestFul风格的服务\"></a>2. 常见的可视化RestFul风格的服务</h2><ul>\n<li>springfox-swagger2</li>\n<li>springdoc</li>\n<li>Apifox（接口测试工具，非集成在项目中postman加强升级版）</li>\n</ul>\n<h2 id=\"3-各个工具的使用以及风格\"><a href=\"#3-各个工具的使用以及风格\" class=\"headerlink\" title=\"3. 各个工具的使用以及风格\"></a>3. 各个工具的使用以及风格</h2><p>使用Springboot项目分别集成各个组件，看下具体的实现效果；</p>\n<h3 id=\"3-1-springfox-swagger2\"><a href=\"#3-1-springfox-swagger2\" class=\"headerlink\" title=\"3.1 springfox-swagger2\"></a>3.1 springfox-swagger2</h3><ol>\n<li><p>引入依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">2.10</span><span class=\"number\">.5</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;<span class=\"number\">2.9</span><span class=\"number\">.2</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;<span class=\"number\">2.0</span><span class=\"number\">.8</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>编写配置类</p>\n<ul>\n<li>SwaggerConfiguration类  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger2WebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@EnableKnife4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String applicationName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(value = &quot;defaultApi&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">defaultApi2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//设置处理请求的包，我的controller类都在com.yugb.controller中</span></span><br><span class=\"line\">        Predicate&lt;RequestHandler&gt; apiPackage = RequestHandlerSelectors.basePackage(<span class=\"string\">&quot;com.yugb.controller&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Docket docket = <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .apiInfo(<span class=\"keyword\">new</span> ApiInfoBuilder()</span><br><span class=\"line\">                        .version(<span class=\"string\">&quot;1.0&quot;</span>)</span><br><span class=\"line\">                        .contact(<span class=\"keyword\">new</span> Contact(<span class=\"string\">&quot;xiaoyuge&quot;</span>,<span class=\"string\">&quot;123&quot;</span>, <span class=\"string\">&quot;12342qq.com&quot;</span>))</span><br><span class=\"line\">                        .title(applicationName + <span class=\"string\">&quot; 文档中心&quot;</span>)</span><br><span class=\"line\">                        .description(<span class=\"string\">&quot;&lt;div style=&#x27;font-size:15px;&#x27;&gt;&quot;</span> + applicationName + <span class=\"string\">&quot; RESTful APIs&lt;/div&gt;&quot;</span>)</span><br><span class=\"line\">                        .build())</span><br><span class=\"line\">                <span class=\"comment\">//分组名称</span></span><br><span class=\"line\">                .groupName(<span class=\"string\">&quot;2.X版本&quot;</span>)</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                <span class=\"comment\">//这里指定Controller扫描包路径</span></span><br><span class=\"line\">                .apis(apiPackage)</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> docket;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>SwaggerWebMvcConfigurer 类  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerWebMvcConfigurer</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addResourceHandler(<span class=\"string\">&quot;doc.html&quot;</span>).addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class=\"line\">        registry.addResourceHandler(<span class=\"string\">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>添加注解</p>\n<p>我们接口文档的直接描述主要就是在Controller这一层，比如这个接口的功能，参数的名称，返回值的名称等。这些值我们都需要在Controller上通过给方法上，请求参数和返回参数上添加对应的注解，swagger才能帮我们生成相应的接口文档。</p>\n<ul>\n<li><strong>JavaBean</strong>: @ApiModel注解和 @@ApiModelProperty 注解定义了实体的名称和字段的名称  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel(&quot;创建Swagger响应结果&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerResVO</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;姓名&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;性别&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer gender;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;啥啥&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String what;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><strong>controller</strong>: @Api注解和 @ApiOperation注解分别标注了接口组名和接口的名称 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/swagger&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Api(value = &quot;用户接口&quot;, tags = &#123;&quot;用户接口&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;新增用户&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;save&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">save</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> SwaggerReqVO req)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;getById&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;根据条件查询用户&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SwaggerResVO <span class=\"title\">getById</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> SwaggerResVO req)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SwaggerResVO();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li><p>启动项目</p>\n<p> 访问 <a href=\"http://localhost:8080/doc.html\">http://localhost:8080/doc.html</a> 查看springfox-swagger2的文档中心<br> <img src=\"/swagger/1.png\" alt=\"springfox-swagger2\"></p>\n<p> 查看GET请求的界面<br> <img src=\"/swagger/2.png\" alt=\"springfox-swagger2\"><br> <img src=\"/swagger/3.png\" alt=\"springfox-swagger2\"></p>\n</li>\n<li><p>优缺点</p>\n<ul>\n<li>优点：界面美观，集成方便，不同类型的接口按照controller分组，<strong>可以导出所有的接口文档！！！！！</strong></li>\n<li>缺点：暂时没有遇到</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-2-springdoc\"><a href=\"#3-2-springdoc\" class=\"headerlink\" title=\"3.2 springdoc\"></a>3.2 springdoc</h3><ol>\n<li><p>引入依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.springdoc&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;springdoc-openapi-ui&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;<span class=\"number\">1.5</span><span class=\"number\">.8</span>&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.springdoc&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;springdoc-openapi-webmvc-core&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;<span class=\"number\">1.5</span><span class=\"number\">.8</span>&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>配置yml /yaml /properties</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">springdoc:</span></span><br><span class=\"line\">  <span class=\"attr\">api-docs:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">groups:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/api-docs</span></span><br><span class=\"line\">  <span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">disabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">swagger-ui:</span></span><br><span class=\"line\">    <span class=\"attr\">groups-order:</span> <span class=\"string\">asc</span></span><br><span class=\"line\">    <span class=\"comment\"># 自定义的文档界面访问路径。默认访问路径是/swagger-ui.html</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/springdoc/docs.html</span></span><br><span class=\"line\">  <span class=\"comment\"># 布尔值。实现OpenApi规范的打印。</span></span><br><span class=\"line\">  <span class=\"attr\">writer-with-default-pretty-printer:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n<li><p>编写配置类</p>\n<ul>\n<li>SpringdocOpenapiConfiguration  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringdocOpenapiConfiguration</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SwaggerProperties swaggerProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpringdocOpenapiConfiguration</span><span class=\"params\">(SwaggerProperties swaggerProperties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.swaggerProperties = swaggerProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> OpenAPI <span class=\"title\">springDocOpenAPI</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//配置认证、请求头参数</span></span><br><span class=\"line\">        Components components = <span class=\"keyword\">new</span> Components();</span><br><span class=\"line\"><span class=\"comment\">//        Map&lt;String, Object&gt; myHeader2extensions = new HashMap&lt;&gt;(2);</span></span><br><span class=\"line\"><span class=\"comment\">//        myHeader2extensions.put(&quot;name&quot;, &quot;myHeader2&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        components</span></span><br><span class=\"line\"><span class=\"comment\">//                .addSecuritySchemes(&quot;bearer-key&quot;, new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(&quot;bearer&quot;).bearerFormat(&quot;JWT&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">//                .addSecuritySchemes(&quot;basicScheme&quot;, new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(&quot;basic&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">//                .addHeaders(&quot;myHeader2&quot;, new Header().description(&quot;myHeader2 header&quot;).schema(new StringSchema()).extensions(myHeader2extensions))</span></span><br><span class=\"line\"><span class=\"comment\">//                .addParameters(&quot;myGlobalHeader&quot;, new HeaderParameter().required(true).name(&quot;My-Global-Header&quot;).description(&quot;My Global Header&quot;).schema(new StringSchema()).required(false))</span></span><br><span class=\"line\"><span class=\"comment\">//        ;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"comment\">// 接口调试路径</span></span><br><span class=\"line\">        Server tryServer = <span class=\"keyword\">new</span> Server();</span><br><span class=\"line\">        tryServer.setUrl(swaggerProperties.getTryHost());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OpenAPI()</span><br><span class=\"line\">                .components(components)</span><br><span class=\"line\">                .servers(Collections.singletonList(tryServer))</span><br><span class=\"line\">                .info(<span class=\"keyword\">new</span> Info()</span><br><span class=\"line\">                        .title(swaggerProperties.getApplicationName() + <span class=\"string\">&quot; Api Doc&quot;</span>)</span><br><span class=\"line\">                        .description(swaggerProperties.getApplicationDescription())</span><br><span class=\"line\">                        .version(<span class=\"string\">&quot;Application Version: &quot;</span> + swaggerProperties.getApplicationVersion() + <span class=\"string\">&quot;\\n Spring Boot Version: &quot;</span> + SpringBootVersion.getVersion())</span><br><span class=\"line\">                        .license(<span class=\"keyword\">new</span> License().name(<span class=\"string\">&quot;Apache 2.0&quot;</span>).url(<span class=\"string\">&quot;https://www.apache.org/licenses/LICENSE-2.0.html&quot;</span>))</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .externalDocs(<span class=\"keyword\">new</span> ExternalDocumentation()</span><br><span class=\"line\">                        .description(<span class=\"string\">&quot;SpringDoc Full Documentation&quot;</span>)</span><br><span class=\"line\">                        .url(<span class=\"string\">&quot;https://springdoc.org/&quot;</span>)</span><br><span class=\"line\">                );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加全局的请求头参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"comment\">//    @Bean</span></span><br><span class=\"line\"><span class=\"comment\">//    public OpenApiCustomiser customerGlobalHeaderOpenApiCustomiser() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        return openApi -&gt; openApi.getPaths().values().stream().flatMap(pathItem -&gt; pathItem.readOperations().stream())</span></span><br><span class=\"line\"><span class=\"comment\">//                .forEach(operation -&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                    operation.addParametersItem(new HeaderParameter().$ref(&quot;#/components/parameters/myGlobalHeader&quot;));</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通用拦截器排除设置，所有拦截器都会自动加springdoc-opapi相关的资源排除信息，不用在应用程序自身拦截器定义的地方去添加，算是良心解耦实现。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Field registrationsField = FieldUtils.getField(InterceptorRegistry.class, <span class=\"string\">&quot;registrations&quot;</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            List&lt;InterceptorRegistration&gt; registrations = (List&lt;InterceptorRegistration&gt;) ReflectionUtils.getField(registrationsField, registry);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (registrations != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (InterceptorRegistration interceptorRegistration : registrations) &#123;</span><br><span class=\"line\">                    interceptorRegistration.excludePathPatterns(<span class=\"string\">&quot;/springdoc**/**&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 服务器支持跨域</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCorsMappings</span><span class=\"params\">(CorsRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addMapping(<span class=\"string\">&quot;/**&quot;</span>)</span><br><span class=\"line\">                .allowedOrigins(<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">                .allowedMethods(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;OPTIONS&quot;</span>)</span><br><span class=\"line\">                .allowedHeaders(<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">                .exposedHeaders(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;Access-Control-Max-Age&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;X-Frame-Options&quot;</span>)</span><br><span class=\"line\">                .allowCredentials(<span class=\"keyword\">false</span>)</span><br><span class=\"line\">                .maxAge(<span class=\"number\">3600</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>SwaggerProperties  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;swagger&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerProperties</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 项目应用名</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String applicationName;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 项目版本信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String applicationVersion;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 项目描述信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String applicationDescription;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 接口调试地址</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tryHost;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>编写接口方法<ul>\n<li>在controller上添加@Tag注解</li>\n<li>在接口方法上添加@Operation 注解</li>\n<li>在接口参数添加@Parameter 或@Parameters 注解<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Tags(&#123;</span></span><br><span class=\"line\"><span class=\"meta\">  @Tag(name = &quot;ExpirationWarningController&quot;, description = &quot;设备寿命到期预警&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExpirationWarningController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//需要使用@Operation竹节</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/getOne/&#123;id&#125;/&#123;type&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Operation(summary = &quot;按ID查询&quot;, description = &quot;按ID查询&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResponseResult <span class=\"title\">getOne</span><span class=\"params\">(<span class=\"meta\">@Parameter(description = &quot;主键ID&quot;)</span> <span class=\"meta\">@PathVariable</span> Integer id,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"meta\">@Parameter(description = &quot;类型&quot;)</span> <span class=\"meta\">@PathVariable</span> String type)</span> </span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseResult.success(expirationWarningVO);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/save&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@Operation(summary = &quot;保存&quot;, description = &quot;保存&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResponseResult <span class=\"title\">save</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> ExpirationWarning expirationWarning)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>在springboot启动类上加上以下配置<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@OpenAPIDefinition(</span></span><br><span class=\"line\"><span class=\"meta\">    info = @Info(</span></span><br><span class=\"line\"><span class=\"meta\">        title = &quot;测试springdoc&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">        version = &quot;1.0&quot;</span></span><br><span class=\"line\"><span class=\"meta\">    ),</span></span><br><span class=\"line\"><span class=\"meta\">    externalDocs = @ExternalDocumentation(description = &quot;swagger-api参考文档&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">        url = &quot;https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Annotations&quot;</span></span><br><span class=\"line\"><span class=\"meta\">    ),</span></span><br><span class=\"line\"><span class=\"meta\">    servers = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">        @Server(</span></span><br><span class=\"line\"><span class=\"meta\">            url = &quot;http://localhost:8123/app&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">            description = &quot;本地地址&quot;</span></span><br><span class=\"line\"><span class=\"meta\">        ),</span></span><br><span class=\"line\"><span class=\"meta\">        @Server(</span></span><br><span class=\"line\"><span class=\"meta\">            url = &quot;http://www.xiaoyuge.vip/app&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">            description = &quot;公网测试环境&quot;</span></span><br><span class=\"line\"><span class=\"meta\">        )</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResolutionApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(ResolutionApplication.class, args);</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;============= Start Success =============&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>启动项目</p>\n<p>访问 <a href=\"http://localhost:8123/app/springdoc/swagger-ui/index.html\">http://localhost:8123/app/springdoc/swagger-ui/index.html</a> 查看springdox的文档中心<br><img src=\"/swagger/4.png\" alt=\"springdoc\"><br><img src=\"/swagger/5.png\" alt=\"springdoc\"></p>\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>优缺点</p>\n<ul>\n<li><p>优点：不好说</p>\n</li>\n<li><p>缺点：界面没有按照每个controller分组，不直观！；</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-3-Apifox\"><a href=\"#3-3-Apifox\" class=\"headerlink\" title=\"3.3 Apifox\"></a>3.3 Apifox</h3><p>一款研发全流程，接口全周期的生产力工具，这款软件真正完成了数据流的打通，在一个软件上就能实现<strong>接口设计–接口文档–接口调试–接口修改–接口mock–接口测试–接口自动化–接口迭代</strong>的工作流闭环；</p>\n<h4 id=\"3-3-1-Apifox上的协作流程\"><a href=\"#3-3-1-Apifox上的协作流程\" class=\"headerlink\" title=\"3.3.1 Apifox上的协作流程\"></a>3.3.1 Apifox上的协作流程</h4><ol>\n<li>后端在Apifox可视化接口设计界面上定义好项目各个接口及对应参数同时编写接口文档说明</li>\n<li>前后端一起评审，修改完善接口并在同一界面顺手更新接口文档</li>\n<li>后端使用接口调试功能调试接口</li>\n<li>前端使用零配置高仿真mock功能对前端页面进行调试，无需手写mock规则</li>\n<li>后端使用代码生成功能直接生成接口代码</li>\n<li>测试在接口管理页面一键生成接口参数测试用例,并依据业务场景生成自动化测试用例，一键运行接口用例并生成接口测试报告并分享给相关人员。</li>\n<li>前后端 都开发完，前端从Mock 数据切换到正式数据，进行联调，由于使用同一个接口数据源，且遵循了接口规范，联调顺利</li>\n<li>由于bug修复或需求变更，接口发生了变化，后端修改提交后，前端和测试实时同步到了修改后的数据</li>\n<li>项目经理通过权限设置给研发,产品,测试,外部合作人员分配编辑,只读等各种操作权限，维护了项目安全</li>\n<li>项目经理通过各个接口的状态开发中,测试中,已发布来跟进项目的进度情况，把控项目风险。</li>\n</ol>\n<h4 id=\"3-3-2-Apifox做的增速提效优化\"><a href=\"#3-3-2-Apifox做的增速提效优化\" class=\"headerlink\" title=\"3.3.2 Apifox做的增速提效优化\"></a>3.3.2 Apifox做的增速提效优化</h4><ul>\n<li><p>接口设计：从代码生成界面到可视化接口设计界面</p>\n<p>Apifox 接口文档遵循 OpenApi 3.0 (原 Swagger)、JSON Schema 规范，可生成在线文档；零学习成本即可编写出符合RESTful风格的接口文档，新人上手快；所见即所得，不易出错<br><img src=\"/swagger/6.png\" alt=\"Apifox\"><br><img src=\"/swagger/7.png\" alt=\"Apifox\"></p>\n</li>\n<li><p>文档维护：从接口与文档分离到接口与文档合并</p>\n<p>Apifox的接口设计界面提供了Markdown格式的文档说明区，修改完接口就如同commit代码时添加变更说明般<br><img src=\"/swagger/8.png\" alt=\"Apifox\"></p>\n</li>\n<li><p>数据复用：从各自为政到定义一次、多次复用</p>\n<ul>\n<li><p>接口数据复用：Swagger，Postman，MockJS，Jmeter等软件彼此之间数据不互通，数据格式不一致，接口导入非常耗时麻烦。<br>而Apifox能身兼多职，包揽上述软件功能，在Apifox中定义一次接口，能被后端直接用来调试，前端直接用来mock界面，测试直接执行接口自动化。</p>\n</li>\n<li><p>数据模型复用：可复用的数据结构，定义接口返回数据结构及请求参数数据结构（仅 JSON 和 XML 模式）时可直接引用。</p>\n</li>\n</ul>\n</li>\n<li><p>同步更新，高效沟通:从沟通滞后到数据变更即时同步</p>\n<p>Apifox为此提供了同步功能，一旦接口数据有更新发生，就会即时同步更新并通知到项目内所有成员。</p>\n</li>\n</ul>\n<ul>\n<li><p>Apihub</p>\n<p>内置企业微信开放API，抖音开放API等第三方接口开放项目，接口可以直接在Apifox中调试，不需要到处找接口文档和手工填写接口</p>\n<h4 id=\"3-3-3-下载地址\"><a href=\"#3-3-3-下载地址\" class=\"headerlink\" title=\"3.3.3 下载地址\"></a>3.3.3 下载地址</h4><p>官网地址： <a href=\"http://www.apifox.cn/?utm_medium=WCSA&amp;utm_source=xxzsq\">http://www.apifox.cn/?utm_medium=WCSA&amp;utm_source=xxzsq</a></p>\n</li>\n</ul>\n"},{"title":"mycat学习","comments":1,"abbrlink":754,"date":"2021-07-23T08:16:49.000Z","translate_title":"mycat_learning","_content":"# Mycat(分库分表中间件)\n\n## 1. 数据库优化策略\n\n1.  重启：释放资源\n2.  SQL与索引\n3.  表与存储引擎（字段类型选择，长度设置，是否需要分表、分区）\n4.  数据库与应用架构（考虑使用缓存服务器，减轻是数据库压力；可以数据库分布式，读写分离，主从复制）\n5.  数据库与操作系统配置（修改mysql配置，使用单独服务器部署数据库）\n6.  硬件\n\n## 2. 数据库演化\n\n根据业务需要、数据量变化，随之而来的数据库的变化\n\n1.  数据库与应用部署在同一台服务器\n![mycat](./mycat/image-20201104204430049.png)\n2.  单体应用架构，单数据库（数据库服务器和应用服务器分离，但是业务系统越做越大）\n    ![mycat](./mycat/image-20201104204624925.png)\n\n3.  多应用单数据库（应用解耦）\n    ![mycat](./mycat/image-20201104204933409.png)\n\n4.  多应用 独立数据库\n    ![mycat](./mycat/image-20201104205054233.png)\n\n5.  但应用多数据库(分表)\n    ![mycat](./mycat/image-20201104205319372.png)\n\n## 3. 如何分库分表\n![mycat](./mycat/image-20201104205653611.png)\n\n-   垂直切分\n\n    -   单库\n        ![mycat](./mycat/image-20201104205756827.png)\n\n    -   多库\n        ![mycat](./mycat/image-20201104210008624.png)\n\n-   水平切分\n\n    -   按照月分表或者分成实时、历史表等\n        ![mycat](./mycat/image-20201104210117373.png)\n\n    -   分成多库\n        ![mycat](./mycat/image-20201104210416994.png)\n\n## 4. 分库分表带来的问题\n\n1.  跨库关联查询\n\n    -   增加冗余字段（违反了第三范式：表中的所有数据元素不但要能唯一地被主关键字所标识,而且它们之间还必须相互独立,不存在其他的函数关系）\n    -   跨数据库的同步（canal、Mq（最好）、ETL、kettle、ogg）(在某个库中同步其他数据库中表的数据，避免跨库关联查询)\n    -   全局表(广播表)：比如行政区划表，所有的系统都是一样的；\n    -   API\n\n2.  分布式事务\n\n    -   Local\n\n3.  排序、翻页、函数计算\n\n    -\n\n4.  全局主键\n\n    -   雪花算法leaf\n    -   redis(int 类型可以设置incby)\n    -   ZookKeeper\n    -   uuid(数据过长， 影响索引存储)\n\n5.  多数据源连接（动态数据源）\n    ![mycat](./mycat/image-20201104213343204.png)\n\n## 5. Mycat分库分表中间件\n\n**官网地址**：http://www.mycat.org.cn/\n\n从阿里cobar升级而来，完全实现了mysql协议，可以当作一个mysql数据库来使用，通过JDBC支持其他数据库实现分库分表，解决了**多表join、分布式事务、全局序列号、翻页查询、函数计算**的问题\n\n*   一个彻底开源的，面向企业应用开发的大数据库集群\n*   支持事务、ACID、可以替代MySQL的加强版数据库\n*   一个可以视为MySQL集群的企业级数据库，用来替代昂贵的Oracle集群\n*   一个融合内存缓存技术、NoSQL技术、HDFS大数据的新型SQL Server\n*   结合传统数据库和新型分布式数据仓库的新一代企业级数据库产品\n*   一个新颖的数据库中间件产品\n\n华为云的DDM其实也是根据mycat做的\n\n### 5.1 核心概念\n\n![image-20201104215015366](./mycat/image-20201104215015366.png)\n\n### 5.2 Mycat安装与配置\n\n#### 5.2.1 Mycat安装\n\n从官网下载安装版本，解压到文件(官网建议安装在/usr/local/Mycat)后页面如下图所示：\n![image-20201127094703483](./mycat/image-20201127094703483.png)\n\n目录解释如下：\n\n- **bin：**存放window版和linux版本除了提供封装成服务的版本之外，也提供了nowrap的shell脚本命令，方便选择和修改；Linux下运行:./mycat console， 首先要chmod + x*;(mycat支持的命令console、start、stop、restart、status、dump)\n- **conf：**server.xml是mycat服务器参数调整和用户授权的配置文件，schema.xml是逻辑库定义和表以及分片定义的配置文件，rule.xml是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改，需要重启mycat或者通过9066端口reload\n- **lib:**主要存放mycat依赖的一些jar文件\n- **logs:**日志存放在mycat.log中，每天一个文件，日志的配置是在conf/log4j.xml中，根据自己的需要，可以调整输出级别为debug，方便排查问题；注意Linux下部署安装mysql，默认不忽略，需要手动到/etc/my.cnf下配置**lower_case_table_names=1**使Linux环境下MySQL忽略表明大小写，否则使用mycat的时候会提示找不到表的错误\n\n#### 5.2.2 服务启动与配置\n\nMycat在Linux中部署启动时，首先需要在Linux系统的环境变量中配置MYCAT_HOE,操作方式如下：\n\n1. vi /etc/profile，在系统环境变量文件中增加MYCAT_HOME=/usr/lib/tools/mycat\n   ![image-20201127103212598](./mycat/image-20201127103212598.png)\n\n2. 执行 source/etc/profile命令，使环境变量生效。如果是多台Linux系统中组件Mycat集群，那需要在mycat Server所在的服务器配置对其他ip和主机名的映射，配置方式如下：\n   ![image-20201127104159580](./mycat/image-20201127104159580.png)\n\n   经过以上两个步骤的配置，就可以到/usr/lib/tools/mycat/bin目录下执行./mycat start启动mycat服务；使用mycat status查看mycat的运行状态；如下图\n   ![image-20201128135953635](./mycat/image-20201128135953635.png)\n\n##### 5.2.2.1 安装遇到的问题\n\n1. schema TESTDB refered by user root is not exist!![image-20201215152125176](./mycat/image-20201215152125176.png)\n\n   解决方式：\n\n    ```xml\n    <!--在conf/server.xml文件中schemas中配置schema.xml文件中的schema的name值-->\n    \n    <!--user中的name为mycat服务的用户名-->\n     <user name=\"root\" defaultAccount=\"true\">\n         <!--这个是mycat服务连接的密码-->\n          <property name=\"password\">123456</property>\n          <property name=\"schemas\">xiaoyuge</property>\n    </user>\n    ```\n\n\n\n#### 5.2.3日志分析\n\nmycat的日志文件配置为MYCAT_HOME/conf/log4j.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n    <log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\n    <appender name=\"ConsoleAppender\" class=\"org.apache.log4j.ConsoleAppender\">\n    <layout class=\"org.apache.log4j.PatternLayout\">\n    <param name=\"ConversionPattern\" value=\"%d{MM-dd HH:mm:ss.SSS} %5p [%t] (%F:%L) -%m%n\" />\n\t</layout>\n\t</appender>\n\t<appender name=\"FILE\" class=\"org.apache.log4j.RollingFileAppender\">\n        <!--日志文件存放的目录-->\n        <param name=\"file\" value=\"${MYCAT_HOME}/logs/mycat.log\" />\n        <param name=\"Append\" value=\"false\"/>\n        <param name=\"MaxFileSize\" value=\"10000KB\"/>\n        <param name=\"MaxBackupIndex\" value=\"10\"/>\n        <param name=\"encoding\" value=\"UTF-8\" />\n        <layout class=\"org.apache.log4j.PatternLayout\">\n        <param name=\"ConversionPattern\" value=\"%d{MM/dd HH:mm:ss.SSS} %5p [%t] (%F:%L) -%m%n\" />\n\t</layout>\n\t</appender>\n\t<root>\n        <!--level是日志级别，生产环境下加以将级别调整为info/ware，如果是研究测试，碰到异常设置为debug-->\n\t\t<level value=\"debug\" />\n\t\t<appender-ref ref=\"ConsoleAppender\" />\n\t</root>\n</log4j:configuration>\n```\n\n##### 5.2.3.1 warpper日志\n\n目前mycat的启动时经过warpper封装成启动脚本，所以日志也会有其相关的日志文件：${MYCAT_HOME}/logs/warapper.log， 在启动的时候如果系统环境配置错误或缺少配置时，导致mycat无法启动，可以通过查看wrapper.log查看具体错误原因。\n\n1. 正常启动\n\n    ```verilog\n    STATUS | wrapper | 2015/04/12 15:05:00 | --> Wrapper Started as Daemon\n    STATUS | wrapper | 2015/04/12 15:05:00 | Launching a JVM...\n    INFO | jvm 1 | 2015/04/12 15:05:01 | Wrapper (Version 3.2.3) http://wrapper.tanukisoftware.org\n    INFO | jvm 1 | 2015/04/12 15:05:01 | Copyright 1999-2006 Tanuki Software, Inc. AllRights Reserved.\n    INFO | jvm 1 | 2015/04/12 15:05:01 |\n    INFO | jvm 1 | 2015/04/12 15:05:01 | log4j 2015-04-12 15:05:01 [./conf/log4j.xml]load completed.\n    INFO | jvm 1 | 2015/04/12 15:05:02 | MyCAT Server startup successfully. see logs in logs/mycat.log\n    ```\n\n2. 启动异常\n\n    ```verilog\n    STATUS | wrapper | 2015/02/14 01:43:44 | --> Wrapper Started as Daemon\n    STATUS | wrapper | 2015/02/14 01:43:44 | Launching a JVM...\n    INFO | jvm 1 | 2015/02/14 01:43:45 | Error: Exception thrown by the agent : java.rmi.server.ExportException:\n    Port already in use: 1984; nested exception is:\n    INFO | jvm 1 | 2015/02/14 01:43:45 | java.net.BindException: Address already in use\n    ERROR | wrapper | 2015/02/14 01:43:45 | JVM exited while loading the application.\n        \n    # 日志显示异常原因为 java.net.BindException: Address already in use,也就是端口占用，很有可能是原有服\n    务未停止，或者 Mycat 默认端口被其他程序占用，正常启动成功后会有 mycat.log 日志，如果服务未启动成功不会有对应的日志。 也可以去修改 conf 文件夹里的 wrapper.conf 里的 wrapper.java.additional.7=-Dcom.sun.management.jmxremote.port=1984，server.xml 的<property name=\"serverPort\">8066</property>和\n    <property name=\"managerPort\">9066</property>，这方法适\n    合一台机器上两个 mycat 或者 1984,8066,9066 端口被其它应用占用的情况\n    ```\n\n\n\n##### 5.2.3.2 mycat日志\n\n\n\n#### 5.2.4 mycat防火墙设置\n\n白名单和SQL黑名单说明：\n\n```xml\n<!--在 server.xml 中配置：-->\n<firewall>\n     <!--ip 白名单列表，可以配置多个-->\n    <whitehost>\n        <!--ip 白名单 用户对应的可以访问的 ip 地址-->\n    \t<host user=\"mycat\" host=\"127.0.0.1\"></host> \n    </whitehost>\n     <!-是否开启检查黑名单列表-->\n    <blacklist check=\"true\">\n        <!--黑名单允许的 权限 后面为默认-->\n    \t<property name=\"selelctAllow\">false</property>\n    </blacklist>\n</firewall>\n```\n\n**黑名单配置拦截明细如下：**\n\n|         配置项         | 缺省值 |                             描述                             |\n| :--------------------: | :----: | :----------------------------------------------------------: |\n|     rollbackAllow      |  true  | 是否允许执行 roll back 操作,如果把 selectIntoAllow、deleteAllow、updateAllow、insertAllow、mergeAllow 都设置为 false，这就是一个只读数据源了。 |\n|      selectAllow       |  true  |                    是否运行执行SELECT语句                    |\n|  selectAllColumnAllow  |  true  | 是否允许执行 SELECT * FROM T 这样的语句。如果设置为 false，不允许执行 select * from t，但 select * from (select id, name from t) a。这个选项是防御程序通过调用 select *获得数据表的结构信息 |\n|    selectIntoAllow     |  true  |               SELECT 查询中是否允许 INTO 字句                |\n|      deleteAllow       |  true  |                   是否允许执行 DELETE 语句                   |\n|      updateAllow       |  true  |                   是否允许执行 UPDATE 语句                   |\n|      insertAllow       |  true  |                   是否允许执行 INSERT 语句                   |\n|      replaceAllow      |  true  |                  是否允许执行 REPLACE 语句                   |\n|       mergeAllow       |  true  |       是否允许执行 MERGE 语句，这个只在 Oracle 中有用        |\n|       callAllow        |  true  |          是否允许通过 jdbc 的 call 语法调用存储过程          |\n|        setAllow        |  true  |                    是否允许使用 SET 语法                     |\n|     truncateAllow      |  true  |        truncate 语句是危险，缺省打开，若需要自行关闭         |\n|    createTableAllow    |  true  |                        是否允许创建表                        |\n|    alterTableAllow     |  true  |                是否允许执行 Alter Table 语句                 |\n|     dropTableAllow     |  true  |                        是否允许修改表                        |\n|      commentAllow      | false  | 是否允许语句中存在注释，Oracle 的用户不用担心，Wall 能够识别 hints和注释的区别 |\n| noneBaseStatementAllow | false  | 是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项 就能够屏蔽 DDL。 |\n|  multiStatementAllow   | false  |              是否允许一次执行多条语句，缺省关闭              |\n|        useAllow        |  true  |           是否允许执行 mysql 的 use 语句，缺省打开           |\n|     describeAllow      |  true  |        是否允许执行 mysql 的 describe 语句，缺省打开         |\n|       showAllow        |  true  |          是否允许执行 mysql 的 show 语句，缺省打开           |\n|      commitAllow       |  true  |                   是否允许执行 commit 操作                   |\n\n**拦截配置=-永真条件：**\n\n|           配置项            | 缺省值 |                             描述                             |\n| :-------------------------: | :----: | :----------------------------------------------------------: |\n|  selectWhereAlwayTrueCheck  |  true  |       检查 SELECT 语句的 WHERE 子句是否是一个永真条件        |\n| selectHavingAlwayTrueCheck  |  true  |       检查 SELECT 语句的 HAVING 子句是否是一个永真条件       |\n|  deleteWhereAlwayTrueCheck  |  true  |       检查 DELETE 语句的 WHERE 子句是否是一个永真条件        |\n|    deleteWhereNoneCheck     | false  | 检查 DELETE 语句是否无 where 条件，这是有风险的，但不是 SQL 注入类型的风险 |\n|  updateWhereAlayTrueCheck   |  true  |       检查 UPDATE 语句的 WHERE 子句是否是一个永真条件        |\n|    updateWhereNoneCheck     | false  | 检查 UPDATE 语句是否无 where 条件，这是有风险的，但不是SQL 注入类型的风险 |\n| conditionAndAlwayTrueAllow  | false  |    检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永真条件    |\n| conditionAndAlwayFalseAllow | false  |    检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永假条件    |\n|   conditionLikeTrueAllow    |  true  |   检查查询条件(WHERE/HAVING 子句)中是否包含 LIKE 永真条件    |\n\n**其他拦截配置：**\n\n|          配置项           | 缺省值 |                             描述                             |\n| :-----------------------: | :----- | :----------------------------------------------------------: |\n|  selectIntoOutfileAllow   | false  | SELECT ... INTO OUTFILE 是否允许，这个是 mysql 注入攻击的常见手段，缺省是禁止的 |\n|     selectUnionCheck      | true   |                      检测 SELECT UNION                       |\n|     selectMinusCheck      | true   |                      检测 SELECT MINUS                       |\n|     selectExceptCheck     | true   |                      检测 SELECT EXCEPT                      |\n|   selectIntersectCheck    | true   |                    检测 SELECT INTERSECT                     |\n|     mustParameterized     | false  | 是否必须参数化，如果为 True，则不允许类似 WHERE ID = 1 这种不参数化的 SQL |\n|     strictSyntaxCheck     | true   | 是否进行严格的语法检测，Druid SQL Parser 在某些场景不能覆盖所有的，SQL 语法，出现解析 SQL 出错，可以临时把这个选项设置为 false，同时把 SQL 反馈给 Druid 的开发者 |\n|    conditionOpXorAllow    | false  | 查询条件中是否允许有 XOR 条件。XOR 不常用，很难判断永真或者永假，缺省不允许。 |\n|  conditionOpBitwseAllow   | true   |               查询条件中是否允许有\"&\"、\"~\"、\"                |\n| conditionDoubleConstAllow | false  |           查询条件中是否允许连续两个常量运算表达式           |\n|        minusAllow         | true   |  是否允许 SELECT * FROM A MINUS SELECT * FROM B 这样的语句   |\n|      intersectAllow       | true   | 是否允许 SELECT * FROM A INTERSECT SELECT * FROM B 这样的语句 |\n|   constArithmeticAllow    | true   | 拦截常量运算的条件，比如说 WHERE FID = 3 - 1，其中\"3 - 1\"是常量运算表达式。 |\n|      limitZeroAllow       | false  |                 是否允许 limit 0 这样的语句                  |\n\n**禁用对象检测配置：**\n\n|     配置项     | 缺省值 |                             描述                             |\n| :------------: | :----: | :----------------------------------------------------------: |\n|   tableCheck   |  true  |                    检测是否使用了禁用的表                    |\n|  schemaCheck   |  true  |                 检测是否使用了禁用的 Schema                  |\n| functionCheck  |  true  |                   检测是否使用了禁用的函数                   |\n|  objectCheck   |  true  |                  检测是否使用了“禁用对对象”                  |\n|  variantCheck  |  true  |                  检测是否使用了“禁用的变量”                  |\n| readOnlyTables |   空   | 指定的表只读，不能够在 SELECT INTO、DELETE、UPDATE、INSERT、MERGE 中作为\"被修改表\"出现 |\n\n#### 5.2.5 mycat配置文件\n\n##### 5.2.5.1 schema.xml配置\n\nschema.xml作为mycat中重要的配置文件之一，管理者mycat的逻辑库、表、分片规则、DataNode以及DataSource。\n\n##### 5.2.5.2 scheme标签\n\n```xml\n<schema name=\"TESTDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\"></schema>\n```\n\nschema标签用于定义mycat实例中的逻辑库，mycat可以由多个逻辑库，每个逻辑库都有自己的相关配置，可以使用schema标签来划分这些不同的逻辑库。如果不配置schema标签，所有的表配置，会属于同一个默认的逻辑库。\n\n```xml\n<!--逻辑库TESTDB-->\n<schema name=\"TESTDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\">\n\t<table name=\"travelrecord\" dataNode=\"dn1,dn2,dn3\" rule=\"auto-sharding-long\" ></table>\n</schema>\n<!--USERDB-->\n<schema name=\"USERDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\">\n\t<table name=\"company\" dataNode=\"dn10,dn11,dn12\" rule=\"auto-sharding-long\" ></table>\n</schema>\n<!--\n\t逻辑库的概念和MySQL数据库中的database概念相同，我们在查询这两个不同的逻辑库中表的时候需要切换到该逻辑库下才可以查询到所需要的表\n-->\n```\n\n在server.xml中可以配置不同的用户能够使用的schema\n\n```xml\n        <user name=\"root\" defaultAccount=\"true\">\n                <property name=\"password\">root</property>\n                <property name=\"schemas\">TESTDB</property>\n                <property name=\"defaultSchema\">TESTDB</property>\n                <!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 -->\n\n                <!-- 表级 DML 权限设置 -->\n                <!--\n                <privileges check=\"false\">\n                        <schema name=\"TESTDB\" dml=\"0110\" >\n                                <table name=\"tb01\" dml=\"0000\"></table>\n                                <table name=\"tb02\" dml=\"1111\"></table>\n                        </schema>\n                </privileges>\n                 -->\n        </user>\n\n        <user name=\"user\">\n                <property name=\"password\">user</property>\n                <property name=\"schemas\">TESTDB</property>\n                <property name=\"readOnly\">true</property>\n                <property name=\"defaultSchema\">TESTDB</property>\n        </user>\n\n```\n![](./mycat/image-20201129110838590.png)\n\nschema标签的相关属性：\n\n|     属性名     |     值     | 数量限制 |\n| :------------: | :--------: | :------: |\n|    dataNode    | 任意string | （0..1） |\n| checkSQLschema |  Boolean   |  （1）   |\n|  sqlMaxLimit   |  Integer   |  （1）   |\n\n###### 5.2.5.2.1  dataNode\n\n该属性用于绑定逻辑库到某个具体的database上，1.3版本如果配置了dataNode,则不可以配置分片表，1.4可以配置默认分片，只需要配置需要分片的表即可，具体配置如下：\n\n```xml\n<!--1.3版本配置--><schema name=\"USERDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\" dataNode=\"dn1\"><!—里面不能配置任何表--></schema><!--1.4版本配置--><schema name=\"USERDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\" dataNode=\"dn2\"><!—配置需要分片的表-->\t<table name=“tuser” dataNode=”dn1”/></schema><!-- \t那么现在tuser就绑定到dn1所配置的具体database上，可以直接访问这个database，没有配置的表则会走默认的节点dn2，这里注意没有配置在分片里面的表工具查看无法显示，但是可以正常使用。-->\n```\n\n###### 5.2.5.2.2 checkSQLschema\n\n当改制设置为true时，我们执行“SELECT * FROM TESTDB.travelrecord；”则mycat会把语句修改为“SELECT * FROM travelrecord;”即把表示schema的字符去掉，避免发送到后端数据库执行报ERROR 1146：Table 'testdb.travelrecord' doest't exist.不过，即使设置该值为 true ，如果语句所带的是并非是 schema 指定的名字，例如：**select * from db1.travelrecord;** 那么 MyCat 并不会删除 db1 这个字段，如果没有定义该库的话则会报错，所以在提供 SQL语句的最好是不带这个字段。\n\n###### 5.2.5.2.3 sqlMaxLimit\n\n当该值设置为某个数值时。每条执行的 SQL 语句，如果没有加上 limit 语句，MyCat 也会自动的加上所对应的值。例如设置值为 100，执行**select * from TESTDB.travelrecord;**的效果为和执行**select * from TESTDB.travelrecord limit 100;**相同。\n\n设置该值的话，MyCat 默认会把查询到的信息全部都展示出来，造成过多的输出。所以，在正常使用中，还是建议加上一个值，用于减少过多的数据返回。\n\n当然 SQL 语句中也显式的指定 limit 的大小，不受该属性的约束。\n\n需要注意的是，如果运行的 schema 为非拆分库的，那么该属性不会生效。需要手动添加 limit 语句。\n\n### 5.2 分配规则\n\n![image-20201104222632963](./mycat/image-20201104222632963.png)\n![image-20201104221336437](./mycat/image-20201104221336437.png)\n\n-   范围分片：根据某个字设置auto-sharding-long，如果这个primaryKey超出了范围会报错\n\n-   取模分片：\n\n-   ER分片（将父子表有关联的数据放在一个data-node里面）\n\n    ![image-20201104221659540](./mycat/image-20201104221659540.png)\n\n-   全局表：所有dataNode存储相同的数据，查询的时候是随机查询某个表 type=global，查询的时候随机从某个datanode获取\n\n-   非分片表：只在某个dataNode上存储,指定一个dataNode并且不写分片规则\n\n-   单库分表：有个bug在实际数据库中必须要创建mycat中一摸一样的数据表，而且truncat的时候要现在dataNode先删除，才能删除的掉mycat的数据\n\n\n\n### 5.3 全局ID\n\n![image-20201104223246735](./mycat/image-20201104223246735.png)\n\n-   文件方式---0\n-   数据库方式---1\n-   本地时间戳----2\n-   ZK方式----3\n\n## 6. Mycat分片策略详解\n\n连续分片与离散分片\n\n![image-20201107201442912](./mycat/image-20201107201442912.png)\n\n**连续分片**：\n\n-   范围分片\n-   日期/事件\n\n\n\n缺点：\n\n-   存在数据热点的可能性\n-   并发访问能力受限于单一或少量DataNode（访问集中），并不能分摊数据库访问的压力\n\n**离散**：\n\n-   取模（partioncount 的总数必须和分片总数相同）\n\n-   枚举\n\n-   一致性哈希(qs-murmur)\n\n-   固定分片哈希\n\n    -   partitionCount: 2, 1表示有三个分片必须和节点数量一致，否则会报错，前面两个一样长\n\n    -   partitionLength: 256, 512表示长度为256和512\n\n    -   综合在一起就是前面2个分片长度为256， 最后一个为512，结果如下图所示（注意partitionCount和partitionLength的数量一定要一致）\n\n    -   ![image-20201219103201836](./mycat/image-20201219103201836.png)\n\n        ![image-20201219102742172](./mycat/image-20201219102742172.png)\n\n-   取模范围(sharting-by-pattern)：先取模PartitionByPattern后分片\n\n-   范围取模: PartitionByRangeMod(partition-rane-mod.txt)\n\n    -   ```txt\n        0-2000=1\t\t#范围在2000以内的在第一个节点（取模的结果还是本身）\n        2001-4000=2\t\t#范围在2001到4000以内的再模2，结果为0在第一个节点，结果为1在第三个节点\n        ```\n\n-   其他\n\n优点：\n\n-   并发访问能力增强（负载到不同的节点）\n-   范围条件查询性能提升（并行计算）\n\n缺点：\n\n-   数据扩容比较困难，设计到数据迁移问题\n-   数据库连接消耗比较多\n\n分片策略的选择：\n\n1） 确定分片表\n\n2） 找出分片键\n\n3） 考虑容量、增速、业务用户\n\n如果在查询语句中没有携带分片建，那么mycat会将sql发布到所有的节点上\n\n## 7. Mycat扩缩容\n\n### 7.1 在线不停机扩缩容（双写）\n\n![image-20201107205855474](./mycat/image-20201107205855474.png)\n\n\n\n### 7.2 离线扩缩容\n\n#### 7.2.1Mysql Dump\n\n```shell\nmysqldump -uroot -p123456 -h127.0.0.1 -p3306 -c -t --skip-extended-insert 数据库名称 > mysql.11.11.sql\n```\n\n#### 7.2.2 Mycat自带工具\n\n1.  mycat所在环境安装mysql客户端程序\n2.  mycat的lib目录下添加mysql的jdbc驱动包（mysql-connector-java-5.7.1.jar）\n3.  对扩容缩容的表所有节点数据进行备份\n4.  复制schema.xml、rule.xml并重命名为newSchema.xml、newRule.xml\n5.  修改newSchema.xml和newRule.xml配置文件为扩容缩容后的参数\n6.  在conf/migrateTable.properties配置文件中配置分片库和分片表如：imall=table_test1\n7.  dataMigrate.sh配置mysqldump路径\n8.  停止mycat服务\n9.  执行bin/dataMigrate.sh脚本（不能用openjdk）\n10.  替换schema.xml、rule.xml\n\n\n\n**注意事项：**\n\n-   保证分片表迁移数据前后路由规则一致（取模-->取模）\n-   保证分片表歉意数据前后分片字段一致\n-   全局表将被忽略\n-   不要将非分片表配置到migrateTables.properties文件中\n-   暂时只支持分片表使用Mysql作为数据源的扩容缩容\n\n## 8. Mycat读写分离\n\n### 8.1 主从复制\n\n1.  数据备份回复\n2.  负载均衡（读写分离）\n3.  高可用HA\n\n### 8.2 主从复制形式;\n\n![image-20201107212552852](./mycat/image-20201107212552852.png)\n\n#### binlog(Binary log 二进制日志)\n\n```sql\n--查看binglog: SHOW binlog events in 'mysql-bin.000001'\n--show variables like 'max_blog_max'\n```\n\n#### binlog配置\n\n-   STATEMENT: 记录每一天修改数据的sql语句（减少日志量，节约IO）\n-   ROW: 记录哪条数据被修改了，修改成什么样子了（5.7以后默认）\n-   MIXED: 结合两种方式，一般语句用STATEMENT,函数之类的使用ROW\n\n**binlog**格式（mysql-bin.00001等）\n\n**查看binlog**\n\n```sql\nshow binlog events in 'mysql-bin.00001';\n```\n\n### 主从复制原理\n\nSQL Thread是单线程的， 这也是所有的主从复制延迟的原因，那么relay log接受master节点的sql语句主要是用于缓冲\n\n![image-20201107213638624](./mycat/image-20201107213638624.png)\n\n### mycat读写分离配置\n\n![image-20201107213859155](./mycat/image-20201107213859155.png)\n\n### 8.5 Mycat注解（hint）\n\n注解用法：\n\n```tex\n\t/*!mycat:sql=注解sql语句*/真正执行的SQL\n\t\n\t比如说在mycat上创建表无法创建成功，可以使用注解\n\t/*!mycat:sql=select * from table_1 where id = 1*/create table test2(id int);\n\t主要注解sql可以确认mycat可以路由到子结点上，就可以执行后面的真正执行的sql语句\n```\n\n注解用途：\n\n-   跨库关联查询\n-   DDL或存储过程\n-   自定义分片\n-   读写分离\n\n### 分布式事务\n\n基于XA协议的两阶段提交\n\n![image-20201107215437139](./mycat/image-20201107215437139.png)\n\n#### XA角色\n\n![image-20201107215605251](./mycat/image-20201107215605251.png)\n\n#### XA实现\n\n![image-20201107220049532](./mycat/image-20201107220049532.png)\n\n\n\n## 9. Mycat核心流程\n\n### 9.1 架构图\n\n![image-20201220170713526](./mycat/image-20201220170713526.png)\n\n### 9.2 启动流程\n\n1.  MycatServer启动，解析配置文件，包括服务器、分片规则等\n2.  创建工作线程，建立前端连接和后端连接\n\n### 9.3 执行SQL流程\n\n1.  前端连接接收mysql命令\n2.  解析MySQL，mycat用的是Druid的DruidParser\n3.  获取路由\n4.  改写MySQL，例如两个条件在两个节点上，则变成两条单独的sql\n5.  与后端数据库建立连接\n6.  发送sql语句到MySQL执行\n7.  获取返回结果\n8.  处理返回结果，例如排序、计算等等\n9.  返回给客户端\n\n\n\n## Mycat高可用\n\n![image-20201220172406074](./mycat/image-20201220172406074.png)\n\n","source":"_posts/2021/07/mycat.md","raw":"---\ntitle: mycat学习\ntags: mycat\ncategories: 中间件\ncomments: true\nabbrlink: 754\ndate: 2021-07-23 16:16:49\ntranslate_title: mycat_learning\n---\n# Mycat(分库分表中间件)\n\n## 1. 数据库优化策略\n\n1.  重启：释放资源\n2.  SQL与索引\n3.  表与存储引擎（字段类型选择，长度设置，是否需要分表、分区）\n4.  数据库与应用架构（考虑使用缓存服务器，减轻是数据库压力；可以数据库分布式，读写分离，主从复制）\n5.  数据库与操作系统配置（修改mysql配置，使用单独服务器部署数据库）\n6.  硬件\n\n## 2. 数据库演化\n\n根据业务需要、数据量变化，随之而来的数据库的变化\n\n1.  数据库与应用部署在同一台服务器\n![mycat](./mycat/image-20201104204430049.png)\n2.  单体应用架构，单数据库（数据库服务器和应用服务器分离，但是业务系统越做越大）\n    ![mycat](./mycat/image-20201104204624925.png)\n\n3.  多应用单数据库（应用解耦）\n    ![mycat](./mycat/image-20201104204933409.png)\n\n4.  多应用 独立数据库\n    ![mycat](./mycat/image-20201104205054233.png)\n\n5.  但应用多数据库(分表)\n    ![mycat](./mycat/image-20201104205319372.png)\n\n## 3. 如何分库分表\n![mycat](./mycat/image-20201104205653611.png)\n\n-   垂直切分\n\n    -   单库\n        ![mycat](./mycat/image-20201104205756827.png)\n\n    -   多库\n        ![mycat](./mycat/image-20201104210008624.png)\n\n-   水平切分\n\n    -   按照月分表或者分成实时、历史表等\n        ![mycat](./mycat/image-20201104210117373.png)\n\n    -   分成多库\n        ![mycat](./mycat/image-20201104210416994.png)\n\n## 4. 分库分表带来的问题\n\n1.  跨库关联查询\n\n    -   增加冗余字段（违反了第三范式：表中的所有数据元素不但要能唯一地被主关键字所标识,而且它们之间还必须相互独立,不存在其他的函数关系）\n    -   跨数据库的同步（canal、Mq（最好）、ETL、kettle、ogg）(在某个库中同步其他数据库中表的数据，避免跨库关联查询)\n    -   全局表(广播表)：比如行政区划表，所有的系统都是一样的；\n    -   API\n\n2.  分布式事务\n\n    -   Local\n\n3.  排序、翻页、函数计算\n\n    -\n\n4.  全局主键\n\n    -   雪花算法leaf\n    -   redis(int 类型可以设置incby)\n    -   ZookKeeper\n    -   uuid(数据过长， 影响索引存储)\n\n5.  多数据源连接（动态数据源）\n    ![mycat](./mycat/image-20201104213343204.png)\n\n## 5. Mycat分库分表中间件\n\n**官网地址**：http://www.mycat.org.cn/\n\n从阿里cobar升级而来，完全实现了mysql协议，可以当作一个mysql数据库来使用，通过JDBC支持其他数据库实现分库分表，解决了**多表join、分布式事务、全局序列号、翻页查询、函数计算**的问题\n\n*   一个彻底开源的，面向企业应用开发的大数据库集群\n*   支持事务、ACID、可以替代MySQL的加强版数据库\n*   一个可以视为MySQL集群的企业级数据库，用来替代昂贵的Oracle集群\n*   一个融合内存缓存技术、NoSQL技术、HDFS大数据的新型SQL Server\n*   结合传统数据库和新型分布式数据仓库的新一代企业级数据库产品\n*   一个新颖的数据库中间件产品\n\n华为云的DDM其实也是根据mycat做的\n\n### 5.1 核心概念\n\n![image-20201104215015366](./mycat/image-20201104215015366.png)\n\n### 5.2 Mycat安装与配置\n\n#### 5.2.1 Mycat安装\n\n从官网下载安装版本，解压到文件(官网建议安装在/usr/local/Mycat)后页面如下图所示：\n![image-20201127094703483](./mycat/image-20201127094703483.png)\n\n目录解释如下：\n\n- **bin：**存放window版和linux版本除了提供封装成服务的版本之外，也提供了nowrap的shell脚本命令，方便选择和修改；Linux下运行:./mycat console， 首先要chmod + x*;(mycat支持的命令console、start、stop、restart、status、dump)\n- **conf：**server.xml是mycat服务器参数调整和用户授权的配置文件，schema.xml是逻辑库定义和表以及分片定义的配置文件，rule.xml是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改，需要重启mycat或者通过9066端口reload\n- **lib:**主要存放mycat依赖的一些jar文件\n- **logs:**日志存放在mycat.log中，每天一个文件，日志的配置是在conf/log4j.xml中，根据自己的需要，可以调整输出级别为debug，方便排查问题；注意Linux下部署安装mysql，默认不忽略，需要手动到/etc/my.cnf下配置**lower_case_table_names=1**使Linux环境下MySQL忽略表明大小写，否则使用mycat的时候会提示找不到表的错误\n\n#### 5.2.2 服务启动与配置\n\nMycat在Linux中部署启动时，首先需要在Linux系统的环境变量中配置MYCAT_HOE,操作方式如下：\n\n1. vi /etc/profile，在系统环境变量文件中增加MYCAT_HOME=/usr/lib/tools/mycat\n   ![image-20201127103212598](./mycat/image-20201127103212598.png)\n\n2. 执行 source/etc/profile命令，使环境变量生效。如果是多台Linux系统中组件Mycat集群，那需要在mycat Server所在的服务器配置对其他ip和主机名的映射，配置方式如下：\n   ![image-20201127104159580](./mycat/image-20201127104159580.png)\n\n   经过以上两个步骤的配置，就可以到/usr/lib/tools/mycat/bin目录下执行./mycat start启动mycat服务；使用mycat status查看mycat的运行状态；如下图\n   ![image-20201128135953635](./mycat/image-20201128135953635.png)\n\n##### 5.2.2.1 安装遇到的问题\n\n1. schema TESTDB refered by user root is not exist!![image-20201215152125176](./mycat/image-20201215152125176.png)\n\n   解决方式：\n\n    ```xml\n    <!--在conf/server.xml文件中schemas中配置schema.xml文件中的schema的name值-->\n    \n    <!--user中的name为mycat服务的用户名-->\n     <user name=\"root\" defaultAccount=\"true\">\n         <!--这个是mycat服务连接的密码-->\n          <property name=\"password\">123456</property>\n          <property name=\"schemas\">xiaoyuge</property>\n    </user>\n    ```\n\n\n\n#### 5.2.3日志分析\n\nmycat的日志文件配置为MYCAT_HOME/conf/log4j.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n    <log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\n    <appender name=\"ConsoleAppender\" class=\"org.apache.log4j.ConsoleAppender\">\n    <layout class=\"org.apache.log4j.PatternLayout\">\n    <param name=\"ConversionPattern\" value=\"%d{MM-dd HH:mm:ss.SSS} %5p [%t] (%F:%L) -%m%n\" />\n\t</layout>\n\t</appender>\n\t<appender name=\"FILE\" class=\"org.apache.log4j.RollingFileAppender\">\n        <!--日志文件存放的目录-->\n        <param name=\"file\" value=\"${MYCAT_HOME}/logs/mycat.log\" />\n        <param name=\"Append\" value=\"false\"/>\n        <param name=\"MaxFileSize\" value=\"10000KB\"/>\n        <param name=\"MaxBackupIndex\" value=\"10\"/>\n        <param name=\"encoding\" value=\"UTF-8\" />\n        <layout class=\"org.apache.log4j.PatternLayout\">\n        <param name=\"ConversionPattern\" value=\"%d{MM/dd HH:mm:ss.SSS} %5p [%t] (%F:%L) -%m%n\" />\n\t</layout>\n\t</appender>\n\t<root>\n        <!--level是日志级别，生产环境下加以将级别调整为info/ware，如果是研究测试，碰到异常设置为debug-->\n\t\t<level value=\"debug\" />\n\t\t<appender-ref ref=\"ConsoleAppender\" />\n\t</root>\n</log4j:configuration>\n```\n\n##### 5.2.3.1 warpper日志\n\n目前mycat的启动时经过warpper封装成启动脚本，所以日志也会有其相关的日志文件：${MYCAT_HOME}/logs/warapper.log， 在启动的时候如果系统环境配置错误或缺少配置时，导致mycat无法启动，可以通过查看wrapper.log查看具体错误原因。\n\n1. 正常启动\n\n    ```verilog\n    STATUS | wrapper | 2015/04/12 15:05:00 | --> Wrapper Started as Daemon\n    STATUS | wrapper | 2015/04/12 15:05:00 | Launching a JVM...\n    INFO | jvm 1 | 2015/04/12 15:05:01 | Wrapper (Version 3.2.3) http://wrapper.tanukisoftware.org\n    INFO | jvm 1 | 2015/04/12 15:05:01 | Copyright 1999-2006 Tanuki Software, Inc. AllRights Reserved.\n    INFO | jvm 1 | 2015/04/12 15:05:01 |\n    INFO | jvm 1 | 2015/04/12 15:05:01 | log4j 2015-04-12 15:05:01 [./conf/log4j.xml]load completed.\n    INFO | jvm 1 | 2015/04/12 15:05:02 | MyCAT Server startup successfully. see logs in logs/mycat.log\n    ```\n\n2. 启动异常\n\n    ```verilog\n    STATUS | wrapper | 2015/02/14 01:43:44 | --> Wrapper Started as Daemon\n    STATUS | wrapper | 2015/02/14 01:43:44 | Launching a JVM...\n    INFO | jvm 1 | 2015/02/14 01:43:45 | Error: Exception thrown by the agent : java.rmi.server.ExportException:\n    Port already in use: 1984; nested exception is:\n    INFO | jvm 1 | 2015/02/14 01:43:45 | java.net.BindException: Address already in use\n    ERROR | wrapper | 2015/02/14 01:43:45 | JVM exited while loading the application.\n        \n    # 日志显示异常原因为 java.net.BindException: Address already in use,也就是端口占用，很有可能是原有服\n    务未停止，或者 Mycat 默认端口被其他程序占用，正常启动成功后会有 mycat.log 日志，如果服务未启动成功不会有对应的日志。 也可以去修改 conf 文件夹里的 wrapper.conf 里的 wrapper.java.additional.7=-Dcom.sun.management.jmxremote.port=1984，server.xml 的<property name=\"serverPort\">8066</property>和\n    <property name=\"managerPort\">9066</property>，这方法适\n    合一台机器上两个 mycat 或者 1984,8066,9066 端口被其它应用占用的情况\n    ```\n\n\n\n##### 5.2.3.2 mycat日志\n\n\n\n#### 5.2.4 mycat防火墙设置\n\n白名单和SQL黑名单说明：\n\n```xml\n<!--在 server.xml 中配置：-->\n<firewall>\n     <!--ip 白名单列表，可以配置多个-->\n    <whitehost>\n        <!--ip 白名单 用户对应的可以访问的 ip 地址-->\n    \t<host user=\"mycat\" host=\"127.0.0.1\"></host> \n    </whitehost>\n     <!-是否开启检查黑名单列表-->\n    <blacklist check=\"true\">\n        <!--黑名单允许的 权限 后面为默认-->\n    \t<property name=\"selelctAllow\">false</property>\n    </blacklist>\n</firewall>\n```\n\n**黑名单配置拦截明细如下：**\n\n|         配置项         | 缺省值 |                             描述                             |\n| :--------------------: | :----: | :----------------------------------------------------------: |\n|     rollbackAllow      |  true  | 是否允许执行 roll back 操作,如果把 selectIntoAllow、deleteAllow、updateAllow、insertAllow、mergeAllow 都设置为 false，这就是一个只读数据源了。 |\n|      selectAllow       |  true  |                    是否运行执行SELECT语句                    |\n|  selectAllColumnAllow  |  true  | 是否允许执行 SELECT * FROM T 这样的语句。如果设置为 false，不允许执行 select * from t，但 select * from (select id, name from t) a。这个选项是防御程序通过调用 select *获得数据表的结构信息 |\n|    selectIntoAllow     |  true  |               SELECT 查询中是否允许 INTO 字句                |\n|      deleteAllow       |  true  |                   是否允许执行 DELETE 语句                   |\n|      updateAllow       |  true  |                   是否允许执行 UPDATE 语句                   |\n|      insertAllow       |  true  |                   是否允许执行 INSERT 语句                   |\n|      replaceAllow      |  true  |                  是否允许执行 REPLACE 语句                   |\n|       mergeAllow       |  true  |       是否允许执行 MERGE 语句，这个只在 Oracle 中有用        |\n|       callAllow        |  true  |          是否允许通过 jdbc 的 call 语法调用存储过程          |\n|        setAllow        |  true  |                    是否允许使用 SET 语法                     |\n|     truncateAllow      |  true  |        truncate 语句是危险，缺省打开，若需要自行关闭         |\n|    createTableAllow    |  true  |                        是否允许创建表                        |\n|    alterTableAllow     |  true  |                是否允许执行 Alter Table 语句                 |\n|     dropTableAllow     |  true  |                        是否允许修改表                        |\n|      commentAllow      | false  | 是否允许语句中存在注释，Oracle 的用户不用担心，Wall 能够识别 hints和注释的区别 |\n| noneBaseStatementAllow | false  | 是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项 就能够屏蔽 DDL。 |\n|  multiStatementAllow   | false  |              是否允许一次执行多条语句，缺省关闭              |\n|        useAllow        |  true  |           是否允许执行 mysql 的 use 语句，缺省打开           |\n|     describeAllow      |  true  |        是否允许执行 mysql 的 describe 语句，缺省打开         |\n|       showAllow        |  true  |          是否允许执行 mysql 的 show 语句，缺省打开           |\n|      commitAllow       |  true  |                   是否允许执行 commit 操作                   |\n\n**拦截配置=-永真条件：**\n\n|           配置项            | 缺省值 |                             描述                             |\n| :-------------------------: | :----: | :----------------------------------------------------------: |\n|  selectWhereAlwayTrueCheck  |  true  |       检查 SELECT 语句的 WHERE 子句是否是一个永真条件        |\n| selectHavingAlwayTrueCheck  |  true  |       检查 SELECT 语句的 HAVING 子句是否是一个永真条件       |\n|  deleteWhereAlwayTrueCheck  |  true  |       检查 DELETE 语句的 WHERE 子句是否是一个永真条件        |\n|    deleteWhereNoneCheck     | false  | 检查 DELETE 语句是否无 where 条件，这是有风险的，但不是 SQL 注入类型的风险 |\n|  updateWhereAlayTrueCheck   |  true  |       检查 UPDATE 语句的 WHERE 子句是否是一个永真条件        |\n|    updateWhereNoneCheck     | false  | 检查 UPDATE 语句是否无 where 条件，这是有风险的，但不是SQL 注入类型的风险 |\n| conditionAndAlwayTrueAllow  | false  |    检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永真条件    |\n| conditionAndAlwayFalseAllow | false  |    检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永假条件    |\n|   conditionLikeTrueAllow    |  true  |   检查查询条件(WHERE/HAVING 子句)中是否包含 LIKE 永真条件    |\n\n**其他拦截配置：**\n\n|          配置项           | 缺省值 |                             描述                             |\n| :-----------------------: | :----- | :----------------------------------------------------------: |\n|  selectIntoOutfileAllow   | false  | SELECT ... INTO OUTFILE 是否允许，这个是 mysql 注入攻击的常见手段，缺省是禁止的 |\n|     selectUnionCheck      | true   |                      检测 SELECT UNION                       |\n|     selectMinusCheck      | true   |                      检测 SELECT MINUS                       |\n|     selectExceptCheck     | true   |                      检测 SELECT EXCEPT                      |\n|   selectIntersectCheck    | true   |                    检测 SELECT INTERSECT                     |\n|     mustParameterized     | false  | 是否必须参数化，如果为 True，则不允许类似 WHERE ID = 1 这种不参数化的 SQL |\n|     strictSyntaxCheck     | true   | 是否进行严格的语法检测，Druid SQL Parser 在某些场景不能覆盖所有的，SQL 语法，出现解析 SQL 出错，可以临时把这个选项设置为 false，同时把 SQL 反馈给 Druid 的开发者 |\n|    conditionOpXorAllow    | false  | 查询条件中是否允许有 XOR 条件。XOR 不常用，很难判断永真或者永假，缺省不允许。 |\n|  conditionOpBitwseAllow   | true   |               查询条件中是否允许有\"&\"、\"~\"、\"                |\n| conditionDoubleConstAllow | false  |           查询条件中是否允许连续两个常量运算表达式           |\n|        minusAllow         | true   |  是否允许 SELECT * FROM A MINUS SELECT * FROM B 这样的语句   |\n|      intersectAllow       | true   | 是否允许 SELECT * FROM A INTERSECT SELECT * FROM B 这样的语句 |\n|   constArithmeticAllow    | true   | 拦截常量运算的条件，比如说 WHERE FID = 3 - 1，其中\"3 - 1\"是常量运算表达式。 |\n|      limitZeroAllow       | false  |                 是否允许 limit 0 这样的语句                  |\n\n**禁用对象检测配置：**\n\n|     配置项     | 缺省值 |                             描述                             |\n| :------------: | :----: | :----------------------------------------------------------: |\n|   tableCheck   |  true  |                    检测是否使用了禁用的表                    |\n|  schemaCheck   |  true  |                 检测是否使用了禁用的 Schema                  |\n| functionCheck  |  true  |                   检测是否使用了禁用的函数                   |\n|  objectCheck   |  true  |                  检测是否使用了“禁用对对象”                  |\n|  variantCheck  |  true  |                  检测是否使用了“禁用的变量”                  |\n| readOnlyTables |   空   | 指定的表只读，不能够在 SELECT INTO、DELETE、UPDATE、INSERT、MERGE 中作为\"被修改表\"出现 |\n\n#### 5.2.5 mycat配置文件\n\n##### 5.2.5.1 schema.xml配置\n\nschema.xml作为mycat中重要的配置文件之一，管理者mycat的逻辑库、表、分片规则、DataNode以及DataSource。\n\n##### 5.2.5.2 scheme标签\n\n```xml\n<schema name=\"TESTDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\"></schema>\n```\n\nschema标签用于定义mycat实例中的逻辑库，mycat可以由多个逻辑库，每个逻辑库都有自己的相关配置，可以使用schema标签来划分这些不同的逻辑库。如果不配置schema标签，所有的表配置，会属于同一个默认的逻辑库。\n\n```xml\n<!--逻辑库TESTDB-->\n<schema name=\"TESTDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\">\n\t<table name=\"travelrecord\" dataNode=\"dn1,dn2,dn3\" rule=\"auto-sharding-long\" ></table>\n</schema>\n<!--USERDB-->\n<schema name=\"USERDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\">\n\t<table name=\"company\" dataNode=\"dn10,dn11,dn12\" rule=\"auto-sharding-long\" ></table>\n</schema>\n<!--\n\t逻辑库的概念和MySQL数据库中的database概念相同，我们在查询这两个不同的逻辑库中表的时候需要切换到该逻辑库下才可以查询到所需要的表\n-->\n```\n\n在server.xml中可以配置不同的用户能够使用的schema\n\n```xml\n        <user name=\"root\" defaultAccount=\"true\">\n                <property name=\"password\">root</property>\n                <property name=\"schemas\">TESTDB</property>\n                <property name=\"defaultSchema\">TESTDB</property>\n                <!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 -->\n\n                <!-- 表级 DML 权限设置 -->\n                <!--\n                <privileges check=\"false\">\n                        <schema name=\"TESTDB\" dml=\"0110\" >\n                                <table name=\"tb01\" dml=\"0000\"></table>\n                                <table name=\"tb02\" dml=\"1111\"></table>\n                        </schema>\n                </privileges>\n                 -->\n        </user>\n\n        <user name=\"user\">\n                <property name=\"password\">user</property>\n                <property name=\"schemas\">TESTDB</property>\n                <property name=\"readOnly\">true</property>\n                <property name=\"defaultSchema\">TESTDB</property>\n        </user>\n\n```\n![](./mycat/image-20201129110838590.png)\n\nschema标签的相关属性：\n\n|     属性名     |     值     | 数量限制 |\n| :------------: | :--------: | :------: |\n|    dataNode    | 任意string | （0..1） |\n| checkSQLschema |  Boolean   |  （1）   |\n|  sqlMaxLimit   |  Integer   |  （1）   |\n\n###### 5.2.5.2.1  dataNode\n\n该属性用于绑定逻辑库到某个具体的database上，1.3版本如果配置了dataNode,则不可以配置分片表，1.4可以配置默认分片，只需要配置需要分片的表即可，具体配置如下：\n\n```xml\n<!--1.3版本配置--><schema name=\"USERDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\" dataNode=\"dn1\"><!—里面不能配置任何表--></schema><!--1.4版本配置--><schema name=\"USERDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\" dataNode=\"dn2\"><!—配置需要分片的表-->\t<table name=“tuser” dataNode=”dn1”/></schema><!-- \t那么现在tuser就绑定到dn1所配置的具体database上，可以直接访问这个database，没有配置的表则会走默认的节点dn2，这里注意没有配置在分片里面的表工具查看无法显示，但是可以正常使用。-->\n```\n\n###### 5.2.5.2.2 checkSQLschema\n\n当改制设置为true时，我们执行“SELECT * FROM TESTDB.travelrecord；”则mycat会把语句修改为“SELECT * FROM travelrecord;”即把表示schema的字符去掉，避免发送到后端数据库执行报ERROR 1146：Table 'testdb.travelrecord' doest't exist.不过，即使设置该值为 true ，如果语句所带的是并非是 schema 指定的名字，例如：**select * from db1.travelrecord;** 那么 MyCat 并不会删除 db1 这个字段，如果没有定义该库的话则会报错，所以在提供 SQL语句的最好是不带这个字段。\n\n###### 5.2.5.2.3 sqlMaxLimit\n\n当该值设置为某个数值时。每条执行的 SQL 语句，如果没有加上 limit 语句，MyCat 也会自动的加上所对应的值。例如设置值为 100，执行**select * from TESTDB.travelrecord;**的效果为和执行**select * from TESTDB.travelrecord limit 100;**相同。\n\n设置该值的话，MyCat 默认会把查询到的信息全部都展示出来，造成过多的输出。所以，在正常使用中，还是建议加上一个值，用于减少过多的数据返回。\n\n当然 SQL 语句中也显式的指定 limit 的大小，不受该属性的约束。\n\n需要注意的是，如果运行的 schema 为非拆分库的，那么该属性不会生效。需要手动添加 limit 语句。\n\n### 5.2 分配规则\n\n![image-20201104222632963](./mycat/image-20201104222632963.png)\n![image-20201104221336437](./mycat/image-20201104221336437.png)\n\n-   范围分片：根据某个字设置auto-sharding-long，如果这个primaryKey超出了范围会报错\n\n-   取模分片：\n\n-   ER分片（将父子表有关联的数据放在一个data-node里面）\n\n    ![image-20201104221659540](./mycat/image-20201104221659540.png)\n\n-   全局表：所有dataNode存储相同的数据，查询的时候是随机查询某个表 type=global，查询的时候随机从某个datanode获取\n\n-   非分片表：只在某个dataNode上存储,指定一个dataNode并且不写分片规则\n\n-   单库分表：有个bug在实际数据库中必须要创建mycat中一摸一样的数据表，而且truncat的时候要现在dataNode先删除，才能删除的掉mycat的数据\n\n\n\n### 5.3 全局ID\n\n![image-20201104223246735](./mycat/image-20201104223246735.png)\n\n-   文件方式---0\n-   数据库方式---1\n-   本地时间戳----2\n-   ZK方式----3\n\n## 6. Mycat分片策略详解\n\n连续分片与离散分片\n\n![image-20201107201442912](./mycat/image-20201107201442912.png)\n\n**连续分片**：\n\n-   范围分片\n-   日期/事件\n\n\n\n缺点：\n\n-   存在数据热点的可能性\n-   并发访问能力受限于单一或少量DataNode（访问集中），并不能分摊数据库访问的压力\n\n**离散**：\n\n-   取模（partioncount 的总数必须和分片总数相同）\n\n-   枚举\n\n-   一致性哈希(qs-murmur)\n\n-   固定分片哈希\n\n    -   partitionCount: 2, 1表示有三个分片必须和节点数量一致，否则会报错，前面两个一样长\n\n    -   partitionLength: 256, 512表示长度为256和512\n\n    -   综合在一起就是前面2个分片长度为256， 最后一个为512，结果如下图所示（注意partitionCount和partitionLength的数量一定要一致）\n\n    -   ![image-20201219103201836](./mycat/image-20201219103201836.png)\n\n        ![image-20201219102742172](./mycat/image-20201219102742172.png)\n\n-   取模范围(sharting-by-pattern)：先取模PartitionByPattern后分片\n\n-   范围取模: PartitionByRangeMod(partition-rane-mod.txt)\n\n    -   ```txt\n        0-2000=1\t\t#范围在2000以内的在第一个节点（取模的结果还是本身）\n        2001-4000=2\t\t#范围在2001到4000以内的再模2，结果为0在第一个节点，结果为1在第三个节点\n        ```\n\n-   其他\n\n优点：\n\n-   并发访问能力增强（负载到不同的节点）\n-   范围条件查询性能提升（并行计算）\n\n缺点：\n\n-   数据扩容比较困难，设计到数据迁移问题\n-   数据库连接消耗比较多\n\n分片策略的选择：\n\n1） 确定分片表\n\n2） 找出分片键\n\n3） 考虑容量、增速、业务用户\n\n如果在查询语句中没有携带分片建，那么mycat会将sql发布到所有的节点上\n\n## 7. Mycat扩缩容\n\n### 7.1 在线不停机扩缩容（双写）\n\n![image-20201107205855474](./mycat/image-20201107205855474.png)\n\n\n\n### 7.2 离线扩缩容\n\n#### 7.2.1Mysql Dump\n\n```shell\nmysqldump -uroot -p123456 -h127.0.0.1 -p3306 -c -t --skip-extended-insert 数据库名称 > mysql.11.11.sql\n```\n\n#### 7.2.2 Mycat自带工具\n\n1.  mycat所在环境安装mysql客户端程序\n2.  mycat的lib目录下添加mysql的jdbc驱动包（mysql-connector-java-5.7.1.jar）\n3.  对扩容缩容的表所有节点数据进行备份\n4.  复制schema.xml、rule.xml并重命名为newSchema.xml、newRule.xml\n5.  修改newSchema.xml和newRule.xml配置文件为扩容缩容后的参数\n6.  在conf/migrateTable.properties配置文件中配置分片库和分片表如：imall=table_test1\n7.  dataMigrate.sh配置mysqldump路径\n8.  停止mycat服务\n9.  执行bin/dataMigrate.sh脚本（不能用openjdk）\n10.  替换schema.xml、rule.xml\n\n\n\n**注意事项：**\n\n-   保证分片表迁移数据前后路由规则一致（取模-->取模）\n-   保证分片表歉意数据前后分片字段一致\n-   全局表将被忽略\n-   不要将非分片表配置到migrateTables.properties文件中\n-   暂时只支持分片表使用Mysql作为数据源的扩容缩容\n\n## 8. Mycat读写分离\n\n### 8.1 主从复制\n\n1.  数据备份回复\n2.  负载均衡（读写分离）\n3.  高可用HA\n\n### 8.2 主从复制形式;\n\n![image-20201107212552852](./mycat/image-20201107212552852.png)\n\n#### binlog(Binary log 二进制日志)\n\n```sql\n--查看binglog: SHOW binlog events in 'mysql-bin.000001'\n--show variables like 'max_blog_max'\n```\n\n#### binlog配置\n\n-   STATEMENT: 记录每一天修改数据的sql语句（减少日志量，节约IO）\n-   ROW: 记录哪条数据被修改了，修改成什么样子了（5.7以后默认）\n-   MIXED: 结合两种方式，一般语句用STATEMENT,函数之类的使用ROW\n\n**binlog**格式（mysql-bin.00001等）\n\n**查看binlog**\n\n```sql\nshow binlog events in 'mysql-bin.00001';\n```\n\n### 主从复制原理\n\nSQL Thread是单线程的， 这也是所有的主从复制延迟的原因，那么relay log接受master节点的sql语句主要是用于缓冲\n\n![image-20201107213638624](./mycat/image-20201107213638624.png)\n\n### mycat读写分离配置\n\n![image-20201107213859155](./mycat/image-20201107213859155.png)\n\n### 8.5 Mycat注解（hint）\n\n注解用法：\n\n```tex\n\t/*!mycat:sql=注解sql语句*/真正执行的SQL\n\t\n\t比如说在mycat上创建表无法创建成功，可以使用注解\n\t/*!mycat:sql=select * from table_1 where id = 1*/create table test2(id int);\n\t主要注解sql可以确认mycat可以路由到子结点上，就可以执行后面的真正执行的sql语句\n```\n\n注解用途：\n\n-   跨库关联查询\n-   DDL或存储过程\n-   自定义分片\n-   读写分离\n\n### 分布式事务\n\n基于XA协议的两阶段提交\n\n![image-20201107215437139](./mycat/image-20201107215437139.png)\n\n#### XA角色\n\n![image-20201107215605251](./mycat/image-20201107215605251.png)\n\n#### XA实现\n\n![image-20201107220049532](./mycat/image-20201107220049532.png)\n\n\n\n## 9. Mycat核心流程\n\n### 9.1 架构图\n\n![image-20201220170713526](./mycat/image-20201220170713526.png)\n\n### 9.2 启动流程\n\n1.  MycatServer启动，解析配置文件，包括服务器、分片规则等\n2.  创建工作线程，建立前端连接和后端连接\n\n### 9.3 执行SQL流程\n\n1.  前端连接接收mysql命令\n2.  解析MySQL，mycat用的是Druid的DruidParser\n3.  获取路由\n4.  改写MySQL，例如两个条件在两个节点上，则变成两条单独的sql\n5.  与后端数据库建立连接\n6.  发送sql语句到MySQL执行\n7.  获取返回结果\n8.  处理返回结果，例如排序、计算等等\n9.  返回给客户端\n\n\n\n## Mycat高可用\n\n![image-20201220172406074](./mycat/image-20201220172406074.png)\n\n","slug":"mycat","published":1,"updated":"2022-03-27T14:06:03.312Z","layout":"post","photos":[],"link":"","_id":"cl424hx6s006lad5idxgk5atn","content":"<h1 id=\"Mycat-分库分表中间件\"><a href=\"#Mycat-分库分表中间件\" class=\"headerlink\" title=\"Mycat(分库分表中间件)\"></a>Mycat(分库分表中间件)</h1><h2 id=\"1-数据库优化策略\"><a href=\"#1-数据库优化策略\" class=\"headerlink\" title=\"1. 数据库优化策略\"></a>1. 数据库优化策略</h2><ol>\n<li> 重启：释放资源</li>\n<li> SQL与索引</li>\n<li> 表与存储引擎（字段类型选择，长度设置，是否需要分表、分区）</li>\n<li> 数据库与应用架构（考虑使用缓存服务器，减轻是数据库压力；可以数据库分布式，读写分离，主从复制）</li>\n<li> 数据库与操作系统配置（修改mysql配置，使用单独服务器部署数据库）</li>\n<li> 硬件</li>\n</ol>\n<h2 id=\"2-数据库演化\"><a href=\"#2-数据库演化\" class=\"headerlink\" title=\"2. 数据库演化\"></a>2. 数据库演化</h2><p>根据业务需要、数据量变化，随之而来的数据库的变化</p>\n<ol>\n<li><p> 数据库与应用部署在同一台服务器<br><img src=\"/mycat/image-20201104204430049.png\" alt=\"mycat\"></p>\n</li>\n<li><p>单体应用架构，单数据库（数据库服务器和应用服务器分离，但是业务系统越做越大）<br> <img src=\"/mycat/image-20201104204624925.png\" alt=\"mycat\"></p>\n</li>\n<li><p>多应用单数据库（应用解耦）<br> <img src=\"/mycat/image-20201104204933409.png\" alt=\"mycat\"></p>\n</li>\n<li><p>多应用 独立数据库<br> <img src=\"/mycat/image-20201104205054233.png\" alt=\"mycat\"></p>\n</li>\n<li><p>但应用多数据库(分表)<br> <img src=\"/mycat/image-20201104205319372.png\" alt=\"mycat\"></p>\n</li>\n</ol>\n<h2 id=\"3-如何分库分表\"><a href=\"#3-如何分库分表\" class=\"headerlink\" title=\"3. 如何分库分表\"></a>3. 如何分库分表</h2><p><img src=\"/mycat/image-20201104205653611.png\" alt=\"mycat\"></p>\n<ul>\n<li><p>垂直切分</p>\n<ul>\n<li><p>单库<br>  <img src=\"/mycat/image-20201104205756827.png\" alt=\"mycat\"></p>\n</li>\n<li><p>多库<br>  <img src=\"/mycat/image-20201104210008624.png\" alt=\"mycat\"></p>\n</li>\n</ul>\n</li>\n<li><p>水平切分</p>\n<ul>\n<li><p>按照月分表或者分成实时、历史表等<br>  <img src=\"/mycat/image-20201104210117373.png\" alt=\"mycat\"></p>\n</li>\n<li><p>分成多库<br>  <img src=\"/mycat/image-20201104210416994.png\" alt=\"mycat\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-分库分表带来的问题\"><a href=\"#4-分库分表带来的问题\" class=\"headerlink\" title=\"4. 分库分表带来的问题\"></a>4. 分库分表带来的问题</h2><ol>\n<li><p>跨库关联查询</p>\n<ul>\n<li>  增加冗余字段（违反了第三范式：表中的所有数据元素不但要能唯一地被主关键字所标识,而且它们之间还必须相互独立,不存在其他的函数关系）</li>\n<li>  跨数据库的同步（canal、Mq（最好）、ETL、kettle、ogg）(在某个库中同步其他数据库中表的数据，避免跨库关联查询)</li>\n<li>  全局表(广播表)：比如行政区划表，所有的系统都是一样的；</li>\n<li>  API</li>\n</ul>\n</li>\n<li><p>分布式事务</p>\n<ul>\n<li>  Local</li>\n</ul>\n</li>\n<li><p>排序、翻页、函数计算</p>\n<p> -</p>\n</li>\n<li><p>全局主键</p>\n<ul>\n<li>  雪花算法leaf</li>\n<li>  redis(int 类型可以设置incby)</li>\n<li>  ZookKeeper</li>\n<li>  uuid(数据过长， 影响索引存储)</li>\n</ul>\n</li>\n<li><p>多数据源连接（动态数据源）<br> <img src=\"/mycat/image-20201104213343204.png\" alt=\"mycat\"></p>\n</li>\n</ol>\n<h2 id=\"5-Mycat分库分表中间件\"><a href=\"#5-Mycat分库分表中间件\" class=\"headerlink\" title=\"5. Mycat分库分表中间件\"></a>5. Mycat分库分表中间件</h2><p><strong>官网地址</strong>：<a href=\"http://www.mycat.org.cn/\">http://www.mycat.org.cn/</a></p>\n<p>从阿里cobar升级而来，完全实现了mysql协议，可以当作一个mysql数据库来使用，通过JDBC支持其他数据库实现分库分表，解决了<strong>多表join、分布式事务、全局序列号、翻页查询、函数计算</strong>的问题</p>\n<ul>\n<li>  一个彻底开源的，面向企业应用开发的大数据库集群</li>\n<li>  支持事务、ACID、可以替代MySQL的加强版数据库</li>\n<li>  一个可以视为MySQL集群的企业级数据库，用来替代昂贵的Oracle集群</li>\n<li>  一个融合内存缓存技术、NoSQL技术、HDFS大数据的新型SQL Server</li>\n<li>  结合传统数据库和新型分布式数据仓库的新一代企业级数据库产品</li>\n<li>  一个新颖的数据库中间件产品</li>\n</ul>\n<p>华为云的DDM其实也是根据mycat做的</p>\n<h3 id=\"5-1-核心概念\"><a href=\"#5-1-核心概念\" class=\"headerlink\" title=\"5.1 核心概念\"></a>5.1 核心概念</h3><p><img src=\"/mycat/image-20201104215015366.png\" alt=\"image-20201104215015366\"></p>\n<h3 id=\"5-2-Mycat安装与配置\"><a href=\"#5-2-Mycat安装与配置\" class=\"headerlink\" title=\"5.2 Mycat安装与配置\"></a>5.2 Mycat安装与配置</h3><h4 id=\"5-2-1-Mycat安装\"><a href=\"#5-2-1-Mycat安装\" class=\"headerlink\" title=\"5.2.1 Mycat安装\"></a>5.2.1 Mycat安装</h4><p>从官网下载安装版本，解压到文件(官网建议安装在/usr/local/Mycat)后页面如下图所示：<br><img src=\"/mycat/image-20201127094703483.png\" alt=\"image-20201127094703483\"></p>\n<p>目录解释如下：</p>\n<ul>\n<li><strong>bin：</strong>存放window版和linux版本除了提供封装成服务的版本之外，也提供了nowrap的shell脚本命令，方便选择和修改；Linux下运行:./mycat console， 首先要chmod + x*;(mycat支持的命令console、start、stop、restart、status、dump)</li>\n<li><strong>conf：</strong>server.xml是mycat服务器参数调整和用户授权的配置文件，schema.xml是逻辑库定义和表以及分片定义的配置文件，rule.xml是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改，需要重启mycat或者通过9066端口reload</li>\n<li>**lib:**主要存放mycat依赖的一些jar文件</li>\n<li><strong>logs:<strong>日志存放在mycat.log中，每天一个文件，日志的配置是在conf/log4j.xml中，根据自己的需要，可以调整输出级别为debug，方便排查问题；注意Linux下部署安装mysql，默认不忽略，需要手动到/etc/my.cnf下配置</strong>lower_case_table_names=1</strong>使Linux环境下MySQL忽略表明大小写，否则使用mycat的时候会提示找不到表的错误</li>\n</ul>\n<h4 id=\"5-2-2-服务启动与配置\"><a href=\"#5-2-2-服务启动与配置\" class=\"headerlink\" title=\"5.2.2 服务启动与配置\"></a>5.2.2 服务启动与配置</h4><p>Mycat在Linux中部署启动时，首先需要在Linux系统的环境变量中配置MYCAT_HOE,操作方式如下：</p>\n<ol>\n<li><p>vi /etc/profile，在系统环境变量文件中增加MYCAT_HOME=/usr/lib/tools/mycat<br><img src=\"/mycat/image-20201127103212598.png\" alt=\"image-20201127103212598\"></p>\n</li>\n<li><p>执行 source/etc/profile命令，使环境变量生效。如果是多台Linux系统中组件Mycat集群，那需要在mycat Server所在的服务器配置对其他ip和主机名的映射，配置方式如下：<br><img src=\"/mycat/image-20201127104159580.png\" alt=\"image-20201127104159580\"></p>\n<p>经过以上两个步骤的配置，就可以到/usr/lib/tools/mycat/bin目录下执行./mycat start启动mycat服务；使用mycat status查看mycat的运行状态；如下图<br><img src=\"/mycat/image-20201128135953635.png\" alt=\"image-20201128135953635\"></p>\n</li>\n</ol>\n<h5 id=\"5-2-2-1-安装遇到的问题\"><a href=\"#5-2-2-1-安装遇到的问题\" class=\"headerlink\" title=\"5.2.2.1 安装遇到的问题\"></a>5.2.2.1 安装遇到的问题</h5><ol>\n<li><p>schema TESTDB refered by user root is not exist!<img src=\"/mycat/image-20201215152125176.png\" alt=\"image-20201215152125176\"></p>\n<p>解决方式：</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--在conf/server.xml文件中schemas中配置schema.xml文件中的schema的name值--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--user中的name为mycat服务的用户名--&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;root&quot;</span> <span class=\"attr\">defaultAccount</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--这个是mycat服务连接的密码--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;schemas&quot;</span>&gt;</span>xiaoyuge<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"5-2-3日志分析\"><a href=\"#5-2-3日志分析\" class=\"headerlink\" title=\"5.2.3日志分析\"></a>5.2.3日志分析</h4><p>mycat的日志文件配置为MYCAT_HOME/conf/log4j.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">log4j</span>:configuration <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">log4j:configuration</span> <span class=\"attr\">xmlns:log4j</span>=<span class=\"string\">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConsoleAppender&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConversionPattern&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;%d&#123;MM-dd HH:mm:ss.SSS&#125; %5p [%t] (%F:%L) -%m%n&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;FILE&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.RollingFileAppender&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--日志文件存放的目录--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;MYCAT_HOME&#125;/logs/mycat.log&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Append&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;MaxFileSize&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10000KB&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;MaxBackupIndex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;encoding&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConversionPattern&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;%d&#123;MM/dd HH:mm:ss.SSS&#125; %5p [%t] (%F:%L) -%m%n&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--level是日志级别，生产环境下加以将级别调整为info/ware，如果是研究测试，碰到异常设置为debug--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;debug&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;ConsoleAppender&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-2-3-1-warpper日志\"><a href=\"#5-2-3-1-warpper日志\" class=\"headerlink\" title=\"5.2.3.1 warpper日志\"></a>5.2.3.1 warpper日志</h5><p>目前mycat的启动时经过warpper封装成启动脚本，所以日志也会有其相关的日志文件：${MYCAT_HOME}/logs/warapper.log， 在启动的时候如果系统环境配置错误或缺少配置时，导致mycat无法启动，可以通过查看wrapper.log查看具体错误原因。</p>\n<ol>\n<li><p>正常启动</p>\n <figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">00</span> | --&gt; Wrapper Started as Daemon</span><br><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">00</span> | Launching a JVM...</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> | Wrapper (Version <span class=\"number\">3</span><span class=\"variable\">.2</span><span class=\"variable\">.3</span>) http:<span class=\"comment\">//wrapper.tanukisoftware.org</span></span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> | Copyright <span class=\"number\">1999</span>-<span class=\"number\">2006</span> Tanuki Software, Inc. AllRights Reserved.</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> |</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> | log4j <span class=\"number\">2015</span>-<span class=\"number\">04</span>-<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> [./conf/log4j<span class=\"variable\">.xml</span>]load completed.</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">02</span> | MyCAT Server startup successfully. see logs in logs/mycat<span class=\"variable\">.log</span></span><br></pre></td></tr></table></figure></li>\n<li><p>启动异常</p>\n <figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">44</span> | --&gt; Wrapper Started as Daemon</span><br><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">44</span> | Launching a JVM...</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">45</span> | Error: Exception thrown by the agent : java<span class=\"variable\">.rmi</span><span class=\"variable\">.server</span><span class=\"variable\">.ExportException</span>:</span><br><span class=\"line\">Port already in <span class=\"keyword\">use</span>: <span class=\"number\">1984</span>; nested exception is:</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">45</span> | java<span class=\"variable\">.net</span><span class=\"variable\">.BindException</span>: Address already in <span class=\"keyword\">use</span></span><br><span class=\"line\">ERROR | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">45</span> | JVM exited <span class=\"keyword\">while</span> loading the application.</span><br><span class=\"line\">    </span><br><span class=\"line\"># 日志显示异常原因为 java<span class=\"variable\">.net</span><span class=\"variable\">.BindException</span>: Address already in <span class=\"keyword\">use</span>,也就是端口占用，很有可能是原有服</span><br><span class=\"line\">务未停止，或者 Mycat 默认端口被其他程序占用，正常启动成功后会有 mycat<span class=\"variable\">.log</span> 日志，如果服务未启动成功不会有对应的日志。 也可以去修改 conf 文件夹里的 wrapper<span class=\"variable\">.conf</span> 里的 wrapper<span class=\"variable\">.java</span><span class=\"variable\">.additional</span><span class=\"variable\">.7</span>=-Dcom<span class=\"variable\">.sun</span><span class=\"variable\">.management</span><span class=\"variable\">.jmxremote</span><span class=\"variable\">.port</span>=<span class=\"number\">1984</span>，server<span class=\"variable\">.xml</span> 的&lt;<span class=\"keyword\">property</span> name=<span class=\"string\">&quot;serverPort&quot;</span>&gt;<span class=\"number\">8066</span>&lt;/<span class=\"keyword\">property</span>&gt;和</span><br><span class=\"line\">&lt;<span class=\"keyword\">property</span> name=<span class=\"string\">&quot;managerPort&quot;</span>&gt;<span class=\"number\">9066</span>&lt;/<span class=\"keyword\">property</span>&gt;，这方法适</span><br><span class=\"line\">合一台机器上两个 mycat 或者 <span class=\"number\">1984</span>,<span class=\"number\">8066</span>,<span class=\"number\">9066</span> 端口被其它应用占用的情况</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"5-2-3-2-mycat日志\"><a href=\"#5-2-3-2-mycat日志\" class=\"headerlink\" title=\"5.2.3.2 mycat日志\"></a>5.2.3.2 mycat日志</h5><h4 id=\"5-2-4-mycat防火墙设置\"><a href=\"#5-2-4-mycat防火墙设置\" class=\"headerlink\" title=\"5.2.4 mycat防火墙设置\"></a>5.2.4 mycat防火墙设置</h4><p>白名单和SQL黑名单说明：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--在 server.xml 中配置：--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">firewall</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--ip 白名单列表，可以配置多个--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">whitehost</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--ip 白名单 用户对应的可以访问的 ip 地址--&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">host</span> <span class=\"attr\">user</span>=<span class=\"string\">&quot;mycat&quot;</span> <span class=\"attr\">host</span>=<span class=\"string\">&quot;127.0.0.1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">whitehost</span>&gt;</span></span><br><span class=\"line\">     &lt;!-是否开启检查黑名单列表--&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">blacklist</span> <span class=\"attr\">check</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--黑名单允许的 权限 后面为默认--&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;selelctAllow&quot;</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">blacklist</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">firewall</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>黑名单配置拦截明细如下：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">缺省值</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">rollbackAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 roll back 操作,如果把 selectIntoAllow、deleteAllow、updateAllow、insertAllow、mergeAllow 都设置为 false，这就是一个只读数据源了。</td>\n</tr>\n<tr>\n<td align=\"center\">selectAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否运行执行SELECT语句</td>\n</tr>\n<tr>\n<td align=\"center\">selectAllColumnAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 SELECT * FROM T 这样的语句。如果设置为 false，不允许执行 select * from t，但 select * from (select id, name from t) a。这个选项是防御程序通过调用 select *获得数据表的结构信息</td>\n</tr>\n<tr>\n<td align=\"center\">selectIntoAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">SELECT 查询中是否允许 INTO 字句</td>\n</tr>\n<tr>\n<td align=\"center\">deleteAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 DELETE 语句</td>\n</tr>\n<tr>\n<td align=\"center\">updateAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 UPDATE 语句</td>\n</tr>\n<tr>\n<td align=\"center\">insertAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 INSERT 语句</td>\n</tr>\n<tr>\n<td align=\"center\">replaceAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 REPLACE 语句</td>\n</tr>\n<tr>\n<td align=\"center\">mergeAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 MERGE 语句，这个只在 Oracle 中有用</td>\n</tr>\n<tr>\n<td align=\"center\">callAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许通过 jdbc 的 call 语法调用存储过程</td>\n</tr>\n<tr>\n<td align=\"center\">setAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许使用 SET 语法</td>\n</tr>\n<tr>\n<td align=\"center\">truncateAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">truncate 语句是危险，缺省打开，若需要自行关闭</td>\n</tr>\n<tr>\n<td align=\"center\">createTableAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许创建表</td>\n</tr>\n<tr>\n<td align=\"center\">alterTableAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 Alter Table 语句</td>\n</tr>\n<tr>\n<td align=\"center\">dropTableAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许修改表</td>\n</tr>\n<tr>\n<td align=\"center\">commentAllow</td>\n<td align=\"center\">false</td>\n<td align=\"center\">是否允许语句中存在注释，Oracle 的用户不用担心，Wall 能够识别 hints和注释的区别</td>\n</tr>\n<tr>\n<td align=\"center\">noneBaseStatementAllow</td>\n<td align=\"center\">false</td>\n<td align=\"center\">是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项 就能够屏蔽 DDL。</td>\n</tr>\n<tr>\n<td align=\"center\">multiStatementAllow</td>\n<td align=\"center\">false</td>\n<td align=\"center\">是否允许一次执行多条语句，缺省关闭</td>\n</tr>\n<tr>\n<td align=\"center\">useAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 mysql 的 use 语句，缺省打开</td>\n</tr>\n<tr>\n<td align=\"center\">describeAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 mysql 的 describe 语句，缺省打开</td>\n</tr>\n<tr>\n<td align=\"center\">showAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 mysql 的 show 语句，缺省打开</td>\n</tr>\n<tr>\n<td align=\"center\">commitAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 commit 操作</td>\n</tr>\n</tbody></table>\n<p><strong>拦截配置=-永真条件：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">缺省值</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">selectWhereAlwayTrueCheck</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检查 SELECT 语句的 WHERE 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td align=\"center\">selectHavingAlwayTrueCheck</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检查 SELECT 语句的 HAVING 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td align=\"center\">deleteWhereAlwayTrueCheck</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检查 DELETE 语句的 WHERE 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td align=\"center\">deleteWhereNoneCheck</td>\n<td align=\"center\">false</td>\n<td align=\"center\">检查 DELETE 语句是否无 where 条件，这是有风险的，但不是 SQL 注入类型的风险</td>\n</tr>\n<tr>\n<td align=\"center\">updateWhereAlayTrueCheck</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检查 UPDATE 语句的 WHERE 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td align=\"center\">updateWhereNoneCheck</td>\n<td align=\"center\">false</td>\n<td align=\"center\">检查 UPDATE 语句是否无 where 条件，这是有风险的，但不是SQL 注入类型的风险</td>\n</tr>\n<tr>\n<td align=\"center\">conditionAndAlwayTrueAllow</td>\n<td align=\"center\">false</td>\n<td align=\"center\">检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永真条件</td>\n</tr>\n<tr>\n<td align=\"center\">conditionAndAlwayFalseAllow</td>\n<td align=\"center\">false</td>\n<td align=\"center\">检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永假条件</td>\n</tr>\n<tr>\n<td align=\"center\">conditionLikeTrueAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检查查询条件(WHERE/HAVING 子句)中是否包含 LIKE 永真条件</td>\n</tr>\n</tbody></table>\n<p><strong>其他拦截配置：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"left\">缺省值</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">selectIntoOutfileAllow</td>\n<td align=\"left\">false</td>\n<td align=\"center\">SELECT … INTO OUTFILE 是否允许，这个是 mysql 注入攻击的常见手段，缺省是禁止的</td>\n</tr>\n<tr>\n<td align=\"center\">selectUnionCheck</td>\n<td align=\"left\">true</td>\n<td align=\"center\">检测 SELECT UNION</td>\n</tr>\n<tr>\n<td align=\"center\">selectMinusCheck</td>\n<td align=\"left\">true</td>\n<td align=\"center\">检测 SELECT MINUS</td>\n</tr>\n<tr>\n<td align=\"center\">selectExceptCheck</td>\n<td align=\"left\">true</td>\n<td align=\"center\">检测 SELECT EXCEPT</td>\n</tr>\n<tr>\n<td align=\"center\">selectIntersectCheck</td>\n<td align=\"left\">true</td>\n<td align=\"center\">检测 SELECT INTERSECT</td>\n</tr>\n<tr>\n<td align=\"center\">mustParameterized</td>\n<td align=\"left\">false</td>\n<td align=\"center\">是否必须参数化，如果为 True，则不允许类似 WHERE ID = 1 这种不参数化的 SQL</td>\n</tr>\n<tr>\n<td align=\"center\">strictSyntaxCheck</td>\n<td align=\"left\">true</td>\n<td align=\"center\">是否进行严格的语法检测，Druid SQL Parser 在某些场景不能覆盖所有的，SQL 语法，出现解析 SQL 出错，可以临时把这个选项设置为 false，同时把 SQL 反馈给 Druid 的开发者</td>\n</tr>\n<tr>\n<td align=\"center\">conditionOpXorAllow</td>\n<td align=\"left\">false</td>\n<td align=\"center\">查询条件中是否允许有 XOR 条件。XOR 不常用，很难判断永真或者永假，缺省不允许。</td>\n</tr>\n<tr>\n<td align=\"center\">conditionOpBitwseAllow</td>\n<td align=\"left\">true</td>\n<td align=\"center\">查询条件中是否允许有”&amp;”、”~”、”</td>\n</tr>\n<tr>\n<td align=\"center\">conditionDoubleConstAllow</td>\n<td align=\"left\">false</td>\n<td align=\"center\">查询条件中是否允许连续两个常量运算表达式</td>\n</tr>\n<tr>\n<td align=\"center\">minusAllow</td>\n<td align=\"left\">true</td>\n<td align=\"center\">是否允许 SELECT * FROM A MINUS SELECT * FROM B 这样的语句</td>\n</tr>\n<tr>\n<td align=\"center\">intersectAllow</td>\n<td align=\"left\">true</td>\n<td align=\"center\">是否允许 SELECT * FROM A INTERSECT SELECT * FROM B 这样的语句</td>\n</tr>\n<tr>\n<td align=\"center\">constArithmeticAllow</td>\n<td align=\"left\">true</td>\n<td align=\"center\">拦截常量运算的条件，比如说 WHERE FID = 3 - 1，其中”3 - 1”是常量运算表达式。</td>\n</tr>\n<tr>\n<td align=\"center\">limitZeroAllow</td>\n<td align=\"left\">false</td>\n<td align=\"center\">是否允许 limit 0 这样的语句</td>\n</tr>\n</tbody></table>\n<p><strong>禁用对象检测配置：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">缺省值</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">tableCheck</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检测是否使用了禁用的表</td>\n</tr>\n<tr>\n<td align=\"center\">schemaCheck</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检测是否使用了禁用的 Schema</td>\n</tr>\n<tr>\n<td align=\"center\">functionCheck</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检测是否使用了禁用的函数</td>\n</tr>\n<tr>\n<td align=\"center\">objectCheck</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检测是否使用了“禁用对对象”</td>\n</tr>\n<tr>\n<td align=\"center\">variantCheck</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检测是否使用了“禁用的变量”</td>\n</tr>\n<tr>\n<td align=\"center\">readOnlyTables</td>\n<td align=\"center\">空</td>\n<td align=\"center\">指定的表只读，不能够在 SELECT INTO、DELETE、UPDATE、INSERT、MERGE 中作为”被修改表”出现</td>\n</tr>\n</tbody></table>\n<h4 id=\"5-2-5-mycat配置文件\"><a href=\"#5-2-5-mycat配置文件\" class=\"headerlink\" title=\"5.2.5 mycat配置文件\"></a>5.2.5 mycat配置文件</h4><h5 id=\"5-2-5-1-schema-xml配置\"><a href=\"#5-2-5-1-schema-xml配置\" class=\"headerlink\" title=\"5.2.5.1 schema.xml配置\"></a>5.2.5.1 schema.xml配置</h5><p>schema.xml作为mycat中重要的配置文件之一，管理者mycat的逻辑库、表、分片规则、DataNode以及DataSource。</p>\n<h5 id=\"5-2-5-2-scheme标签\"><a href=\"#5-2-5-2-scheme标签\" class=\"headerlink\" title=\"5.2.5.2 scheme标签\"></a>5.2.5.2 scheme标签</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;TESTDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>schema标签用于定义mycat实例中的逻辑库，mycat可以由多个逻辑库，每个逻辑库都有自己的相关配置，可以使用schema标签来划分这些不同的逻辑库。如果不配置schema标签，所有的表配置，会属于同一个默认的逻辑库。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--逻辑库TESTDB--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;TESTDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;travelrecord&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn1,dn2,dn3&quot;</span> <span class=\"attr\">rule</span>=<span class=\"string\">&quot;auto-sharding-long&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--USERDB--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;USERDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;company&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn10,dn11,dn12&quot;</span> <span class=\"attr\">rule</span>=<span class=\"string\">&quot;auto-sharding-long&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t逻辑库的概念和MySQL数据库中的database概念相同，我们在查询这两个不同的逻辑库中表的时候需要切换到该逻辑库下才可以查询到所需要的表</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在server.xml中可以配置不同的用户能够使用的schema</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;root&quot;</span> <span class=\"attr\">defaultAccount</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultSchema&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 表级 DML 权限设置 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;privileges check=&quot;false&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                &lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                &lt;/schema&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/privileges&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>user<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;readOnly&quot;</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultSchema&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mycat/image-20201129110838590.png\"></p>\n<p>schema标签的相关属性：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">属性名</th>\n<th align=\"center\">值</th>\n<th align=\"center\">数量限制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">dataNode</td>\n<td align=\"center\">任意string</td>\n<td align=\"center\">（0..1）</td>\n</tr>\n<tr>\n<td align=\"center\">checkSQLschema</td>\n<td align=\"center\">Boolean</td>\n<td align=\"center\">（1）</td>\n</tr>\n<tr>\n<td align=\"center\">sqlMaxLimit</td>\n<td align=\"center\">Integer</td>\n<td align=\"center\">（1）</td>\n</tr>\n</tbody></table>\n<h6 id=\"5-2-5-2-1-dataNode\"><a href=\"#5-2-5-2-1-dataNode\" class=\"headerlink\" title=\"5.2.5.2.1  dataNode\"></a>5.2.5.2.1  dataNode</h6><p>该属性用于绑定逻辑库到某个具体的database上，1.3版本如果配置了dataNode,则不可以配置分片表，1.4可以配置默认分片，只需要配置需要分片的表即可，具体配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--1.3版本配置--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;USERDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn1&quot;</span>&gt;</span>&lt;!—里面不能配置任何表--&gt;<span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span><span class=\"comment\">&lt;!--1.4版本配置--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;USERDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn2&quot;</span>&gt;</span>&lt;!—配置需要分片的表--&gt;\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">name</span>=<span class=\"string\">“tuser”</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">”dn1”/</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span><span class=\"comment\">&lt;!-- \t那么现在tuser就绑定到dn1所配置的具体database上，可以直接访问这个database，没有配置的表则会走默认的节点dn2，这里注意没有配置在分片里面的表工具查看无法显示，但是可以正常使用。--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"5-2-5-2-2-checkSQLschema\"><a href=\"#5-2-5-2-2-checkSQLschema\" class=\"headerlink\" title=\"5.2.5.2.2 checkSQLschema\"></a>5.2.5.2.2 checkSQLschema</h6><p>当改制设置为true时，我们执行“SELECT * FROM TESTDB.travelrecord；”则mycat会把语句修改为“SELECT * FROM travelrecord;”即把表示schema的字符去掉，避免发送到后端数据库执行报ERROR 1146：Table ‘testdb.travelrecord’ doest’t exist.不过，即使设置该值为 true ，如果语句所带的是并非是 schema 指定的名字，例如：<strong>select * from db1.travelrecord;</strong> 那么 MyCat 并不会删除 db1 这个字段，如果没有定义该库的话则会报错，所以在提供 SQL语句的最好是不带这个字段。</p>\n<h6 id=\"5-2-5-2-3-sqlMaxLimit\"><a href=\"#5-2-5-2-3-sqlMaxLimit\" class=\"headerlink\" title=\"5.2.5.2.3 sqlMaxLimit\"></a>5.2.5.2.3 sqlMaxLimit</h6><p>当该值设置为某个数值时。每条执行的 SQL 语句，如果没有加上 limit 语句，MyCat 也会自动的加上所对应的值。例如设置值为 100，执行**select * from TESTDB.travelrecord;<strong>的效果为和执行</strong>select * from TESTDB.travelrecord limit 100;**相同。</p>\n<p>设置该值的话，MyCat 默认会把查询到的信息全部都展示出来，造成过多的输出。所以，在正常使用中，还是建议加上一个值，用于减少过多的数据返回。</p>\n<p>当然 SQL 语句中也显式的指定 limit 的大小，不受该属性的约束。</p>\n<p>需要注意的是，如果运行的 schema 为非拆分库的，那么该属性不会生效。需要手动添加 limit 语句。</p>\n<h3 id=\"5-2-分配规则\"><a href=\"#5-2-分配规则\" class=\"headerlink\" title=\"5.2 分配规则\"></a>5.2 分配规则</h3><p><img src=\"/mycat/image-20201104222632963.png\" alt=\"image-20201104222632963\"><br><img src=\"/mycat/image-20201104221336437.png\" alt=\"image-20201104221336437\"></p>\n<ul>\n<li><p>  范围分片：根据某个字设置auto-sharding-long，如果这个primaryKey超出了范围会报错</p>\n</li>\n<li><p>  取模分片：</p>\n</li>\n<li><p>ER分片（将父子表有关联的数据放在一个data-node里面）</p>\n<p>  <img src=\"/mycat/image-20201104221659540.png\" alt=\"image-20201104221659540\"></p>\n</li>\n<li><p>  全局表：所有dataNode存储相同的数据，查询的时候是随机查询某个表 type=global，查询的时候随机从某个datanode获取</p>\n</li>\n<li><p>  非分片表：只在某个dataNode上存储,指定一个dataNode并且不写分片规则</p>\n</li>\n<li><p>  单库分表：有个bug在实际数据库中必须要创建mycat中一摸一样的数据表，而且truncat的时候要现在dataNode先删除，才能删除的掉mycat的数据</p>\n</li>\n</ul>\n<h3 id=\"5-3-全局ID\"><a href=\"#5-3-全局ID\" class=\"headerlink\" title=\"5.3 全局ID\"></a>5.3 全局ID</h3><p><img src=\"/mycat/image-20201104223246735.png\" alt=\"image-20201104223246735\"></p>\n<ul>\n<li>  文件方式—0</li>\n<li>  数据库方式—1</li>\n<li>  本地时间戳—-2</li>\n<li>  ZK方式—-3</li>\n</ul>\n<h2 id=\"6-Mycat分片策略详解\"><a href=\"#6-Mycat分片策略详解\" class=\"headerlink\" title=\"6. Mycat分片策略详解\"></a>6. Mycat分片策略详解</h2><p>连续分片与离散分片</p>\n<p><img src=\"/mycat/image-20201107201442912.png\" alt=\"image-20201107201442912\"></p>\n<p><strong>连续分片</strong>：</p>\n<ul>\n<li>  范围分片</li>\n<li>  日期/事件</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>  存在数据热点的可能性</li>\n<li>  并发访问能力受限于单一或少量DataNode（访问集中），并不能分摊数据库访问的压力</li>\n</ul>\n<p><strong>离散</strong>：</p>\n<ul>\n<li><p>  取模（partioncount 的总数必须和分片总数相同）</p>\n</li>\n<li><p>  枚举</p>\n</li>\n<li><p>  一致性哈希(qs-murmur)</p>\n</li>\n<li><p>固定分片哈希</p>\n<ul>\n<li><p>  partitionCount: 2, 1表示有三个分片必须和节点数量一致，否则会报错，前面两个一样长</p>\n</li>\n<li><p>  partitionLength: 256, 512表示长度为256和512</p>\n</li>\n<li><p>  综合在一起就是前面2个分片长度为256， 最后一个为512，结果如下图所示（注意partitionCount和partitionLength的数量一定要一致）</p>\n</li>\n<li><p><img src=\"/mycat/image-20201219103201836.png\" alt=\"image-20201219103201836\"></p>\n<p>  <img src=\"/mycat/image-20201219102742172.png\" alt=\"image-20201219102742172\"></p>\n</li>\n</ul>\n</li>\n<li><p>  取模范围(sharting-by-pattern)：先取模PartitionByPattern后分片</p>\n</li>\n<li><p>范围取模: PartitionByRangeMod(partition-rane-mod.txt)</p>\n<ul>\n<li>```txt<br>  0-2000=1        #范围在2000以内的在第一个节点（取模的结果还是本身）<br>  2001-4000=2        #范围在2001到4000以内的再模2，结果为0在第一个节点，结果为1在第三个节点  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">-   其他</span><br><span class=\"line\"></span><br><span class=\"line\">优点：</span><br><span class=\"line\"></span><br><span class=\"line\">-   并发访问能力增强（负载到不同的节点）</span><br><span class=\"line\">-   范围条件查询性能提升（并行计算）</span><br><span class=\"line\"></span><br><span class=\"line\">缺点：</span><br><span class=\"line\"></span><br><span class=\"line\">-   数据扩容比较困难，设计到数据迁移问题</span><br><span class=\"line\">-   数据库连接消耗比较多</span><br><span class=\"line\"></span><br><span class=\"line\">分片策略的选择：</span><br><span class=\"line\"></span><br><span class=\"line\">1） 确定分片表</span><br><span class=\"line\"></span><br><span class=\"line\">2） 找出分片键</span><br><span class=\"line\"></span><br><span class=\"line\">3） 考虑容量、增速、业务用户</span><br><span class=\"line\"></span><br><span class=\"line\">如果在查询语句中没有携带分片建，那么mycat会将sql发布到所有的节点上</span><br><span class=\"line\"></span><br><span class=\"line\">## 7. Mycat扩缩容</span><br><span class=\"line\"></span><br><span class=\"line\">### 7.1 在线不停机扩缩容（双写）</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20201107205855474](./mycat/image-20201107205855474.png)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 7.2 离线扩缩容</span><br><span class=\"line\"></span><br><span class=\"line\">#### 7.2.1Mysql Dump</span><br><span class=\"line\"></span><br><span class=\"line\">```shell</span><br><span class=\"line\">mysqldump -uroot -p123456 -h127.0.0.1 -p3306 -c -t --skip-extended-insert 数据库名称 &gt; mysql.11.11.sql</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"7-2-2-Mycat自带工具\"><a href=\"#7-2-2-Mycat自带工具\" class=\"headerlink\" title=\"7.2.2 Mycat自带工具\"></a>7.2.2 Mycat自带工具</h4><ol>\n<li> mycat所在环境安装mysql客户端程序</li>\n<li> mycat的lib目录下添加mysql的jdbc驱动包（mysql-connector-java-5.7.1.jar）</li>\n<li> 对扩容缩容的表所有节点数据进行备份</li>\n<li> 复制schema.xml、rule.xml并重命名为newSchema.xml、newRule.xml</li>\n<li> 修改newSchema.xml和newRule.xml配置文件为扩容缩容后的参数</li>\n<li> 在conf/migrateTable.properties配置文件中配置分片库和分片表如：imall=table_test1</li>\n<li> dataMigrate.sh配置mysqldump路径</li>\n<li> 停止mycat服务</li>\n<li> 执行bin/dataMigrate.sh脚本（不能用openjdk）</li>\n<li> 替换schema.xml、rule.xml</li>\n</ol>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>  保证分片表迁移数据前后路由规则一致（取模–&gt;取模）</li>\n<li>  保证分片表歉意数据前后分片字段一致</li>\n<li>  全局表将被忽略</li>\n<li>  不要将非分片表配置到migrateTables.properties文件中</li>\n<li>  暂时只支持分片表使用Mysql作为数据源的扩容缩容</li>\n</ul>\n<h2 id=\"8-Mycat读写分离\"><a href=\"#8-Mycat读写分离\" class=\"headerlink\" title=\"8. Mycat读写分离\"></a>8. Mycat读写分离</h2><h3 id=\"8-1-主从复制\"><a href=\"#8-1-主从复制\" class=\"headerlink\" title=\"8.1 主从复制\"></a>8.1 主从复制</h3><ol>\n<li> 数据备份回复</li>\n<li> 负载均衡（读写分离）</li>\n<li> 高可用HA</li>\n</ol>\n<h3 id=\"8-2-主从复制形式\"><a href=\"#8-2-主从复制形式\" class=\"headerlink\" title=\"8.2 主从复制形式;\"></a>8.2 主从复制形式;</h3><p><img src=\"/mycat/image-20201107212552852.png\" alt=\"image-20201107212552852\"></p>\n<h4 id=\"binlog-Binary-log-二进制日志\"><a href=\"#binlog-Binary-log-二进制日志\" class=\"headerlink\" title=\"binlog(Binary log 二进制日志)\"></a>binlog(Binary log 二进制日志)</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查看binglog: SHOW binlog events in &#x27;mysql-bin.000001&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">--show variables like &#x27;max_blog_max&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"binlog配置\"><a href=\"#binlog配置\" class=\"headerlink\" title=\"binlog配置\"></a>binlog配置</h4><ul>\n<li>  STATEMENT: 记录每一天修改数据的sql语句（减少日志量，节约IO）</li>\n<li>  ROW: 记录哪条数据被修改了，修改成什么样子了（5.7以后默认）</li>\n<li>  MIXED: 结合两种方式，一般语句用STATEMENT,函数之类的使用ROW</li>\n</ul>\n<p><strong>binlog</strong>格式（mysql-bin.00001等）</p>\n<p><strong>查看binlog</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> binlog events <span class=\"keyword\">in</span> <span class=\"string\">&#x27;mysql-bin.00001&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"主从复制原理\"><a href=\"#主从复制原理\" class=\"headerlink\" title=\"主从复制原理\"></a>主从复制原理</h3><p>SQL Thread是单线程的， 这也是所有的主从复制延迟的原因，那么relay log接受master节点的sql语句主要是用于缓冲</p>\n<p><img src=\"/mycat/image-20201107213638624.png\" alt=\"image-20201107213638624\"></p>\n<h3 id=\"mycat读写分离配置\"><a href=\"#mycat读写分离配置\" class=\"headerlink\" title=\"mycat读写分离配置\"></a>mycat读写分离配置</h3><p><img src=\"/mycat/image-20201107213859155.png\" alt=\"image-20201107213859155\"></p>\n<h3 id=\"8-5-Mycat注解（hint）\"><a href=\"#8-5-Mycat注解（hint）\" class=\"headerlink\" title=\"8.5 Mycat注解（hint）\"></a>8.5 Mycat注解（hint）</h3><p>注解用法：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*!mycat:sql=注解sql语句*/真正执行的SQL</span><br><span class=\"line\"></span><br><span class=\"line\">比如说在mycat上创建表无法创建成功，可以使用注解</span><br><span class=\"line\">/*!mycat:sql=select * from table<span class=\"built_in\">_</span>1 where id = 1*/create table test2(id int);</span><br><span class=\"line\">主要注解sql可以确认mycat可以路由到子结点上，就可以执行后面的真正执行的sql语句</span><br></pre></td></tr></table></figure>\n\n<p>注解用途：</p>\n<ul>\n<li>  跨库关联查询</li>\n<li>  DDL或存储过程</li>\n<li>  自定义分片</li>\n<li>  读写分离</li>\n</ul>\n<h3 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h3><p>基于XA协议的两阶段提交</p>\n<p><img src=\"/mycat/image-20201107215437139.png\" alt=\"image-20201107215437139\"></p>\n<h4 id=\"XA角色\"><a href=\"#XA角色\" class=\"headerlink\" title=\"XA角色\"></a>XA角色</h4><p><img src=\"/mycat/image-20201107215605251.png\" alt=\"image-20201107215605251\"></p>\n<h4 id=\"XA实现\"><a href=\"#XA实现\" class=\"headerlink\" title=\"XA实现\"></a>XA实现</h4><p><img src=\"/mycat/image-20201107220049532.png\" alt=\"image-20201107220049532\"></p>\n<h2 id=\"9-Mycat核心流程\"><a href=\"#9-Mycat核心流程\" class=\"headerlink\" title=\"9. Mycat核心流程\"></a>9. Mycat核心流程</h2><h3 id=\"9-1-架构图\"><a href=\"#9-1-架构图\" class=\"headerlink\" title=\"9.1 架构图\"></a>9.1 架构图</h3><p><img src=\"/mycat/image-20201220170713526.png\" alt=\"image-20201220170713526\"></p>\n<h3 id=\"9-2-启动流程\"><a href=\"#9-2-启动流程\" class=\"headerlink\" title=\"9.2 启动流程\"></a>9.2 启动流程</h3><ol>\n<li> MycatServer启动，解析配置文件，包括服务器、分片规则等</li>\n<li> 创建工作线程，建立前端连接和后端连接</li>\n</ol>\n<h3 id=\"9-3-执行SQL流程\"><a href=\"#9-3-执行SQL流程\" class=\"headerlink\" title=\"9.3 执行SQL流程\"></a>9.3 执行SQL流程</h3><ol>\n<li> 前端连接接收mysql命令</li>\n<li> 解析MySQL，mycat用的是Druid的DruidParser</li>\n<li> 获取路由</li>\n<li> 改写MySQL，例如两个条件在两个节点上，则变成两条单独的sql</li>\n<li> 与后端数据库建立连接</li>\n<li> 发送sql语句到MySQL执行</li>\n<li> 获取返回结果</li>\n<li> 处理返回结果，例如排序、计算等等</li>\n<li> 返回给客户端</li>\n</ol>\n<h2 id=\"Mycat高可用\"><a href=\"#Mycat高可用\" class=\"headerlink\" title=\"Mycat高可用\"></a>Mycat高可用</h2><p><img src=\"/mycat/image-20201220172406074.png\" alt=\"image-20201220172406074\"></p>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h1 id=\"Mycat-分库分表中间件\"><a href=\"#Mycat-分库分表中间件\" class=\"headerlink\" title=\"Mycat(分库分表中间件)\"></a>Mycat(分库分表中间件)</h1><h2 id=\"1-数据库优化策略\"><a href=\"#1-数据库优化策略\" class=\"headerlink\" title=\"1. 数据库优化策略\"></a>1. 数据库优化策略</h2><ol>\n<li> 重启：释放资源</li>\n<li> SQL与索引</li>\n<li> 表与存储引擎（字段类型选择，长度设置，是否需要分表、分区）</li>\n<li> 数据库与应用架构（考虑使用缓存服务器，减轻是数据库压力；可以数据库分布式，读写分离，主从复制）</li>\n<li> 数据库与操作系统配置（修改mysql配置，使用单独服务器部署数据库）</li>\n<li> 硬件</li>\n</ol>\n<h2 id=\"2-数据库演化\"><a href=\"#2-数据库演化\" class=\"headerlink\" title=\"2. 数据库演化\"></a>2. 数据库演化</h2><p>根据业务需要、数据量变化，随之而来的数据库的变化</p>\n<ol>\n<li><p> 数据库与应用部署在同一台服务器<br><img src=\"/mycat/image-20201104204430049.png\" alt=\"mycat\"></p>\n</li>\n<li><p>单体应用架构，单数据库（数据库服务器和应用服务器分离，但是业务系统越做越大）<br> <img src=\"/mycat/image-20201104204624925.png\" alt=\"mycat\"></p>\n</li>\n<li><p>多应用单数据库（应用解耦）<br> <img src=\"/mycat/image-20201104204933409.png\" alt=\"mycat\"></p>\n</li>\n<li><p>多应用 独立数据库<br> <img src=\"/mycat/image-20201104205054233.png\" alt=\"mycat\"></p>\n</li>\n<li><p>但应用多数据库(分表)<br> <img src=\"/mycat/image-20201104205319372.png\" alt=\"mycat\"></p>\n</li>\n</ol>\n<h2 id=\"3-如何分库分表\"><a href=\"#3-如何分库分表\" class=\"headerlink\" title=\"3. 如何分库分表\"></a>3. 如何分库分表</h2><p><img src=\"/mycat/image-20201104205653611.png\" alt=\"mycat\"></p>\n<ul>\n<li><p>垂直切分</p>\n<ul>\n<li><p>单库<br>  <img src=\"/mycat/image-20201104205756827.png\" alt=\"mycat\"></p>\n</li>\n<li><p>多库<br>  <img src=\"/mycat/image-20201104210008624.png\" alt=\"mycat\"></p>\n</li>\n</ul>\n</li>\n<li><p>水平切分</p>\n<ul>\n<li><p>按照月分表或者分成实时、历史表等<br>  <img src=\"/mycat/image-20201104210117373.png\" alt=\"mycat\"></p>\n</li>\n<li><p>分成多库<br>  <img src=\"/mycat/image-20201104210416994.png\" alt=\"mycat\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-分库分表带来的问题\"><a href=\"#4-分库分表带来的问题\" class=\"headerlink\" title=\"4. 分库分表带来的问题\"></a>4. 分库分表带来的问题</h2><ol>\n<li><p>跨库关联查询</p>\n<ul>\n<li>  增加冗余字段（违反了第三范式：表中的所有数据元素不但要能唯一地被主关键字所标识,而且它们之间还必须相互独立,不存在其他的函数关系）</li>\n<li>  跨数据库的同步（canal、Mq（最好）、ETL、kettle、ogg）(在某个库中同步其他数据库中表的数据，避免跨库关联查询)</li>\n<li>  全局表(广播表)：比如行政区划表，所有的系统都是一样的；</li>\n<li>  API</li>\n</ul>\n</li>\n<li><p>分布式事务</p>\n<ul>\n<li>  Local</li>\n</ul>\n</li>\n<li><p>排序、翻页、函数计算</p>\n<p> -</p>\n</li>\n<li><p>全局主键</p>\n<ul>\n<li>  雪花算法leaf</li>\n<li>  redis(int 类型可以设置incby)</li>\n<li>  ZookKeeper</li>\n<li>  uuid(数据过长， 影响索引存储)</li>\n</ul>\n</li>\n<li><p>多数据源连接（动态数据源）<br> <img src=\"/mycat/image-20201104213343204.png\" alt=\"mycat\"></p>\n</li>\n</ol>\n<h2 id=\"5-Mycat分库分表中间件\"><a href=\"#5-Mycat分库分表中间件\" class=\"headerlink\" title=\"5. Mycat分库分表中间件\"></a>5. Mycat分库分表中间件</h2><p><strong>官网地址</strong>：<a href=\"http://www.mycat.org.cn/\">http://www.mycat.org.cn/</a></p>\n<p>从阿里cobar升级而来，完全实现了mysql协议，可以当作一个mysql数据库来使用，通过JDBC支持其他数据库实现分库分表，解决了<strong>多表join、分布式事务、全局序列号、翻页查询、函数计算</strong>的问题</p>\n<ul>\n<li>  一个彻底开源的，面向企业应用开发的大数据库集群</li>\n<li>  支持事务、ACID、可以替代MySQL的加强版数据库</li>\n<li>  一个可以视为MySQL集群的企业级数据库，用来替代昂贵的Oracle集群</li>\n<li>  一个融合内存缓存技术、NoSQL技术、HDFS大数据的新型SQL Server</li>\n<li>  结合传统数据库和新型分布式数据仓库的新一代企业级数据库产品</li>\n<li>  一个新颖的数据库中间件产品</li>\n</ul>\n<p>华为云的DDM其实也是根据mycat做的</p>\n<h3 id=\"5-1-核心概念\"><a href=\"#5-1-核心概念\" class=\"headerlink\" title=\"5.1 核心概念\"></a>5.1 核心概念</h3><p><img src=\"/mycat/image-20201104215015366.png\" alt=\"image-20201104215015366\"></p>\n<h3 id=\"5-2-Mycat安装与配置\"><a href=\"#5-2-Mycat安装与配置\" class=\"headerlink\" title=\"5.2 Mycat安装与配置\"></a>5.2 Mycat安装与配置</h3><h4 id=\"5-2-1-Mycat安装\"><a href=\"#5-2-1-Mycat安装\" class=\"headerlink\" title=\"5.2.1 Mycat安装\"></a>5.2.1 Mycat安装</h4><p>从官网下载安装版本，解压到文件(官网建议安装在/usr/local/Mycat)后页面如下图所示：<br><img src=\"/mycat/image-20201127094703483.png\" alt=\"image-20201127094703483\"></p>\n<p>目录解释如下：</p>\n<ul>\n<li><strong>bin：</strong>存放window版和linux版本除了提供封装成服务的版本之外，也提供了nowrap的shell脚本命令，方便选择和修改；Linux下运行:./mycat console， 首先要chmod + x*;(mycat支持的命令console、start、stop、restart、status、dump)</li>\n<li><strong>conf：</strong>server.xml是mycat服务器参数调整和用户授权的配置文件，schema.xml是逻辑库定义和表以及分片定义的配置文件，rule.xml是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改，需要重启mycat或者通过9066端口reload</li>\n<li>**lib:**主要存放mycat依赖的一些jar文件</li>\n<li><strong>logs:<strong>日志存放在mycat.log中，每天一个文件，日志的配置是在conf/log4j.xml中，根据自己的需要，可以调整输出级别为debug，方便排查问题；注意Linux下部署安装mysql，默认不忽略，需要手动到/etc/my.cnf下配置</strong>lower_case_table_names=1</strong>使Linux环境下MySQL忽略表明大小写，否则使用mycat的时候会提示找不到表的错误</li>\n</ul>\n<h4 id=\"5-2-2-服务启动与配置\"><a href=\"#5-2-2-服务启动与配置\" class=\"headerlink\" title=\"5.2.2 服务启动与配置\"></a>5.2.2 服务启动与配置</h4><p>Mycat在Linux中部署启动时，首先需要在Linux系统的环境变量中配置MYCAT_HOE,操作方式如下：</p>\n<ol>\n<li><p>vi /etc/profile，在系统环境变量文件中增加MYCAT_HOME=/usr/lib/tools/mycat<br><img src=\"/mycat/image-20201127103212598.png\" alt=\"image-20201127103212598\"></p>\n</li>\n<li><p>执行 source/etc/profile命令，使环境变量生效。如果是多台Linux系统中组件Mycat集群，那需要在mycat Server所在的服务器配置对其他ip和主机名的映射，配置方式如下：<br><img src=\"/mycat/image-20201127104159580.png\" alt=\"image-20201127104159580\"></p>\n<p>经过以上两个步骤的配置，就可以到/usr/lib/tools/mycat/bin目录下执行./mycat start启动mycat服务；使用mycat status查看mycat的运行状态；如下图<br><img src=\"/mycat/image-20201128135953635.png\" alt=\"image-20201128135953635\"></p>\n</li>\n</ol>\n<h5 id=\"5-2-2-1-安装遇到的问题\"><a href=\"#5-2-2-1-安装遇到的问题\" class=\"headerlink\" title=\"5.2.2.1 安装遇到的问题\"></a>5.2.2.1 安装遇到的问题</h5><ol>\n<li><p>schema TESTDB refered by user root is not exist!<img src=\"/mycat/image-20201215152125176.png\" alt=\"image-20201215152125176\"></p>\n<p>解决方式：</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--在conf/server.xml文件中schemas中配置schema.xml文件中的schema的name值--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--user中的name为mycat服务的用户名--&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;root&quot;</span> <span class=\"attr\">defaultAccount</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--这个是mycat服务连接的密码--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;schemas&quot;</span>&gt;</span>xiaoyuge<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"5-2-3日志分析\"><a href=\"#5-2-3日志分析\" class=\"headerlink\" title=\"5.2.3日志分析\"></a>5.2.3日志分析</h4><p>mycat的日志文件配置为MYCAT_HOME/conf/log4j.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">log4j</span>:configuration <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">log4j:configuration</span> <span class=\"attr\">xmlns:log4j</span>=<span class=\"string\">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConsoleAppender&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConversionPattern&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;%d&#123;MM-dd HH:mm:ss.SSS&#125; %5p [%t] (%F:%L) -%m%n&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;FILE&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.RollingFileAppender&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--日志文件存放的目录--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;MYCAT_HOME&#125;/logs/mycat.log&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Append&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;MaxFileSize&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10000KB&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;MaxBackupIndex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;encoding&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConversionPattern&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;%d&#123;MM/dd HH:mm:ss.SSS&#125; %5p [%t] (%F:%L) -%m%n&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--level是日志级别，生产环境下加以将级别调整为info/ware，如果是研究测试，碰到异常设置为debug--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;debug&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;ConsoleAppender&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-2-3-1-warpper日志\"><a href=\"#5-2-3-1-warpper日志\" class=\"headerlink\" title=\"5.2.3.1 warpper日志\"></a>5.2.3.1 warpper日志</h5><p>目前mycat的启动时经过warpper封装成启动脚本，所以日志也会有其相关的日志文件：${MYCAT_HOME}/logs/warapper.log， 在启动的时候如果系统环境配置错误或缺少配置时，导致mycat无法启动，可以通过查看wrapper.log查看具体错误原因。</p>\n<ol>\n<li><p>正常启动</p>\n <figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">00</span> | --&gt; Wrapper Started as Daemon</span><br><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">00</span> | Launching a JVM...</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> | Wrapper (Version <span class=\"number\">3</span><span class=\"variable\">.2</span><span class=\"variable\">.3</span>) http:<span class=\"comment\">//wrapper.tanukisoftware.org</span></span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> | Copyright <span class=\"number\">1999</span>-<span class=\"number\">2006</span> Tanuki Software, Inc. AllRights Reserved.</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> |</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> | log4j <span class=\"number\">2015</span>-<span class=\"number\">04</span>-<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> [./conf/log4j<span class=\"variable\">.xml</span>]load completed.</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">02</span> | MyCAT Server startup successfully. see logs in logs/mycat<span class=\"variable\">.log</span></span><br></pre></td></tr></table></figure></li>\n<li><p>启动异常</p>\n <figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">44</span> | --&gt; Wrapper Started as Daemon</span><br><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">44</span> | Launching a JVM...</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">45</span> | Error: Exception thrown by the agent : java<span class=\"variable\">.rmi</span><span class=\"variable\">.server</span><span class=\"variable\">.ExportException</span>:</span><br><span class=\"line\">Port already in <span class=\"keyword\">use</span>: <span class=\"number\">1984</span>; nested exception is:</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">45</span> | java<span class=\"variable\">.net</span><span class=\"variable\">.BindException</span>: Address already in <span class=\"keyword\">use</span></span><br><span class=\"line\">ERROR | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">45</span> | JVM exited <span class=\"keyword\">while</span> loading the application.</span><br><span class=\"line\">    </span><br><span class=\"line\"># 日志显示异常原因为 java<span class=\"variable\">.net</span><span class=\"variable\">.BindException</span>: Address already in <span class=\"keyword\">use</span>,也就是端口占用，很有可能是原有服</span><br><span class=\"line\">务未停止，或者 Mycat 默认端口被其他程序占用，正常启动成功后会有 mycat<span class=\"variable\">.log</span> 日志，如果服务未启动成功不会有对应的日志。 也可以去修改 conf 文件夹里的 wrapper<span class=\"variable\">.conf</span> 里的 wrapper<span class=\"variable\">.java</span><span class=\"variable\">.additional</span><span class=\"variable\">.7</span>=-Dcom<span class=\"variable\">.sun</span><span class=\"variable\">.management</span><span class=\"variable\">.jmxremote</span><span class=\"variable\">.port</span>=<span class=\"number\">1984</span>，server<span class=\"variable\">.xml</span> 的&lt;<span class=\"keyword\">property</span> name=<span class=\"string\">&quot;serverPort&quot;</span>&gt;<span class=\"number\">8066</span>&lt;/<span class=\"keyword\">property</span>&gt;和</span><br><span class=\"line\">&lt;<span class=\"keyword\">property</span> name=<span class=\"string\">&quot;managerPort&quot;</span>&gt;<span class=\"number\">9066</span>&lt;/<span class=\"keyword\">property</span>&gt;，这方法适</span><br><span class=\"line\">合一台机器上两个 mycat 或者 <span class=\"number\">1984</span>,<span class=\"number\">8066</span>,<span class=\"number\">9066</span> 端口被其它应用占用的情况</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"5-2-3-2-mycat日志\"><a href=\"#5-2-3-2-mycat日志\" class=\"headerlink\" title=\"5.2.3.2 mycat日志\"></a>5.2.3.2 mycat日志</h5><h4 id=\"5-2-4-mycat防火墙设置\"><a href=\"#5-2-4-mycat防火墙设置\" class=\"headerlink\" title=\"5.2.4 mycat防火墙设置\"></a>5.2.4 mycat防火墙设置</h4><p>白名单和SQL黑名单说明：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--在 server.xml 中配置：--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">firewall</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--ip 白名单列表，可以配置多个--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">whitehost</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--ip 白名单 用户对应的可以访问的 ip 地址--&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">host</span> <span class=\"attr\">user</span>=<span class=\"string\">&quot;mycat&quot;</span> <span class=\"attr\">host</span>=<span class=\"string\">&quot;127.0.0.1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">whitehost</span>&gt;</span></span><br><span class=\"line\">     &lt;!-是否开启检查黑名单列表--&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">blacklist</span> <span class=\"attr\">check</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--黑名单允许的 权限 后面为默认--&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;selelctAllow&quot;</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">blacklist</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">firewall</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>黑名单配置拦截明细如下：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">缺省值</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">rollbackAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 roll back 操作,如果把 selectIntoAllow、deleteAllow、updateAllow、insertAllow、mergeAllow 都设置为 false，这就是一个只读数据源了。</td>\n</tr>\n<tr>\n<td align=\"center\">selectAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否运行执行SELECT语句</td>\n</tr>\n<tr>\n<td align=\"center\">selectAllColumnAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 SELECT * FROM T 这样的语句。如果设置为 false，不允许执行 select * from t，但 select * from (select id, name from t) a。这个选项是防御程序通过调用 select *获得数据表的结构信息</td>\n</tr>\n<tr>\n<td align=\"center\">selectIntoAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">SELECT 查询中是否允许 INTO 字句</td>\n</tr>\n<tr>\n<td align=\"center\">deleteAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 DELETE 语句</td>\n</tr>\n<tr>\n<td align=\"center\">updateAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 UPDATE 语句</td>\n</tr>\n<tr>\n<td align=\"center\">insertAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 INSERT 语句</td>\n</tr>\n<tr>\n<td align=\"center\">replaceAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 REPLACE 语句</td>\n</tr>\n<tr>\n<td align=\"center\">mergeAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 MERGE 语句，这个只在 Oracle 中有用</td>\n</tr>\n<tr>\n<td align=\"center\">callAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许通过 jdbc 的 call 语法调用存储过程</td>\n</tr>\n<tr>\n<td align=\"center\">setAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许使用 SET 语法</td>\n</tr>\n<tr>\n<td align=\"center\">truncateAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">truncate 语句是危险，缺省打开，若需要自行关闭</td>\n</tr>\n<tr>\n<td align=\"center\">createTableAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许创建表</td>\n</tr>\n<tr>\n<td align=\"center\">alterTableAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 Alter Table 语句</td>\n</tr>\n<tr>\n<td align=\"center\">dropTableAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许修改表</td>\n</tr>\n<tr>\n<td align=\"center\">commentAllow</td>\n<td align=\"center\">false</td>\n<td align=\"center\">是否允许语句中存在注释，Oracle 的用户不用担心，Wall 能够识别 hints和注释的区别</td>\n</tr>\n<tr>\n<td align=\"center\">noneBaseStatementAllow</td>\n<td align=\"center\">false</td>\n<td align=\"center\">是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项 就能够屏蔽 DDL。</td>\n</tr>\n<tr>\n<td align=\"center\">multiStatementAllow</td>\n<td align=\"center\">false</td>\n<td align=\"center\">是否允许一次执行多条语句，缺省关闭</td>\n</tr>\n<tr>\n<td align=\"center\">useAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 mysql 的 use 语句，缺省打开</td>\n</tr>\n<tr>\n<td align=\"center\">describeAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 mysql 的 describe 语句，缺省打开</td>\n</tr>\n<tr>\n<td align=\"center\">showAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 mysql 的 show 语句，缺省打开</td>\n</tr>\n<tr>\n<td align=\"center\">commitAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">是否允许执行 commit 操作</td>\n</tr>\n</tbody></table>\n<p><strong>拦截配置=-永真条件：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">缺省值</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">selectWhereAlwayTrueCheck</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检查 SELECT 语句的 WHERE 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td align=\"center\">selectHavingAlwayTrueCheck</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检查 SELECT 语句的 HAVING 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td align=\"center\">deleteWhereAlwayTrueCheck</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检查 DELETE 语句的 WHERE 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td align=\"center\">deleteWhereNoneCheck</td>\n<td align=\"center\">false</td>\n<td align=\"center\">检查 DELETE 语句是否无 where 条件，这是有风险的，但不是 SQL 注入类型的风险</td>\n</tr>\n<tr>\n<td align=\"center\">updateWhereAlayTrueCheck</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检查 UPDATE 语句的 WHERE 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td align=\"center\">updateWhereNoneCheck</td>\n<td align=\"center\">false</td>\n<td align=\"center\">检查 UPDATE 语句是否无 where 条件，这是有风险的，但不是SQL 注入类型的风险</td>\n</tr>\n<tr>\n<td align=\"center\">conditionAndAlwayTrueAllow</td>\n<td align=\"center\">false</td>\n<td align=\"center\">检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永真条件</td>\n</tr>\n<tr>\n<td align=\"center\">conditionAndAlwayFalseAllow</td>\n<td align=\"center\">false</td>\n<td align=\"center\">检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永假条件</td>\n</tr>\n<tr>\n<td align=\"center\">conditionLikeTrueAllow</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检查查询条件(WHERE/HAVING 子句)中是否包含 LIKE 永真条件</td>\n</tr>\n</tbody></table>\n<p><strong>其他拦截配置：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"left\">缺省值</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">selectIntoOutfileAllow</td>\n<td align=\"left\">false</td>\n<td align=\"center\">SELECT … INTO OUTFILE 是否允许，这个是 mysql 注入攻击的常见手段，缺省是禁止的</td>\n</tr>\n<tr>\n<td align=\"center\">selectUnionCheck</td>\n<td align=\"left\">true</td>\n<td align=\"center\">检测 SELECT UNION</td>\n</tr>\n<tr>\n<td align=\"center\">selectMinusCheck</td>\n<td align=\"left\">true</td>\n<td align=\"center\">检测 SELECT MINUS</td>\n</tr>\n<tr>\n<td align=\"center\">selectExceptCheck</td>\n<td align=\"left\">true</td>\n<td align=\"center\">检测 SELECT EXCEPT</td>\n</tr>\n<tr>\n<td align=\"center\">selectIntersectCheck</td>\n<td align=\"left\">true</td>\n<td align=\"center\">检测 SELECT INTERSECT</td>\n</tr>\n<tr>\n<td align=\"center\">mustParameterized</td>\n<td align=\"left\">false</td>\n<td align=\"center\">是否必须参数化，如果为 True，则不允许类似 WHERE ID = 1 这种不参数化的 SQL</td>\n</tr>\n<tr>\n<td align=\"center\">strictSyntaxCheck</td>\n<td align=\"left\">true</td>\n<td align=\"center\">是否进行严格的语法检测，Druid SQL Parser 在某些场景不能覆盖所有的，SQL 语法，出现解析 SQL 出错，可以临时把这个选项设置为 false，同时把 SQL 反馈给 Druid 的开发者</td>\n</tr>\n<tr>\n<td align=\"center\">conditionOpXorAllow</td>\n<td align=\"left\">false</td>\n<td align=\"center\">查询条件中是否允许有 XOR 条件。XOR 不常用，很难判断永真或者永假，缺省不允许。</td>\n</tr>\n<tr>\n<td align=\"center\">conditionOpBitwseAllow</td>\n<td align=\"left\">true</td>\n<td align=\"center\">查询条件中是否允许有”&amp;”、”~”、”</td>\n</tr>\n<tr>\n<td align=\"center\">conditionDoubleConstAllow</td>\n<td align=\"left\">false</td>\n<td align=\"center\">查询条件中是否允许连续两个常量运算表达式</td>\n</tr>\n<tr>\n<td align=\"center\">minusAllow</td>\n<td align=\"left\">true</td>\n<td align=\"center\">是否允许 SELECT * FROM A MINUS SELECT * FROM B 这样的语句</td>\n</tr>\n<tr>\n<td align=\"center\">intersectAllow</td>\n<td align=\"left\">true</td>\n<td align=\"center\">是否允许 SELECT * FROM A INTERSECT SELECT * FROM B 这样的语句</td>\n</tr>\n<tr>\n<td align=\"center\">constArithmeticAllow</td>\n<td align=\"left\">true</td>\n<td align=\"center\">拦截常量运算的条件，比如说 WHERE FID = 3 - 1，其中”3 - 1”是常量运算表达式。</td>\n</tr>\n<tr>\n<td align=\"center\">limitZeroAllow</td>\n<td align=\"left\">false</td>\n<td align=\"center\">是否允许 limit 0 这样的语句</td>\n</tr>\n</tbody></table>\n<p><strong>禁用对象检测配置：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">缺省值</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">tableCheck</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检测是否使用了禁用的表</td>\n</tr>\n<tr>\n<td align=\"center\">schemaCheck</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检测是否使用了禁用的 Schema</td>\n</tr>\n<tr>\n<td align=\"center\">functionCheck</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检测是否使用了禁用的函数</td>\n</tr>\n<tr>\n<td align=\"center\">objectCheck</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检测是否使用了“禁用对对象”</td>\n</tr>\n<tr>\n<td align=\"center\">variantCheck</td>\n<td align=\"center\">true</td>\n<td align=\"center\">检测是否使用了“禁用的变量”</td>\n</tr>\n<tr>\n<td align=\"center\">readOnlyTables</td>\n<td align=\"center\">空</td>\n<td align=\"center\">指定的表只读，不能够在 SELECT INTO、DELETE、UPDATE、INSERT、MERGE 中作为”被修改表”出现</td>\n</tr>\n</tbody></table>\n<h4 id=\"5-2-5-mycat配置文件\"><a href=\"#5-2-5-mycat配置文件\" class=\"headerlink\" title=\"5.2.5 mycat配置文件\"></a>5.2.5 mycat配置文件</h4><h5 id=\"5-2-5-1-schema-xml配置\"><a href=\"#5-2-5-1-schema-xml配置\" class=\"headerlink\" title=\"5.2.5.1 schema.xml配置\"></a>5.2.5.1 schema.xml配置</h5><p>schema.xml作为mycat中重要的配置文件之一，管理者mycat的逻辑库、表、分片规则、DataNode以及DataSource。</p>\n<h5 id=\"5-2-5-2-scheme标签\"><a href=\"#5-2-5-2-scheme标签\" class=\"headerlink\" title=\"5.2.5.2 scheme标签\"></a>5.2.5.2 scheme标签</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;TESTDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>schema标签用于定义mycat实例中的逻辑库，mycat可以由多个逻辑库，每个逻辑库都有自己的相关配置，可以使用schema标签来划分这些不同的逻辑库。如果不配置schema标签，所有的表配置，会属于同一个默认的逻辑库。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--逻辑库TESTDB--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;TESTDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;travelrecord&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn1,dn2,dn3&quot;</span> <span class=\"attr\">rule</span>=<span class=\"string\">&quot;auto-sharding-long&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--USERDB--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;USERDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;company&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn10,dn11,dn12&quot;</span> <span class=\"attr\">rule</span>=<span class=\"string\">&quot;auto-sharding-long&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t逻辑库的概念和MySQL数据库中的database概念相同，我们在查询这两个不同的逻辑库中表的时候需要切换到该逻辑库下才可以查询到所需要的表</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在server.xml中可以配置不同的用户能够使用的schema</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;root&quot;</span> <span class=\"attr\">defaultAccount</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultSchema&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 表级 DML 权限设置 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;privileges check=&quot;false&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                &lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                &lt;/schema&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/privileges&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>user<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;readOnly&quot;</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultSchema&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mycat/image-20201129110838590.png\"></p>\n<p>schema标签的相关属性：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">属性名</th>\n<th align=\"center\">值</th>\n<th align=\"center\">数量限制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">dataNode</td>\n<td align=\"center\">任意string</td>\n<td align=\"center\">（0..1）</td>\n</tr>\n<tr>\n<td align=\"center\">checkSQLschema</td>\n<td align=\"center\">Boolean</td>\n<td align=\"center\">（1）</td>\n</tr>\n<tr>\n<td align=\"center\">sqlMaxLimit</td>\n<td align=\"center\">Integer</td>\n<td align=\"center\">（1）</td>\n</tr>\n</tbody></table>\n<h6 id=\"5-2-5-2-1-dataNode\"><a href=\"#5-2-5-2-1-dataNode\" class=\"headerlink\" title=\"5.2.5.2.1  dataNode\"></a>5.2.5.2.1  dataNode</h6><p>该属性用于绑定逻辑库到某个具体的database上，1.3版本如果配置了dataNode,则不可以配置分片表，1.4可以配置默认分片，只需要配置需要分片的表即可，具体配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--1.3版本配置--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;USERDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn1&quot;</span>&gt;</span>&lt;!—里面不能配置任何表--&gt;<span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span><span class=\"comment\">&lt;!--1.4版本配置--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;USERDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn2&quot;</span>&gt;</span>&lt;!—配置需要分片的表--&gt;\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">name</span>=<span class=\"string\">“tuser”</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">”dn1”/</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span><span class=\"comment\">&lt;!-- \t那么现在tuser就绑定到dn1所配置的具体database上，可以直接访问这个database，没有配置的表则会走默认的节点dn2，这里注意没有配置在分片里面的表工具查看无法显示，但是可以正常使用。--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"5-2-5-2-2-checkSQLschema\"><a href=\"#5-2-5-2-2-checkSQLschema\" class=\"headerlink\" title=\"5.2.5.2.2 checkSQLschema\"></a>5.2.5.2.2 checkSQLschema</h6><p>当改制设置为true时，我们执行“SELECT * FROM TESTDB.travelrecord；”则mycat会把语句修改为“SELECT * FROM travelrecord;”即把表示schema的字符去掉，避免发送到后端数据库执行报ERROR 1146：Table ‘testdb.travelrecord’ doest’t exist.不过，即使设置该值为 true ，如果语句所带的是并非是 schema 指定的名字，例如：<strong>select * from db1.travelrecord;</strong> 那么 MyCat 并不会删除 db1 这个字段，如果没有定义该库的话则会报错，所以在提供 SQL语句的最好是不带这个字段。</p>\n<h6 id=\"5-2-5-2-3-sqlMaxLimit\"><a href=\"#5-2-5-2-3-sqlMaxLimit\" class=\"headerlink\" title=\"5.2.5.2.3 sqlMaxLimit\"></a>5.2.5.2.3 sqlMaxLimit</h6><p>当该值设置为某个数值时。每条执行的 SQL 语句，如果没有加上 limit 语句，MyCat 也会自动的加上所对应的值。例如设置值为 100，执行**select * from TESTDB.travelrecord;<strong>的效果为和执行</strong>select * from TESTDB.travelrecord limit 100;**相同。</p>\n<p>设置该值的话，MyCat 默认会把查询到的信息全部都展示出来，造成过多的输出。所以，在正常使用中，还是建议加上一个值，用于减少过多的数据返回。</p>\n<p>当然 SQL 语句中也显式的指定 limit 的大小，不受该属性的约束。</p>\n<p>需要注意的是，如果运行的 schema 为非拆分库的，那么该属性不会生效。需要手动添加 limit 语句。</p>\n<h3 id=\"5-2-分配规则\"><a href=\"#5-2-分配规则\" class=\"headerlink\" title=\"5.2 分配规则\"></a>5.2 分配规则</h3><p><img src=\"/mycat/image-20201104222632963.png\" alt=\"image-20201104222632963\"><br><img src=\"/mycat/image-20201104221336437.png\" alt=\"image-20201104221336437\"></p>\n<ul>\n<li><p>  范围分片：根据某个字设置auto-sharding-long，如果这个primaryKey超出了范围会报错</p>\n</li>\n<li><p>  取模分片：</p>\n</li>\n<li><p>ER分片（将父子表有关联的数据放在一个data-node里面）</p>\n<p>  <img src=\"/mycat/image-20201104221659540.png\" alt=\"image-20201104221659540\"></p>\n</li>\n<li><p>  全局表：所有dataNode存储相同的数据，查询的时候是随机查询某个表 type=global，查询的时候随机从某个datanode获取</p>\n</li>\n<li><p>  非分片表：只在某个dataNode上存储,指定一个dataNode并且不写分片规则</p>\n</li>\n<li><p>  单库分表：有个bug在实际数据库中必须要创建mycat中一摸一样的数据表，而且truncat的时候要现在dataNode先删除，才能删除的掉mycat的数据</p>\n</li>\n</ul>\n<h3 id=\"5-3-全局ID\"><a href=\"#5-3-全局ID\" class=\"headerlink\" title=\"5.3 全局ID\"></a>5.3 全局ID</h3><p><img src=\"/mycat/image-20201104223246735.png\" alt=\"image-20201104223246735\"></p>\n<ul>\n<li>  文件方式—0</li>\n<li>  数据库方式—1</li>\n<li>  本地时间戳—-2</li>\n<li>  ZK方式—-3</li>\n</ul>\n<h2 id=\"6-Mycat分片策略详解\"><a href=\"#6-Mycat分片策略详解\" class=\"headerlink\" title=\"6. Mycat分片策略详解\"></a>6. Mycat分片策略详解</h2><p>连续分片与离散分片</p>\n<p><img src=\"/mycat/image-20201107201442912.png\" alt=\"image-20201107201442912\"></p>\n<p><strong>连续分片</strong>：</p>\n<ul>\n<li>  范围分片</li>\n<li>  日期/事件</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>  存在数据热点的可能性</li>\n<li>  并发访问能力受限于单一或少量DataNode（访问集中），并不能分摊数据库访问的压力</li>\n</ul>\n<p><strong>离散</strong>：</p>\n<ul>\n<li><p>  取模（partioncount 的总数必须和分片总数相同）</p>\n</li>\n<li><p>  枚举</p>\n</li>\n<li><p>  一致性哈希(qs-murmur)</p>\n</li>\n<li><p>固定分片哈希</p>\n<ul>\n<li><p>  partitionCount: 2, 1表示有三个分片必须和节点数量一致，否则会报错，前面两个一样长</p>\n</li>\n<li><p>  partitionLength: 256, 512表示长度为256和512</p>\n</li>\n<li><p>  综合在一起就是前面2个分片长度为256， 最后一个为512，结果如下图所示（注意partitionCount和partitionLength的数量一定要一致）</p>\n</li>\n<li><p><img src=\"/mycat/image-20201219103201836.png\" alt=\"image-20201219103201836\"></p>\n<p>  <img src=\"/mycat/image-20201219102742172.png\" alt=\"image-20201219102742172\"></p>\n</li>\n</ul>\n</li>\n<li><p>  取模范围(sharting-by-pattern)：先取模PartitionByPattern后分片</p>\n</li>\n<li><p>范围取模: PartitionByRangeMod(partition-rane-mod.txt)</p>\n<ul>\n<li>```txt<br>  0-2000=1        #范围在2000以内的在第一个节点（取模的结果还是本身）<br>  2001-4000=2        #范围在2001到4000以内的再模2，结果为0在第一个节点，结果为1在第三个节点  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">-   其他</span><br><span class=\"line\"></span><br><span class=\"line\">优点：</span><br><span class=\"line\"></span><br><span class=\"line\">-   并发访问能力增强（负载到不同的节点）</span><br><span class=\"line\">-   范围条件查询性能提升（并行计算）</span><br><span class=\"line\"></span><br><span class=\"line\">缺点：</span><br><span class=\"line\"></span><br><span class=\"line\">-   数据扩容比较困难，设计到数据迁移问题</span><br><span class=\"line\">-   数据库连接消耗比较多</span><br><span class=\"line\"></span><br><span class=\"line\">分片策略的选择：</span><br><span class=\"line\"></span><br><span class=\"line\">1） 确定分片表</span><br><span class=\"line\"></span><br><span class=\"line\">2） 找出分片键</span><br><span class=\"line\"></span><br><span class=\"line\">3） 考虑容量、增速、业务用户</span><br><span class=\"line\"></span><br><span class=\"line\">如果在查询语句中没有携带分片建，那么mycat会将sql发布到所有的节点上</span><br><span class=\"line\"></span><br><span class=\"line\">## 7. Mycat扩缩容</span><br><span class=\"line\"></span><br><span class=\"line\">### 7.1 在线不停机扩缩容（双写）</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20201107205855474](./mycat/image-20201107205855474.png)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 7.2 离线扩缩容</span><br><span class=\"line\"></span><br><span class=\"line\">#### 7.2.1Mysql Dump</span><br><span class=\"line\"></span><br><span class=\"line\">```shell</span><br><span class=\"line\">mysqldump -uroot -p123456 -h127.0.0.1 -p3306 -c -t --skip-extended-insert 数据库名称 &gt; mysql.11.11.sql</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"7-2-2-Mycat自带工具\"><a href=\"#7-2-2-Mycat自带工具\" class=\"headerlink\" title=\"7.2.2 Mycat自带工具\"></a>7.2.2 Mycat自带工具</h4><ol>\n<li> mycat所在环境安装mysql客户端程序</li>\n<li> mycat的lib目录下添加mysql的jdbc驱动包（mysql-connector-java-5.7.1.jar）</li>\n<li> 对扩容缩容的表所有节点数据进行备份</li>\n<li> 复制schema.xml、rule.xml并重命名为newSchema.xml、newRule.xml</li>\n<li> 修改newSchema.xml和newRule.xml配置文件为扩容缩容后的参数</li>\n<li> 在conf/migrateTable.properties配置文件中配置分片库和分片表如：imall=table_test1</li>\n<li> dataMigrate.sh配置mysqldump路径</li>\n<li> 停止mycat服务</li>\n<li> 执行bin/dataMigrate.sh脚本（不能用openjdk）</li>\n<li> 替换schema.xml、rule.xml</li>\n</ol>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>  保证分片表迁移数据前后路由规则一致（取模–&gt;取模）</li>\n<li>  保证分片表歉意数据前后分片字段一致</li>\n<li>  全局表将被忽略</li>\n<li>  不要将非分片表配置到migrateTables.properties文件中</li>\n<li>  暂时只支持分片表使用Mysql作为数据源的扩容缩容</li>\n</ul>\n<h2 id=\"8-Mycat读写分离\"><a href=\"#8-Mycat读写分离\" class=\"headerlink\" title=\"8. Mycat读写分离\"></a>8. Mycat读写分离</h2><h3 id=\"8-1-主从复制\"><a href=\"#8-1-主从复制\" class=\"headerlink\" title=\"8.1 主从复制\"></a>8.1 主从复制</h3><ol>\n<li> 数据备份回复</li>\n<li> 负载均衡（读写分离）</li>\n<li> 高可用HA</li>\n</ol>\n<h3 id=\"8-2-主从复制形式\"><a href=\"#8-2-主从复制形式\" class=\"headerlink\" title=\"8.2 主从复制形式;\"></a>8.2 主从复制形式;</h3><p><img src=\"/mycat/image-20201107212552852.png\" alt=\"image-20201107212552852\"></p>\n<h4 id=\"binlog-Binary-log-二进制日志\"><a href=\"#binlog-Binary-log-二进制日志\" class=\"headerlink\" title=\"binlog(Binary log 二进制日志)\"></a>binlog(Binary log 二进制日志)</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查看binglog: SHOW binlog events in &#x27;mysql-bin.000001&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">--show variables like &#x27;max_blog_max&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"binlog配置\"><a href=\"#binlog配置\" class=\"headerlink\" title=\"binlog配置\"></a>binlog配置</h4><ul>\n<li>  STATEMENT: 记录每一天修改数据的sql语句（减少日志量，节约IO）</li>\n<li>  ROW: 记录哪条数据被修改了，修改成什么样子了（5.7以后默认）</li>\n<li>  MIXED: 结合两种方式，一般语句用STATEMENT,函数之类的使用ROW</li>\n</ul>\n<p><strong>binlog</strong>格式（mysql-bin.00001等）</p>\n<p><strong>查看binlog</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> binlog events <span class=\"keyword\">in</span> <span class=\"string\">&#x27;mysql-bin.00001&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"主从复制原理\"><a href=\"#主从复制原理\" class=\"headerlink\" title=\"主从复制原理\"></a>主从复制原理</h3><p>SQL Thread是单线程的， 这也是所有的主从复制延迟的原因，那么relay log接受master节点的sql语句主要是用于缓冲</p>\n<p><img src=\"/mycat/image-20201107213638624.png\" alt=\"image-20201107213638624\"></p>\n<h3 id=\"mycat读写分离配置\"><a href=\"#mycat读写分离配置\" class=\"headerlink\" title=\"mycat读写分离配置\"></a>mycat读写分离配置</h3><p><img src=\"/mycat/image-20201107213859155.png\" alt=\"image-20201107213859155\"></p>\n<h3 id=\"8-5-Mycat注解（hint）\"><a href=\"#8-5-Mycat注解（hint）\" class=\"headerlink\" title=\"8.5 Mycat注解（hint）\"></a>8.5 Mycat注解（hint）</h3><p>注解用法：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*!mycat:sql=注解sql语句*/真正执行的SQL</span><br><span class=\"line\"></span><br><span class=\"line\">比如说在mycat上创建表无法创建成功，可以使用注解</span><br><span class=\"line\">/*!mycat:sql=select * from table<span class=\"built_in\">_</span>1 where id = 1*/create table test2(id int);</span><br><span class=\"line\">主要注解sql可以确认mycat可以路由到子结点上，就可以执行后面的真正执行的sql语句</span><br></pre></td></tr></table></figure>\n\n<p>注解用途：</p>\n<ul>\n<li>  跨库关联查询</li>\n<li>  DDL或存储过程</li>\n<li>  自定义分片</li>\n<li>  读写分离</li>\n</ul>\n<h3 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h3><p>基于XA协议的两阶段提交</p>\n<p><img src=\"/mycat/image-20201107215437139.png\" alt=\"image-20201107215437139\"></p>\n<h4 id=\"XA角色\"><a href=\"#XA角色\" class=\"headerlink\" title=\"XA角色\"></a>XA角色</h4><p><img src=\"/mycat/image-20201107215605251.png\" alt=\"image-20201107215605251\"></p>\n<h4 id=\"XA实现\"><a href=\"#XA实现\" class=\"headerlink\" title=\"XA实现\"></a>XA实现</h4><p><img src=\"/mycat/image-20201107220049532.png\" alt=\"image-20201107220049532\"></p>\n<h2 id=\"9-Mycat核心流程\"><a href=\"#9-Mycat核心流程\" class=\"headerlink\" title=\"9. Mycat核心流程\"></a>9. Mycat核心流程</h2><h3 id=\"9-1-架构图\"><a href=\"#9-1-架构图\" class=\"headerlink\" title=\"9.1 架构图\"></a>9.1 架构图</h3><p><img src=\"/mycat/image-20201220170713526.png\" alt=\"image-20201220170713526\"></p>\n<h3 id=\"9-2-启动流程\"><a href=\"#9-2-启动流程\" class=\"headerlink\" title=\"9.2 启动流程\"></a>9.2 启动流程</h3><ol>\n<li> MycatServer启动，解析配置文件，包括服务器、分片规则等</li>\n<li> 创建工作线程，建立前端连接和后端连接</li>\n</ol>\n<h3 id=\"9-3-执行SQL流程\"><a href=\"#9-3-执行SQL流程\" class=\"headerlink\" title=\"9.3 执行SQL流程\"></a>9.3 执行SQL流程</h3><ol>\n<li> 前端连接接收mysql命令</li>\n<li> 解析MySQL，mycat用的是Druid的DruidParser</li>\n<li> 获取路由</li>\n<li> 改写MySQL，例如两个条件在两个节点上，则变成两条单独的sql</li>\n<li> 与后端数据库建立连接</li>\n<li> 发送sql语句到MySQL执行</li>\n<li> 获取返回结果</li>\n<li> 处理返回结果，例如排序、计算等等</li>\n<li> 返回给客户端</li>\n</ol>\n<h2 id=\"Mycat高可用\"><a href=\"#Mycat高可用\" class=\"headerlink\" title=\"Mycat高可用\"></a>Mycat高可用</h2><p><img src=\"/mycat/image-20201220172406074.png\" alt=\"image-20201220172406074\"></p>\n"},{"title":"Java线程的生命周期状态","comments":1,"translate_title":"thread-status","abbrlink":62212,"date":"2020-06-02T08:04:02.000Z","_content":"## 1. Java线程分类\n在Java中线程分别对应不同的状态，从创建线程的 NEW 到销毁时的 TERMINATED状态， 我们从Thread类中的内部枚举类State中可以看到线程的6种状态；\n```java\npublic enum State {\n    /**\n     * Thread state for a thread which has not yet started.\n     * 尚未启动的线程的线程状态\n     */\n    NEW,\n    /**\n     * Thread state for a runnable thread.  A thread in the runnable state is executing in the Java virtual machine but it may\n     * be waiting for other resources from the operating system such as processor.\n     * 可运行线程的线程状态。处于可运行状态的线程正在Java虚拟机中执行，但它可能正在等待来自操作系统的其他资源，例如处理器。\n     */\n    RUNNABLE,\n    /**\n     * Thread state for a thread blocked waiting for a monitor lock. A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait() .\n     * 等待监视器锁定的被阻止线程的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法，或在调用对象后重新进入同步块/方法。\n     */\n    BLOCKED,\n\n    /**\n     * Thread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods:\n     * 1.Object.wait() with no timeout \n     * 2.Thread.join() with no timeout \n     * 3.LockSupport.park()\n     *\n     * A thread in the waiting state is waiting for another thread to perform a particular action.\n     * For example, a thread that has called Object.wait() on an object is waiting for another thread to call\n     * Object.notify or Object.notifyAll() on that object. A thread that has called Thread.join()\n     * is waiting for a specified thread to terminate.\n     */\n    WAITING,\n\n    /**\n     * Thread state for a waiting thread with a specified waiting time. A thread is in the timed waiting state due to calling one of\n     * the following methods with a specified positive waiting time:\n     * 1.Thread.sleep()\n     * 2.Object.wait() with timeout\n     * 3.Thread.join() with timeout\n     * 4.LockSupport.parkNanos()\n     * 5.LockSupport.parkUntil()\n     */\n    TIMED_WAITING,\n    /**\n     * Thread state for a terminated thread. The thread has completed execution.\n     */\n    TERMINATED;\n}\n```\n### 1.1 状态1： NEW\n当线程被创建出来还没有被调用 start()时候的状态\n```text\n官方描述：Thread state for a thread which has not yet started.\n```\n示例代码：\n```java\npublic class ThreadStateTest {\n    public static void main(String[] args) {\n        Thread thread = new Thread(\"thread1\");\n        System.out.println(thread.getState());\n    }\n}\n//输出： NEW\n```\n### 1.2 状态2： RUNNABLE\n当线程被调用start()，且处于等待操作系统分配资源（如CPU）、等待IO连接、正在运行状态，即表示Running状态和Ready状态。\n注：调用了start()不一定会立即改变状态，还有一些准备工作，这个时候线程状态是不确定的。\n```text\n官方描述：\nThread state for a runnable thread.  A thread in the runnable state is executing in the Java virtual machine but it may\nbe waiting for other resources from the operating system such as processor.\n```\n示例代码：\n```java\npublic class ThreadStateTest {\n    public static void main(String[] args) {\n        Thread thread = new Thread(\"thread1\");\n        thread.start();\n        System.out.println(thread.getState());\n    }\n}\n\n//输出： RUNNABLE\n```\n\n### 1.3 状态3： BLOCKED\n等待监视器锁而被阻塞的线程的状态。当进入synchronized块/方法 或者在调用wait()被唤醒/超时之后重新进入synchronized块/方法，但是锁被其他线程占有，这个时候被操作系统挂起，状态为**阻塞状态 BLOCKED**。\n\n**阻塞状态的线程，即使调用interrupt()方法也不会改变其状态**\n```text\n官方描述：\nThread state for a thread blocked waiting for a monitor lock. \nA thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait() .\n译文：等待监视器锁定的被阻止线程的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法，或在调用对象后重新进入同步块/方法。\n```\n\n阻塞(BLOCKED)：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种：\n- 等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。\n- 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。\n- 其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。\n\n示例代码：\n```java\npublic class BlockedState {\n    static final String lock = \"锁\";\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\") {\n            @Override\n            public void run() {\n                synchronized (lock) {\n                    //死循环导致thread1一直持有lock对象锁\n                    while (true) ;\n                }\n            }\n        };\n        thread1.start();\n\n        //休眠1秒，让thread1先启动\n        TimeUnit.SECONDS.sleep(1);\n        Thread thread2 = new Thread(\"thread2\") {\n            @Override\n            public void run() {\n                synchronized (lock) { //@1\n                    System.out.println(\"thread2\");\n                }\n            }\n        };\n        thread2.start();\n        System.out.println(\"thread1.state:\" + thread1.getState());\n        System.out.println(\"thread2.state:\" + thread2.getState());\n\n        //while (true) 死循环导致thread1持有lock对象锁一直没有释放，而thread2也想获取lock对象锁，但是锁一直被thread1持有着，导致thread2被阻塞在@1处，\n        //此时thread2就处于BLOCKED状态\n    }\n}\n\n//输出： thread1.state:RUNNABLE\n//      thread2.state:BLOCKED\n```\n查看2个线程的堆栈信息，包括：线程状态、线程目前执行到哪段代码等\n1. jps命令查看需要打印线程栈的进程号\n   ```shell\n   jps\n   ```\n   ![](./thread-status/02.png)\n\n2. jstack命令生成java虚拟机当前时刻的线程快照\n   ```shell\n   jstack 46622  #找到BlockedState线程的\n   ```\n   输出：\n   ```shell\n   \"thread2\" #13 prio=5 os_prio=31 tid=0x00007f81c387e800 nid=0xa703 waiting for monitor entry [0x000070000bbbd000]\n      java.lang.Thread.State: BLOCKED (on object monitor)\n         at org.example.thread.BlockedState$2.run(BlockedState.java:26)\n            - waiting to lock <0x0000000715916c40> (a java.lang.String)\n   \n   \"thread1\" #11 prio=5 os_prio=31 tid=0x00007f81b3d9b800 nid=0x5503 runnable [0x000070000b9b7000]\n      java.lang.Thread.State: RUNNABLE\n\t        at org.example.thread.BlockedState$1.run(BlockedState.java:14)\n\t            - locked <0x0000000715916c40> (a java.lang.String)\n   ```\n   输出内容释义：\n   - thread1：线程名称\n   - \\#11：当前线程ID，从 main线程开始，JVM 根据线程创建的顺序为线程编号\n   - prio：是 priority 优先级的缩写，表明了当前线程的优先级，取值范围【1～10】，默认为 5，在虚拟机进行线程调度的时候会参考该优先级为线程分配计算资源，数值越小优先级越高，一般不设置直接使用默认的优先级。\n   - os_prio：线程对应系统的优先级\n   - nid： 本地线程编号， NativeID的缩写，对应JVM虚拟机中线程映射在操作系统中的线程编号，可以通过 top 命令查看进程对应的线程情况进行相关映射\n\n\n### 1.4 状态4： WAITING\n无条件等待，当线程调用wait()/join()/LockSupport.park()不加超时时间的方法之后所处的状态，如果没有被唤醒或等待的线程没有结束，那么将一直等待，当前状态的线程不会被分配CPU资源和持有锁。\n```text\n官方描述：\n\nThread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods:\n1.Object.wait with no timeout \n2.Thread.join with no timeout \n3.LockSupport.park\n\nA thread in the waiting state is waiting for another thread to perform a particular action.\nFor example, a thread that has called Object.wait() on an object is waiting for another thread to call\nObject.notify or Object.notifyAll() on that object. A thread that has called Thread.join()\nis waiting for a specified thread to terminate.\n```\n#### 方式一：Object.wait()\n```java\npublic class WaitingState {\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\"){\n            @Override\n            public void run() {\n                synchronized (WaitingState.class){\n                    try {\n                        WaitingState.class.wait();\n                    }catch (InterruptedException e){\n                        e.printStackTrace();\n                    }\n                }\n            }\n        };\n        thread1.start();\n        //模拟休眠1秒，让thread1运行到wait方法处\n        TimeUnit.SECONDS.sleep(1);\n        System.out.println(\"thread.state:\"+thread1.getState());\n    }\n}\n//输出： thread1.state:WAITING\n```\n打印线程thread1堆栈信息\n```shell\n\"thread1\" #11 prio=5 os_prio=31 tid=0x00007fc57b877800 nid=0x5503 in Object.wait() [0x0000700011529000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\t  at java.lang.Object.wait(Native Method)\n\t    - waiting on <0x0000000715916c40> (a java.lang.Class for org.example.thread.WaitingState)\n\t  at java.lang.Object.wait(Object.java:502)\n\t  at org.example.thread.WaitingState$1.run(WaitingState.java:12)\n\t    - locked <0x0000000715916c40> (a java.lang.Class for org.example.thread.WaitingState)\n```\n#### 方式二：Thread.join()\n```java\npublic class WaitingState {\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\"){\n            @Override\n            public void run() {\n               while (true);\n            }\n        };\n        thread1.start();\n        //join方法会让当前主线程等待thread1结束\n        thread1.join();\n    }\n}\n```\n上面的代码导致主线程处于WAITING状态，下面是主线程堆栈信息，第二行显示主线程处于WAITING状态，第五行表示因为调用了Thread.join导致线程WAITING\n```shell\n\"main\" #1 prio=5 os_prio=31 tid=0x00007fea7b01b800 nid=0xe03 in Object.wait() [0x0000700008b43000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t  - waiting on <0x000000071591c4c8> (a org.example.thread.WaitingState$1)\n\tat java.lang.Thread.join(Thread.java:1252)\n\t  - locked <0x000000071591c4c8> (a org.example.thread.WaitingState$1)\n\tat java.lang.Thread.join(Thread.java:1326)\n\tat org.example.thread.WaitingState.main(WaitingState.java:17)\n```\n\n#### 方式三：LockSupport.park()\n```java\npublic class WaitingState {\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\"){\n            @Override\n            public void run() {\n                LockSupport.park();\n            }\n        };\n        thread1.start();\n        TimeUnit.SECONDS.sleep(1);\n        System.out.println(\"thread.state:\"+thread1.getState());\n    }\n}\n//输出： thread.state:WAITING\n```\n打印线程thread1的堆栈信息如下：\n```shell\n\"thread1\" #11 prio=5 os_prio=31 tid=0x00007f7baf82d000 nid=0x5503 waiting on condition [0x000070000b2b9000]\n   java.lang.Thread.State: WAITING (parking)\n\tat sun.misc.Unsafe.park(Native Method)\n\tat java.util.concurrent.locks.LockSupport.park(LockSupport.java:304)\n\tat org.example.thread.WaitingState$1.run(WaitingState.java:11)\n```\n\n### 1.5 状态5： TIMED_WAITING\n有条件的等待，区别于上面的WAITING(无条件等待)，当线程调用以下方法之后所处的状态，在指定的时间没有被唤醒或者等待线程没有结束，会被系统自动唤醒，正常退出。\n- sleep(睡眠时间)\n- wait(等待时间) \n- join(等待时间) \n- LockSupport.parkNanos(等待时间) \n- LockSupport.parkUntil(等待时间)\n\nTIMED_WAITING： 有期限的等待\n```text\n官方描述：\nThread state for a waiting thread with a specified waiting time. \nA thread is in the timed waiting state due to calling one of the following methods with a specified positive waiting time:\n1.Thread.sleep\n2.Object.wait with timeout\n3.Thread.join with timeout\n4.LockSupport.parkNanos\n5.LockSupport.parkUntil\n```\n#### 方式一：Thread.sleep(seconds)\n```java\npublic class TimeWaitingState {\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\") {\n            @Override\n            public void run() {\n                try {\n                    //休眠500秒 = 500000毫秒\n                    Thread.sleep(500 * 1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        };\n        thread1.start();\n        //模拟休眠1秒，让thread1运行到sleep方法处\n        TimeUnit.SECONDS.sleep(1);\n        System.out.println(\"thread1.state:\" + thread1.getState());\n    }\n}\n//输出： thread1.state:TIMED_WAITING\n```\n打印线程thread1的堆栈信息，可以看出是线程sleep方法(第三行)导致线程等待\n```shell\n\"thread1\" #11 prio=5 os_prio=31 tid=0x00007fddf71ae800 nid=0x5503 waiting on condition [0x000070000b11c000]\n   java.lang.Thread.State: TIMED_WAITING (sleeping)\n\tat java.lang.Thread.sleep(Native Method)\n\tat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)\n```\n#### 方式二：Object.wait(seconds)\n```java\npublic class TimeWaitingState {\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\") {\n            @Override\n            public void run() {\n                synchronized (TimeWaitingState.class) {\n                    try {\n                        TimeWaitingState.class.wait(500 * 100);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        };\n        thread1.start();\n        //模拟休眠1秒，让thread1运行到sleep方法处\n        TimeUnit.SECONDS.sleep(1);\n        System.out.println(\"thread1.state:\" + thread1.getState());\n    }\n}\n//输出； thread1.state:TIMED_WAITING\n```\n打印线程 thread1 堆栈信息，从堆栈信息第三行中可以看出是线程 wait 方法导致线程等待的\n```shell\n\"thread1\" #11 prio=5 os_prio=31 tid=0x00007f80a0129800 nid=0x5503 in Object.wait() [0x000070000856b000]\n   java.lang.Thread.State: TIMED_WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x0000000715916d28> (a java.lang.Class for org.example.thread.TimeWaitingState)\n\tat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)\n\t- locked <0x0000000715916d28> (a java.lang.Class for org.example.thread.TimeWaitingState)\n```\n#### 方式三：Thread.join(seconds)\n```java\npublic class TimeWaitingState {\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\") {\n            @Override\n            public void run() {\n                while(true);\n            }\n        };\n        thread1.start();\n        //Thread.join 会让当前主线程等待thread1结束，需要等待500s\n        thread1.join(500 * 1000);\n    }\n}\n\n```\nThread.join 会让当前主线程等待thread1结束，所以我们查看主线程堆栈信息: \n```shell\n\"main\" #1 prio=5 os_prio=31 tid=0x00007fa6d7009000 nid=0xd03 in Object.wait() [0x000070000feb9000]\n   java.lang.Thread.State: TIMED_WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x000000071591c138> (a org.example.thread.TimeWaitingState$1)\n\tat java.lang.Thread.join(Thread.java:1260)\n\t- locked <0x000000071591c138> (a org.example.thread.TimeWaitingState$1)\n\tat org.example.thread.TimeWaitingState.main(TimeWaitingState.java:14)\n```\n#### 方式四：LockSupport.parkNanos(seconds)\n```java\npublic class TimeWaitingState {\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\") {\n            @Override\n            public void run() {\n                //等待500秒\n                LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(500));\n            }\n        };\n        thread1.start();\n        //模拟休眠1秒，让thread1运行到parkNanos方法处\n        TimeUnit.SECONDS.sleep(1);\n        System.out.println(\"thread1.state:\" + thread1.getState());\n    }\n}\n//输出： thread1.state:TIMED_WAITING\n```\n线程 thread1 堆栈信息\n```shell\n\"thread1\" #11 prio=5 os_prio=31 tid=0x00007fb71b07a000 nid=0x5503 waiting on condition [0x0000700001da8000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n\tat sun.misc.Unsafe.park(Native Method)\n\tat java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:338)\n\tat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)\n```\n#### 方式五：LockSupport.parkUntil(seconds)\n```java\npublic class TimeWaitingState {\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\") {\n            @Override\n            public void run() {\n                //等待500秒\n                LockSupport.parkUntil(System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(500));\n            }\n        };\n        thread1.start();\n        //模拟休眠1秒，让thread1运行到parkNanos方法处\n        TimeUnit.SECONDS.sleep(1);\n        System.out.println(\"thread1.state:\" + thread1.getState());\n    }\n}\n//输出： thread1.state:TIMED_WAITING\n```\n线程 thread1 堆栈信息\n```shell\n\"thread1\" #11 prio=5 os_prio=31 tid=0x00007ff41d076000 nid=0x5503 waiting on condition [0x00007000094df000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n\tat sun.misc.Unsafe.park(Native Method)\n\tat java.util.concurrent.locks.LockSupport.parkUntil(LockSupport.java:372)\n\tat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)\n```\n\n### 1.6 状态6： TERMINATED\n执行完了 run()方法。其实这只是 Java 语言级别的一种状态，在操作系统内部可能已经注销了相应的线程，或者将它复用给其他需要使用线程的请求，而在 Java 语言级别只是通过 Java 代码看到的线程状态而已\n```text\n官方描述：\nThread state for a terminated thread. The thread has completed execution.\n```\n\n示例代码：\n```java\npublic class TerminatedState {\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\") {\n            @Override\n            public void run() {\n                System.out.println(Thread.currentThread());\n            }\n        };\n        thread1.start();\n        //休眠1秒，等待thread1执行完毕\n        TimeUnit.SECONDS.sleep(1);\n        System.out.println(\"thread1 state:\" + thread1.getState());\n    }\n}\n//输出：Thread[thread1,5,main]\n//     thread1 state:TERMINATED\n```\n\n## 2.状态转化\n![线程的状态](./thread-status/03.png)\n![线程的状态](./thread-status/01.jpg)\n\n","source":"_posts/2021/07/thread-status.md","raw":"---\ntitle: Java线程的生命周期状态\ntags: thread\ncategories: java\ncomments: true\ntranslate_title: thread-status\nabbrlink: 62212\ndate: 2020-06-02 16:04:02\n---\n## 1. Java线程分类\n在Java中线程分别对应不同的状态，从创建线程的 NEW 到销毁时的 TERMINATED状态， 我们从Thread类中的内部枚举类State中可以看到线程的6种状态；\n```java\npublic enum State {\n    /**\n     * Thread state for a thread which has not yet started.\n     * 尚未启动的线程的线程状态\n     */\n    NEW,\n    /**\n     * Thread state for a runnable thread.  A thread in the runnable state is executing in the Java virtual machine but it may\n     * be waiting for other resources from the operating system such as processor.\n     * 可运行线程的线程状态。处于可运行状态的线程正在Java虚拟机中执行，但它可能正在等待来自操作系统的其他资源，例如处理器。\n     */\n    RUNNABLE,\n    /**\n     * Thread state for a thread blocked waiting for a monitor lock. A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait() .\n     * 等待监视器锁定的被阻止线程的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法，或在调用对象后重新进入同步块/方法。\n     */\n    BLOCKED,\n\n    /**\n     * Thread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods:\n     * 1.Object.wait() with no timeout \n     * 2.Thread.join() with no timeout \n     * 3.LockSupport.park()\n     *\n     * A thread in the waiting state is waiting for another thread to perform a particular action.\n     * For example, a thread that has called Object.wait() on an object is waiting for another thread to call\n     * Object.notify or Object.notifyAll() on that object. A thread that has called Thread.join()\n     * is waiting for a specified thread to terminate.\n     */\n    WAITING,\n\n    /**\n     * Thread state for a waiting thread with a specified waiting time. A thread is in the timed waiting state due to calling one of\n     * the following methods with a specified positive waiting time:\n     * 1.Thread.sleep()\n     * 2.Object.wait() with timeout\n     * 3.Thread.join() with timeout\n     * 4.LockSupport.parkNanos()\n     * 5.LockSupport.parkUntil()\n     */\n    TIMED_WAITING,\n    /**\n     * Thread state for a terminated thread. The thread has completed execution.\n     */\n    TERMINATED;\n}\n```\n### 1.1 状态1： NEW\n当线程被创建出来还没有被调用 start()时候的状态\n```text\n官方描述：Thread state for a thread which has not yet started.\n```\n示例代码：\n```java\npublic class ThreadStateTest {\n    public static void main(String[] args) {\n        Thread thread = new Thread(\"thread1\");\n        System.out.println(thread.getState());\n    }\n}\n//输出： NEW\n```\n### 1.2 状态2： RUNNABLE\n当线程被调用start()，且处于等待操作系统分配资源（如CPU）、等待IO连接、正在运行状态，即表示Running状态和Ready状态。\n注：调用了start()不一定会立即改变状态，还有一些准备工作，这个时候线程状态是不确定的。\n```text\n官方描述：\nThread state for a runnable thread.  A thread in the runnable state is executing in the Java virtual machine but it may\nbe waiting for other resources from the operating system such as processor.\n```\n示例代码：\n```java\npublic class ThreadStateTest {\n    public static void main(String[] args) {\n        Thread thread = new Thread(\"thread1\");\n        thread.start();\n        System.out.println(thread.getState());\n    }\n}\n\n//输出： RUNNABLE\n```\n\n### 1.3 状态3： BLOCKED\n等待监视器锁而被阻塞的线程的状态。当进入synchronized块/方法 或者在调用wait()被唤醒/超时之后重新进入synchronized块/方法，但是锁被其他线程占有，这个时候被操作系统挂起，状态为**阻塞状态 BLOCKED**。\n\n**阻塞状态的线程，即使调用interrupt()方法也不会改变其状态**\n```text\n官方描述：\nThread state for a thread blocked waiting for a monitor lock. \nA thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait() .\n译文：等待监视器锁定的被阻止线程的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法，或在调用对象后重新进入同步块/方法。\n```\n\n阻塞(BLOCKED)：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种：\n- 等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。\n- 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。\n- 其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。\n\n示例代码：\n```java\npublic class BlockedState {\n    static final String lock = \"锁\";\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\") {\n            @Override\n            public void run() {\n                synchronized (lock) {\n                    //死循环导致thread1一直持有lock对象锁\n                    while (true) ;\n                }\n            }\n        };\n        thread1.start();\n\n        //休眠1秒，让thread1先启动\n        TimeUnit.SECONDS.sleep(1);\n        Thread thread2 = new Thread(\"thread2\") {\n            @Override\n            public void run() {\n                synchronized (lock) { //@1\n                    System.out.println(\"thread2\");\n                }\n            }\n        };\n        thread2.start();\n        System.out.println(\"thread1.state:\" + thread1.getState());\n        System.out.println(\"thread2.state:\" + thread2.getState());\n\n        //while (true) 死循环导致thread1持有lock对象锁一直没有释放，而thread2也想获取lock对象锁，但是锁一直被thread1持有着，导致thread2被阻塞在@1处，\n        //此时thread2就处于BLOCKED状态\n    }\n}\n\n//输出： thread1.state:RUNNABLE\n//      thread2.state:BLOCKED\n```\n查看2个线程的堆栈信息，包括：线程状态、线程目前执行到哪段代码等\n1. jps命令查看需要打印线程栈的进程号\n   ```shell\n   jps\n   ```\n   ![](./thread-status/02.png)\n\n2. jstack命令生成java虚拟机当前时刻的线程快照\n   ```shell\n   jstack 46622  #找到BlockedState线程的\n   ```\n   输出：\n   ```shell\n   \"thread2\" #13 prio=5 os_prio=31 tid=0x00007f81c387e800 nid=0xa703 waiting for monitor entry [0x000070000bbbd000]\n      java.lang.Thread.State: BLOCKED (on object monitor)\n         at org.example.thread.BlockedState$2.run(BlockedState.java:26)\n            - waiting to lock <0x0000000715916c40> (a java.lang.String)\n   \n   \"thread1\" #11 prio=5 os_prio=31 tid=0x00007f81b3d9b800 nid=0x5503 runnable [0x000070000b9b7000]\n      java.lang.Thread.State: RUNNABLE\n\t        at org.example.thread.BlockedState$1.run(BlockedState.java:14)\n\t            - locked <0x0000000715916c40> (a java.lang.String)\n   ```\n   输出内容释义：\n   - thread1：线程名称\n   - \\#11：当前线程ID，从 main线程开始，JVM 根据线程创建的顺序为线程编号\n   - prio：是 priority 优先级的缩写，表明了当前线程的优先级，取值范围【1～10】，默认为 5，在虚拟机进行线程调度的时候会参考该优先级为线程分配计算资源，数值越小优先级越高，一般不设置直接使用默认的优先级。\n   - os_prio：线程对应系统的优先级\n   - nid： 本地线程编号， NativeID的缩写，对应JVM虚拟机中线程映射在操作系统中的线程编号，可以通过 top 命令查看进程对应的线程情况进行相关映射\n\n\n### 1.4 状态4： WAITING\n无条件等待，当线程调用wait()/join()/LockSupport.park()不加超时时间的方法之后所处的状态，如果没有被唤醒或等待的线程没有结束，那么将一直等待，当前状态的线程不会被分配CPU资源和持有锁。\n```text\n官方描述：\n\nThread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods:\n1.Object.wait with no timeout \n2.Thread.join with no timeout \n3.LockSupport.park\n\nA thread in the waiting state is waiting for another thread to perform a particular action.\nFor example, a thread that has called Object.wait() on an object is waiting for another thread to call\nObject.notify or Object.notifyAll() on that object. A thread that has called Thread.join()\nis waiting for a specified thread to terminate.\n```\n#### 方式一：Object.wait()\n```java\npublic class WaitingState {\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\"){\n            @Override\n            public void run() {\n                synchronized (WaitingState.class){\n                    try {\n                        WaitingState.class.wait();\n                    }catch (InterruptedException e){\n                        e.printStackTrace();\n                    }\n                }\n            }\n        };\n        thread1.start();\n        //模拟休眠1秒，让thread1运行到wait方法处\n        TimeUnit.SECONDS.sleep(1);\n        System.out.println(\"thread.state:\"+thread1.getState());\n    }\n}\n//输出： thread1.state:WAITING\n```\n打印线程thread1堆栈信息\n```shell\n\"thread1\" #11 prio=5 os_prio=31 tid=0x00007fc57b877800 nid=0x5503 in Object.wait() [0x0000700011529000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\t  at java.lang.Object.wait(Native Method)\n\t    - waiting on <0x0000000715916c40> (a java.lang.Class for org.example.thread.WaitingState)\n\t  at java.lang.Object.wait(Object.java:502)\n\t  at org.example.thread.WaitingState$1.run(WaitingState.java:12)\n\t    - locked <0x0000000715916c40> (a java.lang.Class for org.example.thread.WaitingState)\n```\n#### 方式二：Thread.join()\n```java\npublic class WaitingState {\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\"){\n            @Override\n            public void run() {\n               while (true);\n            }\n        };\n        thread1.start();\n        //join方法会让当前主线程等待thread1结束\n        thread1.join();\n    }\n}\n```\n上面的代码导致主线程处于WAITING状态，下面是主线程堆栈信息，第二行显示主线程处于WAITING状态，第五行表示因为调用了Thread.join导致线程WAITING\n```shell\n\"main\" #1 prio=5 os_prio=31 tid=0x00007fea7b01b800 nid=0xe03 in Object.wait() [0x0000700008b43000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t  - waiting on <0x000000071591c4c8> (a org.example.thread.WaitingState$1)\n\tat java.lang.Thread.join(Thread.java:1252)\n\t  - locked <0x000000071591c4c8> (a org.example.thread.WaitingState$1)\n\tat java.lang.Thread.join(Thread.java:1326)\n\tat org.example.thread.WaitingState.main(WaitingState.java:17)\n```\n\n#### 方式三：LockSupport.park()\n```java\npublic class WaitingState {\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\"){\n            @Override\n            public void run() {\n                LockSupport.park();\n            }\n        };\n        thread1.start();\n        TimeUnit.SECONDS.sleep(1);\n        System.out.println(\"thread.state:\"+thread1.getState());\n    }\n}\n//输出： thread.state:WAITING\n```\n打印线程thread1的堆栈信息如下：\n```shell\n\"thread1\" #11 prio=5 os_prio=31 tid=0x00007f7baf82d000 nid=0x5503 waiting on condition [0x000070000b2b9000]\n   java.lang.Thread.State: WAITING (parking)\n\tat sun.misc.Unsafe.park(Native Method)\n\tat java.util.concurrent.locks.LockSupport.park(LockSupport.java:304)\n\tat org.example.thread.WaitingState$1.run(WaitingState.java:11)\n```\n\n### 1.5 状态5： TIMED_WAITING\n有条件的等待，区别于上面的WAITING(无条件等待)，当线程调用以下方法之后所处的状态，在指定的时间没有被唤醒或者等待线程没有结束，会被系统自动唤醒，正常退出。\n- sleep(睡眠时间)\n- wait(等待时间) \n- join(等待时间) \n- LockSupport.parkNanos(等待时间) \n- LockSupport.parkUntil(等待时间)\n\nTIMED_WAITING： 有期限的等待\n```text\n官方描述：\nThread state for a waiting thread with a specified waiting time. \nA thread is in the timed waiting state due to calling one of the following methods with a specified positive waiting time:\n1.Thread.sleep\n2.Object.wait with timeout\n3.Thread.join with timeout\n4.LockSupport.parkNanos\n5.LockSupport.parkUntil\n```\n#### 方式一：Thread.sleep(seconds)\n```java\npublic class TimeWaitingState {\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\") {\n            @Override\n            public void run() {\n                try {\n                    //休眠500秒 = 500000毫秒\n                    Thread.sleep(500 * 1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        };\n        thread1.start();\n        //模拟休眠1秒，让thread1运行到sleep方法处\n        TimeUnit.SECONDS.sleep(1);\n        System.out.println(\"thread1.state:\" + thread1.getState());\n    }\n}\n//输出： thread1.state:TIMED_WAITING\n```\n打印线程thread1的堆栈信息，可以看出是线程sleep方法(第三行)导致线程等待\n```shell\n\"thread1\" #11 prio=5 os_prio=31 tid=0x00007fddf71ae800 nid=0x5503 waiting on condition [0x000070000b11c000]\n   java.lang.Thread.State: TIMED_WAITING (sleeping)\n\tat java.lang.Thread.sleep(Native Method)\n\tat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)\n```\n#### 方式二：Object.wait(seconds)\n```java\npublic class TimeWaitingState {\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\") {\n            @Override\n            public void run() {\n                synchronized (TimeWaitingState.class) {\n                    try {\n                        TimeWaitingState.class.wait(500 * 100);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        };\n        thread1.start();\n        //模拟休眠1秒，让thread1运行到sleep方法处\n        TimeUnit.SECONDS.sleep(1);\n        System.out.println(\"thread1.state:\" + thread1.getState());\n    }\n}\n//输出； thread1.state:TIMED_WAITING\n```\n打印线程 thread1 堆栈信息，从堆栈信息第三行中可以看出是线程 wait 方法导致线程等待的\n```shell\n\"thread1\" #11 prio=5 os_prio=31 tid=0x00007f80a0129800 nid=0x5503 in Object.wait() [0x000070000856b000]\n   java.lang.Thread.State: TIMED_WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x0000000715916d28> (a java.lang.Class for org.example.thread.TimeWaitingState)\n\tat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)\n\t- locked <0x0000000715916d28> (a java.lang.Class for org.example.thread.TimeWaitingState)\n```\n#### 方式三：Thread.join(seconds)\n```java\npublic class TimeWaitingState {\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\") {\n            @Override\n            public void run() {\n                while(true);\n            }\n        };\n        thread1.start();\n        //Thread.join 会让当前主线程等待thread1结束，需要等待500s\n        thread1.join(500 * 1000);\n    }\n}\n\n```\nThread.join 会让当前主线程等待thread1结束，所以我们查看主线程堆栈信息: \n```shell\n\"main\" #1 prio=5 os_prio=31 tid=0x00007fa6d7009000 nid=0xd03 in Object.wait() [0x000070000feb9000]\n   java.lang.Thread.State: TIMED_WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x000000071591c138> (a org.example.thread.TimeWaitingState$1)\n\tat java.lang.Thread.join(Thread.java:1260)\n\t- locked <0x000000071591c138> (a org.example.thread.TimeWaitingState$1)\n\tat org.example.thread.TimeWaitingState.main(TimeWaitingState.java:14)\n```\n#### 方式四：LockSupport.parkNanos(seconds)\n```java\npublic class TimeWaitingState {\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\") {\n            @Override\n            public void run() {\n                //等待500秒\n                LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(500));\n            }\n        };\n        thread1.start();\n        //模拟休眠1秒，让thread1运行到parkNanos方法处\n        TimeUnit.SECONDS.sleep(1);\n        System.out.println(\"thread1.state:\" + thread1.getState());\n    }\n}\n//输出： thread1.state:TIMED_WAITING\n```\n线程 thread1 堆栈信息\n```shell\n\"thread1\" #11 prio=5 os_prio=31 tid=0x00007fb71b07a000 nid=0x5503 waiting on condition [0x0000700001da8000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n\tat sun.misc.Unsafe.park(Native Method)\n\tat java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:338)\n\tat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)\n```\n#### 方式五：LockSupport.parkUntil(seconds)\n```java\npublic class TimeWaitingState {\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\") {\n            @Override\n            public void run() {\n                //等待500秒\n                LockSupport.parkUntil(System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(500));\n            }\n        };\n        thread1.start();\n        //模拟休眠1秒，让thread1运行到parkNanos方法处\n        TimeUnit.SECONDS.sleep(1);\n        System.out.println(\"thread1.state:\" + thread1.getState());\n    }\n}\n//输出： thread1.state:TIMED_WAITING\n```\n线程 thread1 堆栈信息\n```shell\n\"thread1\" #11 prio=5 os_prio=31 tid=0x00007ff41d076000 nid=0x5503 waiting on condition [0x00007000094df000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n\tat sun.misc.Unsafe.park(Native Method)\n\tat java.util.concurrent.locks.LockSupport.parkUntil(LockSupport.java:372)\n\tat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)\n```\n\n### 1.6 状态6： TERMINATED\n执行完了 run()方法。其实这只是 Java 语言级别的一种状态，在操作系统内部可能已经注销了相应的线程，或者将它复用给其他需要使用线程的请求，而在 Java 语言级别只是通过 Java 代码看到的线程状态而已\n```text\n官方描述：\nThread state for a terminated thread. The thread has completed execution.\n```\n\n示例代码：\n```java\npublic class TerminatedState {\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(\"thread1\") {\n            @Override\n            public void run() {\n                System.out.println(Thread.currentThread());\n            }\n        };\n        thread1.start();\n        //休眠1秒，等待thread1执行完毕\n        TimeUnit.SECONDS.sleep(1);\n        System.out.println(\"thread1 state:\" + thread1.getState());\n    }\n}\n//输出：Thread[thread1,5,main]\n//     thread1 state:TERMINATED\n```\n\n## 2.状态转化\n![线程的状态](./thread-status/03.png)\n![线程的状态](./thread-status/01.jpg)\n\n","slug":"thread-status","published":1,"updated":"2022-06-06T02:38:40.428Z","_id":"cl424hx6s006oad5i06ax2fiz","layout":"post","photos":[],"link":"","content":"<h2 id=\"1-Java线程分类\"><a href=\"#1-Java线程分类\" class=\"headerlink\" title=\"1. Java线程分类\"></a>1. Java线程分类</h2><p>在Java中线程分别对应不同的状态，从创建线程的 NEW 到销毁时的 TERMINATED状态， 我们从Thread类中的内部枚举类State中可以看到线程的6种状态；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">State</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a thread which has not yet started.</span></span><br><span class=\"line\"><span class=\"comment\">     * 尚未启动的线程的线程状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    NEW,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a runnable thread.  A thread in the runnable state is executing in the Java virtual machine but it may</span></span><br><span class=\"line\"><span class=\"comment\">     * be waiting for other resources from the operating system such as processor.</span></span><br><span class=\"line\"><span class=\"comment\">     * 可运行线程的线程状态。处于可运行状态的线程正在Java虚拟机中执行，但它可能正在等待来自操作系统的其他资源，例如处理器。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RUNNABLE,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a thread blocked waiting for a monitor lock. A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait() .</span></span><br><span class=\"line\"><span class=\"comment\">     * 等待监视器锁定的被阻止线程的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法，或在调用对象后重新进入同步块/方法。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    BLOCKED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods:</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.Object.wait() with no timeout </span></span><br><span class=\"line\"><span class=\"comment\">     * 2.Thread.join() with no timeout </span></span><br><span class=\"line\"><span class=\"comment\">     * 3.LockSupport.park()</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * A thread in the waiting state is waiting for another thread to perform a particular action.</span></span><br><span class=\"line\"><span class=\"comment\">     * For example, a thread that has called Object.wait() on an object is waiting for another thread to call</span></span><br><span class=\"line\"><span class=\"comment\">     * Object.notify or Object.notifyAll() on that object. A thread that has called Thread.join()</span></span><br><span class=\"line\"><span class=\"comment\">     * is waiting for a specified thread to terminate.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    WAITING,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a waiting thread with a specified waiting time. A thread is in the timed waiting state due to calling one of</span></span><br><span class=\"line\"><span class=\"comment\">     * the following methods with a specified positive waiting time:</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.Thread.sleep()</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.Object.wait() with timeout</span></span><br><span class=\"line\"><span class=\"comment\">     * 3.Thread.join() with timeout</span></span><br><span class=\"line\"><span class=\"comment\">     * 4.LockSupport.parkNanos()</span></span><br><span class=\"line\"><span class=\"comment\">     * 5.LockSupport.parkUntil()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    TIMED_WAITING,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a terminated thread. The thread has completed execution.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    TERMINATED;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-状态1：-NEW\"><a href=\"#1-1-状态1：-NEW\" class=\"headerlink\" title=\"1.1 状态1： NEW\"></a>1.1 状态1： NEW</h3><p>当线程被创建出来还没有被调用 start()时候的状态</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">官方描述：Thread state for a thread which has not yet started.</span><br></pre></td></tr></table></figure>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadStateTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>);</span><br><span class=\"line\">        System.out.println(thread.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出： NEW</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-状态2：-RUNNABLE\"><a href=\"#1-2-状态2：-RUNNABLE\" class=\"headerlink\" title=\"1.2 状态2： RUNNABLE\"></a>1.2 状态2： RUNNABLE</h3><p>当线程被调用start()，且处于等待操作系统分配资源（如CPU）、等待IO连接、正在运行状态，即表示Running状态和Ready状态。<br>注：调用了start()不一定会立即改变状态，还有一些准备工作，这个时候线程状态是不确定的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">官方描述：</span><br><span class=\"line\">Thread state for a runnable thread.  A thread in the runnable state is executing in the Java virtual machine but it may</span><br><span class=\"line\">be waiting for other resources from the operating system such as processor.</span><br></pre></td></tr></table></figure>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadStateTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        System.out.println(thread.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出： RUNNABLE</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-状态3：-BLOCKED\"><a href=\"#1-3-状态3：-BLOCKED\" class=\"headerlink\" title=\"1.3 状态3： BLOCKED\"></a>1.3 状态3： BLOCKED</h3><p>等待监视器锁而被阻塞的线程的状态。当进入synchronized块/方法 或者在调用wait()被唤醒/超时之后重新进入synchronized块/方法，但是锁被其他线程占有，这个时候被操作系统挂起，状态为<strong>阻塞状态 BLOCKED</strong>。</p>\n<p><strong>阻塞状态的线程，即使调用interrupt()方法也不会改变其状态</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">官方描述：</span><br><span class=\"line\">Thread state for a thread blocked waiting for a monitor lock. </span><br><span class=\"line\">A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait() .</span><br><span class=\"line\">译文：等待监视器锁定的被阻止线程的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法，或在调用对象后重新进入同步块/方法。</span><br></pre></td></tr></table></figure>\n\n<p>阻塞(BLOCKED)：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种：</p>\n<ul>\n<li>等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。</li>\n<li>同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。</li>\n<li>其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。</li>\n</ul>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlockedState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String lock = <span class=\"string\">&quot;锁&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//死循环导致thread1一直持有lock对象锁</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) ;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//休眠1秒，让thread1先启动</span></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        Thread thread2 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread2&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lock) &#123; <span class=\"comment\">//@1</span></span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;thread2&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;thread2.state:&quot;</span> + thread2.getState());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//while (true) 死循环导致thread1持有lock对象锁一直没有释放，而thread2也想获取lock对象锁，但是锁一直被thread1持有着，导致thread2被阻塞在@1处，</span></span><br><span class=\"line\">        <span class=\"comment\">//此时thread2就处于BLOCKED状态</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出： thread1.state:RUNNABLE</span></span><br><span class=\"line\"><span class=\"comment\">//      thread2.state:BLOCKED</span></span><br></pre></td></tr></table></figure>\n<p>查看2个线程的堆栈信息，包括：线程状态、线程目前执行到哪段代码等</p>\n<ol>\n<li><p>jps命令查看需要打印线程栈的进程号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jps</span><br></pre></td></tr></table></figure>\n<p><img src=\"/thread-status/02.png\"></p>\n</li>\n<li><p>jstack命令生成java虚拟机当前时刻的线程快照</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstack 46622  #找到BlockedState线程的</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;thread2&quot; #13 prio=5 os_prio=31 tid=0x00007f81c387e800 nid=0xa703 waiting for monitor entry [0x000070000bbbd000]</span><br><span class=\"line\">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class=\"line\">      at org.example.thread.BlockedState$2.run(BlockedState.java:26)</span><br><span class=\"line\">         - waiting to lock &lt;0x0000000715916c40&gt; (a java.lang.String)</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007f81b3d9b800 nid=0x5503 runnable [0x000070000b9b7000]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">      at org.example.thread.BlockedState$1.run(BlockedState.java:14)</span><br><span class=\"line\">          - locked &lt;0x0000000715916c40&gt; (a java.lang.String)</span><br></pre></td></tr></table></figure>\n<p>输出内容释义：</p>\n<ul>\n<li>thread1：线程名称</li>\n<li>#11：当前线程ID，从 main线程开始，JVM 根据线程创建的顺序为线程编号</li>\n<li>prio：是 priority 优先级的缩写，表明了当前线程的优先级，取值范围【1～10】，默认为 5，在虚拟机进行线程调度的时候会参考该优先级为线程分配计算资源，数值越小优先级越高，一般不设置直接使用默认的优先级。</li>\n<li>os_prio：线程对应系统的优先级</li>\n<li>nid： 本地线程编号， NativeID的缩写，对应JVM虚拟机中线程映射在操作系统中的线程编号，可以通过 top 命令查看进程对应的线程情况进行相关映射</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-4-状态4：-WAITING\"><a href=\"#1-4-状态4：-WAITING\" class=\"headerlink\" title=\"1.4 状态4： WAITING\"></a>1.4 状态4： WAITING</h3><p>无条件等待，当线程调用wait()/join()/LockSupport.park()不加超时时间的方法之后所处的状态，如果没有被唤醒或等待的线程没有结束，那么将一直等待，当前状态的线程不会被分配CPU资源和持有锁。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">官方描述：</span><br><span class=\"line\"></span><br><span class=\"line\">Thread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods:</span><br><span class=\"line\">1.Object.wait with no timeout </span><br><span class=\"line\">2.Thread.join with no timeout </span><br><span class=\"line\">3.LockSupport.park</span><br><span class=\"line\"></span><br><span class=\"line\">A thread in the waiting state is waiting for another thread to perform a particular action.</span><br><span class=\"line\">For example, a thread that has called Object.wait() on an object is waiting for another thread to call</span><br><span class=\"line\">Object.notify or Object.notifyAll() on that object. A thread that has called Thread.join()</span><br><span class=\"line\">is waiting for a specified thread to terminate.</span><br></pre></td></tr></table></figure>\n<h4 id=\"方式一：Object-wait\"><a href=\"#方式一：Object-wait\" class=\"headerlink\" title=\"方式一：Object.wait()\"></a>方式一：Object.wait()</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitingState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (WaitingState.class)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        WaitingState.class.wait();</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        <span class=\"comment\">//模拟休眠1秒，让thread1运行到wait方法处</span></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;thread.state:&quot;</span>+thread1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出： thread1.state:WAITING</span></span><br></pre></td></tr></table></figure>\n<p>打印线程thread1堆栈信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007fc57b877800 nid=0x5503 in Object.wait() [0x0000700011529000]</span><br><span class=\"line\">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class=\"line\">\t  at java.lang.Object.wait(Native Method)</span><br><span class=\"line\">\t    - waiting on &lt;0x0000000715916c40&gt; (a java.lang.Class for org.example.thread.WaitingState)</span><br><span class=\"line\">\t  at java.lang.Object.wait(Object.java:502)</span><br><span class=\"line\">\t  at org.example.thread.WaitingState$1.run(WaitingState.java:12)</span><br><span class=\"line\">\t    - locked &lt;0x0000000715916c40&gt; (a java.lang.Class for org.example.thread.WaitingState)</span><br></pre></td></tr></table></figure>\n<h4 id=\"方式二：Thread-join\"><a href=\"#方式二：Thread-join\" class=\"headerlink\" title=\"方式二：Thread.join()\"></a>方式二：Thread.join()</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitingState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">               <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        <span class=\"comment\">//join方法会让当前主线程等待thread1结束</span></span><br><span class=\"line\">        thread1.join();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码导致主线程处于WAITING状态，下面是主线程堆栈信息，第二行显示主线程处于WAITING状态，第五行表示因为调用了Thread.join导致线程WAITING</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;main&quot; #1 prio=5 os_prio=31 tid=0x00007fea7b01b800 nid=0xe03 in Object.wait() [0x0000700008b43000]</span><br><span class=\"line\">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class=\"line\">\tat java.lang.Object.wait(Native Method)</span><br><span class=\"line\">\t  - waiting on &lt;0x000000071591c4c8&gt; (a org.example.thread.WaitingState$1)</span><br><span class=\"line\">\tat java.lang.Thread.join(Thread.java:1252)</span><br><span class=\"line\">\t  - locked &lt;0x000000071591c4c8&gt; (a org.example.thread.WaitingState$1)</span><br><span class=\"line\">\tat java.lang.Thread.join(Thread.java:1326)</span><br><span class=\"line\">\tat org.example.thread.WaitingState.main(WaitingState.java:17)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方式三：LockSupport-park\"><a href=\"#方式三：LockSupport-park\" class=\"headerlink\" title=\"方式三：LockSupport.park()\"></a>方式三：LockSupport.park()</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitingState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                LockSupport.park();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;thread.state:&quot;</span>+thread1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出： thread.state:WAITING</span></span><br></pre></td></tr></table></figure>\n<p>打印线程thread1的堆栈信息如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007f7baf82d000 nid=0x5503 waiting on condition [0x000070000b2b9000]</span><br><span class=\"line\">   java.lang.Thread.State: WAITING (parking)</span><br><span class=\"line\">\tat sun.misc.Unsafe.park(Native Method)</span><br><span class=\"line\">\tat java.util.concurrent.locks.LockSupport.park(LockSupport.java:304)</span><br><span class=\"line\">\tat org.example.thread.WaitingState$1.run(WaitingState.java:11)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-5-状态5：-TIMED-WAITING\"><a href=\"#1-5-状态5：-TIMED-WAITING\" class=\"headerlink\" title=\"1.5 状态5： TIMED_WAITING\"></a>1.5 状态5： TIMED_WAITING</h3><p>有条件的等待，区别于上面的WAITING(无条件等待)，当线程调用以下方法之后所处的状态，在指定的时间没有被唤醒或者等待线程没有结束，会被系统自动唤醒，正常退出。</p>\n<ul>\n<li>sleep(睡眠时间)</li>\n<li>wait(等待时间) </li>\n<li>join(等待时间) </li>\n<li>LockSupport.parkNanos(等待时间) </li>\n<li>LockSupport.parkUntil(等待时间)</li>\n</ul>\n<p>TIMED_WAITING： 有期限的等待</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">官方描述：</span><br><span class=\"line\">Thread state for a waiting thread with a specified waiting time. </span><br><span class=\"line\">A thread is in the timed waiting state due to calling one of the following methods with a specified positive waiting time:</span><br><span class=\"line\">1.Thread.sleep</span><br><span class=\"line\">2.Object.wait with timeout</span><br><span class=\"line\">3.Thread.join with timeout</span><br><span class=\"line\">4.LockSupport.parkNanos</span><br><span class=\"line\">5.LockSupport.parkUntil</span><br></pre></td></tr></table></figure>\n<h4 id=\"方式一：Thread-sleep-seconds\"><a href=\"#方式一：Thread-sleep-seconds\" class=\"headerlink\" title=\"方式一：Thread.sleep(seconds)\"></a>方式一：Thread.sleep(seconds)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeWaitingState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//休眠500秒 = 500000毫秒</span></span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">500</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        <span class=\"comment\">//模拟休眠1秒，让thread1运行到sleep方法处</span></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出： thread1.state:TIMED_WAITING</span></span><br></pre></td></tr></table></figure>\n<p>打印线程thread1的堆栈信息，可以看出是线程sleep方法(第三行)导致线程等待</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007fddf71ae800 nid=0x5503 waiting on condition [0x000070000b11c000]</span><br><span class=\"line\">   java.lang.Thread.State: TIMED_WAITING (sleeping)</span><br><span class=\"line\">\tat java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">\tat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)</span><br></pre></td></tr></table></figure>\n<h4 id=\"方式二：Object-wait-seconds\"><a href=\"#方式二：Object-wait-seconds\" class=\"headerlink\" title=\"方式二：Object.wait(seconds)\"></a>方式二：Object.wait(seconds)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeWaitingState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (TimeWaitingState.class) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        TimeWaitingState.class.wait(<span class=\"number\">500</span> * <span class=\"number\">100</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        <span class=\"comment\">//模拟休眠1秒，让thread1运行到sleep方法处</span></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出； thread1.state:TIMED_WAITING</span></span><br></pre></td></tr></table></figure>\n<p>打印线程 thread1 堆栈信息，从堆栈信息第三行中可以看出是线程 wait 方法导致线程等待的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007f80a0129800 nid=0x5503 in Object.wait() [0x000070000856b000]</span><br><span class=\"line\">   java.lang.Thread.State: TIMED_WAITING (on object monitor)</span><br><span class=\"line\">\tat java.lang.Object.wait(Native Method)</span><br><span class=\"line\">\t- waiting on &lt;0x0000000715916d28&gt; (a java.lang.Class for org.example.thread.TimeWaitingState)</span><br><span class=\"line\">\tat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)</span><br><span class=\"line\">\t- locked &lt;0x0000000715916d28&gt; (a java.lang.Class for org.example.thread.TimeWaitingState)</span><br></pre></td></tr></table></figure>\n<h4 id=\"方式三：Thread-join-seconds\"><a href=\"#方式三：Thread-join-seconds\" class=\"headerlink\" title=\"方式三：Thread.join(seconds)\"></a>方式三：Thread.join(seconds)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeWaitingState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        <span class=\"comment\">//Thread.join 会让当前主线程等待thread1结束，需要等待500s</span></span><br><span class=\"line\">        thread1.join(<span class=\"number\">500</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Thread.join 会让当前主线程等待thread1结束，所以我们查看主线程堆栈信息: </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;main&quot; #1 prio=5 os_prio=31 tid=0x00007fa6d7009000 nid=0xd03 in Object.wait() [0x000070000feb9000]</span><br><span class=\"line\">   java.lang.Thread.State: TIMED_WAITING (on object monitor)</span><br><span class=\"line\">\tat java.lang.Object.wait(Native Method)</span><br><span class=\"line\">\t- waiting on &lt;0x000000071591c138&gt; (a org.example.thread.TimeWaitingState$1)</span><br><span class=\"line\">\tat java.lang.Thread.join(Thread.java:1260)</span><br><span class=\"line\">\t- locked &lt;0x000000071591c138&gt; (a org.example.thread.TimeWaitingState$1)</span><br><span class=\"line\">\tat org.example.thread.TimeWaitingState.main(TimeWaitingState.java:14)</span><br></pre></td></tr></table></figure>\n<h4 id=\"方式四：LockSupport-parkNanos-seconds\"><a href=\"#方式四：LockSupport-parkNanos-seconds\" class=\"headerlink\" title=\"方式四：LockSupport.parkNanos(seconds)\"></a>方式四：LockSupport.parkNanos(seconds)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeWaitingState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//等待500秒</span></span><br><span class=\"line\">                LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(<span class=\"number\">500</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        <span class=\"comment\">//模拟休眠1秒，让thread1运行到parkNanos方法处</span></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出： thread1.state:TIMED_WAITING</span></span><br></pre></td></tr></table></figure>\n<p>线程 thread1 堆栈信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007fb71b07a000 nid=0x5503 waiting on condition [0x0000700001da8000]</span><br><span class=\"line\">   java.lang.Thread.State: TIMED_WAITING (parking)</span><br><span class=\"line\">\tat sun.misc.Unsafe.park(Native Method)</span><br><span class=\"line\">\tat java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:338)</span><br><span class=\"line\">\tat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)</span><br></pre></td></tr></table></figure>\n<h4 id=\"方式五：LockSupport-parkUntil-seconds\"><a href=\"#方式五：LockSupport-parkUntil-seconds\" class=\"headerlink\" title=\"方式五：LockSupport.parkUntil(seconds)\"></a>方式五：LockSupport.parkUntil(seconds)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeWaitingState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//等待500秒</span></span><br><span class=\"line\">                LockSupport.parkUntil(System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(<span class=\"number\">500</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        <span class=\"comment\">//模拟休眠1秒，让thread1运行到parkNanos方法处</span></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出： thread1.state:TIMED_WAITING</span></span><br></pre></td></tr></table></figure>\n<p>线程 thread1 堆栈信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007ff41d076000 nid=0x5503 waiting on condition [0x00007000094df000]</span><br><span class=\"line\">   java.lang.Thread.State: TIMED_WAITING (parking)</span><br><span class=\"line\">\tat sun.misc.Unsafe.park(Native Method)</span><br><span class=\"line\">\tat java.util.concurrent.locks.LockSupport.parkUntil(LockSupport.java:372)</span><br><span class=\"line\">\tat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-6-状态6：-TERMINATED\"><a href=\"#1-6-状态6：-TERMINATED\" class=\"headerlink\" title=\"1.6 状态6： TERMINATED\"></a>1.6 状态6： TERMINATED</h3><p>执行完了 run()方法。其实这只是 Java 语言级别的一种状态，在操作系统内部可能已经注销了相应的线程，或者将它复用给其他需要使用线程的请求，而在 Java 语言级别只是通过 Java 代码看到的线程状态而已</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">官方描述：</span><br><span class=\"line\">Thread state for a terminated thread. The thread has completed execution.</span><br></pre></td></tr></table></figure>\n\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TerminatedState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        <span class=\"comment\">//休眠1秒，等待thread1执行完毕</span></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;thread1 state:&quot;</span> + thread1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：Thread[thread1,5,main]</span></span><br><span class=\"line\"><span class=\"comment\">//     thread1 state:TERMINATED</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-状态转化\"><a href=\"#2-状态转化\" class=\"headerlink\" title=\"2.状态转化\"></a>2.状态转化</h2><p><img src=\"/thread-status/03.png\" alt=\"线程的状态\"><br><img src=\"/thread-status/01.jpg\" alt=\"线程的状态\"></p>\n","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<h2 id=\"1-Java线程分类\"><a href=\"#1-Java线程分类\" class=\"headerlink\" title=\"1. Java线程分类\"></a>1. Java线程分类</h2><p>在Java中线程分别对应不同的状态，从创建线程的 NEW 到销毁时的 TERMINATED状态， 我们从Thread类中的内部枚举类State中可以看到线程的6种状态；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">State</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a thread which has not yet started.</span></span><br><span class=\"line\"><span class=\"comment\">     * 尚未启动的线程的线程状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    NEW,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a runnable thread.  A thread in the runnable state is executing in the Java virtual machine but it may</span></span><br><span class=\"line\"><span class=\"comment\">     * be waiting for other resources from the operating system such as processor.</span></span><br><span class=\"line\"><span class=\"comment\">     * 可运行线程的线程状态。处于可运行状态的线程正在Java虚拟机中执行，但它可能正在等待来自操作系统的其他资源，例如处理器。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RUNNABLE,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a thread blocked waiting for a monitor lock. A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait() .</span></span><br><span class=\"line\"><span class=\"comment\">     * 等待监视器锁定的被阻止线程的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法，或在调用对象后重新进入同步块/方法。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    BLOCKED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods:</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.Object.wait() with no timeout </span></span><br><span class=\"line\"><span class=\"comment\">     * 2.Thread.join() with no timeout </span></span><br><span class=\"line\"><span class=\"comment\">     * 3.LockSupport.park()</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * A thread in the waiting state is waiting for another thread to perform a particular action.</span></span><br><span class=\"line\"><span class=\"comment\">     * For example, a thread that has called Object.wait() on an object is waiting for another thread to call</span></span><br><span class=\"line\"><span class=\"comment\">     * Object.notify or Object.notifyAll() on that object. A thread that has called Thread.join()</span></span><br><span class=\"line\"><span class=\"comment\">     * is waiting for a specified thread to terminate.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    WAITING,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a waiting thread with a specified waiting time. A thread is in the timed waiting state due to calling one of</span></span><br><span class=\"line\"><span class=\"comment\">     * the following methods with a specified positive waiting time:</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.Thread.sleep()</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.Object.wait() with timeout</span></span><br><span class=\"line\"><span class=\"comment\">     * 3.Thread.join() with timeout</span></span><br><span class=\"line\"><span class=\"comment\">     * 4.LockSupport.parkNanos()</span></span><br><span class=\"line\"><span class=\"comment\">     * 5.LockSupport.parkUntil()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    TIMED_WAITING,</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a terminated thread. The thread has completed execution.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    TERMINATED;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-状态1：-NEW\"><a href=\"#1-1-状态1：-NEW\" class=\"headerlink\" title=\"1.1 状态1： NEW\"></a>1.1 状态1： NEW</h3><p>当线程被创建出来还没有被调用 start()时候的状态</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">官方描述：Thread state for a thread which has not yet started.</span><br></pre></td></tr></table></figure>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadStateTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>);</span><br><span class=\"line\">        System.out.println(thread.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出： NEW</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-状态2：-RUNNABLE\"><a href=\"#1-2-状态2：-RUNNABLE\" class=\"headerlink\" title=\"1.2 状态2： RUNNABLE\"></a>1.2 状态2： RUNNABLE</h3><p>当线程被调用start()，且处于等待操作系统分配资源（如CPU）、等待IO连接、正在运行状态，即表示Running状态和Ready状态。<br>注：调用了start()不一定会立即改变状态，还有一些准备工作，这个时候线程状态是不确定的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">官方描述：</span><br><span class=\"line\">Thread state for a runnable thread.  A thread in the runnable state is executing in the Java virtual machine but it may</span><br><span class=\"line\">be waiting for other resources from the operating system such as processor.</span><br></pre></td></tr></table></figure>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadStateTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        System.out.println(thread.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出： RUNNABLE</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-状态3：-BLOCKED\"><a href=\"#1-3-状态3：-BLOCKED\" class=\"headerlink\" title=\"1.3 状态3： BLOCKED\"></a>1.3 状态3： BLOCKED</h3><p>等待监视器锁而被阻塞的线程的状态。当进入synchronized块/方法 或者在调用wait()被唤醒/超时之后重新进入synchronized块/方法，但是锁被其他线程占有，这个时候被操作系统挂起，状态为<strong>阻塞状态 BLOCKED</strong>。</p>\n<p><strong>阻塞状态的线程，即使调用interrupt()方法也不会改变其状态</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">官方描述：</span><br><span class=\"line\">Thread state for a thread blocked waiting for a monitor lock. </span><br><span class=\"line\">A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait() .</span><br><span class=\"line\">译文：等待监视器锁定的被阻止线程的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法，或在调用对象后重新进入同步块/方法。</span><br></pre></td></tr></table></figure>\n\n<p>阻塞(BLOCKED)：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种：</p>\n<ul>\n<li>等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。</li>\n<li>同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。</li>\n<li>其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。</li>\n</ul>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlockedState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String lock = <span class=\"string\">&quot;锁&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//死循环导致thread1一直持有lock对象锁</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) ;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//休眠1秒，让thread1先启动</span></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        Thread thread2 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread2&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lock) &#123; <span class=\"comment\">//@1</span></span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;thread2&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;thread2.state:&quot;</span> + thread2.getState());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//while (true) 死循环导致thread1持有lock对象锁一直没有释放，而thread2也想获取lock对象锁，但是锁一直被thread1持有着，导致thread2被阻塞在@1处，</span></span><br><span class=\"line\">        <span class=\"comment\">//此时thread2就处于BLOCKED状态</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出： thread1.state:RUNNABLE</span></span><br><span class=\"line\"><span class=\"comment\">//      thread2.state:BLOCKED</span></span><br></pre></td></tr></table></figure>\n<p>查看2个线程的堆栈信息，包括：线程状态、线程目前执行到哪段代码等</p>\n<ol>\n<li><p>jps命令查看需要打印线程栈的进程号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jps</span><br></pre></td></tr></table></figure>\n<p><img src=\"/thread-status/02.png\"></p>\n</li>\n<li><p>jstack命令生成java虚拟机当前时刻的线程快照</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstack 46622  #找到BlockedState线程的</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;thread2&quot; #13 prio=5 os_prio=31 tid=0x00007f81c387e800 nid=0xa703 waiting for monitor entry [0x000070000bbbd000]</span><br><span class=\"line\">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class=\"line\">      at org.example.thread.BlockedState$2.run(BlockedState.java:26)</span><br><span class=\"line\">         - waiting to lock &lt;0x0000000715916c40&gt; (a java.lang.String)</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007f81b3d9b800 nid=0x5503 runnable [0x000070000b9b7000]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">      at org.example.thread.BlockedState$1.run(BlockedState.java:14)</span><br><span class=\"line\">          - locked &lt;0x0000000715916c40&gt; (a java.lang.String)</span><br></pre></td></tr></table></figure>\n<p>输出内容释义：</p>\n<ul>\n<li>thread1：线程名称</li>\n<li>#11：当前线程ID，从 main线程开始，JVM 根据线程创建的顺序为线程编号</li>\n<li>prio：是 priority 优先级的缩写，表明了当前线程的优先级，取值范围【1～10】，默认为 5，在虚拟机进行线程调度的时候会参考该优先级为线程分配计算资源，数值越小优先级越高，一般不设置直接使用默认的优先级。</li>\n<li>os_prio：线程对应系统的优先级</li>\n<li>nid： 本地线程编号， NativeID的缩写，对应JVM虚拟机中线程映射在操作系统中的线程编号，可以通过 top 命令查看进程对应的线程情况进行相关映射</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-4-状态4：-WAITING\"><a href=\"#1-4-状态4：-WAITING\" class=\"headerlink\" title=\"1.4 状态4： WAITING\"></a>1.4 状态4： WAITING</h3><p>无条件等待，当线程调用wait()/join()/LockSupport.park()不加超时时间的方法之后所处的状态，如果没有被唤醒或等待的线程没有结束，那么将一直等待，当前状态的线程不会被分配CPU资源和持有锁。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">官方描述：</span><br><span class=\"line\"></span><br><span class=\"line\">Thread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods:</span><br><span class=\"line\">1.Object.wait with no timeout </span><br><span class=\"line\">2.Thread.join with no timeout </span><br><span class=\"line\">3.LockSupport.park</span><br><span class=\"line\"></span><br><span class=\"line\">A thread in the waiting state is waiting for another thread to perform a particular action.</span><br><span class=\"line\">For example, a thread that has called Object.wait() on an object is waiting for another thread to call</span><br><span class=\"line\">Object.notify or Object.notifyAll() on that object. A thread that has called Thread.join()</span><br><span class=\"line\">is waiting for a specified thread to terminate.</span><br></pre></td></tr></table></figure>\n<h4 id=\"方式一：Object-wait\"><a href=\"#方式一：Object-wait\" class=\"headerlink\" title=\"方式一：Object.wait()\"></a>方式一：Object.wait()</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitingState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (WaitingState.class)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        WaitingState.class.wait();</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        <span class=\"comment\">//模拟休眠1秒，让thread1运行到wait方法处</span></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;thread.state:&quot;</span>+thread1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出： thread1.state:WAITING</span></span><br></pre></td></tr></table></figure>\n<p>打印线程thread1堆栈信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007fc57b877800 nid=0x5503 in Object.wait() [0x0000700011529000]</span><br><span class=\"line\">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class=\"line\">\t  at java.lang.Object.wait(Native Method)</span><br><span class=\"line\">\t    - waiting on &lt;0x0000000715916c40&gt; (a java.lang.Class for org.example.thread.WaitingState)</span><br><span class=\"line\">\t  at java.lang.Object.wait(Object.java:502)</span><br><span class=\"line\">\t  at org.example.thread.WaitingState$1.run(WaitingState.java:12)</span><br><span class=\"line\">\t    - locked &lt;0x0000000715916c40&gt; (a java.lang.Class for org.example.thread.WaitingState)</span><br></pre></td></tr></table></figure>\n<h4 id=\"方式二：Thread-join\"><a href=\"#方式二：Thread-join\" class=\"headerlink\" title=\"方式二：Thread.join()\"></a>方式二：Thread.join()</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitingState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">               <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        <span class=\"comment\">//join方法会让当前主线程等待thread1结束</span></span><br><span class=\"line\">        thread1.join();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码导致主线程处于WAITING状态，下面是主线程堆栈信息，第二行显示主线程处于WAITING状态，第五行表示因为调用了Thread.join导致线程WAITING</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;main&quot; #1 prio=5 os_prio=31 tid=0x00007fea7b01b800 nid=0xe03 in Object.wait() [0x0000700008b43000]</span><br><span class=\"line\">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class=\"line\">\tat java.lang.Object.wait(Native Method)</span><br><span class=\"line\">\t  - waiting on &lt;0x000000071591c4c8&gt; (a org.example.thread.WaitingState$1)</span><br><span class=\"line\">\tat java.lang.Thread.join(Thread.java:1252)</span><br><span class=\"line\">\t  - locked &lt;0x000000071591c4c8&gt; (a org.example.thread.WaitingState$1)</span><br><span class=\"line\">\tat java.lang.Thread.join(Thread.java:1326)</span><br><span class=\"line\">\tat org.example.thread.WaitingState.main(WaitingState.java:17)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方式三：LockSupport-park\"><a href=\"#方式三：LockSupport-park\" class=\"headerlink\" title=\"方式三：LockSupport.park()\"></a>方式三：LockSupport.park()</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitingState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                LockSupport.park();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;thread.state:&quot;</span>+thread1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出： thread.state:WAITING</span></span><br></pre></td></tr></table></figure>\n<p>打印线程thread1的堆栈信息如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007f7baf82d000 nid=0x5503 waiting on condition [0x000070000b2b9000]</span><br><span class=\"line\">   java.lang.Thread.State: WAITING (parking)</span><br><span class=\"line\">\tat sun.misc.Unsafe.park(Native Method)</span><br><span class=\"line\">\tat java.util.concurrent.locks.LockSupport.park(LockSupport.java:304)</span><br><span class=\"line\">\tat org.example.thread.WaitingState$1.run(WaitingState.java:11)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-5-状态5：-TIMED-WAITING\"><a href=\"#1-5-状态5：-TIMED-WAITING\" class=\"headerlink\" title=\"1.5 状态5： TIMED_WAITING\"></a>1.5 状态5： TIMED_WAITING</h3><p>有条件的等待，区别于上面的WAITING(无条件等待)，当线程调用以下方法之后所处的状态，在指定的时间没有被唤醒或者等待线程没有结束，会被系统自动唤醒，正常退出。</p>\n<ul>\n<li>sleep(睡眠时间)</li>\n<li>wait(等待时间) </li>\n<li>join(等待时间) </li>\n<li>LockSupport.parkNanos(等待时间) </li>\n<li>LockSupport.parkUntil(等待时间)</li>\n</ul>\n<p>TIMED_WAITING： 有期限的等待</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">官方描述：</span><br><span class=\"line\">Thread state for a waiting thread with a specified waiting time. </span><br><span class=\"line\">A thread is in the timed waiting state due to calling one of the following methods with a specified positive waiting time:</span><br><span class=\"line\">1.Thread.sleep</span><br><span class=\"line\">2.Object.wait with timeout</span><br><span class=\"line\">3.Thread.join with timeout</span><br><span class=\"line\">4.LockSupport.parkNanos</span><br><span class=\"line\">5.LockSupport.parkUntil</span><br></pre></td></tr></table></figure>\n<h4 id=\"方式一：Thread-sleep-seconds\"><a href=\"#方式一：Thread-sleep-seconds\" class=\"headerlink\" title=\"方式一：Thread.sleep(seconds)\"></a>方式一：Thread.sleep(seconds)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeWaitingState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//休眠500秒 = 500000毫秒</span></span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">500</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        <span class=\"comment\">//模拟休眠1秒，让thread1运行到sleep方法处</span></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出： thread1.state:TIMED_WAITING</span></span><br></pre></td></tr></table></figure>\n<p>打印线程thread1的堆栈信息，可以看出是线程sleep方法(第三行)导致线程等待</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007fddf71ae800 nid=0x5503 waiting on condition [0x000070000b11c000]</span><br><span class=\"line\">   java.lang.Thread.State: TIMED_WAITING (sleeping)</span><br><span class=\"line\">\tat java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">\tat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)</span><br></pre></td></tr></table></figure>\n<h4 id=\"方式二：Object-wait-seconds\"><a href=\"#方式二：Object-wait-seconds\" class=\"headerlink\" title=\"方式二：Object.wait(seconds)\"></a>方式二：Object.wait(seconds)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeWaitingState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (TimeWaitingState.class) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        TimeWaitingState.class.wait(<span class=\"number\">500</span> * <span class=\"number\">100</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        <span class=\"comment\">//模拟休眠1秒，让thread1运行到sleep方法处</span></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出； thread1.state:TIMED_WAITING</span></span><br></pre></td></tr></table></figure>\n<p>打印线程 thread1 堆栈信息，从堆栈信息第三行中可以看出是线程 wait 方法导致线程等待的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007f80a0129800 nid=0x5503 in Object.wait() [0x000070000856b000]</span><br><span class=\"line\">   java.lang.Thread.State: TIMED_WAITING (on object monitor)</span><br><span class=\"line\">\tat java.lang.Object.wait(Native Method)</span><br><span class=\"line\">\t- waiting on &lt;0x0000000715916d28&gt; (a java.lang.Class for org.example.thread.TimeWaitingState)</span><br><span class=\"line\">\tat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)</span><br><span class=\"line\">\t- locked &lt;0x0000000715916d28&gt; (a java.lang.Class for org.example.thread.TimeWaitingState)</span><br></pre></td></tr></table></figure>\n<h4 id=\"方式三：Thread-join-seconds\"><a href=\"#方式三：Thread-join-seconds\" class=\"headerlink\" title=\"方式三：Thread.join(seconds)\"></a>方式三：Thread.join(seconds)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeWaitingState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        <span class=\"comment\">//Thread.join 会让当前主线程等待thread1结束，需要等待500s</span></span><br><span class=\"line\">        thread1.join(<span class=\"number\">500</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Thread.join 会让当前主线程等待thread1结束，所以我们查看主线程堆栈信息: </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;main&quot; #1 prio=5 os_prio=31 tid=0x00007fa6d7009000 nid=0xd03 in Object.wait() [0x000070000feb9000]</span><br><span class=\"line\">   java.lang.Thread.State: TIMED_WAITING (on object monitor)</span><br><span class=\"line\">\tat java.lang.Object.wait(Native Method)</span><br><span class=\"line\">\t- waiting on &lt;0x000000071591c138&gt; (a org.example.thread.TimeWaitingState$1)</span><br><span class=\"line\">\tat java.lang.Thread.join(Thread.java:1260)</span><br><span class=\"line\">\t- locked &lt;0x000000071591c138&gt; (a org.example.thread.TimeWaitingState$1)</span><br><span class=\"line\">\tat org.example.thread.TimeWaitingState.main(TimeWaitingState.java:14)</span><br></pre></td></tr></table></figure>\n<h4 id=\"方式四：LockSupport-parkNanos-seconds\"><a href=\"#方式四：LockSupport-parkNanos-seconds\" class=\"headerlink\" title=\"方式四：LockSupport.parkNanos(seconds)\"></a>方式四：LockSupport.parkNanos(seconds)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeWaitingState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//等待500秒</span></span><br><span class=\"line\">                LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(<span class=\"number\">500</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        <span class=\"comment\">//模拟休眠1秒，让thread1运行到parkNanos方法处</span></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出： thread1.state:TIMED_WAITING</span></span><br></pre></td></tr></table></figure>\n<p>线程 thread1 堆栈信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007fb71b07a000 nid=0x5503 waiting on condition [0x0000700001da8000]</span><br><span class=\"line\">   java.lang.Thread.State: TIMED_WAITING (parking)</span><br><span class=\"line\">\tat sun.misc.Unsafe.park(Native Method)</span><br><span class=\"line\">\tat java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:338)</span><br><span class=\"line\">\tat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)</span><br></pre></td></tr></table></figure>\n<h4 id=\"方式五：LockSupport-parkUntil-seconds\"><a href=\"#方式五：LockSupport-parkUntil-seconds\" class=\"headerlink\" title=\"方式五：LockSupport.parkUntil(seconds)\"></a>方式五：LockSupport.parkUntil(seconds)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeWaitingState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//等待500秒</span></span><br><span class=\"line\">                LockSupport.parkUntil(System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(<span class=\"number\">500</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        <span class=\"comment\">//模拟休眠1秒，让thread1运行到parkNanos方法处</span></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出： thread1.state:TIMED_WAITING</span></span><br></pre></td></tr></table></figure>\n<p>线程 thread1 堆栈信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007ff41d076000 nid=0x5503 waiting on condition [0x00007000094df000]</span><br><span class=\"line\">   java.lang.Thread.State: TIMED_WAITING (parking)</span><br><span class=\"line\">\tat sun.misc.Unsafe.park(Native Method)</span><br><span class=\"line\">\tat java.util.concurrent.locks.LockSupport.parkUntil(LockSupport.java:372)</span><br><span class=\"line\">\tat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-6-状态6：-TERMINATED\"><a href=\"#1-6-状态6：-TERMINATED\" class=\"headerlink\" title=\"1.6 状态6： TERMINATED\"></a>1.6 状态6： TERMINATED</h3><p>执行完了 run()方法。其实这只是 Java 语言级别的一种状态，在操作系统内部可能已经注销了相应的线程，或者将它复用给其他需要使用线程的请求，而在 Java 语言级别只是通过 Java 代码看到的线程状态而已</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">官方描述：</span><br><span class=\"line\">Thread state for a terminated thread. The thread has completed execution.</span><br></pre></td></tr></table></figure>\n\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TerminatedState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"string\">&quot;thread1&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        <span class=\"comment\">//休眠1秒，等待thread1执行完毕</span></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;thread1 state:&quot;</span> + thread1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：Thread[thread1,5,main]</span></span><br><span class=\"line\"><span class=\"comment\">//     thread1 state:TERMINATED</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-状态转化\"><a href=\"#2-状态转化\" class=\"headerlink\" title=\"2.状态转化\"></a>2.状态转化</h2><p><img src=\"/thread-status/03.png\" alt=\"线程的状态\"><br><img src=\"/thread-status/01.jpg\" alt=\"线程的状态\"></p>\n"},{"title":"vue学习","comments":1,"abbrlink":50454,"date":"2021-07-23T03:40:44.000Z","translate_title":"vue-learning","_content":"\nObject.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。\n### 1. export\n---\n用于规定模块的对外接口，export输出变量和方法、类\n\n-   变量\n\n    ```javascript\n    // profile.js\n    export var firstName = 'Michael';\n    export var lastName = 'Jackson';\n    export var year = 1958;\n    \n    //简写--优先使用\n    export {firstName, lastName, year}\n    ```\n\n-   方法\n\n    ```javascript\n    //如果想为输入的变量重新命名， 可以使用AS 关键字重新命名\n    import { buildMenus as buildMenus} from '@/api/menu';\n    //import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同\n    ```\n\n### 2. export default\n\n为模块指定默认输出， 使用import命令的时候，用户需要知道所要加载的变量名和函数名，否则无法加载；了解模块有哪些方法和属性比较麻烦，使用export default命令，为模块指定默认输出\n\n```javascript\n// export-default.js\nexport default function () {\n  console.log('foo');\n}\n```\n\n上面代码是一个模块文件export-default.js。默认输出1个函数；\n\n与export命令的区别：其他模块加载该模块是，import命令可以为该匿名函数指定任意名字\n\n```javascript\n// import-default.js\nimport customName from './export-default';\ncustomName(); // 'foo'\n```\n\n上面代码的`import`命令，可以用任意名称指向`export-default.js`输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时`import`命令后面，不使用大括号。\n\n本质上，`export default`就是输出一个叫做`default`的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。\n\n```javascript\n// modules.js\nfunction add(x, y) {\n  return x * y;\n}\nexport {add as default};\n// 等同于\n// export default add;\n\n// app.js\nimport { default as foo } from 'modules';\n// 等同于\n// import foo from 'modules';\n```\n\n正是因为`export default`命令其实只是输出一个叫做`default`的变量，所以它后面不能跟变量声明语句。\n\n**总结：**\n\n-   export命令对外接口是有名称的且`import`命令从模块导入的变量名与被导入模块对外接口的名称相同，而export default命令对外输出的变量名可以是任意的，这时`import`命令后面，不使用大括号。\n\n-   `export default`命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此`export default`命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应`export default`命令。\n\n```javascript\n//menu.js\n//get请求获取所有的菜单信息\nexport function buildMenus() {\n  return request({\n    url: 'api/menus/build',\n    method: 'get'\n  })\n}\n//post 请求保存数据\nexport function add(data) {\n  return request({\n    url: 'api/menus',\n    method: 'post',\n    data\n  })\n}\n//delete 请求删除数据\nexport function del(id) {\n  return request({\n    url: 'api/menus/' + id,\n    method: 'delete'\n  })\n}\n//put请求修改数据\nexport function edit(data) {\n  return request({\n    url: 'api/menus',\n    method: 'put',\n    data\n  })\n}\n\n//app.vue\nimport { buildMenus } from '@/api/menu';\n```\n\n### 3. Const、var、let\n\n ES5 中作用域有：全局作用域、函数作用域。没有块作用域的概念。\n\n ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域\n\n```javascript\n{\n  var a = 1;\n  console.log(a); // 1\n}\nconsole.log(a); // 1\n// 通过var定义的变量可以跨块作用域访问到。\n\n(function A() {\n  var b = 2;\n  console.log(b); // 2\n})();\n// console.log(b); // 报错，\n// 可见，通过var定义的变量不能跨函数作用域访问到\n\nif(true) {\n  var c = 3;\n}\nconsole.log(c); // 3\nfor(var i = 0; i < 4; i ++) {\n  var d = 5;\n};\nconsole.log(i); // 4   (循环结束i已经是4，所以此处i为4)\nconsole.log(d); // 5\n// if语句和for语句中用var定义的变量可以在外面访问到，\n// 可见，if语句和for语句属于块作用域，不属于函数作用域\n```\n\n三者的区别：\n\n1.  var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。\n2.  let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。\n3.  const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。\n\n```javascript\n// 块作用域\n{\n  var a = 1;\n  let b = 2;\n  const c = 3;\n  // c = 4; // 报错\n  var aa;\n  let bb;\n  // const cc; // 报错\n  console.log(a); // 1\n  console.log(b); // 2\n  console.log(c); // 3\n  console.log(aa); // undefined\n  console.log(bb); // undefined\n}\nconsole.log(a); // 1\n// console.log(b); // 报错\n// console.log(c); // 报错\n\n// 函数作用域\n(function A() {\n  var d = 5;\n  let e = 6;\n  const f = 7;\n  console.log(d); // 5\n  console.log(e); // 6  \n  console.log(f); // 7 \n})();\n// console.log(d); // 报错\n// console.log(e); // 报错\n// console.log(f); // 报错\n\n```\n\n注意：**const定义的对象属性是否可以改变**\n\n```javascript\nconst person = {\n  name : 'jiuke',\n  sex : '男'\n}\nperson.name = 'test'\nconsole.log(person.name)//person对象的name属性确实被修改了\n```\n\n因为对象是引用类型的，person中保存的仅是对象的指针，这就意味着，const仅保证指针不发生改变，修改对象的属性不会改变对象的指针，所以是被允许的。也就是说const定义的引用类型只要指针不发生改变，其他的不论如何改变都是允许的。\n\n然后我们试着修改一下指针，让person指向一个新对象，果然报错\n\n```javascript\nconst person = {\n   name : 'jiuke',\n   sex : '男'\n}\nperson = {\n   name : 'test',\n   sex : '男'\n}\n//报错\n```\n\n### 4. promise\n\npromise用途：异步编程的一种解决方案。\n\n优点：比传统的解决方案——回调函数和事件——更合理和更强大。\n\n三种状态：`pending`（进行中）、`fulfilled`（已成功）和`rejected`（已失败）。\n\n```javascript\n//基本用法：\nconst promise = new Promise(function(resolve, reject) {\n    resolve(value);//表示异步操作成功\n    reject(error);//表示异步操作失败\n});\n\n//promise常用的几个方法\n//1. 异步状态为成功时调用第一个函数，为失败时调用第二个函数。then方法的第二个参数可选。\npromise.then(value => {},error => {});\n\n//2. 异步状态为失败时调用。\npromise.catch(error => {});\n\n//3. promise异步状态为失败时或then方法中抛出错误都会执行catch方法。\npromise.then(value => {},error => {}).catch(error => {});\n\n//4. 不管状态如何都会执行的操作。\npromise.finally(() => {});\n```\n\n### 5. 生命周期\n\n<img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n### 6. 模版语法\n\n#### v-once\n\n执行一次性插值，当数据变化的时候，该内容不会更新；可能会影响该节点其他的数据绑定\n\n```html\n<span v-once>这个将不会改变: {{ msg }}</span>\n```\n\n#### v-html\n\n双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用v-html;\n\n```html\nvar rawHtml = \"<span>这是个使用v-htmls</span>\"\n\n<p>Using mustaches: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\n#### [Attribute](https://cn.vuejs.org/v2/guide/syntax.html#Attribute)\n\nMustache ({}) 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 [`v-bind` 指令](https://cn.vuejs.org/v2/api/#v-bind)：\n\n```html\n<div v-bind:id=\"dynamicId\"></div>\n\n\n//isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 <button> 元素中\n<button v-bind:disabled=\"isButtonDisabled\">Button</button>\n```\n\n#### 三元表达式\n\n```html\n{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div v-bind:id=\"'list-' + id\"></div>\n\n//这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。\n<!-- 这是语句，不是表达式 -->\n{{ var a = 1 }}\n\n<!-- 流控制也不会生效，请使用三元表达式 -->\n{{ if (ok) { return message } }}\n```\n\n### 7. 指令Directives\n\n指令 (Directives) 是带有 `v-` 前缀的特殊 attribute。指令 attribute 的值预期是**单个 JavaScript 表达式** (`v-for` 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。\n\n```html\n//v-if 指令将根据表达式 seen 的值的真假来插入/移除 <p> 元素。\n<p v-if=\"seen\">现在你看到我了</p>\n```\n\n#### 参数\n\n一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，`v-bind` 指令可以用于响应式地更新 HTML attribute\n\n```html\n//href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定\n<a v-bind:href=\"url\">...</a>\n\n<a v-on:click=\"doSomething\">...</a>\n```\n\n#### 动态参数\n\n 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数\n\n```html\n<a v-bind:[attributeName] = \"url\"></a>\n<!--\n\t这里的attributeName会被作为一个javascript表达式进行动态赋值，求得的值会作为最终的参数来使用\n如果VUE实例有一个data. property. attributeName， 其值为href， 那么绑定将等价于v-bind:href\n--->\n```\n\n绑定处理函数：\n\n```html\n<a v-on:[eventName]=\"dosomething\"></a>\n```\n\n-   对动态参数的值的约束\n\n    动态参数预期会求出一个字符串，异常情况下值为 `null`。这个特殊的 `null` 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。\n\n-   对动态参数表达式的约束\n\n    动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：\n\n#### 修饰符\n\n修饰符（modifier）是以半角句号`.` 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定；例如` .prevent`修饰符告诉v-on指令对触发的事件调用event.preventDefault();\n\n```html\n<form v-on:submit.prevent = \"onSubmit\">\n  \n</form>\n```\n\n#### 缩写\n\n```html\n<!-- 完整语法 -->\n<a v-bind:href=\"url\">...</a>\n\n<!-- 缩写 -->\n<a :href=\"url\">...</a>\n\n<!-- 动态参数的缩写 (2.6.0+) -->\n<a :[key]=\"url\"> ... </a>\n\n\n<!-- 完整语法 -->\n<a v-on:click=\"doSomething\">...</a>\n\n<!-- 缩写 -->\n<a @click=\"doSomething\">...</a>\n\n<!-- 动态参数的缩写 (2.6.0+) -->\n<a @[event]=\"doSomething\"> ... </a>\n```\n\n`:` 与 `@` 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。\n\n### 8. 计算属性\n\n```html\n<div id=\"example\">\n  {{ message.split('').reverse().join('') }}\n</div>\n```\n\n这里是想要显示变量 `message` 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。\n\n所以，对于任何复杂逻辑，你都应当使用**计算属性**\n\n例如：\n\n```html\n<div id=\"example\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n```\n\n```javascript\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    // 计算属性的 getter\n    reversedMessage: function () {\n      // `this` 指向 vm 实例\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n\n//页面显示：\n//Original message: \"Hello\"\n//Computed reversed message: \"olleH\"\n```\n\n声明了一个计算属性`reversedMessage`；我们提供的函数将用作property `vm.reversedMessage`的getter函数\n\n```javascript\nconsole.log(vm.reversedMessage) // olleH\nvm.message = 'Goodbye'\nconsole.log(vm.reversedMessage) // => 'eybdooG'\n```\n\n你可以打开浏览器的控制台，自行修改例子中的 vm。`vm.reversedMessage` 的值始终取决于 `vm.message` 的值。\n\n你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 `vm.reversedMessage` 依赖于 `vm.message`，因此当 `vm.message` 发生改变时，所有依赖 `vm.reversedMessage` 的绑定也会更新。以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的。\n\n#### 计算属性 VS 方法\n\n使用表达式中调用方法同样可以达到上面的结果\n\n```html\n<p>Reversed message: \"{{ reversedMessage() }}\"</p>\n```\n\n```javascript\n// 在组件中\nmethods: {\n  reversedMessage: function () {\n    return this.message.split('').reverse().join('')\n  }\n}\n```\n\n我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是**计算属性是基于它们的响应式依赖进行缓存的**。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 `message` 还没有发生改变，多次访问 `reversedMessage` 计算属性会立即返回之前的计算结果，而不必再次执行函数。\n\n这也同样意味着下面的计算属性将不再更新，因为 `Date.now()` 不是响应式依赖：\n\n```\ncomputed: {\n  now: function () {\n    return Date.now()\n  }\n}\n```\n\n相比之下，每当触发重新渲染时，调用方法将**总会**再次执行函数。\n\n我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 **A**，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 **A**。如果没有缓存，我们将不可避免的多次执行 **A** 的 getter！如果你不希望有缓存，请用方法来替代。\n\n#### 计算属性 VS 侦听属性\n\n侦听属性：vue提供了一种更通用的方式来观察和响应vue实例上的数据变动；当有一些数据需要随着其他数据变动而变动时；很容易滥用watch;**通常更好的做法是使用计算属性而不是命令式的watch回调**；\n\n```html\n<div id=\"demo\">{{ fullName }}</div>\n```\n\n```javascript\nvar vm = new Vue({\n  el: '#demo',\n  data: {\n    firstName: 'Foo',\n    lastName: 'Bar',\n    fullName: 'Foo Bar'\n  },\n  //侦听属性watch \n  watch: {\n    firstName: function (val) {\n      this.fullName = val + ' ' + this.lastName\n    },\n    lastName: function (val) {\n      this.fullName = this.firstName + ' ' + val\n    }\n  },\n  //计算属性\n  computed: {\n    fullName: function () {\n      return this.firstName + ' ' + this.lastName\n    }\n  }\n})\n\n```\n\n#### 计算属性的setter\n\n计算属性默认只有getter，自己可以提供一个setter\n\n```javascript\ncomputed: {\n  fullName: {\n    // getter\n    get: function () {\n      return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n      var names = newValue.split(' ')\n      this.firstName = names[0]\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n```\n\n现在再运行 `vm.fullName = 'John Doe'` 时，setter 会被调用，`vm.firstName` 和 `vm.lastName` 也会相应地被更新。\n\n### 9. 侦听器\n\n当需要在数据变化时执行异步或开销较大的操作时，watch是最有用的；同时也可以自定义侦听器；\n\n```html\n<div id=\"watch-example\">\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\">\n  </p>\n  <p>{{ answer }}</p>\n</div>\n```\n\n```javascript\n<!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 -->\n<!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 -->\n<script src=\"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js\"></script>\n<script>\nvar watchExampleVM = new Vue({\n  el: '#watch-example',\n  data: {\n    question: '',\n    answer: 'I cannot give you an answer until you ask a question!'\n  },\n  watch: {\n    // 如果 `question` 发生改变，这个函数就会运行\n    question: function (newQuestion, oldQuestion) {\n      this.answer = 'Waiting for you to stop typing...'\n      this.debouncedGetAnswer()\n    }\n  },\n  created: function () {\n    // `_.debounce` 是一个通过 Lodash 限制操作频率的函数。\n    // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率\n    // AJAX 请求直到用户输入完毕才会发出。想要了解更多关于\n    // `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，\n    // 请参考：https://lodash.com/docs#debounce\n    this.debouncedGetAnswer = _.debounce(this.getAnswer, 500)\n  },\n  methods: {\n    getAnswer: function () {\n      if (this.question.indexOf('?') === -1) {\n        this.answer = 'Questions usually contain a question mark. ;-)'\n        return\n      }\n      this.answer = 'Thinking...'\n      var vm = this\n      axios.get('https://yesno.wtf/api')\n        .then(function (response) {\n          vm.answer = _.capitalize(response.data.answer)\n        })\n        //异常捕获\n        .catch(function (error) {\n          vm.answer = 'Error! Could not reach the API. ' + error\n        })\n    }\n  }\n})\n</script>\n```\n\n使用 `watch` 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的\n\n### 10. class与style绑定\n\n将 `v-bind` 用于 `class` 和 `style` 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组\n\n#### 10.1 绑定html class\n\n##### 10.1.1对象语法\n\n方式一：内联\n\n```html\n<div\n  class=\"static\"\n  v-bind:class=\"{ active: isActive, 'text-danger': hasError }\"\n></div>\n//data\ndata: {\n  isActive: true,\n  hasError: false\n}\n```\n\n方式二：绑定的数据对象不必内联定义在模板里\n\n```html\n<div v-bind:class=\"classObject\"></div>\n//vue data\ndata: {\n  classObject: {\n    active: true,\n    'text-danger': false\n  }\n}\n```\n\n方式三：绑定一个返回对象的计算属性（常用）\n\n```html\n<div v-bind:class=\"classObject\"></div>\n\n//vue data\ndata: {\n  isActive: true,\n  error: null\n},\ncomputed: {\n  classObject: function () {\n    return {\n      active: this.isActive && !this.error,\n      'text-danger': this.error && this.error.type === 'fatal'\n    }\n  }\n}\n```\n\n##### 10.1.2 数组语法\n\n","source":"_posts/2021/07/vue.md","raw":"---\ntitle: vue学习\ntags: vue\ncategories: 架构师笔记\ncomments: true\nabbrlink: 50454\ndate: 2021-07-23 11:40:44\ntranslate_title: vue-learning\n---\n\nObject.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。\n### 1. export\n---\n用于规定模块的对外接口，export输出变量和方法、类\n\n-   变量\n\n    ```javascript\n    // profile.js\n    export var firstName = 'Michael';\n    export var lastName = 'Jackson';\n    export var year = 1958;\n    \n    //简写--优先使用\n    export {firstName, lastName, year}\n    ```\n\n-   方法\n\n    ```javascript\n    //如果想为输入的变量重新命名， 可以使用AS 关键字重新命名\n    import { buildMenus as buildMenus} from '@/api/menu';\n    //import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同\n    ```\n\n### 2. export default\n\n为模块指定默认输出， 使用import命令的时候，用户需要知道所要加载的变量名和函数名，否则无法加载；了解模块有哪些方法和属性比较麻烦，使用export default命令，为模块指定默认输出\n\n```javascript\n// export-default.js\nexport default function () {\n  console.log('foo');\n}\n```\n\n上面代码是一个模块文件export-default.js。默认输出1个函数；\n\n与export命令的区别：其他模块加载该模块是，import命令可以为该匿名函数指定任意名字\n\n```javascript\n// import-default.js\nimport customName from './export-default';\ncustomName(); // 'foo'\n```\n\n上面代码的`import`命令，可以用任意名称指向`export-default.js`输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时`import`命令后面，不使用大括号。\n\n本质上，`export default`就是输出一个叫做`default`的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。\n\n```javascript\n// modules.js\nfunction add(x, y) {\n  return x * y;\n}\nexport {add as default};\n// 等同于\n// export default add;\n\n// app.js\nimport { default as foo } from 'modules';\n// 等同于\n// import foo from 'modules';\n```\n\n正是因为`export default`命令其实只是输出一个叫做`default`的变量，所以它后面不能跟变量声明语句。\n\n**总结：**\n\n-   export命令对外接口是有名称的且`import`命令从模块导入的变量名与被导入模块对外接口的名称相同，而export default命令对外输出的变量名可以是任意的，这时`import`命令后面，不使用大括号。\n\n-   `export default`命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此`export default`命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应`export default`命令。\n\n```javascript\n//menu.js\n//get请求获取所有的菜单信息\nexport function buildMenus() {\n  return request({\n    url: 'api/menus/build',\n    method: 'get'\n  })\n}\n//post 请求保存数据\nexport function add(data) {\n  return request({\n    url: 'api/menus',\n    method: 'post',\n    data\n  })\n}\n//delete 请求删除数据\nexport function del(id) {\n  return request({\n    url: 'api/menus/' + id,\n    method: 'delete'\n  })\n}\n//put请求修改数据\nexport function edit(data) {\n  return request({\n    url: 'api/menus',\n    method: 'put',\n    data\n  })\n}\n\n//app.vue\nimport { buildMenus } from '@/api/menu';\n```\n\n### 3. Const、var、let\n\n ES5 中作用域有：全局作用域、函数作用域。没有块作用域的概念。\n\n ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域\n\n```javascript\n{\n  var a = 1;\n  console.log(a); // 1\n}\nconsole.log(a); // 1\n// 通过var定义的变量可以跨块作用域访问到。\n\n(function A() {\n  var b = 2;\n  console.log(b); // 2\n})();\n// console.log(b); // 报错，\n// 可见，通过var定义的变量不能跨函数作用域访问到\n\nif(true) {\n  var c = 3;\n}\nconsole.log(c); // 3\nfor(var i = 0; i < 4; i ++) {\n  var d = 5;\n};\nconsole.log(i); // 4   (循环结束i已经是4，所以此处i为4)\nconsole.log(d); // 5\n// if语句和for语句中用var定义的变量可以在外面访问到，\n// 可见，if语句和for语句属于块作用域，不属于函数作用域\n```\n\n三者的区别：\n\n1.  var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。\n2.  let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。\n3.  const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。\n\n```javascript\n// 块作用域\n{\n  var a = 1;\n  let b = 2;\n  const c = 3;\n  // c = 4; // 报错\n  var aa;\n  let bb;\n  // const cc; // 报错\n  console.log(a); // 1\n  console.log(b); // 2\n  console.log(c); // 3\n  console.log(aa); // undefined\n  console.log(bb); // undefined\n}\nconsole.log(a); // 1\n// console.log(b); // 报错\n// console.log(c); // 报错\n\n// 函数作用域\n(function A() {\n  var d = 5;\n  let e = 6;\n  const f = 7;\n  console.log(d); // 5\n  console.log(e); // 6  \n  console.log(f); // 7 \n})();\n// console.log(d); // 报错\n// console.log(e); // 报错\n// console.log(f); // 报错\n\n```\n\n注意：**const定义的对象属性是否可以改变**\n\n```javascript\nconst person = {\n  name : 'jiuke',\n  sex : '男'\n}\nperson.name = 'test'\nconsole.log(person.name)//person对象的name属性确实被修改了\n```\n\n因为对象是引用类型的，person中保存的仅是对象的指针，这就意味着，const仅保证指针不发生改变，修改对象的属性不会改变对象的指针，所以是被允许的。也就是说const定义的引用类型只要指针不发生改变，其他的不论如何改变都是允许的。\n\n然后我们试着修改一下指针，让person指向一个新对象，果然报错\n\n```javascript\nconst person = {\n   name : 'jiuke',\n   sex : '男'\n}\nperson = {\n   name : 'test',\n   sex : '男'\n}\n//报错\n```\n\n### 4. promise\n\npromise用途：异步编程的一种解决方案。\n\n优点：比传统的解决方案——回调函数和事件——更合理和更强大。\n\n三种状态：`pending`（进行中）、`fulfilled`（已成功）和`rejected`（已失败）。\n\n```javascript\n//基本用法：\nconst promise = new Promise(function(resolve, reject) {\n    resolve(value);//表示异步操作成功\n    reject(error);//表示异步操作失败\n});\n\n//promise常用的几个方法\n//1. 异步状态为成功时调用第一个函数，为失败时调用第二个函数。then方法的第二个参数可选。\npromise.then(value => {},error => {});\n\n//2. 异步状态为失败时调用。\npromise.catch(error => {});\n\n//3. promise异步状态为失败时或then方法中抛出错误都会执行catch方法。\npromise.then(value => {},error => {}).catch(error => {});\n\n//4. 不管状态如何都会执行的操作。\npromise.finally(() => {});\n```\n\n### 5. 生命周期\n\n<img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n### 6. 模版语法\n\n#### v-once\n\n执行一次性插值，当数据变化的时候，该内容不会更新；可能会影响该节点其他的数据绑定\n\n```html\n<span v-once>这个将不会改变: {{ msg }}</span>\n```\n\n#### v-html\n\n双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用v-html;\n\n```html\nvar rawHtml = \"<span>这是个使用v-htmls</span>\"\n\n<p>Using mustaches: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\n#### [Attribute](https://cn.vuejs.org/v2/guide/syntax.html#Attribute)\n\nMustache ({}) 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 [`v-bind` 指令](https://cn.vuejs.org/v2/api/#v-bind)：\n\n```html\n<div v-bind:id=\"dynamicId\"></div>\n\n\n//isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 <button> 元素中\n<button v-bind:disabled=\"isButtonDisabled\">Button</button>\n```\n\n#### 三元表达式\n\n```html\n{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div v-bind:id=\"'list-' + id\"></div>\n\n//这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。\n<!-- 这是语句，不是表达式 -->\n{{ var a = 1 }}\n\n<!-- 流控制也不会生效，请使用三元表达式 -->\n{{ if (ok) { return message } }}\n```\n\n### 7. 指令Directives\n\n指令 (Directives) 是带有 `v-` 前缀的特殊 attribute。指令 attribute 的值预期是**单个 JavaScript 表达式** (`v-for` 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。\n\n```html\n//v-if 指令将根据表达式 seen 的值的真假来插入/移除 <p> 元素。\n<p v-if=\"seen\">现在你看到我了</p>\n```\n\n#### 参数\n\n一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，`v-bind` 指令可以用于响应式地更新 HTML attribute\n\n```html\n//href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定\n<a v-bind:href=\"url\">...</a>\n\n<a v-on:click=\"doSomething\">...</a>\n```\n\n#### 动态参数\n\n 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数\n\n```html\n<a v-bind:[attributeName] = \"url\"></a>\n<!--\n\t这里的attributeName会被作为一个javascript表达式进行动态赋值，求得的值会作为最终的参数来使用\n如果VUE实例有一个data. property. attributeName， 其值为href， 那么绑定将等价于v-bind:href\n--->\n```\n\n绑定处理函数：\n\n```html\n<a v-on:[eventName]=\"dosomething\"></a>\n```\n\n-   对动态参数的值的约束\n\n    动态参数预期会求出一个字符串，异常情况下值为 `null`。这个特殊的 `null` 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。\n\n-   对动态参数表达式的约束\n\n    动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：\n\n#### 修饰符\n\n修饰符（modifier）是以半角句号`.` 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定；例如` .prevent`修饰符告诉v-on指令对触发的事件调用event.preventDefault();\n\n```html\n<form v-on:submit.prevent = \"onSubmit\">\n  \n</form>\n```\n\n#### 缩写\n\n```html\n<!-- 完整语法 -->\n<a v-bind:href=\"url\">...</a>\n\n<!-- 缩写 -->\n<a :href=\"url\">...</a>\n\n<!-- 动态参数的缩写 (2.6.0+) -->\n<a :[key]=\"url\"> ... </a>\n\n\n<!-- 完整语法 -->\n<a v-on:click=\"doSomething\">...</a>\n\n<!-- 缩写 -->\n<a @click=\"doSomething\">...</a>\n\n<!-- 动态参数的缩写 (2.6.0+) -->\n<a @[event]=\"doSomething\"> ... </a>\n```\n\n`:` 与 `@` 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。\n\n### 8. 计算属性\n\n```html\n<div id=\"example\">\n  {{ message.split('').reverse().join('') }}\n</div>\n```\n\n这里是想要显示变量 `message` 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。\n\n所以，对于任何复杂逻辑，你都应当使用**计算属性**\n\n例如：\n\n```html\n<div id=\"example\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n```\n\n```javascript\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    // 计算属性的 getter\n    reversedMessage: function () {\n      // `this` 指向 vm 实例\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n\n//页面显示：\n//Original message: \"Hello\"\n//Computed reversed message: \"olleH\"\n```\n\n声明了一个计算属性`reversedMessage`；我们提供的函数将用作property `vm.reversedMessage`的getter函数\n\n```javascript\nconsole.log(vm.reversedMessage) // olleH\nvm.message = 'Goodbye'\nconsole.log(vm.reversedMessage) // => 'eybdooG'\n```\n\n你可以打开浏览器的控制台，自行修改例子中的 vm。`vm.reversedMessage` 的值始终取决于 `vm.message` 的值。\n\n你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 `vm.reversedMessage` 依赖于 `vm.message`，因此当 `vm.message` 发生改变时，所有依赖 `vm.reversedMessage` 的绑定也会更新。以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的。\n\n#### 计算属性 VS 方法\n\n使用表达式中调用方法同样可以达到上面的结果\n\n```html\n<p>Reversed message: \"{{ reversedMessage() }}\"</p>\n```\n\n```javascript\n// 在组件中\nmethods: {\n  reversedMessage: function () {\n    return this.message.split('').reverse().join('')\n  }\n}\n```\n\n我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是**计算属性是基于它们的响应式依赖进行缓存的**。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 `message` 还没有发生改变，多次访问 `reversedMessage` 计算属性会立即返回之前的计算结果，而不必再次执行函数。\n\n这也同样意味着下面的计算属性将不再更新，因为 `Date.now()` 不是响应式依赖：\n\n```\ncomputed: {\n  now: function () {\n    return Date.now()\n  }\n}\n```\n\n相比之下，每当触发重新渲染时，调用方法将**总会**再次执行函数。\n\n我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 **A**，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 **A**。如果没有缓存，我们将不可避免的多次执行 **A** 的 getter！如果你不希望有缓存，请用方法来替代。\n\n#### 计算属性 VS 侦听属性\n\n侦听属性：vue提供了一种更通用的方式来观察和响应vue实例上的数据变动；当有一些数据需要随着其他数据变动而变动时；很容易滥用watch;**通常更好的做法是使用计算属性而不是命令式的watch回调**；\n\n```html\n<div id=\"demo\">{{ fullName }}</div>\n```\n\n```javascript\nvar vm = new Vue({\n  el: '#demo',\n  data: {\n    firstName: 'Foo',\n    lastName: 'Bar',\n    fullName: 'Foo Bar'\n  },\n  //侦听属性watch \n  watch: {\n    firstName: function (val) {\n      this.fullName = val + ' ' + this.lastName\n    },\n    lastName: function (val) {\n      this.fullName = this.firstName + ' ' + val\n    }\n  },\n  //计算属性\n  computed: {\n    fullName: function () {\n      return this.firstName + ' ' + this.lastName\n    }\n  }\n})\n\n```\n\n#### 计算属性的setter\n\n计算属性默认只有getter，自己可以提供一个setter\n\n```javascript\ncomputed: {\n  fullName: {\n    // getter\n    get: function () {\n      return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n      var names = newValue.split(' ')\n      this.firstName = names[0]\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n```\n\n现在再运行 `vm.fullName = 'John Doe'` 时，setter 会被调用，`vm.firstName` 和 `vm.lastName` 也会相应地被更新。\n\n### 9. 侦听器\n\n当需要在数据变化时执行异步或开销较大的操作时，watch是最有用的；同时也可以自定义侦听器；\n\n```html\n<div id=\"watch-example\">\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\">\n  </p>\n  <p>{{ answer }}</p>\n</div>\n```\n\n```javascript\n<!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 -->\n<!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 -->\n<script src=\"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js\"></script>\n<script>\nvar watchExampleVM = new Vue({\n  el: '#watch-example',\n  data: {\n    question: '',\n    answer: 'I cannot give you an answer until you ask a question!'\n  },\n  watch: {\n    // 如果 `question` 发生改变，这个函数就会运行\n    question: function (newQuestion, oldQuestion) {\n      this.answer = 'Waiting for you to stop typing...'\n      this.debouncedGetAnswer()\n    }\n  },\n  created: function () {\n    // `_.debounce` 是一个通过 Lodash 限制操作频率的函数。\n    // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率\n    // AJAX 请求直到用户输入完毕才会发出。想要了解更多关于\n    // `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，\n    // 请参考：https://lodash.com/docs#debounce\n    this.debouncedGetAnswer = _.debounce(this.getAnswer, 500)\n  },\n  methods: {\n    getAnswer: function () {\n      if (this.question.indexOf('?') === -1) {\n        this.answer = 'Questions usually contain a question mark. ;-)'\n        return\n      }\n      this.answer = 'Thinking...'\n      var vm = this\n      axios.get('https://yesno.wtf/api')\n        .then(function (response) {\n          vm.answer = _.capitalize(response.data.answer)\n        })\n        //异常捕获\n        .catch(function (error) {\n          vm.answer = 'Error! Could not reach the API. ' + error\n        })\n    }\n  }\n})\n</script>\n```\n\n使用 `watch` 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的\n\n### 10. class与style绑定\n\n将 `v-bind` 用于 `class` 和 `style` 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组\n\n#### 10.1 绑定html class\n\n##### 10.1.1对象语法\n\n方式一：内联\n\n```html\n<div\n  class=\"static\"\n  v-bind:class=\"{ active: isActive, 'text-danger': hasError }\"\n></div>\n//data\ndata: {\n  isActive: true,\n  hasError: false\n}\n```\n\n方式二：绑定的数据对象不必内联定义在模板里\n\n```html\n<div v-bind:class=\"classObject\"></div>\n//vue data\ndata: {\n  classObject: {\n    active: true,\n    'text-danger': false\n  }\n}\n```\n\n方式三：绑定一个返回对象的计算属性（常用）\n\n```html\n<div v-bind:class=\"classObject\"></div>\n\n//vue data\ndata: {\n  isActive: true,\n  error: null\n},\ncomputed: {\n  classObject: function () {\n    return {\n      active: this.isActive && !this.error,\n      'text-danger': this.error && this.error.type === 'fatal'\n    }\n  }\n}\n```\n\n##### 10.1.2 数组语法\n\n","slug":"vue","published":1,"updated":"2022-04-25T07:02:49.241Z","layout":"post","photos":[],"link":"","_id":"cl424hx6t006qad5ieb7g2694","content":"<p>Object.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。</p>\n<h3 id=\"1-export\"><a href=\"#1-export\" class=\"headerlink\" title=\"1. export\"></a>1. export</h3><hr>\n<p>用于规定模块的对外接口，export输出变量和方法、类</p>\n<ul>\n<li><p>变量</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// profile.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> firstName = <span class=\"string\">&#x27;Michael&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> lastName = <span class=\"string\">&#x27;Jackson&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> year = <span class=\"number\">1958</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简写--优先使用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;firstName, lastName, year&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>方法</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果想为输入的变量重新命名， 可以使用AS 关键字重新命名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; buildMenus <span class=\"keyword\">as</span> buildMenus&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/menu&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-export-default\"><a href=\"#2-export-default\" class=\"headerlink\" title=\"2. export default\"></a>2. export default</h3><p>为模块指定默认输出， 使用import命令的时候，用户需要知道所要加载的变量名和函数名，否则无法加载；了解模块有哪些方法和属性比较麻烦，使用export default命令，为模块指定默认输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码是一个模块文件export-default.js。默认输出1个函数；</p>\n<p>与export命令的区别：其他模块加载该模块是，import命令可以为该匿名函数指定任意名字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> customName <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./export-default&#x27;</span>;</span><br><span class=\"line\">customName(); <span class=\"comment\">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码的<code>import</code>命令，可以用任意名称指向<code>export-default.js</code>输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时<code>import</code>命令后面，不使用大括号。</p>\n<p>本质上，<code>export default</code>就是输出一个叫做<code>default</code>的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// modules.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;add <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"comment\">// export default add;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> foo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;modules&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"comment\">// import foo from &#x27;modules&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p>正是因为<code>export default</code>命令其实只是输出一个叫做<code>default</code>的变量，所以它后面不能跟变量声明语句。</p>\n<p><strong>总结：</strong></p>\n<ul>\n<li><p>  export命令对外接口是有名称的且<code>import</code>命令从模块导入的变量名与被导入模块对外接口的名称相同，而export default命令对外输出的变量名可以是任意的，这时<code>import</code>命令后面，不使用大括号。</p>\n</li>\n<li><p>  <code>export default</code>命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此<code>export default</code>命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应<code>export default</code>命令。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//menu.js</span></span><br><span class=\"line\"><span class=\"comment\">//get请求获取所有的菜单信息</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildMenus</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus/build&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;get&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//post 请求保存数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//delete 请求删除数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">del</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus/&#x27;</span> + id,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;delete&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//put请求修改数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">edit</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;put&#x27;</span>,</span><br><span class=\"line\">    data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//app.vue</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; buildMenus &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/menu&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Const、var、let\"><a href=\"#3-Const、var、let\" class=\"headerlink\" title=\"3. Const、var、let\"></a>3. Const、var、let</h3><p> ES5 中作用域有：全局作用域、函数作用域。没有块作用域的概念。</p>\n<p> ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 通过var定义的变量可以跨块作用域访问到。</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// console.log(b); // 报错，</span></span><br><span class=\"line\"><span class=\"comment\">// 可见，通过var定义的变量不能跨函数作用域访问到</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i ++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 4   (循环结束i已经是4，所以此处i为4)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"comment\">// if语句和for语句中用var定义的变量可以在外面访问到，</span></span><br><span class=\"line\"><span class=\"comment\">// 可见，if语句和for语句属于块作用域，不属于函数作用域</span></span><br></pre></td></tr></table></figure>\n\n<p>三者的区别：</p>\n<ol>\n<li> var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。</li>\n<li> let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。</li>\n<li> const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 块作用域</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// c = 4; // 报错</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> aa;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> bb;</span><br><span class=\"line\">  <span class=\"comment\">// const cc; // 报错</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(aa); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(bb); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(b); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(c); // 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数作用域</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> e = <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f = <span class=\"number\">7</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 5</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// 6  </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f); <span class=\"comment\">// 7 </span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// console.log(d); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(e); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(f); // 报错</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意：<strong>const定义的对象属性是否可以改变</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span> : <span class=\"string\">&#x27;jiuke&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.name = <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name)<span class=\"comment\">//person对象的name属性确实被修改了</span></span><br></pre></td></tr></table></figure>\n\n<p>因为对象是引用类型的，person中保存的仅是对象的指针，这就意味着，const仅保证指针不发生改变，修改对象的属性不会改变对象的指针，所以是被允许的。也就是说const定义的引用类型只要指针不发生改变，其他的不论如何改变都是允许的。</p>\n<p>然后我们试着修改一下指针，让person指向一个新对象，果然报错</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">&#x27;jiuke&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">&#x27;test&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-promise\"><a href=\"#4-promise\" class=\"headerlink\" title=\"4. promise\"></a>4. promise</h3><p>promise用途：异步编程的一种解决方案。</p>\n<p>优点：比传统的解决方案——回调函数和事件——更合理和更强大。</p>\n<p>三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基本用法：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    resolve(value);<span class=\"comment\">//表示异步操作成功</span></span><br><span class=\"line\">    reject(error);<span class=\"comment\">//表示异步操作失败</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//promise常用的几个方法</span></span><br><span class=\"line\"><span class=\"comment\">//1. 异步状态为成功时调用第一个函数，为失败时调用第二个函数。then方法的第二个参数可选。</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;&#125;,<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 异步状态为失败时调用。</span></span><br><span class=\"line\">promise.catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. promise异步状态为失败时或then方法中抛出错误都会执行catch方法。</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;&#125;,<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4. 不管状态如何都会执行的操作。</span></span><br><span class=\"line\">promise.finally(<span class=\"function\">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-生命周期\"><a href=\"#5-生命周期\" class=\"headerlink\" title=\"5. 生命周期\"></a>5. 生命周期</h3><img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"img\" style=\"zoom:50%;\">\n\n<h3 id=\"6-模版语法\"><a href=\"#6-模版语法\" class=\"headerlink\" title=\"6. 模版语法\"></a>6. 模版语法</h3><h4 id=\"v-once\"><a href=\"#v-once\" class=\"headerlink\" title=\"v-once\"></a>v-once</h4><p>执行一次性插值，当数据变化的时候，该内容不会更新；可能会影响该节点其他的数据绑定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>这个将不会改变: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h4><p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用v-html;</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var rawHtml = &quot;<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是个使用v-htmls<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using v-html directive: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">&quot;rawHtml&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Attribute\"><a href=\"#Attribute\" class=\"headerlink\" title=\"Attribute\"></a><a href=\"https://cn.vuejs.org/v2/guide/syntax.html#Attribute\">Attribute</a></h4><p>Mustache ({}) 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 <a href=\"https://cn.vuejs.org/v2/api/#v-bind\"><code>v-bind</code> 指令</a>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;dynamicId&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> 元素中</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:disabled</span>=<span class=\"string\">&quot;isButtonDisabled&quot;</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三元表达式\"><a href=\"#三元表达式\" class=\"headerlink\" title=\"三元表达式\"></a>三元表达式</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; number + 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-指令Directives\"><a href=\"#7-指令Directives\" class=\"headerlink\" title=\"7. 指令Directives\"></a>7. 指令Directives</h3><p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊 attribute。指令 attribute 的值预期是<strong>单个 JavaScript 表达式</strong> (<code>v-for</code> 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//v-if 指令将根据表达式 seen 的值的真假来插入/移除 <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 元素。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，<code>v-bind</code> 指令可以用于响应式地更新 HTML attribute</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动态参数\"><a href=\"#动态参数\" class=\"headerlink\" title=\"动态参数\"></a>动态参数</h4><p> 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:</span>[<span class=\"attr\">attributeName</span>] = <span class=\"string\">&quot;url&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t这里的attributeName会被作为一个javascript表达式进行动态赋值，求得的值会作为最终的参数来使用</span></span><br><span class=\"line\"><span class=\"comment\">如果VUE实例有一个data. property. attributeName， 其值为href， 那么绑定将等价于v-bind:href</span></span><br><span class=\"line\"><span class=\"comment\">---&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>绑定处理函数：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:</span>[<span class=\"attr\">eventName</span>]=<span class=\"string\">&quot;dosomething&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>对动态参数的值的约束</p>\n<p>  动态参数预期会求出一个字符串，异常情况下值为 <code>null</code>。这个特殊的 <code>null</code> 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p>\n</li>\n<li><p>对动态参数表达式的约束</p>\n<p>  动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：</p>\n</li>\n</ul>\n<h4 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h4><p>修饰符（modifier）是以半角句号<code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定；例如<code> .prevent</code>修饰符告诉v-on指令对触发的事件调用event.preventDefault();</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span> = <span class=\"string\">&quot;onSubmit&quot;</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"缩写\"><a href=\"#缩写\" class=\"headerlink\" title=\"缩写\"></a>缩写</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:</span>[<span class=\"attr\">key</span>]=<span class=\"string\">&quot;url&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @[<span class=\"attr\">event</span>]=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>:</code> 与 <code>@</code> 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。</p>\n<h3 id=\"8-计算属性\"><a href=\"#8-计算属性\" class=\"headerlink\" title=\"8. 计算属性\"></a>8. 计算属性</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里是想要显示变量 <code>message</code> 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。</p>\n<p>所以，对于任何复杂逻辑，你都应当使用<strong>计算属性</strong></p>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Original message: &quot;&#123;&#123; message &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#example&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Hello&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 计算属性的 getter</span></span><br><span class=\"line\">    <span class=\"attr\">reversedMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// `this` 指向 vm 实例</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//页面显示：</span></span><br><span class=\"line\"><span class=\"comment\">//Original message: &quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//Computed reversed message: &quot;olleH&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>声明了一个计算属性<code>reversedMessage</code>；我们提供的函数将用作property <code>vm.reversedMessage</code>的getter函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// olleH</span></span><br><span class=\"line\">vm.message = <span class=\"string\">&#x27;Goodbye&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// =&gt; &#x27;eybdooG&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以打开浏览器的控制台，自行修改例子中的 vm。<code>vm.reversedMessage</code> 的值始终取决于 <code>vm.message</code> 的值。</p>\n<p>你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 <code>vm.reversedMessage</code> 依赖于 <code>vm.message</code>，因此当 <code>vm.message</code> 发生改变时，所有依赖 <code>vm.reversedMessage</code> 的绑定也会更新。以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的。</p>\n<h4 id=\"计算属性-VS-方法\"><a href=\"#计算属性-VS-方法\" class=\"headerlink\" title=\"计算属性 VS 方法\"></a>计算属性 VS 方法</h4><p>使用表达式中调用方法同样可以达到上面的结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Reversed message: &quot;&#123;&#123; reversedMessage() &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在组件中</span></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">reversedMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>\n<p>这也同样意味着下面的计算属性将不再更新，因为 <code>Date.now()</code> 不是响应式依赖：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  now: function () &#123;</span><br><span class=\"line\">    return Date.now()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>相比之下，每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数。</p>\n<p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <strong>A</strong>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong>。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 getter！如果你不希望有缓存，请用方法来替代。</p>\n<h4 id=\"计算属性-VS-侦听属性\"><a href=\"#计算属性-VS-侦听属性\" class=\"headerlink\" title=\"计算属性 VS 侦听属性\"></a>计算属性 VS 侦听属性</h4><p>侦听属性：vue提供了一种更通用的方式来观察和响应vue实例上的数据变动；当有一些数据需要随着其他数据变动而变动时；很容易滥用watch;<strong>通常更好的做法是使用计算属性而不是命令式的watch回调</strong>；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#demo&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Bar&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"string\">&#x27;Foo Bar&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//侦听属性watch </span></span><br><span class=\"line\">  <span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.fullName = val + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.fullName = <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//计算属性</span></span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"计算属性的setter\"><a href=\"#计算属性的setter\" class=\"headerlink\" title=\"计算属性的setter\"></a>计算属性的setter</h4><p>计算属性默认只有getter，自己可以提供一个setter</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  <span class=\"attr\">fullName</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// getter</span></span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// setter</span></span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在再运行 <code>vm.fullName = &#39;John Doe&#39;</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。</p>\n<h3 id=\"9-侦听器\"><a href=\"#9-侦听器\" class=\"headerlink\" title=\"9. 侦听器\"></a>9. 侦听器</h3><p>当需要在数据变化时执行异步或开销较大的操作时，watch是最有用的；同时也可以自定义侦听器；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;watch-example&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    Ask a yes/no question:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;question&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span><br><span class=\"line\">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">var</span> watchExampleVM = <span class=\"keyword\">new</span> Vue(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#watch-example&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">data</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">question</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">answer</span>: <span class=\"string\">&#x27;I cannot give you an answer until you ask a question!&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">watch</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 如果 `question` 发生改变，这个函数就会运行</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">question</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newQuestion, oldQuestion</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Waiting for you to stop typing...&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.debouncedGetAnswer()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 请参考：https://lodash.com/docs#debounce</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">this</span>.debouncedGetAnswer = _.debounce(<span class=\"built_in\">this</span>.getAnswer, <span class=\"number\">500</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">getAnswer</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.question.indexOf(<span class=\"string\">&#x27;?&#x27;</span>) === -<span class=\"number\">1</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Questions usually contain a question mark. ;-)&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">return</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Thinking...&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">var</span> vm = <span class=\"built_in\">this</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      axios.get(<span class=\"string\">&#x27;https://yesno.wtf/api&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          vm.answer = _.capitalize(response.data.answer)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"comment\">//异常捕获</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          vm.answer = <span class=\"string\">&#x27;Error! Could not reach the API. &#x27;</span> + error</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>watch</code> 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的</p>\n<h3 id=\"10-class与style绑定\"><a href=\"#10-class与style绑定\" class=\"headerlink\" title=\"10. class与style绑定\"></a>10. class与style绑定</h3><p>将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组</p>\n<h4 id=\"10-1-绑定html-class\"><a href=\"#10-1-绑定html-class\" class=\"headerlink\" title=\"10.1 绑定html class\"></a>10.1 绑定html class</h4><h5 id=\"10-1-1对象语法\"><a href=\"#10-1-1对象语法\" class=\"headerlink\" title=\"10.1.1对象语法\"></a>10.1.1对象语法</h5><p>方式一：内联</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">&quot;static&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">//data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  hasError: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方式二：绑定的数据对象不必内联定义在模板里</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">//vue data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  classObject: &#123;</span><br><span class=\"line\">    active: true,</span><br><span class=\"line\">    &#x27;text-danger&#x27;: false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方式三：绑定一个返回对象的计算属性（常用）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//vue data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  error: null</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  classObject: function () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      active: this.isActive &amp;&amp; !this.error,</span><br><span class=\"line\">      &#x27;text-danger&#x27;: this.error &amp;&amp; this.error.type === &#x27;fatal&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"10-1-2-数组语法\"><a href=\"#10-1-2-数组语法\" class=\"headerlink\" title=\"10.1.2 数组语法\"></a>10.1.2 数组语法</h5>","site":{"data":{"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}}},"excerpt":"","more":"<p>Object.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。</p>\n<h3 id=\"1-export\"><a href=\"#1-export\" class=\"headerlink\" title=\"1. export\"></a>1. export</h3><hr>\n<p>用于规定模块的对外接口，export输出变量和方法、类</p>\n<ul>\n<li><p>变量</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// profile.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> firstName = <span class=\"string\">&#x27;Michael&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> lastName = <span class=\"string\">&#x27;Jackson&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> year = <span class=\"number\">1958</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简写--优先使用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;firstName, lastName, year&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>方法</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果想为输入的变量重新命名， 可以使用AS 关键字重新命名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; buildMenus <span class=\"keyword\">as</span> buildMenus&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/menu&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-export-default\"><a href=\"#2-export-default\" class=\"headerlink\" title=\"2. export default\"></a>2. export default</h3><p>为模块指定默认输出， 使用import命令的时候，用户需要知道所要加载的变量名和函数名，否则无法加载；了解模块有哪些方法和属性比较麻烦，使用export default命令，为模块指定默认输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码是一个模块文件export-default.js。默认输出1个函数；</p>\n<p>与export命令的区别：其他模块加载该模块是，import命令可以为该匿名函数指定任意名字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> customName <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./export-default&#x27;</span>;</span><br><span class=\"line\">customName(); <span class=\"comment\">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码的<code>import</code>命令，可以用任意名称指向<code>export-default.js</code>输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时<code>import</code>命令后面，不使用大括号。</p>\n<p>本质上，<code>export default</code>就是输出一个叫做<code>default</code>的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// modules.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;add <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"comment\">// export default add;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> foo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;modules&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"comment\">// import foo from &#x27;modules&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p>正是因为<code>export default</code>命令其实只是输出一个叫做<code>default</code>的变量，所以它后面不能跟变量声明语句。</p>\n<p><strong>总结：</strong></p>\n<ul>\n<li><p>  export命令对外接口是有名称的且<code>import</code>命令从模块导入的变量名与被导入模块对外接口的名称相同，而export default命令对外输出的变量名可以是任意的，这时<code>import</code>命令后面，不使用大括号。</p>\n</li>\n<li><p>  <code>export default</code>命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此<code>export default</code>命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应<code>export default</code>命令。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//menu.js</span></span><br><span class=\"line\"><span class=\"comment\">//get请求获取所有的菜单信息</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildMenus</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus/build&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;get&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//post 请求保存数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//delete 请求删除数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">del</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus/&#x27;</span> + id,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;delete&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//put请求修改数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">edit</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;put&#x27;</span>,</span><br><span class=\"line\">    data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//app.vue</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; buildMenus &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/menu&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Const、var、let\"><a href=\"#3-Const、var、let\" class=\"headerlink\" title=\"3. Const、var、let\"></a>3. Const、var、let</h3><p> ES5 中作用域有：全局作用域、函数作用域。没有块作用域的概念。</p>\n<p> ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 通过var定义的变量可以跨块作用域访问到。</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// console.log(b); // 报错，</span></span><br><span class=\"line\"><span class=\"comment\">// 可见，通过var定义的变量不能跨函数作用域访问到</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i ++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 4   (循环结束i已经是4，所以此处i为4)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"comment\">// if语句和for语句中用var定义的变量可以在外面访问到，</span></span><br><span class=\"line\"><span class=\"comment\">// 可见，if语句和for语句属于块作用域，不属于函数作用域</span></span><br></pre></td></tr></table></figure>\n\n<p>三者的区别：</p>\n<ol>\n<li> var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。</li>\n<li> let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。</li>\n<li> const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 块作用域</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// c = 4; // 报错</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> aa;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> bb;</span><br><span class=\"line\">  <span class=\"comment\">// const cc; // 报错</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(aa); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(bb); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(b); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(c); // 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数作用域</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> e = <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f = <span class=\"number\">7</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 5</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// 6  </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f); <span class=\"comment\">// 7 </span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// console.log(d); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(e); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(f); // 报错</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意：<strong>const定义的对象属性是否可以改变</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span> : <span class=\"string\">&#x27;jiuke&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.name = <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name)<span class=\"comment\">//person对象的name属性确实被修改了</span></span><br></pre></td></tr></table></figure>\n\n<p>因为对象是引用类型的，person中保存的仅是对象的指针，这就意味着，const仅保证指针不发生改变，修改对象的属性不会改变对象的指针，所以是被允许的。也就是说const定义的引用类型只要指针不发生改变，其他的不论如何改变都是允许的。</p>\n<p>然后我们试着修改一下指针，让person指向一个新对象，果然报错</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">&#x27;jiuke&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">&#x27;test&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-promise\"><a href=\"#4-promise\" class=\"headerlink\" title=\"4. promise\"></a>4. promise</h3><p>promise用途：异步编程的一种解决方案。</p>\n<p>优点：比传统的解决方案——回调函数和事件——更合理和更强大。</p>\n<p>三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基本用法：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    resolve(value);<span class=\"comment\">//表示异步操作成功</span></span><br><span class=\"line\">    reject(error);<span class=\"comment\">//表示异步操作失败</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//promise常用的几个方法</span></span><br><span class=\"line\"><span class=\"comment\">//1. 异步状态为成功时调用第一个函数，为失败时调用第二个函数。then方法的第二个参数可选。</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;&#125;,<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 异步状态为失败时调用。</span></span><br><span class=\"line\">promise.catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. promise异步状态为失败时或then方法中抛出错误都会执行catch方法。</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;&#125;,<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4. 不管状态如何都会执行的操作。</span></span><br><span class=\"line\">promise.finally(<span class=\"function\">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-生命周期\"><a href=\"#5-生命周期\" class=\"headerlink\" title=\"5. 生命周期\"></a>5. 生命周期</h3><img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"img\" style=\"zoom:50%;\">\n\n<h3 id=\"6-模版语法\"><a href=\"#6-模版语法\" class=\"headerlink\" title=\"6. 模版语法\"></a>6. 模版语法</h3><h4 id=\"v-once\"><a href=\"#v-once\" class=\"headerlink\" title=\"v-once\"></a>v-once</h4><p>执行一次性插值，当数据变化的时候，该内容不会更新；可能会影响该节点其他的数据绑定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>这个将不会改变: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h4><p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用v-html;</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var rawHtml = &quot;<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是个使用v-htmls<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using v-html directive: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">&quot;rawHtml&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Attribute\"><a href=\"#Attribute\" class=\"headerlink\" title=\"Attribute\"></a><a href=\"https://cn.vuejs.org/v2/guide/syntax.html#Attribute\">Attribute</a></h4><p>Mustache ({}) 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 <a href=\"https://cn.vuejs.org/v2/api/#v-bind\"><code>v-bind</code> 指令</a>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;dynamicId&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> 元素中</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:disabled</span>=<span class=\"string\">&quot;isButtonDisabled&quot;</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三元表达式\"><a href=\"#三元表达式\" class=\"headerlink\" title=\"三元表达式\"></a>三元表达式</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; number + 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-指令Directives\"><a href=\"#7-指令Directives\" class=\"headerlink\" title=\"7. 指令Directives\"></a>7. 指令Directives</h3><p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊 attribute。指令 attribute 的值预期是<strong>单个 JavaScript 表达式</strong> (<code>v-for</code> 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//v-if 指令将根据表达式 seen 的值的真假来插入/移除 <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 元素。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，<code>v-bind</code> 指令可以用于响应式地更新 HTML attribute</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动态参数\"><a href=\"#动态参数\" class=\"headerlink\" title=\"动态参数\"></a>动态参数</h4><p> 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:</span>[<span class=\"attr\">attributeName</span>] = <span class=\"string\">&quot;url&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t这里的attributeName会被作为一个javascript表达式进行动态赋值，求得的值会作为最终的参数来使用</span></span><br><span class=\"line\"><span class=\"comment\">如果VUE实例有一个data. property. attributeName， 其值为href， 那么绑定将等价于v-bind:href</span></span><br><span class=\"line\"><span class=\"comment\">---&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>绑定处理函数：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:</span>[<span class=\"attr\">eventName</span>]=<span class=\"string\">&quot;dosomething&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>对动态参数的值的约束</p>\n<p>  动态参数预期会求出一个字符串，异常情况下值为 <code>null</code>。这个特殊的 <code>null</code> 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p>\n</li>\n<li><p>对动态参数表达式的约束</p>\n<p>  动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：</p>\n</li>\n</ul>\n<h4 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h4><p>修饰符（modifier）是以半角句号<code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定；例如<code> .prevent</code>修饰符告诉v-on指令对触发的事件调用event.preventDefault();</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span> = <span class=\"string\">&quot;onSubmit&quot;</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"缩写\"><a href=\"#缩写\" class=\"headerlink\" title=\"缩写\"></a>缩写</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:</span>[<span class=\"attr\">key</span>]=<span class=\"string\">&quot;url&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @[<span class=\"attr\">event</span>]=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>:</code> 与 <code>@</code> 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。</p>\n<h3 id=\"8-计算属性\"><a href=\"#8-计算属性\" class=\"headerlink\" title=\"8. 计算属性\"></a>8. 计算属性</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里是想要显示变量 <code>message</code> 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。</p>\n<p>所以，对于任何复杂逻辑，你都应当使用<strong>计算属性</strong></p>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Original message: &quot;&#123;&#123; message &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#example&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Hello&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 计算属性的 getter</span></span><br><span class=\"line\">    <span class=\"attr\">reversedMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// `this` 指向 vm 实例</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//页面显示：</span></span><br><span class=\"line\"><span class=\"comment\">//Original message: &quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//Computed reversed message: &quot;olleH&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>声明了一个计算属性<code>reversedMessage</code>；我们提供的函数将用作property <code>vm.reversedMessage</code>的getter函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// olleH</span></span><br><span class=\"line\">vm.message = <span class=\"string\">&#x27;Goodbye&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// =&gt; &#x27;eybdooG&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以打开浏览器的控制台，自行修改例子中的 vm。<code>vm.reversedMessage</code> 的值始终取决于 <code>vm.message</code> 的值。</p>\n<p>你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 <code>vm.reversedMessage</code> 依赖于 <code>vm.message</code>，因此当 <code>vm.message</code> 发生改变时，所有依赖 <code>vm.reversedMessage</code> 的绑定也会更新。以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的。</p>\n<h4 id=\"计算属性-VS-方法\"><a href=\"#计算属性-VS-方法\" class=\"headerlink\" title=\"计算属性 VS 方法\"></a>计算属性 VS 方法</h4><p>使用表达式中调用方法同样可以达到上面的结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Reversed message: &quot;&#123;&#123; reversedMessage() &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在组件中</span></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">reversedMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>\n<p>这也同样意味着下面的计算属性将不再更新，因为 <code>Date.now()</code> 不是响应式依赖：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  now: function () &#123;</span><br><span class=\"line\">    return Date.now()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>相比之下，每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数。</p>\n<p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <strong>A</strong>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong>。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 getter！如果你不希望有缓存，请用方法来替代。</p>\n<h4 id=\"计算属性-VS-侦听属性\"><a href=\"#计算属性-VS-侦听属性\" class=\"headerlink\" title=\"计算属性 VS 侦听属性\"></a>计算属性 VS 侦听属性</h4><p>侦听属性：vue提供了一种更通用的方式来观察和响应vue实例上的数据变动；当有一些数据需要随着其他数据变动而变动时；很容易滥用watch;<strong>通常更好的做法是使用计算属性而不是命令式的watch回调</strong>；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#demo&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Bar&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"string\">&#x27;Foo Bar&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//侦听属性watch </span></span><br><span class=\"line\">  <span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.fullName = val + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.fullName = <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//计算属性</span></span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"计算属性的setter\"><a href=\"#计算属性的setter\" class=\"headerlink\" title=\"计算属性的setter\"></a>计算属性的setter</h4><p>计算属性默认只有getter，自己可以提供一个setter</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  <span class=\"attr\">fullName</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// getter</span></span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// setter</span></span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在再运行 <code>vm.fullName = &#39;John Doe&#39;</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。</p>\n<h3 id=\"9-侦听器\"><a href=\"#9-侦听器\" class=\"headerlink\" title=\"9. 侦听器\"></a>9. 侦听器</h3><p>当需要在数据变化时执行异步或开销较大的操作时，watch是最有用的；同时也可以自定义侦听器；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;watch-example&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    Ask a yes/no question:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;question&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span><br><span class=\"line\">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">var</span> watchExampleVM = <span class=\"keyword\">new</span> Vue(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#watch-example&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">data</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">question</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">answer</span>: <span class=\"string\">&#x27;I cannot give you an answer until you ask a question!&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">watch</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 如果 `question` 发生改变，这个函数就会运行</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">question</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newQuestion, oldQuestion</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Waiting for you to stop typing...&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.debouncedGetAnswer()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 请参考：https://lodash.com/docs#debounce</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">this</span>.debouncedGetAnswer = _.debounce(<span class=\"built_in\">this</span>.getAnswer, <span class=\"number\">500</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">getAnswer</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.question.indexOf(<span class=\"string\">&#x27;?&#x27;</span>) === -<span class=\"number\">1</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Questions usually contain a question mark. ;-)&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">return</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Thinking...&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">var</span> vm = <span class=\"built_in\">this</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      axios.get(<span class=\"string\">&#x27;https://yesno.wtf/api&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          vm.answer = _.capitalize(response.data.answer)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"comment\">//异常捕获</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          vm.answer = <span class=\"string\">&#x27;Error! Could not reach the API. &#x27;</span> + error</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>watch</code> 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的</p>\n<h3 id=\"10-class与style绑定\"><a href=\"#10-class与style绑定\" class=\"headerlink\" title=\"10. class与style绑定\"></a>10. class与style绑定</h3><p>将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组</p>\n<h4 id=\"10-1-绑定html-class\"><a href=\"#10-1-绑定html-class\" class=\"headerlink\" title=\"10.1 绑定html class\"></a>10.1 绑定html class</h4><h5 id=\"10-1-1对象语法\"><a href=\"#10-1-1对象语法\" class=\"headerlink\" title=\"10.1.1对象语法\"></a>10.1.1对象语法</h5><p>方式一：内联</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">&quot;static&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">//data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  hasError: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方式二：绑定的数据对象不必内联定义在模板里</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">//vue data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  classObject: &#123;</span><br><span class=\"line\">    active: true,</span><br><span class=\"line\">    &#x27;text-danger&#x27;: false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方式三：绑定一个返回对象的计算属性（常用）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//vue data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  error: null</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  classObject: function () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      active: this.isActive &amp;&amp; !this.error,</span><br><span class=\"line\">      &#x27;text-danger&#x27;: this.error &amp;&amp; this.error.type === &#x27;fatal&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"10-1-2-数组语法\"><a href=\"#10-1-2-数组语法\" class=\"headerlink\" title=\"10.1.2 数组语法\"></a>10.1.2 数组语法</h5>"}],"PostAsset":[{"_id":"source/_posts/2022/03/linux-minio/1.png","slug":"1.png","post":"cl424hx4u0001ad5i2hlwhd8f","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/10.png","slug":"10.png","post":"cl424hx4u0001ad5i2hlwhd8f","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/11.png","slug":"11.png","post":"cl424hx4u0001ad5i2hlwhd8f","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/12.png","slug":"12.png","post":"cl424hx4u0001ad5i2hlwhd8f","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/13.png","slug":"13.png","post":"cl424hx4u0001ad5i2hlwhd8f","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/14.png","slug":"14.png","post":"cl424hx4u0001ad5i2hlwhd8f","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/15.png","slug":"15.png","post":"cl424hx4u0001ad5i2hlwhd8f","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/16.png","slug":"16.png","post":"cl424hx4u0001ad5i2hlwhd8f","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/2.png","slug":"2.png","post":"cl424hx4u0001ad5i2hlwhd8f","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/3.png","slug":"3.png","post":"cl424hx4u0001ad5i2hlwhd8f","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/3_1.png","slug":"3_1.png","post":"cl424hx4u0001ad5i2hlwhd8f","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/3_2.png","slug":"3_2.png","post":"cl424hx4u0001ad5i2hlwhd8f","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/4.png","slug":"4.png","post":"cl424hx4u0001ad5i2hlwhd8f","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/5.png","slug":"5.png","post":"cl424hx4u0001ad5i2hlwhd8f","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/6.png","slug":"6.png","post":"cl424hx4u0001ad5i2hlwhd8f","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/7.png","slug":"7.png","post":"cl424hx4u0001ad5i2hlwhd8f","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/8.png","slug":"8.png","post":"cl424hx4u0001ad5i2hlwhd8f","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/9.png","slug":"9.png","post":"cl424hx4u0001ad5i2hlwhd8f","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/message-oriented-middleware/1.png","slug":"1.png","post":"cl424hx500007ad5iey3o39zd","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/message-oriented-middleware/2.png","slug":"2.png","post":"cl424hx500007ad5iey3o39zd","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/message-oriented-middleware/3.png","slug":"3.png","post":"cl424hx500007ad5iey3o39zd","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/message-oriented-middleware/4.png","slug":"4.png","post":"cl424hx500007ad5iey3o39zd","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/message-oriented-middleware/5.png","slug":"5.png","post":"cl424hx500007ad5iey3o39zd","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/message-oriented-middleware/6.png","slug":"6.png","post":"cl424hx500007ad5iey3o39zd","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-search-file/1.png","slug":"1.png","post":"cl424hx4x0003ad5ia68lenkw","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-search-file/2.png","slug":"2.png","post":"cl424hx4x0003ad5ia68lenkw","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-search-file/3.png","slug":"3.png","post":"cl424hx4x0003ad5ia68lenkw","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-search-file/4.png","slug":"4.png","post":"cl424hx4x0003ad5ia68lenkw","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-search-file/5.png","slug":"5.png","post":"cl424hx4x0003ad5ia68lenkw","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-search-file/6.png","slug":"6.png","post":"cl424hx4x0003ad5ia68lenkw","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-search-file/7.png","slug":"7.png","post":"cl424hx4x0003ad5ia68lenkw","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/export-database-file/1.png","slug":"1.png","post":"cl424hx510009ad5i71bbhzh1","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/Apache-Http-Server/1.png","slug":"1.png","post":"cl424hx57000iad5i5v9p7xnl","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/Apache-Http-Server/2.png","slug":"2.png","post":"cl424hx57000iad5i5v9p7xnl","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/Apache-Http-Server/3.png","slug":"3.png","post":"cl424hx57000iad5i5v9p7xnl","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/Apache-Http-Server/4.png","slug":"4.png","post":"cl424hx57000iad5i5v9p7xnl","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/uml/1.png","slug":"1.png","post":"cl424hx56000gad5i536975fh","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/uml/2.png","slug":"2.png","post":"cl424hx56000gad5i536975fh","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/uml/3.png","slug":"3.png","post":"cl424hx56000gad5i536975fh","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/uml/4.png","slug":"4.png","post":"cl424hx56000gad5i536975fh","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/uml/5.png","slug":"5.png","post":"cl424hx56000gad5i536975fh","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/uml/6.png","slug":"6.png","post":"cl424hx56000gad5i536975fh","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/uml/7.png","slug":"7.png","post":"cl424hx56000gad5i536975fh","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/uml/8.png","slug":"8.png","post":"cl424hx56000gad5i536975fh","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/uml/9.png","slug":"9.png","post":"cl424hx56000gad5i536975fh","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/design-principle/1.png","slug":"1.png","post":"cl424hx59000nad5ihi4w6whp","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/design-principle/2.png","slug":"2.png","post":"cl424hx59000nad5ihi4w6whp","modified":0,"renderable":0},{"_id":"source/_posts/2021/06/jdk-install/1.png","slug":"1.png","post":"cl424hx5b000vad5i6nngh5zj","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/gitlab/1.png","slug":"1.png","post":"cl424hx59000oad5i4byu5skb","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/gitlab/10.png","slug":"10.png","post":"cl424hx59000oad5i4byu5skb","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/gitlab/11.png","slug":"11.png","post":"cl424hx59000oad5i4byu5skb","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/gitlab/2.png","slug":"2.png","post":"cl424hx59000oad5i4byu5skb","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/gitlab/3.png","slug":"3.png","post":"cl424hx59000oad5i4byu5skb","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/gitlab/4.png","slug":"4.png","post":"cl424hx59000oad5i4byu5skb","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/gitlab/5.png","slug":"5.png","post":"cl424hx59000oad5i4byu5skb","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/gitlab/6.png","slug":"6.png","post":"cl424hx59000oad5i4byu5skb","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/gitlab/7.png","slug":"7.png","post":"cl424hx59000oad5i4byu5skb","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/gitlab/8.png","slug":"8.png","post":"cl424hx59000oad5i4byu5skb","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/gitlab/9.png","slug":"9.png","post":"cl424hx59000oad5i4byu5skb","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/jstack/1.png","slug":"1.png","post":"cl424hx5b000sad5ietswgj66","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/jstack/2.png","slug":"2.png","post":"cl424hx5b000sad5ietswgj66","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/jstack/3.png","slug":"3.png","post":"cl424hx5b000sad5ietswgj66","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/jstack/4.png","slug":"4.png","post":"cl424hx5b000sad5ietswgj66","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/jstack/5.png","slug":"5.png","post":"cl424hx5b000sad5ietswgj66","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/jstack/6.png","slug":"6.png","post":"cl424hx5b000sad5ietswgj66","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/jstack/7.png","slug":"7.png","post":"cl424hx5b000sad5ietswgj66","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/jstack/jps.png","slug":"jps.png","post":"cl424hx5b000sad5ietswgj66","modified":0,"renderable":0},{"_id":"source/_posts/2022/05/jstack/state.png","slug":"state.png","post":"cl424hx5b000sad5ietswgj66","modified":0,"renderable":0},{"_id":"source/_posts/2021/06/mysql-install/3.png","slug":"3.png","post":"cl424hx5c000zad5i4ybre4zv","modified":0,"renderable":0},{"_id":"source/_posts/2021/06/mysql-install/4.png","slug":"4.png","post":"cl424hx5c000zad5i4ybre4zv","modified":0,"renderable":0},{"_id":"source/_posts/2021/06/mysql-install/5.png","slug":"5.png","post":"cl424hx5c000zad5i4ybre4zv","modified":0,"renderable":0},{"_id":"source/_posts/2021/06/mysql-install/6.png","slug":"6.png","post":"cl424hx5c000zad5i4ybre4zv","modified":0,"renderable":0},{"_id":"source/_posts/2021/06/mysql-install/7.png","slug":"7.png","post":"cl424hx5c000zad5i4ybre4zv","modified":0,"renderable":0},{"_id":"source/_posts/2021/06/mysql-install/q1.png","slug":"q1.png","post":"cl424hx5c000zad5i4ybre4zv","modified":0,"renderable":0},{"_id":"source/_posts/2021/06/mysql-install/q2.png","slug":"q2.png","post":"cl424hx5c000zad5i4ybre4zv","modified":0,"renderable":0},{"_id":"source/_posts/2021/08/mysql行列转置/01.png","slug":"01.png","post":"cl424hx5g0019ad5i6d2bfx1w","modified":0,"renderable":0},{"_id":"source/_posts/2021/08/mysql行列转置/02.png","slug":"02.png","post":"cl424hx5g0019ad5i6d2bfx1w","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/algorithm/01.png","slug":"01.png","post":"cl424hx5j001jad5i6jvzehov","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/algorithm/02.png","slug":"02.png","post":"cl424hx5j001jad5i6jvzehov","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/algorithm/03.png","slug":"03.png","post":"cl424hx5j001jad5i6jvzehov","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/ConcurrentHashMap/01.png","slug":"01.png","post":"cl424hx5h001dad5i9dua9pg0","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/ConcurrentHashMap/02.png","slug":"02.png","post":"cl424hx5h001dad5i9dua9pg0","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/ElasticSearch/image-20200806170145844.png","slug":"image-20200806170145844.png","post":"cl424hx5i001gad5i6y8419sb","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/ElasticSearch/image-20200807093208470.png","slug":"image-20200807093208470.png","post":"cl424hx5i001gad5i6y8419sb","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/ElasticSearch/image-20200807093309761.png","slug":"image-20200807093309761.png","post":"cl424hx5i001gad5i6y8419sb","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/ElasticSearch/image-20201211095101816.png","slug":"image-20201211095101816.png","post":"cl424hx5i001gad5i6y8419sb","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/ElasticSearch/image-20201211095258901.png","slug":"image-20201211095258901.png","post":"cl424hx5i001gad5i6y8419sb","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/bug-sprigCloud/01.png","slug":"01.png","post":"cl424hx5k001mad5iandh6k86","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/bug-sprigCloud/02.png","slug":"02.png","post":"cl424hx5k001mad5iandh6k86","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/classLoad/01.png","slug":"01.png","post":"cl424hx5m001vad5iazlze5nw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/classLoad/02.png","slug":"02.png","post":"cl424hx5m001vad5iazlze5nw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/classLoad/03.png","slug":"03.png","post":"cl424hx5m001vad5iazlze5nw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/interest/3_5_8.png","slug":"3_5_8.png","post":"cl424hx5o0021ad5ifvgvf93z","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/lock01/read_writer_Lock1.png","slug":"read_writer_Lock1.png","post":"cl424hx5q002bad5i1zi13rik","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-index/01.png","slug":"01.png","post":"cl424hx5s002jad5ifru6fpmi","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-index/02.png","slug":"02.png","post":"cl424hx5s002jad5ifru6fpmi","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-index/03.png","slug":"03.png","post":"cl424hx5s002jad5ifru6fpmi","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mvcc/01.png","slug":"01.png","post":"cl424hx5r002fad5i3q275ekz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mvcc/02.png","slug":"02.png","post":"cl424hx5r002fad5i3q275ekz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mvcc/03.png","slug":"03.png","post":"cl424hx5r002fad5i3q275ekz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mvcc/04.png","slug":"04.png","post":"cl424hx5r002fad5i3q275ekz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql/image-20200727224117281.png","slug":"image-20200727224117281.png","post":"cl424hx5u002rad5i1k6wdnrx","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql/image-20200727231112059.png","slug":"image-20200727231112059.png","post":"cl424hx5u002rad5i1k6wdnrx","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20200727224117281.png","slug":"image-20200727224117281.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20200727231112059.png","slug":"image-20200727231112059.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202210235089.png","slug":"image-20201202210235089.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202210357906.png","slug":"image-20201202210357906.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202210510525.png","slug":"image-20201202210510525.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202210817094.png","slug":"image-20201202210817094.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202211406282.png","slug":"image-20201202211406282.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202211752764.png","slug":"image-20201202211752764.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202212103393.png","slug":"image-20201202212103393.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202213520136.png","slug":"image-20201202213520136.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202213757692.png","slug":"image-20201202213757692.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202214418001.png","slug":"image-20201202214418001.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202214957559.png","slug":"image-20201202214957559.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202215350319.png","slug":"image-20201202215350319.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202215717524.png","slug":"image-20201202215717524.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202222250939.png","slug":"image-20201202222250939.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202222823984.png","slug":"image-20201202222823984.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202222914087.png","slug":"image-20201202222914087.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202223655445.png","slug":"image-20201202223655445.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202224136052.png","slug":"image-20201202224136052.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202224412832.png","slug":"image-20201202224412832.png","post":"cl424hx5t002nad5ieeyx6ihz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/outOfMemoryError/01.png","slug":"01.png","post":"cl424hx5w002zad5i5rxv1z9h","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/outOfMemoryError/02.png","slug":"02.png","post":"cl424hx5w002zad5i5rxv1z9h","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/outOfMemoryError/03.png","slug":"03.png","post":"cl424hx5w002zad5i5rxv1z9h","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/outOfMemoryError/04.png","slug":"04.png","post":"cl424hx5w002zad5i5rxv1z9h","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/outOfMemoryError/05.png","slug":"05.png","post":"cl424hx5w002zad5i5rxv1z9h","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/outOfMemoryError/06.png","slug":"06.png","post":"cl424hx5w002zad5i5rxv1z9h","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/redis-usage-scenario/01.png","slug":"01.png","post":"cl424hx5w0033ad5idewu28ka","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/redis-usage-scenario/02.png","slug":"02.png","post":"cl424hx5w0033ad5idewu28ka","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/redis-usage-scenario/03.png","slug":"03.png","post":"cl424hx5w0033ad5idewu28ka","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/redis-usage-scenario/04.png","slug":"04.png","post":"cl424hx5w0033ad5idewu28ka","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/redis-usage-scenario/05.png","slug":"05.png","post":"cl424hx5w0033ad5idewu28ka","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/redis-usage-scenario/06.png","slug":"06.png","post":"cl424hx5w0033ad5idewu28ka","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/redis_install/image-20201201155441018.png","slug":"image-20201201155441018.png","post":"cl424hx5x0036ad5i1umid7js","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/valine/1.png","slug":"1.png","post":"cl424hx61003mad5i9shyhc7a","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/valine/2.png","slug":"2.png","post":"cl424hx61003mad5i9shyhc7a","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/valine/3.png","slug":"3.png","post":"cl424hx61003mad5i9shyhc7a","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/valine/4.png","slug":"4.png","post":"cl424hx61003mad5i9shyhc7a","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/volatile/01.png","slug":"01.png","post":"cl424hx62003pad5i640s8buc","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/1.png","slug":"1.png","post":"cl424hx64003vad5i9xwb4dor","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/2.png","slug":"2.png","post":"cl424hx64003vad5i9xwb4dor","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/3-1.png","slug":"3-1.png","post":"cl424hx64003vad5i9xwb4dor","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/3.png","slug":"3.png","post":"cl424hx64003vad5i9xwb4dor","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/4-1.png","slug":"4-1.png","post":"cl424hx64003vad5i9xwb4dor","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/4-2.png","slug":"4-2.png","post":"cl424hx64003vad5i9xwb4dor","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/4-3.png","slug":"4-3.png","post":"cl424hx64003vad5i9xwb4dor","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/4.png","slug":"4.png","post":"cl424hx64003vad5i9xwb4dor","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/5.png","slug":"5.png","post":"cl424hx64003vad5i9xwb4dor","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/6.png","slug":"6.png","post":"cl424hx64003vad5i9xwb4dor","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/7.png","slug":"7.png","post":"cl424hx64003vad5i9xwb4dor","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/8.png","slug":"8.png","post":"cl424hx64003vad5i9xwb4dor","modified":0,"renderable":0},{"_id":"source/_posts/2021/11/sql-model/1.png","slug":"1.png","post":"cl424hx69004ead5iawz32gid","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-mysql/1.png","slug":"1.png","post":"cl424hx6a004lad5ial1xe94z","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-mysql/2.png","slug":"2.png","post":"cl424hx6a004lad5ial1xe94z","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-mysql/3.png","slug":"3.png","post":"cl424hx6a004lad5ial1xe94z","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-mysql/4.png","slug":"4.png","post":"cl424hx6a004lad5ial1xe94z","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-mysql/5.png","slug":"5.png","post":"cl424hx6a004lad5ial1xe94z","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-mysql/6.png","slug":"6.png","post":"cl424hx6a004lad5ial1xe94z","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/nginx-02/3.png","slug":"3.png","post":"cl424hx6c004tad5i84ag7j8p","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/nginx-02/image-20201210100736952.png","slug":"image-20201210100736952.png","post":"cl424hx6c004tad5i84ag7j8p","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/nginx-02/image-20201210103251475.png","slug":"image-20201210103251475.png","post":"cl424hx6c004tad5i84ag7j8p","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/nginx-02/image-20210606160947369.png","slug":"image-20210606160947369.png","post":"cl424hx6c004tad5i84ag7j8p","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-01/1.png","slug":"1.png","post":"cl424hx6a004iad5i6gcce91h","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-nginx/1.png","slug":"1.png","post":"cl424hx6b004pad5i3wfjbi3i","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-nginx/2.png","slug":"2.png","post":"cl424hx6b004pad5i3wfjbi3i","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-nginx/3.png","slug":"3.png","post":"cl424hx6b004pad5i3wfjbi3i","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-nginx/4.png","slug":"4.png","post":"cl424hx6b004pad5i3wfjbi3i","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-nginx/5.png","slug":"5.png","post":"cl424hx6b004pad5i3wfjbi3i","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-nginx/6.png","slug":"6.png","post":"cl424hx6b004pad5i3wfjbi3i","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-nginx/7.png","slug":"7.png","post":"cl424hx6b004pad5i3wfjbi3i","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-nginx/8.png","slug":"8.png","post":"cl424hx6b004pad5i3wfjbi3i","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-nginx/9.png","slug":"9.png","post":"cl424hx6b004pad5i3wfjbi3i","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/nginx-04/1.png","slug":"1.png","post":"cl424hx6d0051ad5igzzxab17","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/nginx-04/2.png","slug":"2.png","post":"cl424hx6d0051ad5igzzxab17","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/nginx-04/3.png","slug":"3.png","post":"cl424hx6d0051ad5igzzxab17","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/nginx-md/1.png","slug":"1.png","post":"cl424hx6p006iad5i39udgrg1","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/nginx-md/2.png","slug":"2.png","post":"cl424hx6p006iad5i39udgrg1","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/swagger/1.png","slug":"1.png","post":"cl424hx6q006jad5i42wv6v7p","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/swagger/2.png","slug":"2.png","post":"cl424hx6q006jad5i42wv6v7p","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/swagger/3.png","slug":"3.png","post":"cl424hx6q006jad5i42wv6v7p","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/swagger/4.png","slug":"4.png","post":"cl424hx6q006jad5i42wv6v7p","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/swagger/5.png","slug":"5.png","post":"cl424hx6q006jad5i42wv6v7p","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/swagger/6.png","slug":"6.png","post":"cl424hx6q006jad5i42wv6v7p","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/swagger/7.png","slug":"7.png","post":"cl424hx6q006jad5i42wv6v7p","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/swagger/8.png","slug":"8.png","post":"cl424hx6q006jad5i42wv6v7p","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/thread-status/01.jpg","slug":"01.jpg","post":"cl424hx6s006oad5i06ax2fiz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/thread-status/02.png","slug":"02.png","post":"cl424hx6s006oad5i06ax2fiz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/thread-status/03.png","slug":"03.png","post":"cl424hx6s006oad5i06ax2fiz","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104204430049.png","slug":"image-20201104204430049.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104204624925.png","slug":"image-20201104204624925.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104204933409.png","slug":"image-20201104204933409.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104205054233.png","slug":"image-20201104205054233.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104205319372.png","slug":"image-20201104205319372.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104205653611.png","slug":"image-20201104205653611.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104205756827.png","slug":"image-20201104205756827.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104210008624.png","slug":"image-20201104210008624.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104210117373.png","slug":"image-20201104210117373.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104210416994.png","slug":"image-20201104210416994.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104213343204.png","slug":"image-20201104213343204.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104215015366.png","slug":"image-20201104215015366.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104221336437.png","slug":"image-20201104221336437.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104221659540.png","slug":"image-20201104221659540.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104222632963.png","slug":"image-20201104222632963.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104223246735.png","slug":"image-20201104223246735.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201107201442912.png","slug":"image-20201107201442912.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201107205855474.png","slug":"image-20201107205855474.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201107212552852.png","slug":"image-20201107212552852.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201107213638624.png","slug":"image-20201107213638624.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201107213859155.png","slug":"image-20201107213859155.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201107215437139.png","slug":"image-20201107215437139.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201107215605251.png","slug":"image-20201107215605251.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201107220049532.png","slug":"image-20201107220049532.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201127094703483.png","slug":"image-20201127094703483.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201127103212598.png","slug":"image-20201127103212598.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201127104159580.png","slug":"image-20201127104159580.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201128135953635.png","slug":"image-20201128135953635.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201129110838590.png","slug":"image-20201129110838590.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201215152125176.png","slug":"image-20201215152125176.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201219102742172.png","slug":"image-20201219102742172.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201219103201836.png","slug":"image-20201219103201836.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201220170713526.png","slug":"image-20201220170713526.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201220172406074.png","slug":"image-20201220172406074.png","post":"cl424hx6s006lad5idxgk5atn","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cl424hx4u0001ad5i2hlwhd8f","category_id":"cl424hx4y0004ad5i9pbsgd4d","_id":"cl424hx58000kad5iaip54eca"},{"post_id":"cl424hx4x0003ad5ia68lenkw","category_id":"cl424hx4y0004ad5i9pbsgd4d","_id":"cl424hx5a000pad5i0b7q3uqh"},{"post_id":"cl424hx57000iad5i5v9p7xnl","category_id":"cl424hx4y0004ad5i9pbsgd4d","_id":"cl424hx5b000tad5ieugggyek"},{"post_id":"cl424hx500007ad5iey3o39zd","category_id":"cl424hx58000jad5idohnciy5","_id":"cl424hx5c000wad5ihtnq3ris"},{"post_id":"cl424hx59000oad5i4byu5skb","category_id":"cl424hx4y0004ad5i9pbsgd4d","_id":"cl424hx5d0010ad5ih98b6wua"},{"post_id":"cl424hx510009ad5i71bbhzh1","category_id":"cl424hx5a000qad5idwzp2kyd","_id":"cl424hx5f0014ad5ibk8lhhwx"},{"post_id":"cl424hx5b000vad5i6nngh5zj","category_id":"cl424hx4y0004ad5i9pbsgd4d","_id":"cl424hx5g0018ad5i8zytesk0"},{"post_id":"cl424hx5c000zad5i4ybre4zv","category_id":"cl424hx4y0004ad5i9pbsgd4d","_id":"cl424hx5h001aad5id7or414n"},{"post_id":"cl424hx52000bad5ietlqe5lu","category_id":"cl424hx5a000qad5idwzp2kyd","_id":"cl424hx5i001ead5i1qs80qef"},{"post_id":"cl424hx56000gad5i536975fh","category_id":"cl424hx5f0013ad5iet9b3twc","_id":"cl424hx5j001iad5icjk7d5fm"},{"post_id":"cl424hx59000nad5ihi4w6whp","category_id":"cl424hx5f0013ad5iet9b3twc","_id":"cl424hx5k001oad5i8ojrd7lt"},{"post_id":"cl424hx5i001gad5i6y8419sb","category_id":"cl424hx4y0004ad5i9pbsgd4d","_id":"cl424hx5l001rad5i46js2cei"},{"post_id":"cl424hx5b000sad5ietswgj66","category_id":"cl424hx5f0013ad5iet9b3twc","_id":"cl424hx5m001uad5ieizq7cet"},{"post_id":"cl424hx5k001pad5i74lzdgbe","category_id":"cl424hx58000jad5idohnciy5","_id":"cl424hx5n001zad5igix14cbv"},{"post_id":"cl424hx5d0012ad5i97w8bcxr","category_id":"cl424hx5k001nad5i8d9fcjdt","_id":"cl424hx5o0022ad5i3rb16gqn"},{"post_id":"cl424hx5m001vad5iazlze5nw","category_id":"cl424hx5a000qad5idwzp2kyd","_id":"cl424hx5p0026ad5i2m3x1j2s"},{"post_id":"cl424hx5g0016ad5i5y22h4bu","category_id":"cl424hx5m001wad5idb1ubr0k","_id":"cl424hx5q002aad5i0dw725hz"},{"post_id":"cl424hx5o0021ad5ifvgvf93z","category_id":"cl424hx5k001nad5i8d9fcjdt","_id":"cl424hx5q002dad5igzex2mdk"},{"post_id":"cl424hx5p0025ad5iehwz6mgi","category_id":"cl424hx5a000qad5idwzp2kyd","_id":"cl424hx5r002gad5ia4y8hfhi"},{"post_id":"cl424hx5g0019ad5i6d2bfx1w","category_id":"cl424hx5m001wad5idb1ubr0k","_id":"cl424hx5s002kad5i53d25go1"},{"post_id":"cl424hx5q002bad5i1zi13rik","category_id":"cl424hx5a000qad5idwzp2kyd","_id":"cl424hx5t002oad5i333i5rrb"},{"post_id":"cl424hx5h001dad5i9dua9pg0","category_id":"cl424hx5q0029ad5i6glycwrm","_id":"cl424hx5u002sad5i6gulbmst"},{"post_id":"cl424hx5r002fad5i3q275ekz","category_id":"cl424hx5m001wad5idb1ubr0k","_id":"cl424hx5v002wad5i0ez5f6lw"},{"post_id":"cl424hx5s002jad5ifru6fpmi","category_id":"cl424hx5m001wad5idb1ubr0k","_id":"cl424hx5w0030ad5icvqn97y0"},{"post_id":"cl424hx5j001jad5i6jvzehov","category_id":"cl424hx5k001nad5i8d9fcjdt","_id":"cl424hx5x0034ad5i2iod5u7s"},{"post_id":"cl424hx5t002nad5ieeyx6ihz","category_id":"cl424hx5m001wad5idb1ubr0k","_id":"cl424hx5y0038ad5ib3rt7d9i"},{"post_id":"cl424hx5u002rad5i1k6wdnrx","category_id":"cl424hx5m001wad5idb1ubr0k","_id":"cl424hx5z003cad5ibtriaz4l"},{"post_id":"cl424hx5k001mad5iandh6k86","category_id":"cl424hx5t002pad5ibfevgp9y","_id":"cl424hx60003gad5i2dby56lx"},{"post_id":"cl424hx5v002vad5i83kz0m02","category_id":"cl424hx5m001wad5idb1ubr0k","_id":"cl424hx61003kad5ic4gkdjjj"},{"post_id":"cl424hx5w002zad5i5rxv1z9h","category_id":"cl424hx5a000qad5idwzp2kyd","_id":"cl424hx62003nad5i97vgfdqf"},{"post_id":"cl424hx5w0033ad5idewu28ka","category_id":"cl424hx58000jad5idohnciy5","_id":"cl424hx63003rad5i037w0beo"},{"post_id":"cl424hx5l001sad5ibxdq73rz","category_id":"cl424hx5v002yad5i29rvf8ip","_id":"cl424hx64003uad5iaso2dgvc"},{"post_id":"cl424hx5x0036ad5i1umid7js","category_id":"cl424hx4y0004ad5i9pbsgd4d","_id":"cl424hx65003xad5i9ydp79q5"},{"post_id":"cl424hx5y003bad5ieh4cd4qc","category_id":"cl424hx5a000qad5idwzp2kyd","_id":"cl424hx650040ad5i0qro2wey"},{"post_id":"cl424hx5n001yad5i2kl2gcmx","category_id":"cl424hx5v002yad5i29rvf8ip","_id":"cl424hx660043ad5igl20864x"},{"post_id":"cl424hx5z003ead5id8v24of0","category_id":"cl424hx5m001wad5idb1ubr0k","_id":"cl424hx670047ad5i9z5r3d9h"},{"post_id":"cl424hx61003jad5igwxn3i3e","category_id":"cl424hx5a000qad5idwzp2kyd","_id":"cl424hx680049ad5i94ikaelb"},{"post_id":"cl424hx5p0028ad5i4ml99ujk","category_id":"cl424hx5q0029ad5i6glycwrm","_id":"cl424hx69004cad5ih09j4pew"},{"post_id":"cl424hx61003mad5i9shyhc7a","category_id":"cl424hx5v002yad5i29rvf8ip","_id":"cl424hx69004fad5igp7dfia9"},{"post_id":"cl424hx62003pad5i640s8buc","category_id":"cl424hx5a000qad5idwzp2kyd","_id":"cl424hx6a004jad5icuis1aaw"},{"post_id":"cl424hx63003tad5igsgn8j8n","category_id":"cl424hx5a000qad5idwzp2kyd","_id":"cl424hx6a004mad5idtqi93ln"},{"post_id":"cl424hx64003vad5i9xwb4dor","category_id":"cl424hx4y0004ad5i9pbsgd4d","_id":"cl424hx6b004rad5i6tnd4jwa"},{"post_id":"cl424hx65003zad5iavcpgbqk","category_id":"cl424hx5a000qad5idwzp2kyd","_id":"cl424hx6c004uad5i6w2cgc1c"},{"post_id":"cl424hx660042ad5i8nw66np8","category_id":"cl424hx4y0004ad5i9pbsgd4d","_id":"cl424hx6d004zad5i05f8d5je"},{"post_id":"cl424hx670045ad5i43uj70ow","category_id":"cl424hx5a000qad5idwzp2kyd","_id":"cl424hx6e0052ad5i4fl54v04"},{"post_id":"cl424hx670048ad5ih871bvk3","category_id":"cl424hx5k001nad5i8d9fcjdt","_id":"cl424hx6e0055ad5icl811jr4"},{"post_id":"cl424hx68004bad5i1lphhnyx","category_id":"cl424hx5m001wad5idb1ubr0k","_id":"cl424hx6e0057ad5i3oypb57f"},{"post_id":"cl424hx69004ead5iawz32gid","category_id":"cl424hx5m001wad5idb1ubr0k","_id":"cl424hx6f0059ad5i0g5sa4r6"},{"post_id":"cl424hx6c004tad5i84ag7j8p","category_id":"cl424hx4y0004ad5i9pbsgd4d","_id":"cl424hx6f005cad5i6lp54b9e"},{"post_id":"cl424hx6a004iad5i6gcce91h","category_id":"cl424hx6b004oad5i5hps2k28","_id":"cl424hx6f005ead5i8efieesj"},{"post_id":"cl424hx6a004lad5ial1xe94z","category_id":"cl424hx6b004oad5i5hps2k28","_id":"cl424hx6f005gad5iewxac8bg"},{"post_id":"cl424hx6b004pad5i3wfjbi3i","category_id":"cl424hx6b004oad5i5hps2k28","_id":"cl424hx6g005iad5i1ad90y4f"},{"post_id":"cl424hx6c004wad5i70z31sg8","category_id":"cl424hx6e0058ad5ibztofgxl","_id":"cl424hx6g005kad5ietujga20"},{"post_id":"cl424hx6d0051ad5igzzxab17","category_id":"cl424hx6e0058ad5ibztofgxl","_id":"cl424hx6g005mad5idr2mhcn7"},{"post_id":"cl424hx6p006iad5i39udgrg1","category_id":"cl424hx6e0058ad5ibztofgxl","_id":"cl424hx6t006pad5icjin3i79"},{"post_id":"cl424hx6s006lad5idxgk5atn","category_id":"cl424hx58000jad5idohnciy5","_id":"cl424hx6t006sad5if23c8e0c"},{"post_id":"cl424hx6s006oad5i06ax2fiz","category_id":"cl424hx5a000qad5idwzp2kyd","_id":"cl424hx6t006vad5i6w1la1ut"},{"post_id":"cl424hx6t006qad5ieb7g2694","category_id":"cl424hx5f0013ad5iet9b3twc","_id":"cl424hx6u006wad5i4ah0hiek"},{"post_id":"cl424hx6q006jad5i42wv6v7p","category_id":"cl424hx6s006mad5i6pmea3bd","_id":"cl424hx6u006yad5i4m7pb3wm"}],"PostTag":[{"post_id":"cl424hx4u0001ad5i2hlwhd8f","tag_id":"cl424hx4z0005ad5i85jv2l3v","_id":"cl424hx55000ead5ic14k7es0"},{"post_id":"cl424hx4x0003ad5ia68lenkw","tag_id":"cl424hx4z0005ad5i85jv2l3v","_id":"cl424hx59000mad5i5xqz7dtx"},{"post_id":"cl424hx500007ad5iey3o39zd","tag_id":"cl424hx58000lad5i68alf321","_id":"cl424hx5b000uad5i617z3200"},{"post_id":"cl424hx510009ad5i71bbhzh1","tag_id":"cl424hx5a000rad5i67uw9gej","_id":"cl424hx5d0011ad5ieko4d64m"},{"post_id":"cl424hx52000bad5ietlqe5lu","tag_id":"cl424hx5a000rad5i67uw9gej","_id":"cl424hx5g0017ad5i3e9xg5vc"},{"post_id":"cl424hx56000gad5i536975fh","tag_id":"cl424hx5f0015ad5igzle17pt","_id":"cl424hx5i001fad5iaohr2u15"},{"post_id":"cl424hx57000iad5i5v9p7xnl","tag_id":"cl424hx5h001cad5i3lsg02gu","_id":"cl424hx5k001lad5i39hmgcod"},{"post_id":"cl424hx59000nad5ihi4w6whp","tag_id":"cl424hx5j001kad5iczu92weq","_id":"cl424hx5m001tad5i17ofenlt"},{"post_id":"cl424hx59000oad5i4byu5skb","tag_id":"cl424hx5l001qad5i57kjc585","_id":"cl424hx5o0020ad5i1xt8hccz"},{"post_id":"cl424hx5b000sad5ietswgj66","tag_id":"cl424hx5n001xad5i9ikg88ml","_id":"cl424hx5p0027ad5i4mn55ex6"},{"post_id":"cl424hx5p0028ad5i4ml99ujk","tag_id":"cl424hx5a000rad5i67uw9gej","_id":"cl424hx5r002ead5i4sgv6e0q"},{"post_id":"cl424hx5b000vad5i6nngh5zj","tag_id":"cl424hx5o0024ad5ih8w177o9","_id":"cl424hx5s002iad5iak8l3l6n"},{"post_id":"cl424hx5r002fad5i3q275ekz","tag_id":"cl424hx5q002cad5i22nogvoz","_id":"cl424hx5t002mad5i3z0reqjx"},{"post_id":"cl424hx5c000zad5i4ybre4zv","tag_id":"cl424hx5q002cad5i22nogvoz","_id":"cl424hx5u002qad5ig07vabl2"},{"post_id":"cl424hx5s002jad5ifru6fpmi","tag_id":"cl424hx5q002cad5i22nogvoz","_id":"cl424hx5v002uad5i5rkp9z2e"},{"post_id":"cl424hx5t002nad5ieeyx6ihz","tag_id":"cl424hx5q002cad5i22nogvoz","_id":"cl424hx5v002xad5iamop8w6c"},{"post_id":"cl424hx5d0012ad5i97w8bcxr","tag_id":"cl424hx5s002lad5ih49s2ik3","_id":"cl424hx5w0032ad5ifqhi3lic"},{"post_id":"cl424hx5u002rad5i1k6wdnrx","tag_id":"cl424hx5q002cad5i22nogvoz","_id":"cl424hx5x0035ad5i201rau4g"},{"post_id":"cl424hx5v002vad5i83kz0m02","tag_id":"cl424hx5q002cad5i22nogvoz","_id":"cl424hx5y003aad5i9flgftzb"},{"post_id":"cl424hx5g0016ad5i5y22h4bu","tag_id":"cl424hx5q002cad5i22nogvoz","_id":"cl424hx5z003dad5iesbf22zg"},{"post_id":"cl424hx5g0019ad5i6d2bfx1w","tag_id":"cl424hx5q002cad5i22nogvoz","_id":"cl424hx60003had5ihzvb5eie"},{"post_id":"cl424hx5h001dad5i9dua9pg0","tag_id":"cl424hx5y0039ad5ifhnrepii","_id":"cl424hx61003lad5i9tn3g2y9"},{"post_id":"cl424hx5z003ead5id8v24of0","tag_id":"cl424hx5q002cad5i22nogvoz","_id":"cl424hx62003oad5i8jgladb8"},{"post_id":"cl424hx5i001gad5i6y8419sb","tag_id":"cl424hx60003iad5ih2rlbdle","_id":"cl424hx63003sad5i8mia77cw"},{"post_id":"cl424hx63003tad5igsgn8j8n","tag_id":"cl424hx5a000rad5i67uw9gej","_id":"cl424hx65003yad5i2szof3fo"},{"post_id":"cl424hx5j001jad5i6jvzehov","tag_id":"cl424hx5s002lad5ih49s2ik3","_id":"cl424hx660041ad5ibdtz458d"},{"post_id":"cl424hx5k001mad5iandh6k86","tag_id":"cl424hx65003wad5icq7y5jxb","_id":"cl424hx670046ad5ib7th9cas"},{"post_id":"cl424hx5k001pad5i74lzdgbe","tag_id":"cl424hx660044ad5i94rrag81","_id":"cl424hx69004dad5igs8i1thq"},{"post_id":"cl424hx670048ad5ih871bvk3","tag_id":"cl424hx5s002lad5ih49s2ik3","_id":"cl424hx69004gad5i1dyu2wlm"},{"post_id":"cl424hx68004bad5i1lphhnyx","tag_id":"cl424hx5q002cad5i22nogvoz","_id":"cl424hx6a004kad5i9yqrct90"},{"post_id":"cl424hx5l001sad5ibxdq73rz","tag_id":"cl424hx68004aad5i8np40foy","_id":"cl424hx6b004nad5iexdvdpxj"},{"post_id":"cl424hx6a004lad5ial1xe94z","tag_id":"cl424hx5q002cad5i22nogvoz","_id":"cl424hx6c004sad5ieuxt3xxm"},{"post_id":"cl424hx5m001vad5iazlze5nw","tag_id":"cl424hx69004had5iajty03wv","_id":"cl424hx6c004vad5i774tfzl2"},{"post_id":"cl424hx5n001yad5i2kl2gcmx","tag_id":"cl424hx68004aad5i8np40foy","_id":"cl424hx6d0050ad5i2eid89ma"},{"post_id":"cl424hx5o0021ad5ifvgvf93z","tag_id":"cl424hx5s002lad5ih49s2ik3","_id":"cl424hx6e0056ad5idfa4gtpj"},{"post_id":"cl424hx5p0025ad5iehwz6mgi","tag_id":"cl424hx6e0054ad5i5nzn0uf9","_id":"cl424hx6f005bad5i3f3mcx4b"},{"post_id":"cl424hx5q002bad5i1zi13rik","tag_id":"cl424hx6f005aad5ie3y1hxiy","_id":"cl424hx6f005had5i05neaaot"},{"post_id":"cl424hx5w002zad5i5rxv1z9h","tag_id":"cl424hx6f005fad5ifz8z11vt","_id":"cl424hx6g005lad5icy7m7u0z"},{"post_id":"cl424hx5w0033ad5idewu28ka","tag_id":"cl424hx660044ad5i94rrag81","_id":"cl424hx6g005oad5ieo8802i0"},{"post_id":"cl424hx5x0036ad5i1umid7js","tag_id":"cl424hx660044ad5i94rrag81","_id":"cl424hx6h005qad5i64ws5kqb"},{"post_id":"cl424hx5y003bad5ieh4cd4qc","tag_id":"cl424hx6g005pad5i2p8xdujk","_id":"cl424hx6i005sad5i42ivetpa"},{"post_id":"cl424hx61003jad5igwxn3i3e","tag_id":"cl424hx6h005rad5iecdpf66w","_id":"cl424hx6i005uad5igri21giq"},{"post_id":"cl424hx61003mad5i9shyhc7a","tag_id":"cl424hx68004aad5i8np40foy","_id":"cl424hx6j005wad5idftddlyr"},{"post_id":"cl424hx62003pad5i640s8buc","tag_id":"cl424hx6i005vad5i0le5a0xp","_id":"cl424hx6j005yad5igtkv8t49"},{"post_id":"cl424hx64003vad5i9xwb4dor","tag_id":"cl424hx6j005xad5i6kfdh5et","_id":"cl424hx6j0060ad5i9fx1419k"},{"post_id":"cl424hx65003zad5iavcpgbqk","tag_id":"cl424hx6j005zad5iahwq9iuk","_id":"cl424hx6j0062ad5i15b021nq"},{"post_id":"cl424hx660042ad5i8nw66np8","tag_id":"cl424hx6j0061ad5icv42gyay","_id":"cl424hx6j0064ad5i203b8bdf"},{"post_id":"cl424hx670045ad5i43uj70ow","tag_id":"cl424hx6i005vad5i0le5a0xp","_id":"cl424hx6k0066ad5i2zj7d67c"},{"post_id":"cl424hx69004ead5iawz32gid","tag_id":"cl424hx6k0065ad5i6nw4d5qu","_id":"cl424hx6k0068ad5i5x6b8mif"},{"post_id":"cl424hx6a004iad5i6gcce91h","tag_id":"cl424hx6k0067ad5ifiy0dyet","_id":"cl424hx6k006aad5i53ypfv6x"},{"post_id":"cl424hx6b004pad5i3wfjbi3i","tag_id":"cl424hx6k0069ad5i0ae572aa","_id":"cl424hx6k006cad5i8nbm765z"},{"post_id":"cl424hx6c004tad5i84ag7j8p","tag_id":"cl424hx6k0069ad5i0ae572aa","_id":"cl424hx6l006ead5ic6ps6dor"},{"post_id":"cl424hx6c004wad5i70z31sg8","tag_id":"cl424hx6k0069ad5i0ae572aa","_id":"cl424hx6l006gad5i8p2tdkh7"},{"post_id":"cl424hx6d0051ad5igzzxab17","tag_id":"cl424hx6k0069ad5i0ae572aa","_id":"cl424hx6l006had5ic74p8hgg"},{"post_id":"cl424hx6p006iad5i39udgrg1","tag_id":"cl424hx6k0069ad5i0ae572aa","_id":"cl424hx6r006kad5i9vdzcdfw"},{"post_id":"cl424hx6s006oad5i06ax2fiz","tag_id":"cl424hx6i005vad5i0le5a0xp","_id":"cl424hx6t006rad5i8kn79t5d"},{"post_id":"cl424hx6q006jad5i42wv6v7p","tag_id":"cl424hx6s006nad5iddhq5yb5","_id":"cl424hx6t006uad5i67kxe4b1"},{"post_id":"cl424hx6s006lad5idxgk5atn","tag_id":"cl424hx6t006tad5if6pac8cb","_id":"cl424hx6u006zad5ibn3bc4ts"},{"post_id":"cl424hx6t006qad5ieb7g2694","tag_id":"cl424hx6u006xad5i9pqfhxjf","_id":"cl424hx6u0070ad5ichha3nox"}],"Tag":[{"name":"Linux","_id":"cl424hx4z0005ad5i85jv2l3v"},{"name":"消息中间件","_id":"cl424hx58000lad5i68alf321"},{"name":"java","_id":"cl424hx5a000rad5i67uw9gej"},{"name":"UML","_id":"cl424hx5f0015ad5igzle17pt"},{"name":"Apache","_id":"cl424hx5h001cad5i3lsg02gu"},{"name":"设计模式","_id":"cl424hx5j001kad5iczu92weq"},{"name":"gitlab","_id":"cl424hx5l001qad5i57kjc585"},{"name":"jstack","_id":"cl424hx5n001xad5i9ikg88ml"},{"name":"jdk","_id":"cl424hx5o0024ad5ih8w177o9"},{"name":"mysql","_id":"cl424hx5q002cad5i22nogvoz"},{"name":"algorithm","_id":"cl424hx5s002lad5ih49s2ik3"},{"name":"Java","_id":"cl424hx5y0039ad5ifhnrepii"},{"name":"ELK","_id":"cl424hx60003iad5ih2rlbdle"},{"name":"SpringCloud","_id":"cl424hx65003wad5icq7y5jxb"},{"name":"redis","_id":"cl424hx660044ad5i94rrag81"},{"name":"hexo","_id":"cl424hx68004aad5i8np40foy"},{"name":"ClassLoader","_id":"cl424hx69004had5iajty03wv"},{"name":"内部类","_id":"cl424hx6e0054ad5i5nzn0uf9"},{"name":"lock","_id":"cl424hx6f005aad5ie3y1hxiy"},{"name":"内存溢出","_id":"cl424hx6f005fad5ifz8z11vt"},{"name":"springboot","_id":"cl424hx6g005pad5i2p8xdujk"},{"name":"守护线程","_id":"cl424hx6h005rad5iecdpf66w"},{"name":"thread","_id":"cl424hx6i005vad5i0le5a0xp"},{"name":"linux","_id":"cl424hx6j005xad5i6kfdh5et"},{"name":"集合","_id":"cl424hx6j005zad5iahwq9iuk"},{"name":"shutdown","_id":"cl424hx6j0061ad5icv42gyay"},{"name":"tidb","_id":"cl424hx6k0065ad5i6nw4d5qu"},{"name":"docker","_id":"cl424hx6k0067ad5ifiy0dyet"},{"name":"nginx","_id":"cl424hx6k0069ad5i0ae572aa"},{"name":"swagger","_id":"cl424hx6s006nad5iddhq5yb5"},{"name":"mycat","_id":"cl424hx6t006tad5if6pac8cb"},{"name":"vue","_id":"cl424hx6u006xad5i9pqfhxjf"}]}}