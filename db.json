{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/pure/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/pure/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","path":"images/xingqiu-qrcode.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","path":"images/donate/wechatpayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","path":"images/favatar/SzsFox-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/pure/.gitignore","hash":"dbb41a2f30c98cb9de173d82736c46266c901cda","modified":1633853645156},{"_id":"themes/pure/README.md","hash":"5861cec81712af9197a210fd5212d007aad8b0de","modified":1633853645156},{"_id":"themes/pure/_config.yml","hash":"c58de88fc7601d6850eba45582ee927fa9cd216a","modified":1648388937652},{"_id":"themes/pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1633853645156},{"_id":"themes/pure/_config.yml.example","hash":"7313478dbef0a284855dc2c81f653808f9ab8ed8","modified":1648385447509},{"_id":"themes/pure/README.cn.md","hash":"a634af4addbb57088935e060e8ec6035ea7bab76","modified":1633853645156},{"_id":"themes/pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1633853645172},{"_id":"themes/pure/_source/favicon.ico","hash":"80efb1836c542af64366401b6e79cbad51037f24","modified":1633853645158},{"_id":"themes/pure/languages/en.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1633853645159},{"_id":"themes/pure/languages/default.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1633853645159},{"_id":"themes/pure/languages/zh-CN.yml","hash":"057ebc043f09449af9768791c89c86dfc2938365","modified":1633853645159},{"_id":"themes/pure/languages/zh-TW.yml","hash":"6d27c3114be539b8783ffce944f68b2e26a8c3b9","modified":1633853645159},{"_id":"themes/pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1633853645169},{"_id":"themes/pure/layout/archive.ejs","hash":"ded5d953b35666e30f4c6e48e2d2c62af8d95ebf","modified":1633853645170},{"_id":"themes/pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1633853645170},{"_id":"themes/pure/layout/categories.ejs","hash":"22a2bc1712dd9ba1a3027e875d636132d334fb00","modified":1633853645170},{"_id":"themes/pure/layout/category.ejs","hash":"3ca5651bbce7b0c280c906468f2eb18c2e55ebcb","modified":1633853645170},{"_id":"themes/pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1633853645170},{"_id":"themes/pure/layout/layout.ejs","hash":"a29ab2e881954a252bfc0dc1a7eb5aa52768dd2a","modified":1633853645170},{"_id":"themes/pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1633853645171},{"_id":"themes/pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1633853645171},{"_id":"themes/pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1633853645171},{"_id":"themes/pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1633853645171},{"_id":"themes/pure/layout/tag.ejs","hash":"df60564c162f7ad3422f8959dfea19351857a7cd","modified":1633853645171},{"_id":"themes/pure/layout/tags.ejs","hash":"29f19a6ed10f8b1f069259a7aeaaacddcfaa2ed4","modified":1633853645172},{"_id":"themes/pure/source/favicon.ico","hash":"80efb1836c542af64366401b6e79cbad51037f24","modified":1633853645191},{"_id":"themes/pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1633853645190},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/bug_report.md","hash":"83d211c67c12e8c1f6e9f796cfd0cecbf5160e15","modified":1633853645155},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/custom.md","hash":"84208538d48505ee8e49812cb336eb9882e08dc7","modified":1633853645155},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1633853645155},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1633853645157},{"_id":"themes/pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1633853645157},{"_id":"themes/pure/_source/404/index.md","hash":"eeea2ea3b36703189d4f8b88afc8182e0abfcc6b","modified":1648389963396},{"_id":"themes/pure/_source/categories/index.md","hash":"aa3afc1a3240466a97f7290ac7bd49282c8a041a","modified":1648389963433},{"_id":"themes/pure/_source/about/index.md","hash":"9bd068994bad42ccaf89af31bb760c98f000041c","modified":1648389963333},{"_id":"themes/pure/_source/books/index.md","hash":"83d20b7ee077dd2beda1f72bcb794e1def4b44a7","modified":1648389963473},{"_id":"themes/pure/_source/repository/index.md","hash":"75b962a2b2c6b36b20be8719e65c18fa66066f36","modified":1648389963320},{"_id":"themes/pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1633853645158},{"_id":"themes/pure/_source/tags/index.md","hash":"a6d29b0391c1f5f429e6ca8129f3e6c7be54bdf1","modified":1648389963340},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"cdc48ec70d9202b947f2a9334234d038d7014a7d","modified":1633853645160},{"_id":"themes/pure/layout/_common/head.ejs","hash":"a48ef0fa22712b29ec044b9e5134461f3a21c10d","modified":1633853645160},{"_id":"themes/pure/layout/_common/header.ejs","hash":"3d739d1e2b2991927c08ec222db123830a44a519","modified":1633853645160},{"_id":"themes/pure/layout/_common/script.ejs","hash":"0031114d2a58f8601c2869f78ceedc75a10be90d","modified":1633853645160},{"_id":"themes/pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1633853645160},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"977f97f3636947006ad738e502858c46d4cd5ec7","modified":1633853645160},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1633853645161},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1633853645161},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"c66c86d6a6a90e00494c380603426fc0f4006311","modified":1633853645161},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"13039fec017332029122ef99901755fcecbfc8ea","modified":1633853645161},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"e39dc762d9fe238cede462532e40eaa3d8651122","modified":1633853645161},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1633853645161},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"4d6793f50d41fbd47dc50aa36b24d496006bba6c","modified":1633853645161},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"7b80319daeb63401d1745b81cd9a6d1d21a4fb60","modified":1633853645161},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"0f9b71de0087d1f777d92c5a0f3873971aec5a5b","modified":1633853645162},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"9f755b0da1ea928dece32c2050d8a04b3a9fb13b","modified":1633853645162},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"41a319642da5af07d6cfb8525796aa610b721879","modified":1633853645162},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"46da1ee327b8af107335146bd8fc131eee6c9c4f","modified":1633853645164},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1633853645164},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"e756a81f8c20a187fb863b9689f2f1fa15e2f4e1","modified":1633853645166},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"152538ceceb0fdef65c46470ebf0189f7b891c5b","modified":1633853645164},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"6f951510bab9dc15474b6664e0329defccf29a30","modified":1633853645167},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"ee21c4e7ccac26ff2ab6d1d178447fd11fea4d7e","modified":1633853645167},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1633853645167},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"8f1be01e70a15b2c31ae57d8c6bce54622ebf8a7","modified":1633853645167},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"fb9b5f16029f2ccef4b83cf4facfdcdd748b65b4","modified":1633853645167},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"14f2e7d4c1055ff6a5f5867dc0e9a9f6f4c28fe1","modified":1633853645167},{"_id":"themes/pure/layout/_script/search.ejs","hash":"7be33dc260ce788aa1a2cd3bd0386d95057533cb","modified":1633853645167},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1633853645168},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1633853645168},{"_id":"themes/pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1633853645168},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1633853645168},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1633853645168},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"acd27451be52703e670ce0b313f2da6fa24071e4","modified":1633853645169},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1633853645168},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1633853645169},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1633853645169},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1633853645169},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1633853645169},{"_id":"themes/pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1633853645192},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1633853645192},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1633853645193},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1633853645193},{"_id":"themes/pure/source/images/avatar.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1633853645193},{"_id":"themes/pure/source/images/favicon.ico","hash":"d49cc39708a0623a83fdeaefb46de268b818f318","modified":1633853645198},{"_id":"themes/pure/source/images/logo.png","hash":"8e6dc6af4dda2ceb1eb72b3609479f3cb4aca13f","modified":1633853645198},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1633853645198},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1633853645198},{"_id":"themes/pure/source/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1633853645199},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1633853645199},{"_id":"themes/pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1633853645199},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1633853645162},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"3c0da69fcea6ccfd97b82d50e740107a88eec5c4","modified":1633853645162},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"8dec44b1f2b35c2a4966ee6fab8f6acd50bd251a","modified":1636985034562},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"7d4979652998abf92a64bfae8157b70d6e514057","modified":1633853645163},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"a251dc34d660601a2e8b7d98b3bfe2b9023dbbce","modified":1633853645163},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1633853645163},{"_id":"themes/pure/layout/_partial/post/gitalk.ejs","hash":"353b1dafc0b9a6efb66d195e74127e3bfb73d74a","modified":1633853645163},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"95eabc0fe4033ec61b240a16eeaf7dc62a9e3da1","modified":1633853645163},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"ec3ccf322432afc2761f860c5a3000ac34d46e4c","modified":1633853645163},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1633853645163},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1633853645164},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1633853645164},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1633853645164},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1633853645165},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1633853645165},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"77defb41a1613a758ff5a6a5128c6107fc584190","modified":1633853645165},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"a051e3eddc75586e69131c29ab8c89d69626e0fd","modified":1633853645165},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"fb01f1631c3ae7fe6211dc03233506cb344229be","modified":1633853645165},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"a64852076483395738a398deb4c10bdb0f3b7b71","modified":1633853645165},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"5ab997d5ee4475d2f89f882fab4a52648dbe0e30","modified":1633853645166},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"acf81f9a59dc45f197d723f70484de5fcd166577","modified":1633853645166},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"095649a173573d03b5845c2e331ec7be976b152a","modified":1633853645166},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1633853645166},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1633853645166},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1633853645198},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1633853645198},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1633853645198},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1633853645173},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1633853645175},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1633853645178},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1633853645176},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1633853645177},{"_id":"themes/pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1633853645199},{"_id":"themes/pure/source/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1633853645200},{"_id":"themes/pure/source/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1633853645201},{"_id":"themes/pure/source/css/style.css","hash":"3b693ce41c2e35ece4773593e94b4c17aeaee02f","modified":1633853645191},{"_id":"themes/pure/source/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1633853645191},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1633853645193},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1633853645200},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"4b5dcdc366cf96737e582094267b6f177c15bb44","modified":1633853645196},{"_id":"source/CNAME","hash":"0921dce0665fa8071633e0d0450f83a70a161c54","modified":1633853645049},{"_id":"source/404/index.md","hash":"eeea2ea3b36703189d4f8b88afc8182e0abfcc6b","modified":1648389963328},{"_id":"source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1633853645049},{"_id":"source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1633853645049},{"_id":"source/links/index.md","hash":"299436e912d95e162aa209b5fbb8c310587ae31a","modified":1639215867087},{"_id":"source/about/index.md","hash":"49812f406e63c609394bcb160c2419125b36f84f","modified":1648389963318},{"_id":"source/books/index.md","hash":"daaa9c7f0a95209e31317f614277d512ed90a24d","modified":1648389963323},{"_id":"source/repository/index.md","hash":"05ab8d2ffbd6e2233956e9e9107adf6c931aa6bb","modified":1648389963389},{"_id":"source/categories/index.md","hash":"f6922f06d319e3998f1b182301e3e1b36e59640e","modified":1648389963366},{"_id":"source/tags/index.md","hash":"c6d8d8d6e547d20fe8edcdfbe509025e3577cd60","modified":1648389963489},{"_id":"source/_posts/2022/03/linux-minio.md","hash":"7434b97ba6ba029071ef6d7ee1765a864bfdee19","modified":1648385549493},{"_id":"source/_posts/2022/03/linux-search-file.md","hash":"753456cb5e4bbe1655e3647e25c8a6ac8625922e","modified":1648389963381},{"_id":"source/_posts/2021/08/mysqldumpslow分析慢查询日志.md","hash":"4ae79c21a41e53802d916ae5628b85c4660ac520","modified":1649238704950},{"_id":"source/_posts/2022/03/message-oriented-middleware.md","hash":"3b79c30ee4737276082fa59730476cb0a8f66521","modified":1648389963404},{"_id":"source/_posts/2021/08/algoright-2.md","hash":"57afeb5bb7dacf95bce010d779df1c3ea5dbd0d1","modified":1648389963431},{"_id":"source/_posts/2021/08/mysql行列转置.md","hash":"49fd86ea653ed07e343c2f3c861f05441d2e6a03","modified":1649238704953},{"_id":"source/_posts/2021/06/jdk-install.md","hash":"a79b7496c46463d8bf027e38b637af2c9f786fe6","modified":1648535264644},{"_id":"source/_posts/2022/04/lambda.md","hash":"ea78e0b452111e51c037c6bf64ef864cf45e4193","modified":1650171388405},{"_id":"source/_posts/2022/04/export-database-file.md","hash":"8d154310e9338cb8de97799a1c53157e326ca468","modified":1650171455048},{"_id":"source/_posts/2021/06/mysql-install.md","hash":"66633a055cf73c3412e364c5156ac8009dea6934","modified":1649221395266},{"_id":"source/_posts/2022/04/swagger.md","hash":"400e1d280d8b8677ac59a09bc9fc1169f9a9b9cb","modified":1650192571138},{"_id":"source/_posts/2021/09/locksupport.md","hash":"da5753bb221f5455ffedd5053a0c723f6398ac08","modified":1648389963442},{"_id":"source/_posts/2021/07/.DS_Store","hash":"dd9e4772c0c2aaa83b5d92f0f4bf45cd4defe4cb","modified":1638686852599},{"_id":"source/_posts/2021/07/algorithm.md","hash":"1cb8aac304934d4c76d4c22b0c9563da41bef97f","modified":1648389963470},{"_id":"source/_posts/2021/07/ConcurrentHashMap.md","hash":"1c56a755bb3b6dddca9d6cd764f7ec656c5a0bf8","modified":1648389963445},{"_id":"source/_posts/2021/07/ElasticSearch.md","hash":"6d7cfb278b0e1e9e90cb586ab6c85a116591f86a","modified":1648389963362},{"_id":"source/_posts/2021/07/bug-sprigCloud.md","hash":"702c08bb8239f1810c5e0e87475db7cda7276216","modified":1648389963465},{"_id":"source/_posts/2021/07/cache-consistency.md","hash":"762d6ce1189b7f1c428f80d20e765a79caee6df2","modified":1648389963477},{"_id":"source/_posts/2021/07/classLoad.md","hash":"1682b402d55aab5bd54a36905d36748d80e531c5","modified":1648389963354},{"_id":"source/_posts/2021/07/hexo-spawn-failed.md","hash":"7c89c26cb0cef5a3b4ad4c0d236bd67c3d0a8a8b","modified":1648389963315},{"_id":"source/_posts/2021/07/java-inner-class-01.md","hash":"7e62f1835650abcf9e18332e7af4450253cb9599","modified":1648389963357},{"_id":"source/_posts/2021/07/interest.md","hash":"47698c4e82bb7cd9d52b188f47fb2e35c5559809","modified":1648389963392},{"_id":"source/_posts/2021/07/java8特性.md","hash":"a9c22e4630c5e78955159d7de2c03bbd0f4d9949","modified":1648389963457},{"_id":"source/_posts/2021/07/lock01.md","hash":"90d017ba57d61bbecea3ed3ef8935b8987766f2e","modified":1648389963480},{"_id":"source/_posts/2021/07/mvcc.md","hash":"cdd94f1f1449707f90888697e473172fa6d843fa","modified":1649238704961},{"_id":"source/_posts/2021/07/mysql-transcation.md","hash":"b99e81544a8190c7fb338b98b92d698816e0136f","modified":1649238704943},{"_id":"source/_posts/2021/07/mysql.md","hash":"b905873d61eb87c507dfbc5db1254c868fb8d83a","modified":1649238704967},{"_id":"source/_posts/2021/07/mysql数据库锁.md","hash":"8b07978bdaff414ce9e9451ab7a8009fd83890bd","modified":1649238704964},{"_id":"source/_posts/2021/07/mysql-index.md","hash":"6516441e4d0c5fc50fb80350c5a35ffb381c10a8","modified":1649238704939},{"_id":"source/_posts/2021/07/mycat.md","hash":"5677b50c8396f224b06a64c892f2eecf2b0b2811","modified":1648389963312},{"_id":"source/_posts/2021/07/outOfMemoryError.md","hash":"3a5f27cab973b57b636a6c16e70dc407c8c53b45","modified":1648389963447},{"_id":"source/_posts/2021/07/redis-usage-scenario.md","hash":"f09b1da1a93ede138b0b7bcb98da4b32023deac4","modified":1648389963486},{"_id":"source/_posts/2021/07/redis_install.md","hash":"c00869d3157f433bc435e35495261f39739b3748","modified":1648389963346},{"_id":"source/_posts/2021/07/springboot-yml.md","hash":"4ef291e9d5821fa0ab4f37d146128bf033206a06","modified":1648389963467},{"_id":"source/_posts/2021/07/sql-01.md","hash":"4b88030552018810703795f92f26231a4ddc39c3","modified":1649238704934},{"_id":"source/_posts/2021/07/thread-01.md","hash":"f50a0c81db264eabf5be7673557d972edfbaf5d2","modified":1648389963452},{"_id":"source/_posts/2021/07/thread-status.md","hash":"ef3d65708a55e34d66e002e36144a81377525a4a","modified":1648389963459},{"_id":"source/_posts/2021/07/valine.md","hash":"c98a2245ce4cc512fc238c84bfcee43bf39629da","modified":1648390380701},{"_id":"source/_posts/2021/07/volatile.md","hash":"4d6fdcf53a832e2de2bcc0dcba08abf96a2756fe","modified":1648389963371},{"_id":"source/_posts/2021/07/vue.md","hash":"641981cec163f68bf07f1a86b98e840e38b1f972","modified":1648389963440},{"_id":"source/_posts/2021/07/在线修改静态文件.md","hash":"392a266060be2fda9942f51dea8625c45964f897","modified":1650167248555},{"_id":"source/_posts/2021/12/docker-01.md","hash":"07b7d2a39a8fb7124577ff52a9d8e915329a24da","modified":1648885556614},{"_id":"source/_posts/2021/12/docker-nginx.md","hash":"8eb18347aa3e0d914ff05c4d179072c69fe43d33","modified":1648389963386},{"_id":"source/_posts/2021/12/docker-mysql.md","hash":"82b4482892faf800ef4b979c16ddbcd234b27e7e","modified":1648885999044},{"_id":"source/_posts/2021/12/nginx-02.md","hash":"fe43feacb7925fde2f3d4d74dacdcbb3823e1779","modified":1648389963400},{"_id":"source/_posts/2021/12/nginx-03.md","hash":"71fc8f1f8a8abea730b67bd094060b54caf3632e","modified":1648389963463},{"_id":"source/_posts/2021/12/nginx-04.md","hash":"e849bfeae272c8f59ad7fad9d318a7ee4402aacb","modified":1648389963384},{"_id":"source/_posts/2021/12/nginx-md.md","hash":"08b34276b7eafce70f06a0c3142c982e5fd09913","modified":1648389963377},{"_id":"source/_posts/2021/11/algorithm-dinary-search.md","hash":"133148bdb689d9ca6ff761ceba6b4145afc9c5c3","modified":1648389963335},{"_id":"source/_posts/2021/11/mysql-column.md","hash":"83aedab2dd81642d32ea1ae4c8fcd0241c16c19e","modified":1649238704947},{"_id":"source/_posts/2021/11/sql-model.md","hash":"cae97fba12f1371fceaa3450bb5389b7121bdb11","modified":1649238704957},{"_id":"source/_posts/2021/10/list-to-string.md","hash":"fc3a23c4aa3a4aa20a360bc12b684103d1585147","modified":1648389963359},{"_id":"source/_posts/2021/10/shutdown.md","hash":"9e3ed82f79942e0f338897dc9bd705992d042024","modified":1648389963482},{"_id":"source/_posts/2021/10/Installing-CentOS-system.md","hash":"cd03110774bb4f4cce684d57bc6853c132b04496","modified":1648535162010},{"_id":"source/_posts/2022/03/linux-minio/10.png","hash":"0e578144f447daf607c254723262a9e9ac6d53b0","modified":1647931684019},{"_id":"source/_posts/2022/03/linux-minio/11.png","hash":"c37413b4546d3e3fde83e7916634dddab4e106ec","modified":1647932520743},{"_id":"source/_posts/2022/03/linux-minio/3_2.png","hash":"b43446dc0aa064f74e102db6011a49b179caace3","modified":1647932103208},{"_id":"source/_posts/2022/03/linux-minio/4.png","hash":"11b794752aa1acad6728daa859f129b662db66f8","modified":1647932191081},{"_id":"source/_posts/2022/03/linux-minio/5.png","hash":"31de4b322c84c54c6f858bbd1391c5342abd9d0e","modified":1647932273707},{"_id":"source/_posts/2022/03/linux-minio/6.png","hash":"b64720d8798c2d09306ac2147edd56ac16c18375","modified":1647932451341},{"_id":"source/_posts/2022/03/linux-minio/7.png","hash":"bc6f137caa09602e34667a0f23bb0511b2021717","modified":1647932415471},{"_id":"source/_posts/2022/03/linux-search-file/2.png","hash":"6b372e3bbbadd238335713fd16f851556a66be00","modified":1647669667398},{"_id":"source/_posts/2022/03/linux-search-file/5.png","hash":"3ff17aae9ac6e604d0777f004624c78d9d47df63","modified":1647673459358},{"_id":"source/_posts/2022/03/message-oriented-middleware/1.png","hash":"5dfb3680ea8e3568d79111d9d9e4fb75a907cf21","modified":1648026747334},{"_id":"source/_posts/2022/03/message-oriented-middleware/3.png","hash":"d99286339bffb8853a504654bf877268950072ec","modified":1648267675584},{"_id":"source/_posts/2022/03/message-oriented-middleware/4.png","hash":"e42294659def9b37cace9b269581081bb57d0073","modified":1648267875386},{"_id":"source/_posts/2022/03/message-oriented-middleware/5.png","hash":"8f841560adc7e442009408e40e923e0f30e1f77c","modified":1648301676667},{"_id":"source/_posts/2021/08/mysql行列转置/01.png","hash":"b89d0a368f18ac572dda4695f6cbe372f279ebcd","modified":1633853645153},{"_id":"source/_posts/2021/08/mysql行列转置/02.png","hash":"7d748d9f6d6c60bdcbf8aca5ab8890d209239a7b","modified":1633853645153},{"_id":"source/_posts/2022/03/message-oriented-middleware/6.png","hash":"4c6fe53b4cefd1b0702b6b941a365386b09502cd","modified":1648302101506},{"_id":"source/_posts/2021/06/mysql-install/5.png","hash":"96d2636dd00fb9513d2f720c69f4e39420b64405","modified":1648539328895},{"_id":"source/_posts/2021/06/mysql-install/6.png","hash":"25e9fafdf37af94e74700134fb5480217e5b1dfd","modified":1648539429268},{"_id":"source/_posts/2021/06/mysql-install/q1.png","hash":"bce35b4d4d9826d161cf2b6dfc3d3d64159299f3","modified":1648540140940},{"_id":"source/_posts/2021/06/mysql-install/q2.png","hash":"0e1ed931b1910b04e9b6da6475d0bc86c38f3aab","modified":1648609036084},{"_id":"source/_posts/2022/04/swagger/3.png","hash":"502e7b0cafe3a538ebcde8d6d61bf994414ea093","modified":1650187836676},{"_id":"source/_posts/2021/07/ConcurrentHashMap/01.png","hash":"111fdc2e7e640ca6fccf8721eec0f158e32fb1c1","modified":1633853645050},{"_id":"source/_posts/2021/07/ConcurrentHashMap/02.png","hash":"12007c1f0661add3711542ff63a6fde24d2b2516","modified":1633853645050},{"_id":"source/_posts/2021/07/ElasticSearch/image-20200806170145844.png","hash":"c98bc90ae0f0f216dd7fec89b7b712e055ed2ad1","modified":1633853645051},{"_id":"source/_posts/2021/07/ElasticSearch/image-20201211095101816.png","hash":"ab9071ebe82c1cb6b352e96b946573c234812f1a","modified":1633853645053},{"_id":"source/_posts/2021/07/ElasticSearch/image-20201211095258901.png","hash":"c9b64529bc173cdb220e8ed4dc085914b91f93a4","modified":1633853645053},{"_id":"source/_posts/2021/07/algorithm/01.png","hash":"c56633cc5a8872412e7e7dc4d804bdc9089142d2","modified":1633853645054},{"_id":"source/_posts/2021/07/algorithm/02.png","hash":"b670f25cc9fe9a3167396dbea29777acb8058db8","modified":1633853645055},{"_id":"source/_posts/2021/07/algorithm/03.png","hash":"d5a50b438cf6ed1702265d86ba43544cdda21c6e","modified":1633853645056},{"_id":"source/_posts/2021/07/bug-sprigCloud/01.png","hash":"c4a711f619567903ca4594e33d852783dd9f8d8c","modified":1633853645057},{"_id":"source/_posts/2021/07/classLoad/02.png","hash":"86dffdfb2c8ce61214bb849c096af41ca70bed21","modified":1633853645061},{"_id":"source/_posts/2021/07/interest/3_5_8.png","hash":"193e1a023943bc5656e01ef063f42732971db16e","modified":1633853645064},{"_id":"source/_posts/2021/07/lock01/read_writer_Lock1.png","hash":"c313df303034ea20d7755e1c852508078989d8fb","modified":1633853645065},{"_id":"source/_posts/2021/07/mvcc/02.png","hash":"fb4b67fb5dd68379252c5ceeed223205451add33","modified":1633853645067},{"_id":"source/_posts/2021/07/mvcc/03.png","hash":"f7f700d6a81adb11c2ffc01c9ad1d19b5b43e596","modified":1633853645067},{"_id":"source/_posts/2021/07/mvcc/04.png","hash":"b695fa332822b8c862321b4e2499745a1b6f2ca9","modified":1633853645067},{"_id":"source/_posts/2021/07/mycat/image-20201104204430049.png","hash":"3b9961e1dfc06111312d7fe8afd161ec583d6289","modified":1633853645069},{"_id":"source/_posts/2021/07/mycat/image-20201104204933409.png","hash":"00d84f09649bd8f5af97df8c797b5be80b36189a","modified":1633853645071},{"_id":"source/_posts/2021/07/mycat/image-20201104205054233.png","hash":"5556b40ae89e29d25930df47fefafaafe552a240","modified":1633853645071},{"_id":"source/_posts/2021/07/mycat/image-20201104205319372.png","hash":"98eb034972454a5babf583b6085f0e52f1885b6c","modified":1633853645072},{"_id":"source/_posts/2021/07/mycat/image-20201104210117373.png","hash":"0f609f2a13b028a42334b5c30defcb8da3d6919c","modified":1633853645076},{"_id":"source/_posts/2021/07/mycat/image-20201107212552852.png","hash":"8bbf68419505c255be696590e60910d5694cfaef","modified":1633853645085},{"_id":"source/_posts/2021/07/mycat/image-20201107213638624.png","hash":"eea90ac8885947323777c137aea5e6c4a51b5f88","modified":1633853645085},{"_id":"source/_posts/2021/07/mycat/image-20201107215437139.png","hash":"5e8b13d8e119fa6813d910dd0c85c9f1dfd89fba","modified":1633853645087},{"_id":"source/_posts/2021/07/mycat/image-20201107215605251.png","hash":"60b33dace301869dc8470ef787949cdd5cdc7cd8","modified":1633853645087},{"_id":"source/_posts/2021/07/mycat/image-20201107220049532.png","hash":"a4d9a1a501b6b74bbab8f6078675cdd0d4e5d52a","modified":1633853645087},{"_id":"source/_posts/2021/07/mycat/image-20201127094703483.png","hash":"f857cf4391f4a15818f7d11127df23ab2e19ff64","modified":1633853645088},{"_id":"source/_posts/2021/07/mycat/image-20201127103212598.png","hash":"e08b1661c6208ead3c24e074e382c0486d796545","modified":1633853645088},{"_id":"source/_posts/2021/07/mycat/image-20201127104159580.png","hash":"a6b70b3b261e89e4d8b0d615c069d3180101da9a","modified":1633853645088},{"_id":"source/_posts/2021/07/mycat/image-20201128135953635.png","hash":"18752a442d910714686f729fdd48b0f086751196","modified":1633853645089},{"_id":"source/_posts/2021/07/mycat/image-20201129110838590.png","hash":"ade0139b7a7daa20e9d5369701b71c8dc7e1280d","modified":1633853645089},{"_id":"source/_posts/2021/07/mycat/image-20201215152125176.png","hash":"451328599a4358567019ae6265cc084048daca28","modified":1633853645089},{"_id":"source/_posts/2021/07/mycat/image-20201219102742172.png","hash":"e70acc0b0f994711194e155b1a5b61451692cbdb","modified":1633853645090},{"_id":"source/_posts/2021/07/mysql/image-20200727224117281.png","hash":"68e6828d09f7daebb9a859acd87756dc88da68b5","modified":1633853645118},{"_id":"source/_posts/2021/07/mysql/image-20200727231112059.png","hash":"ca143ba3c9308f2cf8e4cdffb51ab0cc66a60531","modified":1633853645119},{"_id":"source/_posts/2021/07/mysql-index/01.png","hash":"54cd4793929b29298555767248f44b1f867292e0","modified":1633853645092},{"_id":"source/_posts/2021/07/mysql-index/02.png","hash":"bb67fbd6d341bb29c9b23aa3b1e02caf5ed5802b","modified":1633853645092},{"_id":"source/_posts/2021/07/mysql-index/03.png","hash":"f85542f17ee81b68a42fa3639b7ffba74a8bd321","modified":1633853645092},{"_id":"source/_posts/2021/07/mysql-transcation/image-20200727224117281.png","hash":"68e6828d09f7daebb9a859acd87756dc88da68b5","modified":1633853645093},{"_id":"source/_posts/2021/07/mysql-transcation/image-20200727231112059.png","hash":"ca143ba3c9308f2cf8e4cdffb51ab0cc66a60531","modified":1633853645093},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202213520136.png","hash":"6c74d02c03add5d40f7be56bdca5ef54994de67b","modified":1633853645102},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202214957559.png","hash":"21b3c64e6c15ab8c367d54659254df3db4973acb","modified":1633853645104},{"_id":"source/_posts/2021/07/outOfMemoryError/02.png","hash":"a898d849242743c8573b744a0c9194220661a57d","modified":1633853645127},{"_id":"source/_posts/2021/07/redis-usage-scenario/03.png","hash":"ec320a53ed8e0af403d19035ff6b8f8f6575fcfa","modified":1633853645143},{"_id":"source/_posts/2021/07/thread-status/01.jpg","hash":"1a0b91f489c429c2978096e68f768df0c6a1fdf0","modified":1633853645151},{"_id":"source/_posts/2021/07/valine/1.png","hash":"214770b02830880d8d67d52bf14d5e7a6c3b5512","modified":1648389398342},{"_id":"source/_posts/2021/07/volatile/01.png","hash":"5fd741f1eee38e918cb00834a1315f53c1231f1c","modified":1633853645151},{"_id":"source/_posts/2021/12/docker-nginx/3.png","hash":"1c38a521b3b5309559fd989d708511005609b17d","modified":1639058454286},{"_id":"source/_posts/2021/12/docker-nginx/2.png","hash":"dbb091b062d005b3b55f0175af97a7ff9583ca8a","modified":1639057678479},{"_id":"source/_posts/2021/12/docker-nginx/4.png","hash":"0fc9514a56c1d919fd2b0111107c79c9e4324e4a","modified":1639058516826},{"_id":"source/_posts/2021/12/docker-nginx/5.png","hash":"d4b0491ced37594733288d34a8109d9a568f0441","modified":1639058703677},{"_id":"source/_posts/2021/12/docker-nginx/6.png","hash":"de9be7b440110b0371f41d5abb99e013303d6c20","modified":1639060488667},{"_id":"source/_posts/2021/12/docker-nginx/7.png","hash":"48e4f049a01abda02c657c07e1526b0fb30f949a","modified":1639665308990},{"_id":"source/_posts/2021/12/docker-nginx/8.png","hash":"63e82cd6465f9a099d325ab532b5b4486c997eb3","modified":1639665376722},{"_id":"source/_posts/2021/12/nginx-02/image-20201210100736952.png","hash":"1212b42387d66bd9b65c94512385a4c182c5679f","modified":1633853645119},{"_id":"source/_posts/2021/12/nginx-02/image-20201210103251475.png","hash":"bcc1327d5b4046748d82e10628040e1bf09c91bc","modified":1633853645119},{"_id":"source/_posts/2021/12/docker-nginx/9.png","hash":"c1735fcecebdcb96790fa62d57d95a7b113dacb5","modified":1639668114992},{"_id":"source/_posts/2021/12/docker-mysql/5.png","hash":"e339ccb957fbc115c8b56f9b94352ef6f0cd6e1e","modified":1639059967819},{"_id":"source/_posts/2021/12/nginx-04/1.png","hash":"38e9fe132bf3242373c3509ad42874dcc69189ab","modified":1638694558780},{"_id":"source/_posts/2021/12/nginx-04/2.png","hash":"17e7f8baa7eb538366c99898fd0901dee037f16c","modified":1638694744779},{"_id":"source/_posts/2021/12/nginx-md/2.png","hash":"53d34a5bb034c47549a09d5ee2eae25c30bfe319","modified":1638688226707},{"_id":"source/_posts/2021/10/Installing-CentOS-system/1.png","hash":"f34020c2e41afb0e89340cdfe3ba14e9252db497","modified":1633855847217},{"_id":"source/_posts/2021/10/Installing-CentOS-system/4-2.png","hash":"167b6541c729f3f13da39404e8893293f9e3c8aa","modified":1633858086018},{"_id":"source/_posts/2021/10/Installing-CentOS-system/4-1.png","hash":"e9b15df079dbcdb8b8997154ebfc2e199b1ed5cf","modified":1633857863273},{"_id":"source/_posts/2022/03/linux-minio/1.png","hash":"7c5eea4fe5476fcf8b938673807b8b34537a51e8","modified":1647843139048},{"_id":"source/_posts/2022/03/linux-minio/12.png","hash":"36962b8e10cfdf26456f451087ffada9a64bdeb4","modified":1647932549480},{"_id":"source/_posts/2022/03/linux-minio/13.png","hash":"fc433ce105ecc690c4a5cde53fbd118d6dd7e2d8","modified":1647932671897},{"_id":"source/_posts/2022/03/linux-minio/15.png","hash":"f6820192467db36736d7f52a6424cacae8768fc0","modified":1647937918119},{"_id":"source/_posts/2022/03/linux-minio/16.png","hash":"3c8e000783f44cc60153c5e2db45cfa657ffa2ba","modified":1647938049664},{"_id":"source/_posts/2022/03/linux-minio/14.png","hash":"05021003b4c69ebca2fe244258defc16845b6498","modified":1647937840274},{"_id":"source/_posts/2022/03/linux-minio/3.png","hash":"b6f25f5b0bb2823adf14cbfe55e191aa9f753f62","modified":1647931929032},{"_id":"source/_posts/2022/03/linux-minio/3_1.png","hash":"52fb304193ba432d12c69209ec7d345c0fa57345","modified":1647932052573},{"_id":"source/_posts/2022/03/linux-minio/9.png","hash":"3bfdfd107ade41f4f5912e6dee91c24419ffb2e2","modified":1647930649323},{"_id":"source/_posts/2022/03/linux-search-file/1.png","hash":"8a121a7fb5d0dc1f301697fce79cb7914d8fa310","modified":1647670646891},{"_id":"source/_posts/2022/03/linux-search-file/3.png","hash":"9e68980ebe701bfbec8ada7615726d099e31bd1e","modified":1647672624295},{"_id":"source/_posts/2022/03/message-oriented-middleware/2.png","hash":"8a515b17d52e64a9321983a287e602b6dce0c547","modified":1648199066785},{"_id":"source/_posts/2021/06/mysql-install/3.png","hash":"bfb16e1540e2fe64330a4c4181c1daf3cfec2c3f","modified":1648536014655},{"_id":"source/_posts/2021/06/mysql-install/4.png","hash":"416ea1e9a568ee5528a17726fc0945b9b8a29934","modified":1648536666225},{"_id":"source/_posts/2021/06/mysql-install/7.png","hash":"b8637719e1bb4c9f69efe359e5592996763e0859","modified":1648539750113},{"_id":"source/_posts/2022/04/export-database-file/1.png","hash":"736e7c74acafa83fea50dfab7a7a29a48e12b341","modified":1650169697033},{"_id":"source/_posts/2022/04/swagger/1.png","hash":"1e3ff7efd09e90ccb1ff4601d40d7636f11d0564","modified":1650187762190},{"_id":"source/_posts/2022/04/swagger/2.png","hash":"630be832578cebce0d346834cc32f517c06b7160","modified":1650187816922},{"_id":"source/_posts/2022/04/swagger/5.png","hash":"47812a78532778ce81beb09b31114036bc372469","modified":1650190199329},{"_id":"source/_posts/2022/04/swagger/6.png","hash":"198c97f144e158ea3a16ea9b82b46e388412d606","modified":1650191830314},{"_id":"source/_posts/2022/04/swagger/7.png","hash":"46c8c0b6870f09832c2f12e57a5989bf1159b845","modified":1650191872398},{"_id":"source/_posts/2022/04/swagger/8.png","hash":"4059141f986e51c9b7bde7b8d1a97bfb1070c3c6","modified":1650192241518},{"_id":"source/_posts/2021/07/ElasticSearch/image-20200807093208470.png","hash":"5975509b668fef3322a88c368dfbe3a0cb22c4d5","modified":1633853645051},{"_id":"source/_posts/2021/07/bug-sprigCloud/02.png","hash":"05f5e2d3920fd5c9483258187681e6bbe23e84ae","modified":1633853645058},{"_id":"source/_posts/2021/07/classLoad/01.png","hash":"adc1cf322ff0f1e91e09b350d4848fdc7f0f4e43","modified":1633853645060},{"_id":"source/_posts/2021/07/mvcc/01.png","hash":"8e70ad2e05ff2d94793d61c114aaf474b7927cdb","modified":1633853645066},{"_id":"source/_posts/2021/07/mycat/image-20201104204624925.png","hash":"bef63295b620faf484bcd0945acc3675f888b2ce","modified":1633853645070},{"_id":"source/_posts/2021/07/mycat/image-20201104205756827.png","hash":"9ab8db96a20f18e0a6be7ca82b7eeb23028d575e","modified":1633853645075},{"_id":"source/_posts/2021/07/mycat/image-20201104210008624.png","hash":"794595be91b46735e45bbc76c6018cd10053e729","modified":1633853645075},{"_id":"source/_posts/2021/07/mycat/image-20201104213343204.png","hash":"d5add96f96f18cc51096e6a708cd87b730b35ef8","modified":1633853645077},{"_id":"source/_posts/2021/07/mycat/image-20201104221659540.png","hash":"b87e471db113a327ac9fd577d18673fd3a29b2c3","modified":1633853645080},{"_id":"source/_posts/2021/07/mycat/image-20201104223246735.png","hash":"66ab19ab75bc92a4894f7f678883ff967f00722e","modified":1633853645082},{"_id":"source/_posts/2021/07/mycat/image-20201107201442912.png","hash":"a2f75b03bfb1d076f552403fb247bfcbdf20c259","modified":1633853645083},{"_id":"source/_posts/2021/07/mycat/image-20201107205855474.png","hash":"087671495d91dc235cfcd2071c88e12032123d97","modified":1633853645084},{"_id":"source/_posts/2021/07/mycat/image-20201219103201836.png","hash":"f93d0c9392049c1139d0392a2965d0dcdd34555e","modified":1633853645090},{"_id":"source/_posts/2021/07/mycat/image-20201220172406074.png","hash":"d5cc2fd773afab1df221d3c8dde5d1c9eb409f8c","modified":1633853645091},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202210235089.png","hash":"fe845f80b723d3bf3c8945f241d138dcc4406c85","modified":1633853645094},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202210357906.png","hash":"d8f89873679085168d728ab2df89b1cc1939db22","modified":1633853645095},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202210510525.png","hash":"78df0df3cfc22065a0ab6be7333cb4c759b348e8","modified":1633853645097},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202211406282.png","hash":"a579a52d0d3fb2191a448da7ac3442f48d37167b","modified":1633853645099},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202214418001.png","hash":"178a89d26eef0c2ab3610e86e557b0440ddaaf0e","modified":1633853645104},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202222823984.png","hash":"34f9cfe5119eb3d50e1e45c03ebf4d5bf00f3b18","modified":1633853645111},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202223655445.png","hash":"67288f601f88c0c5662e4a4641f717a451d0be55","modified":1633853645115},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202224412832.png","hash":"0ca867bcd26897674958c4dad0473f2f266e2cfd","modified":1633853645118},{"_id":"source/_posts/2021/07/outOfMemoryError/01.png","hash":"7e36df889d5346adcb0b77af23d68afed39a6f57","modified":1633853645126},{"_id":"source/_posts/2021/07/redis-usage-scenario/02.png","hash":"6b57644ca016b2afe659711504c62fc402e412b5","modified":1633853645142},{"_id":"source/_posts/2021/07/redis-usage-scenario/04.png","hash":"cd1258db49a0356c37fe297edcc5e9d7b0d83983","modified":1633853645144},{"_id":"source/_posts/2021/07/redis-usage-scenario/05.png","hash":"bd668a6a1a9aaa46de2d3b6c2d83175d6592869e","modified":1633853645145},{"_id":"source/_posts/2021/07/redis_install/image-20201201155441018.png","hash":"baa59222dafedc944f8ab692af3dfb4d4d3e69f0","modified":1633853645149},{"_id":"source/_posts/2021/07/valine/4.png","hash":"ca41c1cedf856b6a9ee6b5c335c900a962b1fca6","modified":1648390188738},{"_id":"source/_posts/2021/12/docker-01/1.png","hash":"09ac5dd0a31482780c52c3cd3dae3ff162a725d2","modified":1639056591185},{"_id":"source/_posts/2021/12/nginx-02/3.png","hash":"32cb858c15ef5a818469661ff92b0fbb29f7268d","modified":1638692442744},{"_id":"source/_posts/2021/12/docker-mysql/2.png","hash":"6c2815970adbd185fa924848aa20bfcb40851d47","modified":1639056957476},{"_id":"source/_posts/2021/12/docker-mysql/3.png","hash":"6c8d3cd512f6abda288704617a1aa51033762d7b","modified":1639057973054},{"_id":"source/_posts/2021/12/docker-mysql/4.png","hash":"4ee8f050b4e463bc96e0e688144aaea3d87e5d6e","modified":1639059756271},{"_id":"source/_posts/2021/12/docker-mysql/6.png","hash":"91d028cf00872aeb63d20289e81367d040e7ee1f","modified":1648884935588},{"_id":"source/_posts/2021/10/Installing-CentOS-system/2.png","hash":"acc481a1b27839ff6da93ed091bd9d4baca3f0be","modified":1633856410293},{"_id":"source/_posts/2021/10/Installing-CentOS-system/3-1.png","hash":"12cba1eec366cb17ef75b3ccaa91ca19829a5b2a","modified":1633857298213},{"_id":"source/_posts/2021/10/Installing-CentOS-system/5.png","hash":"1cbdbb6eff746f3de5e02db89458d4f0778ee2c9","modified":1633856670818},{"_id":"source/_posts/2021/10/Installing-CentOS-system/6.png","hash":"b5b8a678ef5a604749dc06dcb65e5f7aec38b5b9","modified":1633856783535},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"e881a9e141da37ca46258e9d8fada3b51cd11046","modified":1633853645197},{"_id":"source/_posts/2022/03/linux-minio/8.png","hash":"9cc56fd5b83c33f3cb00e2b1e2b47cad34915d1f","modified":1647922308509},{"_id":"source/_posts/2022/03/linux-search-file/4.png","hash":"2baa488322ce8dcbe041021f8773f4d34c875dfc","modified":1647672702018},{"_id":"source/_posts/2021/06/jdk-install/1.png","hash":"edc99d2792c6dc03d577e845aca730cb3720db1c","modified":1648515977930},{"_id":"source/_posts/2022/04/swagger/4.png","hash":"b89a81fba4627f4a0db77b4f93b6f295f7224a46","modified":1650188927061},{"_id":"source/_posts/2021/07/classLoad/03.png","hash":"9bcb79b7f54a0a07c9ebf3b02ace8509cfc924ed","modified":1633853645062},{"_id":"source/_posts/2021/07/mycat/image-20201104215015366.png","hash":"319b52e8cd8fd7ab472a2993d860f8f3fe3f6ad1","modified":1633853645078},{"_id":"source/_posts/2021/07/mycat/image-20201104222632963.png","hash":"f84fe140ea2c25cc5a93e006f86729522a8a1289","modified":1633853645082},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202222250939.png","hash":"f62bf3adf4e2ccebebd148f81a8e525680d18ccb","modified":1633853645110},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202222914087.png","hash":"91e77f0b02a413d0e9613da5eeb7e65023a2897a","modified":1633853645114},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202224136052.png","hash":"98dd9ff6c0a991a146edc81251bace4c4c4470ce","modified":1633853645117},{"_id":"source/_posts/2021/07/valine/3.png","hash":"e956b57ef3817874f210a6d8d375aef438534e1d","modified":1648389817967},{"_id":"source/_posts/2021/11/sql-model/1.png","hash":"fe8bac1db0a94e89605d25b7f9a7f98dcb2f88ce","modified":1636981531265},{"_id":"source/_posts/2021/10/Installing-CentOS-system/4-3.png","hash":"7bdd1d4caf4d48b83fdd7d29d93313e5dfd52a09","modified":1633858153301},{"_id":"source/_posts/2021/10/Installing-CentOS-system/4.png","hash":"e23eb17b1f7f00d3e8b44ace3466098582b5a9b6","modified":1633856631244},{"_id":"source/_posts/2021/07/ElasticSearch/image-20200807093309761.png","hash":"d95ac7aaea31cd9322f5f7d8c8a704d76b7e503c","modified":1633853645052},{"_id":"source/_posts/2021/07/mycat/image-20201104205653611.png","hash":"df947668dea64063a150fe0a3dbcd49d696a163c","modified":1633853645074},{"_id":"source/_posts/2021/07/mycat/image-20201104210416994.png","hash":"05f625952a7a96994300c52e4444d0f670c9ac4f","modified":1633853645077},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202211752764.png","hash":"40651944aab63eda574090e4a018a8f433be12a2","modified":1633853645100},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202212103393.png","hash":"672bbb9ae12eaf223dfda421a62d3dec36406e3d","modified":1633853645101},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202215350319.png","hash":"2c3cef1bc3cfa005b5aa46a8ff19c0cb0667e39c","modified":1633853645106},{"_id":"source/_posts/2021/07/valine/2.png","hash":"4026febdc49bb2319e6cef1a5cc06649cd8dda0b","modified":1648389476182},{"_id":"source/_posts/2021/12/nginx-04/3.png","hash":"b55a0507b4ebbd8be1a5884816fbc1da252a3b24","modified":1638694935934},{"_id":"source/_posts/2021/12/nginx-md/1.png","hash":"a569af0fb2f1725e8006750237083a82a8651daf","modified":1638688234279},{"_id":"source/_posts/2021/10/Installing-CentOS-system/3.png","hash":"5b864caef9c16fa8e5187dc5bf0d3944a9b95959","modified":1633856502443},{"_id":"source/_posts/2021/10/Installing-CentOS-system/8.png","hash":"c8024d10d745586c532ce67a91301b4397bfeee6","modified":1633856907076},{"_id":"themes/pure/source/images/avatar.png","hash":"ebde5ecfd529edecfab55788e99ffcb22df93730","modified":1633853645195},{"_id":"source/_posts/2021/07/mycat/image-20201107213859155.png","hash":"bcd51eb3650bc7519c5ccbe20caba54237ec808e","modified":1633853645086},{"_id":"source/_posts/2021/07/mycat/image-20201220170713526.png","hash":"7a7f2a55b96a42ad49efa80806a9a5c9ba06a98d","modified":1633853645091},{"_id":"source/_posts/2021/07/outOfMemoryError/03.png","hash":"f6c5120f15f65e198b3d7f8f67f0b83c9fdca7b1","modified":1633853645129},{"_id":"source/_posts/2021/12/docker-nginx/1.png","hash":"a3dc3998d27ad48a417f4188f2c192075988f29c","modified":1639057656662},{"_id":"source/_posts/2021/07/outOfMemoryError/05.png","hash":"bd8a1e8b789597121dc0ea116762c8bcf6f3e385","modified":1633853645134},{"_id":"source/_posts/2021/12/docker-mysql/1.png","hash":"9fbfcbff4b301fc300cd266f6a02fc7190a4d6c1","modified":1639056767321},{"_id":"source/_posts/2021/10/Installing-CentOS-system/7.png","hash":"b1b263434f52d85aeb2a36fd0304dd423629eb58","modified":1633856839579},{"_id":"source/_posts/2022/03/linux-search-file/7.png","hash":"9c4d3d1417d8d9d77709a81ad7101b97a9d31239","modified":1647675504733},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202215717524.png","hash":"6173e68d50fed251dd9a7a908823df5b5751df4c","modified":1633853645109},{"_id":"source/_posts/2021/07/redis-usage-scenario/01.png","hash":"0e23b53142149c6b75e693e8d5b6eb87148897c3","modified":1633853645142},{"_id":"source/_posts/2021/07/redis-usage-scenario/06.png","hash":"a97a3387e2bca72ee714fd4b60201b58b2fe4ca3","modified":1633853645148},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202210817094.png","hash":"6810630ccd02b7b68215d147c408f8769edb92c3","modified":1633853645098},{"_id":"source/_posts/2021/07/outOfMemoryError/04.png","hash":"bbee74780760a53a2d4ece78fdd88b46d1592f4b","modified":1633853645132},{"_id":"source/_posts/2021/07/outOfMemoryError/06.png","hash":"c3e65cb83beb665dffdd05ab3b30ed47bd480951","modified":1633853645137},{"_id":"source/_posts/2022/03/linux-search-file/6.png","hash":"89821ca7ccc64c8006eed3adfb8b5866f57005ec","modified":1647673411404},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202213757692.png","hash":"1187aa165415735ce8b7352d39fe3af5561e86d1","modified":1633853645103},{"_id":"source/_posts/2022/03/linux-minio/2.png","hash":"fab159eedb22c1d677e8b263f17fd644d35d93fa","modified":1647930044312},{"_id":"source/_posts/2021/07/mycat/image-20201104221336437.png","hash":"e8e98f07e2503e85bbcb2699b8450ffe0e108663","modified":1633853645080},{"_id":"source/_posts/2021/12/nginx-02/image-20210606160947369.png","hash":"f3cd662ff33c0eb8bd29eea58aeb699f5e7a8a71","modified":1633853645123},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1633853645190},{"_id":"public/baidusitemap.xml","hash":"9a08d0aa47c728ed20d2d1bcc79eabfbd378e159","modified":1650192456329},{"_id":"public/feed.xml","hash":"b764e3485e2a9c714fe6524deb13a43e0a202b47","modified":1650192580776},{"_id":"public/search.xml","hash":"f5c76e4f6bb767bce27e853546c11fa92ed11120","modified":1650192580776},{"_id":"public/content.json","hash":"ef1c8639fabeffd751181f4fad16064bfb9879a0","modified":1650192580776},{"_id":"public/sitemap.xml","hash":"9d6976aa63033f9b51256d819b827d0f09edb5ab","modified":1650192456329},{"_id":"public/404.html","hash":"01b0bbc80339ec3e519038dd1fd29087a7c3a1ac","modified":1650192580776},{"_id":"public/about/index.html","hash":"41e1a58ec55a1f0b3a676b57272e0fd16d2b71df","modified":1650192580776},{"_id":"public/links/index.html","hash":"1a0119759234bfad418517c15abe47ba9a2c81b0","modified":1650192580776},{"_id":"public/books/index.html","hash":"603b3be3b0493740638c98f241b005e68791f83f","modified":1650192580776},{"_id":"public/repository/index.html","hash":"2ba18c64a3aecea874ae457d25cb4037c3346b5e","modified":1650192580776},{"_id":"public/categories/index.html","hash":"f8dcfc14e62b598a59f3919aac0e0bde7e76b7ec","modified":1650192580776},{"_id":"public/tags/index.html","hash":"e2a57792c5f4420b8c4564ca287e5c440721c88c","modified":1650192580776},{"_id":"public/swagger/index.html","hash":"5ed06256257ed97868ecefa62a40df2773d4d72b","modified":1650192580776},{"_id":"public/export-database-file/index.html","hash":"3272bd4b36b1e1d30c7afb38f8acc6be78b1f4f7","modified":1650192580776},{"_id":"public/message-oriented-middleware/index.html","hash":"987626c71ce54515aae4dcfc6ced8e68aadc5d25","modified":1650192580776},{"_id":"public/lambda/index.html","hash":"40ae5b4d6da54a97957ebc016575a58432b710e7","modified":1650192580776},{"_id":"public/linux-minio/index.html","hash":"9965e59e37ad6548c806759f5867e683b520f799","modified":1650192580776},{"_id":"public/linux-search-file/index.html","hash":"4171bae76fd1d2d10d3c9632a4d431f3336cbc10","modified":1650192580776},{"_id":"public/docker-nginx/index.html","hash":"40737f279b195ec9c0b8493c7b403f6e2b8f9867","modified":1650192580776},{"_id":"public/docker-mysql/index.html","hash":"dbc8887c55099dc6bcec3877cd88a5197be672de","modified":1650192580776},{"_id":"public/docker-01/index.html","hash":"01c45ee8bdd81cc5a5e8339cd65aa304c8625c87","modified":1650192580776},{"_id":"public/nginx-04/index.html","hash":"3c60c716a48b8b3104e6127ef9d8de231f66e0c5","modified":1650192580776},{"_id":"public/nginx-02/index.html","hash":"9538cf8d1db388580dcc45369ce21896a9fe7cf5","modified":1650192580776},{"_id":"public/nginx-03/index.html","hash":"b619d16dcaf8a8cc43b5655123c972e53a38919f","modified":1650192580776},{"_id":"public/nginx-md/index.html","hash":"4a588df514bb79278f366b3b53da625ce37ea5a8","modified":1650192580776},{"_id":"public/algorithm-dinary-search/index.html","hash":"a238e122f09671c8c8f8b5d92248ee9b4f89b48e","modified":1650192580776},{"_id":"public/mysql-column/index.html","hash":"37e20d7b05cd1f7a4ac341a566999dcfdf8d67ef","modified":1650192580776},{"_id":"public/sql-model/index.html","hash":"66e302a2257e2f8f8e16f557081dc84c17505d91","modified":1650192580776},{"_id":"public/list-to-string/index.html","hash":"66c07e583b34da67e92b86e33c8601189bffeebb","modified":1650192580776},{"_id":"public/Installing-CentOS-system/index.html","hash":"c84df8161521b5138a2d21cad9d555e81a6ffc2c","modified":1650192580776},{"_id":"public/shutdown/index.html","hash":"93f67579bdbbd091b5f91a45e3230e62f62454f3","modified":1650192580776},{"_id":"public/locksupport/index.html","hash":"d5729458832e7f36ce314b63bf42227a0df5661e","modified":1650192580776},{"_id":"public/mysql行列转置/index.html","hash":"9111fdd0b0bc142bbdf7b0e1d882ab48884f9f80","modified":1650192580776},{"_id":"public/algoright-2/index.html","hash":"e19c6298e3325942b6f78cc00988775832e27baf","modified":1650192580776},{"_id":"public/mysqldumpslow分析慢查询日志/index.html","hash":"650545b109f5795d9218da549ed88694a26b07e0","modified":1650192580776},{"_id":"public/mysql-index/index.html","hash":"1a52666c655d69dff5b0886f735aa538f7bc2c8f","modified":1650192580776},{"_id":"public/algorithm/index.html","hash":"ba02499868e5aa00b16d815894e0e3e886993a3a","modified":1650192580776},{"_id":"public/hexo-spawn-failed/index.html","hash":"ffc63dd2e1ca1f03444e2c0e0c951a6eca2801d0","modified":1650192580776},{"_id":"public/springboot-yml/index.html","hash":"5eb8ab66b025457ba1885af15d8171bccec07c37","modified":1650192580776},{"_id":"public/thread-01/index.html","hash":"6a9fb47718c79730db9a910e52079609d786cfc2","modified":1650192580776},{"_id":"public/redis-usage-scenario/index.html","hash":"dc020681b4b702da362eff1d4a0e425f5881ea21","modified":1650192580776},{"_id":"public/mvcc/index.html","hash":"02295d7f3670e936a98aa6eae1948c7b758813af","modified":1650192580776},{"_id":"public/volatile/index.html","hash":"e9bd6bfbd80ddfd3ba2160beb39b83ca4b0478e5","modified":1650192580776},{"_id":"public/cache-consistency/index.html","hash":"d2c0c8bdfa70a993c9caefb72ec8d1b5e4c94f03","modified":1650192580776},{"_id":"public/outOfMemoryError/index.html","hash":"58eaee4ff77595f0c3716ef1651d0e5da0ad0489","modified":1650192580776},{"_id":"public/classLoad/index.html","hash":"dea6f84d233ccd606de61c8e7dd52dd4ad92524f","modified":1650192580776},{"_id":"public/valine/index.html","hash":"a236de801740e69ff6f104d3c0add299b79e617f","modified":1650192580776},{"_id":"public/mycat/index.html","hash":"a86137388598fb391e9127d2d02f987bef0e009f","modified":1650192580776},{"_id":"public/mysql数据库锁/index.html","hash":"b069326185d2189dc582756a4cb8e2b5af0956e5","modified":1650192580776},{"_id":"public/mysql-transcation/index.html","hash":"e0ab09862f8a06eb710eaf0fe7a86679317284ac","modified":1650192580776},{"_id":"public/lock01/index.html","hash":"9ce1b701f0076bdc3e27cafd08d1bfdaf90be5c7","modified":1650192580776},{"_id":"public/mysql/index.html","hash":"c92f6120fb92a2bf9c4c68a4da794095142cfc98","modified":1650192580776},{"_id":"public/ElasticSearch/index.html","hash":"590eade168a7fa239cbd95c3a00997b7764fb1a3","modified":1650192580776},{"_id":"public/vue/index.html","hash":"00be02124a14a81c145d19da5dfbaffdbed1f8c7","modified":1650192580776},{"_id":"public/bug-sprigCloud/index.html","hash":"dc2d371968826a321c337368d425bd6490301e9b","modified":1650192580776},{"_id":"public/ConcurrentHashMap/index.html","hash":"4ad20bf1cb9f985b0bd1b05a7784394e95e35efa","modified":1650192580776},{"_id":"public/sql-01/index.html","hash":"714cca511458f94119f6adbeb94e576fcb4b4222","modified":1650192580776},{"_id":"public/mysql-install/index.html","hash":"28fd727d0a93c2d24ea2125831f4ca83e6041fd4","modified":1650192580776},{"_id":"public/jdk-install/index.html","hash":"fa6e8e88c8d7cf7d464f4a2aadf4e8f13e567dc3","modified":1650192580776},{"_id":"public/interest/index.html","hash":"d99785c55c805ede206c94ea063c80f8361993d2","modified":1650192580776},{"_id":"public/java-inner-class-01/index.html","hash":"003f1dfe5d1df5d70181496ca10d659736d2189a","modified":1650192580776},{"_id":"public/redis_install/index.html","hash":"69e17e1df786d3f5dfb2f88ade73ba95fa3f2d00","modified":1650192580776},{"_id":"public/在线修改静态文件/index.html","hash":"b5698aa5cc7b7d3fcfd58d7d8bc4696db2d809cc","modified":1650192580776},{"_id":"public/thread-status/index.html","hash":"075560a90b8df7b11588363dab1309925dfa552b","modified":1650192580776},{"_id":"public/java8特性/index.html","hash":"6921c270569b050c6f8997b9f0f4f17acae895d6","modified":1650192580776},{"_id":"public/archives/page/2/index.html","hash":"760b66977397cae7fe2c45f7c6fed076f78b48a5","modified":1650192580776},{"_id":"public/archives/index.html","hash":"24b99711b86e51e0012965d1c777f1602f88efb7","modified":1650192580776},{"_id":"public/archives/2020/index.html","hash":"d27af6e725d95fe2704aebc670a816b2918f78f7","modified":1650192580776},{"_id":"public/archives/2020/04/index.html","hash":"3c03db6f712142bb07d084d5fdc21604ae9dad72","modified":1650192580776},{"_id":"public/archives/2020/06/index.html","hash":"e16889adb6b14e3d5c5d3cd3249ce92dc026490b","modified":1650192580776},{"_id":"public/archives/2021/index.html","hash":"86ab307fbe06cd553263556ec89e73e23b3afc4c","modified":1650192580776},{"_id":"public/archives/2021/05/index.html","hash":"76e5113b13474490687a47d4b989059bd60a5dee","modified":1650192580776},{"_id":"public/archives/2021/06/index.html","hash":"2038ea33a8be3b5da5115ad8252739c7f1d70e77","modified":1650192580776},{"_id":"public/archives/2021/07/index.html","hash":"d81febec4344a86cad2d1e054591a47d49d639ce","modified":1650192580776},{"_id":"public/archives/2021/08/index.html","hash":"bc53ebbebbab1db6439936f98907e3695f282010","modified":1650192580776},{"_id":"public/archives/2021/09/index.html","hash":"2689bc4b240ebc7a200d58370ab6429aa27a5f21","modified":1650192580776},{"_id":"public/archives/2021/10/index.html","hash":"a4d290a2647ba1b3846ec052fc425dfd7f7f13fc","modified":1650192580776},{"_id":"public/archives/2021/11/index.html","hash":"cbd9428dcbd5d3dd52db03f7a9dac037b487200f","modified":1650192580776},{"_id":"public/archives/2021/12/index.html","hash":"edad1276841061c81e3afaa5d2567e0d4f2c5c67","modified":1650192580776},{"_id":"public/archives/2022/index.html","hash":"3f0b4d68216b1e66432c56b8b09a6ff0b1fb4ce2","modified":1650192580776},{"_id":"public/archives/2022/03/index.html","hash":"fd761346d566bd62ab4a6b33953cf106426832ed","modified":1650192580776},{"_id":"public/archives/2022/04/index.html","hash":"52e94981b8f6618239661d76b35febebb6569aff","modified":1650192580776},{"_id":"public/categories/中间件/index.html","hash":"39a26e9e0a71e6db7bc2e479201989f3b6f3a52b","modified":1650192580776},{"_id":"public/categories/mysql/index.html","hash":"4f326f3ef33effc5bae406d5eb2d2eab1d0bc058","modified":1650192580776},{"_id":"public/categories/linux/index.html","hash":"7eb3422c1184e203ac3fd5bd1366aee51c9c4098","modified":1650192580776},{"_id":"public/categories/算法/index.html","hash":"be444bf5b11566529f99f436fc2f8d8ac178aa03","modified":1650192580776},{"_id":"public/categories/java/index.html","hash":"513f12980a92fc3326fa2e9c7f5d40c2a590d20d","modified":1650192580776},{"_id":"public/categories/知识整理/index.html","hash":"191a5175bff4aa8f563f0ee3979e82a1707136fa","modified":1650192580776},{"_id":"public/categories/踩坑记录/index.html","hash":"6a18607a0b608c1a21025ea7d33dea90216c4b38","modified":1650192580776},{"_id":"public/categories/Docker/index.html","hash":"129d663a40f070eb1df2e1e6ca16744ec5f567bd","modified":1650192580776},{"_id":"public/categories/nginx/index.html","hash":"2c8c5cfeddf070a217052ca359af7e9e4c6772d6","modified":1650192580776},{"_id":"public/categories/swagger/index.html","hash":"7dc1322b9344b7f71dce10592c3c4540826366a2","modified":1650192580776},{"_id":"public/categories/学习笔记/index.html","hash":"13b1905636cbbeb05d7402bd2a1c5a285734b616","modified":1650192580776},{"_id":"public/index.html","hash":"401c0cecd9a2151973099f5c21fcbdc16b3b6c77","modified":1650192580776},{"_id":"public/tags/Linux/index.html","hash":"668fadf9469d107a71f7d932775ec0b49856a29b","modified":1650192580776},{"_id":"public/page/2/index.html","hash":"064d232100203dfbcf9ef509c9a86c6c31d5e2c2","modified":1650192580776},{"_id":"public/tags/消息中间件/index.html","hash":"448c772472cc4836e0f5f7b4e1a17570955c3e20","modified":1650192580776},{"_id":"public/tags/mysql/index.html","hash":"b1b2b0c982beca125f01c13eeb43a332c78751f2","modified":1650192580776},{"_id":"public/tags/algorithm/index.html","hash":"ecfa150d1fa7c18ac3d407b1365b4f4c2bf6b808","modified":1650192580776},{"_id":"public/tags/jdk/index.html","hash":"78620d7cd19ada0b7d4df5e566f9f58494ec9f1b","modified":1650192580776},{"_id":"public/tags/java/index.html","hash":"cf71ced32ad3a0cc17e63ab07851406508676a51","modified":1650192580776},{"_id":"public/tags/线程/index.html","hash":"c82ee80c64d36cfc9b1d0ed147013479ff04ab4c","modified":1650192580776},{"_id":"public/tags/Java/index.html","hash":"686a6183ad0b71587f5fd09f21eb1445854ab5c4","modified":1650192580776},{"_id":"public/tags/ELK/index.html","hash":"33b66398263254f4f198a09145f8e5623460d299","modified":1650192580776},{"_id":"public/tags/SpringCloud/index.html","hash":"2e7aaa659f9c8f8285c112f461362e8e729b228d","modified":1650192580776},{"_id":"public/tags/redis/index.html","hash":"b9b854cb3d2a7418e3fc91f3e10daff7ff5d9d32","modified":1650192580776},{"_id":"public/tags/ClassLoader/index.html","hash":"fdceeaf2f73264bc04d1a7f757d07182e4b10c53","modified":1650192580776},{"_id":"public/tags/hexo/index.html","hash":"f50e261605fede807316f290362b1dfecefb5509","modified":1650192580776},{"_id":"public/tags/内部类/index.html","hash":"b772473a051b8e0ce6e39f781877c25a4762e1f5","modified":1650192580776},{"_id":"public/tags/lock/index.html","hash":"59cc1d2a02cb7244c909da1da1fe46e298422248","modified":1650192580776},{"_id":"public/tags/内存溢出/index.html","hash":"bf134dcbf933cbfef8edb8e77bb7dbf01d218293","modified":1650192580776},{"_id":"public/tags/springboot/index.html","hash":"c4cc351a8ddfe8d41b164835a7261b2fb1de66ca","modified":1650192580776},{"_id":"public/tags/守护线程/index.html","hash":"4152e1ca9ddf25fb0f59d6b5d0f13f5fa65b008e","modified":1650192580776},{"_id":"public/tags/docker/index.html","hash":"8a95d1830b297cc53f34e0b66a208715e7bb6aa3","modified":1650192580776},{"_id":"public/tags/nginx/index.html","hash":"b0534d82fd78638f53800f2d0cd37f92d020028d","modified":1650192580776},{"_id":"public/tags/tidb/index.html","hash":"a39447eefd805d156037a3f6a4e2eec5a363c9cf","modified":1650192580776},{"_id":"public/tags/集合/index.html","hash":"f8a238c66936ab39d7593ac8330b9dcf6392784c","modified":1650192580776},{"_id":"public/tags/shutdown/index.html","hash":"9532b5a76356cd6667f500b81933cca43901ea13","modified":1650192580776},{"_id":"public/tags/linux/index.html","hash":"2e6914c6b09b9325e7cec6a92e0895cad42e158e","modified":1650192580776},{"_id":"public/tags/swagger/index.html","hash":"7a29758c6cd0ed8339ca6928adfb9443a92a0eeb","modified":1650192580776},{"_id":"public/tags/mycat/index.html","hash":"200ed99a9607a19ff698ee763a934ca3469f4edf","modified":1650192580776},{"_id":"public/tags/vue/index.html","hash":"d09d6ef90cf2a47e68c2eaef30b2da74988a6933","modified":1650192580776},{"_id":"public/CNAME","hash":"0921dce0665fa8071633e0d0450f83a70a161c54","modified":1650192456329},{"_id":"public/favicon.ico","hash":"80efb1836c542af64366401b6e79cbad51037f24","modified":1650192456329},{"_id":"public/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1650192456329},{"_id":"public/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1650192456329},{"_id":"public/images/avatar.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1650192456329},{"_id":"public/images/favicon.ico","hash":"d49cc39708a0623a83fdeaefb46de268b818f318","modified":1650192456329},{"_id":"public/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1650192456329},{"_id":"public/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1650192456329},{"_id":"public/images/logo.png","hash":"8e6dc6af4dda2ceb1eb72b3609479f3cb4aca13f","modified":1650192456329},{"_id":"public/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1650192456329},{"_id":"public/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1650192456329},{"_id":"public/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1650192456329},{"_id":"public/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1650192456329},{"_id":"public/message-oriented-middleware/3.png","hash":"d99286339bffb8853a504654bf877268950072ec","modified":1650192456329},{"_id":"public/message-oriented-middleware/4.png","hash":"e42294659def9b37cace9b269581081bb57d0073","modified":1650192456329},{"_id":"public/linux-search-file/2.png","hash":"6b372e3bbbadd238335713fd16f851556a66be00","modified":1650192456329},{"_id":"public/message-oriented-middleware/6.png","hash":"4c6fe53b4cefd1b0702b6b941a365386b09502cd","modified":1650192456329},{"_id":"public/linux-search-file/5.png","hash":"3ff17aae9ac6e604d0777f004624c78d9d47df63","modified":1650192456329},{"_id":"public/linux-minio/10.png","hash":"0e578144f447daf607c254723262a9e9ac6d53b0","modified":1650192456329},{"_id":"public/linux-minio/5.png","hash":"31de4b322c84c54c6f858bbd1391c5342abd9d0e","modified":1650192456329},{"_id":"public/linux-minio/7.png","hash":"bc6f137caa09602e34667a0f23bb0511b2021717","modified":1650192456329},{"_id":"public/linux-minio/4.png","hash":"11b794752aa1acad6728daa859f129b662db66f8","modified":1650192456329},{"_id":"public/linux-minio/6.png","hash":"b64720d8798c2d09306ac2147edd56ac16c18375","modified":1650192456329},{"_id":"public/mysql行列转置/01.png","hash":"b89d0a368f18ac572dda4695f6cbe372f279ebcd","modified":1650192456329},{"_id":"public/linux-minio/3_2.png","hash":"b43446dc0aa064f74e102db6011a49b179caace3","modified":1650192456329},{"_id":"public/mysql行列转置/02.png","hash":"7d748d9f6d6c60bdcbf8aca5ab8890d209239a7b","modified":1650192456329},{"_id":"public/mysql-install/6.png","hash":"25e9fafdf37af94e74700134fb5480217e5b1dfd","modified":1650192456329},{"_id":"public/mysql-install/5.png","hash":"96d2636dd00fb9513d2f720c69f4e39420b64405","modified":1650192456329},{"_id":"public/mysql-install/q2.png","hash":"0e1ed931b1910b04e9b6da6475d0bc86c38f3aab","modified":1650192456329},{"_id":"public/algorithm/01.png","hash":"c56633cc5a8872412e7e7dc4d804bdc9089142d2","modified":1650192456329},{"_id":"public/mysql-install/q1.png","hash":"bce35b4d4d9826d161cf2b6dfc3d3d64159299f3","modified":1650192456329},{"_id":"public/algorithm/02.png","hash":"b670f25cc9fe9a3167396dbea29777acb8058db8","modified":1650192456329},{"_id":"public/algorithm/03.png","hash":"d5a50b438cf6ed1702265d86ba43544cdda21c6e","modified":1650192456329},{"_id":"public/ConcurrentHashMap/01.png","hash":"111fdc2e7e640ca6fccf8721eec0f158e32fb1c1","modified":1650192456329},{"_id":"public/bug-sprigCloud/01.png","hash":"c4a711f619567903ca4594e33d852783dd9f8d8c","modified":1650192456329},{"_id":"public/ElasticSearch/image-20200806170145844.png","hash":"c98bc90ae0f0f216dd7fec89b7b712e055ed2ad1","modified":1650192456329},{"_id":"public/ConcurrentHashMap/02.png","hash":"12007c1f0661add3711542ff63a6fde24d2b2516","modified":1650192456329},{"_id":"public/ElasticSearch/image-20201211095101816.png","hash":"ab9071ebe82c1cb6b352e96b946573c234812f1a","modified":1650192456329},{"_id":"public/ElasticSearch/image-20201211095258901.png","hash":"c9b64529bc173cdb220e8ed4dc085914b91f93a4","modified":1650192456329},{"_id":"public/classLoad/02.png","hash":"86dffdfb2c8ce61214bb849c096af41ca70bed21","modified":1650192456329},{"_id":"public/lock01/read_writer_Lock1.png","hash":"c313df303034ea20d7755e1c852508078989d8fb","modified":1650192456329},{"_id":"public/interest/3_5_8.png","hash":"193e1a023943bc5656e01ef063f42732971db16e","modified":1650192456329},{"_id":"public/mvcc/02.png","hash":"fb4b67fb5dd68379252c5ceeed223205451add33","modified":1650192456329},{"_id":"public/mvcc/03.png","hash":"f7f700d6a81adb11c2ffc01c9ad1d19b5b43e596","modified":1650192456329},{"_id":"public/mvcc/04.png","hash":"b695fa332822b8c862321b4e2499745a1b6f2ca9","modified":1650192456329},{"_id":"public/mysql/image-20200727224117281.png","hash":"68e6828d09f7daebb9a859acd87756dc88da68b5","modified":1650192456329},{"_id":"public/mysql/image-20200727231112059.png","hash":"ca143ba3c9308f2cf8e4cdffb51ab0cc66a60531","modified":1650192456329},{"_id":"public/mysql-transcation/image-20200727224117281.png","hash":"68e6828d09f7daebb9a859acd87756dc88da68b5","modified":1650192456329},{"_id":"public/mysql-transcation/image-20200727231112059.png","hash":"ca143ba3c9308f2cf8e4cdffb51ab0cc66a60531","modified":1650192456329},{"_id":"public/mysql-transcation/image-20201202213520136.png","hash":"6c74d02c03add5d40f7be56bdca5ef54994de67b","modified":1650192456329},{"_id":"public/mysql-transcation/image-20201202214957559.png","hash":"21b3c64e6c15ab8c367d54659254df3db4973acb","modified":1650192456329},{"_id":"public/outOfMemoryError/02.png","hash":"a898d849242743c8573b744a0c9194220661a57d","modified":1650192456329},{"_id":"public/mysql-index/01.png","hash":"54cd4793929b29298555767248f44b1f867292e0","modified":1650192456329},{"_id":"public/mysql-index/02.png","hash":"bb67fbd6d341bb29c9b23aa3b1e02caf5ed5802b","modified":1650192456329},{"_id":"public/mysql-index/03.png","hash":"f85542f17ee81b68a42fa3639b7ffba74a8bd321","modified":1650192456329},{"_id":"public/redis-usage-scenario/03.png","hash":"ec320a53ed8e0af403d19035ff6b8f8f6575fcfa","modified":1650192456329},{"_id":"public/volatile/01.png","hash":"5fd741f1eee38e918cb00834a1315f53c1231f1c","modified":1650192456329},{"_id":"public/thread-status/01.jpg","hash":"1a0b91f489c429c2978096e68f768df0c6a1fdf0","modified":1650192456329},{"_id":"public/valine/1.png","hash":"214770b02830880d8d67d52bf14d5e7a6c3b5512","modified":1650192456329},{"_id":"public/docker-mysql/5.png","hash":"e339ccb957fbc115c8b56f9b94352ef6f0cd6e1e","modified":1650192456329},{"_id":"public/docker-nginx/2.png","hash":"dbb091b062d005b3b55f0175af97a7ff9583ca8a","modified":1650192456329},{"_id":"public/docker-nginx/3.png","hash":"1c38a521b3b5309559fd989d708511005609b17d","modified":1650192456329},{"_id":"public/docker-nginx/4.png","hash":"0fc9514a56c1d919fd2b0111107c79c9e4324e4a","modified":1650192456329},{"_id":"public/docker-nginx/5.png","hash":"d4b0491ced37594733288d34a8109d9a568f0441","modified":1650192456329},{"_id":"public/docker-nginx/6.png","hash":"de9be7b440110b0371f41d5abb99e013303d6c20","modified":1650192456329},{"_id":"public/docker-nginx/7.png","hash":"48e4f049a01abda02c657c07e1526b0fb30f949a","modified":1650192456329},{"_id":"public/docker-nginx/8.png","hash":"63e82cd6465f9a099d325ab532b5b4486c997eb3","modified":1650192456329},{"_id":"public/docker-nginx/9.png","hash":"c1735fcecebdcb96790fa62d57d95a7b113dacb5","modified":1650192456329},{"_id":"public/nginx-02/image-20201210100736952.png","hash":"1212b42387d66bd9b65c94512385a4c182c5679f","modified":1650192456329},{"_id":"public/nginx-02/image-20201210103251475.png","hash":"bcc1327d5b4046748d82e10628040e1bf09c91bc","modified":1650192456329},{"_id":"public/nginx-04/1.png","hash":"38e9fe132bf3242373c3509ad42874dcc69189ab","modified":1650192456329},{"_id":"public/nginx-04/2.png","hash":"17e7f8baa7eb538366c99898fd0901dee037f16c","modified":1650192456329},{"_id":"public/nginx-md/2.png","hash":"53d34a5bb034c47549a09d5ee2eae25c30bfe319","modified":1650192456329},{"_id":"public/Installing-CentOS-system/1.png","hash":"f34020c2e41afb0e89340cdfe3ba14e9252db497","modified":1650192456329},{"_id":"public/Installing-CentOS-system/4-2.png","hash":"167b6541c729f3f13da39404e8893293f9e3c8aa","modified":1650192456329},{"_id":"public/Installing-CentOS-system/4-1.png","hash":"e9b15df079dbcdb8b8997154ebfc2e199b1ed5cf","modified":1650192456329},{"_id":"public/swagger/3.png","hash":"502e7b0cafe3a538ebcde8d6d61bf994414ea093","modified":1650192456329},{"_id":"public/mycat/image-20201104204430049.png","hash":"3b9961e1dfc06111312d7fe8afd161ec583d6289","modified":1650192456329},{"_id":"public/mycat/image-20201104204933409.png","hash":"00d84f09649bd8f5af97df8c797b5be80b36189a","modified":1650192456329},{"_id":"public/mycat/image-20201104205054233.png","hash":"5556b40ae89e29d25930df47fefafaafe552a240","modified":1650192456329},{"_id":"public/mycat/image-20201104205319372.png","hash":"98eb034972454a5babf583b6085f0e52f1885b6c","modified":1650192456329},{"_id":"public/mycat/image-20201104210117373.png","hash":"0f609f2a13b028a42334b5c30defcb8da3d6919c","modified":1650192456329},{"_id":"public/mycat/image-20201107213638624.png","hash":"eea90ac8885947323777c137aea5e6c4a51b5f88","modified":1650192456329},{"_id":"public/mycat/image-20201107215605251.png","hash":"60b33dace301869dc8470ef787949cdd5cdc7cd8","modified":1650192456329},{"_id":"public/mycat/image-20201107215437139.png","hash":"5e8b13d8e119fa6813d910dd0c85c9f1dfd89fba","modified":1650192456329},{"_id":"public/mycat/image-20201107212552852.png","hash":"8bbf68419505c255be696590e60910d5694cfaef","modified":1650192456329},{"_id":"public/mycat/image-20201107220049532.png","hash":"a4d9a1a501b6b74bbab8f6078675cdd0d4e5d52a","modified":1650192456329},{"_id":"public/mycat/image-20201127094703483.png","hash":"f857cf4391f4a15818f7d11127df23ab2e19ff64","modified":1650192456329},{"_id":"public/mycat/image-20201127103212598.png","hash":"e08b1661c6208ead3c24e074e382c0486d796545","modified":1650192456329},{"_id":"public/mycat/image-20201127104159580.png","hash":"a6b70b3b261e89e4d8b0d615c069d3180101da9a","modified":1650192456329},{"_id":"public/mycat/image-20201128135953635.png","hash":"18752a442d910714686f729fdd48b0f086751196","modified":1650192456329},{"_id":"public/mycat/image-20201129110838590.png","hash":"ade0139b7a7daa20e9d5369701b71c8dc7e1280d","modified":1650192456329},{"_id":"public/mycat/image-20201219102742172.png","hash":"e70acc0b0f994711194e155b1a5b61451692cbdb","modified":1650192456329},{"_id":"public/mycat/image-20201215152125176.png","hash":"451328599a4358567019ae6265cc084048daca28","modified":1650192456329},{"_id":"public/message-oriented-middleware/2.png","hash":"8a515b17d52e64a9321983a287e602b6dce0c547","modified":1650192456329},{"_id":"public/message-oriented-middleware/1.png","hash":"5dfb3680ea8e3568d79111d9d9e4fb75a907cf21","modified":1650192456329},{"_id":"public/message-oriented-middleware/5.png","hash":"8f841560adc7e442009408e40e923e0f30e1f77c","modified":1650192456329},{"_id":"public/linux-search-file/1.png","hash":"8a121a7fb5d0dc1f301697fce79cb7914d8fa310","modified":1650192456329},{"_id":"public/linux-minio/1.png","hash":"7c5eea4fe5476fcf8b938673807b8b34537a51e8","modified":1650192456329},{"_id":"public/linux-minio/11.png","hash":"c37413b4546d3e3fde83e7916634dddab4e106ec","modified":1650192456329},{"_id":"public/linux-minio/13.png","hash":"fc433ce105ecc690c4a5cde53fbd118d6dd7e2d8","modified":1650192456329},{"_id":"public/linux-minio/12.png","hash":"36962b8e10cfdf26456f451087ffada9a64bdeb4","modified":1650192456329},{"_id":"public/linux-minio/14.png","hash":"05021003b4c69ebca2fe244258defc16845b6498","modified":1650192456329},{"_id":"public/linux-minio/15.png","hash":"f6820192467db36736d7f52a6424cacae8768fc0","modified":1650192456329},{"_id":"public/linux-minio/3.png","hash":"b6f25f5b0bb2823adf14cbfe55e191aa9f753f62","modified":1650192456329},{"_id":"public/linux-minio/16.png","hash":"3c8e000783f44cc60153c5e2db45cfa657ffa2ba","modified":1650192456329},{"_id":"public/linux-minio/3_1.png","hash":"52fb304193ba432d12c69209ec7d345c0fa57345","modified":1650192456329},{"_id":"public/linux-minio/9.png","hash":"3bfdfd107ade41f4f5912e6dee91c24419ffb2e2","modified":1650192456329},{"_id":"public/mysql-install/3.png","hash":"bfb16e1540e2fe64330a4c4181c1daf3cfec2c3f","modified":1650192456329},{"_id":"public/mysql-install/7.png","hash":"b8637719e1bb4c9f69efe359e5592996763e0859","modified":1650192456329},{"_id":"public/bug-sprigCloud/02.png","hash":"05f5e2d3920fd5c9483258187681e6bbe23e84ae","modified":1650192456329},{"_id":"public/ElasticSearch/image-20200807093208470.png","hash":"5975509b668fef3322a88c368dfbe3a0cb22c4d5","modified":1650192456329},{"_id":"public/classLoad/01.png","hash":"adc1cf322ff0f1e91e09b350d4848fdc7f0f4e43","modified":1650192456329},{"_id":"public/mvcc/01.png","hash":"8e70ad2e05ff2d94793d61c114aaf474b7927cdb","modified":1650192456329},{"_id":"public/mysql-transcation/image-20201202210357906.png","hash":"d8f89873679085168d728ab2df89b1cc1939db22","modified":1650192456329},{"_id":"public/mysql-transcation/image-20201202210235089.png","hash":"fe845f80b723d3bf3c8945f241d138dcc4406c85","modified":1650192456329},{"_id":"public/mysql-transcation/image-20201202210510525.png","hash":"78df0df3cfc22065a0ab6be7333cb4c759b348e8","modified":1650192456329},{"_id":"public/mysql-transcation/image-20201202211406282.png","hash":"a579a52d0d3fb2191a448da7ac3442f48d37167b","modified":1650192456329},{"_id":"public/mysql-transcation/image-20201202214418001.png","hash":"178a89d26eef0c2ab3610e86e557b0440ddaaf0e","modified":1650192456329},{"_id":"public/mysql-transcation/image-20201202222823984.png","hash":"34f9cfe5119eb3d50e1e45c03ebf4d5bf00f3b18","modified":1650192456329},{"_id":"public/mysql-transcation/image-20201202223655445.png","hash":"67288f601f88c0c5662e4a4641f717a451d0be55","modified":1650192456329},{"_id":"public/mysql-transcation/image-20201202224412832.png","hash":"0ca867bcd26897674958c4dad0473f2f266e2cfd","modified":1650192456329},{"_id":"public/outOfMemoryError/01.png","hash":"7e36df889d5346adcb0b77af23d68afed39a6f57","modified":1650192456329},{"_id":"public/redis-usage-scenario/02.png","hash":"6b57644ca016b2afe659711504c62fc402e412b5","modified":1650192456329},{"_id":"public/redis-usage-scenario/04.png","hash":"cd1258db49a0356c37fe297edcc5e9d7b0d83983","modified":1650192456329},{"_id":"public/redis-usage-scenario/05.png","hash":"bd668a6a1a9aaa46de2d3b6c2d83175d6592869e","modified":1650192456329},{"_id":"public/redis_install/image-20201201155441018.png","hash":"baa59222dafedc944f8ab692af3dfb4d4d3e69f0","modified":1650192456329},{"_id":"public/valine/4.png","hash":"ca41c1cedf856b6a9ee6b5c335c900a962b1fca6","modified":1650192456329},{"_id":"public/docker-01/1.png","hash":"09ac5dd0a31482780c52c3cd3dae3ff162a725d2","modified":1650192456329},{"_id":"public/docker-mysql/2.png","hash":"6c2815970adbd185fa924848aa20bfcb40851d47","modified":1650192456329},{"_id":"public/docker-mysql/3.png","hash":"6c8d3cd512f6abda288704617a1aa51033762d7b","modified":1650192456329},{"_id":"public/docker-mysql/4.png","hash":"4ee8f050b4e463bc96e0e688144aaea3d87e5d6e","modified":1650192456329},{"_id":"public/docker-mysql/6.png","hash":"91d028cf00872aeb63d20289e81367d040e7ee1f","modified":1650192456329},{"_id":"public/nginx-02/3.png","hash":"32cb858c15ef5a818469661ff92b0fbb29f7268d","modified":1650192456329},{"_id":"public/Installing-CentOS-system/2.png","hash":"acc481a1b27839ff6da93ed091bd9d4baca3f0be","modified":1650192456329},{"_id":"public/Installing-CentOS-system/3-1.png","hash":"12cba1eec366cb17ef75b3ccaa91ca19829a5b2a","modified":1650192456329},{"_id":"public/Installing-CentOS-system/5.png","hash":"1cbdbb6eff746f3de5e02db89458d4f0778ee2c9","modified":1650192456329},{"_id":"public/Installing-CentOS-system/6.png","hash":"b5b8a678ef5a604749dc06dcb65e5f7aec38b5b9","modified":1650192456329},{"_id":"public/swagger/1.png","hash":"1e3ff7efd09e90ccb1ff4601d40d7636f11d0564","modified":1650192456329},{"_id":"public/swagger/2.png","hash":"630be832578cebce0d346834cc32f517c06b7160","modified":1650192456329},{"_id":"public/swagger/5.png","hash":"47812a78532778ce81beb09b31114036bc372469","modified":1650192456329},{"_id":"public/swagger/6.png","hash":"198c97f144e158ea3a16ea9b82b46e388412d606","modified":1650192456329},{"_id":"public/swagger/7.png","hash":"46c8c0b6870f09832c2f12e57a5989bf1159b845","modified":1650192456329},{"_id":"public/swagger/8.png","hash":"4059141f986e51c9b7bde7b8d1a97bfb1070c3c6","modified":1650192456329},{"_id":"public/mycat/image-20201104204624925.png","hash":"bef63295b620faf484bcd0945acc3675f888b2ce","modified":1650192456329},{"_id":"public/mycat/image-20201104205756827.png","hash":"9ab8db96a20f18e0a6be7ca82b7eeb23028d575e","modified":1650192456329},{"_id":"public/mycat/image-20201104210008624.png","hash":"794595be91b46735e45bbc76c6018cd10053e729","modified":1650192456329},{"_id":"public/mycat/image-20201104213343204.png","hash":"d5add96f96f18cc51096e6a708cd87b730b35ef8","modified":1650192456329},{"_id":"public/mycat/image-20201104221659540.png","hash":"b87e471db113a327ac9fd577d18673fd3a29b2c3","modified":1650192456329},{"_id":"public/mycat/image-20201104223246735.png","hash":"66ab19ab75bc92a4894f7f678883ff967f00722e","modified":1650192456329},{"_id":"public/mycat/image-20201107201442912.png","hash":"a2f75b03bfb1d076f552403fb247bfcbdf20c259","modified":1650192456329},{"_id":"public/mycat/image-20201107205855474.png","hash":"087671495d91dc235cfcd2071c88e12032123d97","modified":1650192456329},{"_id":"public/mycat/image-20201219103201836.png","hash":"f93d0c9392049c1139d0392a2965d0dcdd34555e","modified":1650192456329},{"_id":"public/mycat/image-20201220172406074.png","hash":"d5cc2fd773afab1df221d3c8dde5d1c9eb409f8c","modified":1650192456329},{"_id":"public/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1650192456329},{"_id":"public/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1650192456329},{"_id":"public/linux-search-file/4.png","hash":"2baa488322ce8dcbe041021f8773f4d34c875dfc","modified":1650192456329},{"_id":"public/linux-search-file/3.png","hash":"9e68980ebe701bfbec8ada7615726d099e31bd1e","modified":1650192456329},{"_id":"public/linux-minio/8.png","hash":"9cc56fd5b83c33f3cb00e2b1e2b47cad34915d1f","modified":1650192456329},{"_id":"public/mysql-install/4.png","hash":"416ea1e9a568ee5528a17726fc0945b9b8a29934","modified":1650192456329},{"_id":"public/export-database-file/1.png","hash":"736e7c74acafa83fea50dfab7a7a29a48e12b341","modified":1650192456329},{"_id":"public/classLoad/03.png","hash":"9bcb79b7f54a0a07c9ebf3b02ace8509cfc924ed","modified":1650192456329},{"_id":"public/mysql-transcation/image-20201202222250939.png","hash":"f62bf3adf4e2ccebebd148f81a8e525680d18ccb","modified":1650192456329},{"_id":"public/mysql-transcation/image-20201202222914087.png","hash":"91e77f0b02a413d0e9613da5eeb7e65023a2897a","modified":1650192456329},{"_id":"public/mysql-transcation/image-20201202224136052.png","hash":"98dd9ff6c0a991a146edc81251bace4c4c4470ce","modified":1650192456329},{"_id":"public/valine/3.png","hash":"e956b57ef3817874f210a6d8d375aef438534e1d","modified":1650192456329},{"_id":"public/sql-model/1.png","hash":"fe8bac1db0a94e89605d25b7f9a7f98dcb2f88ce","modified":1650192456329},{"_id":"public/Installing-CentOS-system/4-3.png","hash":"7bdd1d4caf4d48b83fdd7d29d93313e5dfd52a09","modified":1650192456329},{"_id":"public/Installing-CentOS-system/4.png","hash":"e23eb17b1f7f00d3e8b44ace3466098582b5a9b6","modified":1650192456329},{"_id":"public/swagger/4.png","hash":"b89a81fba4627f4a0db77b4f93b6f295f7224a46","modified":1650192456329},{"_id":"public/mycat/image-20201104215015366.png","hash":"319b52e8cd8fd7ab472a2993d860f8f3fe3f6ad1","modified":1650192456329},{"_id":"public/mycat/image-20201104222632963.png","hash":"f84fe140ea2c25cc5a93e006f86729522a8a1289","modified":1650192456329},{"_id":"public/fonts/README.html","hash":"26a13286f808d3ef09314df865be3049eef3906f","modified":1650192456329},{"_id":"public/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1650192456329},{"_id":"public/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1650192456329},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1650192456329},{"_id":"public/images/donate/alipayimg.png","hash":"4b5dcdc366cf96737e582094267b6f177c15bb44","modified":1650192456329},{"_id":"public/jdk-install/1.png","hash":"edc99d2792c6dc03d577e845aca730cb3720db1c","modified":1650192456329},{"_id":"public/ElasticSearch/image-20200807093309761.png","hash":"d95ac7aaea31cd9322f5f7d8c8a704d76b7e503c","modified":1650192456329},{"_id":"public/mysql-transcation/image-20201202211752764.png","hash":"40651944aab63eda574090e4a018a8f433be12a2","modified":1650192456329},{"_id":"public/mysql-transcation/image-20201202212103393.png","hash":"672bbb9ae12eaf223dfda421a62d3dec36406e3d","modified":1650192456329},{"_id":"public/mysql-transcation/image-20201202215350319.png","hash":"2c3cef1bc3cfa005b5aa46a8ff19c0cb0667e39c","modified":1650192456329},{"_id":"public/valine/2.png","hash":"4026febdc49bb2319e6cef1a5cc06649cd8dda0b","modified":1650192456329},{"_id":"public/nginx-04/3.png","hash":"b55a0507b4ebbd8be1a5884816fbc1da252a3b24","modified":1650192456329},{"_id":"public/Installing-CentOS-system/3.png","hash":"5b864caef9c16fa8e5187dc5bf0d3944a9b95959","modified":1650192456329},{"_id":"public/mycat/image-20201104210416994.png","hash":"05f625952a7a96994300c52e4444d0f670c9ac4f","modified":1650192456329},{"_id":"public/mysql-transcation/image-20201202210817094.png","hash":"6810630ccd02b7b68215d147c408f8769edb92c3","modified":1650192456329},{"_id":"public/docker-nginx/1.png","hash":"a3dc3998d27ad48a417f4188f2c192075988f29c","modified":1650192456329},{"_id":"public/mycat/image-20201107213859155.png","hash":"bcd51eb3650bc7519c5ccbe20caba54237ec808e","modified":1650192456329},{"_id":"public/linux-minio/2.png","hash":"fab159eedb22c1d677e8b263f17fd644d35d93fa","modified":1650192456329},{"_id":"public/outOfMemoryError/05.png","hash":"bd8a1e8b789597121dc0ea116762c8bcf6f3e385","modified":1650192456329},{"_id":"public/nginx-md/1.png","hash":"a569af0fb2f1725e8006750237083a82a8651daf","modified":1650192456329},{"_id":"public/Installing-CentOS-system/7.png","hash":"b1b263434f52d85aeb2a36fd0304dd423629eb58","modified":1650192456329},{"_id":"public/Installing-CentOS-system/8.png","hash":"c8024d10d745586c532ce67a91301b4397bfeee6","modified":1650192456329},{"_id":"public/mycat/image-20201104205653611.png","hash":"df947668dea64063a150fe0a3dbcd49d696a163c","modified":1650192456329},{"_id":"public/mycat/image-20201220170713526.png","hash":"7a7f2a55b96a42ad49efa80806a9a5c9ba06a98d","modified":1650192456329},{"_id":"public/images/donate/wechatpayimg.png","hash":"e881a9e141da37ca46258e9d8fada3b51cd11046","modified":1650192456329},{"_id":"public/redis-usage-scenario/06.png","hash":"a97a3387e2bca72ee714fd4b60201b58b2fe4ca3","modified":1650192456329},{"_id":"public/docker-mysql/1.png","hash":"9fbfcbff4b301fc300cd266f6a02fc7190a4d6c1","modified":1650192456329},{"_id":"public/outOfMemoryError/04.png","hash":"bbee74780760a53a2d4ece78fdd88b46d1592f4b","modified":1650192456329},{"_id":"public/redis-usage-scenario/01.png","hash":"0e23b53142149c6b75e693e8d5b6eb87148897c3","modified":1650192456329},{"_id":"public/outOfMemoryError/03.png","hash":"f6c5120f15f65e198b3d7f8f67f0b83c9fdca7b1","modified":1650192456329},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1650192456329},{"_id":"public/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1650192456329},{"_id":"public/linux-search-file/7.png","hash":"9c4d3d1417d8d9d77709a81ad7101b97a9d31239","modified":1650192456329},{"_id":"public/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1650192456329},{"_id":"public/images/avatar.png","hash":"ebde5ecfd529edecfab55788e99ffcb22df93730","modified":1650192456329},{"_id":"public/mysql-transcation/image-20201202213757692.png","hash":"1187aa165415735ce8b7352d39fe3af5561e86d1","modified":1650192456329},{"_id":"public/mysql-transcation/image-20201202215717524.png","hash":"6173e68d50fed251dd9a7a908823df5b5751df4c","modified":1650192456329},{"_id":"public/outOfMemoryError/06.png","hash":"c3e65cb83beb665dffdd05ab3b30ed47bd480951","modified":1650192456329},{"_id":"public/mycat/image-20201104221336437.png","hash":"e8e98f07e2503e85bbcb2699b8450ffe0e108663","modified":1650192456329},{"_id":"public/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1650192456329},{"_id":"public/css/style.css","hash":"3b693ce41c2e35ece4773593e94b4c17aeaee02f","modified":1650192456329},{"_id":"public/linux-search-file/6.png","hash":"89821ca7ccc64c8006eed3adfb8b5866f57005ec","modified":1650192456329},{"_id":"public/nginx-02/image-20210606160947369.png","hash":"f3cd662ff33c0eb8bd29eea58aeb699f5e7a8a71","modified":1650192456329}],"Category":[{"name":"linux","_id":"cl235zcvl0004wjpj35az8t5t"},{"name":"中间件","_id":"cl235zcvu000jwjpj3eca2le8"},{"name":"mysql","_id":"cl235zcvx000qwjpjas745a8m"},{"name":"算法","_id":"cl235zcvz000xwjpj5wd4a9zy"},{"name":"java","_id":"cl235zcw5001bwjpjf9dvbqgv"},{"name":"知识整理","_id":"cl235zcwb001zwjpj01u3gas6"},{"name":"踩坑记录","_id":"cl235zcwd0027wjpj39cj4xm8"},{"name":"Docker","_id":"cl235zcwp003qwjpjar1k19bf"},{"name":"nginx","_id":"cl235zcwu004ewjpjhg8r9vbs"},{"name":"swagger","_id":"cl235zcxa005vwjpje80fcjr5"},{"name":"学习笔记","_id":"cl235zcxb0061wjpjhqwih827"}],"Data":[{"_id":"gallery","data":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}},{"_id":"links","data":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}],"Page":[{"title":"404 Not Found：该页无法显示","toc":false,"comments":1,"_content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: true\npermalink: /404\n---\n<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n","date":"2022-03-27T14:06:03.328Z","updated":"2022-03-27T14:06:03.328Z","path":"/404.html","layout":"page","_id":"cl235zcve0000wjpjgqzy5yr9","content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"<%- config.url %>\" homepagename=\"回到我的主页\"></script>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"<%- config.url %>\" homepagename=\"回到我的主页\"></script>\n"},{"title":"about","description":"个人简介","layout":"about","comments":1,"sidebar":"custom","translate_title":"about","_content":" ","source":"about/index.md","raw":"---\ntitle: about\ndescription: 个人简介\nlayout: about\ncomments: true\nsidebar: custom\ntranslate_title: about\n---\n ","date":"2022-03-27T14:06:03.318Z","updated":"2022-03-27T14:06:03.318Z","path":"about/index.html","_id":"cl235zcvj0002wjpjhcf2gc8i","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"links","layout":"links","comments":1,"sidebar":"none","translate_title":"links","_content":"","source":"links/index.md","raw":"---\ntitle: links\nlayout: links\ncomments: true\nsidebar: none\ntranslate_title: links\n---\n","date":"2021-12-11T09:44:27.087Z","updated":"2021-12-11T09:44:27.087Z","path":"links/index.html","_id":"cl235zcvn0006wjpj5xcdeoom","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"books","layout":"books","comments":1,"sidebar":"none","translate_title":"books","_content":"","source":"books/index.md","raw":"---\ntitle: books\nlayout: books\ncomments: true\nsidebar: none\ntranslate_title: books\n---\n","date":"2022-03-27T14:06:03.323Z","updated":"2022-03-27T14:06:03.323Z","path":"books/index.html","_id":"cl235zcvo0008wjpj4afxbbyq","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"repositories","layout":"repository","comments":1,"sidebar":"none","translate_title":"repositories","_content":"\n","source":"repository/index.md","raw":"---\ntitle: repositories\nlayout: repository\ncomments: true\nsidebar: none\ntranslate_title: repositories\n---\n\n","date":"2022-03-27T14:06:03.389Z","updated":"2022-03-27T14:06:03.389Z","path":"repository/index.html","_id":"cl235zcvp000awjpjc9wz0qpp","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"classification","layout":"categories","comments":1,"translate_title":"classification","_content":"","source":"categories/index.md","raw":"---\ntitle: classification\nlayout: categories\ncomments: true\ntranslate_title: classification\n---\n","date":"2022-03-27T14:06:03.366Z","updated":"2022-03-27T14:06:03.366Z","path":"categories/index.html","_id":"cl235zcvr000fwjpj911l7n76","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"标签","layout":"tags","comments":1,"translate_title":"label","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nlayout: tags\ncomments: true\ntranslate_title: label\n---\n","date":"2022-03-27T14:06:03.489Z","updated":"2022-03-27T14:06:03.489Z","path":"tags/index.html","_id":"cl235zcvt000hwjpj6ybfflaf","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""}],"Post":[{"title":"MinIO简介以及Linux安装MinIO","comments":1,"translate_title":"linux_minio","abbrlink":63839,"date":"2022-03-21T05:39:15.000Z","_content":"\n## 1. 什么是对象存储\n对象存储服务OSS（Object Storage Service）是一种海量、安全、低成本、高可用的云存储服务，**适合存放任意类型的文件**。容量和处理能力弹性扩展，多种存储类型提供选择，全面优化存储成本。\n\n最大的优势：可以存储大量的非结构话数据，例如：图片、视频、日志文件、备份数据和容器/虚拟机镜像等。\n\n## 2. MinIO\nMinIO 是个基于Golang编写的开源对象存储套件，基于Apache License V2.0开源协议，虽然轻量，却拥有不错的性能，兼容亚马逊S3云存储服务接口。可以很简单的和其他应用结合使用，例如：NodeJS、Redis、mysql等\n\n中文文档： http://docs.minio.org.cn/docs/master/minio-monitoring-guide\n\n### 2.1 MinIO应用场景\n可以作为私有云的对象存储服务来使用，也可以作为云对象存储的网关层，无缝对接Amazon S3 或者 MicroSoft Azure 。\n![应用场景](./linux-minio/1.png)\n\n### 2.2 MinIO特点\n- 高性能\n  \n    作为一款高性能存储，在标准硬件条件下，其读写速率分别可以达到55Gb/s和 35Gb/s。并且MinIO支持一个对象文件是任意大小（几KB到最大5T不等）\n  \n- 可扩展\n  \n    不同MinIO集群可以组成联邦，并形成一个全局的命名空间，并且支持跨越多个数据中心\n  \n- 云原生\n  \n    容器化、基于K8S的编排、多租户支持\n  \n- Amazon S3兼容\n  \n    使用Amazon S3 V2/V4 API。可以使用Minio SDK，Minio Client，AWS SDK 和 AWS CLI 访问Minio服务器。\n  \n- 可对接多种后端存储\n  \n  除了Minio自己的文件系统，还支持 DAS、 JBODs、NAS、Google云存储和 Azure Blob存储。\n  \n- SDK支持\n  \n  GO SDK： https://github.com/minio/minio-go\n\n  \n  JavaSDK： https://github.com/minio/minio-java\n  \n  PythonSDK： https://github.com/minio/minio-py\n\n\n- Lambda计算\n\n  Minio服务器通过其兼容AWS SNS / SQS的事件通知服务触发Lambda功能。支持的目标是消息队列，如Kafka，NATS，AMQP，MQTT，Webhooks以及Elasticsearch，Redis，Postgres和MySQL等数据库\n\n- 图形化界面\n\n    有操作页面\n\n- 功能简单\n    \n    不容易出错，快速启动\n\n- 支持纠删码\n\n  MinIO使用纠删码、Checksum来防止硬件错误和静默数据污染。在最高冗余度配置下，即使丢失1/2的磁盘也能恢复数据\n\n### 2.3 存储机制\nMinIO 使用纠删码erasure code、校验和checksum。 即使丢一半数据（N/2）的鹰派，仍然可以恢复数据。\n\n- 校验和checksum\n\n    保护数据免受硬件故障和无声数据损坏\n  \n- 纠删码erasure code\n\n    纠删码是一种恢复丢失和损坏数据的数据算法，目前纠删码技术在分布式存储系统中的应用主要有三类：阵列纠删码（Array Code : RAID5、RAID6等）、RS（Reed-Solomon）里德-所罗门类纠删码和LDPC（LowDensity Parity Check Code）\n    低密度奇偶校验纠删码。\n  \n    Erasure code 是一种编码技术，他可以将N份原始数据，增加m份数据，并通过n+m 份中的任意n份数据，还原为原始数据。即如果有任意小于等于m份的数据失效，仍然能通过剩下的数据还原出来。\n  MinIO 采用Reed-Solomon code将对象拆分成N/2数据和N/2奇偶校验快，这就意味着如果是12块盘，一个对象会分成6个数据块、6个奇偶校验块；可以丢失任意6块盘（不管是存放的数据块还是奇偶校验块），仍可以通过剩下的盘进行数据恢复\n  \n\n## 3. 安装和使用MinIO\n\n### 3.1 Linux安装MinIO\n1.  下载（https://min.io/download#/linux）\n    ```shell\n    wget https://dl.min.io/server/minio/release/linux-amd64/minio\n    ```\n    \n2. 运行\n    ```shell\n    chmod +x minio\n    ./minio server /usr/software/minio/data      #将/usr/software/minio/data 替换为您希望 MinIO 存储数据的驱动器或目录的路径。\n   #或者指定账号密码启动\n   MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data\n   \n    #后台启动\n   nohup ./minio server /usr/software/minio/data  >  /usr/software/minio/minio.log 2>&1 &#\n   \n   #或者指定账号密码启动\n   MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin nohup ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data>  /usr/software/minio/minio.log 2>&1 &#\n   ```\n   ![](./linux-minio/8.png)\n3. 设置启动脚本（建议）\n    ```shell\n     touch minio.sh\n   \n     vi minio.sh\n    ```\n   在sh文件中添加以下内容\n    ```shell\n    #指定登录用户名\n    export MINIO_ACCESS_KEY=username\n    #指定登录密码\n    export MINIO_SECRET_KEY=password\n    #指定端口以及存储文件夹，并启动服务 9000访问端口， 9001 控制台界面访问端口, 这里0.0.0.0可以设置为具体的服务器IP\n    nohup ./minio server --address '0.0.0.0:9000' --console-address '0.0.0.0:9001' ./miniodata > ./miniodata/minio.log 2>&1&\n    ```\n   给当前用户加上执行权限\n    ```shell\n   chmod u+x  *.sh\n     \n    #启动\n   sh minio.sh\n   ```\n\n### 3.2 安装客户端(可选)\n1. 安装\n    ```shell\n    wget https://dl.min.io/client/mc/release/linux-amd64/mc\n    chmod +x mc\n    ./mc --help\n    ```\n   \n2. 使用命令给客户端添加一个服务端\n    ```shell\n    ./mc alias set minio http://172.21.0.7:9000 minioadmin minioadmin\n   ```\n \n3. 创建bucket，并查询所有bucket\n    ```shell\n    [root@ww xiaoyuge]# ./mc ls minio\n    [root@ww xiaoyuge]# ./mc mb minio/mybucket\n    Bucket created successfully `minio/mybucket`\n    [root@ww xiaoyuge]# ./mc ls minio\n    [2020-09-02 03:02:36 CST]      0B mybucket/\n    [root@ww xiaoyuge]# \n   ```\n   \n4. 页面查询bucket\n   \n    ![](./linux-minio/6.png)\n   \n5. 创建用户\n    ```shell\n    ./mc admin user add minio root rootroot\n    ```\n   \n6. 给用户赋予权限\n    ```shell\n    ./mc admin policy set minio readwrite user=root\n    ```\n   \n\n### 3.3 使用MinIO  \n1. 启动\n    \n    在浏览器输入： http://localhost:9000\n    ![](./linux-minio/2.png)\n   在输入控制打印的默认的AccessKey和SecretKey：\n   \n    **AccessKey:** minioadmin\n   \n    **SecretKey（默认）:** minioadmin\n\n    使用AccessKey 和 SecretKey 登录后台。\n\n2. 进入系统后，我们先要点击右上角的“+”按钮，创建一个文件桶（输入名称后，回车即可），在上传文件到这个文件桶中。Create bucket（创建文件桶），然后输入bucket名称为 **test**, 创建成功后再Upload file（上传文件）。\n   ![](./linux-minio/3.png)![](./linux-minio/3_1.png)![](./linux-minio/3_2.png)![](./linux-minio/4.png)\n   \n\n   现在我们去服务器，我们启动时指定的目录去看看，可以看到一个新建的test文件目录（文件桶相当于文件目录），这里没有使用纠删码的模式，所以直接就是源文件了。当我们线上运行的项目已经有源文件了，在使用minio的时候，可以直接指定该目录为minio的文件目录就行了。\n   ![](./linux-minio/5.png)![](./linux-minio/7.png)\n\n3. 分享文件，也可以设置文件分享有效日期\n    ![](./linux-minio/11.png)![img_1.png](./linux-minio/12.png)\n   访问连接会出现如下界面：\n   ![img_1.png](./linux-minio/13.png)\n   \n\n### 3.4 mioIO常见启动问题\n1. 启动报错“WARNING: Console endpoint is listening on a dynamic port...”\n    ![img_1.png](./linux-minio/9.png)\n   错误提示很明显，需要to choose a static port。\n   写了一个shell启动MinIO，在shell中使用--console-address '部署minio的ip:希望通过什么端口打开minio console页面'\n    ```shell\n    export MINIO_ACCESS_KEY=username\n   #指定登录密码\n    export MINIO_SECRET_KEY=password\n    nohup ./minio server --address '0.0.0.0:9000' --console-address '0.0.0.0:9001' ./miniodata > ./miniodata/minio.log 2>&1&\n   ```\n\n## 4. SpringBoot 集成minIO\n项目源代码地址：https://gitee.com/xiaoyuge520/minio-demo， 下面是应用主要功能截图展示：\n![img14.png](./linux-minio/14.png)\n在minIO的控制台界面选择对应的bucket可以查看到刚提交的内容\n![img14.png](./linux-minio/15.png)\n\n同理，删除也是一样！！！\n![img14.png](./linux-minio/16.png)\n\n    ","source":"_posts/2022/03/linux-minio.md","raw":"---\ntitle: MinIO简介以及Linux安装MinIO\ncomments: true\ntags: Linux\ncategories: linux\ntranslate_title: linux_minio\nabbrlink: 63839\ndate: 2022-03-21 13:39:15\n---\n\n## 1. 什么是对象存储\n对象存储服务OSS（Object Storage Service）是一种海量、安全、低成本、高可用的云存储服务，**适合存放任意类型的文件**。容量和处理能力弹性扩展，多种存储类型提供选择，全面优化存储成本。\n\n最大的优势：可以存储大量的非结构话数据，例如：图片、视频、日志文件、备份数据和容器/虚拟机镜像等。\n\n## 2. MinIO\nMinIO 是个基于Golang编写的开源对象存储套件，基于Apache License V2.0开源协议，虽然轻量，却拥有不错的性能，兼容亚马逊S3云存储服务接口。可以很简单的和其他应用结合使用，例如：NodeJS、Redis、mysql等\n\n中文文档： http://docs.minio.org.cn/docs/master/minio-monitoring-guide\n\n### 2.1 MinIO应用场景\n可以作为私有云的对象存储服务来使用，也可以作为云对象存储的网关层，无缝对接Amazon S3 或者 MicroSoft Azure 。\n![应用场景](./linux-minio/1.png)\n\n### 2.2 MinIO特点\n- 高性能\n  \n    作为一款高性能存储，在标准硬件条件下，其读写速率分别可以达到55Gb/s和 35Gb/s。并且MinIO支持一个对象文件是任意大小（几KB到最大5T不等）\n  \n- 可扩展\n  \n    不同MinIO集群可以组成联邦，并形成一个全局的命名空间，并且支持跨越多个数据中心\n  \n- 云原生\n  \n    容器化、基于K8S的编排、多租户支持\n  \n- Amazon S3兼容\n  \n    使用Amazon S3 V2/V4 API。可以使用Minio SDK，Minio Client，AWS SDK 和 AWS CLI 访问Minio服务器。\n  \n- 可对接多种后端存储\n  \n  除了Minio自己的文件系统，还支持 DAS、 JBODs、NAS、Google云存储和 Azure Blob存储。\n  \n- SDK支持\n  \n  GO SDK： https://github.com/minio/minio-go\n\n  \n  JavaSDK： https://github.com/minio/minio-java\n  \n  PythonSDK： https://github.com/minio/minio-py\n\n\n- Lambda计算\n\n  Minio服务器通过其兼容AWS SNS / SQS的事件通知服务触发Lambda功能。支持的目标是消息队列，如Kafka，NATS，AMQP，MQTT，Webhooks以及Elasticsearch，Redis，Postgres和MySQL等数据库\n\n- 图形化界面\n\n    有操作页面\n\n- 功能简单\n    \n    不容易出错，快速启动\n\n- 支持纠删码\n\n  MinIO使用纠删码、Checksum来防止硬件错误和静默数据污染。在最高冗余度配置下，即使丢失1/2的磁盘也能恢复数据\n\n### 2.3 存储机制\nMinIO 使用纠删码erasure code、校验和checksum。 即使丢一半数据（N/2）的鹰派，仍然可以恢复数据。\n\n- 校验和checksum\n\n    保护数据免受硬件故障和无声数据损坏\n  \n- 纠删码erasure code\n\n    纠删码是一种恢复丢失和损坏数据的数据算法，目前纠删码技术在分布式存储系统中的应用主要有三类：阵列纠删码（Array Code : RAID5、RAID6等）、RS（Reed-Solomon）里德-所罗门类纠删码和LDPC（LowDensity Parity Check Code）\n    低密度奇偶校验纠删码。\n  \n    Erasure code 是一种编码技术，他可以将N份原始数据，增加m份数据，并通过n+m 份中的任意n份数据，还原为原始数据。即如果有任意小于等于m份的数据失效，仍然能通过剩下的数据还原出来。\n  MinIO 采用Reed-Solomon code将对象拆分成N/2数据和N/2奇偶校验快，这就意味着如果是12块盘，一个对象会分成6个数据块、6个奇偶校验块；可以丢失任意6块盘（不管是存放的数据块还是奇偶校验块），仍可以通过剩下的盘进行数据恢复\n  \n\n## 3. 安装和使用MinIO\n\n### 3.1 Linux安装MinIO\n1.  下载（https://min.io/download#/linux）\n    ```shell\n    wget https://dl.min.io/server/minio/release/linux-amd64/minio\n    ```\n    \n2. 运行\n    ```shell\n    chmod +x minio\n    ./minio server /usr/software/minio/data      #将/usr/software/minio/data 替换为您希望 MinIO 存储数据的驱动器或目录的路径。\n   #或者指定账号密码启动\n   MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data\n   \n    #后台启动\n   nohup ./minio server /usr/software/minio/data  >  /usr/software/minio/minio.log 2>&1 &#\n   \n   #或者指定账号密码启动\n   MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin nohup ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data>  /usr/software/minio/minio.log 2>&1 &#\n   ```\n   ![](./linux-minio/8.png)\n3. 设置启动脚本（建议）\n    ```shell\n     touch minio.sh\n   \n     vi minio.sh\n    ```\n   在sh文件中添加以下内容\n    ```shell\n    #指定登录用户名\n    export MINIO_ACCESS_KEY=username\n    #指定登录密码\n    export MINIO_SECRET_KEY=password\n    #指定端口以及存储文件夹，并启动服务 9000访问端口， 9001 控制台界面访问端口, 这里0.0.0.0可以设置为具体的服务器IP\n    nohup ./minio server --address '0.0.0.0:9000' --console-address '0.0.0.0:9001' ./miniodata > ./miniodata/minio.log 2>&1&\n    ```\n   给当前用户加上执行权限\n    ```shell\n   chmod u+x  *.sh\n     \n    #启动\n   sh minio.sh\n   ```\n\n### 3.2 安装客户端(可选)\n1. 安装\n    ```shell\n    wget https://dl.min.io/client/mc/release/linux-amd64/mc\n    chmod +x mc\n    ./mc --help\n    ```\n   \n2. 使用命令给客户端添加一个服务端\n    ```shell\n    ./mc alias set minio http://172.21.0.7:9000 minioadmin minioadmin\n   ```\n \n3. 创建bucket，并查询所有bucket\n    ```shell\n    [root@ww xiaoyuge]# ./mc ls minio\n    [root@ww xiaoyuge]# ./mc mb minio/mybucket\n    Bucket created successfully `minio/mybucket`\n    [root@ww xiaoyuge]# ./mc ls minio\n    [2020-09-02 03:02:36 CST]      0B mybucket/\n    [root@ww xiaoyuge]# \n   ```\n   \n4. 页面查询bucket\n   \n    ![](./linux-minio/6.png)\n   \n5. 创建用户\n    ```shell\n    ./mc admin user add minio root rootroot\n    ```\n   \n6. 给用户赋予权限\n    ```shell\n    ./mc admin policy set minio readwrite user=root\n    ```\n   \n\n### 3.3 使用MinIO  \n1. 启动\n    \n    在浏览器输入： http://localhost:9000\n    ![](./linux-minio/2.png)\n   在输入控制打印的默认的AccessKey和SecretKey：\n   \n    **AccessKey:** minioadmin\n   \n    **SecretKey（默认）:** minioadmin\n\n    使用AccessKey 和 SecretKey 登录后台。\n\n2. 进入系统后，我们先要点击右上角的“+”按钮，创建一个文件桶（输入名称后，回车即可），在上传文件到这个文件桶中。Create bucket（创建文件桶），然后输入bucket名称为 **test**, 创建成功后再Upload file（上传文件）。\n   ![](./linux-minio/3.png)![](./linux-minio/3_1.png)![](./linux-minio/3_2.png)![](./linux-minio/4.png)\n   \n\n   现在我们去服务器，我们启动时指定的目录去看看，可以看到一个新建的test文件目录（文件桶相当于文件目录），这里没有使用纠删码的模式，所以直接就是源文件了。当我们线上运行的项目已经有源文件了，在使用minio的时候，可以直接指定该目录为minio的文件目录就行了。\n   ![](./linux-minio/5.png)![](./linux-minio/7.png)\n\n3. 分享文件，也可以设置文件分享有效日期\n    ![](./linux-minio/11.png)![img_1.png](./linux-minio/12.png)\n   访问连接会出现如下界面：\n   ![img_1.png](./linux-minio/13.png)\n   \n\n### 3.4 mioIO常见启动问题\n1. 启动报错“WARNING: Console endpoint is listening on a dynamic port...”\n    ![img_1.png](./linux-minio/9.png)\n   错误提示很明显，需要to choose a static port。\n   写了一个shell启动MinIO，在shell中使用--console-address '部署minio的ip:希望通过什么端口打开minio console页面'\n    ```shell\n    export MINIO_ACCESS_KEY=username\n   #指定登录密码\n    export MINIO_SECRET_KEY=password\n    nohup ./minio server --address '0.0.0.0:9000' --console-address '0.0.0.0:9001' ./miniodata > ./miniodata/minio.log 2>&1&\n   ```\n\n## 4. SpringBoot 集成minIO\n项目源代码地址：https://gitee.com/xiaoyuge520/minio-demo， 下面是应用主要功能截图展示：\n![img14.png](./linux-minio/14.png)\n在minIO的控制台界面选择对应的bucket可以查看到刚提交的内容\n![img14.png](./linux-minio/15.png)\n\n同理，删除也是一样！！！\n![img14.png](./linux-minio/16.png)\n\n    ","slug":"linux-minio","published":1,"updated":"2022-03-27T12:52:29.493Z","layout":"post","photos":[],"link":"","_id":"cl235zcvh0001wjpj5m1g8pdx","content":"<h2 id=\"1-什么是对象存储\"><a class=\"markdownIt-Anchor\" href=\"#1-什么是对象存储\"></a> 1. 什么是对象存储</h2>\n<p>对象存储服务OSS（Object Storage Service）是一种海量、安全、低成本、高可用的云存储服务，<strong>适合存放任意类型的文件</strong>。容量和处理能力弹性扩展，多种存储类型提供选择，全面优化存储成本。</p>\n<p>最大的优势：可以存储大量的非结构话数据，例如：图片、视频、日志文件、备份数据和容器/虚拟机镜像等。</p>\n<h2 id=\"2-minio\"><a class=\"markdownIt-Anchor\" href=\"#2-minio\"></a> 2. MinIO</h2>\n<p>MinIO 是个基于Golang编写的开源对象存储套件，基于Apache License V2.0开源协议，虽然轻量，却拥有不错的性能，兼容亚马逊S3云存储服务接口。可以很简单的和其他应用结合使用，例如：NodeJS、Redis、mysql等</p>\n<p>中文文档： <a href=\"http://docs.minio.org.cn/docs/master/minio-monitoring-guide\">http://docs.minio.org.cn/docs/master/minio-monitoring-guide</a></p>\n<h3 id=\"21-minio应用场景\"><a class=\"markdownIt-Anchor\" href=\"#21-minio应用场景\"></a> 2.1 MinIO应用场景</h3>\n<p>可以作为私有云的对象存储服务来使用，也可以作为云对象存储的网关层，无缝对接Amazon S3 或者 MicroSoft Azure 。<br>\n<img src=\"/linux-minio/1.png\" alt=\"应用场景\"></p>\n<h3 id=\"22-minio特点\"><a class=\"markdownIt-Anchor\" href=\"#22-minio特点\"></a> 2.2 MinIO特点</h3>\n<ul>\n<li>\n<p>高性能</p>\n<p>作为一款高性能存储，在标准硬件条件下，其读写速率分别可以达到55Gb/s和 35Gb/s。并且MinIO支持一个对象文件是任意大小（几KB到最大5T不等）</p>\n</li>\n<li>\n<p>可扩展</p>\n<p>不同MinIO集群可以组成联邦，并形成一个全局的命名空间，并且支持跨越多个数据中心</p>\n</li>\n<li>\n<p>云原生</p>\n<p>容器化、基于K8S的编排、多租户支持</p>\n</li>\n<li>\n<p>Amazon S3兼容</p>\n<p>使用Amazon S3 V2/V4 API。可以使用Minio SDK，Minio Client，AWS SDK 和 AWS CLI 访问Minio服务器。</p>\n</li>\n<li>\n<p>可对接多种后端存储</p>\n<p>除了Minio自己的文件系统，还支持 DAS、 JBODs、NAS、Google云存储和 Azure Blob存储。</p>\n</li>\n<li>\n<p>SDK支持</p>\n<p>GO SDK： <a href=\"https://github.com/minio/minio-go\">https://github.com/minio/minio-go</a></p>\n<p>JavaSDK： <a href=\"https://github.com/minio/minio-java\">https://github.com/minio/minio-java</a></p>\n<p>PythonSDK： <a href=\"https://github.com/minio/minio-py\">https://github.com/minio/minio-py</a></p>\n</li>\n<li>\n<p>Lambda计算</p>\n<p>Minio服务器通过其兼容AWS SNS / SQS的事件通知服务触发Lambda功能。支持的目标是消息队列，如Kafka，NATS，AMQP，MQTT，Webhooks以及Elasticsearch，Redis，Postgres和MySQL等数据库</p>\n</li>\n<li>\n<p>图形化界面</p>\n<p>有操作页面</p>\n</li>\n<li>\n<p>功能简单</p>\n<p>不容易出错，快速启动</p>\n</li>\n<li>\n<p>支持纠删码</p>\n<p>MinIO使用纠删码、Checksum来防止硬件错误和静默数据污染。在最高冗余度配置下，即使丢失1/2的磁盘也能恢复数据</p>\n</li>\n</ul>\n<h3 id=\"23-存储机制\"><a class=\"markdownIt-Anchor\" href=\"#23-存储机制\"></a> 2.3 存储机制</h3>\n<p>MinIO 使用纠删码erasure code、校验和checksum。 即使丢一半数据（N/2）的鹰派，仍然可以恢复数据。</p>\n<ul>\n<li>\n<p>校验和checksum</p>\n<p>保护数据免受硬件故障和无声数据损坏</p>\n</li>\n<li>\n<p>纠删码erasure code</p>\n<p>纠删码是一种恢复丢失和损坏数据的数据算法，目前纠删码技术在分布式存储系统中的应用主要有三类：阵列纠删码（Array Code : RAID5、RAID6等）、RS（Reed-Solomon）里德-所罗门类纠删码和LDPC（LowDensity Parity Check Code）<br>\n低密度奇偶校验纠删码。</p>\n<p>Erasure code 是一种编码技术，他可以将N份原始数据，增加m份数据，并通过n+m 份中的任意n份数据，还原为原始数据。即如果有任意小于等于m份的数据失效，仍然能通过剩下的数据还原出来。<br>\nMinIO 采用Reed-Solomon code将对象拆分成N/2数据和N/2奇偶校验快，这就意味着如果是12块盘，一个对象会分成6个数据块、6个奇偶校验块；可以丢失任意6块盘（不管是存放的数据块还是奇偶校验块），仍可以通过剩下的盘进行数据恢复</p>\n</li>\n</ul>\n<h2 id=\"3-安装和使用minio\"><a class=\"markdownIt-Anchor\" href=\"#3-安装和使用minio\"></a> 3. 安装和使用MinIO</h2>\n<h3 id=\"31-linux安装minio\"><a class=\"markdownIt-Anchor\" href=\"#31-linux安装minio\"></a> 3.1 Linux安装MinIO</h3>\n<ol>\n<li>\n<p>下载（<a href=\"https://min.io/download#/linux%EF%BC%89\">https://min.io/download#/linux）</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.min.io/server/minio/release/linux-amd64/minio</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>运行</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> chmod +x minio</span><br><span class=\"line\"> ./minio server /usr/software/minio/data      #将/usr/software/minio/data 替换为您希望 MinIO 存储数据的驱动器或目录的路径。</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者指定账号密码启动</span></span><br><span class=\"line\">MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">后台启动</span></span><br><span class=\"line\">nohup ./minio server /usr/software/minio/data  &gt;  /usr/software/minio/minio.log 2&gt;&amp;1 &amp;#</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者指定账号密码启动</span></span><br><span class=\"line\">MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin nohup ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data&gt;  /usr/software/minio/minio.log 2&gt;&amp;1 &amp;#</span><br></pre></td></tr></table></figure>\n<p><img src=\"/linux-minio/8.png\" alt></p>\n</li>\n<li>\n<p>设置启动脚本（建议）</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch minio.sh</span><br><span class=\"line\">   </span><br><span class=\"line\">vi minio.sh</span><br></pre></td></tr></table></figure>\n<p>在sh文件中添加以下内容</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">指定登录用户名</span></span><br><span class=\"line\">export MINIO_ACCESS_KEY=username</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">指定登录密码</span></span><br><span class=\"line\">export MINIO_SECRET_KEY=password</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">指定端口以及存储文件夹，并启动服务 9000访问端口， 9001 控制台界面访问端口, 这里0.0.0.0可以设置为具体的服务器IP</span></span><br><span class=\"line\">nohup ./minio server --address &#x27;0.0.0.0:9000&#x27; --console-address &#x27;0.0.0.0:9001&#x27; ./miniodata &gt; ./miniodata/minio.log 2&gt;&amp;1&amp;</span><br></pre></td></tr></table></figure>\n<p>给当前用户加上执行权限</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u+x  *.sh</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">启动</span></span><br><span class=\"line\">sh minio.sh</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"32-安装客户端可选\"><a class=\"markdownIt-Anchor\" href=\"#32-安装客户端可选\"></a> 3.2 安装客户端(可选)</h3>\n<ol>\n<li>\n<p>安装</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.min.io/client/mc/release/linux-amd64/mc</span><br><span class=\"line\">chmod +x mc</span><br><span class=\"line\">./mc --help</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用命令给客户端添加一个服务端</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mc alias set minio http://172.21.0.7:9000 minioadmin minioadmin</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>创建bucket，并查询所有bucket</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ww xiaoyuge]# ./mc ls minio</span><br><span class=\"line\">[root@ww xiaoyuge]# ./mc mb minio/mybucket</span><br><span class=\"line\">Bucket created successfully `minio/mybucket`</span><br><span class=\"line\">[root@ww xiaoyuge]# ./mc ls minio</span><br><span class=\"line\">[2020-09-02 03:02:36 CST]      0B mybucket/</span><br><span class=\"line\">[root@ww xiaoyuge]# </span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>页面查询bucket</p>\n<p><img src=\"/linux-minio/6.png\" alt></p>\n</li>\n<li>\n<p>创建用户</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mc admin user add minio root rootroot</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>给用户赋予权限</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mc admin policy set minio readwrite user=root</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"33-使用minio\"><a class=\"markdownIt-Anchor\" href=\"#33-使用minio\"></a> 3.3 使用MinIO</h3>\n<ol>\n<li>\n<p>启动</p>\n<p>在浏览器输入： <a href=\"http://localhost:9000\">http://localhost:9000</a><br>\n<img src=\"/linux-minio/2.png\" alt><br>\n在输入控制打印的默认的AccessKey和SecretKey：</p>\n<p><strong>AccessKey:</strong> minioadmin</p>\n<p><strong>SecretKey（默认）:</strong> minioadmin</p>\n<p>使用AccessKey 和 SecretKey 登录后台。</p>\n</li>\n<li>\n<p>进入系统后，我们先要点击右上角的“+”按钮，创建一个文件桶（输入名称后，回车即可），在上传文件到这个文件桶中。Create bucket（创建文件桶），然后输入bucket名称为 <strong>test</strong>, 创建成功后再Upload file（上传文件）。<br>\n<img src=\"/linux-minio/3.png\" alt><img src=\"/linux-minio/3_1.png\" alt><img src=\"/linux-minio/3_2.png\" alt><img src=\"/linux-minio/4.png\" alt></p>\n<p>现在我们去服务器，我们启动时指定的目录去看看，可以看到一个新建的test文件目录（文件桶相当于文件目录），这里没有使用纠删码的模式，所以直接就是源文件了。当我们线上运行的项目已经有源文件了，在使用minio的时候，可以直接指定该目录为minio的文件目录就行了。<br>\n<img src=\"/linux-minio/5.png\" alt><img src=\"/linux-minio/7.png\" alt></p>\n</li>\n<li>\n<p>分享文件，也可以设置文件分享有效日期<br>\n<img src=\"/linux-minio/11.png\" alt><img src=\"/linux-minio/12.png\" alt=\"img_1.png\"><br>\n访问连接会出现如下界面：<br>\n<img src=\"/linux-minio/13.png\" alt=\"img_1.png\"></p>\n</li>\n</ol>\n<h3 id=\"34-mioio常见启动问题\"><a class=\"markdownIt-Anchor\" href=\"#34-mioio常见启动问题\"></a> 3.4 mioIO常见启动问题</h3>\n<ol>\n<li>启动报错“WARNING: Console endpoint is listening on a dynamic port…”<br>\n<img src=\"/linux-minio/9.png\" alt=\"img_1.png\"><br>\n错误提示很明显，需要to choose a static port。<br>\n写了一个shell启动MinIO，在shell中使用–console-address ‘部署minio的ip:希望通过什么端口打开minio console页面’ <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> export MINIO_ACCESS_KEY=username</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">指定登录密码</span></span><br><span class=\"line\"> export MINIO_SECRET_KEY=password</span><br><span class=\"line\"> nohup ./minio server --address &#x27;0.0.0.0:9000&#x27; --console-address &#x27;0.0.0.0:9001&#x27; ./miniodata &gt; ./miniodata/minio.log 2&gt;&amp;1&amp;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"4-springboot-集成minio\"><a class=\"markdownIt-Anchor\" href=\"#4-springboot-集成minio\"></a> 4. SpringBoot 集成minIO</h2>\n<p>项目源代码地址：<a href=\"https://gitee.com/xiaoyuge520/minio-demo%EF%BC%8C\">https://gitee.com/xiaoyuge520/minio-demo，</a> 下面是应用主要功能截图展示：<br>\n<img src=\"/linux-minio/14.png\" alt=\"img14.png\"><br>\n在minIO的控制台界面选择对应的bucket可以查看到刚提交的内容<br>\n<img src=\"/linux-minio/15.png\" alt=\"img14.png\"></p>\n<p>同理，删除也是一样！！！<br>\n<img src=\"/linux-minio/16.png\" alt=\"img14.png\"></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1-什么是对象存储\"><a class=\"markdownIt-Anchor\" href=\"#1-什么是对象存储\"></a> 1. 什么是对象存储</h2>\n<p>对象存储服务OSS（Object Storage Service）是一种海量、安全、低成本、高可用的云存储服务，<strong>适合存放任意类型的文件</strong>。容量和处理能力弹性扩展，多种存储类型提供选择，全面优化存储成本。</p>\n<p>最大的优势：可以存储大量的非结构话数据，例如：图片、视频、日志文件、备份数据和容器/虚拟机镜像等。</p>\n<h2 id=\"2-minio\"><a class=\"markdownIt-Anchor\" href=\"#2-minio\"></a> 2. MinIO</h2>\n<p>MinIO 是个基于Golang编写的开源对象存储套件，基于Apache License V2.0开源协议，虽然轻量，却拥有不错的性能，兼容亚马逊S3云存储服务接口。可以很简单的和其他应用结合使用，例如：NodeJS、Redis、mysql等</p>\n<p>中文文档： <a href=\"http://docs.minio.org.cn/docs/master/minio-monitoring-guide\">http://docs.minio.org.cn/docs/master/minio-monitoring-guide</a></p>\n<h3 id=\"21-minio应用场景\"><a class=\"markdownIt-Anchor\" href=\"#21-minio应用场景\"></a> 2.1 MinIO应用场景</h3>\n<p>可以作为私有云的对象存储服务来使用，也可以作为云对象存储的网关层，无缝对接Amazon S3 或者 MicroSoft Azure 。<br>\n<img src=\"/linux-minio/1.png\" alt=\"应用场景\"></p>\n<h3 id=\"22-minio特点\"><a class=\"markdownIt-Anchor\" href=\"#22-minio特点\"></a> 2.2 MinIO特点</h3>\n<ul>\n<li>\n<p>高性能</p>\n<p>作为一款高性能存储，在标准硬件条件下，其读写速率分别可以达到55Gb/s和 35Gb/s。并且MinIO支持一个对象文件是任意大小（几KB到最大5T不等）</p>\n</li>\n<li>\n<p>可扩展</p>\n<p>不同MinIO集群可以组成联邦，并形成一个全局的命名空间，并且支持跨越多个数据中心</p>\n</li>\n<li>\n<p>云原生</p>\n<p>容器化、基于K8S的编排、多租户支持</p>\n</li>\n<li>\n<p>Amazon S3兼容</p>\n<p>使用Amazon S3 V2/V4 API。可以使用Minio SDK，Minio Client，AWS SDK 和 AWS CLI 访问Minio服务器。</p>\n</li>\n<li>\n<p>可对接多种后端存储</p>\n<p>除了Minio自己的文件系统，还支持 DAS、 JBODs、NAS、Google云存储和 Azure Blob存储。</p>\n</li>\n<li>\n<p>SDK支持</p>\n<p>GO SDK： <a href=\"https://github.com/minio/minio-go\">https://github.com/minio/minio-go</a></p>\n<p>JavaSDK： <a href=\"https://github.com/minio/minio-java\">https://github.com/minio/minio-java</a></p>\n<p>PythonSDK： <a href=\"https://github.com/minio/minio-py\">https://github.com/minio/minio-py</a></p>\n</li>\n<li>\n<p>Lambda计算</p>\n<p>Minio服务器通过其兼容AWS SNS / SQS的事件通知服务触发Lambda功能。支持的目标是消息队列，如Kafka，NATS，AMQP，MQTT，Webhooks以及Elasticsearch，Redis，Postgres和MySQL等数据库</p>\n</li>\n<li>\n<p>图形化界面</p>\n<p>有操作页面</p>\n</li>\n<li>\n<p>功能简单</p>\n<p>不容易出错，快速启动</p>\n</li>\n<li>\n<p>支持纠删码</p>\n<p>MinIO使用纠删码、Checksum来防止硬件错误和静默数据污染。在最高冗余度配置下，即使丢失1/2的磁盘也能恢复数据</p>\n</li>\n</ul>\n<h3 id=\"23-存储机制\"><a class=\"markdownIt-Anchor\" href=\"#23-存储机制\"></a> 2.3 存储机制</h3>\n<p>MinIO 使用纠删码erasure code、校验和checksum。 即使丢一半数据（N/2）的鹰派，仍然可以恢复数据。</p>\n<ul>\n<li>\n<p>校验和checksum</p>\n<p>保护数据免受硬件故障和无声数据损坏</p>\n</li>\n<li>\n<p>纠删码erasure code</p>\n<p>纠删码是一种恢复丢失和损坏数据的数据算法，目前纠删码技术在分布式存储系统中的应用主要有三类：阵列纠删码（Array Code : RAID5、RAID6等）、RS（Reed-Solomon）里德-所罗门类纠删码和LDPC（LowDensity Parity Check Code）<br>\n低密度奇偶校验纠删码。</p>\n<p>Erasure code 是一种编码技术，他可以将N份原始数据，增加m份数据，并通过n+m 份中的任意n份数据，还原为原始数据。即如果有任意小于等于m份的数据失效，仍然能通过剩下的数据还原出来。<br>\nMinIO 采用Reed-Solomon code将对象拆分成N/2数据和N/2奇偶校验快，这就意味着如果是12块盘，一个对象会分成6个数据块、6个奇偶校验块；可以丢失任意6块盘（不管是存放的数据块还是奇偶校验块），仍可以通过剩下的盘进行数据恢复</p>\n</li>\n</ul>\n<h2 id=\"3-安装和使用minio\"><a class=\"markdownIt-Anchor\" href=\"#3-安装和使用minio\"></a> 3. 安装和使用MinIO</h2>\n<h3 id=\"31-linux安装minio\"><a class=\"markdownIt-Anchor\" href=\"#31-linux安装minio\"></a> 3.1 Linux安装MinIO</h3>\n<ol>\n<li>\n<p>下载（<a href=\"https://min.io/download#/linux%EF%BC%89\">https://min.io/download#/linux）</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.min.io/server/minio/release/linux-amd64/minio</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>运行</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> chmod +x minio</span><br><span class=\"line\"> ./minio server /usr/software/minio/data      #将/usr/software/minio/data 替换为您希望 MinIO 存储数据的驱动器或目录的路径。</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者指定账号密码启动</span></span><br><span class=\"line\">MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">后台启动</span></span><br><span class=\"line\">nohup ./minio server /usr/software/minio/data  &gt;  /usr/software/minio/minio.log 2&gt;&amp;1 &amp;#</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者指定账号密码启动</span></span><br><span class=\"line\">MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin nohup ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data&gt;  /usr/software/minio/minio.log 2&gt;&amp;1 &amp;#</span><br></pre></td></tr></table></figure>\n<p><img src=\"/linux-minio/8.png\" alt></p>\n</li>\n<li>\n<p>设置启动脚本（建议）</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch minio.sh</span><br><span class=\"line\">   </span><br><span class=\"line\">vi minio.sh</span><br></pre></td></tr></table></figure>\n<p>在sh文件中添加以下内容</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">指定登录用户名</span></span><br><span class=\"line\">export MINIO_ACCESS_KEY=username</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">指定登录密码</span></span><br><span class=\"line\">export MINIO_SECRET_KEY=password</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">指定端口以及存储文件夹，并启动服务 9000访问端口， 9001 控制台界面访问端口, 这里0.0.0.0可以设置为具体的服务器IP</span></span><br><span class=\"line\">nohup ./minio server --address &#x27;0.0.0.0:9000&#x27; --console-address &#x27;0.0.0.0:9001&#x27; ./miniodata &gt; ./miniodata/minio.log 2&gt;&amp;1&amp;</span><br></pre></td></tr></table></figure>\n<p>给当前用户加上执行权限</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u+x  *.sh</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">启动</span></span><br><span class=\"line\">sh minio.sh</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"32-安装客户端可选\"><a class=\"markdownIt-Anchor\" href=\"#32-安装客户端可选\"></a> 3.2 安装客户端(可选)</h3>\n<ol>\n<li>\n<p>安装</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.min.io/client/mc/release/linux-amd64/mc</span><br><span class=\"line\">chmod +x mc</span><br><span class=\"line\">./mc --help</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用命令给客户端添加一个服务端</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mc alias set minio http://172.21.0.7:9000 minioadmin minioadmin</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>创建bucket，并查询所有bucket</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ww xiaoyuge]# ./mc ls minio</span><br><span class=\"line\">[root@ww xiaoyuge]# ./mc mb minio/mybucket</span><br><span class=\"line\">Bucket created successfully `minio/mybucket`</span><br><span class=\"line\">[root@ww xiaoyuge]# ./mc ls minio</span><br><span class=\"line\">[2020-09-02 03:02:36 CST]      0B mybucket/</span><br><span class=\"line\">[root@ww xiaoyuge]# </span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>页面查询bucket</p>\n<p><img src=\"/linux-minio/6.png\" alt></p>\n</li>\n<li>\n<p>创建用户</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mc admin user add minio root rootroot</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>给用户赋予权限</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mc admin policy set minio readwrite user=root</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"33-使用minio\"><a class=\"markdownIt-Anchor\" href=\"#33-使用minio\"></a> 3.3 使用MinIO</h3>\n<ol>\n<li>\n<p>启动</p>\n<p>在浏览器输入： <a href=\"http://localhost:9000\">http://localhost:9000</a><br>\n<img src=\"/linux-minio/2.png\" alt><br>\n在输入控制打印的默认的AccessKey和SecretKey：</p>\n<p><strong>AccessKey:</strong> minioadmin</p>\n<p><strong>SecretKey（默认）:</strong> minioadmin</p>\n<p>使用AccessKey 和 SecretKey 登录后台。</p>\n</li>\n<li>\n<p>进入系统后，我们先要点击右上角的“+”按钮，创建一个文件桶（输入名称后，回车即可），在上传文件到这个文件桶中。Create bucket（创建文件桶），然后输入bucket名称为 <strong>test</strong>, 创建成功后再Upload file（上传文件）。<br>\n<img src=\"/linux-minio/3.png\" alt><img src=\"/linux-minio/3_1.png\" alt><img src=\"/linux-minio/3_2.png\" alt><img src=\"/linux-minio/4.png\" alt></p>\n<p>现在我们去服务器，我们启动时指定的目录去看看，可以看到一个新建的test文件目录（文件桶相当于文件目录），这里没有使用纠删码的模式，所以直接就是源文件了。当我们线上运行的项目已经有源文件了，在使用minio的时候，可以直接指定该目录为minio的文件目录就行了。<br>\n<img src=\"/linux-minio/5.png\" alt><img src=\"/linux-minio/7.png\" alt></p>\n</li>\n<li>\n<p>分享文件，也可以设置文件分享有效日期<br>\n<img src=\"/linux-minio/11.png\" alt><img src=\"/linux-minio/12.png\" alt=\"img_1.png\"><br>\n访问连接会出现如下界面：<br>\n<img src=\"/linux-minio/13.png\" alt=\"img_1.png\"></p>\n</li>\n</ol>\n<h3 id=\"34-mioio常见启动问题\"><a class=\"markdownIt-Anchor\" href=\"#34-mioio常见启动问题\"></a> 3.4 mioIO常见启动问题</h3>\n<ol>\n<li>启动报错“WARNING: Console endpoint is listening on a dynamic port…”<br>\n<img src=\"/linux-minio/9.png\" alt=\"img_1.png\"><br>\n错误提示很明显，需要to choose a static port。<br>\n写了一个shell启动MinIO，在shell中使用–console-address ‘部署minio的ip:希望通过什么端口打开minio console页面’ <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> export MINIO_ACCESS_KEY=username</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">指定登录密码</span></span><br><span class=\"line\"> export MINIO_SECRET_KEY=password</span><br><span class=\"line\"> nohup ./minio server --address &#x27;0.0.0.0:9000&#x27; --console-address &#x27;0.0.0.0:9001&#x27; ./miniodata &gt; ./miniodata/minio.log 2&gt;&amp;1&amp;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"4-springboot-集成minio\"><a class=\"markdownIt-Anchor\" href=\"#4-springboot-集成minio\"></a> 4. SpringBoot 集成minIO</h2>\n<p>项目源代码地址：<a href=\"https://gitee.com/xiaoyuge520/minio-demo%EF%BC%8C\">https://gitee.com/xiaoyuge520/minio-demo，</a> 下面是应用主要功能截图展示：<br>\n<img src=\"/linux-minio/14.png\" alt=\"img14.png\"><br>\n在minIO的控制台界面选择对应的bucket可以查看到刚提交的内容<br>\n<img src=\"/linux-minio/15.png\" alt=\"img14.png\"></p>\n<p>同理，删除也是一样！！！<br>\n<img src=\"/linux-minio/16.png\" alt=\"img14.png\"></p>\n"},{"title":"Linux系统下查找文件命令总结","comments":1,"abbrlink":32250,"translate_title":"linux-find-file","date":"2022-03-19T05:52:39.000Z","_content":"\n### 1. which查命令绝对路径\n**which** 从环境变量PATH中定位/返回与指定名字相匹配的可执行文件所在的路径\n![which命令](./linux-search-file/1.png)\n\n**原理**：执行**which**命令时，which会在当前环境变量PATH中依次寻找能够匹配所找命令名字的可执行文件名，不加 - a选项，返回第一个匹配的可执行文件路径，\n否则依次返回满足条件的所有可执行文件的路径名\n\n**适用场合：** 一般用于查找命令/可执行文件所在的路径。有时候可能在多个路径下存在相同的命令，该命令可用于查找当前所执行的命令到底是哪一个位置处的命令。\n\n\n### 2. whereis查找特定文件\n**whereis** 命令用来定位指令的二进制程序、源代码文件和man手册页等相关文件的路径， 该命令只能用于程序名的搜索\n1. \\- b   #定位可执行文件\n2. \\- m   #定位帮助文件\n3. \\- s   定位源代码文件 \n4. \\- u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件\n5. \\- B   指定搜索可执行文件的路径。\n6. \\- M   指定搜索帮助文件的路径。\n7. \\- S   指定搜索源代码文件的路径\n![whereis命令](./linux-search-file/2.png)\n\n**原理：** whereis命令首先会去掉filename中的前缀空格和以.开头的任何字符，然后再在数据库（var/lib/slocate/slocate.db）中查找与上述处理后的filename相匹配的二进制文件、源文件和帮助手册文件,使用之前可以使用**updatedb**命令手动更新数据库。\n\n**适用场合：** 二进制文件、源文件和帮助手册文件路径的查找。\n和**find** 相比，Whereis 查找的速度非常快，这是因为Linux系统会将系统内的所有文件都记录在一个数据库文件中，当使用**whereis (或者locate)**\n会从数据库查找数据，而不是像find命令那样，通过遍历硬盘来查找文件，效率更高！\n\n\n### 3. locate缓存查找文件\n**locate** 搜素一个数据库（/var/lib/mlocate/mlocate.db）,这个数据库中国呢包含本地所有文件信息，Linux系统自动创建这个数据库，并且每天更新依次，所以使用locate命令查不到最新变动过的文件，为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库，updatedb命令会根据/etc/updatedb.conf来更新文件。\n\n**原理：** 默认情况下(当filename中不包含通配符*)，locate会给出所有与 * filename*相匹配的文件的路径。\n**适用场合：** 没有文件类型性质的模糊查找（你只记得某个文件的部分名称）。\n![locate命令](./linux-search-file/3.png)\n![locate命令](./linux-search-file/4.png)\n![locate命令](./linux-search-file/5.png)\n![locate命令](./linux-search-file/6.png)\n\n\n### 4. find 遍历文件查找\n语法：\n - -name                    #按文件名查找(find /etc/ -name \"??????\" 查找/etc目录下，开头是6个任意字符的文件， *.log以log结尾的文件；\"[1-3].txt\"指定范围以txt结尾的文件（包括 1.txt,2.txt,3.txt）)\n - -size                    #按大小查找（find /etc/ -size +1M 查询大于1M的文件(find /etc/ -size -10K)，注意：如果没有+ -， 则是精确到1M,加上+ - 表示范围； find /etc/ -size +1k -a -size -10k 查找1-10K的文件）\n - -user                    #按属主查找（find /opt/ -user xiaoyuge 查找/opt属于xiaoyuge用户的文件；注意，系统要存在该用户，否则会报错）\n - -perm                    #按权限查找（find /opt/ -perm 0644 查找/opt目录权限是644文件）\n - -type                    #按类型查找（find /usr/bin/ -type f 查找/usr/bin下类型是二进制文件）\n - -time                    #按天查找\n   - atime n                    #将n*24小时内访问过的文件列出(access)\n   - ctime n                    #将n*24小时内状态发生改变的文件列出（change） find /etc/ -ctime +7 在7天之前,属性被修改过的文件\n   - mtime n                    #将n*24小时内被修改过的文件列出(modify)\n   - newer file                 #把比file还要心的文件列出\n\n   - amin n                     #将n 分钟内访问过的文件列出(access)   find /etc/ -mmin -120 在120分钟内，内容被修改的文件\n   - cmin n                     #将n 分钟内状态发生改变的文件列出（change）\n   - mmin n                     #将n 分钟内被修改过的文件列出(modify)\n    \n - -inum                    #按i节点查找 有一些文件的硬链接数量很多，有相同的i节点，查找其中一个文件的i节点号，一次性删除。\n - -exec                    #查找后执行命令\n\n\n**原理：** 遍历当前工作目录及其子目录，find命令是在硬盘上遍历查找，非常耗硬盘资源，查找效率相比whereis和locate较低。\n**适用场合：** 能用which、whereis和locate的时候尽量不要用find.\n\n\n### 4中命令对比\n![对比](./linux-search-file/7.png)","source":"_posts/2022/03/linux-search-file.md","raw":"---\ntitle: Linux系统下查找文件命令总结\ncomments: true\ntags: Linux\ncategories: linux\nabbrlink: 32250\ntranslate_title: linux-find-file\ndate: 2022-03-19 13:52:39\n---\n\n### 1. which查命令绝对路径\n**which** 从环境变量PATH中定位/返回与指定名字相匹配的可执行文件所在的路径\n![which命令](./linux-search-file/1.png)\n\n**原理**：执行**which**命令时，which会在当前环境变量PATH中依次寻找能够匹配所找命令名字的可执行文件名，不加 - a选项，返回第一个匹配的可执行文件路径，\n否则依次返回满足条件的所有可执行文件的路径名\n\n**适用场合：** 一般用于查找命令/可执行文件所在的路径。有时候可能在多个路径下存在相同的命令，该命令可用于查找当前所执行的命令到底是哪一个位置处的命令。\n\n\n### 2. whereis查找特定文件\n**whereis** 命令用来定位指令的二进制程序、源代码文件和man手册页等相关文件的路径， 该命令只能用于程序名的搜索\n1. \\- b   #定位可执行文件\n2. \\- m   #定位帮助文件\n3. \\- s   定位源代码文件 \n4. \\- u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件\n5. \\- B   指定搜索可执行文件的路径。\n6. \\- M   指定搜索帮助文件的路径。\n7. \\- S   指定搜索源代码文件的路径\n![whereis命令](./linux-search-file/2.png)\n\n**原理：** whereis命令首先会去掉filename中的前缀空格和以.开头的任何字符，然后再在数据库（var/lib/slocate/slocate.db）中查找与上述处理后的filename相匹配的二进制文件、源文件和帮助手册文件,使用之前可以使用**updatedb**命令手动更新数据库。\n\n**适用场合：** 二进制文件、源文件和帮助手册文件路径的查找。\n和**find** 相比，Whereis 查找的速度非常快，这是因为Linux系统会将系统内的所有文件都记录在一个数据库文件中，当使用**whereis (或者locate)**\n会从数据库查找数据，而不是像find命令那样，通过遍历硬盘来查找文件，效率更高！\n\n\n### 3. locate缓存查找文件\n**locate** 搜素一个数据库（/var/lib/mlocate/mlocate.db）,这个数据库中国呢包含本地所有文件信息，Linux系统自动创建这个数据库，并且每天更新依次，所以使用locate命令查不到最新变动过的文件，为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库，updatedb命令会根据/etc/updatedb.conf来更新文件。\n\n**原理：** 默认情况下(当filename中不包含通配符*)，locate会给出所有与 * filename*相匹配的文件的路径。\n**适用场合：** 没有文件类型性质的模糊查找（你只记得某个文件的部分名称）。\n![locate命令](./linux-search-file/3.png)\n![locate命令](./linux-search-file/4.png)\n![locate命令](./linux-search-file/5.png)\n![locate命令](./linux-search-file/6.png)\n\n\n### 4. find 遍历文件查找\n语法：\n - -name                    #按文件名查找(find /etc/ -name \"??????\" 查找/etc目录下，开头是6个任意字符的文件， *.log以log结尾的文件；\"[1-3].txt\"指定范围以txt结尾的文件（包括 1.txt,2.txt,3.txt）)\n - -size                    #按大小查找（find /etc/ -size +1M 查询大于1M的文件(find /etc/ -size -10K)，注意：如果没有+ -， 则是精确到1M,加上+ - 表示范围； find /etc/ -size +1k -a -size -10k 查找1-10K的文件）\n - -user                    #按属主查找（find /opt/ -user xiaoyuge 查找/opt属于xiaoyuge用户的文件；注意，系统要存在该用户，否则会报错）\n - -perm                    #按权限查找（find /opt/ -perm 0644 查找/opt目录权限是644文件）\n - -type                    #按类型查找（find /usr/bin/ -type f 查找/usr/bin下类型是二进制文件）\n - -time                    #按天查找\n   - atime n                    #将n*24小时内访问过的文件列出(access)\n   - ctime n                    #将n*24小时内状态发生改变的文件列出（change） find /etc/ -ctime +7 在7天之前,属性被修改过的文件\n   - mtime n                    #将n*24小时内被修改过的文件列出(modify)\n   - newer file                 #把比file还要心的文件列出\n\n   - amin n                     #将n 分钟内访问过的文件列出(access)   find /etc/ -mmin -120 在120分钟内，内容被修改的文件\n   - cmin n                     #将n 分钟内状态发生改变的文件列出（change）\n   - mmin n                     #将n 分钟内被修改过的文件列出(modify)\n    \n - -inum                    #按i节点查找 有一些文件的硬链接数量很多，有相同的i节点，查找其中一个文件的i节点号，一次性删除。\n - -exec                    #查找后执行命令\n\n\n**原理：** 遍历当前工作目录及其子目录，find命令是在硬盘上遍历查找，非常耗硬盘资源，查找效率相比whereis和locate较低。\n**适用场合：** 能用which、whereis和locate的时候尽量不要用find.\n\n\n### 4中命令对比\n![对比](./linux-search-file/7.png)","slug":"linux-search-file","published":1,"updated":"2022-03-27T14:06:03.381Z","layout":"post","photos":[],"link":"","_id":"cl235zcvk0003wjpjec907ow5","content":"<h3 id=\"1-which查命令绝对路径\"><a class=\"markdownIt-Anchor\" href=\"#1-which查命令绝对路径\"></a> 1. which查命令绝对路径</h3>\n<p><strong>which</strong> 从环境变量PATH中定位/返回与指定名字相匹配的可执行文件所在的路径<br>\n<img src=\"/linux-search-file/1.png\" alt=\"which命令\"></p>\n<p><strong>原理</strong>：执行<strong>which</strong>命令时，which会在当前环境变量PATH中依次寻找能够匹配所找命令名字的可执行文件名，不加 - a选项，返回第一个匹配的可执行文件路径，<br>\n否则依次返回满足条件的所有可执行文件的路径名</p>\n<p><strong>适用场合：</strong> 一般用于查找命令/可执行文件所在的路径。有时候可能在多个路径下存在相同的命令，该命令可用于查找当前所执行的命令到底是哪一个位置处的命令。</p>\n<h3 id=\"2-whereis查找特定文件\"><a class=\"markdownIt-Anchor\" href=\"#2-whereis查找特定文件\"></a> 2. whereis查找特定文件</h3>\n<p><strong>whereis</strong> 命令用来定位指令的二进制程序、源代码文件和man手册页等相关文件的路径， 该命令只能用于程序名的搜索</p>\n<ol>\n<li>- b   #定位可执行文件</li>\n<li>- m   #定位帮助文件</li>\n<li>- s   定位源代码文件</li>\n<li>- u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件</li>\n<li>- B   指定搜索可执行文件的路径。</li>\n<li>- M   指定搜索帮助文件的路径。</li>\n<li>- S   指定搜索源代码文件的路径<br>\n<img src=\"/linux-search-file/2.png\" alt=\"whereis命令\"></li>\n</ol>\n<p><strong>原理：</strong> whereis命令首先会去掉filename中的前缀空格和以.开头的任何字符，然后再在数据库（var/lib/slocate/slocate.db）中查找与上述处理后的filename相匹配的二进制文件、源文件和帮助手册文件,使用之前可以使用<strong>updatedb</strong>命令手动更新数据库。</p>\n<p><strong>适用场合：</strong> 二进制文件、源文件和帮助手册文件路径的查找。<br>\n和<strong>find</strong> 相比，Whereis 查找的速度非常快，这是因为Linux系统会将系统内的所有文件都记录在一个数据库文件中，当使用<strong>whereis (或者locate)</strong><br>\n会从数据库查找数据，而不是像find命令那样，通过遍历硬盘来查找文件，效率更高！</p>\n<h3 id=\"3-locate缓存查找文件\"><a class=\"markdownIt-Anchor\" href=\"#3-locate缓存查找文件\"></a> 3. locate缓存查找文件</h3>\n<p><strong>locate</strong> 搜素一个数据库（/var/lib/mlocate/mlocate.db）,这个数据库中国呢包含本地所有文件信息，Linux系统自动创建这个数据库，并且每天更新依次，所以使用locate命令查不到最新变动过的文件，为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库，updatedb命令会根据/etc/updatedb.conf来更新文件。</p>\n<p><strong>原理：</strong> 默认情况下(当filename中不包含通配符*)，locate会给出所有与 * filename*相匹配的文件的路径。<br>\n<strong>适用场合：</strong> 没有文件类型性质的模糊查找（你只记得某个文件的部分名称）。<br>\n<img src=\"/linux-search-file/3.png\" alt=\"locate命令\"><br>\n<img src=\"/linux-search-file/4.png\" alt=\"locate命令\"><br>\n<img src=\"/linux-search-file/5.png\" alt=\"locate命令\"><br>\n<img src=\"/linux-search-file/6.png\" alt=\"locate命令\"></p>\n<h3 id=\"4-find-遍历文件查找\"><a class=\"markdownIt-Anchor\" href=\"#4-find-遍历文件查找\"></a> 4. find 遍历文件查找</h3>\n<p>语法：</p>\n<ul>\n<li>\n<p>-name                    #按文件名查找(find /etc/ -name “???” 查找/etc目录下，开头是6个任意字符的文件， *.log以log结尾的文件；&quot;[1-3].txt&quot;指定范围以txt结尾的文件（包括 1.txt,2.txt,3.txt）)</p>\n</li>\n<li>\n<p>-size                    #按大小查找（find /etc/ -size +1M 查询大于1M的文件(find /etc/ -size -10K)，注意：如果没有+ -， 则是精确到1M,加上+ - 表示范围； find /etc/ -size +1k -a -size -10k 查找1-10K的文件）</p>\n</li>\n<li>\n<p>-user                    #按属主查找（find /opt/ -user xiaoyuge 查找/opt属于xiaoyuge用户的文件；注意，系统要存在该用户，否则会报错）</p>\n</li>\n<li>\n<p>-perm                    #按权限查找（find /opt/ -perm 0644 查找/opt目录权限是644文件）</p>\n</li>\n<li>\n<p>-type                    #按类型查找（find /usr/bin/ -type f 查找/usr/bin下类型是二进制文件）</p>\n</li>\n<li>\n<p>-time                    #按天查找</p>\n<ul>\n<li>\n<p>atime n                    #将n*24小时内访问过的文件列出(access)</p>\n</li>\n<li>\n<p>ctime n                    #将n*24小时内状态发生改变的文件列出（change） find /etc/ -ctime +7 在7天之前,属性被修改过的文件</p>\n</li>\n<li>\n<p>mtime n                    #将n*24小时内被修改过的文件列出(modify)</p>\n</li>\n<li>\n<p>newer file                 #把比file还要心的文件列出</p>\n</li>\n<li>\n<p>amin n                     #将n 分钟内访问过的文件列出(access)   find /etc/ -mmin -120 在120分钟内，内容被修改的文件</p>\n</li>\n<li>\n<p>cmin n                     #将n 分钟内状态发生改变的文件列出（change）</p>\n</li>\n<li>\n<p>mmin n                     #将n 分钟内被修改过的文件列出(modify)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>-inum                    #按i节点查找 有一些文件的硬链接数量很多，有相同的i节点，查找其中一个文件的i节点号，一次性删除。</p>\n</li>\n<li>\n<p>-exec                    #查找后执行命令</p>\n</li>\n</ul>\n<p><strong>原理：</strong> 遍历当前工作目录及其子目录，find命令是在硬盘上遍历查找，非常耗硬盘资源，查找效率相比whereis和locate较低。<br>\n<strong>适用场合：</strong> 能用which、whereis和locate的时候尽量不要用find.</p>\n<h3 id=\"4中命令对比\"><a class=\"markdownIt-Anchor\" href=\"#4中命令对比\"></a> 4中命令对比</h3>\n<p><img src=\"/linux-search-file/7.png\" alt=\"对比\"></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"1-which查命令绝对路径\"><a class=\"markdownIt-Anchor\" href=\"#1-which查命令绝对路径\"></a> 1. which查命令绝对路径</h3>\n<p><strong>which</strong> 从环境变量PATH中定位/返回与指定名字相匹配的可执行文件所在的路径<br>\n<img src=\"/linux-search-file/1.png\" alt=\"which命令\"></p>\n<p><strong>原理</strong>：执行<strong>which</strong>命令时，which会在当前环境变量PATH中依次寻找能够匹配所找命令名字的可执行文件名，不加 - a选项，返回第一个匹配的可执行文件路径，<br>\n否则依次返回满足条件的所有可执行文件的路径名</p>\n<p><strong>适用场合：</strong> 一般用于查找命令/可执行文件所在的路径。有时候可能在多个路径下存在相同的命令，该命令可用于查找当前所执行的命令到底是哪一个位置处的命令。</p>\n<h3 id=\"2-whereis查找特定文件\"><a class=\"markdownIt-Anchor\" href=\"#2-whereis查找特定文件\"></a> 2. whereis查找特定文件</h3>\n<p><strong>whereis</strong> 命令用来定位指令的二进制程序、源代码文件和man手册页等相关文件的路径， 该命令只能用于程序名的搜索</p>\n<ol>\n<li>- b   #定位可执行文件</li>\n<li>- m   #定位帮助文件</li>\n<li>- s   定位源代码文件</li>\n<li>- u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件</li>\n<li>- B   指定搜索可执行文件的路径。</li>\n<li>- M   指定搜索帮助文件的路径。</li>\n<li>- S   指定搜索源代码文件的路径<br>\n<img src=\"/linux-search-file/2.png\" alt=\"whereis命令\"></li>\n</ol>\n<p><strong>原理：</strong> whereis命令首先会去掉filename中的前缀空格和以.开头的任何字符，然后再在数据库（var/lib/slocate/slocate.db）中查找与上述处理后的filename相匹配的二进制文件、源文件和帮助手册文件,使用之前可以使用<strong>updatedb</strong>命令手动更新数据库。</p>\n<p><strong>适用场合：</strong> 二进制文件、源文件和帮助手册文件路径的查找。<br>\n和<strong>find</strong> 相比，Whereis 查找的速度非常快，这是因为Linux系统会将系统内的所有文件都记录在一个数据库文件中，当使用<strong>whereis (或者locate)</strong><br>\n会从数据库查找数据，而不是像find命令那样，通过遍历硬盘来查找文件，效率更高！</p>\n<h3 id=\"3-locate缓存查找文件\"><a class=\"markdownIt-Anchor\" href=\"#3-locate缓存查找文件\"></a> 3. locate缓存查找文件</h3>\n<p><strong>locate</strong> 搜素一个数据库（/var/lib/mlocate/mlocate.db）,这个数据库中国呢包含本地所有文件信息，Linux系统自动创建这个数据库，并且每天更新依次，所以使用locate命令查不到最新变动过的文件，为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库，updatedb命令会根据/etc/updatedb.conf来更新文件。</p>\n<p><strong>原理：</strong> 默认情况下(当filename中不包含通配符*)，locate会给出所有与 * filename*相匹配的文件的路径。<br>\n<strong>适用场合：</strong> 没有文件类型性质的模糊查找（你只记得某个文件的部分名称）。<br>\n<img src=\"/linux-search-file/3.png\" alt=\"locate命令\"><br>\n<img src=\"/linux-search-file/4.png\" alt=\"locate命令\"><br>\n<img src=\"/linux-search-file/5.png\" alt=\"locate命令\"><br>\n<img src=\"/linux-search-file/6.png\" alt=\"locate命令\"></p>\n<h3 id=\"4-find-遍历文件查找\"><a class=\"markdownIt-Anchor\" href=\"#4-find-遍历文件查找\"></a> 4. find 遍历文件查找</h3>\n<p>语法：</p>\n<ul>\n<li>\n<p>-name                    #按文件名查找(find /etc/ -name “???” 查找/etc目录下，开头是6个任意字符的文件， *.log以log结尾的文件；&quot;[1-3].txt&quot;指定范围以txt结尾的文件（包括 1.txt,2.txt,3.txt）)</p>\n</li>\n<li>\n<p>-size                    #按大小查找（find /etc/ -size +1M 查询大于1M的文件(find /etc/ -size -10K)，注意：如果没有+ -， 则是精确到1M,加上+ - 表示范围； find /etc/ -size +1k -a -size -10k 查找1-10K的文件）</p>\n</li>\n<li>\n<p>-user                    #按属主查找（find /opt/ -user xiaoyuge 查找/opt属于xiaoyuge用户的文件；注意，系统要存在该用户，否则会报错）</p>\n</li>\n<li>\n<p>-perm                    #按权限查找（find /opt/ -perm 0644 查找/opt目录权限是644文件）</p>\n</li>\n<li>\n<p>-type                    #按类型查找（find /usr/bin/ -type f 查找/usr/bin下类型是二进制文件）</p>\n</li>\n<li>\n<p>-time                    #按天查找</p>\n<ul>\n<li>\n<p>atime n                    #将n*24小时内访问过的文件列出(access)</p>\n</li>\n<li>\n<p>ctime n                    #将n*24小时内状态发生改变的文件列出（change） find /etc/ -ctime +7 在7天之前,属性被修改过的文件</p>\n</li>\n<li>\n<p>mtime n                    #将n*24小时内被修改过的文件列出(modify)</p>\n</li>\n<li>\n<p>newer file                 #把比file还要心的文件列出</p>\n</li>\n<li>\n<p>amin n                     #将n 分钟内访问过的文件列出(access)   find /etc/ -mmin -120 在120分钟内，内容被修改的文件</p>\n</li>\n<li>\n<p>cmin n                     #将n 分钟内状态发生改变的文件列出（change）</p>\n</li>\n<li>\n<p>mmin n                     #将n 分钟内被修改过的文件列出(modify)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>-inum                    #按i节点查找 有一些文件的硬链接数量很多，有相同的i节点，查找其中一个文件的i节点号，一次性删除。</p>\n</li>\n<li>\n<p>-exec                    #查找后执行命令</p>\n</li>\n</ul>\n<p><strong>原理：</strong> 遍历当前工作目录及其子目录，find命令是在硬盘上遍历查找，非常耗硬盘资源，查找效率相比whereis和locate较低。<br>\n<strong>适用场合：</strong> 能用which、whereis和locate的时候尽量不要用find.</p>\n<h3 id=\"4中命令对比\"><a class=\"markdownIt-Anchor\" href=\"#4中命令对比\"></a> 4中命令对比</h3>\n<p><img src=\"/linux-search-file/7.png\" alt=\"对比\"></p>\n"},{"title":"分布式消息中间件设计","comments":1,"translate_title":"message-oriented-middleware","abbrlink":37424,"date":"2022-03-22T08:56:31.000Z","_content":"\n## 1. 消息中间件概述\n1. 什么是分布式消息中间件\n   \n    利用高效可靠的消息传递机制进行平台无关的数据交流；\n    并基于数据通信来进行分布式系统的集成；\n    通过提供消息和消息排队模型，它可以在分布式环境下扩展进城间的通信。\n   \n2. 消息中间件的应用场景\n    \n    跨系统数据传递、高并发流量削峰、数据异步处理......\n\n3. 常用的消息中间件\n    \n    ActiveMQ(太老)、RabbitMQ、Kafka、 RocketMQ\n\n4. 本质\n    \n    一种具备接受请求、保存数据、发送数据等功能的网络应用。和一般的网络应用程序的区别是它主要负责数据的接收和传递，所以性能一般高于普通程序\n\n5. 5大核心组成\n    - 协议\n    - 持久性机制\n    - 消息分布机制\n    - 高可用设计\n    - 高可靠设计\n    \n\n### 1.1 协议\n协议是计算机之间通信时共同遵守的一组约定，确保计算机之间能够相互交流；是对数据格式和计算机之间交换数据时必须遵守的规则的正式描述\n  \n三大要素：\n- 语法：即数据和控制信息的结构或格式\n- 语义：即需要发出何种控制信息，完成何种动作以及作出何种响应\n- 时序：即时间实现顺序的详细说明\n\n消息中间件常用协议：openWire、AMQP、MQTT（物流网，快，不能持久化）、Kafka、OpenMessage等；\n不能用http协议的原因是：http每次请求必须要有响应，性能不高；\n\n#### 1.1 AMQP协议\nAMQP（Advanced Message Queuing Protocol）是高级消息队列协议；04年JPMorgan Chase(摩根大通集团)联合其他公司共同设计\n\n- 特性：事物支持、持久化支持，出生金融行业，在可靠性消息处理上具备天然的优势\n- 优秀产品 RabbitMQ、 Apache ACTIVEMQ\n\n#### 1.2 MQTT协议\nMQTT（Message Queuing Telemetry Transport）消息队列遥测传输\n是IBM开发的一个即时通讯协议，物联网系统架构中的重要组成部分；\n\n- 特性：轻量、结构简单、传输快、没有事务支持、没有持久化相关设计\n- 应用场景：适用于计算能力有限、低宽带、网络不稳定的场景\n- 优秀产品：RabbitMQ、 Apache ACTIVEMQ\n\n#### 1.3 Open Message协议\nOpenMessaging 是近几年有阿里发起，与雅虎、滴滴出行、Streamlio等公司共同参数传里的分布式消息中间件、流处理领域的开发应用标准。\n是国内首个在全球范围内发起的分布式消息领域国际标准\n\n- 特性：结构简单、解析快、有事务设计、有持久化设计\n- 优秀产品：Apache RocketMQ\n\n#### 1.4 Kafka协议\nKafka协议是基于TCP的二进制协议。消息内部是通过长度来分割，由一些基本数据类型组成\n- 特性：结构简单、解析快、无事务设计、有持久化设计\n- 优秀产品：Apache Kafka\n\n#### 1.55 OpenWire协议\n开放链接，ActiveMQ自定义的一种协议，ActiveMQ默认链接方式，它提供一种高效率的二进制格式来使消息高速传输\n- 特性：结构简单、解析快、无事务设计、有持久化设计\n- 优秀产品：Apache ActiveMQ\n\n### 1.2 持久化\n简单来说就是将数据存入磁盘，而不是存在内存中岁服务重启而消失，使数据能够永久保存叫做持久化\n\n|  | ActiveMQ | RabbitMQ | Kafka | RocketMQ |\n| ------ | :------: | :------: | :------: | :------: |\n| 文件系统 | 支持 | 支持 | 支持 | 支持 |\n| 数据库 | 支持 | - | - | - |\n \n### 1.3 消息分发\n|  | ActiveMQ | RabbitMQ | Kafka | RocketMQ |\n| ------ | :------: | :------: | :------: | :------: |\n| 发布订阅 | 支持 | 支持 | 支持 | 支持 |\n| 轮询分发 | 支持 | 支持 | 支持 | - |\n| 公平分发 | - | 支持 | 支持 | - |\n| 重发 | 支持 | 支持 | - | 支持 |\n| 消息拉取 | - | 支持 | 支持 | 支持 |\n\n### 1.4 高可用\n高可用性是指产品在规定的条件和规定的时刻或时间区间内处于可执行规定功能状态的能力；\n当业务量大时，一台消息中间件服务器可能无法满足需求，所以需要消息中间件能够集群部署，来达到高可用的目的。\n\n#### 1.4.1 Master-Slave主从共享数据的部署方式\n当Master收到客户端的消息后，放到共享的文件系统/数据库； 客户端访问的是Master节点，Slave节点只做备份；\n![Master-Slave主从共享数据的部署方式](./message-oriented-middleware/2.png)\n\n#### 1.4.2 Master-Slave主从同步部署方式\n当Master收到客户端的消息后，发给其他broker同步。\n![Master-Slave主从同步部署方式](./message-oriented-middleware/3.png)\n\n#### 1.4.3 Broker-Cluster多主集群同步部署方式\n一部分消息放在broker1 ,一部分放在broker2\n![Broker-Cluster多主集群同步部署方式](./message-oriented-middleware/4.png)\n\n#### 1.4.4 Broker-Cluster多主集群转发部署方式\n转发数据或转发请求\n![Broker-Cluster多主集群转发部署方式](./message-oriented-middleware/5.png)\n\n#### 1.4.5 Master-slave与Broker-Cluster结合\n![Master-slave与Broker-Cluster结合](./message-oriented-middleware/6.png)\n\n### 1.5 高可靠\n高可靠性是指系统可以无故障地持续运行。比如一个系统从来不崩溃、报错，或者崩溃、报错的几率较低，那就是高可靠。\n保证消息中间件的高可靠行，可以从一下几方面考虑\n- 消息传输可靠： 通过协议来保证系统件数据解析的正确性\n- 消息存储可靠： 通过持久化来保证消息存储可靠性\n\n","source":"_posts/2022/03/message-oriented-middleware.md","raw":"---\ntitle: 分布式消息中间件设计\ncomments: true\ntags: 消息中间件\ncategories: 中间件\ntranslate_title: message-oriented-middleware\nabbrlink: 37424\ndate: 2022-03-22 16:56:31\n---\n\n## 1. 消息中间件概述\n1. 什么是分布式消息中间件\n   \n    利用高效可靠的消息传递机制进行平台无关的数据交流；\n    并基于数据通信来进行分布式系统的集成；\n    通过提供消息和消息排队模型，它可以在分布式环境下扩展进城间的通信。\n   \n2. 消息中间件的应用场景\n    \n    跨系统数据传递、高并发流量削峰、数据异步处理......\n\n3. 常用的消息中间件\n    \n    ActiveMQ(太老)、RabbitMQ、Kafka、 RocketMQ\n\n4. 本质\n    \n    一种具备接受请求、保存数据、发送数据等功能的网络应用。和一般的网络应用程序的区别是它主要负责数据的接收和传递，所以性能一般高于普通程序\n\n5. 5大核心组成\n    - 协议\n    - 持久性机制\n    - 消息分布机制\n    - 高可用设计\n    - 高可靠设计\n    \n\n### 1.1 协议\n协议是计算机之间通信时共同遵守的一组约定，确保计算机之间能够相互交流；是对数据格式和计算机之间交换数据时必须遵守的规则的正式描述\n  \n三大要素：\n- 语法：即数据和控制信息的结构或格式\n- 语义：即需要发出何种控制信息，完成何种动作以及作出何种响应\n- 时序：即时间实现顺序的详细说明\n\n消息中间件常用协议：openWire、AMQP、MQTT（物流网，快，不能持久化）、Kafka、OpenMessage等；\n不能用http协议的原因是：http每次请求必须要有响应，性能不高；\n\n#### 1.1 AMQP协议\nAMQP（Advanced Message Queuing Protocol）是高级消息队列协议；04年JPMorgan Chase(摩根大通集团)联合其他公司共同设计\n\n- 特性：事物支持、持久化支持，出生金融行业，在可靠性消息处理上具备天然的优势\n- 优秀产品 RabbitMQ、 Apache ACTIVEMQ\n\n#### 1.2 MQTT协议\nMQTT（Message Queuing Telemetry Transport）消息队列遥测传输\n是IBM开发的一个即时通讯协议，物联网系统架构中的重要组成部分；\n\n- 特性：轻量、结构简单、传输快、没有事务支持、没有持久化相关设计\n- 应用场景：适用于计算能力有限、低宽带、网络不稳定的场景\n- 优秀产品：RabbitMQ、 Apache ACTIVEMQ\n\n#### 1.3 Open Message协议\nOpenMessaging 是近几年有阿里发起，与雅虎、滴滴出行、Streamlio等公司共同参数传里的分布式消息中间件、流处理领域的开发应用标准。\n是国内首个在全球范围内发起的分布式消息领域国际标准\n\n- 特性：结构简单、解析快、有事务设计、有持久化设计\n- 优秀产品：Apache RocketMQ\n\n#### 1.4 Kafka协议\nKafka协议是基于TCP的二进制协议。消息内部是通过长度来分割，由一些基本数据类型组成\n- 特性：结构简单、解析快、无事务设计、有持久化设计\n- 优秀产品：Apache Kafka\n\n#### 1.55 OpenWire协议\n开放链接，ActiveMQ自定义的一种协议，ActiveMQ默认链接方式，它提供一种高效率的二进制格式来使消息高速传输\n- 特性：结构简单、解析快、无事务设计、有持久化设计\n- 优秀产品：Apache ActiveMQ\n\n### 1.2 持久化\n简单来说就是将数据存入磁盘，而不是存在内存中岁服务重启而消失，使数据能够永久保存叫做持久化\n\n|  | ActiveMQ | RabbitMQ | Kafka | RocketMQ |\n| ------ | :------: | :------: | :------: | :------: |\n| 文件系统 | 支持 | 支持 | 支持 | 支持 |\n| 数据库 | 支持 | - | - | - |\n \n### 1.3 消息分发\n|  | ActiveMQ | RabbitMQ | Kafka | RocketMQ |\n| ------ | :------: | :------: | :------: | :------: |\n| 发布订阅 | 支持 | 支持 | 支持 | 支持 |\n| 轮询分发 | 支持 | 支持 | 支持 | - |\n| 公平分发 | - | 支持 | 支持 | - |\n| 重发 | 支持 | 支持 | - | 支持 |\n| 消息拉取 | - | 支持 | 支持 | 支持 |\n\n### 1.4 高可用\n高可用性是指产品在规定的条件和规定的时刻或时间区间内处于可执行规定功能状态的能力；\n当业务量大时，一台消息中间件服务器可能无法满足需求，所以需要消息中间件能够集群部署，来达到高可用的目的。\n\n#### 1.4.1 Master-Slave主从共享数据的部署方式\n当Master收到客户端的消息后，放到共享的文件系统/数据库； 客户端访问的是Master节点，Slave节点只做备份；\n![Master-Slave主从共享数据的部署方式](./message-oriented-middleware/2.png)\n\n#### 1.4.2 Master-Slave主从同步部署方式\n当Master收到客户端的消息后，发给其他broker同步。\n![Master-Slave主从同步部署方式](./message-oriented-middleware/3.png)\n\n#### 1.4.3 Broker-Cluster多主集群同步部署方式\n一部分消息放在broker1 ,一部分放在broker2\n![Broker-Cluster多主集群同步部署方式](./message-oriented-middleware/4.png)\n\n#### 1.4.4 Broker-Cluster多主集群转发部署方式\n转发数据或转发请求\n![Broker-Cluster多主集群转发部署方式](./message-oriented-middleware/5.png)\n\n#### 1.4.5 Master-slave与Broker-Cluster结合\n![Master-slave与Broker-Cluster结合](./message-oriented-middleware/6.png)\n\n### 1.5 高可靠\n高可靠性是指系统可以无故障地持续运行。比如一个系统从来不崩溃、报错，或者崩溃、报错的几率较低，那就是高可靠。\n保证消息中间件的高可靠行，可以从一下几方面考虑\n- 消息传输可靠： 通过协议来保证系统件数据解析的正确性\n- 消息存储可靠： 通过持久化来保证消息存储可靠性\n\n","slug":"message-oriented-middleware","published":1,"updated":"2022-03-27T14:06:03.404Z","layout":"post","photos":[],"link":"","_id":"cl235zcvn0007wjpjafeu0dk8","content":"<h2 id=\"1-消息中间件概述\"><a class=\"markdownIt-Anchor\" href=\"#1-消息中间件概述\"></a> 1. 消息中间件概述</h2>\n<ol>\n<li>\n<p>什么是分布式消息中间件</p>\n<p>利用高效可靠的消息传递机制进行平台无关的数据交流；<br>\n并基于数据通信来进行分布式系统的集成；<br>\n通过提供消息和消息排队模型，它可以在分布式环境下扩展进城间的通信。</p>\n</li>\n<li>\n<p>消息中间件的应用场景</p>\n<p>跨系统数据传递、高并发流量削峰、数据异步处理…</p>\n</li>\n<li>\n<p>常用的消息中间件</p>\n<p>ActiveMQ(太老)、RabbitMQ、Kafka、 RocketMQ</p>\n</li>\n<li>\n<p>本质</p>\n<p>一种具备接受请求、保存数据、发送数据等功能的网络应用。和一般的网络应用程序的区别是它主要负责数据的接收和传递，所以性能一般高于普通程序</p>\n</li>\n<li>\n<p>5大核心组成</p>\n<ul>\n<li>协议</li>\n<li>持久性机制</li>\n<li>消息分布机制</li>\n<li>高可用设计</li>\n<li>高可靠设计</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"11-协议\"><a class=\"markdownIt-Anchor\" href=\"#11-协议\"></a> 1.1 协议</h3>\n<p>协议是计算机之间通信时共同遵守的一组约定，确保计算机之间能够相互交流；是对数据格式和计算机之间交换数据时必须遵守的规则的正式描述</p>\n<p>三大要素：</p>\n<ul>\n<li>语法：即数据和控制信息的结构或格式</li>\n<li>语义：即需要发出何种控制信息，完成何种动作以及作出何种响应</li>\n<li>时序：即时间实现顺序的详细说明</li>\n</ul>\n<p>消息中间件常用协议：openWire、AMQP、MQTT（物流网，快，不能持久化）、Kafka、OpenMessage等；<br>\n不能用http协议的原因是：http每次请求必须要有响应，性能不高；</p>\n<h4 id=\"11-amqp协议\"><a class=\"markdownIt-Anchor\" href=\"#11-amqp协议\"></a> 1.1 AMQP协议</h4>\n<p>AMQP（Advanced Message Queuing Protocol）是高级消息队列协议；04年JPMorgan Chase(摩根大通集团)联合其他公司共同设计</p>\n<ul>\n<li>特性：事物支持、持久化支持，出生金融行业，在可靠性消息处理上具备天然的优势</li>\n<li>优秀产品 RabbitMQ、 Apache ACTIVEMQ</li>\n</ul>\n<h4 id=\"12-mqtt协议\"><a class=\"markdownIt-Anchor\" href=\"#12-mqtt协议\"></a> 1.2 MQTT协议</h4>\n<p>MQTT（Message Queuing Telemetry Transport）消息队列遥测传输<br>\n是IBM开发的一个即时通讯协议，物联网系统架构中的重要组成部分；</p>\n<ul>\n<li>特性：轻量、结构简单、传输快、没有事务支持、没有持久化相关设计</li>\n<li>应用场景：适用于计算能力有限、低宽带、网络不稳定的场景</li>\n<li>优秀产品：RabbitMQ、 Apache ACTIVEMQ</li>\n</ul>\n<h4 id=\"13-open-message协议\"><a class=\"markdownIt-Anchor\" href=\"#13-open-message协议\"></a> 1.3 Open Message协议</h4>\n<p>OpenMessaging 是近几年有阿里发起，与雅虎、滴滴出行、Streamlio等公司共同参数传里的分布式消息中间件、流处理领域的开发应用标准。<br>\n是国内首个在全球范围内发起的分布式消息领域国际标准</p>\n<ul>\n<li>特性：结构简单、解析快、有事务设计、有持久化设计</li>\n<li>优秀产品：Apache RocketMQ</li>\n</ul>\n<h4 id=\"14-kafka协议\"><a class=\"markdownIt-Anchor\" href=\"#14-kafka协议\"></a> 1.4 Kafka协议</h4>\n<p>Kafka协议是基于TCP的二进制协议。消息内部是通过长度来分割，由一些基本数据类型组成</p>\n<ul>\n<li>特性：结构简单、解析快、无事务设计、有持久化设计</li>\n<li>优秀产品：Apache Kafka</li>\n</ul>\n<h4 id=\"155-openwire协议\"><a class=\"markdownIt-Anchor\" href=\"#155-openwire协议\"></a> 1.55 OpenWire协议</h4>\n<p>开放链接，ActiveMQ自定义的一种协议，ActiveMQ默认链接方式，它提供一种高效率的二进制格式来使消息高速传输</p>\n<ul>\n<li>特性：结构简单、解析快、无事务设计、有持久化设计</li>\n<li>优秀产品：Apache ActiveMQ</li>\n</ul>\n<h3 id=\"12-持久化\"><a class=\"markdownIt-Anchor\" href=\"#12-持久化\"></a> 1.2 持久化</h3>\n<p>简单来说就是将数据存入磁盘，而不是存在内存中岁服务重启而消失，使数据能够永久保存叫做持久化</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">ActiveMQ</th>\n<th style=\"text-align:center\">RabbitMQ</th>\n<th style=\"text-align:center\">Kafka</th>\n<th style=\"text-align:center\">RocketMQ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>文件系统</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n</tr>\n<tr>\n<td>数据库</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"13-消息分发\"><a class=\"markdownIt-Anchor\" href=\"#13-消息分发\"></a> 1.3 消息分发</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">ActiveMQ</th>\n<th style=\"text-align:center\">RabbitMQ</th>\n<th style=\"text-align:center\">Kafka</th>\n<th style=\"text-align:center\">RocketMQ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>发布订阅</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n</tr>\n<tr>\n<td>轮询分发</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td>公平分发</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td>重发</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">支持</td>\n</tr>\n<tr>\n<td>消息拉取</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"14-高可用\"><a class=\"markdownIt-Anchor\" href=\"#14-高可用\"></a> 1.4 高可用</h3>\n<p>高可用性是指产品在规定的条件和规定的时刻或时间区间内处于可执行规定功能状态的能力；<br>\n当业务量大时，一台消息中间件服务器可能无法满足需求，所以需要消息中间件能够集群部署，来达到高可用的目的。</p>\n<h4 id=\"141-master-slave主从共享数据的部署方式\"><a class=\"markdownIt-Anchor\" href=\"#141-master-slave主从共享数据的部署方式\"></a> 1.4.1 Master-Slave主从共享数据的部署方式</h4>\n<p>当Master收到客户端的消息后，放到共享的文件系统/数据库； 客户端访问的是Master节点，Slave节点只做备份；<br>\n<img src=\"/message-oriented-middleware/2.png\" alt=\"Master-Slave主从共享数据的部署方式\"></p>\n<h4 id=\"142-master-slave主从同步部署方式\"><a class=\"markdownIt-Anchor\" href=\"#142-master-slave主从同步部署方式\"></a> 1.4.2 Master-Slave主从同步部署方式</h4>\n<p>当Master收到客户端的消息后，发给其他broker同步。<br>\n<img src=\"/message-oriented-middleware/3.png\" alt=\"Master-Slave主从同步部署方式\"></p>\n<h4 id=\"143-broker-cluster多主集群同步部署方式\"><a class=\"markdownIt-Anchor\" href=\"#143-broker-cluster多主集群同步部署方式\"></a> 1.4.3 Broker-Cluster多主集群同步部署方式</h4>\n<p>一部分消息放在broker1 ,一部分放在broker2<br>\n<img src=\"/message-oriented-middleware/4.png\" alt=\"Broker-Cluster多主集群同步部署方式\"></p>\n<h4 id=\"144-broker-cluster多主集群转发部署方式\"><a class=\"markdownIt-Anchor\" href=\"#144-broker-cluster多主集群转发部署方式\"></a> 1.4.4 Broker-Cluster多主集群转发部署方式</h4>\n<p>转发数据或转发请求<br>\n<img src=\"/message-oriented-middleware/5.png\" alt=\"Broker-Cluster多主集群转发部署方式\"></p>\n<h4 id=\"145-master-slave与broker-cluster结合\"><a class=\"markdownIt-Anchor\" href=\"#145-master-slave与broker-cluster结合\"></a> 1.4.5 Master-slave与Broker-Cluster结合</h4>\n<p><img src=\"/message-oriented-middleware/6.png\" alt=\"Master-slave与Broker-Cluster结合\"></p>\n<h3 id=\"15-高可靠\"><a class=\"markdownIt-Anchor\" href=\"#15-高可靠\"></a> 1.5 高可靠</h3>\n<p>高可靠性是指系统可以无故障地持续运行。比如一个系统从来不崩溃、报错，或者崩溃、报错的几率较低，那就是高可靠。<br>\n保证消息中间件的高可靠行，可以从一下几方面考虑</p>\n<ul>\n<li>消息传输可靠： 通过协议来保证系统件数据解析的正确性</li>\n<li>消息存储可靠： 通过持久化来保证消息存储可靠性</li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1-消息中间件概述\"><a class=\"markdownIt-Anchor\" href=\"#1-消息中间件概述\"></a> 1. 消息中间件概述</h2>\n<ol>\n<li>\n<p>什么是分布式消息中间件</p>\n<p>利用高效可靠的消息传递机制进行平台无关的数据交流；<br>\n并基于数据通信来进行分布式系统的集成；<br>\n通过提供消息和消息排队模型，它可以在分布式环境下扩展进城间的通信。</p>\n</li>\n<li>\n<p>消息中间件的应用场景</p>\n<p>跨系统数据传递、高并发流量削峰、数据异步处理…</p>\n</li>\n<li>\n<p>常用的消息中间件</p>\n<p>ActiveMQ(太老)、RabbitMQ、Kafka、 RocketMQ</p>\n</li>\n<li>\n<p>本质</p>\n<p>一种具备接受请求、保存数据、发送数据等功能的网络应用。和一般的网络应用程序的区别是它主要负责数据的接收和传递，所以性能一般高于普通程序</p>\n</li>\n<li>\n<p>5大核心组成</p>\n<ul>\n<li>协议</li>\n<li>持久性机制</li>\n<li>消息分布机制</li>\n<li>高可用设计</li>\n<li>高可靠设计</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"11-协议\"><a class=\"markdownIt-Anchor\" href=\"#11-协议\"></a> 1.1 协议</h3>\n<p>协议是计算机之间通信时共同遵守的一组约定，确保计算机之间能够相互交流；是对数据格式和计算机之间交换数据时必须遵守的规则的正式描述</p>\n<p>三大要素：</p>\n<ul>\n<li>语法：即数据和控制信息的结构或格式</li>\n<li>语义：即需要发出何种控制信息，完成何种动作以及作出何种响应</li>\n<li>时序：即时间实现顺序的详细说明</li>\n</ul>\n<p>消息中间件常用协议：openWire、AMQP、MQTT（物流网，快，不能持久化）、Kafka、OpenMessage等；<br>\n不能用http协议的原因是：http每次请求必须要有响应，性能不高；</p>\n<h4 id=\"11-amqp协议\"><a class=\"markdownIt-Anchor\" href=\"#11-amqp协议\"></a> 1.1 AMQP协议</h4>\n<p>AMQP（Advanced Message Queuing Protocol）是高级消息队列协议；04年JPMorgan Chase(摩根大通集团)联合其他公司共同设计</p>\n<ul>\n<li>特性：事物支持、持久化支持，出生金融行业，在可靠性消息处理上具备天然的优势</li>\n<li>优秀产品 RabbitMQ、 Apache ACTIVEMQ</li>\n</ul>\n<h4 id=\"12-mqtt协议\"><a class=\"markdownIt-Anchor\" href=\"#12-mqtt协议\"></a> 1.2 MQTT协议</h4>\n<p>MQTT（Message Queuing Telemetry Transport）消息队列遥测传输<br>\n是IBM开发的一个即时通讯协议，物联网系统架构中的重要组成部分；</p>\n<ul>\n<li>特性：轻量、结构简单、传输快、没有事务支持、没有持久化相关设计</li>\n<li>应用场景：适用于计算能力有限、低宽带、网络不稳定的场景</li>\n<li>优秀产品：RabbitMQ、 Apache ACTIVEMQ</li>\n</ul>\n<h4 id=\"13-open-message协议\"><a class=\"markdownIt-Anchor\" href=\"#13-open-message协议\"></a> 1.3 Open Message协议</h4>\n<p>OpenMessaging 是近几年有阿里发起，与雅虎、滴滴出行、Streamlio等公司共同参数传里的分布式消息中间件、流处理领域的开发应用标准。<br>\n是国内首个在全球范围内发起的分布式消息领域国际标准</p>\n<ul>\n<li>特性：结构简单、解析快、有事务设计、有持久化设计</li>\n<li>优秀产品：Apache RocketMQ</li>\n</ul>\n<h4 id=\"14-kafka协议\"><a class=\"markdownIt-Anchor\" href=\"#14-kafka协议\"></a> 1.4 Kafka协议</h4>\n<p>Kafka协议是基于TCP的二进制协议。消息内部是通过长度来分割，由一些基本数据类型组成</p>\n<ul>\n<li>特性：结构简单、解析快、无事务设计、有持久化设计</li>\n<li>优秀产品：Apache Kafka</li>\n</ul>\n<h4 id=\"155-openwire协议\"><a class=\"markdownIt-Anchor\" href=\"#155-openwire协议\"></a> 1.55 OpenWire协议</h4>\n<p>开放链接，ActiveMQ自定义的一种协议，ActiveMQ默认链接方式，它提供一种高效率的二进制格式来使消息高速传输</p>\n<ul>\n<li>特性：结构简单、解析快、无事务设计、有持久化设计</li>\n<li>优秀产品：Apache ActiveMQ</li>\n</ul>\n<h3 id=\"12-持久化\"><a class=\"markdownIt-Anchor\" href=\"#12-持久化\"></a> 1.2 持久化</h3>\n<p>简单来说就是将数据存入磁盘，而不是存在内存中岁服务重启而消失，使数据能够永久保存叫做持久化</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">ActiveMQ</th>\n<th style=\"text-align:center\">RabbitMQ</th>\n<th style=\"text-align:center\">Kafka</th>\n<th style=\"text-align:center\">RocketMQ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>文件系统</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n</tr>\n<tr>\n<td>数据库</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"13-消息分发\"><a class=\"markdownIt-Anchor\" href=\"#13-消息分发\"></a> 1.3 消息分发</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">ActiveMQ</th>\n<th style=\"text-align:center\">RabbitMQ</th>\n<th style=\"text-align:center\">Kafka</th>\n<th style=\"text-align:center\">RocketMQ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>发布订阅</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n</tr>\n<tr>\n<td>轮询分发</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td>公平分发</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td>重发</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">支持</td>\n</tr>\n<tr>\n<td>消息拉取</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"14-高可用\"><a class=\"markdownIt-Anchor\" href=\"#14-高可用\"></a> 1.4 高可用</h3>\n<p>高可用性是指产品在规定的条件和规定的时刻或时间区间内处于可执行规定功能状态的能力；<br>\n当业务量大时，一台消息中间件服务器可能无法满足需求，所以需要消息中间件能够集群部署，来达到高可用的目的。</p>\n<h4 id=\"141-master-slave主从共享数据的部署方式\"><a class=\"markdownIt-Anchor\" href=\"#141-master-slave主从共享数据的部署方式\"></a> 1.4.1 Master-Slave主从共享数据的部署方式</h4>\n<p>当Master收到客户端的消息后，放到共享的文件系统/数据库； 客户端访问的是Master节点，Slave节点只做备份；<br>\n<img src=\"/message-oriented-middleware/2.png\" alt=\"Master-Slave主从共享数据的部署方式\"></p>\n<h4 id=\"142-master-slave主从同步部署方式\"><a class=\"markdownIt-Anchor\" href=\"#142-master-slave主从同步部署方式\"></a> 1.4.2 Master-Slave主从同步部署方式</h4>\n<p>当Master收到客户端的消息后，发给其他broker同步。<br>\n<img src=\"/message-oriented-middleware/3.png\" alt=\"Master-Slave主从同步部署方式\"></p>\n<h4 id=\"143-broker-cluster多主集群同步部署方式\"><a class=\"markdownIt-Anchor\" href=\"#143-broker-cluster多主集群同步部署方式\"></a> 1.4.3 Broker-Cluster多主集群同步部署方式</h4>\n<p>一部分消息放在broker1 ,一部分放在broker2<br>\n<img src=\"/message-oriented-middleware/4.png\" alt=\"Broker-Cluster多主集群同步部署方式\"></p>\n<h4 id=\"144-broker-cluster多主集群转发部署方式\"><a class=\"markdownIt-Anchor\" href=\"#144-broker-cluster多主集群转发部署方式\"></a> 1.4.4 Broker-Cluster多主集群转发部署方式</h4>\n<p>转发数据或转发请求<br>\n<img src=\"/message-oriented-middleware/5.png\" alt=\"Broker-Cluster多主集群转发部署方式\"></p>\n<h4 id=\"145-master-slave与broker-cluster结合\"><a class=\"markdownIt-Anchor\" href=\"#145-master-slave与broker-cluster结合\"></a> 1.4.5 Master-slave与Broker-Cluster结合</h4>\n<p><img src=\"/message-oriented-middleware/6.png\" alt=\"Master-slave与Broker-Cluster结合\"></p>\n<h3 id=\"15-高可靠\"><a class=\"markdownIt-Anchor\" href=\"#15-高可靠\"></a> 1.5 高可靠</h3>\n<p>高可靠性是指系统可以无故障地持续运行。比如一个系统从来不崩溃、报错，或者崩溃、报错的几率较低，那就是高可靠。<br>\n保证消息中间件的高可靠行，可以从一下几方面考虑</p>\n<ul>\n<li>消息传输可靠： 通过协议来保证系统件数据解析的正确性</li>\n<li>消息存储可靠： 通过持久化来保证消息存储可靠性</li>\n</ul>\n"},{"title":"mysqldumpslow分析慢查询日志","comments":1,"abbrlink":19102,"date":"2021-08-21T08:16:02.000Z","translate_title":"mysqldumpslow-query-log","_content":"按照平均查询输出5行慢查询记录\n```shell\nmysqldumpslow -s at -t 5 /phpstudy/data/slowquery.log\n```\n- -s   排序方式，可选值有c（记录次数）、t（查询时间）、l（锁定时间）、r（返回记录）、a（平均）\n- -t    显示的记录数Spawn failed解决方式\n- -g   后面跟正则表达式（如 left join），不区分大小写。\n- -r   正序排序，即从小到大排序。\n- -d  调试 debug\n- -v   查看版本\n\n按照平均查询时间排序且只显示含有left join的记录\n```shell\nmysqldumpslow -s at -g 'left join' /phpstudy/data/slowquery.log\n```\n","source":"_posts/2021/08/mysqldumpslow分析慢查询日志.md","raw":"---\ntitle: mysqldumpslow分析慢查询日志\ncomments: true\ntags: mysql\ncategories: mysql\nabbrlink: 19102\ndate: 2021-08-21 16:16:02\ntranslate_title: mysqldumpslow-query-log\n---\n按照平均查询输出5行慢查询记录\n```shell\nmysqldumpslow -s at -t 5 /phpstudy/data/slowquery.log\n```\n- -s   排序方式，可选值有c（记录次数）、t（查询时间）、l（锁定时间）、r（返回记录）、a（平均）\n- -t    显示的记录数Spawn failed解决方式\n- -g   后面跟正则表达式（如 left join），不区分大小写。\n- -r   正序排序，即从小到大排序。\n- -d  调试 debug\n- -v   查看版本\n\n按照平均查询时间排序且只显示含有left join的记录\n```shell\nmysqldumpslow -s at -g 'left join' /phpstudy/data/slowquery.log\n```\n","slug":"mysqldumpslow分析慢查询日志","published":1,"updated":"2022-04-06T09:51:44.950Z","layout":"post","photos":[],"link":"","_id":"cl235zcvo0009wjpjdrqeabve","content":"<p>按照平均查询输出5行慢查询记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldumpslow -s at -t 5 /phpstudy/data/slowquery.log</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-s   排序方式，可选值有c（记录次数）、t（查询时间）、l（锁定时间）、r（返回记录）、a（平均）</li>\n<li>-t    显示的记录数Spawn failed解决方式</li>\n<li>-g   后面跟正则表达式（如 left join），不区分大小写。</li>\n<li>-r   正序排序，即从小到大排序。</li>\n<li>-d  调试 debug</li>\n<li>-v   查看版本</li>\n</ul>\n<p>按照平均查询时间排序且只显示含有left join的记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldumpslow -s at -g &#x27;left join&#x27; /phpstudy/data/slowquery.log</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>按照平均查询输出5行慢查询记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldumpslow -s at -t 5 /phpstudy/data/slowquery.log</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-s   排序方式，可选值有c（记录次数）、t（查询时间）、l（锁定时间）、r（返回记录）、a（平均）</li>\n<li>-t    显示的记录数Spawn failed解决方式</li>\n<li>-g   后面跟正则表达式（如 left join），不区分大小写。</li>\n<li>-r   正序排序，即从小到大排序。</li>\n<li>-d  调试 debug</li>\n<li>-v   查看版本</li>\n</ul>\n<p>按照平均查询时间排序且只显示含有left join的记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldumpslow -s at -g &#x27;left join&#x27; /phpstudy/data/slowquery.log</span><br></pre></td></tr></table></figure>\n"},{"title":"转换成小写字母","comments":1,"abbrlink":4638,"date":"2021-08-22T05:15:12.000Z","translate_title":"algorithm-02","_content":"实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。\n```text\n示例 1：\n输入: \"Hello\"\n输出: \"hello\"\n\n示例2：\n输入: \"LOVELY\"\n输出: \"lovely\"\n```\n### 方法一： ASCCII码\n**解题思路：通过ascii码表操作字符串即可,a和A相差32；**\n- a-z: 97 - 122\n- A-Z: 65 - 90\n- 0-9: 48 - 57\n```java\npublic static String toLowerCase(String str) {\n    if (str == null || str.length() == 0) {\n        return str;\n    }\n    StringBuilder sb = new StringBuilder();\n    for (char ch : str.toCharArray()) {\n        // a-z：97-122  A-Z：65-90  0-9：48-57\n        if (ch >= 'A' && ch <= 'Z') {\n            sb.append((char)(ch + 32));\n        } else {\n            sb.append(ch);\n        }\n    }\n    return sb.toString();\n}\n```\n或者：\n```java\npublic static String toLowerCase(String str) {\n    if (str == null || str.length() == 0) {\n        return str;\n    }\n    char[] ch = str.toCharArray();\n    for (int i = 0; i < str.length(); i++) {\n        if (ch[i] >= 'A' && ch[i] <= 'Z') {\n            ch[i] += 32;\n        }\n    }\n    return String.valueOf(ch);\n}\n```\n\n### 方法二： 位运算\n**解题思路：**\n- 大写变小写、小写变大写：字符 ^= 32;\n- 大写变小写、小写变小写：字符 |= 32;\n- 大写变大写、小写变大写：字符 &= 33;\n\nASCII码表中大写的A是65，小写的a是97，它们的差是32\n65 | 32 转为二进制（按8位来算）可以得到 0100 0001 | 0010 0000 = 0110 0001 = 97 = a\n  \n```java\npublic String toLowerCase(String str) {\n    if (str == null || str.length() == 0) {\n        return str;\n    }\n    char[] ch = str.toCharArray();\n    for (int i = 0; i < str.length(); i++) {\n        ch[i] |= 32;\n    }\n    return String.valueOf(ch);\n}\n```\n\n","source":"_posts/2021/08/algoright-2.md","raw":"---\ntitle: 转换成小写字母\ntags: algorithm\ncategories: 算法\ncomments: true\nabbrlink: 4638\ndate: 2021-08-22 13:15:12\ntranslate_title: algorithm-02\n---\n实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。\n```text\n示例 1：\n输入: \"Hello\"\n输出: \"hello\"\n\n示例2：\n输入: \"LOVELY\"\n输出: \"lovely\"\n```\n### 方法一： ASCCII码\n**解题思路：通过ascii码表操作字符串即可,a和A相差32；**\n- a-z: 97 - 122\n- A-Z: 65 - 90\n- 0-9: 48 - 57\n```java\npublic static String toLowerCase(String str) {\n    if (str == null || str.length() == 0) {\n        return str;\n    }\n    StringBuilder sb = new StringBuilder();\n    for (char ch : str.toCharArray()) {\n        // a-z：97-122  A-Z：65-90  0-9：48-57\n        if (ch >= 'A' && ch <= 'Z') {\n            sb.append((char)(ch + 32));\n        } else {\n            sb.append(ch);\n        }\n    }\n    return sb.toString();\n}\n```\n或者：\n```java\npublic static String toLowerCase(String str) {\n    if (str == null || str.length() == 0) {\n        return str;\n    }\n    char[] ch = str.toCharArray();\n    for (int i = 0; i < str.length(); i++) {\n        if (ch[i] >= 'A' && ch[i] <= 'Z') {\n            ch[i] += 32;\n        }\n    }\n    return String.valueOf(ch);\n}\n```\n\n### 方法二： 位运算\n**解题思路：**\n- 大写变小写、小写变大写：字符 ^= 32;\n- 大写变小写、小写变小写：字符 |= 32;\n- 大写变大写、小写变大写：字符 &= 33;\n\nASCII码表中大写的A是65，小写的a是97，它们的差是32\n65 | 32 转为二进制（按8位来算）可以得到 0100 0001 | 0010 0000 = 0110 0001 = 97 = a\n  \n```java\npublic String toLowerCase(String str) {\n    if (str == null || str.length() == 0) {\n        return str;\n    }\n    char[] ch = str.toCharArray();\n    for (int i = 0; i < str.length(); i++) {\n        ch[i] |= 32;\n    }\n    return String.valueOf(ch);\n}\n```\n\n","slug":"algoright-2","published":1,"updated":"2022-03-27T14:06:03.431Z","layout":"post","photos":[],"link":"","_id":"cl235zcvp000bwjpjf6xnec02","content":"<p>实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例 1：</span><br><span class=\"line\">输入: &quot;Hello&quot;</span><br><span class=\"line\">输出: &quot;hello&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">示例2：</span><br><span class=\"line\">输入: &quot;LOVELY&quot;</span><br><span class=\"line\">输出: &quot;lovely&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法一-asccii码\"><a class=\"markdownIt-Anchor\" href=\"#方法一-asccii码\"></a> 方法一： ASCCII码</h3>\n<p><strong>解题思路：通过ascii码表操作字符串即可,a和A相差32；</strong></p>\n<ul>\n<li>a-z: 97 - 122</li>\n<li>A-Z: 65 - 90</li>\n<li>0-9: 48 - 57</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toLowerCase</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> ch : str.toCharArray()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a-z：97-122  A-Z：65-90  0-9：48-57</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;Z&#x27;</span>) &#123;</span><br><span class=\"line\">            sb.append((<span class=\"keyword\">char</span>)(ch + <span class=\"number\">32</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sb.append(ch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toLowerCase</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] ch = str.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[i] &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; ch[i] &lt;= <span class=\"string\">&#x27;Z&#x27;</span>) &#123;</span><br><span class=\"line\">            ch[i] += <span class=\"number\">32</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> String.valueOf(ch);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二-位运算\"><a class=\"markdownIt-Anchor\" href=\"#方法二-位运算\"></a> 方法二： 位运算</h3>\n<p><strong>解题思路：</strong></p>\n<ul>\n<li>大写变小写、小写变大写：字符 ^= 32;</li>\n<li>大写变小写、小写变小写：字符 |= 32;</li>\n<li>大写变大写、小写变大写：字符 &amp;= 33;</li>\n</ul>\n<p>ASCII码表中大写的A是65，小写的a是97，它们的差是32<br>\n65 | 32 转为二进制（按8位来算）可以得到 0100 0001 | 0010 0000 = 0110 0001 = 97 = a</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toLowerCase</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] ch = str.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class=\"line\">        ch[i] |= <span class=\"number\">32</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> String.valueOf(ch);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例 1：</span><br><span class=\"line\">输入: &quot;Hello&quot;</span><br><span class=\"line\">输出: &quot;hello&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">示例2：</span><br><span class=\"line\">输入: &quot;LOVELY&quot;</span><br><span class=\"line\">输出: &quot;lovely&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法一-asccii码\"><a class=\"markdownIt-Anchor\" href=\"#方法一-asccii码\"></a> 方法一： ASCCII码</h3>\n<p><strong>解题思路：通过ascii码表操作字符串即可,a和A相差32；</strong></p>\n<ul>\n<li>a-z: 97 - 122</li>\n<li>A-Z: 65 - 90</li>\n<li>0-9: 48 - 57</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toLowerCase</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> ch : str.toCharArray()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a-z：97-122  A-Z：65-90  0-9：48-57</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;Z&#x27;</span>) &#123;</span><br><span class=\"line\">            sb.append((<span class=\"keyword\">char</span>)(ch + <span class=\"number\">32</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sb.append(ch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toLowerCase</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] ch = str.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[i] &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; ch[i] &lt;= <span class=\"string\">&#x27;Z&#x27;</span>) &#123;</span><br><span class=\"line\">            ch[i] += <span class=\"number\">32</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> String.valueOf(ch);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二-位运算\"><a class=\"markdownIt-Anchor\" href=\"#方法二-位运算\"></a> 方法二： 位运算</h3>\n<p><strong>解题思路：</strong></p>\n<ul>\n<li>大写变小写、小写变大写：字符 ^= 32;</li>\n<li>大写变小写、小写变小写：字符 |= 32;</li>\n<li>大写变大写、小写变大写：字符 &amp;= 33;</li>\n</ul>\n<p>ASCII码表中大写的A是65，小写的a是97，它们的差是32<br>\n65 | 32 转为二进制（按8位来算）可以得到 0100 0001 | 0010 0000 = 0110 0001 = 97 = a</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toLowerCase</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"keyword\">null</span> || str.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] ch = str.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class=\"line\">        ch[i] |= <span class=\"number\">32</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> String.valueOf(ch);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"mysql行列转置","comments":1,"abbrlink":11308,"date":"2021-08-25T02:36:37.000Z","translate_title":"MySQL-row-column-transpose","_content":"数据表：\n![原始数据](./mysql行列转置/01.png)\n\n行转列结果为：\n![转置后结果](./mysql行列转置/02.png)\n数据库表语句：\n```sql\ncreate table t_score(\n    id int primary key auto_increment,\n    name varchar(20) not null,  #名字\n    Subject varchar(10) not null, #科目\n    Fraction double default 0  #分数\n);\n\nINSERT INTO `t_score`(name,Subject,Fraction) VALUES\n     ('王海', '语文', 86),\n     ('王海', '数学', 83),\n     ('王海', '英语', 93),\n     ('陶俊', '语文', 88),\n     ('陶俊', '数学', 84),\n     ('陶俊', '英语', 94),\n     ('刘可', '语文', 80),\n     ('刘可', '数学', 86),\n     ('刘可', '英语', 88),\n     ('李春', '语文', 89),\n     ('李春', '数学', 80),\n     ('李春', '英语', 87);\n```\n\n1. 方法一：使用if\n    ```sql\n    select \n        name as 名字 ,\n        sum(if(Subject='语文',Fraction,0)) as 语文,\n        sum(if(Subject='数学',Fraction,0))as 数学, \n        sum(if(Subject='英语',Fraction,0))as 英语,\n        round(AVG(Fraction),2) as 平均分,\n        SUM(Fraction) as 总分\n    from t_score group by name\n    -- 如果不用求总分的话，不需要下面的union\n    union(\n        select name as 名字 , sum(语文) Chinese,sum(数学) Math,sum(英语) English,round(AVG(总分),2)as 平均分,sum(总分) score  from(\n            select 'TOTAL' as name,\n            sum(if(Subject='语文',Fraction,0)) as 语文,\n            sum(if(Subject='数学',Fraction,0))as 数学, \n            sum(if(Subject='英语',Fraction,0))as 英语,\n            SUM(Fraction) as 总分\n            from t_score group by Subject \n        )t GROUP BY t.`name`\n    )\n    ```\n2. 方法二：使用case\n    ```sql\n        select name as name,\n        sum(case when Subject = '语文' then Fraction end) as Chinese,\n        sum(case when Subject = '数学' then Fraction end) as Math,\n        sum(case when Subject = '英语' then Fraction end) as English,\n        sum(fraction)as score\n        from t_score group by name\n        -- 如果不用求总分的话，不需要下面的union\n        UNION ALL\n        (\n            select name as Name,sum(Chinese) as Chinese,sum(Math) as Math,sum(English) as English,sum(score) as score from(\n            select 'TOTAL' as name,\n            sum(case when Subject = '语文' then Fraction end) as Chinese,\n            sum(case when Subject = '数学' then Fraction end) as Math,\n            sum(case when Subject = '英语' then Fraction end) as English,\n            sum(fraction)as score\n            from t_score group by Subject,name)t GROUP BY t.`name`\n        )\n    ```\n3. 方法三：使用with rollup\n   在group分组字段的基础上在进行统计数据；\n    ```sql\n    select\n        -- coalesce(name,'TOTAL') name,\n        ifnull(name,'TOTAL') name,\n        sum(if(Subject='语文',Fraction,0)) as 语文,\n        sum(if(Subject='英语',Fraction,0)) as 英语,\n        sum(if(Subject='数学',Fraction,0))as 数学,\n        sum(Fraction) 总分\n    from t_score group by name with rollup\n    ```\n    \n   \n\n","source":"_posts/2021/08/mysql行列转置.md","raw":"---\ntitle: mysql行列转置\ncomments: true\ntags: mysql\ncategories: mysql\nabbrlink: 11308\ndate: 2021-08-25 10:36:37\ntranslate_title: MySQL-row-column-transpose\n---\n数据表：\n![原始数据](./mysql行列转置/01.png)\n\n行转列结果为：\n![转置后结果](./mysql行列转置/02.png)\n数据库表语句：\n```sql\ncreate table t_score(\n    id int primary key auto_increment,\n    name varchar(20) not null,  #名字\n    Subject varchar(10) not null, #科目\n    Fraction double default 0  #分数\n);\n\nINSERT INTO `t_score`(name,Subject,Fraction) VALUES\n     ('王海', '语文', 86),\n     ('王海', '数学', 83),\n     ('王海', '英语', 93),\n     ('陶俊', '语文', 88),\n     ('陶俊', '数学', 84),\n     ('陶俊', '英语', 94),\n     ('刘可', '语文', 80),\n     ('刘可', '数学', 86),\n     ('刘可', '英语', 88),\n     ('李春', '语文', 89),\n     ('李春', '数学', 80),\n     ('李春', '英语', 87);\n```\n\n1. 方法一：使用if\n    ```sql\n    select \n        name as 名字 ,\n        sum(if(Subject='语文',Fraction,0)) as 语文,\n        sum(if(Subject='数学',Fraction,0))as 数学, \n        sum(if(Subject='英语',Fraction,0))as 英语,\n        round(AVG(Fraction),2) as 平均分,\n        SUM(Fraction) as 总分\n    from t_score group by name\n    -- 如果不用求总分的话，不需要下面的union\n    union(\n        select name as 名字 , sum(语文) Chinese,sum(数学) Math,sum(英语) English,round(AVG(总分),2)as 平均分,sum(总分) score  from(\n            select 'TOTAL' as name,\n            sum(if(Subject='语文',Fraction,0)) as 语文,\n            sum(if(Subject='数学',Fraction,0))as 数学, \n            sum(if(Subject='英语',Fraction,0))as 英语,\n            SUM(Fraction) as 总分\n            from t_score group by Subject \n        )t GROUP BY t.`name`\n    )\n    ```\n2. 方法二：使用case\n    ```sql\n        select name as name,\n        sum(case when Subject = '语文' then Fraction end) as Chinese,\n        sum(case when Subject = '数学' then Fraction end) as Math,\n        sum(case when Subject = '英语' then Fraction end) as English,\n        sum(fraction)as score\n        from t_score group by name\n        -- 如果不用求总分的话，不需要下面的union\n        UNION ALL\n        (\n            select name as Name,sum(Chinese) as Chinese,sum(Math) as Math,sum(English) as English,sum(score) as score from(\n            select 'TOTAL' as name,\n            sum(case when Subject = '语文' then Fraction end) as Chinese,\n            sum(case when Subject = '数学' then Fraction end) as Math,\n            sum(case when Subject = '英语' then Fraction end) as English,\n            sum(fraction)as score\n            from t_score group by Subject,name)t GROUP BY t.`name`\n        )\n    ```\n3. 方法三：使用with rollup\n   在group分组字段的基础上在进行统计数据；\n    ```sql\n    select\n        -- coalesce(name,'TOTAL') name,\n        ifnull(name,'TOTAL') name,\n        sum(if(Subject='语文',Fraction,0)) as 语文,\n        sum(if(Subject='英语',Fraction,0)) as 英语,\n        sum(if(Subject='数学',Fraction,0))as 数学,\n        sum(Fraction) 总分\n    from t_score group by name with rollup\n    ```\n    \n   \n\n","slug":"mysql行列转置","published":1,"updated":"2022-04-06T09:51:44.953Z","layout":"post","photos":[],"link":"","_id":"cl235zcvs000gwjpj3vhjhr0k","content":"<p>数据表：<br>\n<img src=\"/mysql%E8%A1%8C%E5%88%97%E8%BD%AC%E7%BD%AE/01.png\" alt=\"原始数据\"></p>\n<p>行转列结果为：<br>\n<img src=\"/mysql%E8%A1%8C%E5%88%97%E8%BD%AC%E7%BD%AE/02.png\" alt=\"转置后结果\"><br>\n数据库表语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_score(</span><br><span class=\"line\">    id <span class=\"type\">int</span> <span class=\"keyword\">primary</span> key auto_increment,</span><br><span class=\"line\">    name <span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,  #名字</span><br><span class=\"line\">    Subject <span class=\"type\">varchar</span>(<span class=\"number\">10</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>, #科目</span><br><span class=\"line\">    Fraction <span class=\"keyword\">double</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>  #分数</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `t_score`(name,Subject,Fraction) <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">     (<span class=\"string\">&#x27;王海&#x27;</span>, <span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"number\">86</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;王海&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"number\">83</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;王海&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"number\">93</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;陶俊&#x27;</span>, <span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"number\">88</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;陶俊&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"number\">84</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;陶俊&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"number\">94</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;刘可&#x27;</span>, <span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"number\">80</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;刘可&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"number\">86</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;刘可&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"number\">88</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;李春&#x27;</span>, <span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"number\">89</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;李春&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"number\">80</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;李春&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"number\">87</span>);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>方法一：使用if <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">    name <span class=\"keyword\">as</span> 名字 ,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;语文&#x27;</span>,Fraction,<span class=\"number\">0</span>)) <span class=\"keyword\">as</span> 语文,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;数学&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 数学, </span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;英语&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 英语,</span><br><span class=\"line\">    round(<span class=\"built_in\">AVG</span>(Fraction),<span class=\"number\">2</span>) <span class=\"keyword\">as</span> 平均分,</span><br><span class=\"line\">    <span class=\"built_in\">SUM</span>(Fraction) <span class=\"keyword\">as</span> 总分</span><br><span class=\"line\"><span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name</span><br><span class=\"line\"><span class=\"comment\">-- 如果不用求总分的话，不需要下面的union</span></span><br><span class=\"line\"><span class=\"keyword\">union</span>(</span><br><span class=\"line\">    <span class=\"keyword\">select</span> name <span class=\"keyword\">as</span> 名字 , <span class=\"built_in\">sum</span>(语文) Chinese,<span class=\"built_in\">sum</span>(数学) Math,<span class=\"built_in\">sum</span>(英语) English,round(<span class=\"built_in\">AVG</span>(总分),<span class=\"number\">2</span>)<span class=\"keyword\">as</span> 平均分,<span class=\"built_in\">sum</span>(总分) score  <span class=\"keyword\">from</span>(</span><br><span class=\"line\">        <span class=\"keyword\">select</span> <span class=\"string\">&#x27;TOTAL&#x27;</span> <span class=\"keyword\">as</span> name,</span><br><span class=\"line\">        <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;语文&#x27;</span>,Fraction,<span class=\"number\">0</span>)) <span class=\"keyword\">as</span> 语文,</span><br><span class=\"line\">        <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;数学&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 数学, </span><br><span class=\"line\">        <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;英语&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 英语,</span><br><span class=\"line\">        <span class=\"built_in\">SUM</span>(Fraction) <span class=\"keyword\">as</span> 总分</span><br><span class=\"line\">        <span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> Subject </span><br><span class=\"line\">    )t <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> t.`name`</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li>方法二：使用case <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> name <span class=\"keyword\">as</span> name,</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;语文&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> Chinese,</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;数学&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> Math,</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;英语&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> English,</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(fraction)<span class=\"keyword\">as</span> score</span><br><span class=\"line\"><span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name</span><br><span class=\"line\"><span class=\"comment\">-- 如果不用求总分的话，不需要下面的union</span></span><br><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">select</span> name <span class=\"keyword\">as</span> Name,<span class=\"built_in\">sum</span>(Chinese) <span class=\"keyword\">as</span> Chinese,<span class=\"built_in\">sum</span>(Math) <span class=\"keyword\">as</span> Math,<span class=\"built_in\">sum</span>(English) <span class=\"keyword\">as</span> English,<span class=\"built_in\">sum</span>(score) <span class=\"keyword\">as</span> score <span class=\"keyword\">from</span>(</span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"string\">&#x27;TOTAL&#x27;</span> <span class=\"keyword\">as</span> name,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;语文&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> Chinese,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;数学&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> Math,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;英语&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> English,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(fraction)<span class=\"keyword\">as</span> score</span><br><span class=\"line\">    <span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> Subject,name)t <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> t.`name`</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li>方法三：使用with rollup<br>\n在group分组字段的基础上在进行统计数据； <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">    <span class=\"comment\">-- coalesce(name,&#x27;TOTAL&#x27;) name,</span></span><br><span class=\"line\">    ifnull(name,<span class=\"string\">&#x27;TOTAL&#x27;</span>) name,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;语文&#x27;</span>,Fraction,<span class=\"number\">0</span>)) <span class=\"keyword\">as</span> 语文,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;英语&#x27;</span>,Fraction,<span class=\"number\">0</span>)) <span class=\"keyword\">as</span> 英语,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;数学&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 数学,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(Fraction) 总分</span><br><span class=\"line\"><span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name <span class=\"keyword\">with</span> <span class=\"keyword\">rollup</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>数据表：<br>\n<img src=\"/mysql%E8%A1%8C%E5%88%97%E8%BD%AC%E7%BD%AE/01.png\" alt=\"原始数据\"></p>\n<p>行转列结果为：<br>\n<img src=\"/mysql%E8%A1%8C%E5%88%97%E8%BD%AC%E7%BD%AE/02.png\" alt=\"转置后结果\"><br>\n数据库表语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_score(</span><br><span class=\"line\">    id <span class=\"type\">int</span> <span class=\"keyword\">primary</span> key auto_increment,</span><br><span class=\"line\">    name <span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,  #名字</span><br><span class=\"line\">    Subject <span class=\"type\">varchar</span>(<span class=\"number\">10</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>, #科目</span><br><span class=\"line\">    Fraction <span class=\"keyword\">double</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>  #分数</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `t_score`(name,Subject,Fraction) <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">     (<span class=\"string\">&#x27;王海&#x27;</span>, <span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"number\">86</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;王海&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"number\">83</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;王海&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"number\">93</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;陶俊&#x27;</span>, <span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"number\">88</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;陶俊&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"number\">84</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;陶俊&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"number\">94</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;刘可&#x27;</span>, <span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"number\">80</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;刘可&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"number\">86</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;刘可&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"number\">88</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;李春&#x27;</span>, <span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"number\">89</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;李春&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"number\">80</span>),</span><br><span class=\"line\">     (<span class=\"string\">&#x27;李春&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"number\">87</span>);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>方法一：使用if <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">    name <span class=\"keyword\">as</span> 名字 ,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;语文&#x27;</span>,Fraction,<span class=\"number\">0</span>)) <span class=\"keyword\">as</span> 语文,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;数学&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 数学, </span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;英语&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 英语,</span><br><span class=\"line\">    round(<span class=\"built_in\">AVG</span>(Fraction),<span class=\"number\">2</span>) <span class=\"keyword\">as</span> 平均分,</span><br><span class=\"line\">    <span class=\"built_in\">SUM</span>(Fraction) <span class=\"keyword\">as</span> 总分</span><br><span class=\"line\"><span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name</span><br><span class=\"line\"><span class=\"comment\">-- 如果不用求总分的话，不需要下面的union</span></span><br><span class=\"line\"><span class=\"keyword\">union</span>(</span><br><span class=\"line\">    <span class=\"keyword\">select</span> name <span class=\"keyword\">as</span> 名字 , <span class=\"built_in\">sum</span>(语文) Chinese,<span class=\"built_in\">sum</span>(数学) Math,<span class=\"built_in\">sum</span>(英语) English,round(<span class=\"built_in\">AVG</span>(总分),<span class=\"number\">2</span>)<span class=\"keyword\">as</span> 平均分,<span class=\"built_in\">sum</span>(总分) score  <span class=\"keyword\">from</span>(</span><br><span class=\"line\">        <span class=\"keyword\">select</span> <span class=\"string\">&#x27;TOTAL&#x27;</span> <span class=\"keyword\">as</span> name,</span><br><span class=\"line\">        <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;语文&#x27;</span>,Fraction,<span class=\"number\">0</span>)) <span class=\"keyword\">as</span> 语文,</span><br><span class=\"line\">        <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;数学&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 数学, </span><br><span class=\"line\">        <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;英语&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 英语,</span><br><span class=\"line\">        <span class=\"built_in\">SUM</span>(Fraction) <span class=\"keyword\">as</span> 总分</span><br><span class=\"line\">        <span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> Subject </span><br><span class=\"line\">    )t <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> t.`name`</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li>方法二：使用case <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> name <span class=\"keyword\">as</span> name,</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;语文&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> Chinese,</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;数学&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> Math,</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;英语&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> English,</span><br><span class=\"line\"><span class=\"built_in\">sum</span>(fraction)<span class=\"keyword\">as</span> score</span><br><span class=\"line\"><span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name</span><br><span class=\"line\"><span class=\"comment\">-- 如果不用求总分的话，不需要下面的union</span></span><br><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">select</span> name <span class=\"keyword\">as</span> Name,<span class=\"built_in\">sum</span>(Chinese) <span class=\"keyword\">as</span> Chinese,<span class=\"built_in\">sum</span>(Math) <span class=\"keyword\">as</span> Math,<span class=\"built_in\">sum</span>(English) <span class=\"keyword\">as</span> English,<span class=\"built_in\">sum</span>(score) <span class=\"keyword\">as</span> score <span class=\"keyword\">from</span>(</span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"string\">&#x27;TOTAL&#x27;</span> <span class=\"keyword\">as</span> name,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;语文&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> Chinese,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;数学&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> Math,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> Subject <span class=\"operator\">=</span> <span class=\"string\">&#x27;英语&#x27;</span> <span class=\"keyword\">then</span> Fraction <span class=\"keyword\">end</span>) <span class=\"keyword\">as</span> English,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(fraction)<span class=\"keyword\">as</span> score</span><br><span class=\"line\">    <span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> Subject,name)t <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> t.`name`</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li>方法三：使用with rollup<br>\n在group分组字段的基础上在进行统计数据； <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">    <span class=\"comment\">-- coalesce(name,&#x27;TOTAL&#x27;) name,</span></span><br><span class=\"line\">    ifnull(name,<span class=\"string\">&#x27;TOTAL&#x27;</span>) name,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;语文&#x27;</span>,Fraction,<span class=\"number\">0</span>)) <span class=\"keyword\">as</span> 语文,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;英语&#x27;</span>,Fraction,<span class=\"number\">0</span>)) <span class=\"keyword\">as</span> 英语,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(if(Subject<span class=\"operator\">=</span><span class=\"string\">&#x27;数学&#x27;</span>,Fraction,<span class=\"number\">0</span>))<span class=\"keyword\">as</span> 数学,</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(Fraction) 总分</span><br><span class=\"line\"><span class=\"keyword\">from</span> t_score <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> name <span class=\"keyword\">with</span> <span class=\"keyword\">rollup</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Linux安装JDK以及配置","comments":1,"translate_title":"nginx-install","abbrlink":40446,"date":"2021-06-29T01:02:34.000Z","_content":"\n### 1. 安装包安装\n1. 下载jdk安装包（https://www.oracle.com/cn/java/technologies/javase/downloads/#java8）\n    ![](./jdk-install/1.png)\n\n2. 上传并解压\n- 在/usr/local/目录下新建文件夹：java\n- 上传介质到/usr/local/java/\n- 解压：tar -zxvf jdk-8u311-linux-x64.tar.gz\n3. 配置环境变量\n    ```shell\n    # 编辑配置文件\n    vim /etc/profile\n    \n    # 在末尾追加\n    export JAVA_HOME=/usr/local/java/jdk1.8.0_311\n    export JRE_HOME=/usr/local/java/jdk1.8.0_311/jre\n    export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH\n    export PATH=$JAVA_HOME/bin:$PATH\n    \n    # 使配置文件生效\n    source /etc/profile\n    ```\n4. 测试\n    ```shell\n    # 测试版本号\n    java -version\n    \n    # 返回\n    java version \"1.8.0_311\"\n    Java(TM) SE Runtime Environment (build 1.8.0_311-b10)\n    Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)\n    \n    # 查询JAVA_HOME\n    echo $JAVA_HOME\n    \n    # 返回\n    /usr/local/java/jdk1.8.0_311\n    ```\n   \n\n## 2. yum源安装\n```shell\n    # 检查是否已经存在java相关命令\n    rpm -qa|grep java\n    rpm -qa|grep jdk\n    rpm -qa|grep gcj\n    \n    # 如果需要卸载\n    rpm -qa | grep java | xargs rpm -e --nodeps\n    \n    # 检索Java1.8源列表\n    yum list java-1.8*\n    \n    # 安装Java1.8\n    yum install java-1.8.0-openjdk* -y\n    \n    # 查询JAVA_HOME\n    which java\n    \n    # 返回\n    /usr/bin/java\n    \n    # ls -l命令\n    ls -l /usr/bin/java\n    \n    # 返回\n    lrwxrwxrwx 1 root root 22 Nov 13 14:37 /usr/bin/java -> /etc/alternatives/java\n    \n    # ls -l命令\n    ls -l /etc/alternatives/java\n    \n    # 返回\n    lrwxrwxrwx 1 root root 73 Nov 13 14:37 /etc/alternatives/java -> /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64/jre/bin/java\n    \n    # 则JAVA_HOME路径为：/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64\n```\n","source":"_posts/2021/06/jdk-install.md","raw":"---\ntitle: Linux安装JDK以及配置\ncomments: true\ntags: jdk\ncategories: linux\ntranslate_title: nginx-install\nabbrlink: 40446\ndate: 2021-06-29 09:02:34\n---\n\n### 1. 安装包安装\n1. 下载jdk安装包（https://www.oracle.com/cn/java/technologies/javase/downloads/#java8）\n    ![](./jdk-install/1.png)\n\n2. 上传并解压\n- 在/usr/local/目录下新建文件夹：java\n- 上传介质到/usr/local/java/\n- 解压：tar -zxvf jdk-8u311-linux-x64.tar.gz\n3. 配置环境变量\n    ```shell\n    # 编辑配置文件\n    vim /etc/profile\n    \n    # 在末尾追加\n    export JAVA_HOME=/usr/local/java/jdk1.8.0_311\n    export JRE_HOME=/usr/local/java/jdk1.8.0_311/jre\n    export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH\n    export PATH=$JAVA_HOME/bin:$PATH\n    \n    # 使配置文件生效\n    source /etc/profile\n    ```\n4. 测试\n    ```shell\n    # 测试版本号\n    java -version\n    \n    # 返回\n    java version \"1.8.0_311\"\n    Java(TM) SE Runtime Environment (build 1.8.0_311-b10)\n    Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)\n    \n    # 查询JAVA_HOME\n    echo $JAVA_HOME\n    \n    # 返回\n    /usr/local/java/jdk1.8.0_311\n    ```\n   \n\n## 2. yum源安装\n```shell\n    # 检查是否已经存在java相关命令\n    rpm -qa|grep java\n    rpm -qa|grep jdk\n    rpm -qa|grep gcj\n    \n    # 如果需要卸载\n    rpm -qa | grep java | xargs rpm -e --nodeps\n    \n    # 检索Java1.8源列表\n    yum list java-1.8*\n    \n    # 安装Java1.8\n    yum install java-1.8.0-openjdk* -y\n    \n    # 查询JAVA_HOME\n    which java\n    \n    # 返回\n    /usr/bin/java\n    \n    # ls -l命令\n    ls -l /usr/bin/java\n    \n    # 返回\n    lrwxrwxrwx 1 root root 22 Nov 13 14:37 /usr/bin/java -> /etc/alternatives/java\n    \n    # ls -l命令\n    ls -l /etc/alternatives/java\n    \n    # 返回\n    lrwxrwxrwx 1 root root 73 Nov 13 14:37 /etc/alternatives/java -> /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64/jre/bin/java\n    \n    # 则JAVA_HOME路径为：/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64\n```\n","slug":"jdk-install","published":1,"updated":"2022-03-29T06:27:44.644Z","layout":"post","photos":[],"link":"","_id":"cl235zcvt000iwjpj21pjcju9","content":"<h3 id=\"1-安装包安装\"><a class=\"markdownIt-Anchor\" href=\"#1-安装包安装\"></a> 1. 安装包安装</h3>\n<ol>\n<li>\n<p>下载jdk安装包（<a href=\"https://www.oracle.com/cn/java/technologies/javase/downloads/#java8%EF%BC%89\">https://www.oracle.com/cn/java/technologies/javase/downloads/#java8）</a><br>\n<img src=\"/jdk-install/1.png\" alt></p>\n</li>\n<li>\n<p>上传并解压</p>\n</li>\n</ol>\n<ul>\n<li>在/usr/local/目录下新建文件夹：java</li>\n<li>上传介质到/usr/local/java/</li>\n<li>解压：tar -zxvf jdk-8u311-linux-x64.tar.gz</li>\n</ul>\n<ol start=\"3\">\n<li>配置环境变量 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 编辑配置文件</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在末尾追加</span></span><br><span class=\"line\">export JAVA_HOME=/usr/local/java/jdk1.8.0_311</span><br><span class=\"line\">export JRE_HOME=/usr/local/java/jdk1.8.0_311/jre</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使配置文件生效</span></span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li>测试 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试版本号</span></span><br><span class=\"line\">java -version</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">java version &quot;1.8.0_311&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_311-b10)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查询JAVA_HOME</span></span><br><span class=\"line\">echo $JAVA_HOME</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">/usr/local/java/jdk1.8.0_311</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"2-yum源安装\"><a class=\"markdownIt-Anchor\" href=\"#2-yum源安装\"></a> 2. yum源安装</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 检查是否已经存在java相关命令</span></span><br><span class=\"line\">rpm -qa|grep java</span><br><span class=\"line\">rpm -qa|grep jdk</span><br><span class=\"line\">rpm -qa|grep gcj</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果需要卸载</span></span><br><span class=\"line\">rpm -qa | grep java | xargs rpm -e --nodeps</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 检索Java1.8源列表</span></span><br><span class=\"line\">yum list java-1.8*</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装Java1.8</span></span><br><span class=\"line\">yum install java-1.8.0-openjdk* -y</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查询JAVA_HOME</span></span><br><span class=\"line\">which java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">/usr/bin/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls -l命令</span></span><br><span class=\"line\">ls -l /usr/bin/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">lrwxrwxrwx 1 root root 22 Nov 13 14:37 /usr/bin/java -&gt; /etc/alternatives/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls -l命令</span></span><br><span class=\"line\">ls -l /etc/alternatives/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">lrwxrwxrwx 1 root root 73 Nov 13 14:37 /etc/alternatives/java -&gt; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64/jre/bin/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 则JAVA_HOME路径为：/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"1-安装包安装\"><a class=\"markdownIt-Anchor\" href=\"#1-安装包安装\"></a> 1. 安装包安装</h3>\n<ol>\n<li>\n<p>下载jdk安装包（<a href=\"https://www.oracle.com/cn/java/technologies/javase/downloads/#java8%EF%BC%89\">https://www.oracle.com/cn/java/technologies/javase/downloads/#java8）</a><br>\n<img src=\"/jdk-install/1.png\" alt></p>\n</li>\n<li>\n<p>上传并解压</p>\n</li>\n</ol>\n<ul>\n<li>在/usr/local/目录下新建文件夹：java</li>\n<li>上传介质到/usr/local/java/</li>\n<li>解压：tar -zxvf jdk-8u311-linux-x64.tar.gz</li>\n</ul>\n<ol start=\"3\">\n<li>配置环境变量 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 编辑配置文件</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在末尾追加</span></span><br><span class=\"line\">export JAVA_HOME=/usr/local/java/jdk1.8.0_311</span><br><span class=\"line\">export JRE_HOME=/usr/local/java/jdk1.8.0_311/jre</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使配置文件生效</span></span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li>测试 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试版本号</span></span><br><span class=\"line\">java -version</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">java version &quot;1.8.0_311&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_311-b10)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查询JAVA_HOME</span></span><br><span class=\"line\">echo $JAVA_HOME</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">/usr/local/java/jdk1.8.0_311</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"2-yum源安装\"><a class=\"markdownIt-Anchor\" href=\"#2-yum源安装\"></a> 2. yum源安装</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 检查是否已经存在java相关命令</span></span><br><span class=\"line\">rpm -qa|grep java</span><br><span class=\"line\">rpm -qa|grep jdk</span><br><span class=\"line\">rpm -qa|grep gcj</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果需要卸载</span></span><br><span class=\"line\">rpm -qa | grep java | xargs rpm -e --nodeps</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 检索Java1.8源列表</span></span><br><span class=\"line\">yum list java-1.8*</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装Java1.8</span></span><br><span class=\"line\">yum install java-1.8.0-openjdk* -y</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查询JAVA_HOME</span></span><br><span class=\"line\">which java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">/usr/bin/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls -l命令</span></span><br><span class=\"line\">ls -l /usr/bin/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">lrwxrwxrwx 1 root root 22 Nov 13 14:37 /usr/bin/java -&gt; /etc/alternatives/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls -l命令</span></span><br><span class=\"line\">ls -l /etc/alternatives/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回</span></span><br><span class=\"line\">lrwxrwxrwx 1 root root 73 Nov 13 14:37 /etc/alternatives/java -&gt; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64/jre/bin/java</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 则JAVA_HOME路径为：/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Linux安装mysql8","comments":1,"translate_title":"nginx-install","abbrlink":3212,"date":"2021-06-29T06:40:08.000Z","_content":"### 1. 下载\n- 下载地址：https://downloads.mysql.com/archives/community/\n- 百度网盘链接: https://pan.baidu.com/s/1BkOuYlz2Ef7KRe9gikDUCg  密码: 0l15\n- Linux镜像下载\n    ```shell\n      cd /usr/local/src/\n      wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.27-linux-glibc2.12-x86_64.tar.gz\n    ```\n  \n### 2.卸载mariadb\n```shell\n#查看mariadb 的安装包\nrpm -qa | grep mariadb\n\n#卸载 mariadb\nrpm -e mariadb-libs-5.5.68-1.el7.x86_64 --nodeps\n\n#卸载验证\nrpm -qa | grep mariadb\n```\n\n### 3.安装\n1. 解压安装包\n    ```shell\n    # 进入下载目录\n    cd /usr/local/src/\n   \n   #解压， 如果是.tar则用 tar -zxvf解压， 我下载的是.tar.xz包，使用的是tar -xvJf\n    tar -xvJf mysql-8.0.28-linux-glibc2.17-x86_64-minimal.tar.xz\n   \n   # 移动解压后的文件夹至/usr/local\n    mv /usr/local/src/mysql-8.0.28-linux-glibc2.17-x86_64-minimal /usr/local/\n    cd /usr/local/\n   \n    # 重命名\n    mv ./mysql-8.0.28-linux-glibc2.17-x86_64-minimal mysql8.0\n   \n    # 创建文件夹data,存储文件;\n    cd /usr/local/mysql8.0/\n    mkdir ./data\n    ```\n   \n2. 创建用户以及用户组\n    ```shell\n    # 用户组\n    groupadd mysql\n    # 用户 （用户名/密码）\n    useradd -g mysql mysql\n    ```\n   \n3. 授权\n    ```shell\n    chown -R mysql.mysql /usr/local/mysql8.0/ \n    #或\n    chown -R mysql .\n    chgrp -R mysql .\n    ```\n   \n4. 初始化数据库\n    ```shell\n    # 查看当前所在目录\n    pwd # 若显示/usr/local/mysql-8.0,请继续执行，否则请先进入此目录/usr/local/mysql-8.0\n    # 初始化 注意查看是否存在相关目录,若不存在,请新建\n    ./bin/mysqld --user=mysql --basedir=/usr/local/mysql8.0/ --datadir=/usr/local/mysql8.0/data/ --initialize ; # 亲测\n    #或\n    ./bin/mysql --user=mysql --basedir=/usr/local/mysql8.0/ --datadir=/usr/local/mysql8.0/data/ --initialize ;\n   \n    #如果出现错误：./bin/mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory\n    yum install -y libaio  #安装后在初始化就OK了\n    ```\n   ![](./mysql-install/3.png)\n    注意：后面白色高亮选中的是初始密码！！！！\n   \n5. 配置my.cnf\n    ```shell\n    cp /usr/local/mysql8.0/support-files/mysql.server /etc/init.d/mysqld\n    vim /etc/my.cnf\n    ```\n   在配置中键入如下内容：\n    ```properties\n       [mysqld]\n      port=3306\n      # 设置mysql的安装目录\n      basedir=/usr/local/mysql8\n      # 设置mysql数据库的数据的存放目录\n      datadir=/usr/local/mysql8/mysqldb\n      # 允许最大连接数\n      max_connections=1000\n      # 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统\n      max_connect_errors=100\n      # 服务端使用的字符集默认为UTF8\n      character-set-server=utf8mb4\n      # 创建新表时将使用的默认存储引擎\n      default-storage-engine=INNODB\n      # 默认使用“mysql_native_password”插件认证\n      default_authentication_plugin=mysql_native_password\n      #是否对sql语句大小写敏感，1表示不敏感\n      lower_case_table_names = 1\n      #MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭\n      #MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效\n      interactive_timeout = 1800\n      wait_timeout = 1800\n      #Metadata Lock最大时长（秒）， 一般用于控制 alter操作的最大时长sine mysql5.6\n      #执行 DML操作时除了增加innodb事务锁外还增加Metadata Lock，其他alter（DDL）session将阻塞\n      lock_wait_timeout = 3600\n      #内部内存临时表的最大值。\n      #比如大数据量的group by ,order by时可能用到临时表，\n      #超过了这个值将写入磁盘，系统IO压力增大\n      tmp_table_size = 64M\n      max_heap_table_size = 64M\n      [mysql]\n      # 设置mysql客户端默认字符集\n      default-character-set=utf8mb4\n      [client]\n      # 设置mysql客户端连接服务端时默认使用的端口\n      port=3306\n      default-character-set=utf8mb4\n    ```\n\n6. 建立Mysql服务\n    ```shell\n    cp -a ./support-files/mysql.server /etc/init.d/mysql\n    chmod +x /etc/init.d/mysql\n    chkconfig --add mysql\n    chkconfig --list mysql\n    ```\n   ![](./mysql-install/4.png)\n\n7. 启动Mysql服务\n    ```shell\n    # 启动\n    service mysql start;\n    # 查看启动状态\n    service mysql status;\n    ```\n   如果提示： -bash: mysql: command not found\n    ```shell\n    ln -s /usr/local/mysql8.0/bin/mysql /usr/bin\n   ```\n   \n8. 登录Mysql\n    ```shell\n    mysql -uroot -p\n    # 输入\"初始化数据库\"操作时的\"临时密码\"\n    ```\n   ![](./mysql-install/5.png)\n\n    修改密码：\n    ```shell\n    ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '新密码';\n    ```\n   \n9. 远程连接\n    1. 在my.cnf的mysqld下增加\n        ```properties\n        default_authentication_plugin=mysql_native_password\n        ```\n    2. 进入mysql命令行\n        ```mysql\n        use mysql\n        update user set host ='%' where user='root';\n        ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'root';\n        FLUSH PRIVILEGES;\n        ```\n       ![](./mysql-install/7.png)\n   \n10. 检查端口\n    ```shell\n    #检查3306端口是否开放\n    netstat -nupl|grep 3306\n    \n    #开放3306端口\n    firewall -cmd --permanent --add-prot=3306/tcp\n    \n    #重启防火墙\n    firewall -cmd --reload\n    ```\n\n### 4. 常见问题\n1. The server quit without updating PID file\n   \n    - 第一，权限的问题，在出这个错误的时候，我所说的权限是mysq.cnf和所定义的mysql数据库存放目录的权限，要保证是mysql用户的权限，如果启动mysql还有问题，那么需要考虑提高权限了。\n    说人话， 数据库存放目录必须是mysql这个用户的属组(通常的，安装MySQL的时候建立的用户为mysql，不建议使用别的用户），mysql的启动脚本必须有执行权限。赋予权限的命令为：chown -R mysql. /usr/local/mysql,假设我的mysql是安装在  /usr/local/mysql目录，数据库存放目录为 /usr/local/mysql/data/\n    - 第二，进程中有mysql的进程，上次的退出并没有自动结束该pid，导致新的进程无法启动，毕竟，mysql每次启动系统只会给分配一个pid号，再启动，系统也不可能给你分配pid号了。运行命令 ps -ef |grep mysql  找到mysql的进程结束它，然后在启动mysql。\n    - 第三，进入mysql数据库的存放目录，如果有mysql-bin.index这样的文件，删除它，在启动mysql，该文件产生的原因不详，不过删除必定没影响，或者另一个binlog.index也删除，两个index后缀的都删除也可以。\n    - 第四，my.cnf 这个配置文件内容不对，检查有没有skip-federated这个字段，如果有注释或者删除。\n    检查是否定义了数据库存放目录，如果没有定义，请立刻定义。\n    - 第五，错误日志目录不存在解决方法：使用“chown” “chmod”命令赋予mysql目录所有者及权限。\n    - 第六，my.cnf文件内存在lower_case_table_names=1 字段，注释掉它。（这个选项是1表示不区分大小写）。具体原因不详。\n    \n    总结：mysql说好安装也好安装，说难也难，难点在于权限的配置，给高了不安全，给低了有可能启动出问题，如果启动出问题了，首先第一件事就是检查目录权限，第二就是检查my.cnf这个配置文件，skip-federated，lower_case_table_names=1 ，这样的字段注释掉，第三，清除旧的mysql进程，如果有就清除掉，旧的不去新的不来，就这么一个道理。第四，进入mysql数据库存放目录删除index后缀的文件。下面，给张图，详细的权限慢慢体会\n    ```shell\n    ls -al /etc/init.d/mysql\n   ```\n   \n2. Can 't connect to local MySQL server through socket '/tmp/mysql.sock\n \n\n    连接localhost通常通过一个Unix域套接字文件进行，一般是/tmp/mysql.sock。如果套接字文件被删除了，本地客户就不能连接。这可能发生在你的系统运行一个cron任务删除了/tmp下的临时文件。\n    如果你因为丢失套接字文件而不能连接，你可以简单地通过重启服务器重新创建得到它。因为服务器在启动时重新创建它。\n    如果和我一样，重启服务器还是没有任何变化，你可以先执行下面的语句\n   ```shell\n   mysql -uroot -h 127.0.0.1 -p\n   ```\n   解决方式：\n   ```shell\n    sudo mkdir /var/run/mysqld/\n    sudo ln -s /tmp/mysql.sock /var/run/mysqld/mysqld.sock\n   ```\n3. however file don't exists. Create writable for user 'mysql'\n    问题描述：\n    ```text\n    [root@test2 my57_3307]# /usr/local/mysql57/bin/mysqld_safe  --defaults-file=/dbdata/mysql/my57_3307/my57_3307.cnf  --ledir=/usr/local/mysql57/bin\n    2018-08-26T14:12:45.459798Z mysqld_safe error: log-error set to '/var/log/mysqld/my57_3307.log', however file don't exists. Create writable for user 'mysql'.\n   ```\n   解决方式：\n    ```text\n    touch /usr/local/mysql8.0/log/error.log\n    chown mysql /usr/local/mysql8.0/log/error.log\n    /usr/local/mysql8.0/bin/mysqld_safe  --defaults-file=/etc/my.cnf  --ledir=/usr/local/mysql8.0/bin\n   ```\n   \n4. cannot open shared object file: No such file or directory\n    \n    ```shell\n    #需要安装 libnuma\n    yum install libnuma\n    yum -y install  numactl\n    yum install libaio1 libaio-dev\n    ```\n   \n5. mysqld启动报错Failed to find valid data directory\n\n   ```shell\n   vim /etc/my.cnf #查看datadir配置项的路径，然后一般是/var/lib/mysql，将这个文件夹删掉，然后重新初始化\n   \n   /usr/local/mysql8/bin/mysqld --initialize --user=mysql\n   \n   #如果mysqld启动服务时提示不能用root启动，则在/var/lib/mysql中加入这行 user=mysql\n   \n   \n   #重启\n  service mysql restart\n   ```","source":"_posts/2021/06/mysql-install.md","raw":"---\ntitle: Linux安装mysql8\ncomments: true\ntags: mysql\ncategories: linux\ntranslate_title: nginx-install\nabbrlink: 3212\ndate: 2021-06-29 14:40:08\n---\n### 1. 下载\n- 下载地址：https://downloads.mysql.com/archives/community/\n- 百度网盘链接: https://pan.baidu.com/s/1BkOuYlz2Ef7KRe9gikDUCg  密码: 0l15\n- Linux镜像下载\n    ```shell\n      cd /usr/local/src/\n      wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.27-linux-glibc2.12-x86_64.tar.gz\n    ```\n  \n### 2.卸载mariadb\n```shell\n#查看mariadb 的安装包\nrpm -qa | grep mariadb\n\n#卸载 mariadb\nrpm -e mariadb-libs-5.5.68-1.el7.x86_64 --nodeps\n\n#卸载验证\nrpm -qa | grep mariadb\n```\n\n### 3.安装\n1. 解压安装包\n    ```shell\n    # 进入下载目录\n    cd /usr/local/src/\n   \n   #解压， 如果是.tar则用 tar -zxvf解压， 我下载的是.tar.xz包，使用的是tar -xvJf\n    tar -xvJf mysql-8.0.28-linux-glibc2.17-x86_64-minimal.tar.xz\n   \n   # 移动解压后的文件夹至/usr/local\n    mv /usr/local/src/mysql-8.0.28-linux-glibc2.17-x86_64-minimal /usr/local/\n    cd /usr/local/\n   \n    # 重命名\n    mv ./mysql-8.0.28-linux-glibc2.17-x86_64-minimal mysql8.0\n   \n    # 创建文件夹data,存储文件;\n    cd /usr/local/mysql8.0/\n    mkdir ./data\n    ```\n   \n2. 创建用户以及用户组\n    ```shell\n    # 用户组\n    groupadd mysql\n    # 用户 （用户名/密码）\n    useradd -g mysql mysql\n    ```\n   \n3. 授权\n    ```shell\n    chown -R mysql.mysql /usr/local/mysql8.0/ \n    #或\n    chown -R mysql .\n    chgrp -R mysql .\n    ```\n   \n4. 初始化数据库\n    ```shell\n    # 查看当前所在目录\n    pwd # 若显示/usr/local/mysql-8.0,请继续执行，否则请先进入此目录/usr/local/mysql-8.0\n    # 初始化 注意查看是否存在相关目录,若不存在,请新建\n    ./bin/mysqld --user=mysql --basedir=/usr/local/mysql8.0/ --datadir=/usr/local/mysql8.0/data/ --initialize ; # 亲测\n    #或\n    ./bin/mysql --user=mysql --basedir=/usr/local/mysql8.0/ --datadir=/usr/local/mysql8.0/data/ --initialize ;\n   \n    #如果出现错误：./bin/mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory\n    yum install -y libaio  #安装后在初始化就OK了\n    ```\n   ![](./mysql-install/3.png)\n    注意：后面白色高亮选中的是初始密码！！！！\n   \n5. 配置my.cnf\n    ```shell\n    cp /usr/local/mysql8.0/support-files/mysql.server /etc/init.d/mysqld\n    vim /etc/my.cnf\n    ```\n   在配置中键入如下内容：\n    ```properties\n       [mysqld]\n      port=3306\n      # 设置mysql的安装目录\n      basedir=/usr/local/mysql8\n      # 设置mysql数据库的数据的存放目录\n      datadir=/usr/local/mysql8/mysqldb\n      # 允许最大连接数\n      max_connections=1000\n      # 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统\n      max_connect_errors=100\n      # 服务端使用的字符集默认为UTF8\n      character-set-server=utf8mb4\n      # 创建新表时将使用的默认存储引擎\n      default-storage-engine=INNODB\n      # 默认使用“mysql_native_password”插件认证\n      default_authentication_plugin=mysql_native_password\n      #是否对sql语句大小写敏感，1表示不敏感\n      lower_case_table_names = 1\n      #MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭\n      #MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效\n      interactive_timeout = 1800\n      wait_timeout = 1800\n      #Metadata Lock最大时长（秒）， 一般用于控制 alter操作的最大时长sine mysql5.6\n      #执行 DML操作时除了增加innodb事务锁外还增加Metadata Lock，其他alter（DDL）session将阻塞\n      lock_wait_timeout = 3600\n      #内部内存临时表的最大值。\n      #比如大数据量的group by ,order by时可能用到临时表，\n      #超过了这个值将写入磁盘，系统IO压力增大\n      tmp_table_size = 64M\n      max_heap_table_size = 64M\n      [mysql]\n      # 设置mysql客户端默认字符集\n      default-character-set=utf8mb4\n      [client]\n      # 设置mysql客户端连接服务端时默认使用的端口\n      port=3306\n      default-character-set=utf8mb4\n    ```\n\n6. 建立Mysql服务\n    ```shell\n    cp -a ./support-files/mysql.server /etc/init.d/mysql\n    chmod +x /etc/init.d/mysql\n    chkconfig --add mysql\n    chkconfig --list mysql\n    ```\n   ![](./mysql-install/4.png)\n\n7. 启动Mysql服务\n    ```shell\n    # 启动\n    service mysql start;\n    # 查看启动状态\n    service mysql status;\n    ```\n   如果提示： -bash: mysql: command not found\n    ```shell\n    ln -s /usr/local/mysql8.0/bin/mysql /usr/bin\n   ```\n   \n8. 登录Mysql\n    ```shell\n    mysql -uroot -p\n    # 输入\"初始化数据库\"操作时的\"临时密码\"\n    ```\n   ![](./mysql-install/5.png)\n\n    修改密码：\n    ```shell\n    ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '新密码';\n    ```\n   \n9. 远程连接\n    1. 在my.cnf的mysqld下增加\n        ```properties\n        default_authentication_plugin=mysql_native_password\n        ```\n    2. 进入mysql命令行\n        ```mysql\n        use mysql\n        update user set host ='%' where user='root';\n        ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'root';\n        FLUSH PRIVILEGES;\n        ```\n       ![](./mysql-install/7.png)\n   \n10. 检查端口\n    ```shell\n    #检查3306端口是否开放\n    netstat -nupl|grep 3306\n    \n    #开放3306端口\n    firewall -cmd --permanent --add-prot=3306/tcp\n    \n    #重启防火墙\n    firewall -cmd --reload\n    ```\n\n### 4. 常见问题\n1. The server quit without updating PID file\n   \n    - 第一，权限的问题，在出这个错误的时候，我所说的权限是mysq.cnf和所定义的mysql数据库存放目录的权限，要保证是mysql用户的权限，如果启动mysql还有问题，那么需要考虑提高权限了。\n    说人话， 数据库存放目录必须是mysql这个用户的属组(通常的，安装MySQL的时候建立的用户为mysql，不建议使用别的用户），mysql的启动脚本必须有执行权限。赋予权限的命令为：chown -R mysql. /usr/local/mysql,假设我的mysql是安装在  /usr/local/mysql目录，数据库存放目录为 /usr/local/mysql/data/\n    - 第二，进程中有mysql的进程，上次的退出并没有自动结束该pid，导致新的进程无法启动，毕竟，mysql每次启动系统只会给分配一个pid号，再启动，系统也不可能给你分配pid号了。运行命令 ps -ef |grep mysql  找到mysql的进程结束它，然后在启动mysql。\n    - 第三，进入mysql数据库的存放目录，如果有mysql-bin.index这样的文件，删除它，在启动mysql，该文件产生的原因不详，不过删除必定没影响，或者另一个binlog.index也删除，两个index后缀的都删除也可以。\n    - 第四，my.cnf 这个配置文件内容不对，检查有没有skip-federated这个字段，如果有注释或者删除。\n    检查是否定义了数据库存放目录，如果没有定义，请立刻定义。\n    - 第五，错误日志目录不存在解决方法：使用“chown” “chmod”命令赋予mysql目录所有者及权限。\n    - 第六，my.cnf文件内存在lower_case_table_names=1 字段，注释掉它。（这个选项是1表示不区分大小写）。具体原因不详。\n    \n    总结：mysql说好安装也好安装，说难也难，难点在于权限的配置，给高了不安全，给低了有可能启动出问题，如果启动出问题了，首先第一件事就是检查目录权限，第二就是检查my.cnf这个配置文件，skip-federated，lower_case_table_names=1 ，这样的字段注释掉，第三，清除旧的mysql进程，如果有就清除掉，旧的不去新的不来，就这么一个道理。第四，进入mysql数据库存放目录删除index后缀的文件。下面，给张图，详细的权限慢慢体会\n    ```shell\n    ls -al /etc/init.d/mysql\n   ```\n   \n2. Can 't connect to local MySQL server through socket '/tmp/mysql.sock\n \n\n    连接localhost通常通过一个Unix域套接字文件进行，一般是/tmp/mysql.sock。如果套接字文件被删除了，本地客户就不能连接。这可能发生在你的系统运行一个cron任务删除了/tmp下的临时文件。\n    如果你因为丢失套接字文件而不能连接，你可以简单地通过重启服务器重新创建得到它。因为服务器在启动时重新创建它。\n    如果和我一样，重启服务器还是没有任何变化，你可以先执行下面的语句\n   ```shell\n   mysql -uroot -h 127.0.0.1 -p\n   ```\n   解决方式：\n   ```shell\n    sudo mkdir /var/run/mysqld/\n    sudo ln -s /tmp/mysql.sock /var/run/mysqld/mysqld.sock\n   ```\n3. however file don't exists. Create writable for user 'mysql'\n    问题描述：\n    ```text\n    [root@test2 my57_3307]# /usr/local/mysql57/bin/mysqld_safe  --defaults-file=/dbdata/mysql/my57_3307/my57_3307.cnf  --ledir=/usr/local/mysql57/bin\n    2018-08-26T14:12:45.459798Z mysqld_safe error: log-error set to '/var/log/mysqld/my57_3307.log', however file don't exists. Create writable for user 'mysql'.\n   ```\n   解决方式：\n    ```text\n    touch /usr/local/mysql8.0/log/error.log\n    chown mysql /usr/local/mysql8.0/log/error.log\n    /usr/local/mysql8.0/bin/mysqld_safe  --defaults-file=/etc/my.cnf  --ledir=/usr/local/mysql8.0/bin\n   ```\n   \n4. cannot open shared object file: No such file or directory\n    \n    ```shell\n    #需要安装 libnuma\n    yum install libnuma\n    yum -y install  numactl\n    yum install libaio1 libaio-dev\n    ```\n   \n5. mysqld启动报错Failed to find valid data directory\n\n   ```shell\n   vim /etc/my.cnf #查看datadir配置项的路径，然后一般是/var/lib/mysql，将这个文件夹删掉，然后重新初始化\n   \n   /usr/local/mysql8/bin/mysqld --initialize --user=mysql\n   \n   #如果mysqld启动服务时提示不能用root启动，则在/var/lib/mysql中加入这行 user=mysql\n   \n   \n   #重启\n  service mysql restart\n   ```","slug":"mysql-install","published":1,"updated":"2022-04-06T05:03:15.266Z","layout":"post","photos":[],"link":"","_id":"cl235zcvu000nwjpj1whqdp8i","content":"<h3 id=\"1-下载\"><a class=\"markdownIt-Anchor\" href=\"#1-下载\"></a> 1. 下载</h3>\n<ul>\n<li>下载地址：<a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></li>\n<li>百度网盘链接: <a href=\"https://pan.baidu.com/s/1BkOuYlz2Ef7KRe9gikDUCg\">https://pan.baidu.com/s/1BkOuYlz2Ef7KRe9gikDUCg</a>  密码: 0l15</li>\n<li>Linux镜像下载  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/src/</span><br><span class=\"line\">wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.27-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2卸载mariadb\"><a class=\"markdownIt-Anchor\" href=\"#2卸载mariadb\"></a> 2.卸载mariadb</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看mariadb 的安装包</span></span><br><span class=\"line\">rpm -qa | grep mariadb</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">卸载 mariadb</span></span><br><span class=\"line\">rpm -e mariadb-libs-5.5.68-1.el7.x86_64 --nodeps</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">卸载验证</span></span><br><span class=\"line\">rpm -qa | grep mariadb</span><br></pre></td></tr></table></figure>\n<h3 id=\"3安装\"><a class=\"markdownIt-Anchor\" href=\"#3安装\"></a> 3.安装</h3>\n<ol>\n<li>\n<p>解压安装包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 进入下载目录</span></span><br><span class=\"line\"> cd /usr/local/src/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">解压， 如果是.tar则用 tar -zxvf解压， 我下载的是.tar.xz包，使用的是tar -xvJf</span></span><br><span class=\"line\"> tar -xvJf mysql-8.0.28-linux-glibc2.17-x86_64-minimal.tar.xz</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 移动解压后的文件夹至/usr/<span class=\"built_in\">local</span></span></span><br><span class=\"line\"> mv /usr/local/src/mysql-8.0.28-linux-glibc2.17-x86_64-minimal /usr/local/</span><br><span class=\"line\"> cd /usr/local/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 重命名</span></span><br><span class=\"line\"> mv ./mysql-8.0.28-linux-glibc2.17-x86_64-minimal mysql8.0</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 创建文件夹data,存储文件;</span></span><br><span class=\"line\"> cd /usr/local/mysql8.0/</span><br><span class=\"line\"> mkdir ./data</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>创建用户以及用户组</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 用户组</span></span><br><span class=\"line\">groupadd mysql</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 用户 （用户名/密码）</span></span><br><span class=\"line\">useradd -g mysql mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>授权</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R mysql.mysql /usr/local/mysql8.0/ </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或</span></span><br><span class=\"line\">chown -R mysql .</span><br><span class=\"line\">chgrp -R mysql .</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>初始化数据库</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看当前所在目录</span></span><br><span class=\"line\">pwd # 若显示/usr/local/mysql-8.0,请继续执行，否则请先进入此目录/usr/local/mysql-8.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 初始化 注意查看是否存在相关目录,若不存在,请新建</span></span><br><span class=\"line\">./bin/mysqld --user=mysql --basedir=/usr/local/mysql8.0/ --datadir=/usr/local/mysql8.0/data/ --initialize ; # 亲测</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或</span></span><br><span class=\"line\">./bin/mysql --user=mysql --basedir=/usr/local/mysql8.0/ --datadir=/usr/local/mysql8.0/data/ --initialize ;</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果出现错误：./bin/mysqld: error <span class=\"keyword\">while</span> loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory</span></span><br><span class=\"line\">yum install -y libaio  #安装后在初始化就OK了</span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-install/3.png\" alt><br>\n注意：后面白色高亮选中的是初始密码！！！！</p>\n</li>\n<li>\n<p>配置my.cnf</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/local/mysql8.0/support-files/mysql.server /etc/init.d/mysqld</span><br><span class=\"line\">vim /etc/my.cnf</span><br></pre></td></tr></table></figure>\n<p>在配置中键入如下内容：</p>\n <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"attr\">[mysqld]</span></span><br><span class=\"line\"><span class=\"attr\">port</span>=<span class=\"string\">3306</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql的安装目录</span></span><br><span class=\"line\"><span class=\"attr\">basedir</span>=<span class=\"string\">/usr/local/mysql8</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql数据库的数据的存放目录</span></span><br><span class=\"line\"><span class=\"attr\">datadir</span>=<span class=\"string\">/usr/local/mysql8/mysqldb</span></span><br><span class=\"line\"><span class=\"comment\"># 允许最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">max_connections</span>=<span class=\"string\">1000</span></span><br><span class=\"line\"><span class=\"comment\"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span></span><br><span class=\"line\"><span class=\"attr\">max_connect_errors</span>=<span class=\"string\">100</span></span><br><span class=\"line\"><span class=\"comment\"># 服务端使用的字符集默认为UTF8</span></span><br><span class=\"line\"><span class=\"meta\">character-set-server</span>=<span class=\"string\">utf8mb4</span></span><br><span class=\"line\"><span class=\"comment\"># 创建新表时将使用的默认存储引擎</span></span><br><span class=\"line\"><span class=\"meta\">default-storage-engine</span>=<span class=\"string\">INNODB</span></span><br><span class=\"line\"><span class=\"comment\"># 默认使用“mysql_native_password”插件认证</span></span><br><span class=\"line\"><span class=\"attr\">default_authentication_plugin</span>=<span class=\"string\">mysql_native_password</span></span><br><span class=\"line\"><span class=\"comment\">#是否对sql语句大小写敏感，1表示不敏感</span></span><br><span class=\"line\"><span class=\"attr\">lower_case_table_names</span> = <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"comment\">#MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭</span></span><br><span class=\"line\"><span class=\"comment\">#MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效</span></span><br><span class=\"line\"><span class=\"attr\">interactive_timeout</span> = <span class=\"string\">1800</span></span><br><span class=\"line\"><span class=\"attr\">wait_timeout</span> = <span class=\"string\">1800</span></span><br><span class=\"line\"><span class=\"comment\">#Metadata Lock最大时长（秒）， 一般用于控制 alter操作的最大时长sine mysql5.6</span></span><br><span class=\"line\"><span class=\"comment\">#执行 DML操作时除了增加innodb事务锁外还增加Metadata Lock，其他alter（DDL）session将阻塞</span></span><br><span class=\"line\"><span class=\"attr\">lock_wait_timeout</span> = <span class=\"string\">3600</span></span><br><span class=\"line\"><span class=\"comment\">#内部内存临时表的最大值。</span></span><br><span class=\"line\"><span class=\"comment\">#比如大数据量的group by ,order by时可能用到临时表，</span></span><br><span class=\"line\"><span class=\"comment\">#超过了这个值将写入磁盘，系统IO压力增大</span></span><br><span class=\"line\"><span class=\"attr\">tmp_table_size</span> = <span class=\"string\">64M</span></span><br><span class=\"line\"><span class=\"attr\">max_heap_table_size</span> = <span class=\"string\">64M</span></span><br><span class=\"line\"><span class=\"attr\">[mysql]</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql客户端默认字符集</span></span><br><span class=\"line\"><span class=\"meta\">default-character-set</span>=<span class=\"string\">utf8mb4</span></span><br><span class=\"line\"><span class=\"attr\">[client]</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class=\"line\"><span class=\"attr\">port</span>=<span class=\"string\">3306</span></span><br><span class=\"line\"><span class=\"meta\">default-character-set</span>=<span class=\"string\">utf8mb4</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>建立Mysql服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -a ./support-files/mysql.server /etc/init.d/mysql</span><br><span class=\"line\">chmod +x /etc/init.d/mysql</span><br><span class=\"line\">chkconfig --add mysql</span><br><span class=\"line\">chkconfig --list mysql</span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-install/4.png\" alt></p>\n</li>\n<li>\n<p>启动Mysql服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动</span></span><br><span class=\"line\">service mysql start;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看启动状态</span></span><br><span class=\"line\">service mysql status;</span><br></pre></td></tr></table></figure>\n<p>如果提示： -bash: mysql: command not found</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/mysql8.0/bin/mysql /usr/bin</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>登录Mysql</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 输入<span class=\"string\">&quot;初始化数据库&quot;</span>操作时的<span class=\"string\">&quot;临时密码&quot;</span></span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-install/5.png\" alt></p>\n<p>修改密码：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>远程连接</p>\n<ol>\n<li>在my.cnf的mysqld下增加 <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">default_authentication_plugin</span>=<span class=\"string\">mysql_native_password</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>进入mysql命令行 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql</span><br><span class=\"line\">update user set host =&#x27;%&#x27; where user=&#x27;root&#x27;;</span><br><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;root&#x27;;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n<img src=\"/mysql-install/7.png\" alt></li>\n</ol>\n</li>\n<li>\n<p>检查端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">检查3306端口是否开放</span></span><br><span class=\"line\">netstat -nupl|grep 3306</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开放3306端口</span></span><br><span class=\"line\">firewall -cmd --permanent --add-prot=3306/tcp</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启防火墙</span></span><br><span class=\"line\">firewall -cmd --reload</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"4-常见问题\"><a class=\"markdownIt-Anchor\" href=\"#4-常见问题\"></a> 4. 常见问题</h3>\n<ol>\n<li>\n<p>The server quit without updating PID file</p>\n<ul>\n<li>第一，权限的问题，在出这个错误的时候，我所说的权限是mysq.cnf和所定义的mysql数据库存放目录的权限，要保证是mysql用户的权限，如果启动mysql还有问题，那么需要考虑提高权限了。<br>\n说人话， 数据库存放目录必须是mysql这个用户的属组(通常的，安装MySQL的时候建立的用户为mysql，不建议使用别的用户），mysql的启动脚本必须有执行权限。赋予权限的命令为：chown -R mysql. /usr/local/mysql,假设我的mysql是安装在  /usr/local/mysql目录，数据库存放目录为 /usr/local/mysql/data/</li>\n<li>第二，进程中有mysql的进程，上次的退出并没有自动结束该pid，导致新的进程无法启动，毕竟，mysql每次启动系统只会给分配一个pid号，再启动，系统也不可能给你分配pid号了。运行命令 ps -ef |grep mysql  找到mysql的进程结束它，然后在启动mysql。</li>\n<li>第三，进入mysql数据库的存放目录，如果有mysql-bin.index这样的文件，删除它，在启动mysql，该文件产生的原因不详，不过删除必定没影响，或者另一个binlog.index也删除，两个index后缀的都删除也可以。</li>\n<li>第四，my.cnf 这个配置文件内容不对，检查有没有skip-federated这个字段，如果有注释或者删除。<br>\n检查是否定义了数据库存放目录，如果没有定义，请立刻定义。</li>\n<li>第五，错误日志目录不存在解决方法：使用“chown” “chmod”命令赋予mysql目录所有者及权限。</li>\n<li>第六，my.cnf文件内存在lower_case_table_names=1 字段，注释掉它。（这个选项是1表示不区分大小写）。具体原因不详。</li>\n</ul>\n<p>总结：mysql说好安装也好安装，说难也难，难点在于权限的配置，给高了不安全，给低了有可能启动出问题，如果启动出问题了，首先第一件事就是检查目录权限，第二就是检查my.cnf这个配置文件，skip-federated，lower_case_table_names=1 ，这样的字段注释掉，第三，清除旧的mysql进程，如果有就清除掉，旧的不去新的不来，就这么一个道理。第四，进入mysql数据库存放目录删除index后缀的文件。下面，给张图，详细的权限慢慢体会</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -al /etc/init.d/mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Can 't connect to local MySQL server through socket '/tmp/mysql.sock</p>\n<p>连接localhost通常通过一个Unix域套接字文件进行，一般是/tmp/mysql.sock。如果套接字文件被删除了，本地客户就不能连接。这可能发生在你的系统运行一个cron任务删除了/tmp下的临时文件。<br>\n如果你因为丢失套接字文件而不能连接，你可以简单地通过重启服务器重新创建得到它。因为服务器在启动时重新创建它。<br>\n如果和我一样，重启服务器还是没有任何变化，你可以先执行下面的语句</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -h 127.0.0.1 -p</span><br></pre></td></tr></table></figure>\n<p>解决方式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /var/run/mysqld/</span><br><span class=\"line\">sudo ln -s /tmp/mysql.sock /var/run/mysqld/mysqld.sock</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>however file don’t exists. Create writable for user ‘mysql’<br>\n问题描述：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@test2 my57_3307]# /usr/local/mysql57/bin/mysqld_safe  --defaults-file=/dbdata/mysql/my57_3307/my57_3307.cnf  --ledir=/usr/local/mysql57/bin</span><br><span class=\"line\">2018-08-26T14:12:45.459798Z mysqld_safe error: log-error set to &#x27;/var/log/mysqld/my57_3307.log&#x27;, however file don&#x27;t exists. Create writable for user &#x27;mysql&#x27;.</span><br></pre></td></tr></table></figure>\n<p>解决方式：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /usr/local/mysql8.0/log/error.log</span><br><span class=\"line\">chown mysql /usr/local/mysql8.0/log/error.log</span><br><span class=\"line\">/usr/local/mysql8.0/bin/mysqld_safe  --defaults-file=/etc/my.cnf  --ledir=/usr/local/mysql8.0/bin</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>cannot open shared object file: No such file or directory</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">需要安装 libnuma</span></span><br><span class=\"line\">yum install libnuma</span><br><span class=\"line\">yum -y install  numactl</span><br><span class=\"line\">yum install libaio1 libaio-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>mysqld启动报错Failed to find valid data directory</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> vim /etc/my.cnf #查看datadir配置项的路径，然后一般是/var/lib/mysql，将这个文件夹删掉，然后重新初始化</span><br><span class=\"line\"> </span><br><span class=\"line\"> /usr/local/mysql8/bin/mysqld --initialize --user=mysql</span><br><span class=\"line\"><span class=\"meta\"> </span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">如果mysqld启动服务时提示不能用root启动，则在/var/lib/mysql中加入这行 user=mysql</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\"> </span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">重启</span></span><br><span class=\"line\">service mysql restart</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"1-下载\"><a class=\"markdownIt-Anchor\" href=\"#1-下载\"></a> 1. 下载</h3>\n<ul>\n<li>下载地址：<a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></li>\n<li>百度网盘链接: <a href=\"https://pan.baidu.com/s/1BkOuYlz2Ef7KRe9gikDUCg\">https://pan.baidu.com/s/1BkOuYlz2Ef7KRe9gikDUCg</a>  密码: 0l15</li>\n<li>Linux镜像下载  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/src/</span><br><span class=\"line\">wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.27-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2卸载mariadb\"><a class=\"markdownIt-Anchor\" href=\"#2卸载mariadb\"></a> 2.卸载mariadb</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看mariadb 的安装包</span></span><br><span class=\"line\">rpm -qa | grep mariadb</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">卸载 mariadb</span></span><br><span class=\"line\">rpm -e mariadb-libs-5.5.68-1.el7.x86_64 --nodeps</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">卸载验证</span></span><br><span class=\"line\">rpm -qa | grep mariadb</span><br></pre></td></tr></table></figure>\n<h3 id=\"3安装\"><a class=\"markdownIt-Anchor\" href=\"#3安装\"></a> 3.安装</h3>\n<ol>\n<li>\n<p>解压安装包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 进入下载目录</span></span><br><span class=\"line\"> cd /usr/local/src/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">解压， 如果是.tar则用 tar -zxvf解压， 我下载的是.tar.xz包，使用的是tar -xvJf</span></span><br><span class=\"line\"> tar -xvJf mysql-8.0.28-linux-glibc2.17-x86_64-minimal.tar.xz</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 移动解压后的文件夹至/usr/<span class=\"built_in\">local</span></span></span><br><span class=\"line\"> mv /usr/local/src/mysql-8.0.28-linux-glibc2.17-x86_64-minimal /usr/local/</span><br><span class=\"line\"> cd /usr/local/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 重命名</span></span><br><span class=\"line\"> mv ./mysql-8.0.28-linux-glibc2.17-x86_64-minimal mysql8.0</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 创建文件夹data,存储文件;</span></span><br><span class=\"line\"> cd /usr/local/mysql8.0/</span><br><span class=\"line\"> mkdir ./data</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>创建用户以及用户组</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 用户组</span></span><br><span class=\"line\">groupadd mysql</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 用户 （用户名/密码）</span></span><br><span class=\"line\">useradd -g mysql mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>授权</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R mysql.mysql /usr/local/mysql8.0/ </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或</span></span><br><span class=\"line\">chown -R mysql .</span><br><span class=\"line\">chgrp -R mysql .</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>初始化数据库</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看当前所在目录</span></span><br><span class=\"line\">pwd # 若显示/usr/local/mysql-8.0,请继续执行，否则请先进入此目录/usr/local/mysql-8.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 初始化 注意查看是否存在相关目录,若不存在,请新建</span></span><br><span class=\"line\">./bin/mysqld --user=mysql --basedir=/usr/local/mysql8.0/ --datadir=/usr/local/mysql8.0/data/ --initialize ; # 亲测</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或</span></span><br><span class=\"line\">./bin/mysql --user=mysql --basedir=/usr/local/mysql8.0/ --datadir=/usr/local/mysql8.0/data/ --initialize ;</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果出现错误：./bin/mysqld: error <span class=\"keyword\">while</span> loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory</span></span><br><span class=\"line\">yum install -y libaio  #安装后在初始化就OK了</span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-install/3.png\" alt><br>\n注意：后面白色高亮选中的是初始密码！！！！</p>\n</li>\n<li>\n<p>配置my.cnf</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/local/mysql8.0/support-files/mysql.server /etc/init.d/mysqld</span><br><span class=\"line\">vim /etc/my.cnf</span><br></pre></td></tr></table></figure>\n<p>在配置中键入如下内容：</p>\n <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"attr\">[mysqld]</span></span><br><span class=\"line\"><span class=\"attr\">port</span>=<span class=\"string\">3306</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql的安装目录</span></span><br><span class=\"line\"><span class=\"attr\">basedir</span>=<span class=\"string\">/usr/local/mysql8</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql数据库的数据的存放目录</span></span><br><span class=\"line\"><span class=\"attr\">datadir</span>=<span class=\"string\">/usr/local/mysql8/mysqldb</span></span><br><span class=\"line\"><span class=\"comment\"># 允许最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">max_connections</span>=<span class=\"string\">1000</span></span><br><span class=\"line\"><span class=\"comment\"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span></span><br><span class=\"line\"><span class=\"attr\">max_connect_errors</span>=<span class=\"string\">100</span></span><br><span class=\"line\"><span class=\"comment\"># 服务端使用的字符集默认为UTF8</span></span><br><span class=\"line\"><span class=\"meta\">character-set-server</span>=<span class=\"string\">utf8mb4</span></span><br><span class=\"line\"><span class=\"comment\"># 创建新表时将使用的默认存储引擎</span></span><br><span class=\"line\"><span class=\"meta\">default-storage-engine</span>=<span class=\"string\">INNODB</span></span><br><span class=\"line\"><span class=\"comment\"># 默认使用“mysql_native_password”插件认证</span></span><br><span class=\"line\"><span class=\"attr\">default_authentication_plugin</span>=<span class=\"string\">mysql_native_password</span></span><br><span class=\"line\"><span class=\"comment\">#是否对sql语句大小写敏感，1表示不敏感</span></span><br><span class=\"line\"><span class=\"attr\">lower_case_table_names</span> = <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"comment\">#MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭</span></span><br><span class=\"line\"><span class=\"comment\">#MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效</span></span><br><span class=\"line\"><span class=\"attr\">interactive_timeout</span> = <span class=\"string\">1800</span></span><br><span class=\"line\"><span class=\"attr\">wait_timeout</span> = <span class=\"string\">1800</span></span><br><span class=\"line\"><span class=\"comment\">#Metadata Lock最大时长（秒）， 一般用于控制 alter操作的最大时长sine mysql5.6</span></span><br><span class=\"line\"><span class=\"comment\">#执行 DML操作时除了增加innodb事务锁外还增加Metadata Lock，其他alter（DDL）session将阻塞</span></span><br><span class=\"line\"><span class=\"attr\">lock_wait_timeout</span> = <span class=\"string\">3600</span></span><br><span class=\"line\"><span class=\"comment\">#内部内存临时表的最大值。</span></span><br><span class=\"line\"><span class=\"comment\">#比如大数据量的group by ,order by时可能用到临时表，</span></span><br><span class=\"line\"><span class=\"comment\">#超过了这个值将写入磁盘，系统IO压力增大</span></span><br><span class=\"line\"><span class=\"attr\">tmp_table_size</span> = <span class=\"string\">64M</span></span><br><span class=\"line\"><span class=\"attr\">max_heap_table_size</span> = <span class=\"string\">64M</span></span><br><span class=\"line\"><span class=\"attr\">[mysql]</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql客户端默认字符集</span></span><br><span class=\"line\"><span class=\"meta\">default-character-set</span>=<span class=\"string\">utf8mb4</span></span><br><span class=\"line\"><span class=\"attr\">[client]</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class=\"line\"><span class=\"attr\">port</span>=<span class=\"string\">3306</span></span><br><span class=\"line\"><span class=\"meta\">default-character-set</span>=<span class=\"string\">utf8mb4</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>建立Mysql服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -a ./support-files/mysql.server /etc/init.d/mysql</span><br><span class=\"line\">chmod +x /etc/init.d/mysql</span><br><span class=\"line\">chkconfig --add mysql</span><br><span class=\"line\">chkconfig --list mysql</span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-install/4.png\" alt></p>\n</li>\n<li>\n<p>启动Mysql服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动</span></span><br><span class=\"line\">service mysql start;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看启动状态</span></span><br><span class=\"line\">service mysql status;</span><br></pre></td></tr></table></figure>\n<p>如果提示： -bash: mysql: command not found</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/mysql8.0/bin/mysql /usr/bin</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>登录Mysql</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 输入<span class=\"string\">&quot;初始化数据库&quot;</span>操作时的<span class=\"string\">&quot;临时密码&quot;</span></span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-install/5.png\" alt></p>\n<p>修改密码：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>远程连接</p>\n<ol>\n<li>在my.cnf的mysqld下增加 <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">default_authentication_plugin</span>=<span class=\"string\">mysql_native_password</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>进入mysql命令行 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql</span><br><span class=\"line\">update user set host =&#x27;%&#x27; where user=&#x27;root&#x27;;</span><br><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;root&#x27;;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n<img src=\"/mysql-install/7.png\" alt></li>\n</ol>\n</li>\n<li>\n<p>检查端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">检查3306端口是否开放</span></span><br><span class=\"line\">netstat -nupl|grep 3306</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开放3306端口</span></span><br><span class=\"line\">firewall -cmd --permanent --add-prot=3306/tcp</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启防火墙</span></span><br><span class=\"line\">firewall -cmd --reload</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"4-常见问题\"><a class=\"markdownIt-Anchor\" href=\"#4-常见问题\"></a> 4. 常见问题</h3>\n<ol>\n<li>\n<p>The server quit without updating PID file</p>\n<ul>\n<li>第一，权限的问题，在出这个错误的时候，我所说的权限是mysq.cnf和所定义的mysql数据库存放目录的权限，要保证是mysql用户的权限，如果启动mysql还有问题，那么需要考虑提高权限了。<br>\n说人话， 数据库存放目录必须是mysql这个用户的属组(通常的，安装MySQL的时候建立的用户为mysql，不建议使用别的用户），mysql的启动脚本必须有执行权限。赋予权限的命令为：chown -R mysql. /usr/local/mysql,假设我的mysql是安装在  /usr/local/mysql目录，数据库存放目录为 /usr/local/mysql/data/</li>\n<li>第二，进程中有mysql的进程，上次的退出并没有自动结束该pid，导致新的进程无法启动，毕竟，mysql每次启动系统只会给分配一个pid号，再启动，系统也不可能给你分配pid号了。运行命令 ps -ef |grep mysql  找到mysql的进程结束它，然后在启动mysql。</li>\n<li>第三，进入mysql数据库的存放目录，如果有mysql-bin.index这样的文件，删除它，在启动mysql，该文件产生的原因不详，不过删除必定没影响，或者另一个binlog.index也删除，两个index后缀的都删除也可以。</li>\n<li>第四，my.cnf 这个配置文件内容不对，检查有没有skip-federated这个字段，如果有注释或者删除。<br>\n检查是否定义了数据库存放目录，如果没有定义，请立刻定义。</li>\n<li>第五，错误日志目录不存在解决方法：使用“chown” “chmod”命令赋予mysql目录所有者及权限。</li>\n<li>第六，my.cnf文件内存在lower_case_table_names=1 字段，注释掉它。（这个选项是1表示不区分大小写）。具体原因不详。</li>\n</ul>\n<p>总结：mysql说好安装也好安装，说难也难，难点在于权限的配置，给高了不安全，给低了有可能启动出问题，如果启动出问题了，首先第一件事就是检查目录权限，第二就是检查my.cnf这个配置文件，skip-federated，lower_case_table_names=1 ，这样的字段注释掉，第三，清除旧的mysql进程，如果有就清除掉，旧的不去新的不来，就这么一个道理。第四，进入mysql数据库存放目录删除index后缀的文件。下面，给张图，详细的权限慢慢体会</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -al /etc/init.d/mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Can 't connect to local MySQL server through socket '/tmp/mysql.sock</p>\n<p>连接localhost通常通过一个Unix域套接字文件进行，一般是/tmp/mysql.sock。如果套接字文件被删除了，本地客户就不能连接。这可能发生在你的系统运行一个cron任务删除了/tmp下的临时文件。<br>\n如果你因为丢失套接字文件而不能连接，你可以简单地通过重启服务器重新创建得到它。因为服务器在启动时重新创建它。<br>\n如果和我一样，重启服务器还是没有任何变化，你可以先执行下面的语句</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -h 127.0.0.1 -p</span><br></pre></td></tr></table></figure>\n<p>解决方式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /var/run/mysqld/</span><br><span class=\"line\">sudo ln -s /tmp/mysql.sock /var/run/mysqld/mysqld.sock</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>however file don’t exists. Create writable for user ‘mysql’<br>\n问题描述：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@test2 my57_3307]# /usr/local/mysql57/bin/mysqld_safe  --defaults-file=/dbdata/mysql/my57_3307/my57_3307.cnf  --ledir=/usr/local/mysql57/bin</span><br><span class=\"line\">2018-08-26T14:12:45.459798Z mysqld_safe error: log-error set to &#x27;/var/log/mysqld/my57_3307.log&#x27;, however file don&#x27;t exists. Create writable for user &#x27;mysql&#x27;.</span><br></pre></td></tr></table></figure>\n<p>解决方式：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /usr/local/mysql8.0/log/error.log</span><br><span class=\"line\">chown mysql /usr/local/mysql8.0/log/error.log</span><br><span class=\"line\">/usr/local/mysql8.0/bin/mysqld_safe  --defaults-file=/etc/my.cnf  --ledir=/usr/local/mysql8.0/bin</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>cannot open shared object file: No such file or directory</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">需要安装 libnuma</span></span><br><span class=\"line\">yum install libnuma</span><br><span class=\"line\">yum -y install  numactl</span><br><span class=\"line\">yum install libaio1 libaio-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>mysqld启动报错Failed to find valid data directory</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> vim /etc/my.cnf #查看datadir配置项的路径，然后一般是/var/lib/mysql，将这个文件夹删掉，然后重新初始化</span><br><span class=\"line\"> </span><br><span class=\"line\"> /usr/local/mysql8/bin/mysqld --initialize --user=mysql</span><br><span class=\"line\"><span class=\"meta\"> </span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">如果mysqld启动服务时提示不能用root启动，则在/var/lib/mysql中加入这行 user=mysql</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\"> </span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">重启</span></span><br><span class=\"line\">service mysql restart</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"java8的lambda表达式语法","comments":1,"translate_title":"lambda","abbrlink":51354,"date":"2022-04-13T12:32:44.000Z","_content":"记录一下用到的一些java8的lambda表达式语法\n### 1 list集合根据某个字段分组后求多个字段的和\n```java\n List<SafeSystemVO> list = new ArrayList<>(16);\n//....省略添加元素的代码\n//分组字段 driver_id\nlist.stream().collect(Collectors.groupingBy(SafeSystemVO::getDriver_id)).values().stream().map(d -> {\n    SafeSystemVO vo = d.get(0);\n    //求和1\n    vo.setAg_total(d.stream().map(s -> BigDecimal.valueOf(s.getAg_total())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    \n    // 求和2\n    vo.setScore(d.stream().map(s -> BigDecimal.valueOf(s.getScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  \n    vo.setLkj_score(d.stream().map(s -> BigDecimal.valueOf(s.getLkj_score())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  \n    vo.setTotalScore(d.stream().map(s -> BigDecimal.valueOf(s.getTotalScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    \n    return vo;\n}).collect(Collectors.toList());\n```\n\n### 2. list 根据某个字段分组后求单个字段的平均值，并按照分组字段排序\n```java\nList<SafeSystemVO> list = new ArrayList<>(16);\n//....省略添加元素的代码\nMap<String, Double> monthAvg = list1.stream().collect(Collectors.groupingBy(SafeSystemVO::getMonth, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));\n//  根据Map 对象的key排序\n// 我的分组字段是日期，就用了下面的\nmonthAvg.entrySet().stream().sorted((o1, o2) -> {\n    try {\n        Date d1 = DateUtils.convertStringToDate(o1.getKey(), DateUtils.FM2);\n        Date d2 = DateUtils.convertStringToDate(o2.getKey(), DateUtils.FM2);\n        assert d1 != null;\n        return d1.compareTo(d2);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return 0;\n}).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (oldVal, newVal) -> oldVal, LinkedHashMap::new));\n\n//根据Map 对象的value排序\n//monthResult = workShopAvg.entrySet().stream().sorted((p1, p2) -> p2.getValue().compareTo(p1.getValue())).collect(Collectors.toList());\n```\n\n### 3. list 根据字段分组求和后取 前/后10名\n```java\n//list对象接上面的\n\n//根据driver_id分组，求平均值\nMap<String, Double> driverScores = list3.stream()\n        .collect(Collectors.groupingBy(SafeSystemVO::getDriver_id, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));\n\n//排序后获取后10 名， 前10名的话修改sorted逻辑为：sorted((p1, p2) -> p2.getValue().compareTo(p1.getValue()))\nList<Map.Entry<String, Double>> driverScoresTop10 = driverScores.entrySet().stream().sorted((p1, p2) -> p1.getValue().compareTo(p2.getValue())).limit(10).collect(Collectors.toList());\n```","source":"_posts/2022/04/lambda.md","raw":"---\ntitle: java8的lambda表达式语法\ncomments: true\ntags: java\ncategories: java\ntranslate_title: lambda\nabbrlink: 51354\ndate: 2022-04-13 20:32:44\n---\n记录一下用到的一些java8的lambda表达式语法\n### 1 list集合根据某个字段分组后求多个字段的和\n```java\n List<SafeSystemVO> list = new ArrayList<>(16);\n//....省略添加元素的代码\n//分组字段 driver_id\nlist.stream().collect(Collectors.groupingBy(SafeSystemVO::getDriver_id)).values().stream().map(d -> {\n    SafeSystemVO vo = d.get(0);\n    //求和1\n    vo.setAg_total(d.stream().map(s -> BigDecimal.valueOf(s.getAg_total())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    \n    // 求和2\n    vo.setScore(d.stream().map(s -> BigDecimal.valueOf(s.getScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  \n    vo.setLkj_score(d.stream().map(s -> BigDecimal.valueOf(s.getLkj_score())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  \n    vo.setTotalScore(d.stream().map(s -> BigDecimal.valueOf(s.getTotalScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    \n    return vo;\n}).collect(Collectors.toList());\n```\n\n### 2. list 根据某个字段分组后求单个字段的平均值，并按照分组字段排序\n```java\nList<SafeSystemVO> list = new ArrayList<>(16);\n//....省略添加元素的代码\nMap<String, Double> monthAvg = list1.stream().collect(Collectors.groupingBy(SafeSystemVO::getMonth, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));\n//  根据Map 对象的key排序\n// 我的分组字段是日期，就用了下面的\nmonthAvg.entrySet().stream().sorted((o1, o2) -> {\n    try {\n        Date d1 = DateUtils.convertStringToDate(o1.getKey(), DateUtils.FM2);\n        Date d2 = DateUtils.convertStringToDate(o2.getKey(), DateUtils.FM2);\n        assert d1 != null;\n        return d1.compareTo(d2);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return 0;\n}).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (oldVal, newVal) -> oldVal, LinkedHashMap::new));\n\n//根据Map 对象的value排序\n//monthResult = workShopAvg.entrySet().stream().sorted((p1, p2) -> p2.getValue().compareTo(p1.getValue())).collect(Collectors.toList());\n```\n\n### 3. list 根据字段分组求和后取 前/后10名\n```java\n//list对象接上面的\n\n//根据driver_id分组，求平均值\nMap<String, Double> driverScores = list3.stream()\n        .collect(Collectors.groupingBy(SafeSystemVO::getDriver_id, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));\n\n//排序后获取后10 名， 前10名的话修改sorted逻辑为：sorted((p1, p2) -> p2.getValue().compareTo(p1.getValue()))\nList<Map.Entry<String, Double>> driverScoresTop10 = driverScores.entrySet().stream().sorted((p1, p2) -> p1.getValue().compareTo(p2.getValue())).limit(10).collect(Collectors.toList());\n```","slug":"lambda","published":1,"updated":"2022-04-17T04:56:28.405Z","layout":"post","photos":[],"link":"","_id":"cl235zcvv000owjpj0npogqwb","content":"<p>记录一下用到的一些java8的lambda表达式语法</p>\n<h3 id=\"1-list集合根据某个字段分组后求多个字段的和\"><a class=\"markdownIt-Anchor\" href=\"#1-list集合根据某个字段分组后求多个字段的和\"></a> 1 list集合根据某个字段分组后求多个字段的和</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> List&lt;SafeSystemVO&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"><span class=\"comment\">//....省略添加元素的代码</span></span><br><span class=\"line\"><span class=\"comment\">//分组字段 driver_id</span></span><br><span class=\"line\">list.stream().collect(Collectors.groupingBy(SafeSystemVO::getDriver_id)).values().stream().map(d -&gt; &#123;</span><br><span class=\"line\">    SafeSystemVO vo = d.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">//求和1</span></span><br><span class=\"line\">    vo.setAg_total(d.stream().map(s -&gt; BigDecimal.valueOf(s.getAg_total())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    </span><br><span class=\"line\">    <span class=\"comment\">// 求和2</span></span><br><span class=\"line\">    vo.setScore(d.stream().map(s -&gt; BigDecimal.valueOf(s.getScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  </span><br><span class=\"line\">    vo.setLkj_score(d.stream().map(s -&gt; BigDecimal.valueOf(s.getLkj_score())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  </span><br><span class=\"line\">    vo.setTotalScore(d.stream().map(s -&gt; BigDecimal.valueOf(s.getTotalScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> vo;</span><br><span class=\"line\">&#125;).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-list-根据某个字段分组后求单个字段的平均值并按照分组字段排序\"><a class=\"markdownIt-Anchor\" href=\"#2-list-根据某个字段分组后求单个字段的平均值并按照分组字段排序\"></a> 2. list 根据某个字段分组后求单个字段的平均值，并按照分组字段排序</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;SafeSystemVO&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"><span class=\"comment\">//....省略添加元素的代码</span></span><br><span class=\"line\">Map&lt;String, Double&gt; monthAvg = list1.stream().collect(Collectors.groupingBy(SafeSystemVO::getMonth, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));</span><br><span class=\"line\"><span class=\"comment\">//  根据Map 对象的key排序</span></span><br><span class=\"line\"><span class=\"comment\">// 我的分组字段是日期，就用了下面的</span></span><br><span class=\"line\">monthAvg.entrySet().stream().sorted((o1, o2) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Date d1 = DateUtils.convertStringToDate(o1.getKey(), DateUtils.FM2);</span><br><span class=\"line\">        Date d2 = DateUtils.convertStringToDate(o2.getKey(), DateUtils.FM2);</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> d1 != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d1.compareTo(d2);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (oldVal, newVal) -&gt; oldVal, LinkedHashMap::<span class=\"keyword\">new</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据Map 对象的value排序</span></span><br><span class=\"line\"><span class=\"comment\">//monthResult = workShopAvg.entrySet().stream().sorted((p1, p2) -&gt; p2.getValue().compareTo(p1.getValue())).collect(Collectors.toList());</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-list-根据字段分组求和后取-前后10名\"><a class=\"markdownIt-Anchor\" href=\"#3-list-根据字段分组求和后取-前后10名\"></a> 3. list 根据字段分组求和后取 前/后10名</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//list对象接上面的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据driver_id分组，求平均值</span></span><br><span class=\"line\">Map&lt;String, Double&gt; driverScores = list3.stream()</span><br><span class=\"line\">        .collect(Collectors.groupingBy(SafeSystemVO::getDriver_id, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//排序后获取后10 名， 前10名的话修改sorted逻辑为：sorted((p1, p2) -&gt; p2.getValue().compareTo(p1.getValue()))</span></span><br><span class=\"line\">List&lt;Map.Entry&lt;String, Double&gt;&gt; driverScoresTop10 = driverScores.entrySet().stream().sorted((p1, p2) -&gt; p1.getValue().compareTo(p2.getValue())).limit(<span class=\"number\">10</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>记录一下用到的一些java8的lambda表达式语法</p>\n<h3 id=\"1-list集合根据某个字段分组后求多个字段的和\"><a class=\"markdownIt-Anchor\" href=\"#1-list集合根据某个字段分组后求多个字段的和\"></a> 1 list集合根据某个字段分组后求多个字段的和</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> List&lt;SafeSystemVO&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"><span class=\"comment\">//....省略添加元素的代码</span></span><br><span class=\"line\"><span class=\"comment\">//分组字段 driver_id</span></span><br><span class=\"line\">list.stream().collect(Collectors.groupingBy(SafeSystemVO::getDriver_id)).values().stream().map(d -&gt; &#123;</span><br><span class=\"line\">    SafeSystemVO vo = d.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">//求和1</span></span><br><span class=\"line\">    vo.setAg_total(d.stream().map(s -&gt; BigDecimal.valueOf(s.getAg_total())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    </span><br><span class=\"line\">    <span class=\"comment\">// 求和2</span></span><br><span class=\"line\">    vo.setScore(d.stream().map(s -&gt; BigDecimal.valueOf(s.getScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  </span><br><span class=\"line\">    vo.setLkj_score(d.stream().map(s -&gt; BigDecimal.valueOf(s.getLkj_score())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  </span><br><span class=\"line\">    vo.setTotalScore(d.stream().map(s -&gt; BigDecimal.valueOf(s.getTotalScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> vo;</span><br><span class=\"line\">&#125;).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-list-根据某个字段分组后求单个字段的平均值并按照分组字段排序\"><a class=\"markdownIt-Anchor\" href=\"#2-list-根据某个字段分组后求单个字段的平均值并按照分组字段排序\"></a> 2. list 根据某个字段分组后求单个字段的平均值，并按照分组字段排序</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;SafeSystemVO&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"><span class=\"comment\">//....省略添加元素的代码</span></span><br><span class=\"line\">Map&lt;String, Double&gt; monthAvg = list1.stream().collect(Collectors.groupingBy(SafeSystemVO::getMonth, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));</span><br><span class=\"line\"><span class=\"comment\">//  根据Map 对象的key排序</span></span><br><span class=\"line\"><span class=\"comment\">// 我的分组字段是日期，就用了下面的</span></span><br><span class=\"line\">monthAvg.entrySet().stream().sorted((o1, o2) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Date d1 = DateUtils.convertStringToDate(o1.getKey(), DateUtils.FM2);</span><br><span class=\"line\">        Date d2 = DateUtils.convertStringToDate(o2.getKey(), DateUtils.FM2);</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> d1 != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d1.compareTo(d2);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (oldVal, newVal) -&gt; oldVal, LinkedHashMap::<span class=\"keyword\">new</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据Map 对象的value排序</span></span><br><span class=\"line\"><span class=\"comment\">//monthResult = workShopAvg.entrySet().stream().sorted((p1, p2) -&gt; p2.getValue().compareTo(p1.getValue())).collect(Collectors.toList());</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-list-根据字段分组求和后取-前后10名\"><a class=\"markdownIt-Anchor\" href=\"#3-list-根据字段分组求和后取-前后10名\"></a> 3. list 根据字段分组求和后取 前/后10名</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//list对象接上面的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据driver_id分组，求平均值</span></span><br><span class=\"line\">Map&lt;String, Double&gt; driverScores = list3.stream()</span><br><span class=\"line\">        .collect(Collectors.groupingBy(SafeSystemVO::getDriver_id, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//排序后获取后10 名， 前10名的话修改sorted逻辑为：sorted((p1, p2) -&gt; p2.getValue().compareTo(p1.getValue()))</span></span><br><span class=\"line\">List&lt;Map.Entry&lt;String, Double&gt;&gt; driverScoresTop10 = driverScores.entrySet().stream().sorted((p1, p2) -&gt; p1.getValue().compareTo(p2.getValue())).limit(<span class=\"number\">10</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>"},{"title":"基于Springboot导出数据库表结构文档","comments":1,"translate_title":"export_database_file","abbrlink":54350,"date":"2022-04-15T03:46:03.000Z","_content":"在项目中经常会需要查询数据库所有的表以及表字段，然后可能还需要导出到Excel中，然后自己写了一个工具类，目前支持sqlserver、mysql、oracle、Postgre；如果有问题请留言！！！\n### 1. 引入依赖包\n```xml\n <!-- 请尽量用最新版本 -->\n <dependency>\n    <groupId>com.github.xiaoyuge5201</groupId>\n    <artifactId>datasource-spring-boot-starter</artifactId>\n    <version>2.1</version>\n</dependency>\n```\n\n### 2. 编写Java代码\n1. 通过MyDataSourceProperties类所有本项目的数据库连接信息，导出当前连接库的数据库结构\n    ```yaml\n    spring:\n      datasource:\n        type: com.alibaba.druid.pool.DruidDataSource\n        url: jdbc:mysql://localhost:3306/dbname?serverTimezone=GMT%2B8&useSSL=false\n        username: root\n        password: xiaoyuge\n        driver-class-name: com.mysql.jdbc.Driver\n        database: dbname    ##需要配置数据库名称\n    ```\n    ```java\n    import com.github.xiaoyuge5201.config.MyDataSourceProperties;\n    import com.github.xiaoyuge5201.util.ExportDatabaseDocument;\n    import org.apache.catalina.servlet4preview.http.HttpServletRequest;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.stereotype.Controller;\n    import org.springframework.web.bind.annotation.GetMapping;\n    import org.springframework.web.bind.annotation.RequestMapping;\n    import javax.servlet.http.HttpServletResponse;\n    \n    @Controller\n    @RequestMapping(\"/export\")\n    public class TestController {\n    \n        @Autowired\n        MyDataSourceProperties properties;\n    \n        /**\n         * 注意：需要在yaml /yml 配置文件中配置spring.datasource.database 属性\n         */\n        @GetMapping(\"/index\")\n        public void index(HttpServletResponse response, HttpServletRequest request) {\n            ExportDatabaseDocument.export(response, request, properties); \n        }\n    }\n    ```\n\n2. 自定义导出某个数据库的表结构信息\n    ```java\n    @GetMapping(\"/index\")\n    public void index(HttpServletResponse response, HttpServletRequest request) {\n        //手动传参\n        ExportDatabaseDocument.export(response, request, DatabaseDriverEnum.MYSQL.getDriver(), \"127.0.0.1:3306\", \"root\", \"xiaoyuge\", \"dbname\");\n    }\n    ```\n\n### 3. 导出文档\n执行请求：localhost:8080/export/index 即可；导出的内容如下：\n![导出的数据库文档](./export-database-file/1.png)\n\n包括数据库表名、描述以及各个字段的类型、长度、默认值、描述等。。。；\n\n另外sheet的名称为表名(表中文名)+ 4位随机值，受限于excel的sheet；\n\n\n### 4. 数据库操作类 DataSourceClient\n1. DataSourceClient类中根据MyDataSourceProperties操作数据库\n    ```java\n    /**\n    * 查询所有的表结构信息\n    *\n    * @return 表结构列表\n    */\n    public List<String> findAllTables() {\n        return QuerySqlUtil.findAllTables(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());\n    }\n\n    /**\n     * 查詢數據庫表的字段信息\n     *\n     * @param table 数据表\n     * @return 表字段列表\n     */\n    public List<ColumnEntity> queryTableFieldsEntity(String table) {\n        return QuerySqlUtil.queryTableFieldsToColumnEntity(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);\n    }\n\n    /**\n     * 查詢數據庫表的字段信息\n     *\n     * @param table 数据表\n     * @return 表字段列表\n     */\n    public List<String> queryTableFields(String table) {\n        return QuerySqlUtil.queryTableFields(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);\n    }\n\n    /**\n     * 查询对应库下所有字段 信息\n     *\n     * @return 结果\n     */\n    public List<ColumnEntity> listColumnsByDatasourceParams() {\n        return QuerySqlUtil.listColumnsByDatasourceParams(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());\n    }\n\n    /**\n     * 分页查询数据表数据\n     *\n     * @param table  数据表\n     * @param pageNo 页码\n     * @param limit  页容量\n     * @param columns 字段列表\n     * @throws Exception 异常信息\n     * @return 结果\n     */\n    public JSONArray queryPageData(String table, List<String> columns, Integer pageNo, Integer limit) throws Exception {\n        return QuerySqlUtil.queryPageData(properties.getDriverClassName(), properties.getDatabase(), table, properties.getUrl(), properties.getUsername(), properties.getPassword(), columns, pageNo, limit);\n    }\n\n    /**\n     * 导出数据库设计文档\n     *\n     * @param response 返回对象\n     * @param request  请求对象\n     */\n    public void exportDatabaseDocument(HttpServletResponse response, HttpServletRequest request) {\n        ExportDatabaseDocument.export(response, request, properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());\n    }\n   ```\n   \n### 5. 数据库驱动枚举类 DatabaseDriverEnum\n```java\n/**\n * 数驱动的常量\n *\n * @author yugb\n */\npublic enum DatabaseDriverEnum {\n\n    /**\n     * mysql数据库\n     */\n    MYSQL(1, \"com.mysql.jdbc.Driver\", \"mysql数据库\"),\n    /**\n     * Sql Server数据库\n     */\n    SQL_SERVER(2, \"com.microsoft.sqlserver.jdbc.SQLServerDriver\", \"Sql Server数据库\"),\n    /**\n     * oracle数据库\n     */\n    ORACLE(3, \"oracle.jdbc.driver.OracleDriver\", \"oracle数据库\"),\n    /**\n     * postgre sql数据库\n     */\n    POSTGRE_SQL(4, \"org.postgresql.Driver\", \"postgre sql数据库\"),\n    /**\n     * 达梦数据库\n     */\n    DM(5, \"dm.jdbc.driver.DmDriver\", \"达梦数据库\");\n    /**\n     * 数据库驱动类型\n     */\n    private final Integer type;\n    /**\n     * 数据库驱动连接\n     */\n    private final String driver;\n    /**\n     * 名称\n     */\n    private final String name;\n\n    public Integer getType() {\n        return type;\n    }\n\n    public String getDriver() {\n        return driver;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    DatabaseDriverEnum(Integer type, String driver, String name) {\n        this.type = type;\n        this.driver = driver;\n        this.name = name;\n    }\n\n    /**\n     * 根据数据库类型获取数据库驱动\n     * @param type 数据库类型\n     * @return 驱动\n     */\n    public static String getValue(Integer type) {\n        DatabaseDriverEnum[] enums = values();\n        for (DatabaseDriverEnum driverEnum : enums) {\n            if (driverEnum.type.equals(type)) {\n                return driverEnum.getDriver();\n            }\n        }\n        return null;\n    }\n}\n\n```","source":"_posts/2022/04/export-database-file.md","raw":"---\ntitle: 基于Springboot导出数据库表结构文档\ncomments: true\ntags: java\ncategories: java\ntranslate_title: export_database_file\nabbrlink: 54350\ndate: 2022-04-15 11:46:03\n---\n在项目中经常会需要查询数据库所有的表以及表字段，然后可能还需要导出到Excel中，然后自己写了一个工具类，目前支持sqlserver、mysql、oracle、Postgre；如果有问题请留言！！！\n### 1. 引入依赖包\n```xml\n <!-- 请尽量用最新版本 -->\n <dependency>\n    <groupId>com.github.xiaoyuge5201</groupId>\n    <artifactId>datasource-spring-boot-starter</artifactId>\n    <version>2.1</version>\n</dependency>\n```\n\n### 2. 编写Java代码\n1. 通过MyDataSourceProperties类所有本项目的数据库连接信息，导出当前连接库的数据库结构\n    ```yaml\n    spring:\n      datasource:\n        type: com.alibaba.druid.pool.DruidDataSource\n        url: jdbc:mysql://localhost:3306/dbname?serverTimezone=GMT%2B8&useSSL=false\n        username: root\n        password: xiaoyuge\n        driver-class-name: com.mysql.jdbc.Driver\n        database: dbname    ##需要配置数据库名称\n    ```\n    ```java\n    import com.github.xiaoyuge5201.config.MyDataSourceProperties;\n    import com.github.xiaoyuge5201.util.ExportDatabaseDocument;\n    import org.apache.catalina.servlet4preview.http.HttpServletRequest;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.stereotype.Controller;\n    import org.springframework.web.bind.annotation.GetMapping;\n    import org.springframework.web.bind.annotation.RequestMapping;\n    import javax.servlet.http.HttpServletResponse;\n    \n    @Controller\n    @RequestMapping(\"/export\")\n    public class TestController {\n    \n        @Autowired\n        MyDataSourceProperties properties;\n    \n        /**\n         * 注意：需要在yaml /yml 配置文件中配置spring.datasource.database 属性\n         */\n        @GetMapping(\"/index\")\n        public void index(HttpServletResponse response, HttpServletRequest request) {\n            ExportDatabaseDocument.export(response, request, properties); \n        }\n    }\n    ```\n\n2. 自定义导出某个数据库的表结构信息\n    ```java\n    @GetMapping(\"/index\")\n    public void index(HttpServletResponse response, HttpServletRequest request) {\n        //手动传参\n        ExportDatabaseDocument.export(response, request, DatabaseDriverEnum.MYSQL.getDriver(), \"127.0.0.1:3306\", \"root\", \"xiaoyuge\", \"dbname\");\n    }\n    ```\n\n### 3. 导出文档\n执行请求：localhost:8080/export/index 即可；导出的内容如下：\n![导出的数据库文档](./export-database-file/1.png)\n\n包括数据库表名、描述以及各个字段的类型、长度、默认值、描述等。。。；\n\n另外sheet的名称为表名(表中文名)+ 4位随机值，受限于excel的sheet；\n\n\n### 4. 数据库操作类 DataSourceClient\n1. DataSourceClient类中根据MyDataSourceProperties操作数据库\n    ```java\n    /**\n    * 查询所有的表结构信息\n    *\n    * @return 表结构列表\n    */\n    public List<String> findAllTables() {\n        return QuerySqlUtil.findAllTables(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());\n    }\n\n    /**\n     * 查詢數據庫表的字段信息\n     *\n     * @param table 数据表\n     * @return 表字段列表\n     */\n    public List<ColumnEntity> queryTableFieldsEntity(String table) {\n        return QuerySqlUtil.queryTableFieldsToColumnEntity(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);\n    }\n\n    /**\n     * 查詢數據庫表的字段信息\n     *\n     * @param table 数据表\n     * @return 表字段列表\n     */\n    public List<String> queryTableFields(String table) {\n        return QuerySqlUtil.queryTableFields(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);\n    }\n\n    /**\n     * 查询对应库下所有字段 信息\n     *\n     * @return 结果\n     */\n    public List<ColumnEntity> listColumnsByDatasourceParams() {\n        return QuerySqlUtil.listColumnsByDatasourceParams(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());\n    }\n\n    /**\n     * 分页查询数据表数据\n     *\n     * @param table  数据表\n     * @param pageNo 页码\n     * @param limit  页容量\n     * @param columns 字段列表\n     * @throws Exception 异常信息\n     * @return 结果\n     */\n    public JSONArray queryPageData(String table, List<String> columns, Integer pageNo, Integer limit) throws Exception {\n        return QuerySqlUtil.queryPageData(properties.getDriverClassName(), properties.getDatabase(), table, properties.getUrl(), properties.getUsername(), properties.getPassword(), columns, pageNo, limit);\n    }\n\n    /**\n     * 导出数据库设计文档\n     *\n     * @param response 返回对象\n     * @param request  请求对象\n     */\n    public void exportDatabaseDocument(HttpServletResponse response, HttpServletRequest request) {\n        ExportDatabaseDocument.export(response, request, properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());\n    }\n   ```\n   \n### 5. 数据库驱动枚举类 DatabaseDriverEnum\n```java\n/**\n * 数驱动的常量\n *\n * @author yugb\n */\npublic enum DatabaseDriverEnum {\n\n    /**\n     * mysql数据库\n     */\n    MYSQL(1, \"com.mysql.jdbc.Driver\", \"mysql数据库\"),\n    /**\n     * Sql Server数据库\n     */\n    SQL_SERVER(2, \"com.microsoft.sqlserver.jdbc.SQLServerDriver\", \"Sql Server数据库\"),\n    /**\n     * oracle数据库\n     */\n    ORACLE(3, \"oracle.jdbc.driver.OracleDriver\", \"oracle数据库\"),\n    /**\n     * postgre sql数据库\n     */\n    POSTGRE_SQL(4, \"org.postgresql.Driver\", \"postgre sql数据库\"),\n    /**\n     * 达梦数据库\n     */\n    DM(5, \"dm.jdbc.driver.DmDriver\", \"达梦数据库\");\n    /**\n     * 数据库驱动类型\n     */\n    private final Integer type;\n    /**\n     * 数据库驱动连接\n     */\n    private final String driver;\n    /**\n     * 名称\n     */\n    private final String name;\n\n    public Integer getType() {\n        return type;\n    }\n\n    public String getDriver() {\n        return driver;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    DatabaseDriverEnum(Integer type, String driver, String name) {\n        this.type = type;\n        this.driver = driver;\n        this.name = name;\n    }\n\n    /**\n     * 根据数据库类型获取数据库驱动\n     * @param type 数据库类型\n     * @return 驱动\n     */\n    public static String getValue(Integer type) {\n        DatabaseDriverEnum[] enums = values();\n        for (DatabaseDriverEnum driverEnum : enums) {\n            if (driverEnum.type.equals(type)) {\n                return driverEnum.getDriver();\n            }\n        }\n        return null;\n    }\n}\n\n```","slug":"export-database-file","published":1,"updated":"2022-04-17T04:57:35.048Z","layout":"post","photos":[],"link":"","_id":"cl235zcvx000swjpjb7moeqls","content":"<p>在项目中经常会需要查询数据库所有的表以及表字段，然后可能还需要导出到Excel中，然后自己写了一个工具类，目前支持sqlserver、mysql、oracle、Postgre；如果有问题请留言！！！</p>\n<h3 id=\"1-引入依赖包\"><a class=\"markdownIt-Anchor\" href=\"#1-引入依赖包\"></a> 1. 引入依赖包</h3>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">&lt;!-- 请尽量用最新版本 --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.xiaoyuge5201<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>datasource-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-编写java代码\"><a class=\"markdownIt-Anchor\" href=\"#2-编写java代码\"></a> 2. 编写Java代码</h3>\n<ol>\n<li>\n<p>通过MyDataSourceProperties类所有本项目的数据库连接信息，导出当前连接库的数据库结构</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/dbname?serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">xiaoyuge</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span> <span class=\"string\">dbname</span>    <span class=\"comment\">##需要配置数据库名称</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.github.xiaoyuge5201.config.MyDataSourceProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.xiaoyuge5201.util.ExportDatabaseDocument;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.catalina.servlet4preview.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/export&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    MyDataSourceProperties properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注意：需要在yaml /yml 配置文件中配置spring.datasource.database 属性</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/index&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">index</span><span class=\"params\">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        ExportDatabaseDocument.export(response, request, properties); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>自定义导出某个数据库的表结构信息</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/index&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">index</span><span class=\"params\">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//手动传参</span></span><br><span class=\"line\">    ExportDatabaseDocument.export(response, request, DatabaseDriverEnum.MYSQL.getDriver(), <span class=\"string\">&quot;127.0.0.1:3306&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;xiaoyuge&quot;</span>, <span class=\"string\">&quot;dbname&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"3-导出文档\"><a class=\"markdownIt-Anchor\" href=\"#3-导出文档\"></a> 3. 导出文档</h3>\n<p>执行请求：localhost:8080/export/index 即可；导出的内容如下：<br>\n<img src=\"/export-database-file/1.png\" alt=\"导出的数据库文档\"></p>\n<p>包括数据库表名、描述以及各个字段的类型、长度、默认值、描述等。。。；</p>\n<p>另外sheet的名称为表名(表中文名)+ 4位随机值，受限于excel的sheet；</p>\n<h3 id=\"4-数据库操作类-datasourceclient\"><a class=\"markdownIt-Anchor\" href=\"#4-数据库操作类-datasourceclient\"></a> 4. 数据库操作类 DataSourceClient</h3>\n<ol>\n<li>DataSourceClient类中根据MyDataSourceProperties操作数据库 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 查询所有的表结构信息</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> 表结构列表</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">findAllTables</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.findAllTables(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查詢數據庫表的字段信息</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> table 数据表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 表字段列表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;ColumnEntity&gt; <span class=\"title\">queryTableFieldsEntity</span><span class=\"params\">(String table)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.queryTableFieldsToColumnEntity(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查詢數據庫表的字段信息</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> table 数据表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 表字段列表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">queryTableFields</span><span class=\"params\">(String table)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.queryTableFields(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查询对应库下所有字段 信息</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;ColumnEntity&gt; <span class=\"title\">listColumnsByDatasourceParams</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.listColumnsByDatasourceParams(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 分页查询数据表数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> table  数据表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pageNo 页码</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> limit  页容量</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> columns 字段列表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception 异常信息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> JSONArray <span class=\"title\">queryPageData</span><span class=\"params\">(String table, List&lt;String&gt; columns, Integer pageNo, Integer limit)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.queryPageData(properties.getDriverClassName(), properties.getDatabase(), table, properties.getUrl(), properties.getUsername(), properties.getPassword(), columns, pageNo, limit);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 导出数据库设计文档</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> response 返回对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> request  请求对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exportDatabaseDocument</span><span class=\"params\">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    ExportDatabaseDocument.export(response, request, properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"5-数据库驱动枚举类-databasedriverenum\"><a class=\"markdownIt-Anchor\" href=\"#5-数据库驱动枚举类-databasedriverenum\"></a> 5. 数据库驱动枚举类 DatabaseDriverEnum</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数驱动的常量</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> yugb</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">DatabaseDriverEnum</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * mysql数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    MYSQL(<span class=\"number\">1</span>, <span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>, <span class=\"string\">&quot;mysql数据库&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sql Server数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    SQL_SERVER(<span class=\"number\">2</span>, <span class=\"string\">&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;</span>, <span class=\"string\">&quot;Sql Server数据库&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * oracle数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ORACLE(<span class=\"number\">3</span>, <span class=\"string\">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>, <span class=\"string\">&quot;oracle数据库&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * postgre sql数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    POSTGRE_SQL(<span class=\"number\">4</span>, <span class=\"string\">&quot;org.postgresql.Driver&quot;</span>, <span class=\"string\">&quot;postgre sql数据库&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 达梦数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    DM(<span class=\"number\">5</span>, <span class=\"string\">&quot;dm.jdbc.driver.DmDriver&quot;</span>, <span class=\"string\">&quot;达梦数据库&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据库驱动类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Integer type;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据库驱动连接</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String driver;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDriver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> driver;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    DatabaseDriverEnum(Integer type, String driver, String name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.driver = driver;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据数据库类型获取数据库驱动</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> type 数据库类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 驱动</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getValue</span><span class=\"params\">(Integer type)</span> </span>&#123;</span><br><span class=\"line\">        DatabaseDriverEnum[] enums = values();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (DatabaseDriverEnum driverEnum : enums) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (driverEnum.type.equals(type)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> driverEnum.getDriver();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>在项目中经常会需要查询数据库所有的表以及表字段，然后可能还需要导出到Excel中，然后自己写了一个工具类，目前支持sqlserver、mysql、oracle、Postgre；如果有问题请留言！！！</p>\n<h3 id=\"1-引入依赖包\"><a class=\"markdownIt-Anchor\" href=\"#1-引入依赖包\"></a> 1. 引入依赖包</h3>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">&lt;!-- 请尽量用最新版本 --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.xiaoyuge5201<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>datasource-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-编写java代码\"><a class=\"markdownIt-Anchor\" href=\"#2-编写java代码\"></a> 2. 编写Java代码</h3>\n<ol>\n<li>\n<p>通过MyDataSourceProperties类所有本项目的数据库连接信息，导出当前连接库的数据库结构</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/dbname?serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">xiaoyuge</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span> <span class=\"string\">dbname</span>    <span class=\"comment\">##需要配置数据库名称</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.github.xiaoyuge5201.config.MyDataSourceProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.xiaoyuge5201.util.ExportDatabaseDocument;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.catalina.servlet4preview.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/export&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    MyDataSourceProperties properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注意：需要在yaml /yml 配置文件中配置spring.datasource.database 属性</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/index&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">index</span><span class=\"params\">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        ExportDatabaseDocument.export(response, request, properties); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>自定义导出某个数据库的表结构信息</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/index&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">index</span><span class=\"params\">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//手动传参</span></span><br><span class=\"line\">    ExportDatabaseDocument.export(response, request, DatabaseDriverEnum.MYSQL.getDriver(), <span class=\"string\">&quot;127.0.0.1:3306&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;xiaoyuge&quot;</span>, <span class=\"string\">&quot;dbname&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"3-导出文档\"><a class=\"markdownIt-Anchor\" href=\"#3-导出文档\"></a> 3. 导出文档</h3>\n<p>执行请求：localhost:8080/export/index 即可；导出的内容如下：<br>\n<img src=\"/export-database-file/1.png\" alt=\"导出的数据库文档\"></p>\n<p>包括数据库表名、描述以及各个字段的类型、长度、默认值、描述等。。。；</p>\n<p>另外sheet的名称为表名(表中文名)+ 4位随机值，受限于excel的sheet；</p>\n<h3 id=\"4-数据库操作类-datasourceclient\"><a class=\"markdownIt-Anchor\" href=\"#4-数据库操作类-datasourceclient\"></a> 4. 数据库操作类 DataSourceClient</h3>\n<ol>\n<li>DataSourceClient类中根据MyDataSourceProperties操作数据库 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 查询所有的表结构信息</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> 表结构列表</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">findAllTables</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.findAllTables(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查詢數據庫表的字段信息</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> table 数据表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 表字段列表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;ColumnEntity&gt; <span class=\"title\">queryTableFieldsEntity</span><span class=\"params\">(String table)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.queryTableFieldsToColumnEntity(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查詢數據庫表的字段信息</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> table 数据表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 表字段列表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">queryTableFields</span><span class=\"params\">(String table)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.queryTableFields(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查询对应库下所有字段 信息</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;ColumnEntity&gt; <span class=\"title\">listColumnsByDatasourceParams</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.listColumnsByDatasourceParams(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 分页查询数据表数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> table  数据表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pageNo 页码</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> limit  页容量</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> columns 字段列表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception 异常信息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> JSONArray <span class=\"title\">queryPageData</span><span class=\"params\">(String table, List&lt;String&gt; columns, Integer pageNo, Integer limit)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuerySqlUtil.queryPageData(properties.getDriverClassName(), properties.getDatabase(), table, properties.getUrl(), properties.getUsername(), properties.getPassword(), columns, pageNo, limit);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 导出数据库设计文档</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> response 返回对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> request  请求对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exportDatabaseDocument</span><span class=\"params\">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    ExportDatabaseDocument.export(response, request, properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"5-数据库驱动枚举类-databasedriverenum\"><a class=\"markdownIt-Anchor\" href=\"#5-数据库驱动枚举类-databasedriverenum\"></a> 5. 数据库驱动枚举类 DatabaseDriverEnum</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数驱动的常量</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> yugb</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">DatabaseDriverEnum</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * mysql数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    MYSQL(<span class=\"number\">1</span>, <span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>, <span class=\"string\">&quot;mysql数据库&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sql Server数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    SQL_SERVER(<span class=\"number\">2</span>, <span class=\"string\">&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;</span>, <span class=\"string\">&quot;Sql Server数据库&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * oracle数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ORACLE(<span class=\"number\">3</span>, <span class=\"string\">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>, <span class=\"string\">&quot;oracle数据库&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * postgre sql数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    POSTGRE_SQL(<span class=\"number\">4</span>, <span class=\"string\">&quot;org.postgresql.Driver&quot;</span>, <span class=\"string\">&quot;postgre sql数据库&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 达梦数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    DM(<span class=\"number\">5</span>, <span class=\"string\">&quot;dm.jdbc.driver.DmDriver&quot;</span>, <span class=\"string\">&quot;达梦数据库&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据库驱动类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Integer type;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据库驱动连接</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String driver;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDriver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> driver;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    DatabaseDriverEnum(Integer type, String driver, String name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.driver = driver;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据数据库类型获取数据库驱动</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> type 数据库类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 驱动</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getValue</span><span class=\"params\">(Integer type)</span> </span>&#123;</span><br><span class=\"line\">        DatabaseDriverEnum[] enums = values();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (DatabaseDriverEnum driverEnum : enums) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (driverEnum.type.equals(type)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> driverEnum.getDriver();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"LockSupport一个很灵活的线程工具类","comments":1,"translate_title":"locksupport-learning","abbrlink":41846,"date":"2021-09-25T04:59:36.000Z","_content":"LockSupport是一个编程工具类， 主要是为了阻塞和唤醒线程用的。所有的方法都是静态方法，可以让线程在任意位置阻塞，也可以在任意位置唤醒\n\n主要的方法： park(阻塞线程)  和  unpark(启动唤醒线程)\n```java\n//源码\npackage java.util.concurrent.locks;\nimport sun.misc.Unsafe;\n \npublic class LockSupport {\n    private LockSupport() {} // Cannot be instantiated.\n\n    private static void setBlocker(Thread t, Object arg) {\n        // Even though volatile, hotspot doesn't need a write barrier here.\n        UNSAFE.putObject(t, parkBlockerOffset, arg);\n    }\n\n    /**\n     * @param thread the thread to unpark, or {@code null}, in which case\n     *        this operation has no effect\n     */\n    public static void unpark(Thread thread) {\n        if (thread != null)\n            UNSAFE.unpark(thread);\n    }\n\n    /**\n     * 阻塞当前线程\n     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。\n     * @param blocker the synchronization object responsible for this\n     *        thread parking\n     * @since 1.6\n     */\n    public static void park(Object blocker) {\n        Thread t = Thread.currentThread();\n        //setBlocker作用是记录t线程是被broker阻塞的\n        setBlocker(t, blocker);\n        //UNSAFE是一个非常强大的类，他的的操作是基于底层的\n        UNSAFE.park(false, 0L);\n        setBlocker(t, null);\n    }\n\n    /**\n     * 暂停当前线程，有超时时间\n     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。\n     * @param blocker the synchronization object responsible for this\n     *        thread parking\n     * @param nanos the maximum number of nanoseconds to wait\n     * @since 1.6\n     */\n    public static void parkNanos(Object blocker, long nanos) {\n        if (nanos > 0) {\n            Thread t = Thread.currentThread();\n            setBlocker(t, blocker);\n            UNSAFE.park(false, nanos);\n            setBlocker(t, null);\n        }\n    }\n\n    /**\n     * 暂停当前线程，知道某个时间\n     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。\n     * @param blocker the synchronization object responsible for this\n     *        thread parking\n     * @param deadline the absolute time, in milliseconds from the Epoch,\n     *        to wait until\n     * @since 1.6\n     */\n    public static void parkUntil(Object blocker, long deadline) {\n        Thread t = Thread.currentThread();\n        setBlocker(t, blocker);\n        UNSAFE.park(true, deadline);\n        setBlocker(t, null);\n    }\n\n    /**\n     * Returns the blocker object supplied to the most recent\n     * invocation of a park method that has not yet unblocked, or null\n     * if not blocked.  The value returned is just a momentary\n     * snapshot -- the thread may have since unblocked or blocked on a\n     * different blocker object.\n     *\n     * @param t the thread\n     * @return the blocker\n     * @throws NullPointerException if argument is null\n     * @since 1.6\n     */\n    public static Object getBlocker(Thread t) {\n        if (t == null)\n            throw new NullPointerException();\n        return UNSAFE.getObjectVolatile(t, parkBlockerOffset);\n    }\n\n    /**\n     * 无期限暂停当前线程\n     */\n    public static void park() {\n        UNSAFE.park(false, 0L);\n    }\n\n    /**\n     * 暂停当前线程，不过有超时时间限制\n     */\n    public static void parkNanos(long nanos) {\n        if (nanos > 0)\n            UNSAFE.park(false, nanos);\n    }\n\n    /**\n     * 暂停当前线程，知道某个时间\n     * @param deadline 暂停结束时间\n     */\n    public static void parkUntil(long deadline) {\n        UNSAFE.park(true, deadline);\n    }\n\n    /**\n     * Returns the pseudo-randomly initialized or updated secondary seed.\n     * Copied from ThreadLocalRandom due to package access restrictions.\n     */\n    static final int nextSecondarySeed() {\n        int r;\n        Thread t = Thread.currentThread();\n        if ((r = UNSAFE.getInt(t, SECONDARY)) != 0) {\n            r ^= r << 13;   // xorshift\n            r ^= r >>> 17;\n            r ^= r << 5;\n        }\n        else if ((r = java.util.concurrent.ThreadLocalRandom.current().nextInt()) == 0)\n            r = 1; // avoid zero\n        UNSAFE.putInt(t, SECONDARY, r);\n        return r;\n    }\n\n    // Hotspot implementation via intrinsics API\n    private static final sun.misc.Unsafe UNSAFE;\n    private static final long parkBlockerOffset;\n    private static final long SEED;\n    private static final long PROBE;\n    private static final long SECONDARY;\n    static {\n        try {\n            UNSAFE = sun.misc.Unsafe.getUnsafe();\n            Class<?> tk = Thread.class;\n            parkBlockerOffset = UNSAFE.objectFieldOffset\n                (tk.getDeclaredField(\"parkBlocker\"));\n            SEED = UNSAFE.objectFieldOffset\n                (tk.getDeclaredField(\"threadLocalRandomSeed\"));\n            PROBE = UNSAFE.objectFieldOffset\n                (tk.getDeclaredField(\"threadLocalRandomProbe\"));\n            SECONDARY = UNSAFE.objectFieldOffset\n                (tk.getDeclaredField(\"threadLocalRandomSecondarySeed\"));\n        } catch (Exception ex) { throw new Error(ex); }\n    }\n}\n\n```\n### 与wait / notify对比\nLockSupport是用来阻塞和环线线程的，wait/notify同样也是，那么两者的区别是什么？\n- wait和notify都是Object中的方法，在调用这两个方法前必须获得锁对象，但是park不需要获取某个对象的锁就可以锁住线程\n- notify只能随机选择一个线程唤醒，无法唤醒指定的线程，unpark可以唤醒一个指定的线程\n\n### LockSupport使用\n#### 1. 先interrupt在park\n```java\npublic class LockSupportTest {\n\n    public static class MyThread extends  Thread{\n        @Override\n        public void run() {\n            System.out.println(getName() + \"进入线程\");\n            LockSupport.park();\n            System.out.println(\"运行结束\");\n            System.out.println(\"是否中断：\"+Thread.currentThread().isInterrupted());\n        }\n    }\n\n    public static void main(String[] args) {\n        MyThread thread = new MyThread();\n        thread.start();\n        System.out.println(\"线程启动了，但是在内部进行了park\");\n        thread.interrupt();\n        System.out.println(\"main 线程结束\");\n    }\n}\n//输出\n//       线程启动了，但是在内部进行了park\n//       main 线程结束\n//       Thread-0进入线程\n//       运行结束\n```\n#### 2. 先park在interrupt\n```java\npublic static class MyThread extends  Thread{\n    @Override\n    public void run() {\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(getName() + \"进入线程\");\n        LockSupport.park();\n        System.out.println(\"运行结束\");\n    }\n}\n/**\n * 输出：\n * 线程启动了，但是在内部进行了park\n * main 线程结束\n * Thread-0进入线程\n * 运行结束\n */\n```\n\n### 趣味题\n用两个线程，一个输出字母，一个输出数字交替输出如：1A2B3C4D...\n```java\npublic class ThreadDemoTest {\n    static Thread t1 = null, t2 = null;\n    public static void main(String[] args) {\n        char[] a = \"1234567\".toCharArray();\n        char[] b = \"ABCDEFG\".toCharArray();\n\n        t1 = new Thread(() -> {\n            for (char i : a) {\n                System.out.print(i);\n                LockSupport.unpark(t2);\n                LockSupport.park();\n            }\n        }, \"t1\");\n\n        t2 = new Thread(() -> {\n            for (char i : b) {\n                LockSupport.park();\n                System.out.print(i);\n                LockSupport.unpark(t1);\n            }\n        }, \"t1\");\n        t1.start();\n        t2.start();\n    }\n}\n//输出：  1A2B3C4D5E6F7G\n```\n使用自旋锁也可以实现上面的结果\n```java\npublic class CasTest {\n    //定义枚举，包含两个变量\n    enum ReadyToRun{T1, T2};\n\n    static volatile ReadyToRun r = ReadyToRun.T1;\n\n    public static void main(String[] args) {\n\n        char[] a = \"1234567\".toCharArray();\n        char[] b = \"ABCDEFG\".toCharArray();\n\n        new Thread(()->{\n            for (char c : a){\n                //当r不为T1时， 空转占着cpu等待，然后输出字符，将r的值设置为T2\n                while (r != ReadyToRun.T1){}\n                System.out.print(c+\" \");\n                r = ReadyToRun.T2;\n            }\n        },\"t1\").start();\n        new Thread(()->{\n            for (char c : b){\n                while (r != ReadyToRun.T2){}\n                System.out.print(c+\" \");\n                r = ReadyToRun.T1;\n            }\n        },\"t2\").start();\n    }\n}\n```\n\n","source":"_posts/2021/09/locksupport.md","raw":"---\ntitle: LockSupport一个很灵活的线程工具类\ncomments: true\ntags: 线程\ncategories: java\ntranslate_title: locksupport-learning\nabbrlink: 41846\ndate: 2021-09-25 12:59:36\n---\nLockSupport是一个编程工具类， 主要是为了阻塞和唤醒线程用的。所有的方法都是静态方法，可以让线程在任意位置阻塞，也可以在任意位置唤醒\n\n主要的方法： park(阻塞线程)  和  unpark(启动唤醒线程)\n```java\n//源码\npackage java.util.concurrent.locks;\nimport sun.misc.Unsafe;\n \npublic class LockSupport {\n    private LockSupport() {} // Cannot be instantiated.\n\n    private static void setBlocker(Thread t, Object arg) {\n        // Even though volatile, hotspot doesn't need a write barrier here.\n        UNSAFE.putObject(t, parkBlockerOffset, arg);\n    }\n\n    /**\n     * @param thread the thread to unpark, or {@code null}, in which case\n     *        this operation has no effect\n     */\n    public static void unpark(Thread thread) {\n        if (thread != null)\n            UNSAFE.unpark(thread);\n    }\n\n    /**\n     * 阻塞当前线程\n     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。\n     * @param blocker the synchronization object responsible for this\n     *        thread parking\n     * @since 1.6\n     */\n    public static void park(Object blocker) {\n        Thread t = Thread.currentThread();\n        //setBlocker作用是记录t线程是被broker阻塞的\n        setBlocker(t, blocker);\n        //UNSAFE是一个非常强大的类，他的的操作是基于底层的\n        UNSAFE.park(false, 0L);\n        setBlocker(t, null);\n    }\n\n    /**\n     * 暂停当前线程，有超时时间\n     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。\n     * @param blocker the synchronization object responsible for this\n     *        thread parking\n     * @param nanos the maximum number of nanoseconds to wait\n     * @since 1.6\n     */\n    public static void parkNanos(Object blocker, long nanos) {\n        if (nanos > 0) {\n            Thread t = Thread.currentThread();\n            setBlocker(t, blocker);\n            UNSAFE.park(false, nanos);\n            setBlocker(t, null);\n        }\n    }\n\n    /**\n     * 暂停当前线程，知道某个时间\n     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。\n     * @param blocker the synchronization object responsible for this\n     *        thread parking\n     * @param deadline the absolute time, in milliseconds from the Epoch,\n     *        to wait until\n     * @since 1.6\n     */\n    public static void parkUntil(Object blocker, long deadline) {\n        Thread t = Thread.currentThread();\n        setBlocker(t, blocker);\n        UNSAFE.park(true, deadline);\n        setBlocker(t, null);\n    }\n\n    /**\n     * Returns the blocker object supplied to the most recent\n     * invocation of a park method that has not yet unblocked, or null\n     * if not blocked.  The value returned is just a momentary\n     * snapshot -- the thread may have since unblocked or blocked on a\n     * different blocker object.\n     *\n     * @param t the thread\n     * @return the blocker\n     * @throws NullPointerException if argument is null\n     * @since 1.6\n     */\n    public static Object getBlocker(Thread t) {\n        if (t == null)\n            throw new NullPointerException();\n        return UNSAFE.getObjectVolatile(t, parkBlockerOffset);\n    }\n\n    /**\n     * 无期限暂停当前线程\n     */\n    public static void park() {\n        UNSAFE.park(false, 0L);\n    }\n\n    /**\n     * 暂停当前线程，不过有超时时间限制\n     */\n    public static void parkNanos(long nanos) {\n        if (nanos > 0)\n            UNSAFE.park(false, nanos);\n    }\n\n    /**\n     * 暂停当前线程，知道某个时间\n     * @param deadline 暂停结束时间\n     */\n    public static void parkUntil(long deadline) {\n        UNSAFE.park(true, deadline);\n    }\n\n    /**\n     * Returns the pseudo-randomly initialized or updated secondary seed.\n     * Copied from ThreadLocalRandom due to package access restrictions.\n     */\n    static final int nextSecondarySeed() {\n        int r;\n        Thread t = Thread.currentThread();\n        if ((r = UNSAFE.getInt(t, SECONDARY)) != 0) {\n            r ^= r << 13;   // xorshift\n            r ^= r >>> 17;\n            r ^= r << 5;\n        }\n        else if ((r = java.util.concurrent.ThreadLocalRandom.current().nextInt()) == 0)\n            r = 1; // avoid zero\n        UNSAFE.putInt(t, SECONDARY, r);\n        return r;\n    }\n\n    // Hotspot implementation via intrinsics API\n    private static final sun.misc.Unsafe UNSAFE;\n    private static final long parkBlockerOffset;\n    private static final long SEED;\n    private static final long PROBE;\n    private static final long SECONDARY;\n    static {\n        try {\n            UNSAFE = sun.misc.Unsafe.getUnsafe();\n            Class<?> tk = Thread.class;\n            parkBlockerOffset = UNSAFE.objectFieldOffset\n                (tk.getDeclaredField(\"parkBlocker\"));\n            SEED = UNSAFE.objectFieldOffset\n                (tk.getDeclaredField(\"threadLocalRandomSeed\"));\n            PROBE = UNSAFE.objectFieldOffset\n                (tk.getDeclaredField(\"threadLocalRandomProbe\"));\n            SECONDARY = UNSAFE.objectFieldOffset\n                (tk.getDeclaredField(\"threadLocalRandomSecondarySeed\"));\n        } catch (Exception ex) { throw new Error(ex); }\n    }\n}\n\n```\n### 与wait / notify对比\nLockSupport是用来阻塞和环线线程的，wait/notify同样也是，那么两者的区别是什么？\n- wait和notify都是Object中的方法，在调用这两个方法前必须获得锁对象，但是park不需要获取某个对象的锁就可以锁住线程\n- notify只能随机选择一个线程唤醒，无法唤醒指定的线程，unpark可以唤醒一个指定的线程\n\n### LockSupport使用\n#### 1. 先interrupt在park\n```java\npublic class LockSupportTest {\n\n    public static class MyThread extends  Thread{\n        @Override\n        public void run() {\n            System.out.println(getName() + \"进入线程\");\n            LockSupport.park();\n            System.out.println(\"运行结束\");\n            System.out.println(\"是否中断：\"+Thread.currentThread().isInterrupted());\n        }\n    }\n\n    public static void main(String[] args) {\n        MyThread thread = new MyThread();\n        thread.start();\n        System.out.println(\"线程启动了，但是在内部进行了park\");\n        thread.interrupt();\n        System.out.println(\"main 线程结束\");\n    }\n}\n//输出\n//       线程启动了，但是在内部进行了park\n//       main 线程结束\n//       Thread-0进入线程\n//       运行结束\n```\n#### 2. 先park在interrupt\n```java\npublic static class MyThread extends  Thread{\n    @Override\n    public void run() {\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(getName() + \"进入线程\");\n        LockSupport.park();\n        System.out.println(\"运行结束\");\n    }\n}\n/**\n * 输出：\n * 线程启动了，但是在内部进行了park\n * main 线程结束\n * Thread-0进入线程\n * 运行结束\n */\n```\n\n### 趣味题\n用两个线程，一个输出字母，一个输出数字交替输出如：1A2B3C4D...\n```java\npublic class ThreadDemoTest {\n    static Thread t1 = null, t2 = null;\n    public static void main(String[] args) {\n        char[] a = \"1234567\".toCharArray();\n        char[] b = \"ABCDEFG\".toCharArray();\n\n        t1 = new Thread(() -> {\n            for (char i : a) {\n                System.out.print(i);\n                LockSupport.unpark(t2);\n                LockSupport.park();\n            }\n        }, \"t1\");\n\n        t2 = new Thread(() -> {\n            for (char i : b) {\n                LockSupport.park();\n                System.out.print(i);\n                LockSupport.unpark(t1);\n            }\n        }, \"t1\");\n        t1.start();\n        t2.start();\n    }\n}\n//输出：  1A2B3C4D5E6F7G\n```\n使用自旋锁也可以实现上面的结果\n```java\npublic class CasTest {\n    //定义枚举，包含两个变量\n    enum ReadyToRun{T1, T2};\n\n    static volatile ReadyToRun r = ReadyToRun.T1;\n\n    public static void main(String[] args) {\n\n        char[] a = \"1234567\".toCharArray();\n        char[] b = \"ABCDEFG\".toCharArray();\n\n        new Thread(()->{\n            for (char c : a){\n                //当r不为T1时， 空转占着cpu等待，然后输出字符，将r的值设置为T2\n                while (r != ReadyToRun.T1){}\n                System.out.print(c+\" \");\n                r = ReadyToRun.T2;\n            }\n        },\"t1\").start();\n        new Thread(()->{\n            for (char c : b){\n                while (r != ReadyToRun.T2){}\n                System.out.print(c+\" \");\n                r = ReadyToRun.T1;\n            }\n        },\"t2\").start();\n    }\n}\n```\n\n","slug":"locksupport","published":1,"updated":"2022-03-27T14:06:03.442Z","layout":"post","photos":[],"link":"","_id":"cl235zcvy000vwjpjb52j3l6h","content":"<p>LockSupport是一个编程工具类， 主要是为了阻塞和唤醒线程用的。所有的方法都是静态方法，可以让线程在任意位置阻塞，也可以在任意位置唤醒</p>\n<p>主要的方法： park(阻塞线程)  和  unpark(启动唤醒线程)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//源码</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> java.util.concurrent.locks;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.Unsafe;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LockSupport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LockSupport</span><span class=\"params\">()</span> </span>&#123;&#125; <span class=\"comment\">// Cannot be instantiated.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setBlocker</span><span class=\"params\">(Thread t, Object arg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Even though volatile, hotspot doesn&#x27;t need a write barrier here.</span></span><br><span class=\"line\">        UNSAFE.putObject(t, parkBlockerOffset, arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> thread the thread to unpark, or &#123;<span class=\"doctag\">@code</span> null&#125;, in which case</span></span><br><span class=\"line\"><span class=\"comment\">     *        this operation has no effect</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">unpark</span><span class=\"params\">(Thread thread)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (thread != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            UNSAFE.unpark(thread);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 阻塞当前线程</span></span><br><span class=\"line\"><span class=\"comment\">     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> blocker the synchronization object responsible for this</span></span><br><span class=\"line\"><span class=\"comment\">     *        thread parking</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">park</span><span class=\"params\">(Object blocker)</span> </span>&#123;</span><br><span class=\"line\">        Thread t = Thread.currentThread();</span><br><span class=\"line\">        <span class=\"comment\">//setBlocker作用是记录t线程是被broker阻塞的</span></span><br><span class=\"line\">        setBlocker(t, blocker);</span><br><span class=\"line\">        <span class=\"comment\">//UNSAFE是一个非常强大的类，他的的操作是基于底层的</span></span><br><span class=\"line\">        UNSAFE.park(<span class=\"keyword\">false</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">        setBlocker(t, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停当前线程，有超时时间</span></span><br><span class=\"line\"><span class=\"comment\">     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> blocker the synchronization object responsible for this</span></span><br><span class=\"line\"><span class=\"comment\">     *        thread parking</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nanos the maximum number of nanoseconds to wait</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">parkNanos</span><span class=\"params\">(Object blocker, <span class=\"keyword\">long</span> nanos)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nanos &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            Thread t = Thread.currentThread();</span><br><span class=\"line\">            setBlocker(t, blocker);</span><br><span class=\"line\">            UNSAFE.park(<span class=\"keyword\">false</span>, nanos);</span><br><span class=\"line\">            setBlocker(t, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停当前线程，知道某个时间</span></span><br><span class=\"line\"><span class=\"comment\">     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> blocker the synchronization object responsible for this</span></span><br><span class=\"line\"><span class=\"comment\">     *        thread parking</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> deadline the absolute time, in milliseconds from the Epoch,</span></span><br><span class=\"line\"><span class=\"comment\">     *        to wait until</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">parkUntil</span><span class=\"params\">(Object blocker, <span class=\"keyword\">long</span> deadline)</span> </span>&#123;</span><br><span class=\"line\">        Thread t = Thread.currentThread();</span><br><span class=\"line\">        setBlocker(t, blocker);</span><br><span class=\"line\">        UNSAFE.park(<span class=\"keyword\">true</span>, deadline);</span><br><span class=\"line\">        setBlocker(t, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the blocker object supplied to the most recent</span></span><br><span class=\"line\"><span class=\"comment\">     * invocation of a park method that has not yet unblocked, or null</span></span><br><span class=\"line\"><span class=\"comment\">     * if not blocked.  The value returned is just a momentary</span></span><br><span class=\"line\"><span class=\"comment\">     * snapshot -- the thread may have since unblocked or blocked on a</span></span><br><span class=\"line\"><span class=\"comment\">     * different blocker object.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t the thread</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the blocker</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> NullPointerException if argument is null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">getBlocker</span><span class=\"params\">(Thread t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UNSAFE.getObjectVolatile(t, parkBlockerOffset);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 无期限暂停当前线程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">park</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        UNSAFE.park(<span class=\"keyword\">false</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停当前线程，不过有超时时间限制</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">parkNanos</span><span class=\"params\">(<span class=\"keyword\">long</span> nanos)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nanos &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            UNSAFE.park(<span class=\"keyword\">false</span>, nanos);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停当前线程，知道某个时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> deadline 暂停结束时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">parkUntil</span><span class=\"params\">(<span class=\"keyword\">long</span> deadline)</span> </span>&#123;</span><br><span class=\"line\">        UNSAFE.park(<span class=\"keyword\">true</span>, deadline);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the pseudo-randomly initialized or updated secondary seed.</span></span><br><span class=\"line\"><span class=\"comment\">     * Copied from ThreadLocalRandom due to package access restrictions.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">nextSecondarySeed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> r;</span><br><span class=\"line\">        Thread t = Thread.currentThread();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((r = UNSAFE.getInt(t, SECONDARY)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            r ^= r &lt;&lt; <span class=\"number\">13</span>;   <span class=\"comment\">// xorshift</span></span><br><span class=\"line\">            r ^= r &gt;&gt;&gt; <span class=\"number\">17</span>;</span><br><span class=\"line\">            r ^= r &lt;&lt; <span class=\"number\">5</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((r = java.util.concurrent.ThreadLocalRandom.current().nextInt()) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            r = <span class=\"number\">1</span>; <span class=\"comment\">// avoid zero</span></span><br><span class=\"line\">        UNSAFE.putInt(t, SECONDARY, r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Hotspot implementation via intrinsics API</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> parkBlockerOffset;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> SEED;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> PROBE;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> SECONDARY;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class=\"line\">            Class&lt;?&gt; tk = Thread.class;</span><br><span class=\"line\">            parkBlockerOffset = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;parkBlocker&quot;</span>));</span><br><span class=\"line\">            SEED = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;threadLocalRandomSeed&quot;</span>));</span><br><span class=\"line\">            PROBE = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;threadLocalRandomProbe&quot;</span>));</span><br><span class=\"line\">            SECONDARY = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;threadLocalRandomSecondarySeed&quot;</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(ex); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"与wait-notify对比\"><a class=\"markdownIt-Anchor\" href=\"#与wait-notify对比\"></a> 与wait / notify对比</h3>\n<p>LockSupport是用来阻塞和环线线程的，wait/notify同样也是，那么两者的区别是什么？</p>\n<ul>\n<li>wait和notify都是Object中的方法，在调用这两个方法前必须获得锁对象，但是park不需要获取某个对象的锁就可以锁住线程</li>\n<li>notify只能随机选择一个线程唤醒，无法唤醒指定的线程，unpark可以唤醒一个指定的线程</li>\n</ul>\n<h3 id=\"locksupport使用\"><a class=\"markdownIt-Anchor\" href=\"#locksupport使用\"></a> LockSupport使用</h3>\n<h4 id=\"1-先interrupt在park\"><a class=\"markdownIt-Anchor\" href=\"#1-先interrupt在park\"></a> 1. 先interrupt在park</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LockSupportTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span>  <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(getName() + <span class=\"string\">&quot;进入线程&quot;</span>);</span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;运行结束&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;是否中断：&quot;</span>+Thread.currentThread().isInterrupted());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyThread thread = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程启动了，但是在内部进行了park&quot;</span>);</span><br><span class=\"line\">        thread.interrupt();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;main 线程结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"comment\">//       线程启动了，但是在内部进行了park</span></span><br><span class=\"line\"><span class=\"comment\">//       main 线程结束</span></span><br><span class=\"line\"><span class=\"comment\">//       Thread-0进入线程</span></span><br><span class=\"line\"><span class=\"comment\">//       运行结束</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-先park在interrupt\"><a class=\"markdownIt-Anchor\" href=\"#2-先park在interrupt\"></a> 2. 先park在interrupt</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span>  <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(getName() + <span class=\"string\">&quot;进入线程&quot;</span>);</span><br><span class=\"line\">        LockSupport.park();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;运行结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 输出：</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程启动了，但是在内部进行了park</span></span><br><span class=\"line\"><span class=\"comment\"> * main 线程结束</span></span><br><span class=\"line\"><span class=\"comment\"> * Thread-0进入线程</span></span><br><span class=\"line\"><span class=\"comment\"> * 运行结束</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"趣味题\"><a class=\"markdownIt-Anchor\" href=\"#趣味题\"></a> 趣味题</h3>\n<p>用两个线程，一个输出字母，一个输出数字交替输出如：1A2B3C4D…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadDemoTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Thread t1 = <span class=\"keyword\">null</span>, t2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] a = <span class=\"string\">&quot;1234567&quot;</span>.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] b = <span class=\"string\">&quot;ABCDEFG&quot;</span>.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">        t1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> i : a) &#123;</span><br><span class=\"line\">                System.out.print(i);</span><br><span class=\"line\">                LockSupport.unpark(t2);</span><br><span class=\"line\">                LockSupport.park();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        t2 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> i : b) &#123;</span><br><span class=\"line\">                LockSupport.park();</span><br><span class=\"line\">                System.out.print(i);</span><br><span class=\"line\">                LockSupport.unpark(t1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：  1A2B3C4D5E6F7G</span></span><br></pre></td></tr></table></figure>\n<p>使用自旋锁也可以实现上面的结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CasTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义枚举，包含两个变量</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ReadyToRun</span></span>&#123;T1, T2&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> ReadyToRun r = ReadyToRun.T1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] a = <span class=\"string\">&quot;1234567&quot;</span>.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] b = <span class=\"string\">&quot;ABCDEFG&quot;</span>.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : a)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//当r不为T1时， 空转占着cpu等待，然后输出字符，将r的值设置为T2</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (r != ReadyToRun.T1)&#123;&#125;</span><br><span class=\"line\">                System.out.print(c+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">                r = ReadyToRun.T2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : b)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (r != ReadyToRun.T2)&#123;&#125;</span><br><span class=\"line\">                System.out.print(c+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">                r = ReadyToRun.T1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>LockSupport是一个编程工具类， 主要是为了阻塞和唤醒线程用的。所有的方法都是静态方法，可以让线程在任意位置阻塞，也可以在任意位置唤醒</p>\n<p>主要的方法： park(阻塞线程)  和  unpark(启动唤醒线程)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//源码</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> java.util.concurrent.locks;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.Unsafe;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LockSupport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LockSupport</span><span class=\"params\">()</span> </span>&#123;&#125; <span class=\"comment\">// Cannot be instantiated.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setBlocker</span><span class=\"params\">(Thread t, Object arg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Even though volatile, hotspot doesn&#x27;t need a write barrier here.</span></span><br><span class=\"line\">        UNSAFE.putObject(t, parkBlockerOffset, arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> thread the thread to unpark, or &#123;<span class=\"doctag\">@code</span> null&#125;, in which case</span></span><br><span class=\"line\"><span class=\"comment\">     *        this operation has no effect</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">unpark</span><span class=\"params\">(Thread thread)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (thread != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            UNSAFE.unpark(thread);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 阻塞当前线程</span></span><br><span class=\"line\"><span class=\"comment\">     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> blocker the synchronization object responsible for this</span></span><br><span class=\"line\"><span class=\"comment\">     *        thread parking</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">park</span><span class=\"params\">(Object blocker)</span> </span>&#123;</span><br><span class=\"line\">        Thread t = Thread.currentThread();</span><br><span class=\"line\">        <span class=\"comment\">//setBlocker作用是记录t线程是被broker阻塞的</span></span><br><span class=\"line\">        setBlocker(t, blocker);</span><br><span class=\"line\">        <span class=\"comment\">//UNSAFE是一个非常强大的类，他的的操作是基于底层的</span></span><br><span class=\"line\">        UNSAFE.park(<span class=\"keyword\">false</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">        setBlocker(t, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停当前线程，有超时时间</span></span><br><span class=\"line\"><span class=\"comment\">     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> blocker the synchronization object responsible for this</span></span><br><span class=\"line\"><span class=\"comment\">     *        thread parking</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nanos the maximum number of nanoseconds to wait</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">parkNanos</span><span class=\"params\">(Object blocker, <span class=\"keyword\">long</span> nanos)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nanos &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            Thread t = Thread.currentThread();</span><br><span class=\"line\">            setBlocker(t, blocker);</span><br><span class=\"line\">            UNSAFE.park(<span class=\"keyword\">false</span>, nanos);</span><br><span class=\"line\">            setBlocker(t, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停当前线程，知道某个时间</span></span><br><span class=\"line\"><span class=\"comment\">     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> blocker the synchronization object responsible for this</span></span><br><span class=\"line\"><span class=\"comment\">     *        thread parking</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> deadline the absolute time, in milliseconds from the Epoch,</span></span><br><span class=\"line\"><span class=\"comment\">     *        to wait until</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">parkUntil</span><span class=\"params\">(Object blocker, <span class=\"keyword\">long</span> deadline)</span> </span>&#123;</span><br><span class=\"line\">        Thread t = Thread.currentThread();</span><br><span class=\"line\">        setBlocker(t, blocker);</span><br><span class=\"line\">        UNSAFE.park(<span class=\"keyword\">true</span>, deadline);</span><br><span class=\"line\">        setBlocker(t, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the blocker object supplied to the most recent</span></span><br><span class=\"line\"><span class=\"comment\">     * invocation of a park method that has not yet unblocked, or null</span></span><br><span class=\"line\"><span class=\"comment\">     * if not blocked.  The value returned is just a momentary</span></span><br><span class=\"line\"><span class=\"comment\">     * snapshot -- the thread may have since unblocked or blocked on a</span></span><br><span class=\"line\"><span class=\"comment\">     * different blocker object.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t the thread</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the blocker</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> NullPointerException if argument is null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">getBlocker</span><span class=\"params\">(Thread t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UNSAFE.getObjectVolatile(t, parkBlockerOffset);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 无期限暂停当前线程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">park</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        UNSAFE.park(<span class=\"keyword\">false</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停当前线程，不过有超时时间限制</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">parkNanos</span><span class=\"params\">(<span class=\"keyword\">long</span> nanos)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nanos &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            UNSAFE.park(<span class=\"keyword\">false</span>, nanos);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停当前线程，知道某个时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> deadline 暂停结束时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">parkUntil</span><span class=\"params\">(<span class=\"keyword\">long</span> deadline)</span> </span>&#123;</span><br><span class=\"line\">        UNSAFE.park(<span class=\"keyword\">true</span>, deadline);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the pseudo-randomly initialized or updated secondary seed.</span></span><br><span class=\"line\"><span class=\"comment\">     * Copied from ThreadLocalRandom due to package access restrictions.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">nextSecondarySeed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> r;</span><br><span class=\"line\">        Thread t = Thread.currentThread();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((r = UNSAFE.getInt(t, SECONDARY)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            r ^= r &lt;&lt; <span class=\"number\">13</span>;   <span class=\"comment\">// xorshift</span></span><br><span class=\"line\">            r ^= r &gt;&gt;&gt; <span class=\"number\">17</span>;</span><br><span class=\"line\">            r ^= r &lt;&lt; <span class=\"number\">5</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((r = java.util.concurrent.ThreadLocalRandom.current().nextInt()) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            r = <span class=\"number\">1</span>; <span class=\"comment\">// avoid zero</span></span><br><span class=\"line\">        UNSAFE.putInt(t, SECONDARY, r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Hotspot implementation via intrinsics API</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> parkBlockerOffset;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> SEED;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> PROBE;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> SECONDARY;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class=\"line\">            Class&lt;?&gt; tk = Thread.class;</span><br><span class=\"line\">            parkBlockerOffset = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;parkBlocker&quot;</span>));</span><br><span class=\"line\">            SEED = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;threadLocalRandomSeed&quot;</span>));</span><br><span class=\"line\">            PROBE = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;threadLocalRandomProbe&quot;</span>));</span><br><span class=\"line\">            SECONDARY = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;threadLocalRandomSecondarySeed&quot;</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(ex); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"与wait-notify对比\"><a class=\"markdownIt-Anchor\" href=\"#与wait-notify对比\"></a> 与wait / notify对比</h3>\n<p>LockSupport是用来阻塞和环线线程的，wait/notify同样也是，那么两者的区别是什么？</p>\n<ul>\n<li>wait和notify都是Object中的方法，在调用这两个方法前必须获得锁对象，但是park不需要获取某个对象的锁就可以锁住线程</li>\n<li>notify只能随机选择一个线程唤醒，无法唤醒指定的线程，unpark可以唤醒一个指定的线程</li>\n</ul>\n<h3 id=\"locksupport使用\"><a class=\"markdownIt-Anchor\" href=\"#locksupport使用\"></a> LockSupport使用</h3>\n<h4 id=\"1-先interrupt在park\"><a class=\"markdownIt-Anchor\" href=\"#1-先interrupt在park\"></a> 1. 先interrupt在park</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LockSupportTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span>  <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(getName() + <span class=\"string\">&quot;进入线程&quot;</span>);</span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;运行结束&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;是否中断：&quot;</span>+Thread.currentThread().isInterrupted());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyThread thread = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程启动了，但是在内部进行了park&quot;</span>);</span><br><span class=\"line\">        thread.interrupt();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;main 线程结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"comment\">//       线程启动了，但是在内部进行了park</span></span><br><span class=\"line\"><span class=\"comment\">//       main 线程结束</span></span><br><span class=\"line\"><span class=\"comment\">//       Thread-0进入线程</span></span><br><span class=\"line\"><span class=\"comment\">//       运行结束</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-先park在interrupt\"><a class=\"markdownIt-Anchor\" href=\"#2-先park在interrupt\"></a> 2. 先park在interrupt</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span>  <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(getName() + <span class=\"string\">&quot;进入线程&quot;</span>);</span><br><span class=\"line\">        LockSupport.park();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;运行结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 输出：</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程启动了，但是在内部进行了park</span></span><br><span class=\"line\"><span class=\"comment\"> * main 线程结束</span></span><br><span class=\"line\"><span class=\"comment\"> * Thread-0进入线程</span></span><br><span class=\"line\"><span class=\"comment\"> * 运行结束</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"趣味题\"><a class=\"markdownIt-Anchor\" href=\"#趣味题\"></a> 趣味题</h3>\n<p>用两个线程，一个输出字母，一个输出数字交替输出如：1A2B3C4D…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadDemoTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Thread t1 = <span class=\"keyword\">null</span>, t2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] a = <span class=\"string\">&quot;1234567&quot;</span>.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] b = <span class=\"string\">&quot;ABCDEFG&quot;</span>.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">        t1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> i : a) &#123;</span><br><span class=\"line\">                System.out.print(i);</span><br><span class=\"line\">                LockSupport.unpark(t2);</span><br><span class=\"line\">                LockSupport.park();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        t2 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> i : b) &#123;</span><br><span class=\"line\">                LockSupport.park();</span><br><span class=\"line\">                System.out.print(i);</span><br><span class=\"line\">                LockSupport.unpark(t1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：  1A2B3C4D5E6F7G</span></span><br></pre></td></tr></table></figure>\n<p>使用自旋锁也可以实现上面的结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CasTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义枚举，包含两个变量</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ReadyToRun</span></span>&#123;T1, T2&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> ReadyToRun r = ReadyToRun.T1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] a = <span class=\"string\">&quot;1234567&quot;</span>.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] b = <span class=\"string\">&quot;ABCDEFG&quot;</span>.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : a)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//当r不为T1时， 空转占着cpu等待，然后输出字符，将r的值设置为T2</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (r != ReadyToRun.T1)&#123;&#125;</span><br><span class=\"line\">                System.out.print(c+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">                r = ReadyToRun.T2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : b)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (r != ReadyToRun.T2)&#123;&#125;</span><br><span class=\"line\">                System.out.print(c+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">                r = ReadyToRun.T1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"二分查找","comments":1,"abbrlink":42877,"date":"2021-08-19T14:54:43.000Z","translate_title":"binary-search","_content":"二分法查找是一种基于比较目标值和数组中间元素的算法\n- 如果目标值 = 中间值，则找到目标值\n- 如果目标值 < 中间值，则在左侧继续搜索\n- 如果目标值 > 中间值，则在右侧继续搜索\n![二分查找](./algorithm/01.png)\n  \n**解题思路：**\n- 初始化指针left = 0, right=n-1;\n- 当left <= right： \n  - 比较中间元素nums[pivot]和目标值target\n    1.target = nums[pivot], 返回pivot\n    2.target > nums[pivot], 则在右侧继续搜索left = pivot+1\n    3.target < nums[pivot], 则在左侧继续搜索right = pivot+1\n    ![](./algorithm/02.png)\n    ![](./algorithm/03.png)\n    \n```java\n/**\n * 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，\n * 写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\n * 输入: nums = [-1,0,3,5,9,12], target = 9\n * 输出: 4\n * 解释: 9 出现在 nums 中并且下标为 4\n */\npublic int search(int[] nums, int target){\n    int pivot, left =0, right = nums.length - 1;\n    while (left <= right){\n        pivot = left + (right - left) / 2;\n        if (nums[pivot] == target){\n            return pivot;\n        }else if (nums[pivot] < target){\n            left = pivot + 1;\n        } else{\n            right = pivot - 1;\n        }\n    }\n    return -1;\n}\n```\n**复杂度分析：**\n- 时间复杂度：O(logN) \n- 空间复杂度：O(1)","source":"_posts/2021/07/algorithm.md","raw":"---\ntitle: 二分查找\ntags: algorithm\ncategories: 算法\ncomments: true\nabbrlink: 42877\ndate: 2021-08-19 22:54:43\ntranslate_title: binary-search\n---\n二分法查找是一种基于比较目标值和数组中间元素的算法\n- 如果目标值 = 中间值，则找到目标值\n- 如果目标值 < 中间值，则在左侧继续搜索\n- 如果目标值 > 中间值，则在右侧继续搜索\n![二分查找](./algorithm/01.png)\n  \n**解题思路：**\n- 初始化指针left = 0, right=n-1;\n- 当left <= right： \n  - 比较中间元素nums[pivot]和目标值target\n    1.target = nums[pivot], 返回pivot\n    2.target > nums[pivot], 则在右侧继续搜索left = pivot+1\n    3.target < nums[pivot], 则在左侧继续搜索right = pivot+1\n    ![](./algorithm/02.png)\n    ![](./algorithm/03.png)\n    \n```java\n/**\n * 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，\n * 写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\n * 输入: nums = [-1,0,3,5,9,12], target = 9\n * 输出: 4\n * 解释: 9 出现在 nums 中并且下标为 4\n */\npublic int search(int[] nums, int target){\n    int pivot, left =0, right = nums.length - 1;\n    while (left <= right){\n        pivot = left + (right - left) / 2;\n        if (nums[pivot] == target){\n            return pivot;\n        }else if (nums[pivot] < target){\n            left = pivot + 1;\n        } else{\n            right = pivot - 1;\n        }\n    }\n    return -1;\n}\n```\n**复杂度分析：**\n- 时间复杂度：O(logN) \n- 空间复杂度：O(1)","slug":"algorithm","published":1,"updated":"2022-03-27T14:06:03.470Z","layout":"post","photos":[],"link":"","_id":"cl235zcw1000zwjpjgy1s54sr","content":"<p>二分法查找是一种基于比较目标值和数组中间元素的算法</p>\n<ul>\n<li>如果目标值 = 中间值，则找到目标值</li>\n<li>如果目标值 &lt; 中间值，则在左侧继续搜索</li>\n<li>如果目标值 &gt; 中间值，则在右侧继续搜索<br>\n<img src=\"/algorithm/01.png\" alt=\"二分查找\"></li>\n</ul>\n<p><strong>解题思路：</strong></p>\n<ul>\n<li>初始化指针left = 0, right=n-1;</li>\n<li>当left &lt;= right：\n<ul>\n<li>比较中间元素nums[pivot]和目标值target<br>\n1.target = nums[pivot], 返回pivot<br>\n2.target &gt; nums[pivot], 则在右侧继续搜索left = pivot+1<br>\n3.target &lt; nums[pivot], 则在左侧继续搜索right = pivot+1<br>\n<img src=\"/algorithm/02.png\" alt><br>\n<img src=\"/algorithm/03.png\" alt></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，</span></span><br><span class=\"line\"><span class=\"comment\"> * 写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</span></span><br><span class=\"line\"><span class=\"comment\"> * 输入: nums = [-1,0,3,5,9,12], target = 9</span></span><br><span class=\"line\"><span class=\"comment\"> * 输出: 4</span></span><br><span class=\"line\"><span class=\"comment\"> * 解释: 9 出现在 nums 中并且下标为 4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivot, left =<span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        pivot = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[pivot] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pivot;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[pivot] &lt; target)&#123;</span><br><span class=\"line\">            left = pivot + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            right = pivot - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>复杂度分析：</strong></p>\n<ul>\n<li>时间复杂度：O(logN)</li>\n<li>空间复杂度：O(1)</li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>二分法查找是一种基于比较目标值和数组中间元素的算法</p>\n<ul>\n<li>如果目标值 = 中间值，则找到目标值</li>\n<li>如果目标值 &lt; 中间值，则在左侧继续搜索</li>\n<li>如果目标值 &gt; 中间值，则在右侧继续搜索<br>\n<img src=\"/algorithm/01.png\" alt=\"二分查找\"></li>\n</ul>\n<p><strong>解题思路：</strong></p>\n<ul>\n<li>初始化指针left = 0, right=n-1;</li>\n<li>当left &lt;= right：\n<ul>\n<li>比较中间元素nums[pivot]和目标值target<br>\n1.target = nums[pivot], 返回pivot<br>\n2.target &gt; nums[pivot], 则在右侧继续搜索left = pivot+1<br>\n3.target &lt; nums[pivot], 则在左侧继续搜索right = pivot+1<br>\n<img src=\"/algorithm/02.png\" alt><br>\n<img src=\"/algorithm/03.png\" alt></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，</span></span><br><span class=\"line\"><span class=\"comment\"> * 写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</span></span><br><span class=\"line\"><span class=\"comment\"> * 输入: nums = [-1,0,3,5,9,12], target = 9</span></span><br><span class=\"line\"><span class=\"comment\"> * 输出: 4</span></span><br><span class=\"line\"><span class=\"comment\"> * 解释: 9 出现在 nums 中并且下标为 4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivot, left =<span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        pivot = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[pivot] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pivot;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[pivot] &lt; target)&#123;</span><br><span class=\"line\">            left = pivot + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            right = pivot - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>复杂度分析：</strong></p>\n<ul>\n<li>时间复杂度：O(logN)</li>\n<li>空间复杂度：O(1)</li>\n</ul>\n"},{"title":"ConcurrentHashMap线程安全","comments":1,"abbrlink":26925,"date":"2021-07-02T08:17:29.000Z","translate_title":"ConcurrentHashMap-thread-safety","_content":"##1. jdk1.7 ConcurrentHashMap\njdk1.7 ConcurrentHashMap是由一个Segment数组和多个HashEntry数组组成\n![image-20201210103251475](./ConcurrentHashMap/01.png)\n其实就是将HashMap分为多个小HashMap,每个Segment元素维护一个小HashMap,目的是锁分离，本来实现同步，直接可以是对整个HashMap加锁，但是加锁粒度太大，影响并发性能，所以变换成此结构，仅仅对Segment元素加锁，降低锁粒度，提高并发性能\n\n###1.1 初始化过程\n由于变换成**Segment数组+HashEntry数组**，所以初始化时，需要依次对Segment数组和HashEntry数组初始化\n1. Segment数组初始化\n   \n   初始化时，使用右移一位，乘以2的计算方式，保证ssize是2的幂次方，小于指定参数concurrencyLevel的最大2的幂次方\n    ```java\n    int sshift = 0;\n    //记录Segment数组大小\n    int ssize = 1;\n    while (ssize < concurrencyLevel) {\n        ++sshift;\n        ssize <<= 1;\n    }\n    ```\n   \n2. HashEntry数组初始化\n\n   跟Segment数组初始化方式相同\n    ```java\n    int cap = 1;\n    while(cap < c){\n        cap <<=1;\n    }\n    ```\n    \n### 1.2 put操作\n对于插入操作，需要两次Hash映射去定位数据存储位置\n1. 首先通过第一次hash过程，定位Segment位置 \n2. 然后通过第二次hash过程定位HashEntry位置\n\nSegment继承ReentrantLock,在数据插入指定HashEntry过程的时候会尝试调用ReentrantLock的tryLock方法获取锁，如果获取成功就直接插入相应位置，如果有线程获取该Segment的锁，当前线程就会以自旋方式去继续调用tryLock方法去获取锁，超过指定次数就挂起，等待唤醒。\n\n### 1.3 get操作\n    \n也是两次Hash映射，相对于put操作，少了加锁过程\n\n### 1.4 size操作\nsize操作就是计算ConcurrentHashMap的大小，有两种方案\n\n- 给每个Segment都加上锁(相当于给整个Map加上锁)，然后计算size返回\n- 不加锁的模式，尝试多次计算ConcurrentHashMap的size,最多三次，比较前后计算的结果，结果一致就认为当前没有元素加入，计算结果是准确的。(查看计算出size的前后modCount的数值有没有发生变化，modCount的值用于记录元素变化的操作。如put，remove，clear)\n\n\n## 2. jdk1.8 ConcurrentHashMap\njdk1.8ConcurrentHashMap是数组+链表，或者数组+红黑树结构,并发控制使用Synchronized关键字和CAS操作\n![jdk1.8 ConcurrentHashMap](./ConcurrentHashMap/02.png)\n\n### 2.1关键概念点\n- sizeCtl变量(volatile修饰)\n   通过CAS操作+volatile, 控制数组初始化和扩容操作\n   - -1 代表正在初始化\n   - -N 前16位记录数组容量，后16位记录扩容线程大小+1，是个负数\n   - 正数0，表示未初始化\n   - 正数，0.75*当前数组大小\n- <key,value>键值对，封装为Node对象\n- table变量(volatile)：也就是所说的数组，默认为null，默认大小为16的数组，每次扩容时大小总是2的幂次方\n- nextTable(volatile):扩容时新生成的数组，大小为table的两倍\n\n### 2.2put函数\n```java\npublic V put(K key, V value) {\n    return putVal(key, value, false);\n}\n```\n**1.putValue函数**\n首先调用spread函数，计算hash值，之后进入一个自旋循环过程，直到插入或替换成功，才会返回。如果table未被初始化，则调用initTable进行初始化。之后判断hash映射的位置是否为null,如果为null,直接通过CAS自旋操作，插入元素成功，则直接返回，如果映射的位置值为MOVED(-1),则直接去协助扩容，排除以上条件后，尝试对链头Node节点f加锁，加锁成功后，链表通过尾插遍历，进行插入或替换。红黑树通过查询遍历，进行插入或替换。之后如果当前链表节点数量大于阈值，则调用treeifyBin函数，转换为红黑树最后通过调用addCount,执行CAS操作，更新数组大小，并且判断是否需要进行扩容\n```java\nfinal V putVal(K key, V value, boolean onlyIfAbsent) {\n    if (key == null || value == null) throw new NullPointerException();\n    //spread函数计算hash值\n    int hash = spread(key.hashCode());\n    int binCount = 0;\n    //自旋过程\n    for (Node<K,V>[] tab = table;;) {\n        Node<K,V> f; int n, i, fh;\n        if (tab == null || (n = tab.length) == 0)\n            tab = initTable();\n        //判断映射位置节点是否为空\n        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {\n            if (casTabAt(tab, i, null,\n                         new Node<K,V>(hash, key, value, null)))\n                break;                  \n        }\n        //如果映射位置节点value==MOVED，说明正在进行扩容操作\n        else if ((fh = f.hash) == MOVED)\n            tab = helpTransfer(tab, f);\n        else {\n            V oldVal = null;\n            synchronized (f) {\n                if (tabAt(tab, i) == f) {\n                    if (fh >= 0) {\n                        binCount = 1;\n                        for (Node<K,V> e = f;; ++binCount) {\n                            K ek;\n                            if (e.hash == hash &&\n                                ((ek = e.key) == key ||\n                                 (ek != null && key.equals(ek)))) {\n                                oldVal = e.val;\n                                if (!onlyIfAbsent)\n                                    e.val = value;\n                                break;\n                            }\n                            Node<K,V> pred = e;\n                            if ((e = e.next) == null) {\n                                pred.next = new Node<K,V>(hash, key,\n                                                          value, null);\n                                break;\n                            }\n                        }\n                    }\n                    //红黑树结构\n                    else if (f instanceof TreeBin) {\n                        Node<K,V> p;\n                        binCount = 2;\n                        if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,\n                                                       value)) != null) {\n                            oldVal = p.val;\n                            if (!onlyIfAbsent)\n                                p.val = value;\n                        }\n                    }\n                }\n            }\n            //链表节点数量超过阈值，转为红黑树\n            if (binCount != 0) {\n                if (binCount >= TREEIFY_THRESHOLD)\n                    treeifyBin(tab, i);\n                if (oldVal != null)\n                    return oldVal;\n                break;\n            }\n        }\n    }\n    addCount(1L, binCount);\n    return null;\n}\n```\n\n**2. spread函数**\nspread函数，计算hash值。key的hash值与其高16位相异或，然后与HASH_BITS将最高位置0\n```java\nstatic final int spread(int h) {\n    return (h ^ (h >>> 16)) & HASH_BITS;\n    //HASH_BITS=0x7fffffff\n}\n```\n\n**3. tableAt函数**\n获取最新的tab[i]\n\n**4. casTabAt函数**\n通过CAS操作，将值赋值进tab中对应位置\n```java\nstatic final <K,V> Node<K,V> tabAt(Node<K,V>[] tab, int i) {\n        return (Node<K,V>)U.getObjectVolatile(tab, ((long)i << ASHIFT) + ABASE);\n}\n\nstatic final <K,V> boolean casTabAt(Node<K,V>[] tab, int i,\n                                        Node<K,V> c, Node<K,V> v) {\n        return U.compareAndSwapObject(tab, ((long)i << ASHIFT) + ABASE, c, v);\n}\n```\n**5. addCount函数**\n尝试使用CAS操作，将BASECOUNT加1，操作失败，则说明有其他线程在进行加一操作,发生冲突。之后判断是否需要扩容\n```java\nprivate final void addCount(long x, int check) {\n    CounterCell[] as; long b, s;\n    //使用CAS操作，将BASECOUNT加1\n    if ((as = counterCells) != null ||\n        !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x)) {\n        CounterCell a; long v; int m;\n        //发生冲突\n        boolean uncontended = true;\n        if (as == null || (m = as.length - 1) < 0 ||\n            (a = as[ThreadLocalRandom.getProbe() & m]) == null ||\n            !(uncontended =\n              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) {\n            //多线程冲突执行\n            fullAddCount(x, uncontended);\n            return;\n        }\n        if (check <= 1)\n            return;\n        s = sumCount();\n    }\n    if (check >= 0) {\n        Node<K,V>[] tab, nt; int n, sc;\n        //判断是否需要扩容  大于0.75当前数组大小\n        while (s >= (long)(sc = sizeCtl) && (tab = table) != null &&\n               (n = tab.length) < MAXIMUM_CAPACITY) {\n            int rs = resizeStamp(n);\n            if (sc < 0) {\n                //判断是否需要帮助扩容\n                //扩容完成，或者扩容线程达到阈值不需要进行扩容，直接break\n                if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||\n                    sc == rs + MAX_RESIZERS || (nt = nextTable) == null ||\n                    transferIndex <= 0)\n                    break;\n                //帮助扩容，扩容线程数+1\n                if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1))\n                    transfer(tab, nt);\n            }\n            //进行扩容操作\n            else if (U.compareAndSwapInt(this, SIZECTL, sc,\n                                         (rs << RESIZE_STAMP_SHIFT) + 2))\n                transfer(tab, null);\n            s = sumCount();\n        }\n    }\n}\n```\n### 2.3 initTable函数\n进入一个自旋过程，一旦有线程扩容成功，才break\n- 如果sizeCtl < 0,说明已经有线程正在扩容，所以直接让出线程。\n- 如果sizeCtl>=0,说明当前没有线程扩容，尝试CAS操作，设置sizeCtl为-1\n- 设置sizeCtl为-1成功的线程，进行扩容操作，并且将sc更新为数组负载阈值0.75*n\n```java\nprivate final Node<K,V>[] initTable() {\n    Node<K,V>[] tab; int sc;\n    //自旋过程\n    while ((tab = table) == null || tab.length == 0) {\n        if ((sc = sizeCtl) < 0)\n            Thread.yield(); \n        else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) {\n            try {\n                if ((tab = table) == null || tab.length == 0) {\n                    int n = (sc > 0) ? sc : DEFAULT_CAPACITY;\n                    @SuppressWarnings(\"unchecked\")\n                    Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n];\n                    table = tab = nt;\n                    //0.75*n\n                    sc = n - (n >>> 2);\n                }\n            } finally {\n                sizeCtl = sc;\n            }\n            break;\n        }\n    }\n    return tab;\n}\n```\n\n### 2.4 统计ConCurrentHashMap中的元素个数\n**1. mappingCount函数**\n```java\n//调用sumCount,获得元素数量\npublic long mappingCount() {\nlong n = sumCount();\nreturn (n < 0L) ? 0L : n; // ignore transient negative values\n}\n```\n\n**2. sumCount函数**\n\nbaseCount+ counterCells各个元素值，就是元素数量\n其实baseCount就是记录容器数量的，直接放回baseCount不就可以了吗？为什么sumCount()方法中还要遍历counterCells数组，累加对象的值呢？\n其中：counterCells是个全局的变量，表示的是CounterCell类数组。CounterCell是ConcurrentHashmap的内部类，它就是存储一个值。\nJDK1.8中使用一个volatile类型的变量baseCount记录元素的个数，当插入新数据put()或则删除数据remove()时，会通过addCount()方法更新baseCount\n初始化时counterCells为空，在并发量很高时，如果存在两个线程同时执行CAS修改baseCount值，则失败的线程会继续执行方法体中的逻辑，执行fullAddCount(x, uncontended)方法，这个方法其实就是初始化counterCells，并将x的值插入到counterCell类中，而x值一般也就是1或-1，这可以从put()方法中得知。\n这些对象是因为在CAS更新baseCount值时，由于高并发而导致失败，最终将值保存到CounterCell中，放到counterCells里。这也就是为什么sumCount()中需要遍历counterCells数组，sum累加CounterCell.value值了。\n```java\nfinal long sumCount() {\n    CounterCell[] as = counterCells; CounterCell a;\n    long sum = baseCount;\n        if (as != null) {\n            for (int i = 0; i < as.length; ++i) {\n                if ((a = as[i]) != null)\n                sum += a.value;\n        }\n    }\n    return sum;\n}\n```\n\n**3. CounterCell类**\n只存储一个值\n```java\nstatic final class CounterCell{\n   volatile long value;\n   CountCell(long x) {value = x;}\n}\n```\n\n\n原文链接：https://blog.csdn.net/zycxnanwang/article/details/105424734","source":"_posts/2021/07/ConcurrentHashMap.md","raw":"---\ntitle: ConcurrentHashMap线程安全\ntags: Java\ncategories: 知识整理\ncomments: true\nabbrlink: 26925\ndate: 2021-07-02 16:17:29\ntranslate_title: ConcurrentHashMap-thread-safety\n---\n##1. jdk1.7 ConcurrentHashMap\njdk1.7 ConcurrentHashMap是由一个Segment数组和多个HashEntry数组组成\n![image-20201210103251475](./ConcurrentHashMap/01.png)\n其实就是将HashMap分为多个小HashMap,每个Segment元素维护一个小HashMap,目的是锁分离，本来实现同步，直接可以是对整个HashMap加锁，但是加锁粒度太大，影响并发性能，所以变换成此结构，仅仅对Segment元素加锁，降低锁粒度，提高并发性能\n\n###1.1 初始化过程\n由于变换成**Segment数组+HashEntry数组**，所以初始化时，需要依次对Segment数组和HashEntry数组初始化\n1. Segment数组初始化\n   \n   初始化时，使用右移一位，乘以2的计算方式，保证ssize是2的幂次方，小于指定参数concurrencyLevel的最大2的幂次方\n    ```java\n    int sshift = 0;\n    //记录Segment数组大小\n    int ssize = 1;\n    while (ssize < concurrencyLevel) {\n        ++sshift;\n        ssize <<= 1;\n    }\n    ```\n   \n2. HashEntry数组初始化\n\n   跟Segment数组初始化方式相同\n    ```java\n    int cap = 1;\n    while(cap < c){\n        cap <<=1;\n    }\n    ```\n    \n### 1.2 put操作\n对于插入操作，需要两次Hash映射去定位数据存储位置\n1. 首先通过第一次hash过程，定位Segment位置 \n2. 然后通过第二次hash过程定位HashEntry位置\n\nSegment继承ReentrantLock,在数据插入指定HashEntry过程的时候会尝试调用ReentrantLock的tryLock方法获取锁，如果获取成功就直接插入相应位置，如果有线程获取该Segment的锁，当前线程就会以自旋方式去继续调用tryLock方法去获取锁，超过指定次数就挂起，等待唤醒。\n\n### 1.3 get操作\n    \n也是两次Hash映射，相对于put操作，少了加锁过程\n\n### 1.4 size操作\nsize操作就是计算ConcurrentHashMap的大小，有两种方案\n\n- 给每个Segment都加上锁(相当于给整个Map加上锁)，然后计算size返回\n- 不加锁的模式，尝试多次计算ConcurrentHashMap的size,最多三次，比较前后计算的结果，结果一致就认为当前没有元素加入，计算结果是准确的。(查看计算出size的前后modCount的数值有没有发生变化，modCount的值用于记录元素变化的操作。如put，remove，clear)\n\n\n## 2. jdk1.8 ConcurrentHashMap\njdk1.8ConcurrentHashMap是数组+链表，或者数组+红黑树结构,并发控制使用Synchronized关键字和CAS操作\n![jdk1.8 ConcurrentHashMap](./ConcurrentHashMap/02.png)\n\n### 2.1关键概念点\n- sizeCtl变量(volatile修饰)\n   通过CAS操作+volatile, 控制数组初始化和扩容操作\n   - -1 代表正在初始化\n   - -N 前16位记录数组容量，后16位记录扩容线程大小+1，是个负数\n   - 正数0，表示未初始化\n   - 正数，0.75*当前数组大小\n- <key,value>键值对，封装为Node对象\n- table变量(volatile)：也就是所说的数组，默认为null，默认大小为16的数组，每次扩容时大小总是2的幂次方\n- nextTable(volatile):扩容时新生成的数组，大小为table的两倍\n\n### 2.2put函数\n```java\npublic V put(K key, V value) {\n    return putVal(key, value, false);\n}\n```\n**1.putValue函数**\n首先调用spread函数，计算hash值，之后进入一个自旋循环过程，直到插入或替换成功，才会返回。如果table未被初始化，则调用initTable进行初始化。之后判断hash映射的位置是否为null,如果为null,直接通过CAS自旋操作，插入元素成功，则直接返回，如果映射的位置值为MOVED(-1),则直接去协助扩容，排除以上条件后，尝试对链头Node节点f加锁，加锁成功后，链表通过尾插遍历，进行插入或替换。红黑树通过查询遍历，进行插入或替换。之后如果当前链表节点数量大于阈值，则调用treeifyBin函数，转换为红黑树最后通过调用addCount,执行CAS操作，更新数组大小，并且判断是否需要进行扩容\n```java\nfinal V putVal(K key, V value, boolean onlyIfAbsent) {\n    if (key == null || value == null) throw new NullPointerException();\n    //spread函数计算hash值\n    int hash = spread(key.hashCode());\n    int binCount = 0;\n    //自旋过程\n    for (Node<K,V>[] tab = table;;) {\n        Node<K,V> f; int n, i, fh;\n        if (tab == null || (n = tab.length) == 0)\n            tab = initTable();\n        //判断映射位置节点是否为空\n        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {\n            if (casTabAt(tab, i, null,\n                         new Node<K,V>(hash, key, value, null)))\n                break;                  \n        }\n        //如果映射位置节点value==MOVED，说明正在进行扩容操作\n        else if ((fh = f.hash) == MOVED)\n            tab = helpTransfer(tab, f);\n        else {\n            V oldVal = null;\n            synchronized (f) {\n                if (tabAt(tab, i) == f) {\n                    if (fh >= 0) {\n                        binCount = 1;\n                        for (Node<K,V> e = f;; ++binCount) {\n                            K ek;\n                            if (e.hash == hash &&\n                                ((ek = e.key) == key ||\n                                 (ek != null && key.equals(ek)))) {\n                                oldVal = e.val;\n                                if (!onlyIfAbsent)\n                                    e.val = value;\n                                break;\n                            }\n                            Node<K,V> pred = e;\n                            if ((e = e.next) == null) {\n                                pred.next = new Node<K,V>(hash, key,\n                                                          value, null);\n                                break;\n                            }\n                        }\n                    }\n                    //红黑树结构\n                    else if (f instanceof TreeBin) {\n                        Node<K,V> p;\n                        binCount = 2;\n                        if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,\n                                                       value)) != null) {\n                            oldVal = p.val;\n                            if (!onlyIfAbsent)\n                                p.val = value;\n                        }\n                    }\n                }\n            }\n            //链表节点数量超过阈值，转为红黑树\n            if (binCount != 0) {\n                if (binCount >= TREEIFY_THRESHOLD)\n                    treeifyBin(tab, i);\n                if (oldVal != null)\n                    return oldVal;\n                break;\n            }\n        }\n    }\n    addCount(1L, binCount);\n    return null;\n}\n```\n\n**2. spread函数**\nspread函数，计算hash值。key的hash值与其高16位相异或，然后与HASH_BITS将最高位置0\n```java\nstatic final int spread(int h) {\n    return (h ^ (h >>> 16)) & HASH_BITS;\n    //HASH_BITS=0x7fffffff\n}\n```\n\n**3. tableAt函数**\n获取最新的tab[i]\n\n**4. casTabAt函数**\n通过CAS操作，将值赋值进tab中对应位置\n```java\nstatic final <K,V> Node<K,V> tabAt(Node<K,V>[] tab, int i) {\n        return (Node<K,V>)U.getObjectVolatile(tab, ((long)i << ASHIFT) + ABASE);\n}\n\nstatic final <K,V> boolean casTabAt(Node<K,V>[] tab, int i,\n                                        Node<K,V> c, Node<K,V> v) {\n        return U.compareAndSwapObject(tab, ((long)i << ASHIFT) + ABASE, c, v);\n}\n```\n**5. addCount函数**\n尝试使用CAS操作，将BASECOUNT加1，操作失败，则说明有其他线程在进行加一操作,发生冲突。之后判断是否需要扩容\n```java\nprivate final void addCount(long x, int check) {\n    CounterCell[] as; long b, s;\n    //使用CAS操作，将BASECOUNT加1\n    if ((as = counterCells) != null ||\n        !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x)) {\n        CounterCell a; long v; int m;\n        //发生冲突\n        boolean uncontended = true;\n        if (as == null || (m = as.length - 1) < 0 ||\n            (a = as[ThreadLocalRandom.getProbe() & m]) == null ||\n            !(uncontended =\n              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) {\n            //多线程冲突执行\n            fullAddCount(x, uncontended);\n            return;\n        }\n        if (check <= 1)\n            return;\n        s = sumCount();\n    }\n    if (check >= 0) {\n        Node<K,V>[] tab, nt; int n, sc;\n        //判断是否需要扩容  大于0.75当前数组大小\n        while (s >= (long)(sc = sizeCtl) && (tab = table) != null &&\n               (n = tab.length) < MAXIMUM_CAPACITY) {\n            int rs = resizeStamp(n);\n            if (sc < 0) {\n                //判断是否需要帮助扩容\n                //扩容完成，或者扩容线程达到阈值不需要进行扩容，直接break\n                if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||\n                    sc == rs + MAX_RESIZERS || (nt = nextTable) == null ||\n                    transferIndex <= 0)\n                    break;\n                //帮助扩容，扩容线程数+1\n                if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1))\n                    transfer(tab, nt);\n            }\n            //进行扩容操作\n            else if (U.compareAndSwapInt(this, SIZECTL, sc,\n                                         (rs << RESIZE_STAMP_SHIFT) + 2))\n                transfer(tab, null);\n            s = sumCount();\n        }\n    }\n}\n```\n### 2.3 initTable函数\n进入一个自旋过程，一旦有线程扩容成功，才break\n- 如果sizeCtl < 0,说明已经有线程正在扩容，所以直接让出线程。\n- 如果sizeCtl>=0,说明当前没有线程扩容，尝试CAS操作，设置sizeCtl为-1\n- 设置sizeCtl为-1成功的线程，进行扩容操作，并且将sc更新为数组负载阈值0.75*n\n```java\nprivate final Node<K,V>[] initTable() {\n    Node<K,V>[] tab; int sc;\n    //自旋过程\n    while ((tab = table) == null || tab.length == 0) {\n        if ((sc = sizeCtl) < 0)\n            Thread.yield(); \n        else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) {\n            try {\n                if ((tab = table) == null || tab.length == 0) {\n                    int n = (sc > 0) ? sc : DEFAULT_CAPACITY;\n                    @SuppressWarnings(\"unchecked\")\n                    Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n];\n                    table = tab = nt;\n                    //0.75*n\n                    sc = n - (n >>> 2);\n                }\n            } finally {\n                sizeCtl = sc;\n            }\n            break;\n        }\n    }\n    return tab;\n}\n```\n\n### 2.4 统计ConCurrentHashMap中的元素个数\n**1. mappingCount函数**\n```java\n//调用sumCount,获得元素数量\npublic long mappingCount() {\nlong n = sumCount();\nreturn (n < 0L) ? 0L : n; // ignore transient negative values\n}\n```\n\n**2. sumCount函数**\n\nbaseCount+ counterCells各个元素值，就是元素数量\n其实baseCount就是记录容器数量的，直接放回baseCount不就可以了吗？为什么sumCount()方法中还要遍历counterCells数组，累加对象的值呢？\n其中：counterCells是个全局的变量，表示的是CounterCell类数组。CounterCell是ConcurrentHashmap的内部类，它就是存储一个值。\nJDK1.8中使用一个volatile类型的变量baseCount记录元素的个数，当插入新数据put()或则删除数据remove()时，会通过addCount()方法更新baseCount\n初始化时counterCells为空，在并发量很高时，如果存在两个线程同时执行CAS修改baseCount值，则失败的线程会继续执行方法体中的逻辑，执行fullAddCount(x, uncontended)方法，这个方法其实就是初始化counterCells，并将x的值插入到counterCell类中，而x值一般也就是1或-1，这可以从put()方法中得知。\n这些对象是因为在CAS更新baseCount值时，由于高并发而导致失败，最终将值保存到CounterCell中，放到counterCells里。这也就是为什么sumCount()中需要遍历counterCells数组，sum累加CounterCell.value值了。\n```java\nfinal long sumCount() {\n    CounterCell[] as = counterCells; CounterCell a;\n    long sum = baseCount;\n        if (as != null) {\n            for (int i = 0; i < as.length; ++i) {\n                if ((a = as[i]) != null)\n                sum += a.value;\n        }\n    }\n    return sum;\n}\n```\n\n**3. CounterCell类**\n只存储一个值\n```java\nstatic final class CounterCell{\n   volatile long value;\n   CountCell(long x) {value = x;}\n}\n```\n\n\n原文链接：https://blog.csdn.net/zycxnanwang/article/details/105424734","slug":"ConcurrentHashMap","published":1,"updated":"2022-03-27T14:06:03.445Z","layout":"post","photos":[],"link":"","_id":"cl235zcw20012wjpjdipf14s3","content":"<p>##1. jdk1.7 ConcurrentHashMap<br>\njdk1.7 ConcurrentHashMap是由一个Segment数组和多个HashEntry数组组成<br>\n<img src=\"/ConcurrentHashMap/01.png\" alt=\"image-20201210103251475\"><br>\n其实就是将HashMap分为多个小HashMap,每个Segment元素维护一个小HashMap,目的是锁分离，本来实现同步，直接可以是对整个HashMap加锁，但是加锁粒度太大，影响并发性能，所以变换成此结构，仅仅对Segment元素加锁，降低锁粒度，提高并发性能</p>\n<p>###1.1 初始化过程<br>\n由于变换成<strong>Segment数组+HashEntry数组</strong>，所以初始化时，需要依次对Segment数组和HashEntry数组初始化</p>\n<ol>\n<li>\n<p>Segment数组初始化</p>\n<p>初始化时，使用右移一位，乘以2的计算方式，保证ssize是2的幂次方，小于指定参数concurrencyLevel的最大2的幂次方</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sshift = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//记录Segment数组大小</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ssize = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (ssize &lt; concurrencyLevel) &#123;</span><br><span class=\"line\">    ++sshift;</span><br><span class=\"line\">    ssize &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>HashEntry数组初始化</p>\n<p>跟Segment数组初始化方式相同</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> cap = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(cap &lt; c)&#123;</span><br><span class=\"line\">    cap &lt;&lt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"12-put操作\"><a class=\"markdownIt-Anchor\" href=\"#12-put操作\"></a> 1.2 put操作</h3>\n<p>对于插入操作，需要两次Hash映射去定位数据存储位置</p>\n<ol>\n<li>首先通过第一次hash过程，定位Segment位置</li>\n<li>然后通过第二次hash过程定位HashEntry位置</li>\n</ol>\n<p>Segment继承ReentrantLock,在数据插入指定HashEntry过程的时候会尝试调用ReentrantLock的tryLock方法获取锁，如果获取成功就直接插入相应位置，如果有线程获取该Segment的锁，当前线程就会以自旋方式去继续调用tryLock方法去获取锁，超过指定次数就挂起，等待唤醒。</p>\n<h3 id=\"13-get操作\"><a class=\"markdownIt-Anchor\" href=\"#13-get操作\"></a> 1.3 get操作</h3>\n<p>也是两次Hash映射，相对于put操作，少了加锁过程</p>\n<h3 id=\"14-size操作\"><a class=\"markdownIt-Anchor\" href=\"#14-size操作\"></a> 1.4 size操作</h3>\n<p>size操作就是计算ConcurrentHashMap的大小，有两种方案</p>\n<ul>\n<li>给每个Segment都加上锁(相当于给整个Map加上锁)，然后计算size返回</li>\n<li>不加锁的模式，尝试多次计算ConcurrentHashMap的size,最多三次，比较前后计算的结果，结果一致就认为当前没有元素加入，计算结果是准确的。(查看计算出size的前后modCount的数值有没有发生变化，modCount的值用于记录元素变化的操作。如put，remove，clear)</li>\n</ul>\n<h2 id=\"2-jdk18-concurrenthashmap\"><a class=\"markdownIt-Anchor\" href=\"#2-jdk18-concurrenthashmap\"></a> 2. jdk1.8 ConcurrentHashMap</h2>\n<p>jdk1.8ConcurrentHashMap是数组+链表，或者数组+红黑树结构,并发控制使用Synchronized关键字和CAS操作<br>\n<img src=\"/ConcurrentHashMap/02.png\" alt=\"jdk1.8 ConcurrentHashMap\"></p>\n<h3 id=\"21关键概念点\"><a class=\"markdownIt-Anchor\" href=\"#21关键概念点\"></a> 2.1关键概念点</h3>\n<ul>\n<li>sizeCtl变量(volatile修饰)<br>\n通过CAS操作+volatile, 控制数组初始化和扩容操作\n<ul>\n<li>-1 代表正在初始化</li>\n<li>-N 前16位记录数组容量，后16位记录扩容线程大小+1，是个负数</li>\n<li>正数0，表示未初始化</li>\n<li>正数，0.75*当前数组大小</li>\n</ul>\n</li>\n<li>&lt;key,value&gt;键值对，封装为Node对象</li>\n<li>table变量(volatile)：也就是所说的数组，默认为null，默认大小为16的数组，每次扩容时大小总是2的幂次方</li>\n<li>nextTable(volatile):扩容时新生成的数组，大小为table的两倍</li>\n</ul>\n<h3 id=\"22put函数\"><a class=\"markdownIt-Anchor\" href=\"#22put函数\"></a> 2.2put函数</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(key, value, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>1.putValue函数</strong><br>\n首先调用spread函数，计算hash值，之后进入一个自旋循环过程，直到插入或替换成功，才会返回。如果table未被初始化，则调用initTable进行初始化。之后判断hash映射的位置是否为null,如果为null,直接通过CAS自旋操作，插入元素成功，则直接返回，如果映射的位置值为MOVED(-1),则直接去协助扩容，排除以上条件后，尝试对链头Node节点f加锁，加锁成功后，链表通过尾插遍历，进行插入或替换。红黑树通过查询遍历，进行插入或替换。之后如果当前链表节点数量大于阈值，则调用treeifyBin函数，转换为红黑树最后通过调用addCount,执行CAS操作，更新数组大小，并且判断是否需要进行扩容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span> || value == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    <span class=\"comment\">//spread函数计算hash值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash = spread(key.hashCode());</span><br><span class=\"line\">    <span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//自旋过程</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"keyword\">int</span> n, i, fh;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tab == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            tab = initTable();</span><br><span class=\"line\">        <span class=\"comment\">//判断映射位置节点是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i = (n - <span class=\"number\">1</span>) &amp; hash)) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (casTabAt(tab, i, <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                         <span class=\"keyword\">new</span> Node&lt;K,V&gt;(hash, key, value, <span class=\"keyword\">null</span>)))</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;                  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果映射位置节点value==MOVED，说明正在进行扩容操作</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((fh = f.hash) == MOVED)</span><br><span class=\"line\">            tab = helpTransfer(tab, f);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            V oldVal = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        binCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class=\"line\">                            K ek;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                                ((ek = e.key) == key ||</span><br><span class=\"line\">                                 (ek != <span class=\"keyword\">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class=\"line\">                                oldVal = e.val;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                    e.val = value;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            Node&lt;K,V&gt; pred = e;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((e = e.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                pred.next = <span class=\"keyword\">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class=\"line\">                                                          value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//红黑树结构</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">                        Node&lt;K,V&gt; p;</span><br><span class=\"line\">                        binCount = <span class=\"number\">2</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class=\"line\">                                                       value)) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            oldVal = p.val;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                p.val = value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//链表节点数量超过阈值，转为红黑树</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (binCount != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class=\"line\">                    treeifyBin(tab, i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (oldVal != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    addCount(<span class=\"number\">1L</span>, binCount);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. spread函数</strong><br>\nspread函数，计算hash值。key的hash值与其高16位相异或，然后与HASH_BITS将最高位置0</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">spread</span><span class=\"params\">(<span class=\"keyword\">int</span> h)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (h ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>)) &amp; HASH_BITS;</span><br><span class=\"line\">    <span class=\"comment\">//HASH_BITS=0x7fffffff</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3. tableAt函数</strong><br>\n获取最新的tab[i]</p>\n<p><strong>4. casTabAt函数</strong><br>\n通过CAS操作，将值赋值进tab中对应位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> &lt;K,V&gt; <span class=\"function\">Node&lt;K,V&gt; <span class=\"title\">tabAt</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class=\"keyword\">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> &lt;K,V&gt; <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">casTabAt</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"keyword\">int</span> i,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                        Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> U.compareAndSwapObject(tab, ((<span class=\"keyword\">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>5. addCount函数</strong><br>\n尝试使用CAS操作，将BASECOUNT加1，操作失败，则说明有其他线程在进行加一操作,发生冲突。之后判断是否需要扩容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">addCount</span><span class=\"params\">(<span class=\"keyword\">long</span> x, <span class=\"keyword\">int</span> check)</span> </span>&#123;</span><br><span class=\"line\">    CounterCell[] as; <span class=\"keyword\">long</span> b, s;</span><br><span class=\"line\">    <span class=\"comment\">//使用CAS操作，将BASECOUNT加1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((as = counterCells) != <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">        !U.compareAndSwapLong(<span class=\"keyword\">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class=\"line\">        CounterCell a; <span class=\"keyword\">long</span> v; <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">        <span class=\"comment\">//发生冲突</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> uncontended = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (as == <span class=\"keyword\">null</span> || (m = as.length - <span class=\"number\">1</span>) &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">            !(uncontended =</span><br><span class=\"line\">              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//多线程冲突执行</span></span><br><span class=\"line\">            fullAddCount(x, uncontended);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        s = sumCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (check &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt;[] tab, nt; <span class=\"keyword\">int</span> n, sc;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否需要扩容  大于0.75当前数组大小</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (s &gt;= (<span class=\"keyword\">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> rs = resizeStamp(n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sc &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断是否需要帮助扩容</span></span><br><span class=\"line\">                <span class=\"comment\">//扩容完成，或者扩容线程达到阈值不需要进行扩容，直接break</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class=\"number\">1</span> ||</span><br><span class=\"line\">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">                    transferIndex &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">//帮助扩容，扩容线程数+1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, sc + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    transfer(tab, nt);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//进行扩容操作</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc,</span><br><span class=\"line\">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class=\"number\">2</span>))</span><br><span class=\"line\">                transfer(tab, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            s = sumCount();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"23-inittable函数\"><a class=\"markdownIt-Anchor\" href=\"#23-inittable函数\"></a> 2.3 initTable函数</h3>\n<p>进入一个自旋过程，一旦有线程扩容成功，才break</p>\n<ul>\n<li>如果sizeCtl &lt; 0,说明已经有线程正在扩容，所以直接让出线程。</li>\n<li>如果sizeCtl&gt;=0,说明当前没有线程扩容，尝试CAS操作，设置sizeCtl为-1</li>\n<li>设置sizeCtl为-1成功的线程，进行扩容操作，并且将sc更新为数组负载阈值0.75*n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; <span class=\"keyword\">int</span> sc;</span><br><span class=\"line\">    <span class=\"comment\">//自旋过程</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((tab = table) == <span class=\"keyword\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((sc = sizeCtl) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            Thread.yield(); </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, -<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> n = (sc &gt; <span class=\"number\">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class=\"line\">                    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node&lt;?,?&gt;[n];</span><br><span class=\"line\">                    table = tab = nt;</span><br><span class=\"line\">                    <span class=\"comment\">//0.75*n</span></span><br><span class=\"line\">                    sc = n - (n &gt;&gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                sizeCtl = sc;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"24-统计concurrenthashmap中的元素个数\"><a class=\"markdownIt-Anchor\" href=\"#24-统计concurrenthashmap中的元素个数\"></a> 2.4 统计ConCurrentHashMap中的元素个数</h3>\n<p><strong>1. mappingCount函数</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用sumCount,获得元素数量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">mappingCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">long</span> n = sumCount();</span><br><span class=\"line\"><span class=\"keyword\">return</span> (n &lt; <span class=\"number\">0L</span>) ? <span class=\"number\">0L</span> : n; <span class=\"comment\">// ignore transient negative values</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. sumCount函数</strong></p>\n<p>baseCount+ counterCells各个元素值，就是元素数量<br>\n其实baseCount就是记录容器数量的，直接放回baseCount不就可以了吗？为什么sumCount()方法中还要遍历counterCells数组，累加对象的值呢？<br>\n其中：counterCells是个全局的变量，表示的是CounterCell类数组。CounterCell是ConcurrentHashmap的内部类，它就是存储一个值。<br>\nJDK1.8中使用一个volatile类型的变量baseCount记录元素的个数，当插入新数据put()或则删除数据remove()时，会通过addCount()方法更新baseCount<br>\n初始化时counterCells为空，在并发量很高时，如果存在两个线程同时执行CAS修改baseCount值，则失败的线程会继续执行方法体中的逻辑，执行fullAddCount(x, uncontended)方法，这个方法其实就是初始化counterCells，并将x的值插入到counterCell类中，而x值一般也就是1或-1，这可以从put()方法中得知。<br>\n这些对象是因为在CAS更新baseCount值时，由于高并发而导致失败，最终将值保存到CounterCell中，放到counterCells里。这也就是为什么sumCount()中需要遍历counterCells数组，sum累加CounterCell.value值了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">long</span> <span class=\"title\">sumCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    CounterCell[] as = counterCells; CounterCell a;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> sum = baseCount;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (as != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((a = as[i]) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                sum += a.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3. CounterCell类</strong><br>\n只存储一个值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CounterCell</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> value;</span><br><span class=\"line\">   CountCell(<span class=\"keyword\">long</span> x) &#123;value = x;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原文链接：<a href=\"https://blog.csdn.net/zycxnanwang/article/details/105424734\">https://blog.csdn.net/zycxnanwang/article/details/105424734</a></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>##1. jdk1.7 ConcurrentHashMap<br>\njdk1.7 ConcurrentHashMap是由一个Segment数组和多个HashEntry数组组成<br>\n<img src=\"/ConcurrentHashMap/01.png\" alt=\"image-20201210103251475\"><br>\n其实就是将HashMap分为多个小HashMap,每个Segment元素维护一个小HashMap,目的是锁分离，本来实现同步，直接可以是对整个HashMap加锁，但是加锁粒度太大，影响并发性能，所以变换成此结构，仅仅对Segment元素加锁，降低锁粒度，提高并发性能</p>\n<p>###1.1 初始化过程<br>\n由于变换成<strong>Segment数组+HashEntry数组</strong>，所以初始化时，需要依次对Segment数组和HashEntry数组初始化</p>\n<ol>\n<li>\n<p>Segment数组初始化</p>\n<p>初始化时，使用右移一位，乘以2的计算方式，保证ssize是2的幂次方，小于指定参数concurrencyLevel的最大2的幂次方</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sshift = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//记录Segment数组大小</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ssize = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (ssize &lt; concurrencyLevel) &#123;</span><br><span class=\"line\">    ++sshift;</span><br><span class=\"line\">    ssize &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>HashEntry数组初始化</p>\n<p>跟Segment数组初始化方式相同</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> cap = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(cap &lt; c)&#123;</span><br><span class=\"line\">    cap &lt;&lt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"12-put操作\"><a class=\"markdownIt-Anchor\" href=\"#12-put操作\"></a> 1.2 put操作</h3>\n<p>对于插入操作，需要两次Hash映射去定位数据存储位置</p>\n<ol>\n<li>首先通过第一次hash过程，定位Segment位置</li>\n<li>然后通过第二次hash过程定位HashEntry位置</li>\n</ol>\n<p>Segment继承ReentrantLock,在数据插入指定HashEntry过程的时候会尝试调用ReentrantLock的tryLock方法获取锁，如果获取成功就直接插入相应位置，如果有线程获取该Segment的锁，当前线程就会以自旋方式去继续调用tryLock方法去获取锁，超过指定次数就挂起，等待唤醒。</p>\n<h3 id=\"13-get操作\"><a class=\"markdownIt-Anchor\" href=\"#13-get操作\"></a> 1.3 get操作</h3>\n<p>也是两次Hash映射，相对于put操作，少了加锁过程</p>\n<h3 id=\"14-size操作\"><a class=\"markdownIt-Anchor\" href=\"#14-size操作\"></a> 1.4 size操作</h3>\n<p>size操作就是计算ConcurrentHashMap的大小，有两种方案</p>\n<ul>\n<li>给每个Segment都加上锁(相当于给整个Map加上锁)，然后计算size返回</li>\n<li>不加锁的模式，尝试多次计算ConcurrentHashMap的size,最多三次，比较前后计算的结果，结果一致就认为当前没有元素加入，计算结果是准确的。(查看计算出size的前后modCount的数值有没有发生变化，modCount的值用于记录元素变化的操作。如put，remove，clear)</li>\n</ul>\n<h2 id=\"2-jdk18-concurrenthashmap\"><a class=\"markdownIt-Anchor\" href=\"#2-jdk18-concurrenthashmap\"></a> 2. jdk1.8 ConcurrentHashMap</h2>\n<p>jdk1.8ConcurrentHashMap是数组+链表，或者数组+红黑树结构,并发控制使用Synchronized关键字和CAS操作<br>\n<img src=\"/ConcurrentHashMap/02.png\" alt=\"jdk1.8 ConcurrentHashMap\"></p>\n<h3 id=\"21关键概念点\"><a class=\"markdownIt-Anchor\" href=\"#21关键概念点\"></a> 2.1关键概念点</h3>\n<ul>\n<li>sizeCtl变量(volatile修饰)<br>\n通过CAS操作+volatile, 控制数组初始化和扩容操作\n<ul>\n<li>-1 代表正在初始化</li>\n<li>-N 前16位记录数组容量，后16位记录扩容线程大小+1，是个负数</li>\n<li>正数0，表示未初始化</li>\n<li>正数，0.75*当前数组大小</li>\n</ul>\n</li>\n<li>&lt;key,value&gt;键值对，封装为Node对象</li>\n<li>table变量(volatile)：也就是所说的数组，默认为null，默认大小为16的数组，每次扩容时大小总是2的幂次方</li>\n<li>nextTable(volatile):扩容时新生成的数组，大小为table的两倍</li>\n</ul>\n<h3 id=\"22put函数\"><a class=\"markdownIt-Anchor\" href=\"#22put函数\"></a> 2.2put函数</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(key, value, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>1.putValue函数</strong><br>\n首先调用spread函数，计算hash值，之后进入一个自旋循环过程，直到插入或替换成功，才会返回。如果table未被初始化，则调用initTable进行初始化。之后判断hash映射的位置是否为null,如果为null,直接通过CAS自旋操作，插入元素成功，则直接返回，如果映射的位置值为MOVED(-1),则直接去协助扩容，排除以上条件后，尝试对链头Node节点f加锁，加锁成功后，链表通过尾插遍历，进行插入或替换。红黑树通过查询遍历，进行插入或替换。之后如果当前链表节点数量大于阈值，则调用treeifyBin函数，转换为红黑树最后通过调用addCount,执行CAS操作，更新数组大小，并且判断是否需要进行扩容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span> || value == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    <span class=\"comment\">//spread函数计算hash值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash = spread(key.hashCode());</span><br><span class=\"line\">    <span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//自旋过程</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"keyword\">int</span> n, i, fh;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tab == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            tab = initTable();</span><br><span class=\"line\">        <span class=\"comment\">//判断映射位置节点是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i = (n - <span class=\"number\">1</span>) &amp; hash)) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (casTabAt(tab, i, <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                         <span class=\"keyword\">new</span> Node&lt;K,V&gt;(hash, key, value, <span class=\"keyword\">null</span>)))</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;                  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果映射位置节点value==MOVED，说明正在进行扩容操作</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((fh = f.hash) == MOVED)</span><br><span class=\"line\">            tab = helpTransfer(tab, f);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            V oldVal = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        binCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class=\"line\">                            K ek;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                                ((ek = e.key) == key ||</span><br><span class=\"line\">                                 (ek != <span class=\"keyword\">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class=\"line\">                                oldVal = e.val;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                    e.val = value;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            Node&lt;K,V&gt; pred = e;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((e = e.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                pred.next = <span class=\"keyword\">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class=\"line\">                                                          value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//红黑树结构</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">                        Node&lt;K,V&gt; p;</span><br><span class=\"line\">                        binCount = <span class=\"number\">2</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class=\"line\">                                                       value)) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            oldVal = p.val;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                p.val = value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//链表节点数量超过阈值，转为红黑树</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (binCount != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class=\"line\">                    treeifyBin(tab, i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (oldVal != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    addCount(<span class=\"number\">1L</span>, binCount);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. spread函数</strong><br>\nspread函数，计算hash值。key的hash值与其高16位相异或，然后与HASH_BITS将最高位置0</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">spread</span><span class=\"params\">(<span class=\"keyword\">int</span> h)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (h ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>)) &amp; HASH_BITS;</span><br><span class=\"line\">    <span class=\"comment\">//HASH_BITS=0x7fffffff</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3. tableAt函数</strong><br>\n获取最新的tab[i]</p>\n<p><strong>4. casTabAt函数</strong><br>\n通过CAS操作，将值赋值进tab中对应位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> &lt;K,V&gt; <span class=\"function\">Node&lt;K,V&gt; <span class=\"title\">tabAt</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class=\"keyword\">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> &lt;K,V&gt; <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">casTabAt</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"keyword\">int</span> i,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                        Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> U.compareAndSwapObject(tab, ((<span class=\"keyword\">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>5. addCount函数</strong><br>\n尝试使用CAS操作，将BASECOUNT加1，操作失败，则说明有其他线程在进行加一操作,发生冲突。之后判断是否需要扩容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">addCount</span><span class=\"params\">(<span class=\"keyword\">long</span> x, <span class=\"keyword\">int</span> check)</span> </span>&#123;</span><br><span class=\"line\">    CounterCell[] as; <span class=\"keyword\">long</span> b, s;</span><br><span class=\"line\">    <span class=\"comment\">//使用CAS操作，将BASECOUNT加1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((as = counterCells) != <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">        !U.compareAndSwapLong(<span class=\"keyword\">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class=\"line\">        CounterCell a; <span class=\"keyword\">long</span> v; <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">        <span class=\"comment\">//发生冲突</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> uncontended = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (as == <span class=\"keyword\">null</span> || (m = as.length - <span class=\"number\">1</span>) &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">            !(uncontended =</span><br><span class=\"line\">              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//多线程冲突执行</span></span><br><span class=\"line\">            fullAddCount(x, uncontended);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        s = sumCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (check &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt;[] tab, nt; <span class=\"keyword\">int</span> n, sc;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否需要扩容  大于0.75当前数组大小</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (s &gt;= (<span class=\"keyword\">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> rs = resizeStamp(n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sc &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断是否需要帮助扩容</span></span><br><span class=\"line\">                <span class=\"comment\">//扩容完成，或者扩容线程达到阈值不需要进行扩容，直接break</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class=\"number\">1</span> ||</span><br><span class=\"line\">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">                    transferIndex &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">//帮助扩容，扩容线程数+1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, sc + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    transfer(tab, nt);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//进行扩容操作</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc,</span><br><span class=\"line\">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class=\"number\">2</span>))</span><br><span class=\"line\">                transfer(tab, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            s = sumCount();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"23-inittable函数\"><a class=\"markdownIt-Anchor\" href=\"#23-inittable函数\"></a> 2.3 initTable函数</h3>\n<p>进入一个自旋过程，一旦有线程扩容成功，才break</p>\n<ul>\n<li>如果sizeCtl &lt; 0,说明已经有线程正在扩容，所以直接让出线程。</li>\n<li>如果sizeCtl&gt;=0,说明当前没有线程扩容，尝试CAS操作，设置sizeCtl为-1</li>\n<li>设置sizeCtl为-1成功的线程，进行扩容操作，并且将sc更新为数组负载阈值0.75*n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; <span class=\"keyword\">int</span> sc;</span><br><span class=\"line\">    <span class=\"comment\">//自旋过程</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((tab = table) == <span class=\"keyword\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((sc = sizeCtl) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            Thread.yield(); </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, -<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> n = (sc &gt; <span class=\"number\">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class=\"line\">                    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node&lt;?,?&gt;[n];</span><br><span class=\"line\">                    table = tab = nt;</span><br><span class=\"line\">                    <span class=\"comment\">//0.75*n</span></span><br><span class=\"line\">                    sc = n - (n &gt;&gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                sizeCtl = sc;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"24-统计concurrenthashmap中的元素个数\"><a class=\"markdownIt-Anchor\" href=\"#24-统计concurrenthashmap中的元素个数\"></a> 2.4 统计ConCurrentHashMap中的元素个数</h3>\n<p><strong>1. mappingCount函数</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用sumCount,获得元素数量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">mappingCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">long</span> n = sumCount();</span><br><span class=\"line\"><span class=\"keyword\">return</span> (n &lt; <span class=\"number\">0L</span>) ? <span class=\"number\">0L</span> : n; <span class=\"comment\">// ignore transient negative values</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. sumCount函数</strong></p>\n<p>baseCount+ counterCells各个元素值，就是元素数量<br>\n其实baseCount就是记录容器数量的，直接放回baseCount不就可以了吗？为什么sumCount()方法中还要遍历counterCells数组，累加对象的值呢？<br>\n其中：counterCells是个全局的变量，表示的是CounterCell类数组。CounterCell是ConcurrentHashmap的内部类，它就是存储一个值。<br>\nJDK1.8中使用一个volatile类型的变量baseCount记录元素的个数，当插入新数据put()或则删除数据remove()时，会通过addCount()方法更新baseCount<br>\n初始化时counterCells为空，在并发量很高时，如果存在两个线程同时执行CAS修改baseCount值，则失败的线程会继续执行方法体中的逻辑，执行fullAddCount(x, uncontended)方法，这个方法其实就是初始化counterCells，并将x的值插入到counterCell类中，而x值一般也就是1或-1，这可以从put()方法中得知。<br>\n这些对象是因为在CAS更新baseCount值时，由于高并发而导致失败，最终将值保存到CounterCell中，放到counterCells里。这也就是为什么sumCount()中需要遍历counterCells数组，sum累加CounterCell.value值了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">long</span> <span class=\"title\">sumCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    CounterCell[] as = counterCells; CounterCell a;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> sum = baseCount;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (as != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((a = as[i]) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                sum += a.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3. CounterCell类</strong><br>\n只存储一个值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CounterCell</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> value;</span><br><span class=\"line\">   CountCell(<span class=\"keyword\">long</span> x) &#123;value = x;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原文链接：<a href=\"https://blog.csdn.net/zycxnanwang/article/details/105424734\">https://blog.csdn.net/zycxnanwang/article/details/105424734</a></p>\n"},{"title":"ElasticSearch安装","comments":1,"abbrlink":1479,"date":"2021-07-23T05:41:24.000Z","translate_title":"elastic-search-install","_content":"## 1. JDK14安装\n\n1. 下载jdk14：  https://jdk.java.net/14/\n\n2. 将文件存放在linux系统某文件夹内\n\n3. 解压\n\n    ```shell\n     tar -zxvf openjdk-14.0.2_linux-x64_bin.tar.gz\n    ```\n\n4. 配置环境变量\n\n    ```shell\n    vim /etc/profile\n    ##在文件最末尾添加，其中JAVA_HOME是jdk解压后的文件路径\n    JAVA_HOME=/usr/lib/tools/jdk-14.0.2\n    PATH=$JAVA_HOME/bin:$PATH\n    CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar\n    export PATH JAVA_HOME CLASSPATH\n    ```\n\n5. 保存后，更新配置文件\n\n    ```shell\n    source /etc/profile\n    ```\n\n6. 查看JDK是否配置完成\n\n    ```shell\n    java -version\n    ```\n\n   出现下图表示安装成功！\n\n   ![image-20200806170145844](./ElasticSearch/image-20200806170145844.png)\n\n\n\n## 2. ElasticSearch安装\n\n1. 解压tar.gz包\n\n    ```shell\n    tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz\n    ```\n\n2. 添加elasticsearch用户\n\n    ```shell\n    useradd elastic\n    ```\n\n3. 赋予elastic search操作文件夹的权限\n\n    ```shell\n    chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*\n    ```\n\n4. 查看本机的hostname\n\n    ```shell\n    hostname\n    #localhost.localdomain\n    ```\n\n5. 修改elastic search配置\n\n    ```shell\n    cd ./elasticsearch-7.8.0/config\n   vim elasticsearch.yml\n    ```\n\n   **elasticsearch.yml**\n\n    ```yml\n      # ======================== Elasticsearch Configuration =========================\n      #\n      # NOTE: Elasticsearch comes with reasonable defaults for most settings.\n      #       Before you set out to tweak and tune the configuration, make sure you\n      #       understand what are you trying to accomplish and the consequences.\n      #\n      # The primary way of configuring a node is via this file. This template lists\n      # the most important settings you may want to configure for a production cluster.\n      #\n      # Please consult the documentation for further information on configuration options:\n      # https://www.elastic.co/guide/en/elasticsearch/reference/index.html\n      #\n      # ---------------------------------- Cluster -----------------------------------\n      #\n      # Use a descriptive name for your cluster:\n      #集群名称，默认可以不修改，此处 xiaoyuge\n      cluster.name: xiaoyuge\n      # ------------------------------------ Node ------------------------------------\n      #\n      # Use a descriptive name for the node:\n      #节点名称，必须修改 ，默认修改为当前机器名称，若是多实例则需要区分\n      node.name: xiaoyuge-local1\n      #\n      # Add custom attributes to the node:\n      #\n      #node.attr.rack: r1\n      #\n      # ----------------------------------- Paths ------------------------------------\n      #\n      # Path to directory where to store the data (separate multiple locations by comma):\n      ##数据目录与日志目录，默认在当前运行程序下，生产环境需要指定\n      #path.data: /path/to/data\n      #\n      # Path to log files:\n      #\n      #path.logs: /path/to/logs\n      #\n      # ----------------------------------- Memory -----------------------------------\n      #\n      # Lock the memory on startup:\n      #内存交换锁定，此处需要操作系统设置才生效\n      #bootstrap.memory_lock: true\n      #\n      # Make sure that the heap size is set to about half the memory available\n      # on the system and that the owner of the process is allowed to use this\n      # limit.\n      #\n      # Elasticsearch performs poorly when the system is swapping the memory.\n      #\n      # ---------------------------------- Network -----------------------------------\n      #\n      # Set the bind address to a specific IP (IPv4 or IPv6):\n      #IP 地址，默认是 local，仅限本机访问，外网不可访问，设置 0.0.0.0 通用做法\n      network.host: 192.168.135.111\n      #\n      # Set a custom port for HTTP:\n      #访问端口，默认 9200，9300，建议明确指定\n      http.port: 9200\n      transport.port: 9300\n      #\n      # For more information, consult the network module documentation.\n      #\n      # --------------------------------- Discovery ----------------------------------\n      #\n      # Pass an initial list of hosts to perform discovery when this node is started:\n      # The default list of hosts is [\"127.0.0.1\", \"[::1]\"]\n      ## 集群发现配置\n      discovery.seed_hosts: [\"192.168.135.111:9300\"]\n      #\n      # Bootstrap the cluster using an initial set of master-eligible nodes:\n      #\n      cluster.initial_master_nodes: [\"192.168.135.111:9300\"]\n      #\n      # For more information, consult the discovery and cluster formation module documentation.\n      #\n      # ---------------------------------- Gateway -----------------------------------\n      #\n      # Block initial recovery after a full cluster restart until N nodes are started:\n      #\n      #gateway.recover_after_nodes: 3\n      #\n      # For more information, consult the gateway module documentation.\n      #\n      # ---------------------------------- Various -----------------------------------\n      #\n      # Require explicit names when deleting indices:\n      ##防止批量删除索引\n      action.destructive_requires_name: true\n      #设置密码\n      xpack.security.enabled: true\n      xpack.license.self_generated.type: trial\n      xpack.security.transport.ssl.enabled: true\n      http.cors.enabled: true\n      http.cors.allow-origin: \"*\"\n      http.cors.allow-headers: Authorization\n    ```\n\n6. 切换为elastic search用户，然后启动elastic search\n\n    ```shell\n    su elastic\t\t\t#切换用户\n    ./bin/elasticsearch -d      #后台启动\n    ```\n\n7. 设置密码\n\n    ```shell\n      ./bin/elasticsearch-setup-passwords interactive\n\n      #执行设置用户名和密码的命令,这里需要为4个用户分别设置密码，elastic, kibana, logstash_system,beats_system\n      Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.\n      You will be prompted to enter passwords as the process progresses.\n      Please confirm that you would like to continue [y/N]y\n      Enter password for [elastic]:\n      passwords must be at least [6] characters long\n      Try again.\n      Enter password for [elastic]:\n      Reenter password for [elastic]:\n      Passwords do not match.\n      Try again.\n      Enter password for [elastic]:\n      Reenter password for [elastic]:\n      Enter password for [kibana]:\n      Reenter password for [kibana]:\n      Enter password for [logstash_system]:\n      Reenter password for [logstash_system]:\n      Enter password for [beats_system]:\n      Reenter password for [beats_system]:\n      Changed password for user [kibana]\n      Changed password for user [logstash_system]\n      Changed password for user [beats_system]\n      Changed password for user [elastic]\n    ```\n\n\n**常见异常：**\n\n```shell\n    #java.lang.RuntimeException: can not run elasticsearch as root\n    #切换为elastic search用户，不能用root项目启动\n  \n   su elastic\n```\n\n```shell\n   #Exception in thread \"main\" java.nio.file.AccessDeniedException: /usr/lib/tools/elasticsearch-7.8.0/config/elasticsearch.keystore\n   #elastic search用户没有操作该文件夹的权限\n  \n   su root\n   chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*\n   ```\n\n```shell\n    ERROR: [2] bootstrap checks failed\n    [1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]\n    [2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\n   \n    #分配内存不够\n    #1. 修改 /etc/security/limits.conf\n    sudo vi /etc/security/limits.conf\n    #在文件末尾加上\n    * soft nofile 65536\n    * hard nofile 65536\n    * soft nproc 4096\n    * hard nproc 4096\n    #2. 修改 /etc/sysctl.conf\n    sudo vi /etc/sysctl.conf\n    #在文件末尾增加\n    vm.max_map_count=262144\n    #3. 配置重新生效\n    sysctl -p\n```\n  \n**效果如下：**\n\n![image-20200807093208470](./ElasticSearch/image-20200807093208470.png)\n\n## 3. Kibana安装\n\n1. 解压文件\n\n    ```shell\n    tar -zxvf kibana-7.8.0-linux-x86_64.tar.gz\n    ```\n\n2. 修改配置文件\n\n    ```shell\n    vim ./config/kibana.yml\n    ```\n\n   **kibana.yml:**\n\n    ```yml\n      # Kibana is served by a back end server. This setting specifies the port to use.\n      ##访问端口，默认无需修改\n      server.port: 5601\n      \n      # Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.\n      # The default is 'localhost', which usually means remote machines will not be able to connect.\n      # To allow connections from remote users, set this parameter to a non-loopback address.\n      #访问地址 IP，默认本地 ;如果需要外网访问，则配置0.0.0.0\n      server.host: \"0.0.0.0\"\n      \n      # Enables you to specify a path to mount Kibana at if you are running behind a proxy.\n      # Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath\n      # from requests it receives, and to prevent a deprecation warning at startup.\n      # This setting cannot end in a slash.\n      #server.basePath: \"\"\n      \n      # Specifies whether Kibana should rewrite requests that are prefixed with\n      # `server.basePath` or require that they are rewritten by your reverse proxy.\n      # This setting was effectively always `false` before Kibana 6.3 and will\n      # default to `true` starting in Kibana 7.0.\n      #server.rewriteBasePath: false\n      \n      # The maximum payload size in bytes for incoming server requests.\n      #server.maxPayloadBytes: 1048576\n      \n      # The Kibana server's name.  This is used for display purposes.\n      #server.name: \"your-hostname\"\n      \n      # The URLs of the Elasticsearch instances to use for all your queries.\n      # ES 服务指向，集群下配置多个\n      elasticsearch.hosts: [\"http://192.168.135.111:9200\"]\n      \n      # When this setting's value is true Kibana uses the hostname specified in the server.host\n      # setting. When the value of this setting is false, Kibana uses the hostname of the host\n      # that connects to this Kibana instance.\n      #elasticsearch.preserveHost: true\n      \n      # Kibana uses an index in Elasticsearch to store saved searches, visualizations and\n      # dashboards. Kibana creates a new index if the index doesn't already exist.\n      # Kibana 元数据存储索引名字，默认.kibana 无需修改\n      #kibana.index: \".kibana\"\n      \n      # The default application to load.\n      #kibana.defaultAppId: \"home\"\n      \n      # If your Elasticsearch is protected with basic authentication, these settings provide\n      # the username and password that the Kibana server uses to perform maintenance on the Kibana\n    ```\n\n3. 启动\n\n    ```shell\n    # 当前窗口内启动\n    ./bin/kibana# \n   #后台进程启动\n   nohup ./bin/kibana &\n    ```\n\n   **效果如下**\n\n   ![image-20200807093309761](./ElasticSearch/image-20200807093309761.png)\n\n**遇见问题：**\n\n- root启动报错![image-20201211095101816](./ElasticSearch/image-20201211095101816.png)\n\n    ```shell\n    #切换到elastic账户\n    su xiaoyuge\n    ```\n- elastic用户权限不足 **Babel could not write cache to file: /usr/share/kibana/optimize/.babel_register_cache.json**![image-20201211095258901](./ElasticSearch/image-20201211095258901.png)\n\n    ```shell\n    #切换到root用户\n    su root \n    #赋予elastic账户 xiaoyuge操作权限\n    chown -R xiaoyuge /usr/local/kibana-7.7.1-linux-x86_64\n    #切换为elastic账户\n    su xiaoyuge\n    #再次启动即可\n    ```\n\n    ","source":"_posts/2021/07/ElasticSearch.md","raw":"---\ntitle: ElasticSearch安装\ntags: ELK\ncomments: true\ncategories: linux\nabbrlink: 1479\ndate: 2021-07-23 13:41:24\ntranslate_title: elastic-search-install\n---\n## 1. JDK14安装\n\n1. 下载jdk14：  https://jdk.java.net/14/\n\n2. 将文件存放在linux系统某文件夹内\n\n3. 解压\n\n    ```shell\n     tar -zxvf openjdk-14.0.2_linux-x64_bin.tar.gz\n    ```\n\n4. 配置环境变量\n\n    ```shell\n    vim /etc/profile\n    ##在文件最末尾添加，其中JAVA_HOME是jdk解压后的文件路径\n    JAVA_HOME=/usr/lib/tools/jdk-14.0.2\n    PATH=$JAVA_HOME/bin:$PATH\n    CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar\n    export PATH JAVA_HOME CLASSPATH\n    ```\n\n5. 保存后，更新配置文件\n\n    ```shell\n    source /etc/profile\n    ```\n\n6. 查看JDK是否配置完成\n\n    ```shell\n    java -version\n    ```\n\n   出现下图表示安装成功！\n\n   ![image-20200806170145844](./ElasticSearch/image-20200806170145844.png)\n\n\n\n## 2. ElasticSearch安装\n\n1. 解压tar.gz包\n\n    ```shell\n    tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz\n    ```\n\n2. 添加elasticsearch用户\n\n    ```shell\n    useradd elastic\n    ```\n\n3. 赋予elastic search操作文件夹的权限\n\n    ```shell\n    chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*\n    ```\n\n4. 查看本机的hostname\n\n    ```shell\n    hostname\n    #localhost.localdomain\n    ```\n\n5. 修改elastic search配置\n\n    ```shell\n    cd ./elasticsearch-7.8.0/config\n   vim elasticsearch.yml\n    ```\n\n   **elasticsearch.yml**\n\n    ```yml\n      # ======================== Elasticsearch Configuration =========================\n      #\n      # NOTE: Elasticsearch comes with reasonable defaults for most settings.\n      #       Before you set out to tweak and tune the configuration, make sure you\n      #       understand what are you trying to accomplish and the consequences.\n      #\n      # The primary way of configuring a node is via this file. This template lists\n      # the most important settings you may want to configure for a production cluster.\n      #\n      # Please consult the documentation for further information on configuration options:\n      # https://www.elastic.co/guide/en/elasticsearch/reference/index.html\n      #\n      # ---------------------------------- Cluster -----------------------------------\n      #\n      # Use a descriptive name for your cluster:\n      #集群名称，默认可以不修改，此处 xiaoyuge\n      cluster.name: xiaoyuge\n      # ------------------------------------ Node ------------------------------------\n      #\n      # Use a descriptive name for the node:\n      #节点名称，必须修改 ，默认修改为当前机器名称，若是多实例则需要区分\n      node.name: xiaoyuge-local1\n      #\n      # Add custom attributes to the node:\n      #\n      #node.attr.rack: r1\n      #\n      # ----------------------------------- Paths ------------------------------------\n      #\n      # Path to directory where to store the data (separate multiple locations by comma):\n      ##数据目录与日志目录，默认在当前运行程序下，生产环境需要指定\n      #path.data: /path/to/data\n      #\n      # Path to log files:\n      #\n      #path.logs: /path/to/logs\n      #\n      # ----------------------------------- Memory -----------------------------------\n      #\n      # Lock the memory on startup:\n      #内存交换锁定，此处需要操作系统设置才生效\n      #bootstrap.memory_lock: true\n      #\n      # Make sure that the heap size is set to about half the memory available\n      # on the system and that the owner of the process is allowed to use this\n      # limit.\n      #\n      # Elasticsearch performs poorly when the system is swapping the memory.\n      #\n      # ---------------------------------- Network -----------------------------------\n      #\n      # Set the bind address to a specific IP (IPv4 or IPv6):\n      #IP 地址，默认是 local，仅限本机访问，外网不可访问，设置 0.0.0.0 通用做法\n      network.host: 192.168.135.111\n      #\n      # Set a custom port for HTTP:\n      #访问端口，默认 9200，9300，建议明确指定\n      http.port: 9200\n      transport.port: 9300\n      #\n      # For more information, consult the network module documentation.\n      #\n      # --------------------------------- Discovery ----------------------------------\n      #\n      # Pass an initial list of hosts to perform discovery when this node is started:\n      # The default list of hosts is [\"127.0.0.1\", \"[::1]\"]\n      ## 集群发现配置\n      discovery.seed_hosts: [\"192.168.135.111:9300\"]\n      #\n      # Bootstrap the cluster using an initial set of master-eligible nodes:\n      #\n      cluster.initial_master_nodes: [\"192.168.135.111:9300\"]\n      #\n      # For more information, consult the discovery and cluster formation module documentation.\n      #\n      # ---------------------------------- Gateway -----------------------------------\n      #\n      # Block initial recovery after a full cluster restart until N nodes are started:\n      #\n      #gateway.recover_after_nodes: 3\n      #\n      # For more information, consult the gateway module documentation.\n      #\n      # ---------------------------------- Various -----------------------------------\n      #\n      # Require explicit names when deleting indices:\n      ##防止批量删除索引\n      action.destructive_requires_name: true\n      #设置密码\n      xpack.security.enabled: true\n      xpack.license.self_generated.type: trial\n      xpack.security.transport.ssl.enabled: true\n      http.cors.enabled: true\n      http.cors.allow-origin: \"*\"\n      http.cors.allow-headers: Authorization\n    ```\n\n6. 切换为elastic search用户，然后启动elastic search\n\n    ```shell\n    su elastic\t\t\t#切换用户\n    ./bin/elasticsearch -d      #后台启动\n    ```\n\n7. 设置密码\n\n    ```shell\n      ./bin/elasticsearch-setup-passwords interactive\n\n      #执行设置用户名和密码的命令,这里需要为4个用户分别设置密码，elastic, kibana, logstash_system,beats_system\n      Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.\n      You will be prompted to enter passwords as the process progresses.\n      Please confirm that you would like to continue [y/N]y\n      Enter password for [elastic]:\n      passwords must be at least [6] characters long\n      Try again.\n      Enter password for [elastic]:\n      Reenter password for [elastic]:\n      Passwords do not match.\n      Try again.\n      Enter password for [elastic]:\n      Reenter password for [elastic]:\n      Enter password for [kibana]:\n      Reenter password for [kibana]:\n      Enter password for [logstash_system]:\n      Reenter password for [logstash_system]:\n      Enter password for [beats_system]:\n      Reenter password for [beats_system]:\n      Changed password for user [kibana]\n      Changed password for user [logstash_system]\n      Changed password for user [beats_system]\n      Changed password for user [elastic]\n    ```\n\n\n**常见异常：**\n\n```shell\n    #java.lang.RuntimeException: can not run elasticsearch as root\n    #切换为elastic search用户，不能用root项目启动\n  \n   su elastic\n```\n\n```shell\n   #Exception in thread \"main\" java.nio.file.AccessDeniedException: /usr/lib/tools/elasticsearch-7.8.0/config/elasticsearch.keystore\n   #elastic search用户没有操作该文件夹的权限\n  \n   su root\n   chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*\n   ```\n\n```shell\n    ERROR: [2] bootstrap checks failed\n    [1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]\n    [2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\n   \n    #分配内存不够\n    #1. 修改 /etc/security/limits.conf\n    sudo vi /etc/security/limits.conf\n    #在文件末尾加上\n    * soft nofile 65536\n    * hard nofile 65536\n    * soft nproc 4096\n    * hard nproc 4096\n    #2. 修改 /etc/sysctl.conf\n    sudo vi /etc/sysctl.conf\n    #在文件末尾增加\n    vm.max_map_count=262144\n    #3. 配置重新生效\n    sysctl -p\n```\n  \n**效果如下：**\n\n![image-20200807093208470](./ElasticSearch/image-20200807093208470.png)\n\n## 3. Kibana安装\n\n1. 解压文件\n\n    ```shell\n    tar -zxvf kibana-7.8.0-linux-x86_64.tar.gz\n    ```\n\n2. 修改配置文件\n\n    ```shell\n    vim ./config/kibana.yml\n    ```\n\n   **kibana.yml:**\n\n    ```yml\n      # Kibana is served by a back end server. This setting specifies the port to use.\n      ##访问端口，默认无需修改\n      server.port: 5601\n      \n      # Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.\n      # The default is 'localhost', which usually means remote machines will not be able to connect.\n      # To allow connections from remote users, set this parameter to a non-loopback address.\n      #访问地址 IP，默认本地 ;如果需要外网访问，则配置0.0.0.0\n      server.host: \"0.0.0.0\"\n      \n      # Enables you to specify a path to mount Kibana at if you are running behind a proxy.\n      # Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath\n      # from requests it receives, and to prevent a deprecation warning at startup.\n      # This setting cannot end in a slash.\n      #server.basePath: \"\"\n      \n      # Specifies whether Kibana should rewrite requests that are prefixed with\n      # `server.basePath` or require that they are rewritten by your reverse proxy.\n      # This setting was effectively always `false` before Kibana 6.3 and will\n      # default to `true` starting in Kibana 7.0.\n      #server.rewriteBasePath: false\n      \n      # The maximum payload size in bytes for incoming server requests.\n      #server.maxPayloadBytes: 1048576\n      \n      # The Kibana server's name.  This is used for display purposes.\n      #server.name: \"your-hostname\"\n      \n      # The URLs of the Elasticsearch instances to use for all your queries.\n      # ES 服务指向，集群下配置多个\n      elasticsearch.hosts: [\"http://192.168.135.111:9200\"]\n      \n      # When this setting's value is true Kibana uses the hostname specified in the server.host\n      # setting. When the value of this setting is false, Kibana uses the hostname of the host\n      # that connects to this Kibana instance.\n      #elasticsearch.preserveHost: true\n      \n      # Kibana uses an index in Elasticsearch to store saved searches, visualizations and\n      # dashboards. Kibana creates a new index if the index doesn't already exist.\n      # Kibana 元数据存储索引名字，默认.kibana 无需修改\n      #kibana.index: \".kibana\"\n      \n      # The default application to load.\n      #kibana.defaultAppId: \"home\"\n      \n      # If your Elasticsearch is protected with basic authentication, these settings provide\n      # the username and password that the Kibana server uses to perform maintenance on the Kibana\n    ```\n\n3. 启动\n\n    ```shell\n    # 当前窗口内启动\n    ./bin/kibana# \n   #后台进程启动\n   nohup ./bin/kibana &\n    ```\n\n   **效果如下**\n\n   ![image-20200807093309761](./ElasticSearch/image-20200807093309761.png)\n\n**遇见问题：**\n\n- root启动报错![image-20201211095101816](./ElasticSearch/image-20201211095101816.png)\n\n    ```shell\n    #切换到elastic账户\n    su xiaoyuge\n    ```\n- elastic用户权限不足 **Babel could not write cache to file: /usr/share/kibana/optimize/.babel_register_cache.json**![image-20201211095258901](./ElasticSearch/image-20201211095258901.png)\n\n    ```shell\n    #切换到root用户\n    su root \n    #赋予elastic账户 xiaoyuge操作权限\n    chown -R xiaoyuge /usr/local/kibana-7.7.1-linux-x86_64\n    #切换为elastic账户\n    su xiaoyuge\n    #再次启动即可\n    ```\n\n    ","slug":"ElasticSearch","published":1,"updated":"2022-03-27T14:06:03.362Z","layout":"post","photos":[],"link":"","_id":"cl235zcw30017wjpj3uvqa9md","content":"<h2 id=\"1-jdk14安装\"><a class=\"markdownIt-Anchor\" href=\"#1-jdk14安装\"></a> 1. JDK14安装</h2>\n<ol>\n<li>\n<p>下载jdk14：  <a href=\"https://jdk.java.net/14/\">https://jdk.java.net/14/</a></p>\n</li>\n<li>\n<p>将文件存放在linux系统某文件夹内</p>\n</li>\n<li>\n<p>解压</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf openjdk-14.0.2_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>配置环境变量</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#在文件最末尾添加，其中JAVA_HOME是jdk解压后的文件路径</span></span></span><br><span class=\"line\">JAVA_HOME=/usr/lib/tools/jdk-14.0.2</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>保存后，更新配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>查看JDK是否配置完成</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<p>出现下图表示安装成功！</p>\n<p><img src=\"/ElasticSearch/image-20200806170145844.png\" alt=\"image-20200806170145844\"></p>\n</li>\n</ol>\n<h2 id=\"2-elasticsearch安装\"><a class=\"markdownIt-Anchor\" href=\"#2-elasticsearch安装\"></a> 2. ElasticSearch安装</h2>\n<ol>\n<li>\n<p>解压tar.gz包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>添加elasticsearch用户</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd elastic</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>赋予elastic search操作文件夹的权限</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>查看本机的hostname</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostname</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">localhost.localdomain</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改elastic search配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> cd ./elasticsearch-7.8.0/config</span><br><span class=\"line\">vim elasticsearch.yml</span><br></pre></td></tr></table></figure>\n<p><strong>elasticsearch.yml</strong></p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ======================== Elasticsearch Configuration =========================</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Elasticsearch comes with reasonable defaults for most settings.</span></span><br><span class=\"line\"><span class=\"comment\">#       Before you set out to tweak and tune the configuration, make sure you</span></span><br><span class=\"line\"><span class=\"comment\">#       understand what are you trying to accomplish and the consequences.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The primary way of configuring a node is via this file. This template lists</span></span><br><span class=\"line\"><span class=\"comment\"># the most important settings you may want to configure for a production cluster.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Please consult the documentation for further information on configuration options:</span></span><br><span class=\"line\"><span class=\"comment\"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Cluster -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Use a descriptive name for your cluster:</span></span><br><span class=\"line\"><span class=\"comment\">#集群名称，默认可以不修改，此处 xiaoyuge</span></span><br><span class=\"line\"><span class=\"attr\">cluster.name:</span> <span class=\"string\">xiaoyuge</span></span><br><span class=\"line\"><span class=\"comment\"># ------------------------------------ Node ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Use a descriptive name for the node:</span></span><br><span class=\"line\"><span class=\"comment\">#节点名称，必须修改 ，默认修改为当前机器名称，若是多实例则需要区分</span></span><br><span class=\"line\"><span class=\"attr\">node.name:</span> <span class=\"string\">xiaoyuge-local1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Add custom attributes to the node:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#node.attr.rack: r1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------------- Paths ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Path to directory where to store the data (separate multiple locations by comma):</span></span><br><span class=\"line\"><span class=\"comment\">##数据目录与日志目录，默认在当前运行程序下，生产环境需要指定</span></span><br><span class=\"line\"><span class=\"comment\">#path.data: /path/to/data</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Path to log files:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#path.logs: /path/to/logs</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------------- Memory -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Lock the memory on startup:</span></span><br><span class=\"line\"><span class=\"comment\">#内存交换锁定，此处需要操作系统设置才生效</span></span><br><span class=\"line\"><span class=\"comment\">#bootstrap.memory_lock: true</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure that the heap size is set to about half the memory available</span></span><br><span class=\"line\"><span class=\"comment\"># on the system and that the owner of the process is allowed to use this</span></span><br><span class=\"line\"><span class=\"comment\"># limit.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Elasticsearch performs poorly when the system is swapping the memory.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Network -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set the bind address to a specific IP (IPv4 or IPv6):</span></span><br><span class=\"line\"><span class=\"comment\">#IP 地址，默认是 local，仅限本机访问，外网不可访问，设置 0.0.0.0 通用做法</span></span><br><span class=\"line\"><span class=\"attr\">network.host:</span> <span class=\"number\">192.168</span><span class=\"number\">.135</span><span class=\"number\">.111</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set a custom port for HTTP:</span></span><br><span class=\"line\"><span class=\"comment\">#访问端口，默认 9200，9300，建议明确指定</span></span><br><span class=\"line\"><span class=\"attr\">http.port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"><span class=\"attr\">transport.port:</span> <span class=\"number\">9300</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the network module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># --------------------------------- Discovery ----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Pass an initial list of hosts to perform discovery when this node is started:</span></span><br><span class=\"line\"><span class=\"comment\"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">## 集群发现配置</span></span><br><span class=\"line\"><span class=\"attr\">discovery.seed_hosts:</span> [<span class=\"string\">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Bootstrap the cluster using an initial set of master-eligible nodes:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">cluster.initial_master_nodes:</span> [<span class=\"string\">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the discovery and cluster formation module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Gateway -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Block initial recovery after a full cluster restart until N nodes are started:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#gateway.recover_after_nodes: 3</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the gateway module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Various -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Require explicit names when deleting indices:</span></span><br><span class=\"line\"><span class=\"comment\">##防止批量删除索引</span></span><br><span class=\"line\"><span class=\"attr\">action.destructive_requires_name:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">#设置密码</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.license.self_generated.type:</span> <span class=\"string\">trial</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-origin:</span> <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-headers:</span> <span class=\"string\">Authorization</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>切换为elastic search用户，然后启动elastic search</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su elastic\t\t\t#切换用户</span><br><span class=\"line\">./bin/elasticsearch -d      #后台启动</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>设置密码</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/elasticsearch-setup-passwords interactive</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">执行设置用户名和密码的命令,这里需要为4个用户分别设置密码，elastic, kibana, logstash_system,beats_system</span></span><br><span class=\"line\">Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.</span><br><span class=\"line\">You will be prompted to enter passwords as the process progresses.</span><br><span class=\"line\">Please confirm that you would like to continue [y/N]y</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">passwords must be at least [6] characters long</span><br><span class=\"line\">Try again.</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">Reenter password for [elastic]:</span><br><span class=\"line\">Passwords do not match.</span><br><span class=\"line\">Try again.</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">Reenter password for [elastic]:</span><br><span class=\"line\">Enter password for [kibana]:</span><br><span class=\"line\">Reenter password for [kibana]:</span><br><span class=\"line\">Enter password for [logstash_system]:</span><br><span class=\"line\">Reenter password for [logstash_system]:</span><br><span class=\"line\">Enter password for [beats_system]:</span><br><span class=\"line\">Reenter password for [beats_system]:</span><br><span class=\"line\">Changed password for user [kibana]</span><br><span class=\"line\">Changed password for user [logstash_system]</span><br><span class=\"line\">Changed password for user [beats_system]</span><br><span class=\"line\">Changed password for user [elastic]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>常见异常：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">java.lang.RuntimeException: can not run elasticsearch as root</span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">切换为elastic search用户，不能用root项目启动</span></span><br><span class=\"line\">  </span><br><span class=\"line\">su elastic</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;main&quot;</span> java.nio.file.AccessDeniedException: /usr/lib/tools/elasticsearch-7.8.0/config/elasticsearch.keystore</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">elastic search用户没有操作该文件夹的权限</span></span><br><span class=\"line\">  </span><br><span class=\"line\">su root</span><br><span class=\"line\">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: [2] bootstrap checks failed</span><br><span class=\"line\">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</span><br><span class=\"line\">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">分配内存不够</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1. 修改 /etc/security/limits.conf</span></span><br><span class=\"line\">sudo vi /etc/security/limits.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在文件末尾加上</span></span><br><span class=\"line\">* soft nofile 65536</span><br><span class=\"line\">* hard nofile 65536</span><br><span class=\"line\">* soft nproc 4096</span><br><span class=\"line\">* hard nproc 4096</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2. 修改 /etc/sysctl.conf</span></span><br><span class=\"line\">sudo vi /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在文件末尾增加</span></span><br><span class=\"line\">vm.max_map_count=262144</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3. 配置重新生效</span></span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n<p><strong>效果如下：</strong></p>\n<p><img src=\"/ElasticSearch/image-20200807093208470.png\" alt=\"image-20200807093208470\"></p>\n<h2 id=\"3-kibana安装\"><a class=\"markdownIt-Anchor\" href=\"#3-kibana安装\"></a> 3. Kibana安装</h2>\n<ol>\n<li>\n<p>解压文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf kibana-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ./config/kibana.yml</span><br></pre></td></tr></table></figure>\n<p><strong>kibana.yml:</strong></p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Kibana is served by a back end server. This setting specifies the port to use.</span></span><br><span class=\"line\"><span class=\"comment\">##访问端口，默认无需修改</span></span><br><span class=\"line\"><span class=\"attr\">server.port:</span> <span class=\"number\">5601</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span></span><br><span class=\"line\"><span class=\"comment\"># The default is &#x27;localhost&#x27;, which usually means remote machines will not be able to connect.</span></span><br><span class=\"line\"><span class=\"comment\"># To allow connections from remote users, set this parameter to a non-loopback address.</span></span><br><span class=\"line\"><span class=\"comment\">#访问地址 IP，默认本地 ;如果需要外网访问，则配置0.0.0.0</span></span><br><span class=\"line\"><span class=\"attr\">server.host:</span> <span class=\"string\">&quot;0.0.0.0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enables you to specify a path to mount Kibana at if you are running behind a proxy.</span></span><br><span class=\"line\"><span class=\"comment\"># Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath</span></span><br><span class=\"line\"><span class=\"comment\"># from requests it receives, and to prevent a deprecation warning at startup.</span></span><br><span class=\"line\"><span class=\"comment\"># This setting cannot end in a slash.</span></span><br><span class=\"line\"><span class=\"comment\">#server.basePath: &quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Specifies whether Kibana should rewrite requests that are prefixed with</span></span><br><span class=\"line\"><span class=\"comment\"># `server.basePath` or require that they are rewritten by your reverse proxy.</span></span><br><span class=\"line\"><span class=\"comment\"># This setting was effectively always `false` before Kibana 6.3 and will</span></span><br><span class=\"line\"><span class=\"comment\"># default to `true` starting in Kibana 7.0.</span></span><br><span class=\"line\"><span class=\"comment\">#server.rewriteBasePath: false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The maximum payload size in bytes for incoming server requests.</span></span><br><span class=\"line\"><span class=\"comment\">#server.maxPayloadBytes: 1048576</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Kibana server&#x27;s name.  This is used for display purposes.</span></span><br><span class=\"line\"><span class=\"comment\">#server.name: &quot;your-hostname&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The URLs of the Elasticsearch instances to use for all your queries.</span></span><br><span class=\"line\"><span class=\"comment\"># ES 服务指向，集群下配置多个</span></span><br><span class=\"line\"><span class=\"attr\">elasticsearch.hosts:</span> [<span class=\"string\">&quot;http://192.168.135.111:9200&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># When this setting&#x27;s value is true Kibana uses the hostname specified in the server.host</span></span><br><span class=\"line\"><span class=\"comment\"># setting. When the value of this setting is false, Kibana uses the hostname of the host</span></span><br><span class=\"line\"><span class=\"comment\"># that connects to this Kibana instance.</span></span><br><span class=\"line\"><span class=\"comment\">#elasticsearch.preserveHost: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Kibana uses an index in Elasticsearch to store saved searches, visualizations and</span></span><br><span class=\"line\"><span class=\"comment\"># dashboards. Kibana creates a new index if the index doesn&#x27;t already exist.</span></span><br><span class=\"line\"><span class=\"comment\"># Kibana 元数据存储索引名字，默认.kibana 无需修改</span></span><br><span class=\"line\"><span class=\"comment\">#kibana.index: &quot;.kibana&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The default application to load.</span></span><br><span class=\"line\"><span class=\"comment\">#kibana.defaultAppId: &quot;home&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If your Elasticsearch is protected with basic authentication, these settings provide</span></span><br><span class=\"line\"><span class=\"comment\"># the username and password that the Kibana server uses to perform maintenance on the Kibana</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>启动</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 当前窗口内启动</span></span><br><span class=\"line\"> ./bin/kibana# </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">后台进程启动</span></span><br><span class=\"line\">nohup ./bin/kibana &amp;</span><br></pre></td></tr></table></figure>\n<p><strong>效果如下</strong></p>\n<p><img src=\"/ElasticSearch/image-20200807093309761.png\" alt=\"image-20200807093309761\"></p>\n</li>\n</ol>\n<p><strong>遇见问题：</strong></p>\n<ul>\n<li>\n<p>root启动报错<img src=\"/ElasticSearch/image-20201211095101816.png\" alt=\"image-20201211095101816\"></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换到elastic账户</span></span><br><span class=\"line\">su xiaoyuge</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>elastic用户权限不足 <strong>Babel could not write cache to file: /usr/share/kibana/optimize/.babel_register_cache.json</strong><img src=\"/ElasticSearch/image-20201211095258901.png\" alt=\"image-20201211095258901\"></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换到root用户</span></span><br><span class=\"line\">su root </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">赋予elastic账户 xiaoyuge操作权限</span></span><br><span class=\"line\">chown -R xiaoyuge /usr/local/kibana-7.7.1-linux-x86_64</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换为elastic账户</span></span><br><span class=\"line\">su xiaoyuge</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再次启动即可</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1-jdk14安装\"><a class=\"markdownIt-Anchor\" href=\"#1-jdk14安装\"></a> 1. JDK14安装</h2>\n<ol>\n<li>\n<p>下载jdk14：  <a href=\"https://jdk.java.net/14/\">https://jdk.java.net/14/</a></p>\n</li>\n<li>\n<p>将文件存放在linux系统某文件夹内</p>\n</li>\n<li>\n<p>解压</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf openjdk-14.0.2_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>配置环境变量</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#在文件最末尾添加，其中JAVA_HOME是jdk解压后的文件路径</span></span></span><br><span class=\"line\">JAVA_HOME=/usr/lib/tools/jdk-14.0.2</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>保存后，更新配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>查看JDK是否配置完成</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<p>出现下图表示安装成功！</p>\n<p><img src=\"/ElasticSearch/image-20200806170145844.png\" alt=\"image-20200806170145844\"></p>\n</li>\n</ol>\n<h2 id=\"2-elasticsearch安装\"><a class=\"markdownIt-Anchor\" href=\"#2-elasticsearch安装\"></a> 2. ElasticSearch安装</h2>\n<ol>\n<li>\n<p>解压tar.gz包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>添加elasticsearch用户</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd elastic</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>赋予elastic search操作文件夹的权限</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>查看本机的hostname</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostname</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">localhost.localdomain</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改elastic search配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> cd ./elasticsearch-7.8.0/config</span><br><span class=\"line\">vim elasticsearch.yml</span><br></pre></td></tr></table></figure>\n<p><strong>elasticsearch.yml</strong></p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ======================== Elasticsearch Configuration =========================</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Elasticsearch comes with reasonable defaults for most settings.</span></span><br><span class=\"line\"><span class=\"comment\">#       Before you set out to tweak and tune the configuration, make sure you</span></span><br><span class=\"line\"><span class=\"comment\">#       understand what are you trying to accomplish and the consequences.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The primary way of configuring a node is via this file. This template lists</span></span><br><span class=\"line\"><span class=\"comment\"># the most important settings you may want to configure for a production cluster.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Please consult the documentation for further information on configuration options:</span></span><br><span class=\"line\"><span class=\"comment\"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Cluster -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Use a descriptive name for your cluster:</span></span><br><span class=\"line\"><span class=\"comment\">#集群名称，默认可以不修改，此处 xiaoyuge</span></span><br><span class=\"line\"><span class=\"attr\">cluster.name:</span> <span class=\"string\">xiaoyuge</span></span><br><span class=\"line\"><span class=\"comment\"># ------------------------------------ Node ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Use a descriptive name for the node:</span></span><br><span class=\"line\"><span class=\"comment\">#节点名称，必须修改 ，默认修改为当前机器名称，若是多实例则需要区分</span></span><br><span class=\"line\"><span class=\"attr\">node.name:</span> <span class=\"string\">xiaoyuge-local1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Add custom attributes to the node:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#node.attr.rack: r1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------------- Paths ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Path to directory where to store the data (separate multiple locations by comma):</span></span><br><span class=\"line\"><span class=\"comment\">##数据目录与日志目录，默认在当前运行程序下，生产环境需要指定</span></span><br><span class=\"line\"><span class=\"comment\">#path.data: /path/to/data</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Path to log files:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#path.logs: /path/to/logs</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------------- Memory -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Lock the memory on startup:</span></span><br><span class=\"line\"><span class=\"comment\">#内存交换锁定，此处需要操作系统设置才生效</span></span><br><span class=\"line\"><span class=\"comment\">#bootstrap.memory_lock: true</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure that the heap size is set to about half the memory available</span></span><br><span class=\"line\"><span class=\"comment\"># on the system and that the owner of the process is allowed to use this</span></span><br><span class=\"line\"><span class=\"comment\"># limit.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Elasticsearch performs poorly when the system is swapping the memory.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Network -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set the bind address to a specific IP (IPv4 or IPv6):</span></span><br><span class=\"line\"><span class=\"comment\">#IP 地址，默认是 local，仅限本机访问，外网不可访问，设置 0.0.0.0 通用做法</span></span><br><span class=\"line\"><span class=\"attr\">network.host:</span> <span class=\"number\">192.168</span><span class=\"number\">.135</span><span class=\"number\">.111</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set a custom port for HTTP:</span></span><br><span class=\"line\"><span class=\"comment\">#访问端口，默认 9200，9300，建议明确指定</span></span><br><span class=\"line\"><span class=\"attr\">http.port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"><span class=\"attr\">transport.port:</span> <span class=\"number\">9300</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the network module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># --------------------------------- Discovery ----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Pass an initial list of hosts to perform discovery when this node is started:</span></span><br><span class=\"line\"><span class=\"comment\"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">## 集群发现配置</span></span><br><span class=\"line\"><span class=\"attr\">discovery.seed_hosts:</span> [<span class=\"string\">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Bootstrap the cluster using an initial set of master-eligible nodes:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">cluster.initial_master_nodes:</span> [<span class=\"string\">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the discovery and cluster formation module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Gateway -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Block initial recovery after a full cluster restart until N nodes are started:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#gateway.recover_after_nodes: 3</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the gateway module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Various -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Require explicit names when deleting indices:</span></span><br><span class=\"line\"><span class=\"comment\">##防止批量删除索引</span></span><br><span class=\"line\"><span class=\"attr\">action.destructive_requires_name:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">#设置密码</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.license.self_generated.type:</span> <span class=\"string\">trial</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-origin:</span> <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-headers:</span> <span class=\"string\">Authorization</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>切换为elastic search用户，然后启动elastic search</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su elastic\t\t\t#切换用户</span><br><span class=\"line\">./bin/elasticsearch -d      #后台启动</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>设置密码</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/elasticsearch-setup-passwords interactive</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">执行设置用户名和密码的命令,这里需要为4个用户分别设置密码，elastic, kibana, logstash_system,beats_system</span></span><br><span class=\"line\">Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.</span><br><span class=\"line\">You will be prompted to enter passwords as the process progresses.</span><br><span class=\"line\">Please confirm that you would like to continue [y/N]y</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">passwords must be at least [6] characters long</span><br><span class=\"line\">Try again.</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">Reenter password for [elastic]:</span><br><span class=\"line\">Passwords do not match.</span><br><span class=\"line\">Try again.</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">Reenter password for [elastic]:</span><br><span class=\"line\">Enter password for [kibana]:</span><br><span class=\"line\">Reenter password for [kibana]:</span><br><span class=\"line\">Enter password for [logstash_system]:</span><br><span class=\"line\">Reenter password for [logstash_system]:</span><br><span class=\"line\">Enter password for [beats_system]:</span><br><span class=\"line\">Reenter password for [beats_system]:</span><br><span class=\"line\">Changed password for user [kibana]</span><br><span class=\"line\">Changed password for user [logstash_system]</span><br><span class=\"line\">Changed password for user [beats_system]</span><br><span class=\"line\">Changed password for user [elastic]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>常见异常：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">java.lang.RuntimeException: can not run elasticsearch as root</span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">切换为elastic search用户，不能用root项目启动</span></span><br><span class=\"line\">  </span><br><span class=\"line\">su elastic</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;main&quot;</span> java.nio.file.AccessDeniedException: /usr/lib/tools/elasticsearch-7.8.0/config/elasticsearch.keystore</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">elastic search用户没有操作该文件夹的权限</span></span><br><span class=\"line\">  </span><br><span class=\"line\">su root</span><br><span class=\"line\">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: [2] bootstrap checks failed</span><br><span class=\"line\">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</span><br><span class=\"line\">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">分配内存不够</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1. 修改 /etc/security/limits.conf</span></span><br><span class=\"line\">sudo vi /etc/security/limits.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在文件末尾加上</span></span><br><span class=\"line\">* soft nofile 65536</span><br><span class=\"line\">* hard nofile 65536</span><br><span class=\"line\">* soft nproc 4096</span><br><span class=\"line\">* hard nproc 4096</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2. 修改 /etc/sysctl.conf</span></span><br><span class=\"line\">sudo vi /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在文件末尾增加</span></span><br><span class=\"line\">vm.max_map_count=262144</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3. 配置重新生效</span></span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n<p><strong>效果如下：</strong></p>\n<p><img src=\"/ElasticSearch/image-20200807093208470.png\" alt=\"image-20200807093208470\"></p>\n<h2 id=\"3-kibana安装\"><a class=\"markdownIt-Anchor\" href=\"#3-kibana安装\"></a> 3. Kibana安装</h2>\n<ol>\n<li>\n<p>解压文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf kibana-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ./config/kibana.yml</span><br></pre></td></tr></table></figure>\n<p><strong>kibana.yml:</strong></p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Kibana is served by a back end server. This setting specifies the port to use.</span></span><br><span class=\"line\"><span class=\"comment\">##访问端口，默认无需修改</span></span><br><span class=\"line\"><span class=\"attr\">server.port:</span> <span class=\"number\">5601</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span></span><br><span class=\"line\"><span class=\"comment\"># The default is &#x27;localhost&#x27;, which usually means remote machines will not be able to connect.</span></span><br><span class=\"line\"><span class=\"comment\"># To allow connections from remote users, set this parameter to a non-loopback address.</span></span><br><span class=\"line\"><span class=\"comment\">#访问地址 IP，默认本地 ;如果需要外网访问，则配置0.0.0.0</span></span><br><span class=\"line\"><span class=\"attr\">server.host:</span> <span class=\"string\">&quot;0.0.0.0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enables you to specify a path to mount Kibana at if you are running behind a proxy.</span></span><br><span class=\"line\"><span class=\"comment\"># Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath</span></span><br><span class=\"line\"><span class=\"comment\"># from requests it receives, and to prevent a deprecation warning at startup.</span></span><br><span class=\"line\"><span class=\"comment\"># This setting cannot end in a slash.</span></span><br><span class=\"line\"><span class=\"comment\">#server.basePath: &quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Specifies whether Kibana should rewrite requests that are prefixed with</span></span><br><span class=\"line\"><span class=\"comment\"># `server.basePath` or require that they are rewritten by your reverse proxy.</span></span><br><span class=\"line\"><span class=\"comment\"># This setting was effectively always `false` before Kibana 6.3 and will</span></span><br><span class=\"line\"><span class=\"comment\"># default to `true` starting in Kibana 7.0.</span></span><br><span class=\"line\"><span class=\"comment\">#server.rewriteBasePath: false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The maximum payload size in bytes for incoming server requests.</span></span><br><span class=\"line\"><span class=\"comment\">#server.maxPayloadBytes: 1048576</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Kibana server&#x27;s name.  This is used for display purposes.</span></span><br><span class=\"line\"><span class=\"comment\">#server.name: &quot;your-hostname&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The URLs of the Elasticsearch instances to use for all your queries.</span></span><br><span class=\"line\"><span class=\"comment\"># ES 服务指向，集群下配置多个</span></span><br><span class=\"line\"><span class=\"attr\">elasticsearch.hosts:</span> [<span class=\"string\">&quot;http://192.168.135.111:9200&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># When this setting&#x27;s value is true Kibana uses the hostname specified in the server.host</span></span><br><span class=\"line\"><span class=\"comment\"># setting. When the value of this setting is false, Kibana uses the hostname of the host</span></span><br><span class=\"line\"><span class=\"comment\"># that connects to this Kibana instance.</span></span><br><span class=\"line\"><span class=\"comment\">#elasticsearch.preserveHost: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Kibana uses an index in Elasticsearch to store saved searches, visualizations and</span></span><br><span class=\"line\"><span class=\"comment\"># dashboards. Kibana creates a new index if the index doesn&#x27;t already exist.</span></span><br><span class=\"line\"><span class=\"comment\"># Kibana 元数据存储索引名字，默认.kibana 无需修改</span></span><br><span class=\"line\"><span class=\"comment\">#kibana.index: &quot;.kibana&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The default application to load.</span></span><br><span class=\"line\"><span class=\"comment\">#kibana.defaultAppId: &quot;home&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If your Elasticsearch is protected with basic authentication, these settings provide</span></span><br><span class=\"line\"><span class=\"comment\"># the username and password that the Kibana server uses to perform maintenance on the Kibana</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>启动</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 当前窗口内启动</span></span><br><span class=\"line\"> ./bin/kibana# </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">后台进程启动</span></span><br><span class=\"line\">nohup ./bin/kibana &amp;</span><br></pre></td></tr></table></figure>\n<p><strong>效果如下</strong></p>\n<p><img src=\"/ElasticSearch/image-20200807093309761.png\" alt=\"image-20200807093309761\"></p>\n</li>\n</ol>\n<p><strong>遇见问题：</strong></p>\n<ul>\n<li>\n<p>root启动报错<img src=\"/ElasticSearch/image-20201211095101816.png\" alt=\"image-20201211095101816\"></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换到elastic账户</span></span><br><span class=\"line\">su xiaoyuge</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>elastic用户权限不足 <strong>Babel could not write cache to file: /usr/share/kibana/optimize/.babel_register_cache.json</strong><img src=\"/ElasticSearch/image-20201211095258901.png\" alt=\"image-20201211095258901\"></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换到root用户</span></span><br><span class=\"line\">su root </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">赋予elastic账户 xiaoyuge操作权限</span></span><br><span class=\"line\">chown -R xiaoyuge /usr/local/kibana-7.7.1-linux-x86_64</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换为elastic账户</span></span><br><span class=\"line\">su xiaoyuge</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再次启动即可</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"springCloud之FeignClient访问微服务接口缓慢","comments":1,"abbrlink":54514,"date":"2021-07-03T09:08:10.000Z","translate_title":"feignclient-of-springcloud-accesses-microservice-interface-slowly","_content":"### 问题描述\n逻辑是A服务调用B服务(AB在同一个局域网内)。 经过反复测试，有一个访问缓慢的现象，具体表现为：\n程序启动第一次访问初始化1.2秒左右，还可以理解。\n但后面访问还是要1.1秒左右（格式化到SSS毫秒打印日志监控的）。\n但如果连续访问几次，后面几次又是几十毫秒。过一会再访问，或者换浏览器换post工具请求，又会1.2秒左右。\n\n### 原因排查1\n查看连接查实的接口\n![请求缓慢2](./bug-sprigCloud/02.png)\n发现接口调用的是这个地址，其实是别人启动项目的时候吧自己的ip注册到了eureka注册中心，导致接口有时候走的是getway，有时候又是走的别人的接口\n\n解决方法：eureka.client.register-with-eureka 为false  这样就不会注册到eureka注册中心了\n### 原因排查2\n1. 查看日志\n    ![请求缓慢](./bug-sprigCloud/01.png)\n查看是否是hystrix 配置的时间小于了ribbon的时间\n\n\n\n","source":"_posts/2021/07/bug-sprigCloud.md","raw":"---\ntitle: springCloud之FeignClient访问微服务接口缓慢\ntags: SpringCloud\ncategories: 踩坑记录\ncomments: true\nabbrlink: 54514\ndate: 2021-07-03 17:08:10\ntranslate_title: feignclient-of-springcloud-accesses-microservice-interface-slowly\n---\n### 问题描述\n逻辑是A服务调用B服务(AB在同一个局域网内)。 经过反复测试，有一个访问缓慢的现象，具体表现为：\n程序启动第一次访问初始化1.2秒左右，还可以理解。\n但后面访问还是要1.1秒左右（格式化到SSS毫秒打印日志监控的）。\n但如果连续访问几次，后面几次又是几十毫秒。过一会再访问，或者换浏览器换post工具请求，又会1.2秒左右。\n\n### 原因排查1\n查看连接查实的接口\n![请求缓慢2](./bug-sprigCloud/02.png)\n发现接口调用的是这个地址，其实是别人启动项目的时候吧自己的ip注册到了eureka注册中心，导致接口有时候走的是getway，有时候又是走的别人的接口\n\n解决方法：eureka.client.register-with-eureka 为false  这样就不会注册到eureka注册中心了\n### 原因排查2\n1. 查看日志\n    ![请求缓慢](./bug-sprigCloud/01.png)\n查看是否是hystrix 配置的时间小于了ribbon的时间\n\n\n\n","slug":"bug-sprigCloud","published":1,"updated":"2022-03-27T14:06:03.465Z","layout":"post","photos":[],"link":"","_id":"cl235zcw40019wjpjbryghqc9","content":"<h3 id=\"问题描述\"><a class=\"markdownIt-Anchor\" href=\"#问题描述\"></a> 问题描述</h3>\n<p>逻辑是A服务调用B服务(AB在同一个局域网内)。 经过反复测试，有一个访问缓慢的现象，具体表现为：<br>\n程序启动第一次访问初始化1.2秒左右，还可以理解。<br>\n但后面访问还是要1.1秒左右（格式化到SSS毫秒打印日志监控的）。<br>\n但如果连续访问几次，后面几次又是几十毫秒。过一会再访问，或者换浏览器换post工具请求，又会1.2秒左右。</p>\n<h3 id=\"原因排查1\"><a class=\"markdownIt-Anchor\" href=\"#原因排查1\"></a> 原因排查1</h3>\n<p>查看连接查实的接口<br>\n<img src=\"/bug-sprigCloud/02.png\" alt=\"请求缓慢2\"><br>\n发现接口调用的是这个地址，其实是别人启动项目的时候吧自己的ip注册到了eureka注册中心，导致接口有时候走的是getway，有时候又是走的别人的接口</p>\n<p>解决方法：eureka.client.register-with-eureka 为false  这样就不会注册到eureka注册中心了</p>\n<h3 id=\"原因排查2\"><a class=\"markdownIt-Anchor\" href=\"#原因排查2\"></a> 原因排查2</h3>\n<ol>\n<li>查看日志<br>\n<img src=\"/bug-sprigCloud/01.png\" alt=\"请求缓慢\"><br>\n查看是否是hystrix 配置的时间小于了ribbon的时间</li>\n</ol>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"问题描述\"><a class=\"markdownIt-Anchor\" href=\"#问题描述\"></a> 问题描述</h3>\n<p>逻辑是A服务调用B服务(AB在同一个局域网内)。 经过反复测试，有一个访问缓慢的现象，具体表现为：<br>\n程序启动第一次访问初始化1.2秒左右，还可以理解。<br>\n但后面访问还是要1.1秒左右（格式化到SSS毫秒打印日志监控的）。<br>\n但如果连续访问几次，后面几次又是几十毫秒。过一会再访问，或者换浏览器换post工具请求，又会1.2秒左右。</p>\n<h3 id=\"原因排查1\"><a class=\"markdownIt-Anchor\" href=\"#原因排查1\"></a> 原因排查1</h3>\n<p>查看连接查实的接口<br>\n<img src=\"/bug-sprigCloud/02.png\" alt=\"请求缓慢2\"><br>\n发现接口调用的是这个地址，其实是别人启动项目的时候吧自己的ip注册到了eureka注册中心，导致接口有时候走的是getway，有时候又是走的别人的接口</p>\n<p>解决方法：eureka.client.register-with-eureka 为false  这样就不会注册到eureka注册中心了</p>\n<h3 id=\"原因排查2\"><a class=\"markdownIt-Anchor\" href=\"#原因排查2\"></a> 原因排查2</h3>\n<ol>\n<li>查看日志<br>\n<img src=\"/bug-sprigCloud/01.png\" alt=\"请求缓慢\"><br>\n查看是否是hystrix 配置的时间小于了ribbon的时间</li>\n</ol>\n"},{"title":"java缓存一致性问题","comments":1,"abbrlink":15444,"date":"2021-08-11T05:31:52.000Z","translate_title":"java-cache-consistency-problem","_content":"","source":"_posts/2021/07/cache-consistency.md","raw":"---\ntitle: java缓存一致性问题\ntags: redis\ncategories: 中间件\ncomments: true\nabbrlink: 15444\ndate: 2021-08-11 13:31:52\ntranslate_title: java-cache-consistency-problem\n---\n","slug":"cache-consistency","published":1,"updated":"2022-03-27T14:06:03.477Z","layout":"post","photos":[],"link":"","_id":"cl235zcw5001dwjpj5ym445g3","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"JAVA类加载过程","comments":1,"translate_title":"java-class-loading-process","abbrlink":61691,"date":"2021-07-31T03:04:02.000Z","_content":"\n## 1.类加载机制\nJVM将类描述数据从.class文件中加载到内存，并对数据进行解析、初始化，最终形成被JVM直接使用的Java类型；类从被加载到JVM中开始，到卸载为止，\n整个生命周期包括：**加载、验证、准备、解析、初始化、使用和卸载**7个阶段\n![完整的类加载过程](./classLoad/01.png)\n\n1. 加载\n\n    加载时jvm做了三件事\n    - 1)通过一个类的全限定名获取该类的二进制流\n    - 2)将这个字节流的静态存储结构转化为方法区运行时数据结构\n    - 3)在内存堆中生成一个代表该类的java.lang.class对象，最为该类数据的访问入口\n\n2. 验证\n   \n    验证、准备、解析这三步可以看作是一个连接的过程，将类的字节码连接到JVM的运行黄台之中;  验证是为了确保class文件的字节流中包含的信息符合当前虚拟机的要求，不会威胁到jvm的安全。\n   验证内容如下：\n    - 文件格式的验证： 验证字节流是否符合class文件袋额规范，是否能被当前版本的虚拟机处理\n    - 元数据验证： 对字节码描述的信息进行语义分析，确保符合Java语言规范\n    - 字节码验证：通过数据流和控制流分析，确定寓意是否合法，符合逻辑的\n    - 符号引用验证：这个娇艳在解析阶段发生\n    \n3. 准备\n\n    为类的静态变量分配内存，设置初始值，对于final static修饰的变量，直接赋值为用户的定义值。\n   ```java\n   //准备阶段过后的初始值为0， 而不是7\n    public static int a = 7;\n   ```\n\n4. 解析\n\n    解析是将常量池内的符号引用转化为直接引用（如物理内存地址指针）\n   \n5. 初始化\n   \n    初始化阶段，jvm才开始真正执行类中定义的Java代码\n    - 执行类构造器<clinit>()方法的过程，类构造器方法是有编译器自动手机类中所有类变量的赋值动作和静态语句块（static块）中的语句合并产生的\n    - 当初始化一个类的时候，如果发现其父类还没有进行过初始化，需有限触发其父类的初始化\n    - 虚拟机会保证一个类的<clinit>()方法在多线程环境被正确加锁和同步\n      ![完整的类加载过程2](./classLoad/02.png)\n\n## 2.类加载器\n类加载器的主要任务：对类加载过程中的加载操作（根据一个类的全限定名读取该类的二进制字节流到JVM内部，然后转换为一个对应的java.lang.Class对象实例）\n\n类加载器的分类\n   \n   - 启动类加载器Bootstrap ClassLoader:\n     在HotSpot虚拟机中，Bootstrap ClassLoader用C++语言编写并嵌入JVM内部，主要负载加载JAVA_HOME/lib目录中的所有类，或者加载由选项-Xbootcalsspath指定的路径下的类\n   - 拓展类加载器/ExtClassLoader：\n     ExtClassLoader继承ClassLoader类，负载加载JAVA_HOME/lib/ext目录中的所有类型，或者由参数-Xbootclasspath指定路径中的所有类型\n   - 应用程序类加载器/AppClassLoader: \n     ExtClassLoader继承ClassLoader类，负责加载用户类路径ClassPath下的所有类型，一般情况下为程序的默认类加载器\n   - 自定义加载器: \n     Java虚拟机规范将所有继承抽象类java.lang.ClassLoader的类加载器，定义为自定义类加载器\n     \n     \n## 3. 双亲委派模型\n![双亲委派模型](./classLoad/03.png)\n如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式 。\n- 除了启动类加载器以外，每个类加载器拥有一个父类加载器，用户的自定义类加载器的父类加载器是AppClassLoader；\n- 双亲委派模型可以保证全限名指定的类，只被加载一次；\n- 双亲委派模型不具有强制性约束，是Java设计者推荐的类加载器实现方式；\n\n### 3.1 双亲委派模式优势\n1. 采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次\n2. java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改\n3. 如果我们在classpath路径下自定义一个名为java.lang.SingleInterge类(该类是胡编的)呢？该类并不存在java.lang中，经过双亲委托模式，传递到启动类加载器中，由于父类加载器路径下并没有该类，所以不会加载，将反向委托给子类加载器加载，最终会通过系统类加载器加载该类。但是这样做是不允许，因为java.lang是核心API包，需要访问权限，强制加载将会报出如下异常\n\n### 3.2 双庆委派模型实现源码\n可以打开 java.lang.ClassLoader 类，其 loadClass方法如下：\n```java\nprotected Class<?> loadClass(String name, boolean resolve)\n        throws ClassNotFoundException\n    {\n        synchronized (getClassLoadingLock(name)) {\n            // First, check if the class has already been loaded\n            Class<?> c = findLoadedClass(name);\n            if (c == null) {\n                long t0 = System.nanoTime();\n                try {\n                    if (parent != null) {\n                        c = parent.loadClass(name, false);\n                    } else {\n                        c = findBootstrapClassOrNull(name);\n                    }\n                } catch (ClassNotFoundException e) {\n                    // ClassNotFoundException thrown if class not found\n                    // from the non-null parent class loader\n                }\n\n                if (c == null) {\n                    // If still not found, then invoke findClass in order\n                    // to find the class.\n                    long t1 = System.nanoTime();\n                    c = findClass(name);\n\n                    // this is the defining class loader; record the stats\n                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                    sun.misc.PerfCounter.getFindClasses().increment();\n                }\n            }\n            if (resolve) {\n                resolveClass(c);\n            }\n            return c;\n        }\n    }\n```\n实现方式很简单，首先会检查该类是否已经被加载过了，若加载过了直接返回（默认resolve取false）；若没有被加载，则调用父类加载器的 loadClass方法，若父类加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，则在抛出 ClassNotFoundException 异常后，在调用自己的 findClass 方法进行加载\n\n## 4.自定义类加载器\n1. 加密\n   \n   我们知道Java字节码是可以进行反编译的，在某些安全性高的场景，是不允许这种情况发生的。那么我们可以将编译后的代码用某种加密算法进行加密，加密后的文件就不能再用常规的类加载器去加载类了。而我们自己可以自定义类加载器在加载的时候先解密，然后在加载\n\n2. 动态创建\n\n   比如很有名的动态代理。\n\n3. 从非标准的来源加载代码\n   我们不用非要从class文件中获取定义此类的二进制流，还可以从数据库，从网络中，或者从zip包等。\n\n\n### 4.1 自定义类加载器方法\n   类加载时根据双亲委派模型会先一层层找到父加载器，如果加载失败，则会调用当前加载器的 findClass() 方法来完成加载。因此我们自定义类加载器，有两个步骤：\n   1、继承 ClassLoader\n\n   2、覆写 findClass() 方法","source":"_posts/2021/07/classLoad.md","raw":"---\ntitle: JAVA类加载过程\ntags: ClassLoader\ncategories: java\ncomments: true\ntranslate_title: java-class-loading-process\nabbrlink: 61691\ndate: 2021-07-31 11:04:02\n---\n\n## 1.类加载机制\nJVM将类描述数据从.class文件中加载到内存，并对数据进行解析、初始化，最终形成被JVM直接使用的Java类型；类从被加载到JVM中开始，到卸载为止，\n整个生命周期包括：**加载、验证、准备、解析、初始化、使用和卸载**7个阶段\n![完整的类加载过程](./classLoad/01.png)\n\n1. 加载\n\n    加载时jvm做了三件事\n    - 1)通过一个类的全限定名获取该类的二进制流\n    - 2)将这个字节流的静态存储结构转化为方法区运行时数据结构\n    - 3)在内存堆中生成一个代表该类的java.lang.class对象，最为该类数据的访问入口\n\n2. 验证\n   \n    验证、准备、解析这三步可以看作是一个连接的过程，将类的字节码连接到JVM的运行黄台之中;  验证是为了确保class文件的字节流中包含的信息符合当前虚拟机的要求，不会威胁到jvm的安全。\n   验证内容如下：\n    - 文件格式的验证： 验证字节流是否符合class文件袋额规范，是否能被当前版本的虚拟机处理\n    - 元数据验证： 对字节码描述的信息进行语义分析，确保符合Java语言规范\n    - 字节码验证：通过数据流和控制流分析，确定寓意是否合法，符合逻辑的\n    - 符号引用验证：这个娇艳在解析阶段发生\n    \n3. 准备\n\n    为类的静态变量分配内存，设置初始值，对于final static修饰的变量，直接赋值为用户的定义值。\n   ```java\n   //准备阶段过后的初始值为0， 而不是7\n    public static int a = 7;\n   ```\n\n4. 解析\n\n    解析是将常量池内的符号引用转化为直接引用（如物理内存地址指针）\n   \n5. 初始化\n   \n    初始化阶段，jvm才开始真正执行类中定义的Java代码\n    - 执行类构造器<clinit>()方法的过程，类构造器方法是有编译器自动手机类中所有类变量的赋值动作和静态语句块（static块）中的语句合并产生的\n    - 当初始化一个类的时候，如果发现其父类还没有进行过初始化，需有限触发其父类的初始化\n    - 虚拟机会保证一个类的<clinit>()方法在多线程环境被正确加锁和同步\n      ![完整的类加载过程2](./classLoad/02.png)\n\n## 2.类加载器\n类加载器的主要任务：对类加载过程中的加载操作（根据一个类的全限定名读取该类的二进制字节流到JVM内部，然后转换为一个对应的java.lang.Class对象实例）\n\n类加载器的分类\n   \n   - 启动类加载器Bootstrap ClassLoader:\n     在HotSpot虚拟机中，Bootstrap ClassLoader用C++语言编写并嵌入JVM内部，主要负载加载JAVA_HOME/lib目录中的所有类，或者加载由选项-Xbootcalsspath指定的路径下的类\n   - 拓展类加载器/ExtClassLoader：\n     ExtClassLoader继承ClassLoader类，负载加载JAVA_HOME/lib/ext目录中的所有类型，或者由参数-Xbootclasspath指定路径中的所有类型\n   - 应用程序类加载器/AppClassLoader: \n     ExtClassLoader继承ClassLoader类，负责加载用户类路径ClassPath下的所有类型，一般情况下为程序的默认类加载器\n   - 自定义加载器: \n     Java虚拟机规范将所有继承抽象类java.lang.ClassLoader的类加载器，定义为自定义类加载器\n     \n     \n## 3. 双亲委派模型\n![双亲委派模型](./classLoad/03.png)\n如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式 。\n- 除了启动类加载器以外，每个类加载器拥有一个父类加载器，用户的自定义类加载器的父类加载器是AppClassLoader；\n- 双亲委派模型可以保证全限名指定的类，只被加载一次；\n- 双亲委派模型不具有强制性约束，是Java设计者推荐的类加载器实现方式；\n\n### 3.1 双亲委派模式优势\n1. 采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次\n2. java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改\n3. 如果我们在classpath路径下自定义一个名为java.lang.SingleInterge类(该类是胡编的)呢？该类并不存在java.lang中，经过双亲委托模式，传递到启动类加载器中，由于父类加载器路径下并没有该类，所以不会加载，将反向委托给子类加载器加载，最终会通过系统类加载器加载该类。但是这样做是不允许，因为java.lang是核心API包，需要访问权限，强制加载将会报出如下异常\n\n### 3.2 双庆委派模型实现源码\n可以打开 java.lang.ClassLoader 类，其 loadClass方法如下：\n```java\nprotected Class<?> loadClass(String name, boolean resolve)\n        throws ClassNotFoundException\n    {\n        synchronized (getClassLoadingLock(name)) {\n            // First, check if the class has already been loaded\n            Class<?> c = findLoadedClass(name);\n            if (c == null) {\n                long t0 = System.nanoTime();\n                try {\n                    if (parent != null) {\n                        c = parent.loadClass(name, false);\n                    } else {\n                        c = findBootstrapClassOrNull(name);\n                    }\n                } catch (ClassNotFoundException e) {\n                    // ClassNotFoundException thrown if class not found\n                    // from the non-null parent class loader\n                }\n\n                if (c == null) {\n                    // If still not found, then invoke findClass in order\n                    // to find the class.\n                    long t1 = System.nanoTime();\n                    c = findClass(name);\n\n                    // this is the defining class loader; record the stats\n                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                    sun.misc.PerfCounter.getFindClasses().increment();\n                }\n            }\n            if (resolve) {\n                resolveClass(c);\n            }\n            return c;\n        }\n    }\n```\n实现方式很简单，首先会检查该类是否已经被加载过了，若加载过了直接返回（默认resolve取false）；若没有被加载，则调用父类加载器的 loadClass方法，若父类加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，则在抛出 ClassNotFoundException 异常后，在调用自己的 findClass 方法进行加载\n\n## 4.自定义类加载器\n1. 加密\n   \n   我们知道Java字节码是可以进行反编译的，在某些安全性高的场景，是不允许这种情况发生的。那么我们可以将编译后的代码用某种加密算法进行加密，加密后的文件就不能再用常规的类加载器去加载类了。而我们自己可以自定义类加载器在加载的时候先解密，然后在加载\n\n2. 动态创建\n\n   比如很有名的动态代理。\n\n3. 从非标准的来源加载代码\n   我们不用非要从class文件中获取定义此类的二进制流，还可以从数据库，从网络中，或者从zip包等。\n\n\n### 4.1 自定义类加载器方法\n   类加载时根据双亲委派模型会先一层层找到父加载器，如果加载失败，则会调用当前加载器的 findClass() 方法来完成加载。因此我们自定义类加载器，有两个步骤：\n   1、继承 ClassLoader\n\n   2、覆写 findClass() 方法","slug":"classLoad","published":1,"updated":"2022-03-27T14:06:03.354Z","layout":"post","photos":[],"link":"","_id":"cl235zcw6001gwjpj2o2176u5","content":"<h2 id=\"1类加载机制\"><a class=\"markdownIt-Anchor\" href=\"#1类加载机制\"></a> 1.类加载机制</h2>\n<p>JVM将类描述数据从.class文件中加载到内存，并对数据进行解析、初始化，最终形成被JVM直接使用的Java类型；类从被加载到JVM中开始，到卸载为止，<br>\n整个生命周期包括：<strong>加载、验证、准备、解析、初始化、使用和卸载</strong>7个阶段<br>\n<img src=\"/classLoad/01.png\" alt=\"完整的类加载过程\"></p>\n<ol>\n<li>\n<p>加载</p>\n<p>加载时jvm做了三件事</p>\n<ul>\n<li>1)通过一个类的全限定名获取该类的二进制流</li>\n<li>2)将这个字节流的静态存储结构转化为方法区运行时数据结构</li>\n<li>3)在内存堆中生成一个代表该类的java.lang.class对象，最为该类数据的访问入口</li>\n</ul>\n</li>\n<li>\n<p>验证</p>\n<p>验证、准备、解析这三步可以看作是一个连接的过程，将类的字节码连接到JVM的运行黄台之中;  验证是为了确保class文件的字节流中包含的信息符合当前虚拟机的要求，不会威胁到jvm的安全。<br>\n验证内容如下：</p>\n<ul>\n<li>文件格式的验证： 验证字节流是否符合class文件袋额规范，是否能被当前版本的虚拟机处理</li>\n<li>元数据验证： 对字节码描述的信息进行语义分析，确保符合Java语言规范</li>\n<li>字节码验证：通过数据流和控制流分析，确定寓意是否合法，符合逻辑的</li>\n<li>符号引用验证：这个娇艳在解析阶段发生</li>\n</ul>\n</li>\n<li>\n<p>准备</p>\n<p>为类的静态变量分配内存，设置初始值，对于final static修饰的变量，直接赋值为用户的定义值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//准备阶段过后的初始值为0， 而不是7</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>解析</p>\n<p>解析是将常量池内的符号引用转化为直接引用（如物理内存地址指针）</p>\n</li>\n<li>\n<p>初始化</p>\n<p>初始化阶段，jvm才开始真正执行类中定义的Java代码</p>\n<ul>\n<li>执行类构造器<clinit>()方法的过程，类构造器方法是有编译器自动手机类中所有类变量的赋值动作和静态语句块（static块）中的语句合并产生的</clinit></li>\n<li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，需有限触发其父类的初始化</li>\n<li>虚拟机会保证一个类的<clinit>()方法在多线程环境被正确加锁和同步<br>\n<img src=\"/classLoad/02.png\" alt=\"完整的类加载过程2\"></clinit></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2类加载器\"><a class=\"markdownIt-Anchor\" href=\"#2类加载器\"></a> 2.类加载器</h2>\n<p>类加载器的主要任务：对类加载过程中的加载操作（根据一个类的全限定名读取该类的二进制字节流到JVM内部，然后转换为一个对应的java.lang.Class对象实例）</p>\n<p>类加载器的分类</p>\n<ul>\n<li>启动类加载器Bootstrap ClassLoader:<br>\n在HotSpot虚拟机中，Bootstrap ClassLoader用C++语言编写并嵌入JVM内部，主要负载加载JAVA_HOME/lib目录中的所有类，或者加载由选项-Xbootcalsspath指定的路径下的类</li>\n<li>拓展类加载器/ExtClassLoader：<br>\nExtClassLoader继承ClassLoader类，负载加载JAVA_HOME/lib/ext目录中的所有类型，或者由参数-Xbootclasspath指定路径中的所有类型</li>\n<li>应用程序类加载器/AppClassLoader:<br>\nExtClassLoader继承ClassLoader类，负责加载用户类路径ClassPath下的所有类型，一般情况下为程序的默认类加载器</li>\n<li>自定义加载器:<br>\nJava虚拟机规范将所有继承抽象类java.lang.ClassLoader的类加载器，定义为自定义类加载器</li>\n</ul>\n<h2 id=\"3-双亲委派模型\"><a class=\"markdownIt-Anchor\" href=\"#3-双亲委派模型\"></a> 3. 双亲委派模型</h2>\n<p><img src=\"/classLoad/03.png\" alt=\"双亲委派模型\"><br>\n如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式 。</p>\n<ul>\n<li>除了启动类加载器以外，每个类加载器拥有一个父类加载器，用户的自定义类加载器的父类加载器是AppClassLoader；</li>\n<li>双亲委派模型可以保证全限名指定的类，只被加载一次；</li>\n<li>双亲委派模型不具有强制性约束，是Java设计者推荐的类加载器实现方式；</li>\n</ul>\n<h3 id=\"31-双亲委派模式优势\"><a class=\"markdownIt-Anchor\" href=\"#31-双亲委派模式优势\"></a> 3.1 双亲委派模式优势</h3>\n<ol>\n<li>采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次</li>\n<li>java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改</li>\n<li>如果我们在classpath路径下自定义一个名为java.lang.SingleInterge类(该类是胡编的)呢？该类并不存在java.lang中，经过双亲委托模式，传递到启动类加载器中，由于父类加载器路径下并没有该类，所以不会加载，将反向委托给子类加载器加载，最终会通过系统类加载器加载该类。但是这样做是不允许，因为java.lang是核心API包，需要访问权限，强制加载将会报出如下异常</li>\n</ol>\n<h3 id=\"32-双庆委派模型实现源码\"><a class=\"markdownIt-Anchor\" href=\"#32-双庆委派模型实现源码\"></a> 3.2 双庆委派模型实现源码</h3>\n<p>可以打开 java.lang.ClassLoader 类，其 loadClass方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"keyword\">boolean</span> resolve)</span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> t0 = System.nanoTime();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        c = parent.loadClass(name, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></span><br><span class=\"line\">                    <span class=\"comment\">// from the non-null parent class loader</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If still not found, then invoke findClass in order</span></span><br><span class=\"line\">                    <span class=\"comment\">// to find the class.</span></span><br><span class=\"line\">                    <span class=\"keyword\">long</span> t1 = System.nanoTime();</span><br><span class=\"line\">                    c = findClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// this is the defining class loader; record the stats</span></span><br><span class=\"line\">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">                resolveClass(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>实现方式很简单，首先会检查该类是否已经被加载过了，若加载过了直接返回（默认resolve取false）；若没有被加载，则调用父类加载器的 loadClass方法，若父类加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，则在抛出 ClassNotFoundException 异常后，在调用自己的 findClass 方法进行加载</p>\n<h2 id=\"4自定义类加载器\"><a class=\"markdownIt-Anchor\" href=\"#4自定义类加载器\"></a> 4.自定义类加载器</h2>\n<ol>\n<li>\n<p>加密</p>\n<p>我们知道Java字节码是可以进行反编译的，在某些安全性高的场景，是不允许这种情况发生的。那么我们可以将编译后的代码用某种加密算法进行加密，加密后的文件就不能再用常规的类加载器去加载类了。而我们自己可以自定义类加载器在加载的时候先解密，然后在加载</p>\n</li>\n<li>\n<p>动态创建</p>\n<p>比如很有名的动态代理。</p>\n</li>\n<li>\n<p>从非标准的来源加载代码<br>\n我们不用非要从class文件中获取定义此类的二进制流，还可以从数据库，从网络中，或者从zip包等。</p>\n</li>\n</ol>\n<h3 id=\"41-自定义类加载器方法\"><a class=\"markdownIt-Anchor\" href=\"#41-自定义类加载器方法\"></a> 4.1 自定义类加载器方法</h3>\n<p>类加载时根据双亲委派模型会先一层层找到父加载器，如果加载失败，则会调用当前加载器的 findClass() 方法来完成加载。因此我们自定义类加载器，有两个步骤：<br>\n1、继承 ClassLoader</p>\n<p>2、覆写 findClass() 方法</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1类加载机制\"><a class=\"markdownIt-Anchor\" href=\"#1类加载机制\"></a> 1.类加载机制</h2>\n<p>JVM将类描述数据从.class文件中加载到内存，并对数据进行解析、初始化，最终形成被JVM直接使用的Java类型；类从被加载到JVM中开始，到卸载为止，<br>\n整个生命周期包括：<strong>加载、验证、准备、解析、初始化、使用和卸载</strong>7个阶段<br>\n<img src=\"/classLoad/01.png\" alt=\"完整的类加载过程\"></p>\n<ol>\n<li>\n<p>加载</p>\n<p>加载时jvm做了三件事</p>\n<ul>\n<li>1)通过一个类的全限定名获取该类的二进制流</li>\n<li>2)将这个字节流的静态存储结构转化为方法区运行时数据结构</li>\n<li>3)在内存堆中生成一个代表该类的java.lang.class对象，最为该类数据的访问入口</li>\n</ul>\n</li>\n<li>\n<p>验证</p>\n<p>验证、准备、解析这三步可以看作是一个连接的过程，将类的字节码连接到JVM的运行黄台之中;  验证是为了确保class文件的字节流中包含的信息符合当前虚拟机的要求，不会威胁到jvm的安全。<br>\n验证内容如下：</p>\n<ul>\n<li>文件格式的验证： 验证字节流是否符合class文件袋额规范，是否能被当前版本的虚拟机处理</li>\n<li>元数据验证： 对字节码描述的信息进行语义分析，确保符合Java语言规范</li>\n<li>字节码验证：通过数据流和控制流分析，确定寓意是否合法，符合逻辑的</li>\n<li>符号引用验证：这个娇艳在解析阶段发生</li>\n</ul>\n</li>\n<li>\n<p>准备</p>\n<p>为类的静态变量分配内存，设置初始值，对于final static修饰的变量，直接赋值为用户的定义值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//准备阶段过后的初始值为0， 而不是7</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>解析</p>\n<p>解析是将常量池内的符号引用转化为直接引用（如物理内存地址指针）</p>\n</li>\n<li>\n<p>初始化</p>\n<p>初始化阶段，jvm才开始真正执行类中定义的Java代码</p>\n<ul>\n<li>执行类构造器<clinit>()方法的过程，类构造器方法是有编译器自动手机类中所有类变量的赋值动作和静态语句块（static块）中的语句合并产生的</clinit></li>\n<li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，需有限触发其父类的初始化</li>\n<li>虚拟机会保证一个类的<clinit>()方法在多线程环境被正确加锁和同步<br>\n<img src=\"/classLoad/02.png\" alt=\"完整的类加载过程2\"></clinit></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2类加载器\"><a class=\"markdownIt-Anchor\" href=\"#2类加载器\"></a> 2.类加载器</h2>\n<p>类加载器的主要任务：对类加载过程中的加载操作（根据一个类的全限定名读取该类的二进制字节流到JVM内部，然后转换为一个对应的java.lang.Class对象实例）</p>\n<p>类加载器的分类</p>\n<ul>\n<li>启动类加载器Bootstrap ClassLoader:<br>\n在HotSpot虚拟机中，Bootstrap ClassLoader用C++语言编写并嵌入JVM内部，主要负载加载JAVA_HOME/lib目录中的所有类，或者加载由选项-Xbootcalsspath指定的路径下的类</li>\n<li>拓展类加载器/ExtClassLoader：<br>\nExtClassLoader继承ClassLoader类，负载加载JAVA_HOME/lib/ext目录中的所有类型，或者由参数-Xbootclasspath指定路径中的所有类型</li>\n<li>应用程序类加载器/AppClassLoader:<br>\nExtClassLoader继承ClassLoader类，负责加载用户类路径ClassPath下的所有类型，一般情况下为程序的默认类加载器</li>\n<li>自定义加载器:<br>\nJava虚拟机规范将所有继承抽象类java.lang.ClassLoader的类加载器，定义为自定义类加载器</li>\n</ul>\n<h2 id=\"3-双亲委派模型\"><a class=\"markdownIt-Anchor\" href=\"#3-双亲委派模型\"></a> 3. 双亲委派模型</h2>\n<p><img src=\"/classLoad/03.png\" alt=\"双亲委派模型\"><br>\n如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式 。</p>\n<ul>\n<li>除了启动类加载器以外，每个类加载器拥有一个父类加载器，用户的自定义类加载器的父类加载器是AppClassLoader；</li>\n<li>双亲委派模型可以保证全限名指定的类，只被加载一次；</li>\n<li>双亲委派模型不具有强制性约束，是Java设计者推荐的类加载器实现方式；</li>\n</ul>\n<h3 id=\"31-双亲委派模式优势\"><a class=\"markdownIt-Anchor\" href=\"#31-双亲委派模式优势\"></a> 3.1 双亲委派模式优势</h3>\n<ol>\n<li>采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次</li>\n<li>java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改</li>\n<li>如果我们在classpath路径下自定义一个名为java.lang.SingleInterge类(该类是胡编的)呢？该类并不存在java.lang中，经过双亲委托模式，传递到启动类加载器中，由于父类加载器路径下并没有该类，所以不会加载，将反向委托给子类加载器加载，最终会通过系统类加载器加载该类。但是这样做是不允许，因为java.lang是核心API包，需要访问权限，强制加载将会报出如下异常</li>\n</ol>\n<h3 id=\"32-双庆委派模型实现源码\"><a class=\"markdownIt-Anchor\" href=\"#32-双庆委派模型实现源码\"></a> 3.2 双庆委派模型实现源码</h3>\n<p>可以打开 java.lang.ClassLoader 类，其 loadClass方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"keyword\">boolean</span> resolve)</span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> t0 = System.nanoTime();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        c = parent.loadClass(name, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></span><br><span class=\"line\">                    <span class=\"comment\">// from the non-null parent class loader</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If still not found, then invoke findClass in order</span></span><br><span class=\"line\">                    <span class=\"comment\">// to find the class.</span></span><br><span class=\"line\">                    <span class=\"keyword\">long</span> t1 = System.nanoTime();</span><br><span class=\"line\">                    c = findClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// this is the defining class loader; record the stats</span></span><br><span class=\"line\">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">                resolveClass(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>实现方式很简单，首先会检查该类是否已经被加载过了，若加载过了直接返回（默认resolve取false）；若没有被加载，则调用父类加载器的 loadClass方法，若父类加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，则在抛出 ClassNotFoundException 异常后，在调用自己的 findClass 方法进行加载</p>\n<h2 id=\"4自定义类加载器\"><a class=\"markdownIt-Anchor\" href=\"#4自定义类加载器\"></a> 4.自定义类加载器</h2>\n<ol>\n<li>\n<p>加密</p>\n<p>我们知道Java字节码是可以进行反编译的，在某些安全性高的场景，是不允许这种情况发生的。那么我们可以将编译后的代码用某种加密算法进行加密，加密后的文件就不能再用常规的类加载器去加载类了。而我们自己可以自定义类加载器在加载的时候先解密，然后在加载</p>\n</li>\n<li>\n<p>动态创建</p>\n<p>比如很有名的动态代理。</p>\n</li>\n<li>\n<p>从非标准的来源加载代码<br>\n我们不用非要从class文件中获取定义此类的二进制流，还可以从数据库，从网络中，或者从zip包等。</p>\n</li>\n</ol>\n<h3 id=\"41-自定义类加载器方法\"><a class=\"markdownIt-Anchor\" href=\"#41-自定义类加载器方法\"></a> 4.1 自定义类加载器方法</h3>\n<p>类加载时根据双亲委派模型会先一层层找到父加载器，如果加载失败，则会调用当前加载器的 findClass() 方法来完成加载。因此我们自定义类加载器，有两个步骤：<br>\n1、继承 ClassLoader</p>\n<p>2、覆写 findClass() 方法</p>\n"},{"title":"Hexo部署出现错误Error Spawn failed解决方式","comments":1,"translate_title":"error-spawn-failed","abbrlink":12688,"date":"2021-08-15T10:28:42.000Z","_content":"\n部署过程中可能会出现错误:\n```text\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\nremote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.\nfatal: unable to access 'https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git/': The requested URL returned error: 403\nFATAL {\n  err: Error: Spawn failed\n      at ChildProcess.<anonymous> (/Users/xiaoyuge/workspace/mybolg/node_modules/hexo-util/lib/spawn.js:51:21)\n      at ChildProcess.emit (events.js:315:20)\n      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) {\n    code: 128\n  }\n} Something's wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html\nxiaoyuge@xiaoyugedeMacBook-Pro mybolg % hexo clean\n```\n####解决方式一：\n```shell\n##进入站点根目录\ncd cd /Users/xiaoyuge/workspace/mybolg\n\n##删除git提交内容文件夹\nrm -rf .deploy_git/\n\n##执行\ngit config --global core.autocrlf false\n\n##最后\nhexo clean && hexo g && hexo d\n```\n####解决方式二：\n有可能是你的git repo配置地址不正确,可以将http方式变更为ssh方式（我的就是这个问题）\ngithub在2021-08-13正式启用personal access token后，原来的用户名+密码方式部署会报错，需要采用最新的token登录方式进行部署 。\n具体方式参考：https://cloud.tencent.com/developer/article/1861466\n```text\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\n```\n查看_config.yml文件，\n```yaml\ndeploy:\n  type: git\n  #repo:https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git  这是原来的路径，现在改成了下面这种\n  repo: git@github.com:xiaoyuge5201/xiaoyuge5201.github.io.git\n  branch: master\n```","source":"_posts/2021/07/hexo-spawn-failed.md","raw":"---\ntitle: Hexo部署出现错误Error Spawn failed解决方式\ntags: hexo\ncomments: true\ncategories: 踩坑记录\ntranslate_title: error-spawn-failed\nabbrlink: 12688\ndate: 2021-08-15 18:28:42\n---\n\n部署过程中可能会出现错误:\n```text\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\nremote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.\nfatal: unable to access 'https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git/': The requested URL returned error: 403\nFATAL {\n  err: Error: Spawn failed\n      at ChildProcess.<anonymous> (/Users/xiaoyuge/workspace/mybolg/node_modules/hexo-util/lib/spawn.js:51:21)\n      at ChildProcess.emit (events.js:315:20)\n      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) {\n    code: 128\n  }\n} Something's wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html\nxiaoyuge@xiaoyugedeMacBook-Pro mybolg % hexo clean\n```\n####解决方式一：\n```shell\n##进入站点根目录\ncd cd /Users/xiaoyuge/workspace/mybolg\n\n##删除git提交内容文件夹\nrm -rf .deploy_git/\n\n##执行\ngit config --global core.autocrlf false\n\n##最后\nhexo clean && hexo g && hexo d\n```\n####解决方式二：\n有可能是你的git repo配置地址不正确,可以将http方式变更为ssh方式（我的就是这个问题）\ngithub在2021-08-13正式启用personal access token后，原来的用户名+密码方式部署会报错，需要采用最新的token登录方式进行部署 。\n具体方式参考：https://cloud.tencent.com/developer/article/1861466\n```text\nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\n```\n查看_config.yml文件，\n```yaml\ndeploy:\n  type: git\n  #repo:https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git  这是原来的路径，现在改成了下面这种\n  repo: git@github.com:xiaoyuge5201/xiaoyuge5201.github.io.git\n  branch: master\n```","slug":"hexo-spawn-failed","published":1,"updated":"2022-03-27T14:06:03.315Z","layout":"post","photos":[],"link":"","_id":"cl235zcw7001iwjpjeygzap6w","content":"<p>部署过程中可能会出现错误:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br><span class=\"line\">remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.</span><br><span class=\"line\">fatal: unable to access &#x27;https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git/&#x27;: The requested URL returned error: 403</span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  err: Error: Spawn failed</span><br><span class=\"line\">      at ChildProcess.&lt;anonymous&gt; (/Users/xiaoyuge/workspace/mybolg/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class=\"line\">      at ChildProcess.emit (events.js:315:20)</span><br><span class=\"line\">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class=\"line\">    code: 128</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class=\"line\">xiaoyuge@xiaoyugedeMacBook-Pro mybolg % hexo clean</span><br></pre></td></tr></table></figure>\n<p>####解决方式一：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#进入站点根目录</span></span></span><br><span class=\"line\">cd cd /Users/xiaoyuge/workspace/mybolg</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#删除git提交内容文件夹</span></span></span><br><span class=\"line\">rm -rf .deploy_git/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#执行</span></span></span><br><span class=\"line\">git config --global core.autocrlf false</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#最后</span></span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n<p>####解决方式二：<br>\n有可能是你的git repo配置地址不正确,可以将http方式变更为ssh方式（我的就是这个问题）<br>\ngithub在2021-08-13正式启用personal access token后，原来的用户名+密码方式部署会报错，需要采用最新的token登录方式进行部署 。<br>\n具体方式参考：<a href=\"https://cloud.tencent.com/developer/article/1861466\">https://cloud.tencent.com/developer/article/1861466</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br></pre></td></tr></table></figure>\n<p>查看_config.yml文件，</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"comment\">#repo:https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git  这是原来的路径，现在改成了下面这种</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:xiaoyuge5201/xiaoyuge5201.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>部署过程中可能会出现错误:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br><span class=\"line\">remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.</span><br><span class=\"line\">fatal: unable to access &#x27;https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git/&#x27;: The requested URL returned error: 403</span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  err: Error: Spawn failed</span><br><span class=\"line\">      at ChildProcess.&lt;anonymous&gt; (/Users/xiaoyuge/workspace/mybolg/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class=\"line\">      at ChildProcess.emit (events.js:315:20)</span><br><span class=\"line\">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class=\"line\">    code: 128</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class=\"line\">xiaoyuge@xiaoyugedeMacBook-Pro mybolg % hexo clean</span><br></pre></td></tr></table></figure>\n<p>####解决方式一：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#进入站点根目录</span></span></span><br><span class=\"line\">cd cd /Users/xiaoyuge/workspace/mybolg</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#删除git提交内容文件夹</span></span></span><br><span class=\"line\">rm -rf .deploy_git/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#执行</span></span></span><br><span class=\"line\">git config --global core.autocrlf false</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#最后</span></span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n<p>####解决方式二：<br>\n有可能是你的git repo配置地址不正确,可以将http方式变更为ssh方式（我的就是这个问题）<br>\ngithub在2021-08-13正式启用personal access token后，原来的用户名+密码方式部署会报错，需要采用最新的token登录方式进行部署 。<br>\n具体方式参考：<a href=\"https://cloud.tencent.com/developer/article/1861466\">https://cloud.tencent.com/developer/article/1861466</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br></pre></td></tr></table></figure>\n<p>查看_config.yml文件，</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"comment\">#repo:https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git  这是原来的路径，现在改成了下面这种</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:xiaoyuge5201/xiaoyuge5201.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>"},{"title":"面试常见的趣味题","comments":1,"abbrlink":16635,"date":"2021-06-14T02:09:15.000Z","translate_title":"interesting-questions-in-interview","_content":"### 8升、5升、3升水桶各一个,如何分成两个4升\n![分成两个4升](./interest/3_5_8.png)\n\n### 以面向对象的思想设计长方形和正方形\n- 方式1：设计接口，然后长方形和正方形各自实现这个接口\n```java\n//形状类：结算面积和周长\npublic interface Shape {\n\tpublic double area();\n\tpublic double perimeter();\n}\n```\n```java\n//长方形：实现接口并实现方法\npublic class Rectangle implements Shape {\n\tprivate double width;\n\tprivate double height;\n\tpublic Rectangle(double width,double height){\n\t\tthis.width=width;\n\t\tthis.height=height;\n\t}\t\n\t@Override\n\tpublic double area() {\n\t\treturn this.width*this.height;\n\t}\n\t@Override\n\tpublic double perimeter() {\n\t\treturn 2*(this.width+this.height);\n\t}\n}\n```\n```java\n//正方形：实现接口并实现方法\npublic class Square implements Shape {\n\tprivate double side;\n\tpublic Square(double side){\n\t\tthis.side=side;\n\t}\n\t@Override\n\tpublic double area() {\n\t\treturn side*side;\n\t}\n \n\t@Override\n\tpublic double perimeter() {\n\t\treturn 4*side;\n\t}\n}\n```\n- 方式2：使用extents\n因为正方形 **is a** 长方形，所以可以使用继承来设计正方形，然后在构造函数中使用super函数；\n  \n```java\npublic class Square extends Rectangle{\n\tprivate double side;\n\tpublic Square(double side){\n\t\tsuper(side,side);\n\t\tthis.side=side;\n\t}\n\tpublic static void main(String[] args) {\n\t\tSquare s=new Square(2.5);\n\t\tSystem.out.println(s.perimeter());\n\t\tSystem.out.println(s.area());\n\t}\n}\n```\n\n### java使用递归计算1+2+3+...+n之间的和\n```java\npublic class SumNumber {\n\n    public static void main(String[] args) {\n        System.out.println(sumN(10));\n    }\n\n    //使用递归的方法计算1+2+3+4+....n的和; 切记注意n不能小于1\n    public static int sumN(int n) {\n        if (n == 1){\n            return 1;\n        }\n        return n+ sumN(n-1);\n    }\n}\n```\n\n### java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数\n文件文章中存在,.以及空格\n- 读取文件内容\n- 对文件进行内容匹配\n- 使用map 保存单词、次数\n- map排序\n- 输出\n```java\npublic class WordCount {\n\n    public static void main(String[] args) {\n        try {\n            //1. 使用流读取文件\n            BufferedReader reader = new BufferedReader(new FileReader(\"d:/n.txt\"));\n            StringBuffer sb = new StringBuffer();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n            reader.close();\n            //替换所有的英文逗号和句号\n            String temp = sb.toString().replaceAll(\"/[\\\\w\\\\,\\\\.]+/\", \"\");\n            //2.使用正则表达式匹配\n            Pattern pattern = Pattern.compile(\"/[a-zA-Z\\\\w\\\\,\\\\.]+/\");\n            Matcher matcher = pattern.matcher(temp);\n            Map<String, Integer> map = new HashMap<>(16);\n            String word;\n            int count;\n            while (matcher.find()) {\n                word = matcher.group();\n                if (map.containsKey(word)) {\n                    count = map.get(word);\n                    map.put(word, count + 1);\n                } else {\n                    map.put(word, 1);\n                }\n            }\n            //将map的数据根据count排序；\n            List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());\n            Collections.sort(list, Comparator.comparing(Map.Entry::getValue));\n            int last = list.size() - 1;\n            for (int i = last; i > last - 5; i--) {\n                System.out.println(\"key=\" + list.get(i).getKey() + \" value=\" + list.get(i).getValue());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### java 获取字符串第一次出现重复的字符\n```java\npublic static int findDuplicate(String str){\n    char[] chars = str.toCharArray();\n    Set<Character> uniqueChars = new HashSet(chars.length,1);\n    for (int i = 0; i < chars.length; i++) {\n        if (!uniqueChars.add(chars[i])){\n            return i;\n        }\n    }\n    return -1;\n}\n```\n\n\n","source":"_posts/2021/07/interest.md","raw":"---\ntitle: 面试常见的趣味题\ntags: algorithm\ncomments: true\ncategories: 算法\nabbrlink: 16635\ndate: 2021-06-14 10:09:15\ntranslate_title: interesting-questions-in-interview\n---\n### 8升、5升、3升水桶各一个,如何分成两个4升\n![分成两个4升](./interest/3_5_8.png)\n\n### 以面向对象的思想设计长方形和正方形\n- 方式1：设计接口，然后长方形和正方形各自实现这个接口\n```java\n//形状类：结算面积和周长\npublic interface Shape {\n\tpublic double area();\n\tpublic double perimeter();\n}\n```\n```java\n//长方形：实现接口并实现方法\npublic class Rectangle implements Shape {\n\tprivate double width;\n\tprivate double height;\n\tpublic Rectangle(double width,double height){\n\t\tthis.width=width;\n\t\tthis.height=height;\n\t}\t\n\t@Override\n\tpublic double area() {\n\t\treturn this.width*this.height;\n\t}\n\t@Override\n\tpublic double perimeter() {\n\t\treturn 2*(this.width+this.height);\n\t}\n}\n```\n```java\n//正方形：实现接口并实现方法\npublic class Square implements Shape {\n\tprivate double side;\n\tpublic Square(double side){\n\t\tthis.side=side;\n\t}\n\t@Override\n\tpublic double area() {\n\t\treturn side*side;\n\t}\n \n\t@Override\n\tpublic double perimeter() {\n\t\treturn 4*side;\n\t}\n}\n```\n- 方式2：使用extents\n因为正方形 **is a** 长方形，所以可以使用继承来设计正方形，然后在构造函数中使用super函数；\n  \n```java\npublic class Square extends Rectangle{\n\tprivate double side;\n\tpublic Square(double side){\n\t\tsuper(side,side);\n\t\tthis.side=side;\n\t}\n\tpublic static void main(String[] args) {\n\t\tSquare s=new Square(2.5);\n\t\tSystem.out.println(s.perimeter());\n\t\tSystem.out.println(s.area());\n\t}\n}\n```\n\n### java使用递归计算1+2+3+...+n之间的和\n```java\npublic class SumNumber {\n\n    public static void main(String[] args) {\n        System.out.println(sumN(10));\n    }\n\n    //使用递归的方法计算1+2+3+4+....n的和; 切记注意n不能小于1\n    public static int sumN(int n) {\n        if (n == 1){\n            return 1;\n        }\n        return n+ sumN(n-1);\n    }\n}\n```\n\n### java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数\n文件文章中存在,.以及空格\n- 读取文件内容\n- 对文件进行内容匹配\n- 使用map 保存单词、次数\n- map排序\n- 输出\n```java\npublic class WordCount {\n\n    public static void main(String[] args) {\n        try {\n            //1. 使用流读取文件\n            BufferedReader reader = new BufferedReader(new FileReader(\"d:/n.txt\"));\n            StringBuffer sb = new StringBuffer();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n            reader.close();\n            //替换所有的英文逗号和句号\n            String temp = sb.toString().replaceAll(\"/[\\\\w\\\\,\\\\.]+/\", \"\");\n            //2.使用正则表达式匹配\n            Pattern pattern = Pattern.compile(\"/[a-zA-Z\\\\w\\\\,\\\\.]+/\");\n            Matcher matcher = pattern.matcher(temp);\n            Map<String, Integer> map = new HashMap<>(16);\n            String word;\n            int count;\n            while (matcher.find()) {\n                word = matcher.group();\n                if (map.containsKey(word)) {\n                    count = map.get(word);\n                    map.put(word, count + 1);\n                } else {\n                    map.put(word, 1);\n                }\n            }\n            //将map的数据根据count排序；\n            List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());\n            Collections.sort(list, Comparator.comparing(Map.Entry::getValue));\n            int last = list.size() - 1;\n            for (int i = last; i > last - 5; i--) {\n                System.out.println(\"key=\" + list.get(i).getKey() + \" value=\" + list.get(i).getValue());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### java 获取字符串第一次出现重复的字符\n```java\npublic static int findDuplicate(String str){\n    char[] chars = str.toCharArray();\n    Set<Character> uniqueChars = new HashSet(chars.length,1);\n    for (int i = 0; i < chars.length; i++) {\n        if (!uniqueChars.add(chars[i])){\n            return i;\n        }\n    }\n    return -1;\n}\n```\n\n\n","slug":"interest","published":1,"updated":"2022-03-27T14:06:03.392Z","layout":"post","photos":[],"link":"","_id":"cl235zcw8001nwjpjekwm7f8v","content":"<h3 id=\"8升-5升-3升水桶各一个如何分成两个4升\"><a class=\"markdownIt-Anchor\" href=\"#8升-5升-3升水桶各一个如何分成两个4升\"></a> 8升、5升、3升水桶各一个,如何分成两个4升</h3>\n<p><img src=\"/interest/3_5_8.png\" alt=\"分成两个4升\"></p>\n<h3 id=\"以面向对象的思想设计长方形和正方形\"><a class=\"markdownIt-Anchor\" href=\"#以面向对象的思想设计长方形和正方形\"></a> 以面向对象的思想设计长方形和正方形</h3>\n<ul>\n<li>方式1：设计接口，然后长方形和正方形各自实现这个接口</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//形状类：结算面积和周长</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">perimeter</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//长方形：实现接口并实现方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> width;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> height;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Rectangle</span><span class=\"params\">(<span class=\"keyword\">double</span> width,<span class=\"keyword\">double</span> height)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.width=width;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.height=height;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width*<span class=\"keyword\">this</span>.height;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">perimeter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">2</span>*(<span class=\"keyword\">this</span>.width+<span class=\"keyword\">this</span>.height);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正方形：实现接口并实现方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> side;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> side)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.side=side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> side*side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">perimeter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">4</span>*side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方式2：使用extents<br>\n因为正方形 <strong>is a</strong> 长方形，所以可以使用继承来设计正方形，然后在构造函数中使用super函数；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Rectangle</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> side;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> side)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(side,side);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.side=side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSquare s=<span class=\"keyword\">new</span> Square(<span class=\"number\">2.5</span>);</span><br><span class=\"line\">\t\tSystem.out.println(s.perimeter());</span><br><span class=\"line\">\t\tSystem.out.println(s.area());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"java使用递归计算123n之间的和\"><a class=\"markdownIt-Anchor\" href=\"#java使用递归计算123n之间的和\"></a> java使用递归计算1+2+3+…+n之间的和</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SumNumber</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(sumN(<span class=\"number\">10</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用递归的方法计算1+2+3+4+....n的和; 切记注意n不能小于1</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sumN</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n+ sumN(n-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"java读取一篇英文文章并输出其中出现单词次数最多的3个单词以及次数\"><a class=\"markdownIt-Anchor\" href=\"#java读取一篇英文文章并输出其中出现单词次数最多的3个单词以及次数\"></a> java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数</h3>\n<p>文件文章中存在,.以及空格</p>\n<ul>\n<li>读取文件内容</li>\n<li>对文件进行内容匹配</li>\n<li>使用map 保存单词、次数</li>\n<li>map排序</li>\n<li>输出</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordCount</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//1. 使用流读取文件</span></span><br><span class=\"line\">            BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">&quot;d:/n.txt&quot;</span>));</span><br><span class=\"line\">            StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((line = reader.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                sb.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            reader.close();</span><br><span class=\"line\">            <span class=\"comment\">//替换所有的英文逗号和句号</span></span><br><span class=\"line\">            String temp = sb.toString().replaceAll(<span class=\"string\">&quot;/[\\\\w\\\\,\\\\.]+/&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//2.使用正则表达式匹配</span></span><br><span class=\"line\">            Pattern pattern = Pattern.compile(<span class=\"string\">&quot;/[a-zA-Z\\\\w\\\\,\\\\.]+/&quot;</span>);</span><br><span class=\"line\">            Matcher matcher = pattern.matcher(temp);</span><br><span class=\"line\">            Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">            String word;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (matcher.find()) &#123;</span><br><span class=\"line\">                word = matcher.group();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (map.containsKey(word)) &#123;</span><br><span class=\"line\">                    count = map.get(word);</span><br><span class=\"line\">                    map.put(word, count + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    map.put(word, <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//将map的数据根据count排序；</span></span><br><span class=\"line\">            List&lt;Map.Entry&lt;String, Integer&gt;&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(map.entrySet());</span><br><span class=\"line\">            Collections.sort(list, Comparator.comparing(Map.Entry::getValue));</span><br><span class=\"line\">            <span class=\"keyword\">int</span> last = list.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = last; i &gt; last - <span class=\"number\">5</span>; i--) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;key=&quot;</span> + list.get(i).getKey() + <span class=\"string\">&quot; value=&quot;</span> + list.get(i).getValue());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"java-获取字符串第一次出现重复的字符\"><a class=\"markdownIt-Anchor\" href=\"#java-获取字符串第一次出现重复的字符\"></a> java 获取字符串第一次出现重复的字符</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">findDuplicate</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] chars = str.toCharArray();</span><br><span class=\"line\">    Set&lt;Character&gt; uniqueChars = <span class=\"keyword\">new</span> HashSet(chars.length,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!uniqueChars.add(chars[i]))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"8升-5升-3升水桶各一个如何分成两个4升\"><a class=\"markdownIt-Anchor\" href=\"#8升-5升-3升水桶各一个如何分成两个4升\"></a> 8升、5升、3升水桶各一个,如何分成两个4升</h3>\n<p><img src=\"/interest/3_5_8.png\" alt=\"分成两个4升\"></p>\n<h3 id=\"以面向对象的思想设计长方形和正方形\"><a class=\"markdownIt-Anchor\" href=\"#以面向对象的思想设计长方形和正方形\"></a> 以面向对象的思想设计长方形和正方形</h3>\n<ul>\n<li>方式1：设计接口，然后长方形和正方形各自实现这个接口</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//形状类：结算面积和周长</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">perimeter</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//长方形：实现接口并实现方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> width;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> height;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Rectangle</span><span class=\"params\">(<span class=\"keyword\">double</span> width,<span class=\"keyword\">double</span> height)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.width=width;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.height=height;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width*<span class=\"keyword\">this</span>.height;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">perimeter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">2</span>*(<span class=\"keyword\">this</span>.width+<span class=\"keyword\">this</span>.height);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正方形：实现接口并实现方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> side;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> side)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.side=side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> side*side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">perimeter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">4</span>*side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方式2：使用extents<br>\n因为正方形 <strong>is a</strong> 长方形，所以可以使用继承来设计正方形，然后在构造函数中使用super函数；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Rectangle</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> side;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> side)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(side,side);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.side=side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSquare s=<span class=\"keyword\">new</span> Square(<span class=\"number\">2.5</span>);</span><br><span class=\"line\">\t\tSystem.out.println(s.perimeter());</span><br><span class=\"line\">\t\tSystem.out.println(s.area());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"java使用递归计算123n之间的和\"><a class=\"markdownIt-Anchor\" href=\"#java使用递归计算123n之间的和\"></a> java使用递归计算1+2+3+…+n之间的和</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SumNumber</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(sumN(<span class=\"number\">10</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用递归的方法计算1+2+3+4+....n的和; 切记注意n不能小于1</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sumN</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n+ sumN(n-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"java读取一篇英文文章并输出其中出现单词次数最多的3个单词以及次数\"><a class=\"markdownIt-Anchor\" href=\"#java读取一篇英文文章并输出其中出现单词次数最多的3个单词以及次数\"></a> java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数</h3>\n<p>文件文章中存在,.以及空格</p>\n<ul>\n<li>读取文件内容</li>\n<li>对文件进行内容匹配</li>\n<li>使用map 保存单词、次数</li>\n<li>map排序</li>\n<li>输出</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordCount</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//1. 使用流读取文件</span></span><br><span class=\"line\">            BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">&quot;d:/n.txt&quot;</span>));</span><br><span class=\"line\">            StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((line = reader.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                sb.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            reader.close();</span><br><span class=\"line\">            <span class=\"comment\">//替换所有的英文逗号和句号</span></span><br><span class=\"line\">            String temp = sb.toString().replaceAll(<span class=\"string\">&quot;/[\\\\w\\\\,\\\\.]+/&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//2.使用正则表达式匹配</span></span><br><span class=\"line\">            Pattern pattern = Pattern.compile(<span class=\"string\">&quot;/[a-zA-Z\\\\w\\\\,\\\\.]+/&quot;</span>);</span><br><span class=\"line\">            Matcher matcher = pattern.matcher(temp);</span><br><span class=\"line\">            Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">            String word;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (matcher.find()) &#123;</span><br><span class=\"line\">                word = matcher.group();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (map.containsKey(word)) &#123;</span><br><span class=\"line\">                    count = map.get(word);</span><br><span class=\"line\">                    map.put(word, count + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    map.put(word, <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//将map的数据根据count排序；</span></span><br><span class=\"line\">            List&lt;Map.Entry&lt;String, Integer&gt;&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(map.entrySet());</span><br><span class=\"line\">            Collections.sort(list, Comparator.comparing(Map.Entry::getValue));</span><br><span class=\"line\">            <span class=\"keyword\">int</span> last = list.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = last; i &gt; last - <span class=\"number\">5</span>; i--) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;key=&quot;</span> + list.get(i).getKey() + <span class=\"string\">&quot; value=&quot;</span> + list.get(i).getValue());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"java-获取字符串第一次出现重复的字符\"><a class=\"markdownIt-Anchor\" href=\"#java-获取字符串第一次出现重复的字符\"></a> java 获取字符串第一次出现重复的字符</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">findDuplicate</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] chars = str.toCharArray();</span><br><span class=\"line\">    Set&lt;Character&gt; uniqueChars = <span class=\"keyword\">new</span> HashSet(chars.length,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!uniqueChars.add(chars[i]))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Java内部类初始化","comments":1,"translate_title":"java-internal-class-initialization","abbrlink":50009,"date":"2021-05-31T16:00:00.000Z","_content":"### 1. 在同个java文件中，但不是内部类\n```java\npublic class C {\n}\n//在同一个Java文件中只能存在一个public类，除内部类外\n//只允许使用“public”、“abstract”和“final”。\nclass D{\n    \n}\n```\n```java\n//实例化\npublic static void main(String[] args) {\n    D d = new D();\n}\n```\n\n### 2. 常规内部类\n要实例化内部类对象，必须先有外部类对象，通过外部类对象.new 内部类();来实例化内部类对象，在其他文件或者其他包内都是这样，只是要能在其他包实例化的话，内部类Inner还得加上修饰符public。\n```java\npublic class Outter {\n    class Inner { }\n\n    public static void main(String[] args) {\n        Outter out = new Outter();\n        Outter.Inner in = out.new Inner();\n    }\n}\n\n//第二种情况：通过提供方法来获取实例对象\npublic class A {\n    public class B{\n        public void test(){\n            System.out.println(111);\n        }\n    }\n\n    public B getInstance(){\n        return new B();\n    }\n    public static void main(String[] args) {\n        A a = new A();\n        B b = a.getInstance();\n        b.test();\n    }\n}\n```\n### 3. 静态内部类\n实例化静态内部类和实例化常规内部类有类似的地方，而不同之处在与静态内部类由于是静态的，所以不需要外部类对象就可以实例化，如上例Outter.Inner in = new Outter.Inner();\n在其他Java文件也是这么实例化的\n```java\nclass Outter {\n    \n    static class Inner {}\n}\n\npublic class TestDemo {\n    public static void main(String[] args) {\n        Outter.Inner in = new Outter.Inner();\n    }\n}\n```\n\n### 4. 局部内部类\n局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内，所以只能在方法或者该作用域内实例化,局部内部类不能有访问说明符,因为它不是外围类的一部分,但是可以访问当前代码块的常量,以及此外围类的所有成员\n```java\npublic class A {\n    class B {\n\n    }\n\n    public void pint() {\n        class C {\n        }\n        new C();\n    }\n\n    public void pint(boolean b) {\n        if (b) {\n            class D {\n            }\n            new D();\n        }\n    }\n}\n```\n\n### 5. 匿名内部类\n匿名内部类可以继承一个类或实现一个接口，这里的ClassOrInterfaceName是匿名内部类所继承的类名或实现的接口名。但匿名内部类不能同时实现一个接口和继承一个类，也不能实现多个接口。如果实现了一个接口，该类是Object类的直接子类，匿名类继承一个类或实现一个接口，不需要extends和implements关键字\n```java\nArrayList<String> list = new ArrayList<String>() {{\n        add(\"A\");\n        add(\"B\");\n        add(\"C\");\n}};\n\nnew Thread(\n        new Runnable() {\n            public void run() { ... }\n        }\n).start();\n```\n\n\n","source":"_posts/2021/07/java-inner-class-01.md","raw":"---\ntitle: Java内部类初始化\ntags: 内部类\ncategories: java\ncomments: true\ntranslate_title: java-internal-class-initialization\nabbrlink: 50009\ndate: 2021-06-01 00:00:00\n---\n### 1. 在同个java文件中，但不是内部类\n```java\npublic class C {\n}\n//在同一个Java文件中只能存在一个public类，除内部类外\n//只允许使用“public”、“abstract”和“final”。\nclass D{\n    \n}\n```\n```java\n//实例化\npublic static void main(String[] args) {\n    D d = new D();\n}\n```\n\n### 2. 常规内部类\n要实例化内部类对象，必须先有外部类对象，通过外部类对象.new 内部类();来实例化内部类对象，在其他文件或者其他包内都是这样，只是要能在其他包实例化的话，内部类Inner还得加上修饰符public。\n```java\npublic class Outter {\n    class Inner { }\n\n    public static void main(String[] args) {\n        Outter out = new Outter();\n        Outter.Inner in = out.new Inner();\n    }\n}\n\n//第二种情况：通过提供方法来获取实例对象\npublic class A {\n    public class B{\n        public void test(){\n            System.out.println(111);\n        }\n    }\n\n    public B getInstance(){\n        return new B();\n    }\n    public static void main(String[] args) {\n        A a = new A();\n        B b = a.getInstance();\n        b.test();\n    }\n}\n```\n### 3. 静态内部类\n实例化静态内部类和实例化常规内部类有类似的地方，而不同之处在与静态内部类由于是静态的，所以不需要外部类对象就可以实例化，如上例Outter.Inner in = new Outter.Inner();\n在其他Java文件也是这么实例化的\n```java\nclass Outter {\n    \n    static class Inner {}\n}\n\npublic class TestDemo {\n    public static void main(String[] args) {\n        Outter.Inner in = new Outter.Inner();\n    }\n}\n```\n\n### 4. 局部内部类\n局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内，所以只能在方法或者该作用域内实例化,局部内部类不能有访问说明符,因为它不是外围类的一部分,但是可以访问当前代码块的常量,以及此外围类的所有成员\n```java\npublic class A {\n    class B {\n\n    }\n\n    public void pint() {\n        class C {\n        }\n        new C();\n    }\n\n    public void pint(boolean b) {\n        if (b) {\n            class D {\n            }\n            new D();\n        }\n    }\n}\n```\n\n### 5. 匿名内部类\n匿名内部类可以继承一个类或实现一个接口，这里的ClassOrInterfaceName是匿名内部类所继承的类名或实现的接口名。但匿名内部类不能同时实现一个接口和继承一个类，也不能实现多个接口。如果实现了一个接口，该类是Object类的直接子类，匿名类继承一个类或实现一个接口，不需要extends和implements关键字\n```java\nArrayList<String> list = new ArrayList<String>() {{\n        add(\"A\");\n        add(\"B\");\n        add(\"C\");\n}};\n\nnew Thread(\n        new Runnable() {\n            public void run() { ... }\n        }\n).start();\n```\n\n\n","slug":"java-inner-class-01","published":1,"updated":"2022-03-27T14:06:03.357Z","layout":"post","photos":[],"link":"","_id":"cl235zcw9001pwjpjgvrg9pzp","content":"<h3 id=\"1-在同个java文件中但不是内部类\"><a class=\"markdownIt-Anchor\" href=\"#1-在同个java文件中但不是内部类\"></a> 1. 在同个java文件中，但不是内部类</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在同一个Java文件中只能存在一个public类，除内部类外</span></span><br><span class=\"line\"><span class=\"comment\">//只允许使用“public”、“abstract”和“final”。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    D d = <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-常规内部类\"><a class=\"markdownIt-Anchor\" href=\"#2-常规内部类\"></a> 2. 常规内部类</h3>\n<p>要实例化内部类对象，必须先有外部类对象，通过外部类对象.new 内部类();来实例化内部类对象，在其他文件或者其他包内都是这样，只是要能在其他包实例化的话，内部类Inner还得加上修饰符public。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Outter out = <span class=\"keyword\">new</span> Outter();</span><br><span class=\"line\">        Outter.Inner in = out.<span class=\"function\">new <span class=\"title\">Inner</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二种情况：通过提供方法来获取实例对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"number\">111</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> B <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        A a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">        B b = a.getInstance();</span><br><span class=\"line\">        b.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-静态内部类\"><a class=\"markdownIt-Anchor\" href=\"#3-静态内部类\"></a> 3. 静态内部类</h3>\n<p>实例化静态内部类和实例化常规内部类有类似的地方，而不同之处在与静态内部类由于是静态的，所以不需要外部类对象就可以实例化，如上例Outter.Inner in = new Outter.Inner();<br>\n在其他Java文件也是这么实例化的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outter</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Outter.Inner in = <span class=\"keyword\">new</span> Outter.Inner();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-局部内部类\"><a class=\"markdownIt-Anchor\" href=\"#4-局部内部类\"></a> 4. 局部内部类</h3>\n<p>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内，所以只能在方法或者该作用域内实例化,局部内部类不能有访问说明符,因为它不是外围类的一部分,但是可以访问当前代码块的常量,以及此外围类的所有成员</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pint</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pint</span><span class=\"params\">(<span class=\"keyword\">boolean</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b) &#123;</span><br><span class=\"line\">            <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-匿名内部类\"><a class=\"markdownIt-Anchor\" href=\"#5-匿名内部类\"></a> 5. 匿名内部类</h3>\n<p>匿名内部类可以继承一个类或实现一个接口，这里的ClassOrInterfaceName是匿名内部类所继承的类名或实现的接口名。但匿名内部类不能同时实现一个接口和继承一个类，也不能实现多个接口。如果实现了一个接口，该类是Object类的直接子类，匿名类继承一个类或实现一个接口，不需要extends和implements关键字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;() &#123;&#123;</span><br><span class=\"line\">        add(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">        add(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">        add(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123; ... &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">).start();</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"1-在同个java文件中但不是内部类\"><a class=\"markdownIt-Anchor\" href=\"#1-在同个java文件中但不是内部类\"></a> 1. 在同个java文件中，但不是内部类</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在同一个Java文件中只能存在一个public类，除内部类外</span></span><br><span class=\"line\"><span class=\"comment\">//只允许使用“public”、“abstract”和“final”。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    D d = <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-常规内部类\"><a class=\"markdownIt-Anchor\" href=\"#2-常规内部类\"></a> 2. 常规内部类</h3>\n<p>要实例化内部类对象，必须先有外部类对象，通过外部类对象.new 内部类();来实例化内部类对象，在其他文件或者其他包内都是这样，只是要能在其他包实例化的话，内部类Inner还得加上修饰符public。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Outter out = <span class=\"keyword\">new</span> Outter();</span><br><span class=\"line\">        Outter.Inner in = out.<span class=\"function\">new <span class=\"title\">Inner</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二种情况：通过提供方法来获取实例对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"number\">111</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> B <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        A a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">        B b = a.getInstance();</span><br><span class=\"line\">        b.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-静态内部类\"><a class=\"markdownIt-Anchor\" href=\"#3-静态内部类\"></a> 3. 静态内部类</h3>\n<p>实例化静态内部类和实例化常规内部类有类似的地方，而不同之处在与静态内部类由于是静态的，所以不需要外部类对象就可以实例化，如上例Outter.Inner in = new Outter.Inner();<br>\n在其他Java文件也是这么实例化的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outter</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Outter.Inner in = <span class=\"keyword\">new</span> Outter.Inner();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-局部内部类\"><a class=\"markdownIt-Anchor\" href=\"#4-局部内部类\"></a> 4. 局部内部类</h3>\n<p>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内，所以只能在方法或者该作用域内实例化,局部内部类不能有访问说明符,因为它不是外围类的一部分,但是可以访问当前代码块的常量,以及此外围类的所有成员</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pint</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pint</span><span class=\"params\">(<span class=\"keyword\">boolean</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b) &#123;</span><br><span class=\"line\">            <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-匿名内部类\"><a class=\"markdownIt-Anchor\" href=\"#5-匿名内部类\"></a> 5. 匿名内部类</h3>\n<p>匿名内部类可以继承一个类或实现一个接口，这里的ClassOrInterfaceName是匿名内部类所继承的类名或实现的接口名。但匿名内部类不能同时实现一个接口和继承一个类，也不能实现多个接口。如果实现了一个接口，该类是Object类的直接子类，匿名类继承一个类或实现一个接口，不需要extends和implements关键字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;() &#123;&#123;</span><br><span class=\"line\">        add(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">        add(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">        add(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123; ... &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">).start();</span><br></pre></td></tr></table></figure>\n"},{"title":"Java 8学习","comments":1,"abbrlink":7605,"date":"2020-04-23T06:04:02.000Z","translate_title":"java8-learning","_content":"\n## 1. Optional\nOptional 类主要解决的问题是臭名昭著的空指针异常（NullPointerException)。\n本质上，这是一个包含有可选值的包装类，这意味着 Optional 类既可以含有对象也可以为空\n### 1.1. optional构造方式\n\n- Optional.of(T)\n\n    该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。\n\n- Optional.ofNullable(T)\n\n    该方式的入参可以为null，当入参不确定为非null时使用。\n\n- Optional.empty()\n\n    这种方式是返回一个空Optional，等效Optional.ofNullable(null)\n\n### 1.2. 如何正确的使用Optional\n\n- 尽量避免使用的地方\n\n    1. 避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null != obj没有区别，这样用就没什么意义了。\n\n    2. 避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。\n\n    3. 避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。\n\n    4. 避免使用Optional作为方法的参数，原因同3。\n\n- 正确使用方式\n\n    1. 实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse/orElseGet方式：\n\n        ```java\n        //存在则返回\n        User king = new User(1, \"king\");\n        Optional<User> userOpt = Optional.of(king);\n        User user =  userOpt.orElse(null);\n        System.out.println(user.getName());\n        \n        //不存在提供默认值\n        User user2 = null;\n        Optional<User> userOpt2 = Optional.ofNullable(user2);\n        User user3 = userOpt2.orElse(unknown);\n        System.out.println(user3.getName());\n        \n        //通过方法提供值\n        User user4 = userOpt2.orElseGet(() -> new User(0, \"DEFAULT\")); \n        System.out.println(user4.getName())\n            \n         //不建议下面这种使用\n        if(userOpt.isPresent()) {\n            System.out.println(userOpt.get().getName());\n        } else {\n            //。。。\n        }\n        ```\n\n    2. 使用ifPresent()来进行对象操作，存在则操作，否则不操作。\n\n        ```java\n        //实例存在则操作，否则不操作\n        userOpt.ifPresent(u -> System.out.println(u.getName()));\n        userOpt2.ifPresent(u -> System.out.println(u.getName()));\n        ```\n\n    3. 使用map/flatMap来获取关联数据\n\n        ```java\n        //使用map方法获取关联数据\n        System.out.println(userOpt.map(u -> u.getName()).orElse(\"Unknown\"));\n        System.out.println(userOpt2.map(u -> u.getName()).orElse(\"Default\"));\n        //使用flatMap方法获取关联数据\n        List<String> interests = new ArrayList<String>();\n        interests.add(\"a\");interests.add(\"b\");interests.add(\"c\");\n        user.setInterests(interests);\n        List<String> interests2 = Optional.of(user)\n            .flatMap(u -> Optional.ofNullable(u.getInterests()))\n            .orElse(Collections.emptyList());\n        System.out.println(interests2.isEmpty());\n        ```\n\n        \n\n### 1.3.Optional判断第三方接口\n\n使用java8的optional可以减少很多的NPE，再也不用当心别人的接口返回值问题了，也不用满屏的if（a != null）这种判断，下面是使用过程中遇到的问题以及如何使用Optional解决。\n\n#### 1.3.1. 接口返回参数问题\n\n1. 在微服务中使用feign调用其他接口，总担心别人返回的参数是否符合标准\n2. 参数符合标准后，然后再进行数据判断，先判断是否code为200，然后判断数据存不存在，这样冗余的代码就很多\n\n这是我们期望的返回格式\n\n```json\n{\n\t\"code\": \"200\",\n\t\"msg\": \"调用成功!\",\n\t\"data\": []\n}\n```\n\n```java\n//模拟接口调用方法\nMap<String,Object> map = serviceImpl.queryList();\n//即使map为空也能正常返回，配合map直接映射数据值\nreturn Optional.ofNullable(map).map(r-> r.get(\"data\")).orElseGet(ArrayList:: new)\n    \n //JSONObject 判断是否返回成功，如果成功返回200， 不成功返回400   \nJSONObject jsonObject = service.updateDate();\nOptional.ofNullable(jsonObject).map(r->r.getInteger(\"code\")).orElse(400)\n```\n\n#### 1.3.2. 避免判断风暴\n\n对象层层嵌套，为了逻辑严谨必须要进行空判断\n\n```java\n//对于一个对象里面嵌套对象，那么需要层层去判断非空\nSchool school = null;\nif(school != null){\n    Clazz clazz = school.getClazz();\n    if(clazz != null){\n        Student student = clazz.getStudent();\n        if(student != null){\n            String name = student.getName();\n            if(name == null || \"\".equals(name)){\n                name = \"学生的姓名为空\";\n            }\n        }\n    }\n}\n//使用Optional后\n String name = Optional.ofNullable(school)\n                .map(School::getClazz)\n                .map(Clazz::getStudent)\n                .map(Student::getName)\n                .orElse(\"学生的姓名为空\");\n```\n\n## 2. Stream\n\n```java\n//找出某一个字段等于某个值的那一条数据\nJaponicaRiceCheck1 streamCheck = listItemRice.stream()\n.filter(o -> o.getSYS_PARENTID().equals(check.getSYS_ID())).findAny().orElse(null);\n```\n\n","source":"_posts/2021/07/java8特性.md","raw":"---\ntitle: Java 8学习\ntags: java\ncategories: 知识整理\ncomments: true\nabbrlink: 7605\ndate: 2020-04-23 14:04:02\ntranslate_title: java8-learning\n---\n\n## 1. Optional\nOptional 类主要解决的问题是臭名昭著的空指针异常（NullPointerException)。\n本质上，这是一个包含有可选值的包装类，这意味着 Optional 类既可以含有对象也可以为空\n### 1.1. optional构造方式\n\n- Optional.of(T)\n\n    该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。\n\n- Optional.ofNullable(T)\n\n    该方式的入参可以为null，当入参不确定为非null时使用。\n\n- Optional.empty()\n\n    这种方式是返回一个空Optional，等效Optional.ofNullable(null)\n\n### 1.2. 如何正确的使用Optional\n\n- 尽量避免使用的地方\n\n    1. 避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null != obj没有区别，这样用就没什么意义了。\n\n    2. 避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。\n\n    3. 避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。\n\n    4. 避免使用Optional作为方法的参数，原因同3。\n\n- 正确使用方式\n\n    1. 实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse/orElseGet方式：\n\n        ```java\n        //存在则返回\n        User king = new User(1, \"king\");\n        Optional<User> userOpt = Optional.of(king);\n        User user =  userOpt.orElse(null);\n        System.out.println(user.getName());\n        \n        //不存在提供默认值\n        User user2 = null;\n        Optional<User> userOpt2 = Optional.ofNullable(user2);\n        User user3 = userOpt2.orElse(unknown);\n        System.out.println(user3.getName());\n        \n        //通过方法提供值\n        User user4 = userOpt2.orElseGet(() -> new User(0, \"DEFAULT\")); \n        System.out.println(user4.getName())\n            \n         //不建议下面这种使用\n        if(userOpt.isPresent()) {\n            System.out.println(userOpt.get().getName());\n        } else {\n            //。。。\n        }\n        ```\n\n    2. 使用ifPresent()来进行对象操作，存在则操作，否则不操作。\n\n        ```java\n        //实例存在则操作，否则不操作\n        userOpt.ifPresent(u -> System.out.println(u.getName()));\n        userOpt2.ifPresent(u -> System.out.println(u.getName()));\n        ```\n\n    3. 使用map/flatMap来获取关联数据\n\n        ```java\n        //使用map方法获取关联数据\n        System.out.println(userOpt.map(u -> u.getName()).orElse(\"Unknown\"));\n        System.out.println(userOpt2.map(u -> u.getName()).orElse(\"Default\"));\n        //使用flatMap方法获取关联数据\n        List<String> interests = new ArrayList<String>();\n        interests.add(\"a\");interests.add(\"b\");interests.add(\"c\");\n        user.setInterests(interests);\n        List<String> interests2 = Optional.of(user)\n            .flatMap(u -> Optional.ofNullable(u.getInterests()))\n            .orElse(Collections.emptyList());\n        System.out.println(interests2.isEmpty());\n        ```\n\n        \n\n### 1.3.Optional判断第三方接口\n\n使用java8的optional可以减少很多的NPE，再也不用当心别人的接口返回值问题了，也不用满屏的if（a != null）这种判断，下面是使用过程中遇到的问题以及如何使用Optional解决。\n\n#### 1.3.1. 接口返回参数问题\n\n1. 在微服务中使用feign调用其他接口，总担心别人返回的参数是否符合标准\n2. 参数符合标准后，然后再进行数据判断，先判断是否code为200，然后判断数据存不存在，这样冗余的代码就很多\n\n这是我们期望的返回格式\n\n```json\n{\n\t\"code\": \"200\",\n\t\"msg\": \"调用成功!\",\n\t\"data\": []\n}\n```\n\n```java\n//模拟接口调用方法\nMap<String,Object> map = serviceImpl.queryList();\n//即使map为空也能正常返回，配合map直接映射数据值\nreturn Optional.ofNullable(map).map(r-> r.get(\"data\")).orElseGet(ArrayList:: new)\n    \n //JSONObject 判断是否返回成功，如果成功返回200， 不成功返回400   \nJSONObject jsonObject = service.updateDate();\nOptional.ofNullable(jsonObject).map(r->r.getInteger(\"code\")).orElse(400)\n```\n\n#### 1.3.2. 避免判断风暴\n\n对象层层嵌套，为了逻辑严谨必须要进行空判断\n\n```java\n//对于一个对象里面嵌套对象，那么需要层层去判断非空\nSchool school = null;\nif(school != null){\n    Clazz clazz = school.getClazz();\n    if(clazz != null){\n        Student student = clazz.getStudent();\n        if(student != null){\n            String name = student.getName();\n            if(name == null || \"\".equals(name)){\n                name = \"学生的姓名为空\";\n            }\n        }\n    }\n}\n//使用Optional后\n String name = Optional.ofNullable(school)\n                .map(School::getClazz)\n                .map(Clazz::getStudent)\n                .map(Student::getName)\n                .orElse(\"学生的姓名为空\");\n```\n\n## 2. Stream\n\n```java\n//找出某一个字段等于某个值的那一条数据\nJaponicaRiceCheck1 streamCheck = listItemRice.stream()\n.filter(o -> o.getSYS_PARENTID().equals(check.getSYS_ID())).findAny().orElse(null);\n```\n\n","slug":"java8特性","published":1,"updated":"2022-03-27T14:06:03.457Z","layout":"post","photos":[],"link":"","_id":"cl235zcwa001uwjpj02yj91si","content":"<h2 id=\"1-optional\"><a class=\"markdownIt-Anchor\" href=\"#1-optional\"></a> 1. Optional</h2>\n<p>Optional 类主要解决的问题是臭名昭著的空指针异常（NullPointerException)。<br>\n本质上，这是一个包含有可选值的包装类，这意味着 Optional 类既可以含有对象也可以为空</p>\n<h3 id=\"11-optional构造方式\"><a class=\"markdownIt-Anchor\" href=\"#11-optional构造方式\"></a> 1.1. optional构造方式</h3>\n<ul>\n<li>\n<p>Optional.of(T)</p>\n<p>该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。</p>\n</li>\n<li>\n<p>Optional.ofNullable(T)</p>\n<p>该方式的入参可以为null，当入参不确定为非null时使用。</p>\n</li>\n<li>\n<p>Optional.empty()</p>\n<p>这种方式是返回一个空Optional，等效Optional.ofNullable(null)</p>\n</li>\n</ul>\n<h3 id=\"12-如何正确的使用optional\"><a class=\"markdownIt-Anchor\" href=\"#12-如何正确的使用optional\"></a> 1.2. 如何正确的使用Optional</h3>\n<ul>\n<li>\n<p>尽量避免使用的地方</p>\n<ol>\n<li>\n<p>避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null != obj没有区别，这样用就没什么意义了。</p>\n</li>\n<li>\n<p>避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。</p>\n</li>\n<li>\n<p>避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。</p>\n</li>\n<li>\n<p>避免使用Optional作为方法的参数，原因同3。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>正确使用方式</p>\n<ol>\n<li>\n<p>实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse/orElseGet方式：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//存在则返回</span></span><br><span class=\"line\">User king = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">&quot;king&quot;</span>);</span><br><span class=\"line\">Optional&lt;User&gt; userOpt = Optional.of(king);</span><br><span class=\"line\">User user =  userOpt.orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">System.out.println(user.getName());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不存在提供默认值</span></span><br><span class=\"line\">User user2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">Optional&lt;User&gt; userOpt2 = Optional.ofNullable(user2);</span><br><span class=\"line\">User user3 = userOpt2.orElse(unknown);</span><br><span class=\"line\">System.out.println(user3.getName());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过方法提供值</span></span><br><span class=\"line\">User user4 = userOpt2.orElseGet(() -&gt; <span class=\"keyword\">new</span> User(<span class=\"number\">0</span>, <span class=\"string\">&quot;DEFAULT&quot;</span>)); </span><br><span class=\"line\">System.out.println(user4.getName())</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\">//不建议下面这种使用</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(userOpt.isPresent()) &#123;</span><br><span class=\"line\">    System.out.println(userOpt.get().getName());</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//。。。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用ifPresent()来进行对象操作，存在则操作，否则不操作。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例存在则操作，否则不操作</span></span><br><span class=\"line\">userOpt.ifPresent(u -&gt; System.out.println(u.getName()));</span><br><span class=\"line\">userOpt2.ifPresent(u -&gt; System.out.println(u.getName()));</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用map/flatMap来获取关联数据</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用map方法获取关联数据</span></span><br><span class=\"line\">System.out.println(userOpt.map(u -&gt; u.getName()).orElse(<span class=\"string\">&quot;Unknown&quot;</span>));</span><br><span class=\"line\">System.out.println(userOpt2.map(u -&gt; u.getName()).orElse(<span class=\"string\">&quot;Default&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">//使用flatMap方法获取关联数据</span></span><br><span class=\"line\">List&lt;String&gt; interests = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">interests.add(<span class=\"string\">&quot;a&quot;</span>);interests.add(<span class=\"string\">&quot;b&quot;</span>);interests.add(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">user.setInterests(interests);</span><br><span class=\"line\">List&lt;String&gt; interests2 = Optional.of(user)</span><br><span class=\"line\">    .flatMap(u -&gt; Optional.ofNullable(u.getInterests()))</span><br><span class=\"line\">    .orElse(Collections.emptyList());</span><br><span class=\"line\">System.out.println(interests2.isEmpty());</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"13optional判断第三方接口\"><a class=\"markdownIt-Anchor\" href=\"#13optional判断第三方接口\"></a> 1.3.Optional判断第三方接口</h3>\n<p>使用java8的optional可以减少很多的NPE，再也不用当心别人的接口返回值问题了，也不用满屏的if（a != null）这种判断，下面是使用过程中遇到的问题以及如何使用Optional解决。</p>\n<h4 id=\"131-接口返回参数问题\"><a class=\"markdownIt-Anchor\" href=\"#131-接口返回参数问题\"></a> 1.3.1. 接口返回参数问题</h4>\n<ol>\n<li>在微服务中使用feign调用其他接口，总担心别人返回的参数是否符合标准</li>\n<li>参数符合标准后，然后再进行数据判断，先判断是否code为200，然后判断数据存不存在，这样冗余的代码就很多</li>\n</ol>\n<p>这是我们期望的返回格式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;code&quot;</span>: <span class=\"string\">&quot;200&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;msg&quot;</span>: <span class=\"string\">&quot;调用成功!&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;data&quot;</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟接口调用方法</span></span><br><span class=\"line\">Map&lt;String,Object&gt; map = serviceImpl.queryList();</span><br><span class=\"line\"><span class=\"comment\">//即使map为空也能正常返回，配合map直接映射数据值</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> Optional.ofNullable(map).map(r-&gt; r.get(<span class=\"string\">&quot;data&quot;</span>)).orElseGet(ArrayList:: <span class=\"keyword\">new</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\">//JSONObject 判断是否返回成功，如果成功返回200， 不成功返回400   </span></span><br><span class=\"line\">JSONObject jsonObject = service.updateDate();</span><br><span class=\"line\">Optional.ofNullable(jsonObject).map(r-&gt;r.getInteger(<span class=\"string\">&quot;code&quot;</span>)).orElse(<span class=\"number\">400</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"132-避免判断风暴\"><a class=\"markdownIt-Anchor\" href=\"#132-避免判断风暴\"></a> 1.3.2. 避免判断风暴</h4>\n<p>对象层层嵌套，为了逻辑严谨必须要进行空判断</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对于一个对象里面嵌套对象，那么需要层层去判断非空</span></span><br><span class=\"line\">School school = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(school != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    Clazz clazz = school.getClazz();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(clazz != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Student student = clazz.getStudent();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(student != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            String name = student.getName();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(name == <span class=\"keyword\">null</span> || <span class=\"string\">&quot;&quot;</span>.equals(name))&#123;</span><br><span class=\"line\">                name = <span class=\"string\">&quot;学生的姓名为空&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用Optional后</span></span><br><span class=\"line\"> String name = Optional.ofNullable(school)</span><br><span class=\"line\">                .map(School::getClazz)</span><br><span class=\"line\">                .map(Clazz::getStudent)</span><br><span class=\"line\">                .map(Student::getName)</span><br><span class=\"line\">                .orElse(<span class=\"string\">&quot;学生的姓名为空&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-stream\"><a class=\"markdownIt-Anchor\" href=\"#2-stream\"></a> 2. Stream</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//找出某一个字段等于某个值的那一条数据</span></span><br><span class=\"line\">JaponicaRiceCheck1 streamCheck = listItemRice.stream()</span><br><span class=\"line\">.filter(o -&gt; o.getSYS_PARENTID().equals(check.getSYS_ID())).findAny().orElse(<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1-optional\"><a class=\"markdownIt-Anchor\" href=\"#1-optional\"></a> 1. Optional</h2>\n<p>Optional 类主要解决的问题是臭名昭著的空指针异常（NullPointerException)。<br>\n本质上，这是一个包含有可选值的包装类，这意味着 Optional 类既可以含有对象也可以为空</p>\n<h3 id=\"11-optional构造方式\"><a class=\"markdownIt-Anchor\" href=\"#11-optional构造方式\"></a> 1.1. optional构造方式</h3>\n<ul>\n<li>\n<p>Optional.of(T)</p>\n<p>该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。</p>\n</li>\n<li>\n<p>Optional.ofNullable(T)</p>\n<p>该方式的入参可以为null，当入参不确定为非null时使用。</p>\n</li>\n<li>\n<p>Optional.empty()</p>\n<p>这种方式是返回一个空Optional，等效Optional.ofNullable(null)</p>\n</li>\n</ul>\n<h3 id=\"12-如何正确的使用optional\"><a class=\"markdownIt-Anchor\" href=\"#12-如何正确的使用optional\"></a> 1.2. 如何正确的使用Optional</h3>\n<ul>\n<li>\n<p>尽量避免使用的地方</p>\n<ol>\n<li>\n<p>避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null != obj没有区别，这样用就没什么意义了。</p>\n</li>\n<li>\n<p>避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。</p>\n</li>\n<li>\n<p>避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。</p>\n</li>\n<li>\n<p>避免使用Optional作为方法的参数，原因同3。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>正确使用方式</p>\n<ol>\n<li>\n<p>实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse/orElseGet方式：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//存在则返回</span></span><br><span class=\"line\">User king = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">&quot;king&quot;</span>);</span><br><span class=\"line\">Optional&lt;User&gt; userOpt = Optional.of(king);</span><br><span class=\"line\">User user =  userOpt.orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">System.out.println(user.getName());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不存在提供默认值</span></span><br><span class=\"line\">User user2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">Optional&lt;User&gt; userOpt2 = Optional.ofNullable(user2);</span><br><span class=\"line\">User user3 = userOpt2.orElse(unknown);</span><br><span class=\"line\">System.out.println(user3.getName());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过方法提供值</span></span><br><span class=\"line\">User user4 = userOpt2.orElseGet(() -&gt; <span class=\"keyword\">new</span> User(<span class=\"number\">0</span>, <span class=\"string\">&quot;DEFAULT&quot;</span>)); </span><br><span class=\"line\">System.out.println(user4.getName())</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\">//不建议下面这种使用</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(userOpt.isPresent()) &#123;</span><br><span class=\"line\">    System.out.println(userOpt.get().getName());</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//。。。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用ifPresent()来进行对象操作，存在则操作，否则不操作。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例存在则操作，否则不操作</span></span><br><span class=\"line\">userOpt.ifPresent(u -&gt; System.out.println(u.getName()));</span><br><span class=\"line\">userOpt2.ifPresent(u -&gt; System.out.println(u.getName()));</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用map/flatMap来获取关联数据</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用map方法获取关联数据</span></span><br><span class=\"line\">System.out.println(userOpt.map(u -&gt; u.getName()).orElse(<span class=\"string\">&quot;Unknown&quot;</span>));</span><br><span class=\"line\">System.out.println(userOpt2.map(u -&gt; u.getName()).orElse(<span class=\"string\">&quot;Default&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">//使用flatMap方法获取关联数据</span></span><br><span class=\"line\">List&lt;String&gt; interests = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">interests.add(<span class=\"string\">&quot;a&quot;</span>);interests.add(<span class=\"string\">&quot;b&quot;</span>);interests.add(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">user.setInterests(interests);</span><br><span class=\"line\">List&lt;String&gt; interests2 = Optional.of(user)</span><br><span class=\"line\">    .flatMap(u -&gt; Optional.ofNullable(u.getInterests()))</span><br><span class=\"line\">    .orElse(Collections.emptyList());</span><br><span class=\"line\">System.out.println(interests2.isEmpty());</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"13optional判断第三方接口\"><a class=\"markdownIt-Anchor\" href=\"#13optional判断第三方接口\"></a> 1.3.Optional判断第三方接口</h3>\n<p>使用java8的optional可以减少很多的NPE，再也不用当心别人的接口返回值问题了，也不用满屏的if（a != null）这种判断，下面是使用过程中遇到的问题以及如何使用Optional解决。</p>\n<h4 id=\"131-接口返回参数问题\"><a class=\"markdownIt-Anchor\" href=\"#131-接口返回参数问题\"></a> 1.3.1. 接口返回参数问题</h4>\n<ol>\n<li>在微服务中使用feign调用其他接口，总担心别人返回的参数是否符合标准</li>\n<li>参数符合标准后，然后再进行数据判断，先判断是否code为200，然后判断数据存不存在，这样冗余的代码就很多</li>\n</ol>\n<p>这是我们期望的返回格式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;code&quot;</span>: <span class=\"string\">&quot;200&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;msg&quot;</span>: <span class=\"string\">&quot;调用成功!&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;data&quot;</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟接口调用方法</span></span><br><span class=\"line\">Map&lt;String,Object&gt; map = serviceImpl.queryList();</span><br><span class=\"line\"><span class=\"comment\">//即使map为空也能正常返回，配合map直接映射数据值</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> Optional.ofNullable(map).map(r-&gt; r.get(<span class=\"string\">&quot;data&quot;</span>)).orElseGet(ArrayList:: <span class=\"keyword\">new</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\">//JSONObject 判断是否返回成功，如果成功返回200， 不成功返回400   </span></span><br><span class=\"line\">JSONObject jsonObject = service.updateDate();</span><br><span class=\"line\">Optional.ofNullable(jsonObject).map(r-&gt;r.getInteger(<span class=\"string\">&quot;code&quot;</span>)).orElse(<span class=\"number\">400</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"132-避免判断风暴\"><a class=\"markdownIt-Anchor\" href=\"#132-避免判断风暴\"></a> 1.3.2. 避免判断风暴</h4>\n<p>对象层层嵌套，为了逻辑严谨必须要进行空判断</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对于一个对象里面嵌套对象，那么需要层层去判断非空</span></span><br><span class=\"line\">School school = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(school != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    Clazz clazz = school.getClazz();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(clazz != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Student student = clazz.getStudent();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(student != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            String name = student.getName();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(name == <span class=\"keyword\">null</span> || <span class=\"string\">&quot;&quot;</span>.equals(name))&#123;</span><br><span class=\"line\">                name = <span class=\"string\">&quot;学生的姓名为空&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用Optional后</span></span><br><span class=\"line\"> String name = Optional.ofNullable(school)</span><br><span class=\"line\">                .map(School::getClazz)</span><br><span class=\"line\">                .map(Clazz::getStudent)</span><br><span class=\"line\">                .map(Student::getName)</span><br><span class=\"line\">                .orElse(<span class=\"string\">&quot;学生的姓名为空&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-stream\"><a class=\"markdownIt-Anchor\" href=\"#2-stream\"></a> 2. Stream</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//找出某一个字段等于某个值的那一条数据</span></span><br><span class=\"line\">JaponicaRiceCheck1 streamCheck = listItemRice.stream()</span><br><span class=\"line\">.filter(o -&gt; o.getSYS_PARENTID().equals(check.getSYS_ID())).findAny().orElse(<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n"},{"title":"锁优化","comments":1,"translate_title":"lock-optimization","abbrlink":1446,"date":"2021-07-23T06:04:02.000Z","_content":"## 1. 优化思路以及方法\n\n- 减少锁持有时间\n- 减小锁粒度\n- 锁分离\n- 锁粗化\n- 锁消除\n\n### 1.1 减少锁持有时间\n\n```java\npublic synchronized void syncMethod(){\n    othercode1();\n    mutextMethod();\n    othercode2();\n}\n```\n\n像上述代码，在进入方法前就要得到锁，其他线程就要在外面等待。\n\n分析：锁里面的资源在同一时间只允许一个线程执行，我们不仅要减少其他线程等待的时间，也要尽力减少线程在锁里面的执行时间，所以，尽量只有在有线程安全要求的程序代码上加锁。\n\n```java\npublic void syncMethod(){\n    othercode1();\n    synchronized(this){\n        metextMethod();\n    }\n    othercode2();\n}\n```\n\n### 1.2 减小锁粒度\n\n将大对象（这个对象可能会被很多线程访问）拆成小对象，大大增加并行度。\n\n降低锁竞争，那么偏向锁、轻量级锁成功率才会提高。\n\n最最典型的减小锁粒度的案例就是ConcurrentHashMap。在HashMap的基础上进行优化，使用了cas与synchronized来确保安全性，在保证安全性的基础上为了充分利用线程资源，更是巧妙的设计了多线程同扩容的模式。\n\n\n\n### 1.3 锁分离\n\n最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁。这样读读不互斥，读写互斥，写写互斥。既保证了线程安全，又提高了性能。\n\n分析：读写分离这种思想可以延伸到我们其他的设计中，只要操作上互不影响，那锁就可以进行分离，比如：LinkedBlockingQueue\n\n<img src=\"..\\images/read_writer_Lock1.png\" alt=\"read_writer_Lock1\" style=\"zoom: 67%;\" />\n\n从头部获取数据，从尾部放入数据，使用两把锁。\n\n\n\n### 1.4 锁粗化\n\n通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁，只有这样，等待在这个锁上的其他线程才能尽早的获取资源执行任务；但是凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化。\n\n```java\npublic void demoMethod(){\n    synchronized{\n    \t//dow sth.\n\t}\n    //....做其他不需要同步的工作，但能很快执行完毕\n    synchronized{\n        //do sth.\n    }\n}\n```\n\n这种情况，根据锁粗化的思想，应该合并：\n\n```java\npublic void demoMethod(){\n    //整合成一次锁请求,前提时中间哪些不需要同步的工作很快就执行完成\n    synchronized(lock){\n        //do sth.\n        //....做其他不需要同步的工作，但能很快执行完毕\n    }\n}\n```\n\n再举一个极端的例子：\n\n```java\nfor(int i =0; i < circle; i++){\n    synchronized(lock){\n        //.....\n    }\n}\n```\n\n在一个循环内不同得获得锁。虽然JDK内部会对这个代码做些优化，但是还不如直接写成：\n\n```java\nsynchronized(lock){\n    for(int i =0; i < circle; i++){\n    }\n}\n```\n\n当然如果有需求说，这样的循环太久，需要给其他线程不要等待太久，那只能写成上面那种。如果没有这样类似的需求，还是直接写成后者那种比较好。\n**分析**: 锁粗化是JVM默认启动的一种机制，锁粗化针对的是对连续的区域进行分段加锁这种场景，JVM会自发进行优化。但作为开发者而言在满足业务的情况下，应该减少锁的使用。\n\n### 1.5 锁消除\n\n锁消除是在编译器级别的事情。在即时编译器(JIT)时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。也许你会觉得奇怪，既然有些对象不可能被多线程访问，那为什么要加锁呢？写代码时直接不加锁不就好了。\n但是有时，这些锁并不是程序员所写的，有的是JDK实现中就有锁的，比如Vector和StringBuffer这样的类，它们中的很多方法都是有锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。\n\n```java\npublic static void main(String args[]) throws InterrruptedException{\n    long start = System.currentTimeTimeMillis();\n    for(int i = 0;i < 20000; i++){\n        createStringBuffer(\"JVM\",\"asdfasdfasdf\");\n    }\n    long bufferCost = System.currentTimeTimeMillis() - start;\n    System.out.println(\"createStringBuffer:\"+bufferCost+\"ms\");\n}\npublic static String createStringBuffer(String s1, String s2){\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb.toString();\n}\n```\n\n上述代码中的StringBuffer.append是一个同步操作，但是StringBuffer却是一个局部变量，并且方法也并没有把StringBuffer返回，所以不可能会有多线程去访问它。那么此时StringBuffer中的同步操作就是没有意义的。\n开启锁消除是在JVM参数上设置的，当然需要在server模式下：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks\n```\n\n并且要开启逃逸分析。 逃逸分析的作用呢，就是看看变量是否有可能逃出作用域的范围。\n比如上述的StringBuffer，上述代码中craeteStringBuffer的返回是一个String，所以这个局部变量StringBuffer在其他地方都不会被使用。如果将craeteStringBuffer改成\n\n```java\npublic static StringBuffer createStringBuffer(String s1, String s2){\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb;\n}\n```\n\n那么这个 StringBuffer被返回后，是有可能被任何其他地方所使用的（譬如被主函数将返回结果put进map啊等等）。那么JVM的逃逸分析可以分析出，这个局部变量 StringBuffer逃出了它的作用域。\n所以基于逃逸分析，JVM可以判断，如果这个局部变量StringBuffer并没有逃出它的作用域，那么可以确定这个StringBuffer并不会被多线程所访问，那么就可以把这些多余的锁给去掉来提高性能。\n当JVM参数为：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks\n```\n\n输出：\n\n```tex\ncreateStringBuffer: 302ms\n```\n\nJVM参数为：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:-EliminateLocks\n```\n\n输出：\n\n```tex\ncreateStringBuffer: 660ms\n```\n\n显然，锁消除的效果还是很明显的。","source":"_posts/2021/07/lock01.md","raw":"---\ntitle: 锁优化\ntags: lock\ncomments: true\ncategories: java\ntranslate_title: lock-optimization\nabbrlink: 1446\ndate: 2021-07-23 14:04:02\n---\n## 1. 优化思路以及方法\n\n- 减少锁持有时间\n- 减小锁粒度\n- 锁分离\n- 锁粗化\n- 锁消除\n\n### 1.1 减少锁持有时间\n\n```java\npublic synchronized void syncMethod(){\n    othercode1();\n    mutextMethod();\n    othercode2();\n}\n```\n\n像上述代码，在进入方法前就要得到锁，其他线程就要在外面等待。\n\n分析：锁里面的资源在同一时间只允许一个线程执行，我们不仅要减少其他线程等待的时间，也要尽力减少线程在锁里面的执行时间，所以，尽量只有在有线程安全要求的程序代码上加锁。\n\n```java\npublic void syncMethod(){\n    othercode1();\n    synchronized(this){\n        metextMethod();\n    }\n    othercode2();\n}\n```\n\n### 1.2 减小锁粒度\n\n将大对象（这个对象可能会被很多线程访问）拆成小对象，大大增加并行度。\n\n降低锁竞争，那么偏向锁、轻量级锁成功率才会提高。\n\n最最典型的减小锁粒度的案例就是ConcurrentHashMap。在HashMap的基础上进行优化，使用了cas与synchronized来确保安全性，在保证安全性的基础上为了充分利用线程资源，更是巧妙的设计了多线程同扩容的模式。\n\n\n\n### 1.3 锁分离\n\n最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁。这样读读不互斥，读写互斥，写写互斥。既保证了线程安全，又提高了性能。\n\n分析：读写分离这种思想可以延伸到我们其他的设计中，只要操作上互不影响，那锁就可以进行分离，比如：LinkedBlockingQueue\n\n<img src=\"..\\images/read_writer_Lock1.png\" alt=\"read_writer_Lock1\" style=\"zoom: 67%;\" />\n\n从头部获取数据，从尾部放入数据，使用两把锁。\n\n\n\n### 1.4 锁粗化\n\n通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁，只有这样，等待在这个锁上的其他线程才能尽早的获取资源执行任务；但是凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化。\n\n```java\npublic void demoMethod(){\n    synchronized{\n    \t//dow sth.\n\t}\n    //....做其他不需要同步的工作，但能很快执行完毕\n    synchronized{\n        //do sth.\n    }\n}\n```\n\n这种情况，根据锁粗化的思想，应该合并：\n\n```java\npublic void demoMethod(){\n    //整合成一次锁请求,前提时中间哪些不需要同步的工作很快就执行完成\n    synchronized(lock){\n        //do sth.\n        //....做其他不需要同步的工作，但能很快执行完毕\n    }\n}\n```\n\n再举一个极端的例子：\n\n```java\nfor(int i =0; i < circle; i++){\n    synchronized(lock){\n        //.....\n    }\n}\n```\n\n在一个循环内不同得获得锁。虽然JDK内部会对这个代码做些优化，但是还不如直接写成：\n\n```java\nsynchronized(lock){\n    for(int i =0; i < circle; i++){\n    }\n}\n```\n\n当然如果有需求说，这样的循环太久，需要给其他线程不要等待太久，那只能写成上面那种。如果没有这样类似的需求，还是直接写成后者那种比较好。\n**分析**: 锁粗化是JVM默认启动的一种机制，锁粗化针对的是对连续的区域进行分段加锁这种场景，JVM会自发进行优化。但作为开发者而言在满足业务的情况下，应该减少锁的使用。\n\n### 1.5 锁消除\n\n锁消除是在编译器级别的事情。在即时编译器(JIT)时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。也许你会觉得奇怪，既然有些对象不可能被多线程访问，那为什么要加锁呢？写代码时直接不加锁不就好了。\n但是有时，这些锁并不是程序员所写的，有的是JDK实现中就有锁的，比如Vector和StringBuffer这样的类，它们中的很多方法都是有锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。\n\n```java\npublic static void main(String args[]) throws InterrruptedException{\n    long start = System.currentTimeTimeMillis();\n    for(int i = 0;i < 20000; i++){\n        createStringBuffer(\"JVM\",\"asdfasdfasdf\");\n    }\n    long bufferCost = System.currentTimeTimeMillis() - start;\n    System.out.println(\"createStringBuffer:\"+bufferCost+\"ms\");\n}\npublic static String createStringBuffer(String s1, String s2){\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb.toString();\n}\n```\n\n上述代码中的StringBuffer.append是一个同步操作，但是StringBuffer却是一个局部变量，并且方法也并没有把StringBuffer返回，所以不可能会有多线程去访问它。那么此时StringBuffer中的同步操作就是没有意义的。\n开启锁消除是在JVM参数上设置的，当然需要在server模式下：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks\n```\n\n并且要开启逃逸分析。 逃逸分析的作用呢，就是看看变量是否有可能逃出作用域的范围。\n比如上述的StringBuffer，上述代码中craeteStringBuffer的返回是一个String，所以这个局部变量StringBuffer在其他地方都不会被使用。如果将craeteStringBuffer改成\n\n```java\npublic static StringBuffer createStringBuffer(String s1, String s2){\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb;\n}\n```\n\n那么这个 StringBuffer被返回后，是有可能被任何其他地方所使用的（譬如被主函数将返回结果put进map啊等等）。那么JVM的逃逸分析可以分析出，这个局部变量 StringBuffer逃出了它的作用域。\n所以基于逃逸分析，JVM可以判断，如果这个局部变量StringBuffer并没有逃出它的作用域，那么可以确定这个StringBuffer并不会被多线程所访问，那么就可以把这些多余的锁给去掉来提高性能。\n当JVM参数为：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks\n```\n\n输出：\n\n```tex\ncreateStringBuffer: 302ms\n```\n\nJVM参数为：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:-EliminateLocks\n```\n\n输出：\n\n```tex\ncreateStringBuffer: 660ms\n```\n\n显然，锁消除的效果还是很明显的。","slug":"lock01","published":1,"updated":"2022-03-27T14:06:03.480Z","layout":"post","photos":[],"link":"","_id":"cl235zcwb001xwjpj4grk4oka","content":"<h2 id=\"1-优化思路以及方法\"><a class=\"markdownIt-Anchor\" href=\"#1-优化思路以及方法\"></a> 1. 优化思路以及方法</h2>\n<ul>\n<li>减少锁持有时间</li>\n<li>减小锁粒度</li>\n<li>锁分离</li>\n<li>锁粗化</li>\n<li>锁消除</li>\n</ul>\n<h3 id=\"11-减少锁持有时间\"><a class=\"markdownIt-Anchor\" href=\"#11-减少锁持有时间\"></a> 1.1 减少锁持有时间</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">syncMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    othercode1();</span><br><span class=\"line\">    mutextMethod();</span><br><span class=\"line\">    othercode2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>像上述代码，在进入方法前就要得到锁，其他线程就要在外面等待。</p>\n<p>分析：锁里面的资源在同一时间只允许一个线程执行，我们不仅要减少其他线程等待的时间，也要尽力减少线程在锁里面的执行时间，所以，尽量只有在有线程安全要求的程序代码上加锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">syncMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    othercode1();</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">        metextMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    othercode2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-减小锁粒度\"><a class=\"markdownIt-Anchor\" href=\"#12-减小锁粒度\"></a> 1.2 减小锁粒度</h3>\n<p>将大对象（这个对象可能会被很多线程访问）拆成小对象，大大增加并行度。</p>\n<p>降低锁竞争，那么偏向锁、轻量级锁成功率才会提高。</p>\n<p>最最典型的减小锁粒度的案例就是ConcurrentHashMap。在HashMap的基础上进行优化，使用了cas与synchronized来确保安全性，在保证安全性的基础上为了充分利用线程资源，更是巧妙的设计了多线程同扩容的模式。</p>\n<h3 id=\"13-锁分离\"><a class=\"markdownIt-Anchor\" href=\"#13-锁分离\"></a> 1.3 锁分离</h3>\n<p>最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁。这样读读不互斥，读写互斥，写写互斥。既保证了线程安全，又提高了性能。</p>\n<p>分析：读写分离这种思想可以延伸到我们其他的设计中，只要操作上互不影响，那锁就可以进行分离，比如：LinkedBlockingQueue</p>\n<img src=\"..\\images/read_writer_Lock1.png\" alt=\"read_writer_Lock1\" style=\"zoom: 67%;\">\n<p>从头部获取数据，从尾部放入数据，使用两把锁。</p>\n<h3 id=\"14-锁粗化\"><a class=\"markdownIt-Anchor\" href=\"#14-锁粗化\"></a> 1.4 锁粗化</h3>\n<p>通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁，只有这样，等待在这个锁上的其他线程才能尽早的获取资源执行任务；但是凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//dow sth.</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种情况，根据锁粗化的思想，应该合并：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//整合成一次锁请求,前提时中间哪些不需要同步的工作很快就执行完成</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">        <span class=\"comment\">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再举一个极端的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; circle; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//.....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在一个循环内不同得获得锁。虽然JDK内部会对这个代码做些优化，但是还不如直接写成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; circle; i++)&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然如果有需求说，这样的循环太久，需要给其他线程不要等待太久，那只能写成上面那种。如果没有这样类似的需求，还是直接写成后者那种比较好。<br>\n<strong>分析</strong>: 锁粗化是JVM默认启动的一种机制，锁粗化针对的是对连续的区域进行分段加锁这种场景，JVM会自发进行优化。但作为开发者而言在满足业务的情况下，应该减少锁的使用。</p>\n<h3 id=\"15-锁消除\"><a class=\"markdownIt-Anchor\" href=\"#15-锁消除\"></a> 1.5 锁消除</h3>\n<p>锁消除是在编译器级别的事情。在即时编译器(JIT)时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。也许你会觉得奇怪，既然有些对象不可能被多线程访问，那为什么要加锁呢？写代码时直接不加锁不就好了。<br>\n但是有时，这些锁并不是程序员所写的，有的是JDK实现中就有锁的，比如Vector和StringBuffer这样的类，它们中的很多方法都是有锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> InterrruptedException</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> start = System.currentTimeTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">20000</span>; i++)&#123;</span><br><span class=\"line\">        createStringBuffer(<span class=\"string\">&quot;JVM&quot;</span>,<span class=\"string\">&quot;asdfasdfasdf&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> bufferCost = System.currentTimeTimeMillis() - start;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;createStringBuffer:&quot;</span>+bufferCost+<span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span></span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    sb.append(s1);</span><br><span class=\"line\">    sb.append(s2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码中的StringBuffer.append是一个同步操作，但是StringBuffer却是一个局部变量，并且方法也并没有把StringBuffer返回，所以不可能会有多线程去访问它。那么此时StringBuffer中的同步操作就是没有意义的。<br>\n开启锁消除是在JVM参数上设置的，当然需要在server模式下：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>\n<p>并且要开启逃逸分析。 逃逸分析的作用呢，就是看看变量是否有可能逃出作用域的范围。<br>\n比如上述的StringBuffer，上述代码中craeteStringBuffer的返回是一个String，所以这个局部变量StringBuffer在其他地方都不会被使用。如果将craeteStringBuffer改成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> StringBuffer <span class=\"title\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span></span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    sb.append(s1);</span><br><span class=\"line\">    sb.append(s2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么这个 StringBuffer被返回后，是有可能被任何其他地方所使用的（譬如被主函数将返回结果put进map啊等等）。那么JVM的逃逸分析可以分析出，这个局部变量 StringBuffer逃出了它的作用域。<br>\n所以基于逃逸分析，JVM可以判断，如果这个局部变量StringBuffer并没有逃出它的作用域，那么可以确定这个StringBuffer并不会被多线程所访问，那么就可以把这些多余的锁给去掉来提高性能。<br>\n当JVM参数为：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createStringBuffer: 302ms</span><br></pre></td></tr></table></figure>\n<p>JVM参数为：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:-EliminateLocks</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createStringBuffer: 660ms</span><br></pre></td></tr></table></figure>\n<p>显然，锁消除的效果还是很明显的。</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1-优化思路以及方法\"><a class=\"markdownIt-Anchor\" href=\"#1-优化思路以及方法\"></a> 1. 优化思路以及方法</h2>\n<ul>\n<li>减少锁持有时间</li>\n<li>减小锁粒度</li>\n<li>锁分离</li>\n<li>锁粗化</li>\n<li>锁消除</li>\n</ul>\n<h3 id=\"11-减少锁持有时间\"><a class=\"markdownIt-Anchor\" href=\"#11-减少锁持有时间\"></a> 1.1 减少锁持有时间</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">syncMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    othercode1();</span><br><span class=\"line\">    mutextMethod();</span><br><span class=\"line\">    othercode2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>像上述代码，在进入方法前就要得到锁，其他线程就要在外面等待。</p>\n<p>分析：锁里面的资源在同一时间只允许一个线程执行，我们不仅要减少其他线程等待的时间，也要尽力减少线程在锁里面的执行时间，所以，尽量只有在有线程安全要求的程序代码上加锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">syncMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    othercode1();</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">        metextMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    othercode2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-减小锁粒度\"><a class=\"markdownIt-Anchor\" href=\"#12-减小锁粒度\"></a> 1.2 减小锁粒度</h3>\n<p>将大对象（这个对象可能会被很多线程访问）拆成小对象，大大增加并行度。</p>\n<p>降低锁竞争，那么偏向锁、轻量级锁成功率才会提高。</p>\n<p>最最典型的减小锁粒度的案例就是ConcurrentHashMap。在HashMap的基础上进行优化，使用了cas与synchronized来确保安全性，在保证安全性的基础上为了充分利用线程资源，更是巧妙的设计了多线程同扩容的模式。</p>\n<h3 id=\"13-锁分离\"><a class=\"markdownIt-Anchor\" href=\"#13-锁分离\"></a> 1.3 锁分离</h3>\n<p>最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁。这样读读不互斥，读写互斥，写写互斥。既保证了线程安全，又提高了性能。</p>\n<p>分析：读写分离这种思想可以延伸到我们其他的设计中，只要操作上互不影响，那锁就可以进行分离，比如：LinkedBlockingQueue</p>\n<img src=\"..\\images/read_writer_Lock1.png\" alt=\"read_writer_Lock1\" style=\"zoom: 67%;\">\n<p>从头部获取数据，从尾部放入数据，使用两把锁。</p>\n<h3 id=\"14-锁粗化\"><a class=\"markdownIt-Anchor\" href=\"#14-锁粗化\"></a> 1.4 锁粗化</h3>\n<p>通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁，只有这样，等待在这个锁上的其他线程才能尽早的获取资源执行任务；但是凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//dow sth.</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种情况，根据锁粗化的思想，应该合并：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//整合成一次锁请求,前提时中间哪些不需要同步的工作很快就执行完成</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">        <span class=\"comment\">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再举一个极端的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; circle; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//.....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在一个循环内不同得获得锁。虽然JDK内部会对这个代码做些优化，但是还不如直接写成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; circle; i++)&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然如果有需求说，这样的循环太久，需要给其他线程不要等待太久，那只能写成上面那种。如果没有这样类似的需求，还是直接写成后者那种比较好。<br>\n<strong>分析</strong>: 锁粗化是JVM默认启动的一种机制，锁粗化针对的是对连续的区域进行分段加锁这种场景，JVM会自发进行优化。但作为开发者而言在满足业务的情况下，应该减少锁的使用。</p>\n<h3 id=\"15-锁消除\"><a class=\"markdownIt-Anchor\" href=\"#15-锁消除\"></a> 1.5 锁消除</h3>\n<p>锁消除是在编译器级别的事情。在即时编译器(JIT)时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。也许你会觉得奇怪，既然有些对象不可能被多线程访问，那为什么要加锁呢？写代码时直接不加锁不就好了。<br>\n但是有时，这些锁并不是程序员所写的，有的是JDK实现中就有锁的，比如Vector和StringBuffer这样的类，它们中的很多方法都是有锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> InterrruptedException</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> start = System.currentTimeTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">20000</span>; i++)&#123;</span><br><span class=\"line\">        createStringBuffer(<span class=\"string\">&quot;JVM&quot;</span>,<span class=\"string\">&quot;asdfasdfasdf&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> bufferCost = System.currentTimeTimeMillis() - start;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;createStringBuffer:&quot;</span>+bufferCost+<span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span></span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    sb.append(s1);</span><br><span class=\"line\">    sb.append(s2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码中的StringBuffer.append是一个同步操作，但是StringBuffer却是一个局部变量，并且方法也并没有把StringBuffer返回，所以不可能会有多线程去访问它。那么此时StringBuffer中的同步操作就是没有意义的。<br>\n开启锁消除是在JVM参数上设置的，当然需要在server模式下：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>\n<p>并且要开启逃逸分析。 逃逸分析的作用呢，就是看看变量是否有可能逃出作用域的范围。<br>\n比如上述的StringBuffer，上述代码中craeteStringBuffer的返回是一个String，所以这个局部变量StringBuffer在其他地方都不会被使用。如果将craeteStringBuffer改成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> StringBuffer <span class=\"title\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span></span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    sb.append(s1);</span><br><span class=\"line\">    sb.append(s2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么这个 StringBuffer被返回后，是有可能被任何其他地方所使用的（譬如被主函数将返回结果put进map啊等等）。那么JVM的逃逸分析可以分析出，这个局部变量 StringBuffer逃出了它的作用域。<br>\n所以基于逃逸分析，JVM可以判断，如果这个局部变量StringBuffer并没有逃出它的作用域，那么可以确定这个StringBuffer并不会被多线程所访问，那么就可以把这些多余的锁给去掉来提高性能。<br>\n当JVM参数为：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createStringBuffer: 302ms</span><br></pre></td></tr></table></figure>\n<p>JVM参数为：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:-EliminateLocks</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createStringBuffer: 660ms</span><br></pre></td></tr></table></figure>\n<p>显然，锁消除的效果还是很明显的。</p>\n"},{"title":"MVCC多版本并发控制","comments":1,"abbrlink":39578,"date":"2021-08-14T03:03:40.000Z","translate_title":"mvcc","_content":"### 1. MVCC\n全称Multi-Version Concurrency Control即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中是心啊事务内存。\nMVCC在mysql Innodb中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使读写冲突时，也能做到不加锁，非阻塞并发读\n\n### 2. 当前读和快照读\n- 当前读\n    \n    像select lock in share mode（共享锁），select for update， update, insert,delete(排他锁)这些操作都是一种当前读；**当前读就是读取记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁**。\n\n- 快照读\n\n    像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别（串行级别快照读会变成当前读）；快照读的实现是基于多版本并发控制（即MVCC）；可以任务MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；\n    既然是基于多版本，即快照读可能读到的并不一定是最新版本的数据，有可能是之前的历史版本\n  \n**MVCC就是为了实现读（快照读）-写冲突不加锁，当前读实际上是一种加锁的操作，是悲观锁的实现。**\n\n---\n\n### 3. 当前读、快照读和MVCC的关系\nMVCC多版本并发控制指的是\"维持一个数据的多个版本，使得读写操作没有冲突\"；\nMysql通过快照读的方式去实现MVCC理想模型的其中一个具体非阻塞读功能，相对而言，当前读就是悲观锁的具体功能实现\n\nMVCC模型在Mysql中具体实现有3个隐式字段：undo日志、Read View等去完成的\n\n### 4. MVCC的作用与好处\n\n数据库并发场景分为以下三种：\n- 读-读：没有问题，也不需要并发控制\n- 读-写：有线程安全问题，可能会造成事务隔离性问题，（脏读、幻读、不可重复读）\n- 写-写：有线程安全问题，可能会存在更新丢失问题\n\n**MVCC带来的好处：**\n\nMVCC是一种用来解决读-写冲突的无所并发控制（在MVCC提出之前采用的是采用**悲观锁**），也就是事务分配增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务前的数据库快照，主要解决以下问题：\n- 在并发读写数据库时，可以做到在读操作是不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能；\n- 解决脏读、幻读、不可重复读等事务隔离性问题，但不能解决更新丢失问题\n\n**MVCC组合方法**\n- MVCC + 悲观锁： MVCC解决读写冲突，悲观锁解决写写冲突\n- MVCC + 乐观锁： MVCC解决读写冲突，乐观锁解决写写冲突，这种方式可能最大程度的提高数据库并发性能，并解决读写冲突和写写冲突导致的问题\n\n### 5. MVCC的实现原理\n实现原理主要是依赖记录中的 3个隐式字段、undo日志 、ReadView 来实现的\n\n\n在Mysql的InnoDB引擎中就是指在已提交读(READ COMMITTD)和可重复读(REPEATABLE READ)这两种隔离级别下的事务对于SELECT操作会访问版本链中的记录的过程\n这就使得别的事务可以修改这条记录，反正每次修改都会在版本链中记录。SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，提升了系统的性能。\n\n#### 5.1 版本链\n```sql\nbegin;\n#触发分配TRX_ID\nselect * from t_role;\n#指定TRX_MYSQL_THREAD_ID=当前CONNECTION_ID,表示查询当前连接\nselect TRX_ID, ROLL_PTR, ROW_ID  from INFORMATION_SCHEMA.INNODB_TRX where TRX_MYSQL_THREAD_ID = CONNECTION_ID();\ncommit;\n```\n在InnoDB引擎表中，它的聚簇索引记录中有两个必要的隐藏列：\n- TRX_ID\n\n  6byte，这个id用来存储的每次对某条聚簇索引记录进行修改的时候的事务id\n\n- roll_pointer\n\n  每次对哪条聚簇索引记录有修改的时候，都会把老版本写入undo日志中。这个roll_pointer就是存了一个指针，它指向这条聚簇索引记录的上一个版本的位置，通过它来获得上一个版本的记录信息。(注意插入操作的undo日志没有这个属性，因为它没有老版本)\n\n- ROW_ID\n\n  6byte，隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引\n\n- 实际还有一个删除flag隐藏字段, 既记录被更新或删除并不代表真的删除，而是删除flag变了\n![](./mvcc/02.png)\n\n比如现在有个事务id是60的执行的这条记录的修改语句\n\n![](./mvcc/03.png)\n\n此时在undo日志中就存在版本链\n![](./mvcc/04.png)\n\n#### 5.2 ReadView\n已提交读和可重复读的区别就在于它们生成ReadView的策略不同\nReadView中主要就是有个列表来存储我们系统中当前活跃着的读写事务，也就是begin了还未提交的事务。通过这个列表来判断记录的某个版本是否对当前事务可见。假设当前列表里的事务id为[80,100]。\n\n- 如果你要访问的记录版本的事务id为50，比当前列表最小的id80小，那说明这个事务在之前就提交了，所以对当前活动的事务来说是可访问的。\n- 如果你要访问的记录版本的事务id为90,发现此事务在列表id最大值和最小值之间，那就再判断一下是否在列表内，如果在那就说明此事务还未提交，所以版本不能被访问。如果不在那说明事务已经提交，所以版本可以被访问。\n- 如果你要访问的记录版本的事务id为110，那比事务列表最大id100都大，那说明这个版本是在ReadView生成之后才发生的，所以不能被访问。\n这些记录都是去版本链里面找的，先找最近记录，如果最近这一条记录事务id不符合条件，不可见的话，再去找上一个版本再比较当前事务的id和这个版本事务id看能不能访问，以此类推直到返回可见的版本或者结束。\n\n","source":"_posts/2021/07/mvcc.md","raw":"---\ntitle: MVCC多版本并发控制\ntags: mysql\ncategories: mysql\ncomments: true\nabbrlink: 39578\ndate: 2021-08-14 11:03:40\ntranslate_title: mvcc\n---\n### 1. MVCC\n全称Multi-Version Concurrency Control即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中是心啊事务内存。\nMVCC在mysql Innodb中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使读写冲突时，也能做到不加锁，非阻塞并发读\n\n### 2. 当前读和快照读\n- 当前读\n    \n    像select lock in share mode（共享锁），select for update， update, insert,delete(排他锁)这些操作都是一种当前读；**当前读就是读取记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁**。\n\n- 快照读\n\n    像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别（串行级别快照读会变成当前读）；快照读的实现是基于多版本并发控制（即MVCC）；可以任务MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；\n    既然是基于多版本，即快照读可能读到的并不一定是最新版本的数据，有可能是之前的历史版本\n  \n**MVCC就是为了实现读（快照读）-写冲突不加锁，当前读实际上是一种加锁的操作，是悲观锁的实现。**\n\n---\n\n### 3. 当前读、快照读和MVCC的关系\nMVCC多版本并发控制指的是\"维持一个数据的多个版本，使得读写操作没有冲突\"；\nMysql通过快照读的方式去实现MVCC理想模型的其中一个具体非阻塞读功能，相对而言，当前读就是悲观锁的具体功能实现\n\nMVCC模型在Mysql中具体实现有3个隐式字段：undo日志、Read View等去完成的\n\n### 4. MVCC的作用与好处\n\n数据库并发场景分为以下三种：\n- 读-读：没有问题，也不需要并发控制\n- 读-写：有线程安全问题，可能会造成事务隔离性问题，（脏读、幻读、不可重复读）\n- 写-写：有线程安全问题，可能会存在更新丢失问题\n\n**MVCC带来的好处：**\n\nMVCC是一种用来解决读-写冲突的无所并发控制（在MVCC提出之前采用的是采用**悲观锁**），也就是事务分配增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务前的数据库快照，主要解决以下问题：\n- 在并发读写数据库时，可以做到在读操作是不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能；\n- 解决脏读、幻读、不可重复读等事务隔离性问题，但不能解决更新丢失问题\n\n**MVCC组合方法**\n- MVCC + 悲观锁： MVCC解决读写冲突，悲观锁解决写写冲突\n- MVCC + 乐观锁： MVCC解决读写冲突，乐观锁解决写写冲突，这种方式可能最大程度的提高数据库并发性能，并解决读写冲突和写写冲突导致的问题\n\n### 5. MVCC的实现原理\n实现原理主要是依赖记录中的 3个隐式字段、undo日志 、ReadView 来实现的\n\n\n在Mysql的InnoDB引擎中就是指在已提交读(READ COMMITTD)和可重复读(REPEATABLE READ)这两种隔离级别下的事务对于SELECT操作会访问版本链中的记录的过程\n这就使得别的事务可以修改这条记录，反正每次修改都会在版本链中记录。SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，提升了系统的性能。\n\n#### 5.1 版本链\n```sql\nbegin;\n#触发分配TRX_ID\nselect * from t_role;\n#指定TRX_MYSQL_THREAD_ID=当前CONNECTION_ID,表示查询当前连接\nselect TRX_ID, ROLL_PTR, ROW_ID  from INFORMATION_SCHEMA.INNODB_TRX where TRX_MYSQL_THREAD_ID = CONNECTION_ID();\ncommit;\n```\n在InnoDB引擎表中，它的聚簇索引记录中有两个必要的隐藏列：\n- TRX_ID\n\n  6byte，这个id用来存储的每次对某条聚簇索引记录进行修改的时候的事务id\n\n- roll_pointer\n\n  每次对哪条聚簇索引记录有修改的时候，都会把老版本写入undo日志中。这个roll_pointer就是存了一个指针，它指向这条聚簇索引记录的上一个版本的位置，通过它来获得上一个版本的记录信息。(注意插入操作的undo日志没有这个属性，因为它没有老版本)\n\n- ROW_ID\n\n  6byte，隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引\n\n- 实际还有一个删除flag隐藏字段, 既记录被更新或删除并不代表真的删除，而是删除flag变了\n![](./mvcc/02.png)\n\n比如现在有个事务id是60的执行的这条记录的修改语句\n\n![](./mvcc/03.png)\n\n此时在undo日志中就存在版本链\n![](./mvcc/04.png)\n\n#### 5.2 ReadView\n已提交读和可重复读的区别就在于它们生成ReadView的策略不同\nReadView中主要就是有个列表来存储我们系统中当前活跃着的读写事务，也就是begin了还未提交的事务。通过这个列表来判断记录的某个版本是否对当前事务可见。假设当前列表里的事务id为[80,100]。\n\n- 如果你要访问的记录版本的事务id为50，比当前列表最小的id80小，那说明这个事务在之前就提交了，所以对当前活动的事务来说是可访问的。\n- 如果你要访问的记录版本的事务id为90,发现此事务在列表id最大值和最小值之间，那就再判断一下是否在列表内，如果在那就说明此事务还未提交，所以版本不能被访问。如果不在那说明事务已经提交，所以版本可以被访问。\n- 如果你要访问的记录版本的事务id为110，那比事务列表最大id100都大，那说明这个版本是在ReadView生成之后才发生的，所以不能被访问。\n这些记录都是去版本链里面找的，先找最近记录，如果最近这一条记录事务id不符合条件，不可见的话，再去找上一个版本再比较当前事务的id和这个版本事务id看能不能访问，以此类推直到返回可见的版本或者结束。\n\n","slug":"mvcc","published":1,"updated":"2022-04-06T09:51:44.961Z","layout":"post","photos":[],"link":"","_id":"cl235zcwc0022wjpjchbc5sl1","content":"<h3 id=\"1-mvcc\"><a class=\"markdownIt-Anchor\" href=\"#1-mvcc\"></a> 1. MVCC</h3>\n<p>全称Multi-Version Concurrency Control即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中是心啊事务内存。<br>\nMVCC在mysql Innodb中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使读写冲突时，也能做到不加锁，非阻塞并发读</p>\n<h3 id=\"2-当前读和快照读\"><a class=\"markdownIt-Anchor\" href=\"#2-当前读和快照读\"></a> 2. 当前读和快照读</h3>\n<ul>\n<li>\n<p>当前读</p>\n<p>像select lock in share mode（共享锁），select for update， update, insert,delete(排他锁)这些操作都是一种当前读；<strong>当前读就是读取记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁</strong>。</p>\n</li>\n<li>\n<p>快照读</p>\n<p>像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别（串行级别快照读会变成当前读）；快照读的实现是基于多版本并发控制（即MVCC）；可以任务MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；<br>\n既然是基于多版本，即快照读可能读到的并不一定是最新版本的数据，有可能是之前的历史版本</p>\n</li>\n</ul>\n<p><strong>MVCC就是为了实现读（快照读）-写冲突不加锁，当前读实际上是一种加锁的操作，是悲观锁的实现。</strong></p>\n<hr>\n<h3 id=\"3-当前读-快照读和mvcc的关系\"><a class=\"markdownIt-Anchor\" href=\"#3-当前读-快照读和mvcc的关系\"></a> 3. 当前读、快照读和MVCC的关系</h3>\n<p>MVCC多版本并发控制指的是&quot;维持一个数据的多个版本，使得读写操作没有冲突&quot;；<br>\nMysql通过快照读的方式去实现MVCC理想模型的其中一个具体非阻塞读功能，相对而言，当前读就是悲观锁的具体功能实现</p>\n<p>MVCC模型在Mysql中具体实现有3个隐式字段：undo日志、Read View等去完成的</p>\n<h3 id=\"4-mvcc的作用与好处\"><a class=\"markdownIt-Anchor\" href=\"#4-mvcc的作用与好处\"></a> 4. MVCC的作用与好处</h3>\n<p>数据库并发场景分为以下三种：</p>\n<ul>\n<li>读-读：没有问题，也不需要并发控制</li>\n<li>读-写：有线程安全问题，可能会造成事务隔离性问题，（脏读、幻读、不可重复读）</li>\n<li>写-写：有线程安全问题，可能会存在更新丢失问题</li>\n</ul>\n<p><strong>MVCC带来的好处：</strong></p>\n<p>MVCC是一种用来解决读-写冲突的无所并发控制（在MVCC提出之前采用的是采用<strong>悲观锁</strong>），也就是事务分配增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务前的数据库快照，主要解决以下问题：</p>\n<ul>\n<li>在并发读写数据库时，可以做到在读操作是不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能；</li>\n<li>解决脏读、幻读、不可重复读等事务隔离性问题，但不能解决更新丢失问题</li>\n</ul>\n<p><strong>MVCC组合方法</strong></p>\n<ul>\n<li>MVCC + 悲观锁： MVCC解决读写冲突，悲观锁解决写写冲突</li>\n<li>MVCC + 乐观锁： MVCC解决读写冲突，乐观锁解决写写冲突，这种方式可能最大程度的提高数据库并发性能，并解决读写冲突和写写冲突导致的问题</li>\n</ul>\n<h3 id=\"5-mvcc的实现原理\"><a class=\"markdownIt-Anchor\" href=\"#5-mvcc的实现原理\"></a> 5. MVCC的实现原理</h3>\n<p>实现原理主要是依赖记录中的 3个隐式字段、undo日志 、ReadView 来实现的</p>\n<p>在Mysql的InnoDB引擎中就是指在已提交读(READ COMMITTD)和可重复读(REPEATABLE READ)这两种隔离级别下的事务对于SELECT操作会访问版本链中的记录的过程<br>\n这就使得别的事务可以修改这条记录，反正每次修改都会在版本链中记录。SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，提升了系统的性能。</p>\n<h4 id=\"51-版本链\"><a class=\"markdownIt-Anchor\" href=\"#51-版本链\"></a> 5.1 版本链</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span>;</span><br><span class=\"line\">#触发分配TRX_ID</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t_role;</span><br><span class=\"line\">#指定TRX_MYSQL_THREAD_ID<span class=\"operator\">=</span>当前CONNECTION_ID,表示查询当前连接</span><br><span class=\"line\"><span class=\"keyword\">select</span> TRX_ID, ROLL_PTR, ROW_ID  <span class=\"keyword\">from</span> INFORMATION_SCHEMA.INNODB_TRX <span class=\"keyword\">where</span> TRX_MYSQL_THREAD_ID <span class=\"operator\">=</span> CONNECTION_ID();</span><br><span class=\"line\"><span class=\"keyword\">commit</span>;</span><br></pre></td></tr></table></figure>\n<p>在InnoDB引擎表中，它的聚簇索引记录中有两个必要的隐藏列：</p>\n<ul>\n<li>\n<p>TRX_ID</p>\n<p>6byte，这个id用来存储的每次对某条聚簇索引记录进行修改的时候的事务id</p>\n</li>\n<li>\n<p>roll_pointer</p>\n<p>每次对哪条聚簇索引记录有修改的时候，都会把老版本写入undo日志中。这个roll_pointer就是存了一个指针，它指向这条聚簇索引记录的上一个版本的位置，通过它来获得上一个版本的记录信息。(注意插入操作的undo日志没有这个属性，因为它没有老版本)</p>\n</li>\n<li>\n<p>ROW_ID</p>\n<p>6byte，隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引</p>\n</li>\n<li>\n<p>实际还有一个删除flag隐藏字段, 既记录被更新或删除并不代表真的删除，而是删除flag变了<br>\n<img src=\"/mvcc/02.png\" alt></p>\n</li>\n</ul>\n<p>比如现在有个事务id是60的执行的这条记录的修改语句</p>\n<p><img src=\"/mvcc/03.png\" alt></p>\n<p>此时在undo日志中就存在版本链<br>\n<img src=\"/mvcc/04.png\" alt></p>\n<h4 id=\"52-readview\"><a class=\"markdownIt-Anchor\" href=\"#52-readview\"></a> 5.2 ReadView</h4>\n<p>已提交读和可重复读的区别就在于它们生成ReadView的策略不同<br>\nReadView中主要就是有个列表来存储我们系统中当前活跃着的读写事务，也就是begin了还未提交的事务。通过这个列表来判断记录的某个版本是否对当前事务可见。假设当前列表里的事务id为[80,100]。</p>\n<ul>\n<li>如果你要访问的记录版本的事务id为50，比当前列表最小的id80小，那说明这个事务在之前就提交了，所以对当前活动的事务来说是可访问的。</li>\n<li>如果你要访问的记录版本的事务id为90,发现此事务在列表id最大值和最小值之间，那就再判断一下是否在列表内，如果在那就说明此事务还未提交，所以版本不能被访问。如果不在那说明事务已经提交，所以版本可以被访问。</li>\n<li>如果你要访问的记录版本的事务id为110，那比事务列表最大id100都大，那说明这个版本是在ReadView生成之后才发生的，所以不能被访问。<br>\n这些记录都是去版本链里面找的，先找最近记录，如果最近这一条记录事务id不符合条件，不可见的话，再去找上一个版本再比较当前事务的id和这个版本事务id看能不能访问，以此类推直到返回可见的版本或者结束。</li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"1-mvcc\"><a class=\"markdownIt-Anchor\" href=\"#1-mvcc\"></a> 1. MVCC</h3>\n<p>全称Multi-Version Concurrency Control即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中是心啊事务内存。<br>\nMVCC在mysql Innodb中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使读写冲突时，也能做到不加锁，非阻塞并发读</p>\n<h3 id=\"2-当前读和快照读\"><a class=\"markdownIt-Anchor\" href=\"#2-当前读和快照读\"></a> 2. 当前读和快照读</h3>\n<ul>\n<li>\n<p>当前读</p>\n<p>像select lock in share mode（共享锁），select for update， update, insert,delete(排他锁)这些操作都是一种当前读；<strong>当前读就是读取记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁</strong>。</p>\n</li>\n<li>\n<p>快照读</p>\n<p>像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别（串行级别快照读会变成当前读）；快照读的实现是基于多版本并发控制（即MVCC）；可以任务MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；<br>\n既然是基于多版本，即快照读可能读到的并不一定是最新版本的数据，有可能是之前的历史版本</p>\n</li>\n</ul>\n<p><strong>MVCC就是为了实现读（快照读）-写冲突不加锁，当前读实际上是一种加锁的操作，是悲观锁的实现。</strong></p>\n<hr>\n<h3 id=\"3-当前读-快照读和mvcc的关系\"><a class=\"markdownIt-Anchor\" href=\"#3-当前读-快照读和mvcc的关系\"></a> 3. 当前读、快照读和MVCC的关系</h3>\n<p>MVCC多版本并发控制指的是&quot;维持一个数据的多个版本，使得读写操作没有冲突&quot;；<br>\nMysql通过快照读的方式去实现MVCC理想模型的其中一个具体非阻塞读功能，相对而言，当前读就是悲观锁的具体功能实现</p>\n<p>MVCC模型在Mysql中具体实现有3个隐式字段：undo日志、Read View等去完成的</p>\n<h3 id=\"4-mvcc的作用与好处\"><a class=\"markdownIt-Anchor\" href=\"#4-mvcc的作用与好处\"></a> 4. MVCC的作用与好处</h3>\n<p>数据库并发场景分为以下三种：</p>\n<ul>\n<li>读-读：没有问题，也不需要并发控制</li>\n<li>读-写：有线程安全问题，可能会造成事务隔离性问题，（脏读、幻读、不可重复读）</li>\n<li>写-写：有线程安全问题，可能会存在更新丢失问题</li>\n</ul>\n<p><strong>MVCC带来的好处：</strong></p>\n<p>MVCC是一种用来解决读-写冲突的无所并发控制（在MVCC提出之前采用的是采用<strong>悲观锁</strong>），也就是事务分配增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务前的数据库快照，主要解决以下问题：</p>\n<ul>\n<li>在并发读写数据库时，可以做到在读操作是不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能；</li>\n<li>解决脏读、幻读、不可重复读等事务隔离性问题，但不能解决更新丢失问题</li>\n</ul>\n<p><strong>MVCC组合方法</strong></p>\n<ul>\n<li>MVCC + 悲观锁： MVCC解决读写冲突，悲观锁解决写写冲突</li>\n<li>MVCC + 乐观锁： MVCC解决读写冲突，乐观锁解决写写冲突，这种方式可能最大程度的提高数据库并发性能，并解决读写冲突和写写冲突导致的问题</li>\n</ul>\n<h3 id=\"5-mvcc的实现原理\"><a class=\"markdownIt-Anchor\" href=\"#5-mvcc的实现原理\"></a> 5. MVCC的实现原理</h3>\n<p>实现原理主要是依赖记录中的 3个隐式字段、undo日志 、ReadView 来实现的</p>\n<p>在Mysql的InnoDB引擎中就是指在已提交读(READ COMMITTD)和可重复读(REPEATABLE READ)这两种隔离级别下的事务对于SELECT操作会访问版本链中的记录的过程<br>\n这就使得别的事务可以修改这条记录，反正每次修改都会在版本链中记录。SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，提升了系统的性能。</p>\n<h4 id=\"51-版本链\"><a class=\"markdownIt-Anchor\" href=\"#51-版本链\"></a> 5.1 版本链</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span>;</span><br><span class=\"line\">#触发分配TRX_ID</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t_role;</span><br><span class=\"line\">#指定TRX_MYSQL_THREAD_ID<span class=\"operator\">=</span>当前CONNECTION_ID,表示查询当前连接</span><br><span class=\"line\"><span class=\"keyword\">select</span> TRX_ID, ROLL_PTR, ROW_ID  <span class=\"keyword\">from</span> INFORMATION_SCHEMA.INNODB_TRX <span class=\"keyword\">where</span> TRX_MYSQL_THREAD_ID <span class=\"operator\">=</span> CONNECTION_ID();</span><br><span class=\"line\"><span class=\"keyword\">commit</span>;</span><br></pre></td></tr></table></figure>\n<p>在InnoDB引擎表中，它的聚簇索引记录中有两个必要的隐藏列：</p>\n<ul>\n<li>\n<p>TRX_ID</p>\n<p>6byte，这个id用来存储的每次对某条聚簇索引记录进行修改的时候的事务id</p>\n</li>\n<li>\n<p>roll_pointer</p>\n<p>每次对哪条聚簇索引记录有修改的时候，都会把老版本写入undo日志中。这个roll_pointer就是存了一个指针，它指向这条聚簇索引记录的上一个版本的位置，通过它来获得上一个版本的记录信息。(注意插入操作的undo日志没有这个属性，因为它没有老版本)</p>\n</li>\n<li>\n<p>ROW_ID</p>\n<p>6byte，隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引</p>\n</li>\n<li>\n<p>实际还有一个删除flag隐藏字段, 既记录被更新或删除并不代表真的删除，而是删除flag变了<br>\n<img src=\"/mvcc/02.png\" alt></p>\n</li>\n</ul>\n<p>比如现在有个事务id是60的执行的这条记录的修改语句</p>\n<p><img src=\"/mvcc/03.png\" alt></p>\n<p>此时在undo日志中就存在版本链<br>\n<img src=\"/mvcc/04.png\" alt></p>\n<h4 id=\"52-readview\"><a class=\"markdownIt-Anchor\" href=\"#52-readview\"></a> 5.2 ReadView</h4>\n<p>已提交读和可重复读的区别就在于它们生成ReadView的策略不同<br>\nReadView中主要就是有个列表来存储我们系统中当前活跃着的读写事务，也就是begin了还未提交的事务。通过这个列表来判断记录的某个版本是否对当前事务可见。假设当前列表里的事务id为[80,100]。</p>\n<ul>\n<li>如果你要访问的记录版本的事务id为50，比当前列表最小的id80小，那说明这个事务在之前就提交了，所以对当前活动的事务来说是可访问的。</li>\n<li>如果你要访问的记录版本的事务id为90,发现此事务在列表id最大值和最小值之间，那就再判断一下是否在列表内，如果在那就说明此事务还未提交，所以版本不能被访问。如果不在那说明事务已经提交，所以版本可以被访问。</li>\n<li>如果你要访问的记录版本的事务id为110，那比事务列表最大id100都大，那说明这个版本是在ReadView生成之后才发生的，所以不能被访问。<br>\n这些记录都是去版本链里面找的，先找最近记录，如果最近这一条记录事务id不符合条件，不可见的话，再去找上一个版本再比较当前事务的id和这个版本事务id看能不能访问，以此类推直到返回可见的版本或者结束。</li>\n</ul>\n"},{"title":"mysql索引","comments":1,"abbrlink":22569,"date":"2021-08-20T07:12:00.000Z","translate_title":"mysql_02","_content":"拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。\n索引分单列索引和组合索引。\n- 单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。 \n- 组合索引，即一个索引包含多个列。\n\n创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。\n实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。\n上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：\n虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。\n建立索引会占用磁盘空间的索引文件。\n\n## 1.普通索引\n- 创建索引\n    ```sql\n    -- 如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。\n    CREATE INDEX indexName on table_name (column_name )\n    ```\n- 添加索引（修改表结构）\n    ```sql\n    -- 表结构已经存在了，然后使用alter修改表结构添加索引\n    alter table table_name  add INDEX indexName(column_name )\n    ```\n- 创建表指定\n    ```sql\n    CREATE TABLE mytable(  \n        ID INT NOT NULL,   \n        username VARCHAR(16) NOT NULL,  \n        INDEX [indexName] (username(length))  \n    ); \n    ```\n- 删除索引\n    ```sql\n    drop index [indexName] on  table_name \n    ```\n  \n## 2. 唯一索引\n他和普通索引类似，不同的是：索引列的值必须唯一，但允许有控制。如果是组合索引，则列值的组合必须唯一。\n- 创建索引\n    ```sql\n    CREATE UNIQUE INDEX indexName ON table_name (column_name (length ))\n    ```\n  \n- 修改表结构\n    ```sql\n    ALTER table mytable ADD UNIQUE [indexName] (column_name(length))\n    ```\n  \n- 创建表的时候指定\n    ```sql\n    CREATE TABLE mytable(  \n        ID INT NOT NULL,   \n        username VARCHAR(16) NOT NULL,  \n        UNIQUE [indexName] (username(length))  \n    );\n    ```\n## 3.组合索引\n- 修改表结构指定索引\n    ```sql\n    ALTER TABLE table_name ADD INDEX indexName (column_name1 , column_name2,...)\n    ```\n- 创建表的时候指定\n    ```sql\n    CREATE TABLE mytable(  \n        ID INT NOT NULL,   \n        username VARCHAR(16) NOT NULL,  \n        KEY [indexName] (column_name1 , column_name2,...)  \n    );\n    ```\n### 3.1 组合索引查询问题\n**问题描述：**在mysql中有张表test_a，有3个字段id,name,num；对这三个字段建立组合索引，那么查询时使用其中某两个或者一个作为查询条件，是否还会走索引\n![表结构](./mysql-index/01.png)\n根据查询字段的位置不同来决定，如查询**id**、**id,num**、**id,num,name**、 **id, name** 都可以走索引的，其他条件的查询不能走索引。\n\n**组合索引 有“最左前缀”原则。就是只从最左面的开始组合，并不是所有只要含有这三列存在的字段的查询都会用到该组合索引**\n```sql\n-- 添加组合索引\nALTER TABLE test_a ADD INDEX 'lianhe'(id, num, name)\n```\n1. 使用三个字段id, num, name查询\n```sql\n-- 只要三个条件都有，可以随意变换位置，结果都会走索引\n-- 优化器会将条件顺序优化成上面三种情况后执行\nEXPLAIN SELECT * FROM test_a WHERE id=1 AND num='001' AND name = '1#'\n```\n![使用三个字段id, num, name查询](./mysql-index/02.png)\n从执行结果上可以看到是从走索引进行查询的\n\n2. 使用num, name 查询\n```sql\nEXPLAIN SELECT * FROM test_a WHERE name = '1#'\n\nEXPLAIN SELECT * FROM test_a WHERE num='001' \n```\n![使用id, name 查询](./mysql-index/03.png)\n3. 使用id, name或者id, num 查询\n```sql\n-- 只要包括id，可以随意变换位置，结果都会走索引\n-- 优化器会将条件顺序优化成上面三种情况后执行\n--如果只有两个字段，只有id条件命中，num或者name 条件不走联合索引。\nEXPLAIN SELECT * FROM test_a WHERE id=1 AND name = '1#'\n```\n![使用id, name 查询](./mysql-index/02.png)\n\n\n需要避免索引失效的情况，如：LIKE %xxx，或者条件中使用函数等。\n4. 使用id查询\n```sql\nEXPLAIN SELECT * FROM test_a WHERE id=1\n```\n![使用id查询](./mysql-index/02.png)\n\n5. 使用name或者num查询\n```sql\nEXPLAIN SELECT * FROM test_a WHERE name = '1#'\n\nEXPLAIN SELECT * FROM test_a WHERE num = '001'\n```\n\n### 3.2 创建组合索引选择规则\n- 经常用的列优先（最左匹配原则）\n- 离散度高的列优先（离散度高原则）\n- 宽度小的列优先（最少空间原则）\n\n## 4.使用alter命令添加索引\n```sql\n-- 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。\nALTER TABLE tbl_name ADD PRIMARY KEY (column_list): \n    \n--  这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。\nALTER TABLE tbl_name ADD UNIQUE index_name (column_list):\n\n-- 添加普通索引，索引值可出现多次。\nALTER TABLE tbl_name ADD INDEX index_name (column_list):\n\n--该语句指定了索引为 FULLTEXT ，用于全文索引。\nALTER TABLE tbl_name ADD FULLTEXT index_name (column_list):\n```\n  \n\n\n\n","source":"_posts/2021/07/mysql-index.md","raw":"---\ntitle: mysql索引\ntags: mysql\ncategories: mysql\ncomments: true\nabbrlink: 22569\ndate: 2021-08-20 15:12:00\ntranslate_title: mysql_02\n---\n拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。\n索引分单列索引和组合索引。\n- 单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。 \n- 组合索引，即一个索引包含多个列。\n\n创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。\n实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。\n上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：\n虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。\n建立索引会占用磁盘空间的索引文件。\n\n## 1.普通索引\n- 创建索引\n    ```sql\n    -- 如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。\n    CREATE INDEX indexName on table_name (column_name )\n    ```\n- 添加索引（修改表结构）\n    ```sql\n    -- 表结构已经存在了，然后使用alter修改表结构添加索引\n    alter table table_name  add INDEX indexName(column_name )\n    ```\n- 创建表指定\n    ```sql\n    CREATE TABLE mytable(  \n        ID INT NOT NULL,   \n        username VARCHAR(16) NOT NULL,  \n        INDEX [indexName] (username(length))  \n    ); \n    ```\n- 删除索引\n    ```sql\n    drop index [indexName] on  table_name \n    ```\n  \n## 2. 唯一索引\n他和普通索引类似，不同的是：索引列的值必须唯一，但允许有控制。如果是组合索引，则列值的组合必须唯一。\n- 创建索引\n    ```sql\n    CREATE UNIQUE INDEX indexName ON table_name (column_name (length ))\n    ```\n  \n- 修改表结构\n    ```sql\n    ALTER table mytable ADD UNIQUE [indexName] (column_name(length))\n    ```\n  \n- 创建表的时候指定\n    ```sql\n    CREATE TABLE mytable(  \n        ID INT NOT NULL,   \n        username VARCHAR(16) NOT NULL,  \n        UNIQUE [indexName] (username(length))  \n    );\n    ```\n## 3.组合索引\n- 修改表结构指定索引\n    ```sql\n    ALTER TABLE table_name ADD INDEX indexName (column_name1 , column_name2,...)\n    ```\n- 创建表的时候指定\n    ```sql\n    CREATE TABLE mytable(  \n        ID INT NOT NULL,   \n        username VARCHAR(16) NOT NULL,  \n        KEY [indexName] (column_name1 , column_name2,...)  \n    );\n    ```\n### 3.1 组合索引查询问题\n**问题描述：**在mysql中有张表test_a，有3个字段id,name,num；对这三个字段建立组合索引，那么查询时使用其中某两个或者一个作为查询条件，是否还会走索引\n![表结构](./mysql-index/01.png)\n根据查询字段的位置不同来决定，如查询**id**、**id,num**、**id,num,name**、 **id, name** 都可以走索引的，其他条件的查询不能走索引。\n\n**组合索引 有“最左前缀”原则。就是只从最左面的开始组合，并不是所有只要含有这三列存在的字段的查询都会用到该组合索引**\n```sql\n-- 添加组合索引\nALTER TABLE test_a ADD INDEX 'lianhe'(id, num, name)\n```\n1. 使用三个字段id, num, name查询\n```sql\n-- 只要三个条件都有，可以随意变换位置，结果都会走索引\n-- 优化器会将条件顺序优化成上面三种情况后执行\nEXPLAIN SELECT * FROM test_a WHERE id=1 AND num='001' AND name = '1#'\n```\n![使用三个字段id, num, name查询](./mysql-index/02.png)\n从执行结果上可以看到是从走索引进行查询的\n\n2. 使用num, name 查询\n```sql\nEXPLAIN SELECT * FROM test_a WHERE name = '1#'\n\nEXPLAIN SELECT * FROM test_a WHERE num='001' \n```\n![使用id, name 查询](./mysql-index/03.png)\n3. 使用id, name或者id, num 查询\n```sql\n-- 只要包括id，可以随意变换位置，结果都会走索引\n-- 优化器会将条件顺序优化成上面三种情况后执行\n--如果只有两个字段，只有id条件命中，num或者name 条件不走联合索引。\nEXPLAIN SELECT * FROM test_a WHERE id=1 AND name = '1#'\n```\n![使用id, name 查询](./mysql-index/02.png)\n\n\n需要避免索引失效的情况，如：LIKE %xxx，或者条件中使用函数等。\n4. 使用id查询\n```sql\nEXPLAIN SELECT * FROM test_a WHERE id=1\n```\n![使用id查询](./mysql-index/02.png)\n\n5. 使用name或者num查询\n```sql\nEXPLAIN SELECT * FROM test_a WHERE name = '1#'\n\nEXPLAIN SELECT * FROM test_a WHERE num = '001'\n```\n\n### 3.2 创建组合索引选择规则\n- 经常用的列优先（最左匹配原则）\n- 离散度高的列优先（离散度高原则）\n- 宽度小的列优先（最少空间原则）\n\n## 4.使用alter命令添加索引\n```sql\n-- 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。\nALTER TABLE tbl_name ADD PRIMARY KEY (column_list): \n    \n--  这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。\nALTER TABLE tbl_name ADD UNIQUE index_name (column_list):\n\n-- 添加普通索引，索引值可出现多次。\nALTER TABLE tbl_name ADD INDEX index_name (column_list):\n\n--该语句指定了索引为 FULLTEXT ，用于全文索引。\nALTER TABLE tbl_name ADD FULLTEXT index_name (column_list):\n```\n  \n\n\n\n","slug":"mysql-index","published":1,"updated":"2022-04-06T09:51:44.939Z","layout":"post","photos":[],"link":"","_id":"cl235zcwc0025wjpjadr4hwng","content":"<p>拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。<br>\n索引分单列索引和组合索引。</p>\n<ul>\n<li>单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。</li>\n<li>组合索引，即一个索引包含多个列。</li>\n</ul>\n<p>创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。<br>\n实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。<br>\n上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：<br>\n虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。<br>\n建立索引会占用磁盘空间的索引文件。</p>\n<h2 id=\"1普通索引\"><a class=\"markdownIt-Anchor\" href=\"#1普通索引\"></a> 1.普通索引</h2>\n<ul>\n<li>创建索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX indexName <span class=\"keyword\">on</span> table_name (column_name )</span><br></pre></td></tr></table></figure>\n</li>\n<li>添加索引（修改表结构）  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 表结构已经存在了，然后使用alter修改表结构添加索引</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name  <span class=\"keyword\">add</span> INDEX indexName(column_name )</span><br></pre></td></tr></table></figure>\n</li>\n<li>创建表指定  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mytable(  </span><br><span class=\"line\">    ID <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,   </span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,  </span><br><span class=\"line\">    INDEX [indexName] (username(length))  </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n</li>\n<li>删除索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> index [indexName] <span class=\"keyword\">on</span>  table_name </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"2-唯一索引\"><a class=\"markdownIt-Anchor\" href=\"#2-唯一索引\"></a> 2. 唯一索引</h2>\n<p>他和普通索引类似，不同的是：索引列的值必须唯一，但允许有控制。如果是组合索引，则列值的组合必须唯一。</p>\n<ul>\n<li>\n<p>创建索引</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX indexName <span class=\"keyword\">ON</span> table_name (column_name (length ))</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改表结构</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">table</span> mytable <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> [indexName] (column_name(length))</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>创建表的时候指定</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mytable(  </span><br><span class=\"line\">    ID <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,   </span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,  </span><br><span class=\"line\">    <span class=\"keyword\">UNIQUE</span> [indexName] (username(length))  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3组合索引\"><a class=\"markdownIt-Anchor\" href=\"#3组合索引\"></a> 3.组合索引</h2>\n<ul>\n<li>修改表结构指定索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> INDEX indexName (column_name1 , column_name2,...)</span><br></pre></td></tr></table></figure>\n</li>\n<li>创建表的时候指定  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mytable(  </span><br><span class=\"line\">    ID <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,   </span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,  </span><br><span class=\"line\">    KEY [indexName] (column_name1 , column_name2,...)  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"31-组合索引查询问题\"><a class=\"markdownIt-Anchor\" href=\"#31-组合索引查询问题\"></a> 3.1 组合索引查询问题</h3>\n<p><strong>问题描述：<strong>在mysql中有张表test_a，有3个字段id,name,num；对这三个字段建立组合索引，那么查询时使用其中某两个或者一个作为查询条件，是否还会走索引<br>\n<img src=\"/mysql-index/01.png\" alt=\"表结构\"><br>\n根据查询字段的位置不同来决定，如查询</strong>id</strong>、<strong>id,num</strong>、<strong>id,num,name</strong>、 <strong>id, name</strong> 都可以走索引的，其他条件的查询不能走索引。</p>\n<p><strong>组合索引 有“最左前缀”原则。就是只从最左面的开始组合，并不是所有只要含有这三列存在的字段的查询都会用到该组合索引</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加组合索引</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> test_a <span class=\"keyword\">ADD</span> INDEX <span class=\"string\">&#x27;lianhe&#x27;</span>(id, num, name)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>使用三个字段id, num, name查询</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 只要三个条件都有，可以随意变换位置，结果都会走索引</span></span><br><span class=\"line\"><span class=\"comment\">-- 优化器会将条件顺序优化成上面三种情况后执行</span></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">AND</span> num<span class=\"operator\">=</span><span class=\"string\">&#x27;001&#x27;</span> <span class=\"keyword\">AND</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-index/02.png\" alt=\"使用三个字段id, num, name查询\"><br>\n从执行结果上可以看到是从走索引进行查询的</p>\n<ol start=\"2\">\n<li>使用num, name 查询</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> num<span class=\"operator\">=</span><span class=\"string\">&#x27;001&#x27;</span> </span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-index/03.png\" alt=\"使用id, name 查询\"><br>\n3. 使用id, name或者id, num 查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 只要包括id，可以随意变换位置，结果都会走索引</span></span><br><span class=\"line\"><span class=\"comment\">-- 优化器会将条件顺序优化成上面三种情况后执行</span></span><br><span class=\"line\"><span class=\"comment\">--如果只有两个字段，只有id条件命中，num或者name 条件不走联合索引。</span></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">AND</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-index/02.png\" alt=\"使用id, name 查询\"></p>\n<p>需要避免索引失效的情况，如：LIKE %xxx，或者条件中使用函数等。<br>\n4. 使用id查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-index/02.png\" alt=\"使用id查询\"></p>\n<ol start=\"5\">\n<li>使用name或者num查询</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> num <span class=\"operator\">=</span> <span class=\"string\">&#x27;001&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"32-创建组合索引选择规则\"><a class=\"markdownIt-Anchor\" href=\"#32-创建组合索引选择规则\"></a> 3.2 创建组合索引选择规则</h3>\n<ul>\n<li>经常用的列优先（最左匹配原则）</li>\n<li>离散度高的列优先（离散度高原则）</li>\n<li>宽度小的列优先（最少空间原则）</li>\n</ul>\n<h2 id=\"4使用alter命令添加索引\"><a class=\"markdownIt-Anchor\" href=\"#4使用alter命令添加索引\"></a> 4.使用alter命令添加索引</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">PRIMARY</span> KEY (column_list): </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">--  这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> index_name (column_list):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 添加普通索引，索引值可出现多次。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> INDEX index_name (column_list):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--该语句指定了索引为 FULLTEXT ，用于全文索引。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> FULLTEXT index_name (column_list):</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。<br>\n索引分单列索引和组合索引。</p>\n<ul>\n<li>单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。</li>\n<li>组合索引，即一个索引包含多个列。</li>\n</ul>\n<p>创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。<br>\n实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。<br>\n上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：<br>\n虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。<br>\n建立索引会占用磁盘空间的索引文件。</p>\n<h2 id=\"1普通索引\"><a class=\"markdownIt-Anchor\" href=\"#1普通索引\"></a> 1.普通索引</h2>\n<ul>\n<li>创建索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX indexName <span class=\"keyword\">on</span> table_name (column_name )</span><br></pre></td></tr></table></figure>\n</li>\n<li>添加索引（修改表结构）  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 表结构已经存在了，然后使用alter修改表结构添加索引</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name  <span class=\"keyword\">add</span> INDEX indexName(column_name )</span><br></pre></td></tr></table></figure>\n</li>\n<li>创建表指定  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mytable(  </span><br><span class=\"line\">    ID <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,   </span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,  </span><br><span class=\"line\">    INDEX [indexName] (username(length))  </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n</li>\n<li>删除索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> index [indexName] <span class=\"keyword\">on</span>  table_name </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"2-唯一索引\"><a class=\"markdownIt-Anchor\" href=\"#2-唯一索引\"></a> 2. 唯一索引</h2>\n<p>他和普通索引类似，不同的是：索引列的值必须唯一，但允许有控制。如果是组合索引，则列值的组合必须唯一。</p>\n<ul>\n<li>\n<p>创建索引</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX indexName <span class=\"keyword\">ON</span> table_name (column_name (length ))</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改表结构</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">table</span> mytable <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> [indexName] (column_name(length))</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>创建表的时候指定</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mytable(  </span><br><span class=\"line\">    ID <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,   </span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,  </span><br><span class=\"line\">    <span class=\"keyword\">UNIQUE</span> [indexName] (username(length))  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3组合索引\"><a class=\"markdownIt-Anchor\" href=\"#3组合索引\"></a> 3.组合索引</h2>\n<ul>\n<li>修改表结构指定索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> INDEX indexName (column_name1 , column_name2,...)</span><br></pre></td></tr></table></figure>\n</li>\n<li>创建表的时候指定  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mytable(  </span><br><span class=\"line\">    ID <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,   </span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,  </span><br><span class=\"line\">    KEY [indexName] (column_name1 , column_name2,...)  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"31-组合索引查询问题\"><a class=\"markdownIt-Anchor\" href=\"#31-组合索引查询问题\"></a> 3.1 组合索引查询问题</h3>\n<p><strong>问题描述：<strong>在mysql中有张表test_a，有3个字段id,name,num；对这三个字段建立组合索引，那么查询时使用其中某两个或者一个作为查询条件，是否还会走索引<br>\n<img src=\"/mysql-index/01.png\" alt=\"表结构\"><br>\n根据查询字段的位置不同来决定，如查询</strong>id</strong>、<strong>id,num</strong>、<strong>id,num,name</strong>、 <strong>id, name</strong> 都可以走索引的，其他条件的查询不能走索引。</p>\n<p><strong>组合索引 有“最左前缀”原则。就是只从最左面的开始组合，并不是所有只要含有这三列存在的字段的查询都会用到该组合索引</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加组合索引</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> test_a <span class=\"keyword\">ADD</span> INDEX <span class=\"string\">&#x27;lianhe&#x27;</span>(id, num, name)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>使用三个字段id, num, name查询</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 只要三个条件都有，可以随意变换位置，结果都会走索引</span></span><br><span class=\"line\"><span class=\"comment\">-- 优化器会将条件顺序优化成上面三种情况后执行</span></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">AND</span> num<span class=\"operator\">=</span><span class=\"string\">&#x27;001&#x27;</span> <span class=\"keyword\">AND</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-index/02.png\" alt=\"使用三个字段id, num, name查询\"><br>\n从执行结果上可以看到是从走索引进行查询的</p>\n<ol start=\"2\">\n<li>使用num, name 查询</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> num<span class=\"operator\">=</span><span class=\"string\">&#x27;001&#x27;</span> </span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-index/03.png\" alt=\"使用id, name 查询\"><br>\n3. 使用id, name或者id, num 查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 只要包括id，可以随意变换位置，结果都会走索引</span></span><br><span class=\"line\"><span class=\"comment\">-- 优化器会将条件顺序优化成上面三种情况后执行</span></span><br><span class=\"line\"><span class=\"comment\">--如果只有两个字段，只有id条件命中，num或者name 条件不走联合索引。</span></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">AND</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-index/02.png\" alt=\"使用id, name 查询\"></p>\n<p>需要避免索引失效的情况，如：LIKE %xxx，或者条件中使用函数等。<br>\n4. 使用id查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql-index/02.png\" alt=\"使用id查询\"></p>\n<ol start=\"5\">\n<li>使用name或者num查询</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> num <span class=\"operator\">=</span> <span class=\"string\">&#x27;001&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"32-创建组合索引选择规则\"><a class=\"markdownIt-Anchor\" href=\"#32-创建组合索引选择规则\"></a> 3.2 创建组合索引选择规则</h3>\n<ul>\n<li>经常用的列优先（最左匹配原则）</li>\n<li>离散度高的列优先（离散度高原则）</li>\n<li>宽度小的列优先（最少空间原则）</li>\n</ul>\n<h2 id=\"4使用alter命令添加索引\"><a class=\"markdownIt-Anchor\" href=\"#4使用alter命令添加索引\"></a> 4.使用alter命令添加索引</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">PRIMARY</span> KEY (column_list): </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">--  这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> index_name (column_list):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 添加普通索引，索引值可出现多次。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> INDEX index_name (column_list):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--该语句指定了索引为 FULLTEXT ，用于全文索引。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> FULLTEXT index_name (column_list):</span><br></pre></td></tr></table></figure>\n"},{"title":"mysql事务","comments":1,"abbrlink":33118,"date":"2021-07-23T08:00:57.000Z","translate_title":"mysql_03","_content":"## 事务的定义\n\n事务是数据管理系统DBMS执行过程中的一个**逻辑单位**，有一个有限的数据库**操作序列**构成\n\n## 事务四大特性\n\n1.  原子性atomicity：依赖undo log做到全部失败\n2.  隔离性isolation：实现方式LBCC 和 MVCC\n3.  持久性durability ：实现方式redo log和double write\n4.  一致性consistency：通过上面的三种方式实现\n\n数据恢复：\n\n-   redo log 崩溃恢复\n-   双写缓冲（double write）\n\n\n\nMysql中insert、delete、update 自带事务\n\n```sql\nshow veriables like ‘autocommit’;\nset session autocommit = on;\nupdate xxx where set xx =1 ;\ncommit;\n```\n\n结束事务两种方式：rollback     commit\n\n## 事务并发的三大问题\n\n数据并发的三大问题其实都是数据库读一致性问题，必须有数据库提供一定的事务隔离机制来解决。\n\n### 脏读\n![image-20200727224117281](./mysql-transcation/image-20201202210510525.png)\n\n### 不可重复读\n![image-20200727224117281](./mysql-transcation/image-20201202210235089.png)\n\n\n\n### 幻读\n![image-20200727224117281](./mysql-transcation/image-20201202210357906.png)\n\n\n## 事务隔离级别\n\nhttp://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt\n![image-20200727224117281](./mysql-transcation/image-20201202210817094.png)\n![image-20200727224117281](./mysql-transcation/image-20201202211406282.png)\n\n![image-20201202211752764](./mysql-transcation/image-20201202211752764.png)\n\n### MVCC思想\n\n![image-20201202212103393](./mysql-transcation/image-20201202212103393.png)\n\n#### Read View（一致性试图）\n\n存储内容\n\n![image-20201202213520136](./mysql-transcation/image-20201202213520136.png)\n\n\n\n#### Read View判断规则\n\n![image-20201202213757692](./mysql-transcation/image-20201202213757692.png)\n\n#### RC与RR read View 的区别\n\n![image-20201202214418001](./mysql-transcation/image-20201202214418001.png)\n\n所以RC解决不了脏读的问题\n\n# Mysql InnoDb所得基本类型\n\nInnoDB支持行锁\n\nMyiSAM支持行锁\n\n表锁和行锁的区别\n\n-   锁力度：表锁 > 行锁\n-   加锁效率：表锁 > 行锁\n-   冲突概率：表锁 > 行锁\n-   并发性能：表锁 < 行锁\n\n## 表锁\n\n![image-20201202214957559](./mysql-transcation/image-20201202214957559.png)\n\n一个事务能够给一张表加上锁的前提是：没有其他任何一个事务锁定了这张表的任意一行数据。如果没有意向锁的话，那么加表锁需要扫描表中的每行数据，大大的浪费时间；\n\n如果在添加行锁的时候，会在表上添加意向锁，那么在添加表锁的时候就不需要去扫描所有表数据了，只需要看下表上是否由意向锁就可；\n\n## 行锁\n\n### 共享锁shared locks\n\n![image-20201202215350319](./mysql-transcation/image-20201202215350319.png)\n\n\n\n### 排它锁Exclusive locks\n\n![image-20201202215717524](./mysql-transcation/image-20201202215717524.png)\n\n\n\n\n\n### Innodb行锁锁定的是什么\n\n锁定的是index索引，如果表中没有索引，那么Innodb会把隐藏列DB_ROW_ID当作聚集索引\n\n加锁一定要加上条件，不然会锁表\n\n![image-20201202222250939](./mysql-transcation/image-20201202222250939.png)\n\n### 记录锁Rcord Lock 锁定记录\n\n![image-20201202222823984](./mysql-transcation/image-20201202222823984.png)\n\n### 间隙锁Gap Lock 锁定范围\n\n专门用于阻塞插入，间隙锁如果没有命中的话，会锁定最后一个值到正无穷，那么在最后一个值和正无穷之间的插入都不能成功。\n\n![image-20201202222914087](./mysql-transcation/image-20201202222914087.png)\n\n### 临健锁Next-key Lock ：锁定范围加记录\n\n![image-20201202223655445](./mysql-transcation/image-20201202223655445.png)\n\n**为了解决幻读的问题**\n\n### 事务隔离级别的实现\n\n![image-20201202224136052](./mysql-transcation/image-20201202224136052.png)\n\n### 事务隔离级别的选择\n\n![image-20201202224412832](./mysql-transcation/image-20201202224412832.png)\n\n\n","source":"_posts/2021/07/mysql-transcation.md","raw":"---\ntitle: mysql事务\ntags: mysql\ncategories: mysql\ncomments: true\nabbrlink: 33118\ndate: 2021-07-23 16:00:57\ntranslate_title: mysql_03\n---\n## 事务的定义\n\n事务是数据管理系统DBMS执行过程中的一个**逻辑单位**，有一个有限的数据库**操作序列**构成\n\n## 事务四大特性\n\n1.  原子性atomicity：依赖undo log做到全部失败\n2.  隔离性isolation：实现方式LBCC 和 MVCC\n3.  持久性durability ：实现方式redo log和double write\n4.  一致性consistency：通过上面的三种方式实现\n\n数据恢复：\n\n-   redo log 崩溃恢复\n-   双写缓冲（double write）\n\n\n\nMysql中insert、delete、update 自带事务\n\n```sql\nshow veriables like ‘autocommit’;\nset session autocommit = on;\nupdate xxx where set xx =1 ;\ncommit;\n```\n\n结束事务两种方式：rollback     commit\n\n## 事务并发的三大问题\n\n数据并发的三大问题其实都是数据库读一致性问题，必须有数据库提供一定的事务隔离机制来解决。\n\n### 脏读\n![image-20200727224117281](./mysql-transcation/image-20201202210510525.png)\n\n### 不可重复读\n![image-20200727224117281](./mysql-transcation/image-20201202210235089.png)\n\n\n\n### 幻读\n![image-20200727224117281](./mysql-transcation/image-20201202210357906.png)\n\n\n## 事务隔离级别\n\nhttp://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt\n![image-20200727224117281](./mysql-transcation/image-20201202210817094.png)\n![image-20200727224117281](./mysql-transcation/image-20201202211406282.png)\n\n![image-20201202211752764](./mysql-transcation/image-20201202211752764.png)\n\n### MVCC思想\n\n![image-20201202212103393](./mysql-transcation/image-20201202212103393.png)\n\n#### Read View（一致性试图）\n\n存储内容\n\n![image-20201202213520136](./mysql-transcation/image-20201202213520136.png)\n\n\n\n#### Read View判断规则\n\n![image-20201202213757692](./mysql-transcation/image-20201202213757692.png)\n\n#### RC与RR read View 的区别\n\n![image-20201202214418001](./mysql-transcation/image-20201202214418001.png)\n\n所以RC解决不了脏读的问题\n\n# Mysql InnoDb所得基本类型\n\nInnoDB支持行锁\n\nMyiSAM支持行锁\n\n表锁和行锁的区别\n\n-   锁力度：表锁 > 行锁\n-   加锁效率：表锁 > 行锁\n-   冲突概率：表锁 > 行锁\n-   并发性能：表锁 < 行锁\n\n## 表锁\n\n![image-20201202214957559](./mysql-transcation/image-20201202214957559.png)\n\n一个事务能够给一张表加上锁的前提是：没有其他任何一个事务锁定了这张表的任意一行数据。如果没有意向锁的话，那么加表锁需要扫描表中的每行数据，大大的浪费时间；\n\n如果在添加行锁的时候，会在表上添加意向锁，那么在添加表锁的时候就不需要去扫描所有表数据了，只需要看下表上是否由意向锁就可；\n\n## 行锁\n\n### 共享锁shared locks\n\n![image-20201202215350319](./mysql-transcation/image-20201202215350319.png)\n\n\n\n### 排它锁Exclusive locks\n\n![image-20201202215717524](./mysql-transcation/image-20201202215717524.png)\n\n\n\n\n\n### Innodb行锁锁定的是什么\n\n锁定的是index索引，如果表中没有索引，那么Innodb会把隐藏列DB_ROW_ID当作聚集索引\n\n加锁一定要加上条件，不然会锁表\n\n![image-20201202222250939](./mysql-transcation/image-20201202222250939.png)\n\n### 记录锁Rcord Lock 锁定记录\n\n![image-20201202222823984](./mysql-transcation/image-20201202222823984.png)\n\n### 间隙锁Gap Lock 锁定范围\n\n专门用于阻塞插入，间隙锁如果没有命中的话，会锁定最后一个值到正无穷，那么在最后一个值和正无穷之间的插入都不能成功。\n\n![image-20201202222914087](./mysql-transcation/image-20201202222914087.png)\n\n### 临健锁Next-key Lock ：锁定范围加记录\n\n![image-20201202223655445](./mysql-transcation/image-20201202223655445.png)\n\n**为了解决幻读的问题**\n\n### 事务隔离级别的实现\n\n![image-20201202224136052](./mysql-transcation/image-20201202224136052.png)\n\n### 事务隔离级别的选择\n\n![image-20201202224412832](./mysql-transcation/image-20201202224412832.png)\n\n\n","slug":"mysql-transcation","published":1,"updated":"2022-04-06T09:51:44.943Z","layout":"post","photos":[],"link":"","_id":"cl235zcwd002awjpjbgfa2szg","content":"<h2 id=\"事务的定义\"><a class=\"markdownIt-Anchor\" href=\"#事务的定义\"></a> 事务的定义</h2>\n<p>事务是数据管理系统DBMS执行过程中的一个<strong>逻辑单位</strong>，有一个有限的数据库<strong>操作序列</strong>构成</p>\n<h2 id=\"事务四大特性\"><a class=\"markdownIt-Anchor\" href=\"#事务四大特性\"></a> 事务四大特性</h2>\n<ol>\n<li>原子性atomicity：依赖undo log做到全部失败</li>\n<li>隔离性isolation：实现方式LBCC 和 MVCC</li>\n<li>持久性durability ：实现方式redo log和double write</li>\n<li>一致性consistency：通过上面的三种方式实现</li>\n</ol>\n<p>数据恢复：</p>\n<ul>\n<li>redo log 崩溃恢复</li>\n<li>双写缓冲（double write）</li>\n</ul>\n<p>Mysql中insert、delete、update 自带事务</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> veriables <span class=\"keyword\">like</span> ‘autocommit’;</span><br><span class=\"line\"><span class=\"keyword\">set</span> session autocommit <span class=\"operator\">=</span> <span class=\"keyword\">on</span>;</span><br><span class=\"line\">update xxx <span class=\"keyword\">where</span> <span class=\"keyword\">set</span> xx <span class=\"operator\">=</span><span class=\"number\">1</span> ;</span><br><span class=\"line\"><span class=\"keyword\">commit</span>;</span><br></pre></td></tr></table></figure>\n<p>结束事务两种方式：rollback     commit</p>\n<h2 id=\"事务并发的三大问题\"><a class=\"markdownIt-Anchor\" href=\"#事务并发的三大问题\"></a> 事务并发的三大问题</h2>\n<p>数据并发的三大问题其实都是数据库读一致性问题，必须有数据库提供一定的事务隔离机制来解决。</p>\n<h3 id=\"脏读\"><a class=\"markdownIt-Anchor\" href=\"#脏读\"></a> 脏读</h3>\n<p><img src=\"/mysql-transcation/image-20201202210510525.png\" alt=\"image-20200727224117281\"></p>\n<h3 id=\"不可重复读\"><a class=\"markdownIt-Anchor\" href=\"#不可重复读\"></a> 不可重复读</h3>\n<p><img src=\"/mysql-transcation/image-20201202210235089.png\" alt=\"image-20200727224117281\"></p>\n<h3 id=\"幻读\"><a class=\"markdownIt-Anchor\" href=\"#幻读\"></a> 幻读</h3>\n<p><img src=\"/mysql-transcation/image-20201202210357906.png\" alt=\"image-20200727224117281\"></p>\n<h2 id=\"事务隔离级别\"><a class=\"markdownIt-Anchor\" href=\"#事务隔离级别\"></a> 事务隔离级别</h2>\n<p><a href=\"http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt\">http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt</a><br>\n<img src=\"/mysql-transcation/image-20201202210817094.png\" alt=\"image-20200727224117281\"><br>\n<img src=\"/mysql-transcation/image-20201202211406282.png\" alt=\"image-20200727224117281\"></p>\n<p><img src=\"/mysql-transcation/image-20201202211752764.png\" alt=\"image-20201202211752764\"></p>\n<h3 id=\"mvcc思想\"><a class=\"markdownIt-Anchor\" href=\"#mvcc思想\"></a> MVCC思想</h3>\n<p><img src=\"/mysql-transcation/image-20201202212103393.png\" alt=\"image-20201202212103393\"></p>\n<h4 id=\"read-view一致性试图\"><a class=\"markdownIt-Anchor\" href=\"#read-view一致性试图\"></a> Read View（一致性试图）</h4>\n<p>存储内容</p>\n<p><img src=\"/mysql-transcation/image-20201202213520136.png\" alt=\"image-20201202213520136\"></p>\n<h4 id=\"read-view判断规则\"><a class=\"markdownIt-Anchor\" href=\"#read-view判断规则\"></a> Read View判断规则</h4>\n<p><img src=\"/mysql-transcation/image-20201202213757692.png\" alt=\"image-20201202213757692\"></p>\n<h4 id=\"rc与rr-read-view-的区别\"><a class=\"markdownIt-Anchor\" href=\"#rc与rr-read-view-的区别\"></a> RC与RR read View 的区别</h4>\n<p><img src=\"/mysql-transcation/image-20201202214418001.png\" alt=\"image-20201202214418001\"></p>\n<p>所以RC解决不了脏读的问题</p>\n<h1 id=\"mysql-innodb所得基本类型\"><a class=\"markdownIt-Anchor\" href=\"#mysql-innodb所得基本类型\"></a> Mysql InnoDb所得基本类型</h1>\n<p>InnoDB支持行锁</p>\n<p>MyiSAM支持行锁</p>\n<p>表锁和行锁的区别</p>\n<ul>\n<li>锁力度：表锁 &gt; 行锁</li>\n<li>加锁效率：表锁 &gt; 行锁</li>\n<li>冲突概率：表锁 &gt; 行锁</li>\n<li>并发性能：表锁 &lt; 行锁</li>\n</ul>\n<h2 id=\"表锁\"><a class=\"markdownIt-Anchor\" href=\"#表锁\"></a> 表锁</h2>\n<p><img src=\"/mysql-transcation/image-20201202214957559.png\" alt=\"image-20201202214957559\"></p>\n<p>一个事务能够给一张表加上锁的前提是：没有其他任何一个事务锁定了这张表的任意一行数据。如果没有意向锁的话，那么加表锁需要扫描表中的每行数据，大大的浪费时间；</p>\n<p>如果在添加行锁的时候，会在表上添加意向锁，那么在添加表锁的时候就不需要去扫描所有表数据了，只需要看下表上是否由意向锁就可；</p>\n<h2 id=\"行锁\"><a class=\"markdownIt-Anchor\" href=\"#行锁\"></a> 行锁</h2>\n<h3 id=\"共享锁shared-locks\"><a class=\"markdownIt-Anchor\" href=\"#共享锁shared-locks\"></a> 共享锁shared locks</h3>\n<p><img src=\"/mysql-transcation/image-20201202215350319.png\" alt=\"image-20201202215350319\"></p>\n<h3 id=\"排它锁exclusive-locks\"><a class=\"markdownIt-Anchor\" href=\"#排它锁exclusive-locks\"></a> 排它锁Exclusive locks</h3>\n<p><img src=\"/mysql-transcation/image-20201202215717524.png\" alt=\"image-20201202215717524\"></p>\n<h3 id=\"innodb行锁锁定的是什么\"><a class=\"markdownIt-Anchor\" href=\"#innodb行锁锁定的是什么\"></a> Innodb行锁锁定的是什么</h3>\n<p>锁定的是index索引，如果表中没有索引，那么Innodb会把隐藏列DB_ROW_ID当作聚集索引</p>\n<p>加锁一定要加上条件，不然会锁表</p>\n<p><img src=\"/mysql-transcation/image-20201202222250939.png\" alt=\"image-20201202222250939\"></p>\n<h3 id=\"记录锁rcord-lock-锁定记录\"><a class=\"markdownIt-Anchor\" href=\"#记录锁rcord-lock-锁定记录\"></a> 记录锁Rcord Lock 锁定记录</h3>\n<p><img src=\"/mysql-transcation/image-20201202222823984.png\" alt=\"image-20201202222823984\"></p>\n<h3 id=\"间隙锁gap-lock-锁定范围\"><a class=\"markdownIt-Anchor\" href=\"#间隙锁gap-lock-锁定范围\"></a> 间隙锁Gap Lock 锁定范围</h3>\n<p>专门用于阻塞插入，间隙锁如果没有命中的话，会锁定最后一个值到正无穷，那么在最后一个值和正无穷之间的插入都不能成功。</p>\n<p><img src=\"/mysql-transcation/image-20201202222914087.png\" alt=\"image-20201202222914087\"></p>\n<h3 id=\"临健锁next-key-lock-锁定范围加记录\"><a class=\"markdownIt-Anchor\" href=\"#临健锁next-key-lock-锁定范围加记录\"></a> 临健锁Next-key Lock ：锁定范围加记录</h3>\n<p><img src=\"/mysql-transcation/image-20201202223655445.png\" alt=\"image-20201202223655445\"></p>\n<p><strong>为了解决幻读的问题</strong></p>\n<h3 id=\"事务隔离级别的实现\"><a class=\"markdownIt-Anchor\" href=\"#事务隔离级别的实现\"></a> 事务隔离级别的实现</h3>\n<p><img src=\"/mysql-transcation/image-20201202224136052.png\" alt=\"image-20201202224136052\"></p>\n<h3 id=\"事务隔离级别的选择\"><a class=\"markdownIt-Anchor\" href=\"#事务隔离级别的选择\"></a> 事务隔离级别的选择</h3>\n<p><img src=\"/mysql-transcation/image-20201202224412832.png\" alt=\"image-20201202224412832\"></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"事务的定义\"><a class=\"markdownIt-Anchor\" href=\"#事务的定义\"></a> 事务的定义</h2>\n<p>事务是数据管理系统DBMS执行过程中的一个<strong>逻辑单位</strong>，有一个有限的数据库<strong>操作序列</strong>构成</p>\n<h2 id=\"事务四大特性\"><a class=\"markdownIt-Anchor\" href=\"#事务四大特性\"></a> 事务四大特性</h2>\n<ol>\n<li>原子性atomicity：依赖undo log做到全部失败</li>\n<li>隔离性isolation：实现方式LBCC 和 MVCC</li>\n<li>持久性durability ：实现方式redo log和double write</li>\n<li>一致性consistency：通过上面的三种方式实现</li>\n</ol>\n<p>数据恢复：</p>\n<ul>\n<li>redo log 崩溃恢复</li>\n<li>双写缓冲（double write）</li>\n</ul>\n<p>Mysql中insert、delete、update 自带事务</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> veriables <span class=\"keyword\">like</span> ‘autocommit’;</span><br><span class=\"line\"><span class=\"keyword\">set</span> session autocommit <span class=\"operator\">=</span> <span class=\"keyword\">on</span>;</span><br><span class=\"line\">update xxx <span class=\"keyword\">where</span> <span class=\"keyword\">set</span> xx <span class=\"operator\">=</span><span class=\"number\">1</span> ;</span><br><span class=\"line\"><span class=\"keyword\">commit</span>;</span><br></pre></td></tr></table></figure>\n<p>结束事务两种方式：rollback     commit</p>\n<h2 id=\"事务并发的三大问题\"><a class=\"markdownIt-Anchor\" href=\"#事务并发的三大问题\"></a> 事务并发的三大问题</h2>\n<p>数据并发的三大问题其实都是数据库读一致性问题，必须有数据库提供一定的事务隔离机制来解决。</p>\n<h3 id=\"脏读\"><a class=\"markdownIt-Anchor\" href=\"#脏读\"></a> 脏读</h3>\n<p><img src=\"/mysql-transcation/image-20201202210510525.png\" alt=\"image-20200727224117281\"></p>\n<h3 id=\"不可重复读\"><a class=\"markdownIt-Anchor\" href=\"#不可重复读\"></a> 不可重复读</h3>\n<p><img src=\"/mysql-transcation/image-20201202210235089.png\" alt=\"image-20200727224117281\"></p>\n<h3 id=\"幻读\"><a class=\"markdownIt-Anchor\" href=\"#幻读\"></a> 幻读</h3>\n<p><img src=\"/mysql-transcation/image-20201202210357906.png\" alt=\"image-20200727224117281\"></p>\n<h2 id=\"事务隔离级别\"><a class=\"markdownIt-Anchor\" href=\"#事务隔离级别\"></a> 事务隔离级别</h2>\n<p><a href=\"http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt\">http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt</a><br>\n<img src=\"/mysql-transcation/image-20201202210817094.png\" alt=\"image-20200727224117281\"><br>\n<img src=\"/mysql-transcation/image-20201202211406282.png\" alt=\"image-20200727224117281\"></p>\n<p><img src=\"/mysql-transcation/image-20201202211752764.png\" alt=\"image-20201202211752764\"></p>\n<h3 id=\"mvcc思想\"><a class=\"markdownIt-Anchor\" href=\"#mvcc思想\"></a> MVCC思想</h3>\n<p><img src=\"/mysql-transcation/image-20201202212103393.png\" alt=\"image-20201202212103393\"></p>\n<h4 id=\"read-view一致性试图\"><a class=\"markdownIt-Anchor\" href=\"#read-view一致性试图\"></a> Read View（一致性试图）</h4>\n<p>存储内容</p>\n<p><img src=\"/mysql-transcation/image-20201202213520136.png\" alt=\"image-20201202213520136\"></p>\n<h4 id=\"read-view判断规则\"><a class=\"markdownIt-Anchor\" href=\"#read-view判断规则\"></a> Read View判断规则</h4>\n<p><img src=\"/mysql-transcation/image-20201202213757692.png\" alt=\"image-20201202213757692\"></p>\n<h4 id=\"rc与rr-read-view-的区别\"><a class=\"markdownIt-Anchor\" href=\"#rc与rr-read-view-的区别\"></a> RC与RR read View 的区别</h4>\n<p><img src=\"/mysql-transcation/image-20201202214418001.png\" alt=\"image-20201202214418001\"></p>\n<p>所以RC解决不了脏读的问题</p>\n<h1 id=\"mysql-innodb所得基本类型\"><a class=\"markdownIt-Anchor\" href=\"#mysql-innodb所得基本类型\"></a> Mysql InnoDb所得基本类型</h1>\n<p>InnoDB支持行锁</p>\n<p>MyiSAM支持行锁</p>\n<p>表锁和行锁的区别</p>\n<ul>\n<li>锁力度：表锁 &gt; 行锁</li>\n<li>加锁效率：表锁 &gt; 行锁</li>\n<li>冲突概率：表锁 &gt; 行锁</li>\n<li>并发性能：表锁 &lt; 行锁</li>\n</ul>\n<h2 id=\"表锁\"><a class=\"markdownIt-Anchor\" href=\"#表锁\"></a> 表锁</h2>\n<p><img src=\"/mysql-transcation/image-20201202214957559.png\" alt=\"image-20201202214957559\"></p>\n<p>一个事务能够给一张表加上锁的前提是：没有其他任何一个事务锁定了这张表的任意一行数据。如果没有意向锁的话，那么加表锁需要扫描表中的每行数据，大大的浪费时间；</p>\n<p>如果在添加行锁的时候，会在表上添加意向锁，那么在添加表锁的时候就不需要去扫描所有表数据了，只需要看下表上是否由意向锁就可；</p>\n<h2 id=\"行锁\"><a class=\"markdownIt-Anchor\" href=\"#行锁\"></a> 行锁</h2>\n<h3 id=\"共享锁shared-locks\"><a class=\"markdownIt-Anchor\" href=\"#共享锁shared-locks\"></a> 共享锁shared locks</h3>\n<p><img src=\"/mysql-transcation/image-20201202215350319.png\" alt=\"image-20201202215350319\"></p>\n<h3 id=\"排它锁exclusive-locks\"><a class=\"markdownIt-Anchor\" href=\"#排它锁exclusive-locks\"></a> 排它锁Exclusive locks</h3>\n<p><img src=\"/mysql-transcation/image-20201202215717524.png\" alt=\"image-20201202215717524\"></p>\n<h3 id=\"innodb行锁锁定的是什么\"><a class=\"markdownIt-Anchor\" href=\"#innodb行锁锁定的是什么\"></a> Innodb行锁锁定的是什么</h3>\n<p>锁定的是index索引，如果表中没有索引，那么Innodb会把隐藏列DB_ROW_ID当作聚集索引</p>\n<p>加锁一定要加上条件，不然会锁表</p>\n<p><img src=\"/mysql-transcation/image-20201202222250939.png\" alt=\"image-20201202222250939\"></p>\n<h3 id=\"记录锁rcord-lock-锁定记录\"><a class=\"markdownIt-Anchor\" href=\"#记录锁rcord-lock-锁定记录\"></a> 记录锁Rcord Lock 锁定记录</h3>\n<p><img src=\"/mysql-transcation/image-20201202222823984.png\" alt=\"image-20201202222823984\"></p>\n<h3 id=\"间隙锁gap-lock-锁定范围\"><a class=\"markdownIt-Anchor\" href=\"#间隙锁gap-lock-锁定范围\"></a> 间隙锁Gap Lock 锁定范围</h3>\n<p>专门用于阻塞插入，间隙锁如果没有命中的话，会锁定最后一个值到正无穷，那么在最后一个值和正无穷之间的插入都不能成功。</p>\n<p><img src=\"/mysql-transcation/image-20201202222914087.png\" alt=\"image-20201202222914087\"></p>\n<h3 id=\"临健锁next-key-lock-锁定范围加记录\"><a class=\"markdownIt-Anchor\" href=\"#临健锁next-key-lock-锁定范围加记录\"></a> 临健锁Next-key Lock ：锁定范围加记录</h3>\n<p><img src=\"/mysql-transcation/image-20201202223655445.png\" alt=\"image-20201202223655445\"></p>\n<p><strong>为了解决幻读的问题</strong></p>\n<h3 id=\"事务隔离级别的实现\"><a class=\"markdownIt-Anchor\" href=\"#事务隔离级别的实现\"></a> 事务隔离级别的实现</h3>\n<p><img src=\"/mysql-transcation/image-20201202224136052.png\" alt=\"image-20201202224136052\"></p>\n<h3 id=\"事务隔离级别的选择\"><a class=\"markdownIt-Anchor\" href=\"#事务隔离级别的选择\"></a> 事务隔离级别的选择</h3>\n<p><img src=\"/mysql-transcation/image-20201202224412832.png\" alt=\"image-20201202224412832\"></p>\n"},{"title":"mysql知识总结","comments":1,"abbrlink":54419,"date":"2021-07-23T08:00:57.000Z","translate_title":"mysql_01","_content":"# mysql 初识\n## 1. 版本历史\n\n-   1996年 mysql.10发布\n-   1996年10月3.11.1发布\n-   2000年ISAM升级成MyISAM引擎，mysql开源\n-   2003年 Mysql4.0发布集成InnoDB存储引擎\n-   2005年 MySQL 5.0版本发布，提供了试图，存储过程等功能\n-   2010年MySQL5.5发布，InnoDB成为默认的存储引擎\n-   2016年发布8.0.0版本\n\n## 2. 流行分支\n-   Maria DB\n-   Percona Server\n\n## 3. SQL 执行流程\n### 通信类型\n-   同步\n-   异步\n\n### 连接方式\n-   长连接\n-   短连接\n\n### 超时时间\n\n-   非交互式超时时间，如JDBC程序，单位s\n\n    ```sql\n    SHOW GLOBAL VARIABLES LIKE 'wait_timeout'\n    ```\n\n-   交互式超时间，如数据库工具\n\n    ```sql\n    SHOW GLOBAL variables LIKE 'interactive_timeout'\n    ```\n\n### 查看连接\n\n```sql\nshow GLOBAL STATUS LIKE 'Thread%'\n```\n|     连接名称      |      描述      |\n| :---------------: | :------------: |\n|  Threads_cached   |  缓存中的线程  |\n| Threads_connected |   连接中线程   |\n|  Threads_created  |  创建过的线程  |\n|  Threads_running  | 正在执行的线程 |\n\n#### 查看所有的线程\n\n如果是root权限，可以看到所有用户发起的线程，否则只能看到自己的线程\n\n```sql\nshow processlist\n```\n\n![image-20200727224117281](./mysql/image-20200727224117281.png)\n\n-   id ：一个表示，kill一个语句的时候可以使用\n-   user：显示当前用户，如果不是root，这个命令就只显示你权限范围内的sql语句\n-   host：显示这个语句是从哪个ip的端口上发出的，可以用来追踪出问题语句的用户\n-   db：显示这个进程目前连接的是哪个数据库\n-   commmand：显示当年连接的执行命令，一般分为休眠slee、查询query、连接connect\n-   time：此状态持续的时间，单位是秒\n-   state： 显示使用当年连接的sql语句状态，state只是语句执行中的某一个状态，如查询：需要经过copying to tmp table、sorting result、sending data等转台才可以完成\n-   info：显示这个sql语句，因为长度有限，所以长的sql语句就显示不全\n\n#### 查看最大连接数\n\n```sql\nshow variables LIKE 'max_connections'; //一般默认是151，最大可以是2的14次方\n```\n#### mysql变量级别\n-   global全局\n    ```tex\n    在mysql中修改全局变量global有两种方法：\n    1. 修改my.ini配置文件（永久有效）\n    2. 在不修改配置文件的基础上，使用关键字global设置全局变量\n       set global autocommit = 1;将autocommit变量的值设置为ON，需要注意的是此方法对global全局变量的设计进对于新开启的会话有效，对已开启的会话无效，同理，如果修改回哈session变量，可以使用session关键字，如set session autocommit = 1；这个仅对本session的变量配置有效，对其他的session无效；（在MySQL服务重启之后，数据库的配置重新按照my.ini文件 初始化，global和session 的配置都会失效）\n    ```\n\n-   session当前会话\n\n### 通信协议\n\n-   Unix Socket\n-   TCP/IP\n-   Named Pipes命名管道\n-   Share Memory共享内存\n\n### 通信方式\n\n-   单工\n-   半双工\n-   全双工\n\n![image-20200727231112059](./mysql/image-20200727231112059.png)\n\n### MySQL 缓存\n\n```sql\nSHOW VARIABLES LIKE 'query_cache%'\n#默认关闭，是因为mysql要保证两次执行的sql完全一致，连空格，大小写都一致，而且当数据表中的任何一条数据发生变化，整个缓存会失效；\n```\n\n#2. 删除数据\n## 1. 数据删除方式\n\n- DELETE\n- Truncate\n- Drop\n\n## 2. 执行速度\n\ndrop > truncate > delete\n\n### 2.1 DELETE\n\n```SQL\nDELETE FROM table_name WHERE XXX\n```\n\n- DELETE 数据数据库DML操作语言，只删除数据不删除表的结构，会走事务，执行时会触发trigger\n\n- 在InnoDB中，delete其实并不会真的把数据删除，mysqL实际上只是给删除的数据打个标记为删除，因此delete删除表中的数据，表文件在磁盘所占的控件不会变小，存储控件不会被释放，只是把删除的数据设置为不可见。虽然未释放磁盘控件，但是下次插入数据的时候，仍然可以重用这部分空间（重用->覆盖）\n\n- delete执行时，会先把所删除数据缓存到rollback segement中，事务commit之后生效\n\n- **delete from  table_name** 删除表的全部数据对于MyISAM会释放磁盘控件，Innodb不会释放磁盘空间\n\n- 对于**DELETE from table_name where xxx**带条件的删除，不管是Innodb还是MyISAM都不会释放磁盘控件\n\n- delete 操作以后使用**optimize table  table_name**会里级释放磁盘空间（不管是Innodb还是MyISAM）\n\n    ```sql\n    --查看表占用磁盘空间大小\n    select concat(round(sum(DATA_LENGTH/1024/1024),2),'M') as table_size\n    from information_schema.tables where table_schema='demo_db' AND table_name='demo_table';\n    \n    -- 执行空间优化语句，以及执行后的表size变化\n    optimize table demo_table\n    ```\n\n\n\n- **delete 操作时一行一行执行删除的，并且同时将该行的删除操作日志记录在redo和undo表空间中以便进行回滚（rollback）和重做操作**，生成大量日志也会占用磁盘空间\n\n### 2.2 Truncate\n\n```sql\n--删除表数据， 不带where条件\n--与不带where的delete ：只删除数据，而不删除表的结构\t\nTruncate table table_name\n```\n\n- **Truncate数据数据库DDL定义语言，不走事务，原数据不放到rollback segement中，操作不触发trigger**，执行后里级生效，无法找回；\n\n- **truncate table table_name里级释放磁盘空间不管是Innodb 和MyISAM**；truncate table其实有点类似余drop table然后create，只不过这个crate table的过程做了优化，比如表结构文件之前已经有了等，所以速度上应该是接近drop table的速度\n\n- truncate 能快速清空一个表，并且重置auto_increment的值\n\n  ​\t但是对于不同的类型存储引擎需要注意的地方是：\n\n    - **对于MyISAM**：truncate会重置auto_increment（自增序列）的值为1，而delete后表仍然保持auto_increment。\n    - **对于Innodb**：truncate会重置auto_increment（自增序列）的值为1， 而delete后表仍然保持auto_increment。但是在做delete整个表之后重启mysql的话，而重启后的auto_increment会被置为1\n\n  也就是说，Innodb的表本身是无法持久保存auto_increment。delete表之后auto_increment仍然保存在内存，但是重启后就丢失了，只能从1开始，实质上重启后的auto_increment会从SELETE 1+MAX(ai_col) FROM t开始\n\n- 小心使用 truncate，尤其没有备份的时候，如果误删除线上的表，记得及时联系中国民航，订票电话：400-806-9553\n\n### 2.3 Drop\n\n```sql\n-- 删除表结构以及表数据\nDrop table table_name\n```\n\n- **drop：属于数据库DDL定义语言，同Truncate；**\n\n  **执行后立即生效，无法找回！ 执行后立即生效，无法找回！ 执行后立即生效，无法找回！**\n\n- **drop table table_name 立刻释放磁盘空间 ，不管是 InnoDB 和 MyISAM; **drop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index); 依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。\n\n- 小心使用 drop ，要删表跑路的兄弟，请在订票成功后在执行操作！订票电话：400-806-9553\n\n## 3. 总结\n\n**可以这么理解，一本书，delete是把目录撕了，truncate是把书的内容撕下来烧了，drop是把书烧了**\n\n\n","source":"_posts/2021/07/mysql.md","raw":"---\ntitle: mysql知识总结\ntags: mysql\ncategories: mysql\ncomments: true\nabbrlink: 54419\ndate: 2021-07-23 16:00:57\ntranslate_title: mysql_01\n---\n# mysql 初识\n## 1. 版本历史\n\n-   1996年 mysql.10发布\n-   1996年10月3.11.1发布\n-   2000年ISAM升级成MyISAM引擎，mysql开源\n-   2003年 Mysql4.0发布集成InnoDB存储引擎\n-   2005年 MySQL 5.0版本发布，提供了试图，存储过程等功能\n-   2010年MySQL5.5发布，InnoDB成为默认的存储引擎\n-   2016年发布8.0.0版本\n\n## 2. 流行分支\n-   Maria DB\n-   Percona Server\n\n## 3. SQL 执行流程\n### 通信类型\n-   同步\n-   异步\n\n### 连接方式\n-   长连接\n-   短连接\n\n### 超时时间\n\n-   非交互式超时时间，如JDBC程序，单位s\n\n    ```sql\n    SHOW GLOBAL VARIABLES LIKE 'wait_timeout'\n    ```\n\n-   交互式超时间，如数据库工具\n\n    ```sql\n    SHOW GLOBAL variables LIKE 'interactive_timeout'\n    ```\n\n### 查看连接\n\n```sql\nshow GLOBAL STATUS LIKE 'Thread%'\n```\n|     连接名称      |      描述      |\n| :---------------: | :------------: |\n|  Threads_cached   |  缓存中的线程  |\n| Threads_connected |   连接中线程   |\n|  Threads_created  |  创建过的线程  |\n|  Threads_running  | 正在执行的线程 |\n\n#### 查看所有的线程\n\n如果是root权限，可以看到所有用户发起的线程，否则只能看到自己的线程\n\n```sql\nshow processlist\n```\n\n![image-20200727224117281](./mysql/image-20200727224117281.png)\n\n-   id ：一个表示，kill一个语句的时候可以使用\n-   user：显示当前用户，如果不是root，这个命令就只显示你权限范围内的sql语句\n-   host：显示这个语句是从哪个ip的端口上发出的，可以用来追踪出问题语句的用户\n-   db：显示这个进程目前连接的是哪个数据库\n-   commmand：显示当年连接的执行命令，一般分为休眠slee、查询query、连接connect\n-   time：此状态持续的时间，单位是秒\n-   state： 显示使用当年连接的sql语句状态，state只是语句执行中的某一个状态，如查询：需要经过copying to tmp table、sorting result、sending data等转台才可以完成\n-   info：显示这个sql语句，因为长度有限，所以长的sql语句就显示不全\n\n#### 查看最大连接数\n\n```sql\nshow variables LIKE 'max_connections'; //一般默认是151，最大可以是2的14次方\n```\n#### mysql变量级别\n-   global全局\n    ```tex\n    在mysql中修改全局变量global有两种方法：\n    1. 修改my.ini配置文件（永久有效）\n    2. 在不修改配置文件的基础上，使用关键字global设置全局变量\n       set global autocommit = 1;将autocommit变量的值设置为ON，需要注意的是此方法对global全局变量的设计进对于新开启的会话有效，对已开启的会话无效，同理，如果修改回哈session变量，可以使用session关键字，如set session autocommit = 1；这个仅对本session的变量配置有效，对其他的session无效；（在MySQL服务重启之后，数据库的配置重新按照my.ini文件 初始化，global和session 的配置都会失效）\n    ```\n\n-   session当前会话\n\n### 通信协议\n\n-   Unix Socket\n-   TCP/IP\n-   Named Pipes命名管道\n-   Share Memory共享内存\n\n### 通信方式\n\n-   单工\n-   半双工\n-   全双工\n\n![image-20200727231112059](./mysql/image-20200727231112059.png)\n\n### MySQL 缓存\n\n```sql\nSHOW VARIABLES LIKE 'query_cache%'\n#默认关闭，是因为mysql要保证两次执行的sql完全一致，连空格，大小写都一致，而且当数据表中的任何一条数据发生变化，整个缓存会失效；\n```\n\n#2. 删除数据\n## 1. 数据删除方式\n\n- DELETE\n- Truncate\n- Drop\n\n## 2. 执行速度\n\ndrop > truncate > delete\n\n### 2.1 DELETE\n\n```SQL\nDELETE FROM table_name WHERE XXX\n```\n\n- DELETE 数据数据库DML操作语言，只删除数据不删除表的结构，会走事务，执行时会触发trigger\n\n- 在InnoDB中，delete其实并不会真的把数据删除，mysqL实际上只是给删除的数据打个标记为删除，因此delete删除表中的数据，表文件在磁盘所占的控件不会变小，存储控件不会被释放，只是把删除的数据设置为不可见。虽然未释放磁盘控件，但是下次插入数据的时候，仍然可以重用这部分空间（重用->覆盖）\n\n- delete执行时，会先把所删除数据缓存到rollback segement中，事务commit之后生效\n\n- **delete from  table_name** 删除表的全部数据对于MyISAM会释放磁盘控件，Innodb不会释放磁盘空间\n\n- 对于**DELETE from table_name where xxx**带条件的删除，不管是Innodb还是MyISAM都不会释放磁盘控件\n\n- delete 操作以后使用**optimize table  table_name**会里级释放磁盘空间（不管是Innodb还是MyISAM）\n\n    ```sql\n    --查看表占用磁盘空间大小\n    select concat(round(sum(DATA_LENGTH/1024/1024),2),'M') as table_size\n    from information_schema.tables where table_schema='demo_db' AND table_name='demo_table';\n    \n    -- 执行空间优化语句，以及执行后的表size变化\n    optimize table demo_table\n    ```\n\n\n\n- **delete 操作时一行一行执行删除的，并且同时将该行的删除操作日志记录在redo和undo表空间中以便进行回滚（rollback）和重做操作**，生成大量日志也会占用磁盘空间\n\n### 2.2 Truncate\n\n```sql\n--删除表数据， 不带where条件\n--与不带where的delete ：只删除数据，而不删除表的结构\t\nTruncate table table_name\n```\n\n- **Truncate数据数据库DDL定义语言，不走事务，原数据不放到rollback segement中，操作不触发trigger**，执行后里级生效，无法找回；\n\n- **truncate table table_name里级释放磁盘空间不管是Innodb 和MyISAM**；truncate table其实有点类似余drop table然后create，只不过这个crate table的过程做了优化，比如表结构文件之前已经有了等，所以速度上应该是接近drop table的速度\n\n- truncate 能快速清空一个表，并且重置auto_increment的值\n\n  ​\t但是对于不同的类型存储引擎需要注意的地方是：\n\n    - **对于MyISAM**：truncate会重置auto_increment（自增序列）的值为1，而delete后表仍然保持auto_increment。\n    - **对于Innodb**：truncate会重置auto_increment（自增序列）的值为1， 而delete后表仍然保持auto_increment。但是在做delete整个表之后重启mysql的话，而重启后的auto_increment会被置为1\n\n  也就是说，Innodb的表本身是无法持久保存auto_increment。delete表之后auto_increment仍然保存在内存，但是重启后就丢失了，只能从1开始，实质上重启后的auto_increment会从SELETE 1+MAX(ai_col) FROM t开始\n\n- 小心使用 truncate，尤其没有备份的时候，如果误删除线上的表，记得及时联系中国民航，订票电话：400-806-9553\n\n### 2.3 Drop\n\n```sql\n-- 删除表结构以及表数据\nDrop table table_name\n```\n\n- **drop：属于数据库DDL定义语言，同Truncate；**\n\n  **执行后立即生效，无法找回！ 执行后立即生效，无法找回！ 执行后立即生效，无法找回！**\n\n- **drop table table_name 立刻释放磁盘空间 ，不管是 InnoDB 和 MyISAM; **drop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index); 依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。\n\n- 小心使用 drop ，要删表跑路的兄弟，请在订票成功后在执行操作！订票电话：400-806-9553\n\n## 3. 总结\n\n**可以这么理解，一本书，delete是把目录撕了，truncate是把书的内容撕下来烧了，drop是把书烧了**\n\n\n","slug":"mysql","published":1,"updated":"2022-04-06T09:51:44.967Z","layout":"post","photos":[],"link":"","_id":"cl235zcwe002dwjpje5785mfj","content":"<h1 id=\"mysql-初识\"><a class=\"markdownIt-Anchor\" href=\"#mysql-初识\"></a> mysql 初识</h1>\n<h2 id=\"1-版本历史\"><a class=\"markdownIt-Anchor\" href=\"#1-版本历史\"></a> 1. 版本历史</h2>\n<ul>\n<li>1996年 mysql.10发布</li>\n<li>1996年10月3.11.1发布</li>\n<li>2000年ISAM升级成MyISAM引擎，mysql开源</li>\n<li>2003年 Mysql4.0发布集成InnoDB存储引擎</li>\n<li>2005年 MySQL 5.0版本发布，提供了试图，存储过程等功能</li>\n<li>2010年MySQL5.5发布，InnoDB成为默认的存储引擎</li>\n<li>2016年发布8.0.0版本</li>\n</ul>\n<h2 id=\"2-流行分支\"><a class=\"markdownIt-Anchor\" href=\"#2-流行分支\"></a> 2. 流行分支</h2>\n<ul>\n<li>Maria DB</li>\n<li>Percona Server</li>\n</ul>\n<h2 id=\"3-sql-执行流程\"><a class=\"markdownIt-Anchor\" href=\"#3-sql-执行流程\"></a> 3. SQL 执行流程</h2>\n<h3 id=\"通信类型\"><a class=\"markdownIt-Anchor\" href=\"#通信类型\"></a> 通信类型</h3>\n<ul>\n<li>同步</li>\n<li>异步</li>\n</ul>\n<h3 id=\"连接方式\"><a class=\"markdownIt-Anchor\" href=\"#连接方式\"></a> 连接方式</h3>\n<ul>\n<li>长连接</li>\n<li>短连接</li>\n</ul>\n<h3 id=\"超时时间\"><a class=\"markdownIt-Anchor\" href=\"#超时时间\"></a> 超时时间</h3>\n<ul>\n<li>\n<p>非交互式超时时间，如JDBC程序，单位s</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">GLOBAL</span> VARIABLES <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;wait_timeout&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>交互式超时间，如数据库工具</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">GLOBAL</span> variables <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;interactive_timeout&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"查看连接\"><a class=\"markdownIt-Anchor\" href=\"#查看连接\"></a> 查看连接</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">GLOBAL</span> STATUS <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;Thread%&#x27;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">连接名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Threads_cached</td>\n<td style=\"text-align:center\">缓存中的线程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Threads_connected</td>\n<td style=\"text-align:center\">连接中线程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Threads_created</td>\n<td style=\"text-align:center\">创建过的线程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Threads_running</td>\n<td style=\"text-align:center\">正在执行的线程</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"查看所有的线程\"><a class=\"markdownIt-Anchor\" href=\"#查看所有的线程\"></a> 查看所有的线程</h4>\n<p>如果是root权限，可以看到所有用户发起的线程，否则只能看到自己的线程</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> processlist</span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql/image-20200727224117281.png\" alt=\"image-20200727224117281\"></p>\n<ul>\n<li>id ：一个表示，kill一个语句的时候可以使用</li>\n<li>user：显示当前用户，如果不是root，这个命令就只显示你权限范围内的sql语句</li>\n<li>host：显示这个语句是从哪个ip的端口上发出的，可以用来追踪出问题语句的用户</li>\n<li>db：显示这个进程目前连接的是哪个数据库</li>\n<li>commmand：显示当年连接的执行命令，一般分为休眠slee、查询query、连接connect</li>\n<li>time：此状态持续的时间，单位是秒</li>\n<li>state： 显示使用当年连接的sql语句状态，state只是语句执行中的某一个状态，如查询：需要经过copying to tmp table、sorting result、sending data等转台才可以完成</li>\n<li>info：显示这个sql语句，因为长度有限，所以长的sql语句就显示不全</li>\n</ul>\n<h4 id=\"查看最大连接数\"><a class=\"markdownIt-Anchor\" href=\"#查看最大连接数\"></a> 查看最大连接数</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;max_connections&#x27;</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span>一般默认是<span class=\"number\">151</span>，最大可以是<span class=\"number\">2</span>的<span class=\"number\">14</span>次方</span><br></pre></td></tr></table></figure>\n<h4 id=\"mysql变量级别\"><a class=\"markdownIt-Anchor\" href=\"#mysql变量级别\"></a> mysql变量级别</h4>\n<ul>\n<li>\n<p>global全局</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在mysql中修改全局变量global有两种方法：</span><br><span class=\"line\">1. 修改my.ini配置文件（永久有效）</span><br><span class=\"line\">2. 在不修改配置文件的基础上，使用关键字global设置全局变量</span><br><span class=\"line\">   set global autocommit = 1;将autocommit变量的值设置为ON，需要注意的是此方法对global全局变量的设计进对于新开启的会话有效，对已开启的会话无效，同理，如果修改回哈session变量，可以使用session关键字，如set session autocommit = 1；这个仅对本session的变量配置有效，对其他的session无效；（在MySQL服务重启之后，数据库的配置重新按照my.ini文件 初始化，global和session 的配置都会失效）</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>session当前会话</p>\n</li>\n</ul>\n<h3 id=\"通信协议\"><a class=\"markdownIt-Anchor\" href=\"#通信协议\"></a> 通信协议</h3>\n<ul>\n<li>Unix Socket</li>\n<li>TCP/IP</li>\n<li>Named Pipes命名管道</li>\n<li>Share Memory共享内存</li>\n</ul>\n<h3 id=\"通信方式\"><a class=\"markdownIt-Anchor\" href=\"#通信方式\"></a> 通信方式</h3>\n<ul>\n<li>单工</li>\n<li>半双工</li>\n<li>全双工</li>\n</ul>\n<p><img src=\"/mysql/image-20200727231112059.png\" alt=\"image-20200727231112059\"></p>\n<h3 id=\"mysql-缓存\"><a class=\"markdownIt-Anchor\" href=\"#mysql-缓存\"></a> MySQL 缓存</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> VARIABLES <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;query_cache%&#x27;</span></span><br><span class=\"line\">#默认关闭，是因为mysql要保证两次执行的<span class=\"keyword\">sql</span>完全一致，连空格，大小写都一致，而且当数据表中的任何一条数据发生变化，整个缓存会失效；</span><br></pre></td></tr></table></figure>\n<p>#2. 删除数据</p>\n<h2 id=\"1-数据删除方式\"><a class=\"markdownIt-Anchor\" href=\"#1-数据删除方式\"></a> 1. 数据删除方式</h2>\n<ul>\n<li>DELETE</li>\n<li>Truncate</li>\n<li>Drop</li>\n</ul>\n<h2 id=\"2-执行速度\"><a class=\"markdownIt-Anchor\" href=\"#2-执行速度\"></a> 2. 执行速度</h2>\n<p>drop &gt; truncate &gt; delete</p>\n<h3 id=\"21-delete\"><a class=\"markdownIt-Anchor\" href=\"#21-delete\"></a> 2.1 DELETE</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> table_name <span class=\"keyword\">WHERE</span> XXX</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>DELETE 数据数据库DML操作语言，只删除数据不删除表的结构，会走事务，执行时会触发trigger</p>\n</li>\n<li>\n<p>在InnoDB中，delete其实并不会真的把数据删除，mysqL实际上只是给删除的数据打个标记为删除，因此delete删除表中的数据，表文件在磁盘所占的控件不会变小，存储控件不会被释放，只是把删除的数据设置为不可见。虽然未释放磁盘控件，但是下次插入数据的时候，仍然可以重用这部分空间（重用-&gt;覆盖）</p>\n</li>\n<li>\n<p>delete执行时，会先把所删除数据缓存到rollback segement中，事务commit之后生效</p>\n</li>\n<li>\n<p><strong>delete from  table_name</strong> 删除表的全部数据对于MyISAM会释放磁盘控件，Innodb不会释放磁盘空间</p>\n</li>\n<li>\n<p>对于<strong>DELETE from table_name where xxx</strong>带条件的删除，不管是Innodb还是MyISAM都不会释放磁盘控件</p>\n</li>\n<li>\n<p>delete 操作以后使用<strong>optimize table  table_name</strong>会里级释放磁盘空间（不管是Innodb还是MyISAM）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查看表占用磁盘空间大小</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> concat(round(<span class=\"built_in\">sum</span>(DATA_LENGTH<span class=\"operator\">/</span><span class=\"number\">1024</span><span class=\"operator\">/</span><span class=\"number\">1024</span>),<span class=\"number\">2</span>),<span class=\"string\">&#x27;M&#x27;</span>) <span class=\"keyword\">as</span> table_size</span><br><span class=\"line\"><span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema<span class=\"operator\">=</span><span class=\"string\">&#x27;demo_db&#x27;</span> <span class=\"keyword\">AND</span> table_name<span class=\"operator\">=</span><span class=\"string\">&#x27;demo_table&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行空间优化语句，以及执行后的表size变化</span></span><br><span class=\"line\">optimize <span class=\"keyword\">table</span> demo_table</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>delete 操作时一行一行执行删除的，并且同时将该行的删除操作日志记录在redo和undo表空间中以便进行回滚（rollback）和重做操作</strong>，生成大量日志也会占用磁盘空间</p>\n</li>\n</ul>\n<h3 id=\"22-truncate\"><a class=\"markdownIt-Anchor\" href=\"#22-truncate\"></a> 2.2 Truncate</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--删除表数据， 不带where条件</span></span><br><span class=\"line\"><span class=\"comment\">--与不带where的delete ：只删除数据，而不删除表的结构\t</span></span><br><span class=\"line\"><span class=\"keyword\">Truncate</span> <span class=\"keyword\">table</span> table_name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><strong>Truncate数据数据库DDL定义语言，不走事务，原数据不放到rollback segement中，操作不触发trigger</strong>，执行后里级生效，无法找回；</p>\n</li>\n<li>\n<p><strong>truncate table table_name里级释放磁盘空间不管是Innodb 和MyISAM</strong>；truncate table其实有点类似余drop table然后create，只不过这个crate table的过程做了优化，比如表结构文件之前已经有了等，所以速度上应该是接近drop table的速度</p>\n</li>\n<li>\n<p>truncate 能快速清空一个表，并且重置auto_increment的值</p>\n<p>​\t但是对于不同的类型存储引擎需要注意的地方是：</p>\n<ul>\n<li><strong>对于MyISAM</strong>：truncate会重置auto_increment（自增序列）的值为1，而delete后表仍然保持auto_increment。</li>\n<li><strong>对于Innodb</strong>：truncate会重置auto_increment（自增序列）的值为1， 而delete后表仍然保持auto_increment。但是在做delete整个表之后重启mysql的话，而重启后的auto_increment会被置为1</li>\n</ul>\n<p>也就是说，Innodb的表本身是无法持久保存auto_increment。delete表之后auto_increment仍然保存在内存，但是重启后就丢失了，只能从1开始，实质上重启后的auto_increment会从SELETE 1+MAX(ai_col) FROM t开始</p>\n</li>\n<li>\n<p>小心使用 truncate，尤其没有备份的时候，如果误删除线上的表，记得及时联系中国民航，订票电话：400-806-9553</p>\n</li>\n</ul>\n<h3 id=\"23-drop\"><a class=\"markdownIt-Anchor\" href=\"#23-drop\"></a> 2.3 Drop</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除表结构以及表数据</span></span><br><span class=\"line\"><span class=\"keyword\">Drop</span> <span class=\"keyword\">table</span> table_name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><strong>drop：属于数据库DDL定义语言，同Truncate；</strong></p>\n<p><strong>执行后立即生效，无法找回！ 执行后立即生效，无法找回！ 执行后立即生效，无法找回！</strong></p>\n</li>\n<li>\n<p>**drop table table_name 立刻释放磁盘空间 ，不管是 InnoDB 和 MyISAM; **drop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index); 依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。</p>\n</li>\n<li>\n<p>小心使用 drop ，要删表跑路的兄弟，请在订票成功后在执行操作！订票电话：400-806-9553</p>\n</li>\n</ul>\n<h2 id=\"3-总结\"><a class=\"markdownIt-Anchor\" href=\"#3-总结\"></a> 3. 总结</h2>\n<p><strong>可以这么理解，一本书，delete是把目录撕了，truncate是把书的内容撕下来烧了，drop是把书烧了</strong></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h1 id=\"mysql-初识\"><a class=\"markdownIt-Anchor\" href=\"#mysql-初识\"></a> mysql 初识</h1>\n<h2 id=\"1-版本历史\"><a class=\"markdownIt-Anchor\" href=\"#1-版本历史\"></a> 1. 版本历史</h2>\n<ul>\n<li>1996年 mysql.10发布</li>\n<li>1996年10月3.11.1发布</li>\n<li>2000年ISAM升级成MyISAM引擎，mysql开源</li>\n<li>2003年 Mysql4.0发布集成InnoDB存储引擎</li>\n<li>2005年 MySQL 5.0版本发布，提供了试图，存储过程等功能</li>\n<li>2010年MySQL5.5发布，InnoDB成为默认的存储引擎</li>\n<li>2016年发布8.0.0版本</li>\n</ul>\n<h2 id=\"2-流行分支\"><a class=\"markdownIt-Anchor\" href=\"#2-流行分支\"></a> 2. 流行分支</h2>\n<ul>\n<li>Maria DB</li>\n<li>Percona Server</li>\n</ul>\n<h2 id=\"3-sql-执行流程\"><a class=\"markdownIt-Anchor\" href=\"#3-sql-执行流程\"></a> 3. SQL 执行流程</h2>\n<h3 id=\"通信类型\"><a class=\"markdownIt-Anchor\" href=\"#通信类型\"></a> 通信类型</h3>\n<ul>\n<li>同步</li>\n<li>异步</li>\n</ul>\n<h3 id=\"连接方式\"><a class=\"markdownIt-Anchor\" href=\"#连接方式\"></a> 连接方式</h3>\n<ul>\n<li>长连接</li>\n<li>短连接</li>\n</ul>\n<h3 id=\"超时时间\"><a class=\"markdownIt-Anchor\" href=\"#超时时间\"></a> 超时时间</h3>\n<ul>\n<li>\n<p>非交互式超时时间，如JDBC程序，单位s</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">GLOBAL</span> VARIABLES <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;wait_timeout&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>交互式超时间，如数据库工具</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">GLOBAL</span> variables <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;interactive_timeout&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"查看连接\"><a class=\"markdownIt-Anchor\" href=\"#查看连接\"></a> 查看连接</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">GLOBAL</span> STATUS <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;Thread%&#x27;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">连接名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Threads_cached</td>\n<td style=\"text-align:center\">缓存中的线程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Threads_connected</td>\n<td style=\"text-align:center\">连接中线程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Threads_created</td>\n<td style=\"text-align:center\">创建过的线程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Threads_running</td>\n<td style=\"text-align:center\">正在执行的线程</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"查看所有的线程\"><a class=\"markdownIt-Anchor\" href=\"#查看所有的线程\"></a> 查看所有的线程</h4>\n<p>如果是root权限，可以看到所有用户发起的线程，否则只能看到自己的线程</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> processlist</span><br></pre></td></tr></table></figure>\n<p><img src=\"/mysql/image-20200727224117281.png\" alt=\"image-20200727224117281\"></p>\n<ul>\n<li>id ：一个表示，kill一个语句的时候可以使用</li>\n<li>user：显示当前用户，如果不是root，这个命令就只显示你权限范围内的sql语句</li>\n<li>host：显示这个语句是从哪个ip的端口上发出的，可以用来追踪出问题语句的用户</li>\n<li>db：显示这个进程目前连接的是哪个数据库</li>\n<li>commmand：显示当年连接的执行命令，一般分为休眠slee、查询query、连接connect</li>\n<li>time：此状态持续的时间，单位是秒</li>\n<li>state： 显示使用当年连接的sql语句状态，state只是语句执行中的某一个状态，如查询：需要经过copying to tmp table、sorting result、sending data等转台才可以完成</li>\n<li>info：显示这个sql语句，因为长度有限，所以长的sql语句就显示不全</li>\n</ul>\n<h4 id=\"查看最大连接数\"><a class=\"markdownIt-Anchor\" href=\"#查看最大连接数\"></a> 查看最大连接数</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;max_connections&#x27;</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span>一般默认是<span class=\"number\">151</span>，最大可以是<span class=\"number\">2</span>的<span class=\"number\">14</span>次方</span><br></pre></td></tr></table></figure>\n<h4 id=\"mysql变量级别\"><a class=\"markdownIt-Anchor\" href=\"#mysql变量级别\"></a> mysql变量级别</h4>\n<ul>\n<li>\n<p>global全局</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在mysql中修改全局变量global有两种方法：</span><br><span class=\"line\">1. 修改my.ini配置文件（永久有效）</span><br><span class=\"line\">2. 在不修改配置文件的基础上，使用关键字global设置全局变量</span><br><span class=\"line\">   set global autocommit = 1;将autocommit变量的值设置为ON，需要注意的是此方法对global全局变量的设计进对于新开启的会话有效，对已开启的会话无效，同理，如果修改回哈session变量，可以使用session关键字，如set session autocommit = 1；这个仅对本session的变量配置有效，对其他的session无效；（在MySQL服务重启之后，数据库的配置重新按照my.ini文件 初始化，global和session 的配置都会失效）</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>session当前会话</p>\n</li>\n</ul>\n<h3 id=\"通信协议\"><a class=\"markdownIt-Anchor\" href=\"#通信协议\"></a> 通信协议</h3>\n<ul>\n<li>Unix Socket</li>\n<li>TCP/IP</li>\n<li>Named Pipes命名管道</li>\n<li>Share Memory共享内存</li>\n</ul>\n<h3 id=\"通信方式\"><a class=\"markdownIt-Anchor\" href=\"#通信方式\"></a> 通信方式</h3>\n<ul>\n<li>单工</li>\n<li>半双工</li>\n<li>全双工</li>\n</ul>\n<p><img src=\"/mysql/image-20200727231112059.png\" alt=\"image-20200727231112059\"></p>\n<h3 id=\"mysql-缓存\"><a class=\"markdownIt-Anchor\" href=\"#mysql-缓存\"></a> MySQL 缓存</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> VARIABLES <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;query_cache%&#x27;</span></span><br><span class=\"line\">#默认关闭，是因为mysql要保证两次执行的<span class=\"keyword\">sql</span>完全一致，连空格，大小写都一致，而且当数据表中的任何一条数据发生变化，整个缓存会失效；</span><br></pre></td></tr></table></figure>\n<p>#2. 删除数据</p>\n<h2 id=\"1-数据删除方式\"><a class=\"markdownIt-Anchor\" href=\"#1-数据删除方式\"></a> 1. 数据删除方式</h2>\n<ul>\n<li>DELETE</li>\n<li>Truncate</li>\n<li>Drop</li>\n</ul>\n<h2 id=\"2-执行速度\"><a class=\"markdownIt-Anchor\" href=\"#2-执行速度\"></a> 2. 执行速度</h2>\n<p>drop &gt; truncate &gt; delete</p>\n<h3 id=\"21-delete\"><a class=\"markdownIt-Anchor\" href=\"#21-delete\"></a> 2.1 DELETE</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> table_name <span class=\"keyword\">WHERE</span> XXX</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>DELETE 数据数据库DML操作语言，只删除数据不删除表的结构，会走事务，执行时会触发trigger</p>\n</li>\n<li>\n<p>在InnoDB中，delete其实并不会真的把数据删除，mysqL实际上只是给删除的数据打个标记为删除，因此delete删除表中的数据，表文件在磁盘所占的控件不会变小，存储控件不会被释放，只是把删除的数据设置为不可见。虽然未释放磁盘控件，但是下次插入数据的时候，仍然可以重用这部分空间（重用-&gt;覆盖）</p>\n</li>\n<li>\n<p>delete执行时，会先把所删除数据缓存到rollback segement中，事务commit之后生效</p>\n</li>\n<li>\n<p><strong>delete from  table_name</strong> 删除表的全部数据对于MyISAM会释放磁盘控件，Innodb不会释放磁盘空间</p>\n</li>\n<li>\n<p>对于<strong>DELETE from table_name where xxx</strong>带条件的删除，不管是Innodb还是MyISAM都不会释放磁盘控件</p>\n</li>\n<li>\n<p>delete 操作以后使用<strong>optimize table  table_name</strong>会里级释放磁盘空间（不管是Innodb还是MyISAM）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查看表占用磁盘空间大小</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> concat(round(<span class=\"built_in\">sum</span>(DATA_LENGTH<span class=\"operator\">/</span><span class=\"number\">1024</span><span class=\"operator\">/</span><span class=\"number\">1024</span>),<span class=\"number\">2</span>),<span class=\"string\">&#x27;M&#x27;</span>) <span class=\"keyword\">as</span> table_size</span><br><span class=\"line\"><span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema<span class=\"operator\">=</span><span class=\"string\">&#x27;demo_db&#x27;</span> <span class=\"keyword\">AND</span> table_name<span class=\"operator\">=</span><span class=\"string\">&#x27;demo_table&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行空间优化语句，以及执行后的表size变化</span></span><br><span class=\"line\">optimize <span class=\"keyword\">table</span> demo_table</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>delete 操作时一行一行执行删除的，并且同时将该行的删除操作日志记录在redo和undo表空间中以便进行回滚（rollback）和重做操作</strong>，生成大量日志也会占用磁盘空间</p>\n</li>\n</ul>\n<h3 id=\"22-truncate\"><a class=\"markdownIt-Anchor\" href=\"#22-truncate\"></a> 2.2 Truncate</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--删除表数据， 不带where条件</span></span><br><span class=\"line\"><span class=\"comment\">--与不带where的delete ：只删除数据，而不删除表的结构\t</span></span><br><span class=\"line\"><span class=\"keyword\">Truncate</span> <span class=\"keyword\">table</span> table_name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><strong>Truncate数据数据库DDL定义语言，不走事务，原数据不放到rollback segement中，操作不触发trigger</strong>，执行后里级生效，无法找回；</p>\n</li>\n<li>\n<p><strong>truncate table table_name里级释放磁盘空间不管是Innodb 和MyISAM</strong>；truncate table其实有点类似余drop table然后create，只不过这个crate table的过程做了优化，比如表结构文件之前已经有了等，所以速度上应该是接近drop table的速度</p>\n</li>\n<li>\n<p>truncate 能快速清空一个表，并且重置auto_increment的值</p>\n<p>​\t但是对于不同的类型存储引擎需要注意的地方是：</p>\n<ul>\n<li><strong>对于MyISAM</strong>：truncate会重置auto_increment（自增序列）的值为1，而delete后表仍然保持auto_increment。</li>\n<li><strong>对于Innodb</strong>：truncate会重置auto_increment（自增序列）的值为1， 而delete后表仍然保持auto_increment。但是在做delete整个表之后重启mysql的话，而重启后的auto_increment会被置为1</li>\n</ul>\n<p>也就是说，Innodb的表本身是无法持久保存auto_increment。delete表之后auto_increment仍然保存在内存，但是重启后就丢失了，只能从1开始，实质上重启后的auto_increment会从SELETE 1+MAX(ai_col) FROM t开始</p>\n</li>\n<li>\n<p>小心使用 truncate，尤其没有备份的时候，如果误删除线上的表，记得及时联系中国民航，订票电话：400-806-9553</p>\n</li>\n</ul>\n<h3 id=\"23-drop\"><a class=\"markdownIt-Anchor\" href=\"#23-drop\"></a> 2.3 Drop</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除表结构以及表数据</span></span><br><span class=\"line\"><span class=\"keyword\">Drop</span> <span class=\"keyword\">table</span> table_name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><strong>drop：属于数据库DDL定义语言，同Truncate；</strong></p>\n<p><strong>执行后立即生效，无法找回！ 执行后立即生效，无法找回！ 执行后立即生效，无法找回！</strong></p>\n</li>\n<li>\n<p>**drop table table_name 立刻释放磁盘空间 ，不管是 InnoDB 和 MyISAM; **drop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index); 依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。</p>\n</li>\n<li>\n<p>小心使用 drop ，要删表跑路的兄弟，请在订票成功后在执行操作！订票电话：400-806-9553</p>\n</li>\n</ul>\n<h2 id=\"3-总结\"><a class=\"markdownIt-Anchor\" href=\"#3-总结\"></a> 3. 总结</h2>\n<p><strong>可以这么理解，一本书，delete是把目录撕了，truncate是把书的内容撕下来烧了，drop是把书烧了</strong></p>\n"},{"title":"mysql数据库锁","comments":1,"abbrlink":33045,"date":"2021-07-24T08:57:10.000Z","translate_title":"mysql_04","_content":"当数据库有事物的时候，可能会产生数据的不一致，这时就需要一些机制来保证访问的次序，这就是锁的机制；\n**锁的作用**：用于挂你对共享资源的并发访问，保证数据库的完整性和一致性。\n##1. 不同引擎的锁以及锁分类\n**Mysql数据库中，InnoDB支持表、行级锁，而MyISAM支持表级锁**\n<br>\nMysql大致可以归纳为以下3种锁：\n- 表级锁：开销小，加锁块，不会出现死锁，发生锁冲突的概率最高，并发度最低。\n- 行级锁：开销大，加锁慢，会出现死锁，发生锁冲突的概率最低，并发度最高。\n- 页面锁：开销和加锁的时间介于表级锁和行级锁之间，会出现死锁，锁粒度介于两者之间；并发度一般，一次锁定相邻一组记录\n\nMysql表级锁两种模式: **表共享锁（Table Read Lock）和 表独占写锁（Table Write Lock）**，表现如下：\n- 对一个表的读操作，不会阻塞其他用户对同一表请求，但会阻塞对同一表的写请求；\n- 对MyISAM的写操作，则会则色其他用户对同一表的读和写操作；\n- MyISAM表的读操作和写操作之间，以及写操作之间是串行的。\n当一个线程获得对一个表的写锁后，只有持有锁的线程可以对表进行更新操作，其他线程的读、写操作都会等待。\n  \n##2.加表级锁\nMyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要直接用LOCK TABLE命令给MyISAM表显式加锁。\n给MyISAM表显式加锁，一般是为了一定程度模拟事务操作，实现对某一时间点多个表的一致性读取。例如，有一个订单表orders，其中记录有订单的总金额total，同时还有一个订单明细表order_detail，其中记录有订单每一产品的金额小计subtotal，假设我们需要检查这两个表的金额合计是否相等，可能就需要执行如下两条SQL\n\n\n","source":"_posts/2021/07/mysql数据库锁.md","raw":"---\ntitle: mysql数据库锁\ntags: mysql\ncategories: mysql\ncomments: true\nabbrlink: 33045\ndate: 2021-07-24 16:57:10\ntranslate_title: mysql_04\n---\n当数据库有事物的时候，可能会产生数据的不一致，这时就需要一些机制来保证访问的次序，这就是锁的机制；\n**锁的作用**：用于挂你对共享资源的并发访问，保证数据库的完整性和一致性。\n##1. 不同引擎的锁以及锁分类\n**Mysql数据库中，InnoDB支持表、行级锁，而MyISAM支持表级锁**\n<br>\nMysql大致可以归纳为以下3种锁：\n- 表级锁：开销小，加锁块，不会出现死锁，发生锁冲突的概率最高，并发度最低。\n- 行级锁：开销大，加锁慢，会出现死锁，发生锁冲突的概率最低，并发度最高。\n- 页面锁：开销和加锁的时间介于表级锁和行级锁之间，会出现死锁，锁粒度介于两者之间；并发度一般，一次锁定相邻一组记录\n\nMysql表级锁两种模式: **表共享锁（Table Read Lock）和 表独占写锁（Table Write Lock）**，表现如下：\n- 对一个表的读操作，不会阻塞其他用户对同一表请求，但会阻塞对同一表的写请求；\n- 对MyISAM的写操作，则会则色其他用户对同一表的读和写操作；\n- MyISAM表的读操作和写操作之间，以及写操作之间是串行的。\n当一个线程获得对一个表的写锁后，只有持有锁的线程可以对表进行更新操作，其他线程的读、写操作都会等待。\n  \n##2.加表级锁\nMyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要直接用LOCK TABLE命令给MyISAM表显式加锁。\n给MyISAM表显式加锁，一般是为了一定程度模拟事务操作，实现对某一时间点多个表的一致性读取。例如，有一个订单表orders，其中记录有订单的总金额total，同时还有一个订单明细表order_detail，其中记录有订单每一产品的金额小计subtotal，假设我们需要检查这两个表的金额合计是否相等，可能就需要执行如下两条SQL\n\n\n","slug":"mysql数据库锁","published":1,"updated":"2022-04-06T09:51:44.964Z","layout":"post","photos":[],"link":"","_id":"cl235zcwf002iwjpj2hgydf80","content":"<p>当数据库有事物的时候，可能会产生数据的不一致，这时就需要一些机制来保证访问的次序，这就是锁的机制；<br>\n<strong>锁的作用</strong>：用于挂你对共享资源的并发访问，保证数据库的完整性和一致性。<br>\n##1. 不同引擎的锁以及锁分类<br>\n<strong>Mysql数据库中，InnoDB支持表、行级锁，而MyISAM支持表级锁</strong><br>\n<br><br>\nMysql大致可以归纳为以下3种锁：</p>\n<ul>\n<li>表级锁：开销小，加锁块，不会出现死锁，发生锁冲突的概率最高，并发度最低。</li>\n<li>行级锁：开销大，加锁慢，会出现死锁，发生锁冲突的概率最低，并发度最高。</li>\n<li>页面锁：开销和加锁的时间介于表级锁和行级锁之间，会出现死锁，锁粒度介于两者之间；并发度一般，一次锁定相邻一组记录</li>\n</ul>\n<p>Mysql表级锁两种模式: <strong>表共享锁（Table Read Lock）和 表独占写锁（Table Write Lock）</strong>，表现如下：</p>\n<ul>\n<li>对一个表的读操作，不会阻塞其他用户对同一表请求，但会阻塞对同一表的写请求；</li>\n<li>对MyISAM的写操作，则会则色其他用户对同一表的读和写操作；</li>\n<li>MyISAM表的读操作和写操作之间，以及写操作之间是串行的。<br>\n当一个线程获得对一个表的写锁后，只有持有锁的线程可以对表进行更新操作，其他线程的读、写操作都会等待。</li>\n</ul>\n<p>##2.加表级锁<br>\nMyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要直接用LOCK TABLE命令给MyISAM表显式加锁。<br>\n给MyISAM表显式加锁，一般是为了一定程度模拟事务操作，实现对某一时间点多个表的一致性读取。例如，有一个订单表orders，其中记录有订单的总金额total，同时还有一个订单明细表order_detail，其中记录有订单每一产品的金额小计subtotal，假设我们需要检查这两个表的金额合计是否相等，可能就需要执行如下两条SQL</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>当数据库有事物的时候，可能会产生数据的不一致，这时就需要一些机制来保证访问的次序，这就是锁的机制；<br>\n<strong>锁的作用</strong>：用于挂你对共享资源的并发访问，保证数据库的完整性和一致性。<br>\n##1. 不同引擎的锁以及锁分类<br>\n<strong>Mysql数据库中，InnoDB支持表、行级锁，而MyISAM支持表级锁</strong><br>\n<br><br>\nMysql大致可以归纳为以下3种锁：</p>\n<ul>\n<li>表级锁：开销小，加锁块，不会出现死锁，发生锁冲突的概率最高，并发度最低。</li>\n<li>行级锁：开销大，加锁慢，会出现死锁，发生锁冲突的概率最低，并发度最高。</li>\n<li>页面锁：开销和加锁的时间介于表级锁和行级锁之间，会出现死锁，锁粒度介于两者之间；并发度一般，一次锁定相邻一组记录</li>\n</ul>\n<p>Mysql表级锁两种模式: <strong>表共享锁（Table Read Lock）和 表独占写锁（Table Write Lock）</strong>，表现如下：</p>\n<ul>\n<li>对一个表的读操作，不会阻塞其他用户对同一表请求，但会阻塞对同一表的写请求；</li>\n<li>对MyISAM的写操作，则会则色其他用户对同一表的读和写操作；</li>\n<li>MyISAM表的读操作和写操作之间，以及写操作之间是串行的。<br>\n当一个线程获得对一个表的写锁后，只有持有锁的线程可以对表进行更新操作，其他线程的读、写操作都会等待。</li>\n</ul>\n<p>##2.加表级锁<br>\nMyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要直接用LOCK TABLE命令给MyISAM表显式加锁。<br>\n给MyISAM表显式加锁，一般是为了一定程度模拟事务操作，实现对某一时间点多个表的一致性读取。例如，有一个订单表orders，其中记录有订单的总金额total，同时还有一个订单明细表order_detail，其中记录有订单每一产品的金额小计subtotal，假设我们需要检查这两个表的金额合计是否相等，可能就需要执行如下两条SQL</p>\n"},{"title":"Java内存泄漏排查","comments":1,"translate_title":"java-memory-leak-troubleshooting","abbrlink":13887,"date":"2021-08-01T11:25:57.000Z","_content":"## 1.内存溢出\njava.lang.OutOfMemoryError：是指程序在申请内存是，没有足够的内存克难攻坚供其使用，出现OutOfMemoryError\n\n1. 产生原因\n    - JMM内存过小\n    - 程序不严谨，产生了过多的垃圾\n    \n2. 具体表现在以下集中情况\n    - 内存中加载的数据量过于庞大，如一次从数据库取出过多的数据\n    - 集合类中有对对象的引用，使用完后未清空，使得JVM不能回收\n    - 代码中存在死循环或循环过多产生过多重复的对象实体\n    - 使用第三方软件的bug\n    - 启动参数内存值设定过小\n    \n3. 常见错误提示\n    - tomcat:java.lang.OutOfMemoryError: PermGen space \n    - tomcat:java.lang.OutOfMemoryError: Java heap space\n    - weblogic:Root cause of ServletException java.lang.OutOfMemoryError\n    - resin:java.lang.OutOfMemoryError\n    - java:java.lang.OutOfMemoryError\n    \n4. 解决方法\n    - 增加JVM的内存大小\n      对于tomcat容器，找到tomcat在电脑中的安装目录，进入这个目录，然后进入bin目录中，在window环境下找到bin目录中的catalina.bat，在linux环境下找到catalina.sh。\n      编辑catalina.bat文件，找到JAVA_OPTS（具体来说是 set \"JAVA_OPTS=%JAVA_OPTS% %LOGGING_MANAGER%\"）这个选项的位置，这个参数是Java启动的时候，需要的启动参数。\n      也可以在操作系统的环境变量中对JAVA_OPTS进行设置，因为tomcat在启动的时候，也会读取操作系统中的环境变量的值，进行加载。\n      如果是修改了操作系统的环境变量，需要重启机器，再重启tomcat，如果修改的是tomcat配置文件，需要将配置文件保存，然后重启tomcat，设置就能生效了\n    - 优化程序，释放垃圾\n      主要思路就是避免程序体现上出现的情况。避免死循环，防止一次载入太多的数据，提高程序健壮型及时释放。因此，从根本上解决Java内存溢出的唯一方法就是修改程序，及时地释放没用的对象，释放内存空间  \n\n## 2. 内存泄漏\nMemory Leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，迟早会被占光。\n在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点：\n1）首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；\n2）其次，这些对象是无用的，即程序以后不会再使用这些对象。\n如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。\n关于内存泄露的处理页就是提高程序的健壮型，因为内存泄露是纯代码层面的问题\n\n## 3.内存溢出和内存泄漏的联系\n内存泄露会最终会导致内存溢出。\n**相同点**：都会导致应用程序运行出现问题，性能下降或挂起。\n**不同点**：\n    1) 内存泄露是导致内存溢出的原因之一，内存泄露积累起来将导致内存溢出。\n    2) 内存泄露可以通过完善代码来避免，内存溢出可以通过调整配置来减少发生频率，但无法彻底避免。\n\n## 4.排查案例\nJava的内存泄露多半是因为对象存在无效的引用，对象得不到释放，如果发现Java应用程序占用的内存出现了泄露的迹象，那么我们一般采用下面的步骤分析：\n1. 用工具生成java应用程序的heap dump（如jmap）\n2. 使用Java heap分析工具（如MAT），找出内存占用超出预期的嫌疑对象\n3. 根据情况，分析嫌疑对象和其他对象的引用关系。\n4. 分析程序的源代码，找出嫌疑对象数量过多的原因。\n\n实际操作如下：\n1.登录linux服务器，获取tomcat的pid\n```shell\nps -ef|grep java\n```\n2.利用jmap初步分析内存映射\n```shell\njmap -histo:live pid | head -7\n```\n![jmap](./outOfMemoryError/01.png)\n第2行是我们业务系统的对象，通过这个对象的引用可以初步分析出到底是哪里出现了引用未被垃圾回收收集，通知开发人员优化相关代码\n\n3.如果上面一步还无法定位到关键信息，那么需要拿到heap dump，生成离线文件，做进一步分析\n```shell\njmap -dump:live,format=b,file=heap.hprof 3514 \n```\n![jmap](./outOfMemoryError/02.png)\n4. 拿到heap dump文件，利用eclipse插件MAT来分析heap profile。 \n   - 1.安装MAT插件 \n   - 2.在eclipse里切换到Memory Analysis视图\n   - 3.用MAT打开heap profile文件。\n![jmap](./outOfMemoryError/03.png)\n直接看到下面Action窗口，有4种Action来分析heap profile，介绍其中最常用的2种:\n- **Histogram**：这个使用的最多，跟上面的jmap -histo 命令类似，只是在MAT里面可以用GUI来展示应用系统各个类产生的实例。\n  ![jmap](./outOfMemoryError/04.png)\n  Shllow Heap排序后发现 Cms_Organization 这个类占用的内存比较多（没有得到及时GC），查看引用\n  ![jmap](./outOfMemoryError/05.png)\n  分析引用栈，找到无效引用，打开源码\n  ![jmap](./outOfMemoryError/06.png)\n  **查看源码！！！**","source":"_posts/2021/07/outOfMemoryError.md","raw":"---\ntitle: Java内存泄漏排查\ntags: 内存溢出\ncategories: java\ncomments: true\ntranslate_title: java-memory-leak-troubleshooting\nabbrlink: 13887\ndate: 2021-08-01 19:25:57\n---\n## 1.内存溢出\njava.lang.OutOfMemoryError：是指程序在申请内存是，没有足够的内存克难攻坚供其使用，出现OutOfMemoryError\n\n1. 产生原因\n    - JMM内存过小\n    - 程序不严谨，产生了过多的垃圾\n    \n2. 具体表现在以下集中情况\n    - 内存中加载的数据量过于庞大，如一次从数据库取出过多的数据\n    - 集合类中有对对象的引用，使用完后未清空，使得JVM不能回收\n    - 代码中存在死循环或循环过多产生过多重复的对象实体\n    - 使用第三方软件的bug\n    - 启动参数内存值设定过小\n    \n3. 常见错误提示\n    - tomcat:java.lang.OutOfMemoryError: PermGen space \n    - tomcat:java.lang.OutOfMemoryError: Java heap space\n    - weblogic:Root cause of ServletException java.lang.OutOfMemoryError\n    - resin:java.lang.OutOfMemoryError\n    - java:java.lang.OutOfMemoryError\n    \n4. 解决方法\n    - 增加JVM的内存大小\n      对于tomcat容器，找到tomcat在电脑中的安装目录，进入这个目录，然后进入bin目录中，在window环境下找到bin目录中的catalina.bat，在linux环境下找到catalina.sh。\n      编辑catalina.bat文件，找到JAVA_OPTS（具体来说是 set \"JAVA_OPTS=%JAVA_OPTS% %LOGGING_MANAGER%\"）这个选项的位置，这个参数是Java启动的时候，需要的启动参数。\n      也可以在操作系统的环境变量中对JAVA_OPTS进行设置，因为tomcat在启动的时候，也会读取操作系统中的环境变量的值，进行加载。\n      如果是修改了操作系统的环境变量，需要重启机器，再重启tomcat，如果修改的是tomcat配置文件，需要将配置文件保存，然后重启tomcat，设置就能生效了\n    - 优化程序，释放垃圾\n      主要思路就是避免程序体现上出现的情况。避免死循环，防止一次载入太多的数据，提高程序健壮型及时释放。因此，从根本上解决Java内存溢出的唯一方法就是修改程序，及时地释放没用的对象，释放内存空间  \n\n## 2. 内存泄漏\nMemory Leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，迟早会被占光。\n在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点：\n1）首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；\n2）其次，这些对象是无用的，即程序以后不会再使用这些对象。\n如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。\n关于内存泄露的处理页就是提高程序的健壮型，因为内存泄露是纯代码层面的问题\n\n## 3.内存溢出和内存泄漏的联系\n内存泄露会最终会导致内存溢出。\n**相同点**：都会导致应用程序运行出现问题，性能下降或挂起。\n**不同点**：\n    1) 内存泄露是导致内存溢出的原因之一，内存泄露积累起来将导致内存溢出。\n    2) 内存泄露可以通过完善代码来避免，内存溢出可以通过调整配置来减少发生频率，但无法彻底避免。\n\n## 4.排查案例\nJava的内存泄露多半是因为对象存在无效的引用，对象得不到释放，如果发现Java应用程序占用的内存出现了泄露的迹象，那么我们一般采用下面的步骤分析：\n1. 用工具生成java应用程序的heap dump（如jmap）\n2. 使用Java heap分析工具（如MAT），找出内存占用超出预期的嫌疑对象\n3. 根据情况，分析嫌疑对象和其他对象的引用关系。\n4. 分析程序的源代码，找出嫌疑对象数量过多的原因。\n\n实际操作如下：\n1.登录linux服务器，获取tomcat的pid\n```shell\nps -ef|grep java\n```\n2.利用jmap初步分析内存映射\n```shell\njmap -histo:live pid | head -7\n```\n![jmap](./outOfMemoryError/01.png)\n第2行是我们业务系统的对象，通过这个对象的引用可以初步分析出到底是哪里出现了引用未被垃圾回收收集，通知开发人员优化相关代码\n\n3.如果上面一步还无法定位到关键信息，那么需要拿到heap dump，生成离线文件，做进一步分析\n```shell\njmap -dump:live,format=b,file=heap.hprof 3514 \n```\n![jmap](./outOfMemoryError/02.png)\n4. 拿到heap dump文件，利用eclipse插件MAT来分析heap profile。 \n   - 1.安装MAT插件 \n   - 2.在eclipse里切换到Memory Analysis视图\n   - 3.用MAT打开heap profile文件。\n![jmap](./outOfMemoryError/03.png)\n直接看到下面Action窗口，有4种Action来分析heap profile，介绍其中最常用的2种:\n- **Histogram**：这个使用的最多，跟上面的jmap -histo 命令类似，只是在MAT里面可以用GUI来展示应用系统各个类产生的实例。\n  ![jmap](./outOfMemoryError/04.png)\n  Shllow Heap排序后发现 Cms_Organization 这个类占用的内存比较多（没有得到及时GC），查看引用\n  ![jmap](./outOfMemoryError/05.png)\n  分析引用栈，找到无效引用，打开源码\n  ![jmap](./outOfMemoryError/06.png)\n  **查看源码！！！**","slug":"outOfMemoryError","published":1,"updated":"2022-03-27T14:06:03.447Z","layout":"post","photos":[],"link":"","_id":"cl235zcwf002lwjpjeeck5l6o","content":"<h2 id=\"1内存溢出\"><a class=\"markdownIt-Anchor\" href=\"#1内存溢出\"></a> 1.内存溢出</h2>\n<p>java.lang.OutOfMemoryError：是指程序在申请内存是，没有足够的内存克难攻坚供其使用，出现OutOfMemoryError</p>\n<ol>\n<li>\n<p>产生原因</p>\n<ul>\n<li>JMM内存过小</li>\n<li>程序不严谨，产生了过多的垃圾</li>\n</ul>\n</li>\n<li>\n<p>具体表现在以下集中情况</p>\n<ul>\n<li>内存中加载的数据量过于庞大，如一次从数据库取出过多的数据</li>\n<li>集合类中有对对象的引用，使用完后未清空，使得JVM不能回收</li>\n<li>代码中存在死循环或循环过多产生过多重复的对象实体</li>\n<li>使用第三方软件的bug</li>\n<li>启动参数内存值设定过小</li>\n</ul>\n</li>\n<li>\n<p>常见错误提示</p>\n<ul>\n<li>tomcat:java.lang.OutOfMemoryError: PermGen space</li>\n<li>tomcat:java.lang.OutOfMemoryError: Java heap space</li>\n<li>weblogic:Root cause of ServletException java.lang.OutOfMemoryError</li>\n<li>resin:java.lang.OutOfMemoryError</li>\n<li>java:java.lang.OutOfMemoryError</li>\n</ul>\n</li>\n<li>\n<p>解决方法</p>\n<ul>\n<li>增加JVM的内存大小<br>\n对于tomcat容器，找到tomcat在电脑中的安装目录，进入这个目录，然后进入bin目录中，在window环境下找到bin目录中的catalina.bat，<a href=\"http://xn--linuxcatalina-t40uj69bkxsyifbo6cbj6d.sh\">在linux环境下找到catalina.sh</a>。<br>\n编辑catalina.bat文件，找到JAVA_OPTS（具体来说是 set “JAVA_OPTS=%JAVA_OPTS% %LOGGING_MANAGER%”）这个选项的位置，这个参数是Java启动的时候，需要的启动参数。<br>\n也可以在操作系统的环境变量中对JAVA_OPTS进行设置，因为tomcat在启动的时候，也会读取操作系统中的环境变量的值，进行加载。<br>\n如果是修改了操作系统的环境变量，需要重启机器，再重启tomcat，如果修改的是tomcat配置文件，需要将配置文件保存，然后重启tomcat，设置就能生效了</li>\n<li>优化程序，释放垃圾<br>\n主要思路就是避免程序体现上出现的情况。避免死循环，防止一次载入太多的数据，提高程序健壮型及时释放。因此，从根本上解决Java内存溢出的唯一方法就是修改程序，及时地释放没用的对象，释放内存空间</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-内存泄漏\"><a class=\"markdownIt-Anchor\" href=\"#2-内存泄漏\"></a> 2. 内存泄漏</h2>\n<p>Memory Leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，迟早会被占光。<br>\n在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点：<br>\n1）首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；<br>\n2）其次，这些对象是无用的，即程序以后不会再使用这些对象。<br>\n如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。<br>\n关于内存泄露的处理页就是提高程序的健壮型，因为内存泄露是纯代码层面的问题</p>\n<h2 id=\"3内存溢出和内存泄漏的联系\"><a class=\"markdownIt-Anchor\" href=\"#3内存溢出和内存泄漏的联系\"></a> 3.内存溢出和内存泄漏的联系</h2>\n<p>内存泄露会最终会导致内存溢出。<br>\n<strong>相同点</strong>：都会导致应用程序运行出现问题，性能下降或挂起。<br>\n<strong>不同点</strong>：<br>\n1) 内存泄露是导致内存溢出的原因之一，内存泄露积累起来将导致内存溢出。<br>\n2) 内存泄露可以通过完善代码来避免，内存溢出可以通过调整配置来减少发生频率，但无法彻底避免。</p>\n<h2 id=\"4排查案例\"><a class=\"markdownIt-Anchor\" href=\"#4排查案例\"></a> 4.排查案例</h2>\n<p>Java的内存泄露多半是因为对象存在无效的引用，对象得不到释放，如果发现Java应用程序占用的内存出现了泄露的迹象，那么我们一般采用下面的步骤分析：</p>\n<ol>\n<li>用工具生成java应用程序的heap dump（如jmap）</li>\n<li>使用Java heap分析工具（如MAT），找出内存占用超出预期的嫌疑对象</li>\n<li>根据情况，分析嫌疑对象和其他对象的引用关系。</li>\n<li>分析程序的源代码，找出嫌疑对象数量过多的原因。</li>\n</ol>\n<p>实际操作如下：<br>\n1.登录linux服务器，获取tomcat的pid</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef|grep java</span><br></pre></td></tr></table></figure>\n<p>2.利用jmap初步分析内存映射</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap -histo:live pid | head -7</span><br></pre></td></tr></table></figure>\n<p><img src=\"/outOfMemoryError/01.png\" alt=\"jmap\"><br>\n第2行是我们业务系统的对象，通过这个对象的引用可以初步分析出到底是哪里出现了引用未被垃圾回收收集，通知开发人员优化相关代码</p>\n<p>3.如果上面一步还无法定位到关键信息，那么需要拿到heap dump，生成离线文件，做进一步分析</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap -dump:live,format=b,file=heap.hprof 3514 </span><br></pre></td></tr></table></figure>\n<p><img src=\"/outOfMemoryError/02.png\" alt=\"jmap\"><br>\n4. 拿到heap dump文件，利用eclipse插件MAT来分析heap profile。</p>\n<ul>\n<li>1.安装MAT插件</li>\n<li>2.在eclipse里切换到Memory Analysis视图</li>\n<li>3.用MAT打开heap profile文件。<br>\n<img src=\"/outOfMemoryError/03.png\" alt=\"jmap\"><br>\n直接看到下面Action窗口，有4种Action来分析heap profile，介绍其中最常用的2种:</li>\n<li><strong>Histogram</strong>：这个使用的最多，跟上面的jmap -histo 命令类似，只是在MAT里面可以用GUI来展示应用系统各个类产生的实例。<br>\n<img src=\"/outOfMemoryError/04.png\" alt=\"jmap\"><br>\nShllow Heap排序后发现 Cms_Organization 这个类占用的内存比较多（没有得到及时GC），查看引用<br>\n<img src=\"/outOfMemoryError/05.png\" alt=\"jmap\"><br>\n分析引用栈，找到无效引用，打开源码<br>\n<img src=\"/outOfMemoryError/06.png\" alt=\"jmap\"><br>\n<strong>查看源码！！！</strong></li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1内存溢出\"><a class=\"markdownIt-Anchor\" href=\"#1内存溢出\"></a> 1.内存溢出</h2>\n<p>java.lang.OutOfMemoryError：是指程序在申请内存是，没有足够的内存克难攻坚供其使用，出现OutOfMemoryError</p>\n<ol>\n<li>\n<p>产生原因</p>\n<ul>\n<li>JMM内存过小</li>\n<li>程序不严谨，产生了过多的垃圾</li>\n</ul>\n</li>\n<li>\n<p>具体表现在以下集中情况</p>\n<ul>\n<li>内存中加载的数据量过于庞大，如一次从数据库取出过多的数据</li>\n<li>集合类中有对对象的引用，使用完后未清空，使得JVM不能回收</li>\n<li>代码中存在死循环或循环过多产生过多重复的对象实体</li>\n<li>使用第三方软件的bug</li>\n<li>启动参数内存值设定过小</li>\n</ul>\n</li>\n<li>\n<p>常见错误提示</p>\n<ul>\n<li>tomcat:java.lang.OutOfMemoryError: PermGen space</li>\n<li>tomcat:java.lang.OutOfMemoryError: Java heap space</li>\n<li>weblogic:Root cause of ServletException java.lang.OutOfMemoryError</li>\n<li>resin:java.lang.OutOfMemoryError</li>\n<li>java:java.lang.OutOfMemoryError</li>\n</ul>\n</li>\n<li>\n<p>解决方法</p>\n<ul>\n<li>增加JVM的内存大小<br>\n对于tomcat容器，找到tomcat在电脑中的安装目录，进入这个目录，然后进入bin目录中，在window环境下找到bin目录中的catalina.bat，<a href=\"http://xn--linuxcatalina-t40uj69bkxsyifbo6cbj6d.sh\">在linux环境下找到catalina.sh</a>。<br>\n编辑catalina.bat文件，找到JAVA_OPTS（具体来说是 set “JAVA_OPTS=%JAVA_OPTS% %LOGGING_MANAGER%”）这个选项的位置，这个参数是Java启动的时候，需要的启动参数。<br>\n也可以在操作系统的环境变量中对JAVA_OPTS进行设置，因为tomcat在启动的时候，也会读取操作系统中的环境变量的值，进行加载。<br>\n如果是修改了操作系统的环境变量，需要重启机器，再重启tomcat，如果修改的是tomcat配置文件，需要将配置文件保存，然后重启tomcat，设置就能生效了</li>\n<li>优化程序，释放垃圾<br>\n主要思路就是避免程序体现上出现的情况。避免死循环，防止一次载入太多的数据，提高程序健壮型及时释放。因此，从根本上解决Java内存溢出的唯一方法就是修改程序，及时地释放没用的对象，释放内存空间</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-内存泄漏\"><a class=\"markdownIt-Anchor\" href=\"#2-内存泄漏\"></a> 2. 内存泄漏</h2>\n<p>Memory Leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，迟早会被占光。<br>\n在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点：<br>\n1）首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；<br>\n2）其次，这些对象是无用的，即程序以后不会再使用这些对象。<br>\n如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。<br>\n关于内存泄露的处理页就是提高程序的健壮型，因为内存泄露是纯代码层面的问题</p>\n<h2 id=\"3内存溢出和内存泄漏的联系\"><a class=\"markdownIt-Anchor\" href=\"#3内存溢出和内存泄漏的联系\"></a> 3.内存溢出和内存泄漏的联系</h2>\n<p>内存泄露会最终会导致内存溢出。<br>\n<strong>相同点</strong>：都会导致应用程序运行出现问题，性能下降或挂起。<br>\n<strong>不同点</strong>：<br>\n1) 内存泄露是导致内存溢出的原因之一，内存泄露积累起来将导致内存溢出。<br>\n2) 内存泄露可以通过完善代码来避免，内存溢出可以通过调整配置来减少发生频率，但无法彻底避免。</p>\n<h2 id=\"4排查案例\"><a class=\"markdownIt-Anchor\" href=\"#4排查案例\"></a> 4.排查案例</h2>\n<p>Java的内存泄露多半是因为对象存在无效的引用，对象得不到释放，如果发现Java应用程序占用的内存出现了泄露的迹象，那么我们一般采用下面的步骤分析：</p>\n<ol>\n<li>用工具生成java应用程序的heap dump（如jmap）</li>\n<li>使用Java heap分析工具（如MAT），找出内存占用超出预期的嫌疑对象</li>\n<li>根据情况，分析嫌疑对象和其他对象的引用关系。</li>\n<li>分析程序的源代码，找出嫌疑对象数量过多的原因。</li>\n</ol>\n<p>实际操作如下：<br>\n1.登录linux服务器，获取tomcat的pid</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef|grep java</span><br></pre></td></tr></table></figure>\n<p>2.利用jmap初步分析内存映射</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap -histo:live pid | head -7</span><br></pre></td></tr></table></figure>\n<p><img src=\"/outOfMemoryError/01.png\" alt=\"jmap\"><br>\n第2行是我们业务系统的对象，通过这个对象的引用可以初步分析出到底是哪里出现了引用未被垃圾回收收集，通知开发人员优化相关代码</p>\n<p>3.如果上面一步还无法定位到关键信息，那么需要拿到heap dump，生成离线文件，做进一步分析</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap -dump:live,format=b,file=heap.hprof 3514 </span><br></pre></td></tr></table></figure>\n<p><img src=\"/outOfMemoryError/02.png\" alt=\"jmap\"><br>\n4. 拿到heap dump文件，利用eclipse插件MAT来分析heap profile。</p>\n<ul>\n<li>1.安装MAT插件</li>\n<li>2.在eclipse里切换到Memory Analysis视图</li>\n<li>3.用MAT打开heap profile文件。<br>\n<img src=\"/outOfMemoryError/03.png\" alt=\"jmap\"><br>\n直接看到下面Action窗口，有4种Action来分析heap profile，介绍其中最常用的2种:</li>\n<li><strong>Histogram</strong>：这个使用的最多，跟上面的jmap -histo 命令类似，只是在MAT里面可以用GUI来展示应用系统各个类产生的实例。<br>\n<img src=\"/outOfMemoryError/04.png\" alt=\"jmap\"><br>\nShllow Heap排序后发现 Cms_Organization 这个类占用的内存比较多（没有得到及时GC），查看引用<br>\n<img src=\"/outOfMemoryError/05.png\" alt=\"jmap\"><br>\n分析引用栈，找到无效引用，打开源码<br>\n<img src=\"/outOfMemoryError/06.png\" alt=\"jmap\"><br>\n<strong>查看源码！！！</strong></li>\n</ul>\n"},{"title":"redis常见使用场景","comments":1,"abbrlink":58805,"date":"2021-08-14T09:51:30.000Z","translate_title":"redis-usage-scenario","_content":"##  1. 缓存\nString类型\n例如：热点数据缓存、对象缓存、全页缓存可以提升热点数据的访问效率\n\n##  2. 数据共享分布式\nString类型，因为redis是分布式的独立服务，可以在多个应用服务之间共享，例如分布式session\n```xml\n<dependency> \n    <groupId>org.springframework.session</groupId> \n    <artifactId>spring-session-data-redis</artifactId> \n</dependency>\n```\n\n## 3. 分布式锁\nString类型 setnx方法，只有不存在时才能添加成功返回true\n```java\npublic static boolean getLock(String key) {\n    Long flag = jedis.setnx(key, \"1\");\n    if (flag == 1) {\n        jedis.expire(key, 10);\n    }\n    return flag == 1;\n}\n\npublic static void releaseLock(String key) {\n    jedis.del(key);\n}\n```\n\n## 4. 全局ID\nint 类型， incrby, 利用原子性\n```shell\nincrby userid 1000\n```\n分库分表的场景，一次性拿一段。\n\n## 5. 计数器\nint 类型，incr方法\n例如：文章的阅读量、微博点赞数；允许一定的延迟，先写入redis在定时同步到数据库\n1. 第一种方法\n```java\n@Service\npublic class TestService {\n    \n    @Resource\n    RedisTemplate<String,Object> redisTemplate;\n    \n    @Resource(name=\"redisTemplate\")\n    private ValueOperations<String,Object> ops;\n    \n    public int testRedis() {\n        try {\n            //此方法会先检查key是否存在，存在+1，不存在先初始化，再+1\n            ops.increment(\"success\", 1);\n            \n            //return (int) ops.get(\"success\"); //使用这个会出现错误，报错信息 Caused by: org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is java.io.EOFException。\n            return Integer.valueOf(redisTemplate.boundValueOps(\"success\").get(0, -1));\n        } catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        }\n        \n        return 0 ;\n    }\n    \n}\n```\n\n2. 第二种方法\n```java\n@Service\npublic class TestService {\n    \n    @Resource\n    RedisTemplate<String,Object> redisTemplate;\n    \n    @Resource(name=\"redisTemplate\")\n    private ValueOperations<String,Object> ops;\n    \n    public int testRedis() {\n        try {\n            //此方法会先检查key是否存在，存在+1，不存在先初始化，再+1\n            ops.increment(\"success\", 1);\n            \n            //return (int) ops.get(\"success\");\n            //return Integer.valueOf(redisTemplate.boundValueOps(\"success\").get(0, -1));\n            return (int) getKey(\"success\");\n        } catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        }\n        \n        return 0 ;\n    }\n    \n    public long getKey(final String key) {\n        \n        return redisTemplate.execute(new RedisCallback<Long>() {\n            @Override\n            public Long doInRedis(RedisConnection connection) throws DataAccessException {\n                \n                RedisSerializer<String> redisSerializer = redisTemplate.getStringSerializer();\n                \n                byte[] rowkey = redisSerializer.serialize(key);\n                byte[] rowval = connection.get(rowkey);\n                \n                try {\n                    String val = redisSerializer.deserialize(rowval);\n                    return Long.parseLong(val);\n                } catch (Exception e) {\n                    return 0L;\n                }\n            }\n        });\n    }\n    \n}\n```\n设置每天零点过期，重新计数\n```java\n//当天时间\nDate date = new Date();\n//当天零点\ndate = DateUtils.truncate(date, Calendar.DAY_OF_MONTH);\n//第二天零点\ndate = DateUtils.addDays(date, +1);\nredisTemplate.expireAt(\"success\", date);\n```\n## 6. 限流\nint类型，incr方法\n以访问者的IP和其他信息作为key,访问一次增加一次次数，超过次数 则返回false\n\n## 7. 位统计\nString类型的bitcount\n字符是以8位二进制存储的\n```shell\nset k1 a\nsetbit k1 6 1\nsetbit k1 7 0\nget k1 \n/* 6 7 代表的a的二进制位的修改\n\na 对应的ASCII码是97，转换为二进制数据是01100001\nb 对应的ASCII码是98，转换为二进制数据是01100010\n\n因为bit非常节省空间（1 MB=8388608 bit），可以用来做大数据量的统计。\n*/\n```\n例如：在线用户统计，留存用户统计\n```shell\nsetbit onlineusers 01 \nsetbit onlineusers 11 \nsetbit onlineusers 20\n```\n支持按位与、按位或等等操作\n```shell\nBITOPANDdestkeykey[key...] ，对一个或多个 key 求逻辑并，并将结果保存到 destkey 。       \nBITOPORdestkeykey[key...] ，对一个或多个 key 求逻辑或，并将结果保存到 destkey 。 \nBITOPXORdestkeykey[key...] ，对一个或多个 key 求逻辑异或，并将结果保存到 destkey 。 \nBITOPNOTdestkeykey ，对给定 key 求逻辑非，并将结果保存到 destkey 。\n```\n计算出7天都在线的用户\n```shell\nBITOP \"AND\" \"7_days_both_online_users\" \"day_1_online_users\" \"day_2_online_users\" ...  \"day_7_online_users\"\n```\n\n##  8. 购物车\nString 或hash。所有String可以做的hash都可以\nhash类型是一个String类型的field和value的映射表，每个hash都可以存储2^32 -1键值对\n**使用hash做购物车：以用户id为key, 商品id为field，商品数量为value。**\n![](./redis-usage-scenario/01.png)\n## 9. 用户消息时间线timeline\nlist，双向链表，直接作为timeline就好了。插入有序\n\n## 10. 消息队列\nList提供了两个阻塞的弹出操作：blpop/brpop，可以设置超时时间\n\n- blpop：blpop key1 timeout 移除并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\n- brpop：brpop key1 timeout 移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\n上面的操作。其实就是java的阻塞队列。学习的东西越多。学习成本越低\n\n- 队列：先进先除：rpush blpop，左头右尾，右边进入队列，左边出队列\n- 栈：先进后出：rpush brpop\n\n## 11. 抽奖\n自带一个随机获得值\n```shell\nspop myset\n```\n\n## 12. 点赞、签到、打卡\n![点赞、签到、打卡](./redis-usage-scenario/02.png)\n假如上面的微博ID是t1001，用户ID是u3001\n\n用 like:t1001 来维护 t1001 这条微博的所有点赞用户\n\n- 点赞了这条微博：sadd like:t1001 u3001\n- 取消点赞：srem like:t1001 u3001\n- 是否点赞：sismember like:t1001 u3001\n- 点赞的所有用户：smembers like:t1001\n- 点赞数：scard like:t1001\n\n## 13. 商品标签\n![商品标签](./redis-usage-scenario/03.png)\n用 tags:i5001 来维护商品所有的标签。\n- sadd tags:i5001 画面清晰细腻\n- sadd tags:i5001 真彩清晰显示屏\n- sadd tags:i5001 流程至极\n\n## 14.商品筛选\n```shell\n// 获取差集\nsdiff set1 set2\n// 获取交集（intersection ）\nsinter set1 set2\n// 获取并集\nsunion set1 set2\n```\n![商品筛选](./redis-usage-scenario/04.png)\n```shell\nsadd brand:apple iPhone11\n\nsadd brand:ios iPhone11\n\nsad screensize:6.0-6.24 iPhone11\n\nsad screentype:lcd iPhone 11\n```\n筛选商品，苹果的、ios的、屏幕在6.0-6.24之间的，屏幕材质是LCD屏幕\n```shell\nsinter brand:apple brand:ios screensize:6.0-6.24 screentype:lcd\n```\n## 15. 用户关注、推荐模型\n```shell\n## follow 关注 fans 粉丝\nsadd 1:follow 2\nsadd 2:fans 1\nsadd 1:fans 2\nsadd 2:follow 1\n```\n我关注的人也关注了他(取交集)：\n```shell\nsinter 1:follow 2:fans\n```\n可能认识的人：\n```shell\n## 用户1可能认识的人(差集)：\nsdiff 2:follow 1:follow\n\n## 用户2可能认识的人：\nsdiff 1:follow 2:follow\n```\n\n## 16. 排行榜\nid 为6001 的新闻点击数加1：zincrby hotNews:20190926 1 n6001\n获取今天点击最多的15条：zrevrange hotNews:20190926 0 15 withscores\n![排行榜](./redis-usage-scenario/05.png)\n\n---\n\n![](./redis-usage-scenario/06.png)\n\n\n\n## redis不适用的场景\nRedis是一种缓存技术，主要用来提高应用的性能，更多的应用场景是对数据库读数据进行缓存，减轻数据库的IO的访问压力，以下场景不太适合使用Redis:\n- 数据规模大小角度\n\n    Redis是将数据放在内存进行缓存的，内存相对于磁盘来锁价格是比较贵的。**如果成本是需要考虑的重要因素，那么大规模的数据就不太适合**；\n  \n- 数据冷热程度角度\n\n    很多业务数据可以根据数据读的频繁程度分为热数据和冷数据；**频繁使用的热数据一般适合用redis，冷数据一般不太适合用redis**,如果大量的冷数据进行了缓存，那是对内存资源的浪费，\n  所以在应用场景上区分冷热数据，将热数据放在内存中，进而提高性能。","source":"_posts/2021/07/redis-usage-scenario.md","raw":"---\ntitle: redis常见使用场景\ntags: redis\ncategories: 中间件\ncomments: true\nabbrlink: 58805\ndate: 2021-08-14 17:51:30\ntranslate_title: redis-usage-scenario\n---\n##  1. 缓存\nString类型\n例如：热点数据缓存、对象缓存、全页缓存可以提升热点数据的访问效率\n\n##  2. 数据共享分布式\nString类型，因为redis是分布式的独立服务，可以在多个应用服务之间共享，例如分布式session\n```xml\n<dependency> \n    <groupId>org.springframework.session</groupId> \n    <artifactId>spring-session-data-redis</artifactId> \n</dependency>\n```\n\n## 3. 分布式锁\nString类型 setnx方法，只有不存在时才能添加成功返回true\n```java\npublic static boolean getLock(String key) {\n    Long flag = jedis.setnx(key, \"1\");\n    if (flag == 1) {\n        jedis.expire(key, 10);\n    }\n    return flag == 1;\n}\n\npublic static void releaseLock(String key) {\n    jedis.del(key);\n}\n```\n\n## 4. 全局ID\nint 类型， incrby, 利用原子性\n```shell\nincrby userid 1000\n```\n分库分表的场景，一次性拿一段。\n\n## 5. 计数器\nint 类型，incr方法\n例如：文章的阅读量、微博点赞数；允许一定的延迟，先写入redis在定时同步到数据库\n1. 第一种方法\n```java\n@Service\npublic class TestService {\n    \n    @Resource\n    RedisTemplate<String,Object> redisTemplate;\n    \n    @Resource(name=\"redisTemplate\")\n    private ValueOperations<String,Object> ops;\n    \n    public int testRedis() {\n        try {\n            //此方法会先检查key是否存在，存在+1，不存在先初始化，再+1\n            ops.increment(\"success\", 1);\n            \n            //return (int) ops.get(\"success\"); //使用这个会出现错误，报错信息 Caused by: org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is java.io.EOFException。\n            return Integer.valueOf(redisTemplate.boundValueOps(\"success\").get(0, -1));\n        } catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        }\n        \n        return 0 ;\n    }\n    \n}\n```\n\n2. 第二种方法\n```java\n@Service\npublic class TestService {\n    \n    @Resource\n    RedisTemplate<String,Object> redisTemplate;\n    \n    @Resource(name=\"redisTemplate\")\n    private ValueOperations<String,Object> ops;\n    \n    public int testRedis() {\n        try {\n            //此方法会先检查key是否存在，存在+1，不存在先初始化，再+1\n            ops.increment(\"success\", 1);\n            \n            //return (int) ops.get(\"success\");\n            //return Integer.valueOf(redisTemplate.boundValueOps(\"success\").get(0, -1));\n            return (int) getKey(\"success\");\n        } catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        }\n        \n        return 0 ;\n    }\n    \n    public long getKey(final String key) {\n        \n        return redisTemplate.execute(new RedisCallback<Long>() {\n            @Override\n            public Long doInRedis(RedisConnection connection) throws DataAccessException {\n                \n                RedisSerializer<String> redisSerializer = redisTemplate.getStringSerializer();\n                \n                byte[] rowkey = redisSerializer.serialize(key);\n                byte[] rowval = connection.get(rowkey);\n                \n                try {\n                    String val = redisSerializer.deserialize(rowval);\n                    return Long.parseLong(val);\n                } catch (Exception e) {\n                    return 0L;\n                }\n            }\n        });\n    }\n    \n}\n```\n设置每天零点过期，重新计数\n```java\n//当天时间\nDate date = new Date();\n//当天零点\ndate = DateUtils.truncate(date, Calendar.DAY_OF_MONTH);\n//第二天零点\ndate = DateUtils.addDays(date, +1);\nredisTemplate.expireAt(\"success\", date);\n```\n## 6. 限流\nint类型，incr方法\n以访问者的IP和其他信息作为key,访问一次增加一次次数，超过次数 则返回false\n\n## 7. 位统计\nString类型的bitcount\n字符是以8位二进制存储的\n```shell\nset k1 a\nsetbit k1 6 1\nsetbit k1 7 0\nget k1 \n/* 6 7 代表的a的二进制位的修改\n\na 对应的ASCII码是97，转换为二进制数据是01100001\nb 对应的ASCII码是98，转换为二进制数据是01100010\n\n因为bit非常节省空间（1 MB=8388608 bit），可以用来做大数据量的统计。\n*/\n```\n例如：在线用户统计，留存用户统计\n```shell\nsetbit onlineusers 01 \nsetbit onlineusers 11 \nsetbit onlineusers 20\n```\n支持按位与、按位或等等操作\n```shell\nBITOPANDdestkeykey[key...] ，对一个或多个 key 求逻辑并，并将结果保存到 destkey 。       \nBITOPORdestkeykey[key...] ，对一个或多个 key 求逻辑或，并将结果保存到 destkey 。 \nBITOPXORdestkeykey[key...] ，对一个或多个 key 求逻辑异或，并将结果保存到 destkey 。 \nBITOPNOTdestkeykey ，对给定 key 求逻辑非，并将结果保存到 destkey 。\n```\n计算出7天都在线的用户\n```shell\nBITOP \"AND\" \"7_days_both_online_users\" \"day_1_online_users\" \"day_2_online_users\" ...  \"day_7_online_users\"\n```\n\n##  8. 购物车\nString 或hash。所有String可以做的hash都可以\nhash类型是一个String类型的field和value的映射表，每个hash都可以存储2^32 -1键值对\n**使用hash做购物车：以用户id为key, 商品id为field，商品数量为value。**\n![](./redis-usage-scenario/01.png)\n## 9. 用户消息时间线timeline\nlist，双向链表，直接作为timeline就好了。插入有序\n\n## 10. 消息队列\nList提供了两个阻塞的弹出操作：blpop/brpop，可以设置超时时间\n\n- blpop：blpop key1 timeout 移除并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\n- brpop：brpop key1 timeout 移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\n上面的操作。其实就是java的阻塞队列。学习的东西越多。学习成本越低\n\n- 队列：先进先除：rpush blpop，左头右尾，右边进入队列，左边出队列\n- 栈：先进后出：rpush brpop\n\n## 11. 抽奖\n自带一个随机获得值\n```shell\nspop myset\n```\n\n## 12. 点赞、签到、打卡\n![点赞、签到、打卡](./redis-usage-scenario/02.png)\n假如上面的微博ID是t1001，用户ID是u3001\n\n用 like:t1001 来维护 t1001 这条微博的所有点赞用户\n\n- 点赞了这条微博：sadd like:t1001 u3001\n- 取消点赞：srem like:t1001 u3001\n- 是否点赞：sismember like:t1001 u3001\n- 点赞的所有用户：smembers like:t1001\n- 点赞数：scard like:t1001\n\n## 13. 商品标签\n![商品标签](./redis-usage-scenario/03.png)\n用 tags:i5001 来维护商品所有的标签。\n- sadd tags:i5001 画面清晰细腻\n- sadd tags:i5001 真彩清晰显示屏\n- sadd tags:i5001 流程至极\n\n## 14.商品筛选\n```shell\n// 获取差集\nsdiff set1 set2\n// 获取交集（intersection ）\nsinter set1 set2\n// 获取并集\nsunion set1 set2\n```\n![商品筛选](./redis-usage-scenario/04.png)\n```shell\nsadd brand:apple iPhone11\n\nsadd brand:ios iPhone11\n\nsad screensize:6.0-6.24 iPhone11\n\nsad screentype:lcd iPhone 11\n```\n筛选商品，苹果的、ios的、屏幕在6.0-6.24之间的，屏幕材质是LCD屏幕\n```shell\nsinter brand:apple brand:ios screensize:6.0-6.24 screentype:lcd\n```\n## 15. 用户关注、推荐模型\n```shell\n## follow 关注 fans 粉丝\nsadd 1:follow 2\nsadd 2:fans 1\nsadd 1:fans 2\nsadd 2:follow 1\n```\n我关注的人也关注了他(取交集)：\n```shell\nsinter 1:follow 2:fans\n```\n可能认识的人：\n```shell\n## 用户1可能认识的人(差集)：\nsdiff 2:follow 1:follow\n\n## 用户2可能认识的人：\nsdiff 1:follow 2:follow\n```\n\n## 16. 排行榜\nid 为6001 的新闻点击数加1：zincrby hotNews:20190926 1 n6001\n获取今天点击最多的15条：zrevrange hotNews:20190926 0 15 withscores\n![排行榜](./redis-usage-scenario/05.png)\n\n---\n\n![](./redis-usage-scenario/06.png)\n\n\n\n## redis不适用的场景\nRedis是一种缓存技术，主要用来提高应用的性能，更多的应用场景是对数据库读数据进行缓存，减轻数据库的IO的访问压力，以下场景不太适合使用Redis:\n- 数据规模大小角度\n\n    Redis是将数据放在内存进行缓存的，内存相对于磁盘来锁价格是比较贵的。**如果成本是需要考虑的重要因素，那么大规模的数据就不太适合**；\n  \n- 数据冷热程度角度\n\n    很多业务数据可以根据数据读的频繁程度分为热数据和冷数据；**频繁使用的热数据一般适合用redis，冷数据一般不太适合用redis**,如果大量的冷数据进行了缓存，那是对内存资源的浪费，\n  所以在应用场景上区分冷热数据，将热数据放在内存中，进而提高性能。","slug":"redis-usage-scenario","published":1,"updated":"2022-03-27T14:06:03.486Z","layout":"post","photos":[],"link":"","_id":"cl235zcwh002qwjpjb56hf3t6","content":"<h2 id=\"1-缓存\"><a class=\"markdownIt-Anchor\" href=\"#1-缓存\"></a> 1. 缓存</h2>\n<p>String类型<br>\n例如：热点数据缓存、对象缓存、全页缓存可以提升热点数据的访问效率</p>\n<h2 id=\"2-数据共享分布式\"><a class=\"markdownIt-Anchor\" href=\"#2-数据共享分布式\"></a> 2. 数据共享分布式</h2>\n<p>String类型，因为redis是分布式的独立服务，可以在多个应用服务之间共享，例如分布式session</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.session<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-session-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-分布式锁\"><a class=\"markdownIt-Anchor\" href=\"#3-分布式锁\"></a> 3. 分布式锁</h2>\n<p>String类型 setnx方法，只有不存在时才能添加成功返回true</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">getLock</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    Long flag = jedis.setnx(key, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        jedis.expire(key, <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">releaseLock</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    jedis.del(key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-全局id\"><a class=\"markdownIt-Anchor\" href=\"#4-全局id\"></a> 4. 全局ID</h2>\n<p>int 类型， incrby, 利用原子性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incrby userid 1000</span><br></pre></td></tr></table></figure>\n<p>分库分表的场景，一次性拿一段。</p>\n<h2 id=\"5-计数器\"><a class=\"markdownIt-Anchor\" href=\"#5-计数器\"></a> 5. 计数器</h2>\n<p>int 类型，incr方法<br>\n例如：文章的阅读量、微博点赞数；允许一定的延迟，先写入redis在定时同步到数据库</p>\n<ol>\n<li>第一种方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource(name=&quot;redisTemplate&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ValueOperations&lt;String,Object&gt; ops;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testRedis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//此方法会先检查key是否存在，存在+1，不存在先初始化，再+1</span></span><br><span class=\"line\">            ops.increment(<span class=\"string\">&quot;success&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//return (int) ops.get(&quot;success&quot;); //使用这个会出现错误，报错信息 Caused by: org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is java.io.EOFException。</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Integer.valueOf(redisTemplate.boundValueOps(<span class=\"string\">&quot;success&quot;</span>).get(<span class=\"number\">0</span>, -<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>第二种方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource(name=&quot;redisTemplate&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ValueOperations&lt;String,Object&gt; ops;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testRedis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//此方法会先检查key是否存在，存在+1，不存在先初始化，再+1</span></span><br><span class=\"line\">            ops.increment(<span class=\"string\">&quot;success&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//return (int) ops.get(&quot;success&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">//return Integer.valueOf(redisTemplate.boundValueOps(&quot;success&quot;).get(0, -1));</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) getKey(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getKey</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.execute(<span class=\"keyword\">new</span> RedisCallback&lt;Long&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">doInRedis</span><span class=\"params\">(RedisConnection connection)</span> <span class=\"keyword\">throws</span> DataAccessException </span>&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                RedisSerializer&lt;String&gt; redisSerializer = redisTemplate.getStringSerializer();</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] rowkey = redisSerializer.serialize(key);</span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] rowval = connection.get(rowkey);</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    String val = redisSerializer.deserialize(rowval);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Long.parseLong(val);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0L</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置每天零点过期，重新计数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当天时间</span></span><br><span class=\"line\">Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\"><span class=\"comment\">//当天零点</span></span><br><span class=\"line\">date = DateUtils.truncate(date, Calendar.DAY_OF_MONTH);</span><br><span class=\"line\"><span class=\"comment\">//第二天零点</span></span><br><span class=\"line\">date = DateUtils.addDays(date, +<span class=\"number\">1</span>);</span><br><span class=\"line\">redisTemplate.expireAt(<span class=\"string\">&quot;success&quot;</span>, date);</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-限流\"><a class=\"markdownIt-Anchor\" href=\"#6-限流\"></a> 6. 限流</h2>\n<p>int类型，incr方法<br>\n以访问者的IP和其他信息作为key,访问一次增加一次次数，超过次数 则返回false</p>\n<h2 id=\"7-位统计\"><a class=\"markdownIt-Anchor\" href=\"#7-位统计\"></a> 7. 位统计</h2>\n<p>String类型的bitcount<br>\n字符是以8位二进制存储的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set k1 a</span><br><span class=\"line\">setbit k1 6 1</span><br><span class=\"line\">setbit k1 7 0</span><br><span class=\"line\">get k1 </span><br><span class=\"line\">/* 6 7 代表的a的二进制位的修改</span><br><span class=\"line\"></span><br><span class=\"line\">a 对应的ASCII码是97，转换为二进制数据是01100001</span><br><span class=\"line\">b 对应的ASCII码是98，转换为二进制数据是01100010</span><br><span class=\"line\"></span><br><span class=\"line\">因为bit非常节省空间（1 MB=8388608 bit），可以用来做大数据量的统计。</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>例如：在线用户统计，留存用户统计</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setbit onlineusers 01 </span><br><span class=\"line\">setbit onlineusers 11 </span><br><span class=\"line\">setbit onlineusers 20</span><br></pre></td></tr></table></figure>\n<p>支持按位与、按位或等等操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BITOPANDdestkeykey[key...] ，对一个或多个 key 求逻辑并，并将结果保存到 destkey 。       </span><br><span class=\"line\">BITOPORdestkeykey[key...] ，对一个或多个 key 求逻辑或，并将结果保存到 destkey 。 </span><br><span class=\"line\">BITOPXORdestkeykey[key...] ，对一个或多个 key 求逻辑异或，并将结果保存到 destkey 。 </span><br><span class=\"line\">BITOPNOTdestkeykey ，对给定 key 求逻辑非，并将结果保存到 destkey 。</span><br></pre></td></tr></table></figure>\n<p>计算出7天都在线的用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BITOP &quot;AND&quot; &quot;7_days_both_online_users&quot; &quot;day_1_online_users&quot; &quot;day_2_online_users&quot; ...  &quot;day_7_online_users&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-购物车\"><a class=\"markdownIt-Anchor\" href=\"#8-购物车\"></a> 8. 购物车</h2>\n<p>String 或hash。所有String可以做的hash都可以<br>\nhash类型是一个String类型的field和value的映射表，每个hash都可以存储2^32 -1键值对<br>\n<strong>使用hash做购物车：以用户id为key, 商品id为field，商品数量为value。</strong><br>\n<img src=\"/redis-usage-scenario/01.png\" alt></p>\n<h2 id=\"9-用户消息时间线timeline\"><a class=\"markdownIt-Anchor\" href=\"#9-用户消息时间线timeline\"></a> 9. 用户消息时间线timeline</h2>\n<p>list，双向链表，直接作为timeline就好了。插入有序</p>\n<h2 id=\"10-消息队列\"><a class=\"markdownIt-Anchor\" href=\"#10-消息队列\"></a> 10. 消息队列</h2>\n<p>List提供了两个阻塞的弹出操作：blpop/brpop，可以设置超时时间</p>\n<ul>\n<li>\n<p>blpop：blpop key1 timeout 移除并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p>\n</li>\n<li>\n<p>brpop：brpop key1 timeout 移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。<br>\n上面的操作。其实就是java的阻塞队列。学习的东西越多。学习成本越低</p>\n</li>\n<li>\n<p>队列：先进先除：rpush blpop，左头右尾，右边进入队列，左边出队列</p>\n</li>\n<li>\n<p>栈：先进后出：rpush brpop</p>\n</li>\n</ul>\n<h2 id=\"11-抽奖\"><a class=\"markdownIt-Anchor\" href=\"#11-抽奖\"></a> 11. 抽奖</h2>\n<p>自带一个随机获得值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spop myset</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-点赞-签到-打卡\"><a class=\"markdownIt-Anchor\" href=\"#12-点赞-签到-打卡\"></a> 12. 点赞、签到、打卡</h2>\n<p><img src=\"/redis-usage-scenario/02.png\" alt=\"点赞、签到、打卡\"><br>\n假如上面的微博ID是t1001，用户ID是u3001</p>\n<p>用 like:t1001 来维护 t1001 这条微博的所有点赞用户</p>\n<ul>\n<li>点赞了这条微博：sadd like:t1001 u3001</li>\n<li>取消点赞：srem like:t1001 u3001</li>\n<li>是否点赞：sismember like:t1001 u3001</li>\n<li>点赞的所有用户：smembers like:t1001</li>\n<li>点赞数：scard like:t1001</li>\n</ul>\n<h2 id=\"13-商品标签\"><a class=\"markdownIt-Anchor\" href=\"#13-商品标签\"></a> 13. 商品标签</h2>\n<p><img src=\"/redis-usage-scenario/03.png\" alt=\"商品标签\"><br>\n用 tags:i5001 来维护商品所有的标签。</p>\n<ul>\n<li>sadd tags:i5001 画面清晰细腻</li>\n<li>sadd tags:i5001 真彩清晰显示屏</li>\n<li>sadd tags:i5001 流程至极</li>\n</ul>\n<h2 id=\"14商品筛选\"><a class=\"markdownIt-Anchor\" href=\"#14商品筛选\"></a> 14.商品筛选</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取差集</span><br><span class=\"line\">sdiff set1 set2</span><br><span class=\"line\">// 获取交集（intersection ）</span><br><span class=\"line\">sinter set1 set2</span><br><span class=\"line\">// 获取并集</span><br><span class=\"line\">sunion set1 set2</span><br></pre></td></tr></table></figure>\n<p><img src=\"/redis-usage-scenario/04.png\" alt=\"商品筛选\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sadd brand:apple iPhone11</span><br><span class=\"line\"></span><br><span class=\"line\">sadd brand:ios iPhone11</span><br><span class=\"line\"></span><br><span class=\"line\">sad screensize:6.0-6.24 iPhone11</span><br><span class=\"line\"></span><br><span class=\"line\">sad screentype:lcd iPhone 11</span><br></pre></td></tr></table></figure>\n<p>筛选商品，苹果的、ios的、屏幕在6.0-6.24之间的，屏幕材质是LCD屏幕</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinter brand:apple brand:ios screensize:6.0-6.24 screentype:lcd</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-用户关注-推荐模型\"><a class=\"markdownIt-Anchor\" href=\"#15-用户关注-推荐模型\"></a> 15. 用户关注、推荐模型</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># follow 关注 fans 粉丝</span></span></span><br><span class=\"line\">sadd 1:follow 2</span><br><span class=\"line\">sadd 2:fans 1</span><br><span class=\"line\">sadd 1:fans 2</span><br><span class=\"line\">sadd 2:follow 1</span><br></pre></td></tr></table></figure>\n<p>我关注的人也关注了他(取交集)：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinter 1:follow 2:fans</span><br></pre></td></tr></table></figure>\n<p>可能认识的人：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 用户1可能认识的人(差集)：</span></span></span><br><span class=\"line\">sdiff 2:follow 1:follow</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 用户2可能认识的人：</span></span></span><br><span class=\"line\">sdiff 1:follow 2:follow</span><br></pre></td></tr></table></figure>\n<h2 id=\"16-排行榜\"><a class=\"markdownIt-Anchor\" href=\"#16-排行榜\"></a> 16. 排行榜</h2>\n<p>id 为6001 的新闻点击数加1：zincrby hotNews:20190926 1 n6001<br>\n获取今天点击最多的15条：zrevrange hotNews:20190926 0 15 withscores<br>\n<img src=\"/redis-usage-scenario/05.png\" alt=\"排行榜\"></p>\n<hr>\n<p><img src=\"/redis-usage-scenario/06.png\" alt></p>\n<h2 id=\"redis不适用的场景\"><a class=\"markdownIt-Anchor\" href=\"#redis不适用的场景\"></a> redis不适用的场景</h2>\n<p>Redis是一种缓存技术，主要用来提高应用的性能，更多的应用场景是对数据库读数据进行缓存，减轻数据库的IO的访问压力，以下场景不太适合使用Redis:</p>\n<ul>\n<li>\n<p>数据规模大小角度</p>\n<p>Redis是将数据放在内存进行缓存的，内存相对于磁盘来锁价格是比较贵的。<strong>如果成本是需要考虑的重要因素，那么大规模的数据就不太适合</strong>；</p>\n</li>\n<li>\n<p>数据冷热程度角度</p>\n<p>很多业务数据可以根据数据读的频繁程度分为热数据和冷数据；<strong>频繁使用的热数据一般适合用redis，冷数据一般不太适合用redis</strong>,如果大量的冷数据进行了缓存，那是对内存资源的浪费，<br>\n所以在应用场景上区分冷热数据，将热数据放在内存中，进而提高性能。</p>\n</li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1-缓存\"><a class=\"markdownIt-Anchor\" href=\"#1-缓存\"></a> 1. 缓存</h2>\n<p>String类型<br>\n例如：热点数据缓存、对象缓存、全页缓存可以提升热点数据的访问效率</p>\n<h2 id=\"2-数据共享分布式\"><a class=\"markdownIt-Anchor\" href=\"#2-数据共享分布式\"></a> 2. 数据共享分布式</h2>\n<p>String类型，因为redis是分布式的独立服务，可以在多个应用服务之间共享，例如分布式session</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.session<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-session-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-分布式锁\"><a class=\"markdownIt-Anchor\" href=\"#3-分布式锁\"></a> 3. 分布式锁</h2>\n<p>String类型 setnx方法，只有不存在时才能添加成功返回true</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">getLock</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    Long flag = jedis.setnx(key, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        jedis.expire(key, <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">releaseLock</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    jedis.del(key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-全局id\"><a class=\"markdownIt-Anchor\" href=\"#4-全局id\"></a> 4. 全局ID</h2>\n<p>int 类型， incrby, 利用原子性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incrby userid 1000</span><br></pre></td></tr></table></figure>\n<p>分库分表的场景，一次性拿一段。</p>\n<h2 id=\"5-计数器\"><a class=\"markdownIt-Anchor\" href=\"#5-计数器\"></a> 5. 计数器</h2>\n<p>int 类型，incr方法<br>\n例如：文章的阅读量、微博点赞数；允许一定的延迟，先写入redis在定时同步到数据库</p>\n<ol>\n<li>第一种方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource(name=&quot;redisTemplate&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ValueOperations&lt;String,Object&gt; ops;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testRedis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//此方法会先检查key是否存在，存在+1，不存在先初始化，再+1</span></span><br><span class=\"line\">            ops.increment(<span class=\"string\">&quot;success&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//return (int) ops.get(&quot;success&quot;); //使用这个会出现错误，报错信息 Caused by: org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is java.io.EOFException。</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Integer.valueOf(redisTemplate.boundValueOps(<span class=\"string\">&quot;success&quot;</span>).get(<span class=\"number\">0</span>, -<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>第二种方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource(name=&quot;redisTemplate&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ValueOperations&lt;String,Object&gt; ops;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testRedis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//此方法会先检查key是否存在，存在+1，不存在先初始化，再+1</span></span><br><span class=\"line\">            ops.increment(<span class=\"string\">&quot;success&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//return (int) ops.get(&quot;success&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">//return Integer.valueOf(redisTemplate.boundValueOps(&quot;success&quot;).get(0, -1));</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) getKey(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getKey</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.execute(<span class=\"keyword\">new</span> RedisCallback&lt;Long&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">doInRedis</span><span class=\"params\">(RedisConnection connection)</span> <span class=\"keyword\">throws</span> DataAccessException </span>&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                RedisSerializer&lt;String&gt; redisSerializer = redisTemplate.getStringSerializer();</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] rowkey = redisSerializer.serialize(key);</span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] rowval = connection.get(rowkey);</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    String val = redisSerializer.deserialize(rowval);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Long.parseLong(val);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0L</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置每天零点过期，重新计数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当天时间</span></span><br><span class=\"line\">Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\"><span class=\"comment\">//当天零点</span></span><br><span class=\"line\">date = DateUtils.truncate(date, Calendar.DAY_OF_MONTH);</span><br><span class=\"line\"><span class=\"comment\">//第二天零点</span></span><br><span class=\"line\">date = DateUtils.addDays(date, +<span class=\"number\">1</span>);</span><br><span class=\"line\">redisTemplate.expireAt(<span class=\"string\">&quot;success&quot;</span>, date);</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-限流\"><a class=\"markdownIt-Anchor\" href=\"#6-限流\"></a> 6. 限流</h2>\n<p>int类型，incr方法<br>\n以访问者的IP和其他信息作为key,访问一次增加一次次数，超过次数 则返回false</p>\n<h2 id=\"7-位统计\"><a class=\"markdownIt-Anchor\" href=\"#7-位统计\"></a> 7. 位统计</h2>\n<p>String类型的bitcount<br>\n字符是以8位二进制存储的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set k1 a</span><br><span class=\"line\">setbit k1 6 1</span><br><span class=\"line\">setbit k1 7 0</span><br><span class=\"line\">get k1 </span><br><span class=\"line\">/* 6 7 代表的a的二进制位的修改</span><br><span class=\"line\"></span><br><span class=\"line\">a 对应的ASCII码是97，转换为二进制数据是01100001</span><br><span class=\"line\">b 对应的ASCII码是98，转换为二进制数据是01100010</span><br><span class=\"line\"></span><br><span class=\"line\">因为bit非常节省空间（1 MB=8388608 bit），可以用来做大数据量的统计。</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>例如：在线用户统计，留存用户统计</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setbit onlineusers 01 </span><br><span class=\"line\">setbit onlineusers 11 </span><br><span class=\"line\">setbit onlineusers 20</span><br></pre></td></tr></table></figure>\n<p>支持按位与、按位或等等操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BITOPANDdestkeykey[key...] ，对一个或多个 key 求逻辑并，并将结果保存到 destkey 。       </span><br><span class=\"line\">BITOPORdestkeykey[key...] ，对一个或多个 key 求逻辑或，并将结果保存到 destkey 。 </span><br><span class=\"line\">BITOPXORdestkeykey[key...] ，对一个或多个 key 求逻辑异或，并将结果保存到 destkey 。 </span><br><span class=\"line\">BITOPNOTdestkeykey ，对给定 key 求逻辑非，并将结果保存到 destkey 。</span><br></pre></td></tr></table></figure>\n<p>计算出7天都在线的用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BITOP &quot;AND&quot; &quot;7_days_both_online_users&quot; &quot;day_1_online_users&quot; &quot;day_2_online_users&quot; ...  &quot;day_7_online_users&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-购物车\"><a class=\"markdownIt-Anchor\" href=\"#8-购物车\"></a> 8. 购物车</h2>\n<p>String 或hash。所有String可以做的hash都可以<br>\nhash类型是一个String类型的field和value的映射表，每个hash都可以存储2^32 -1键值对<br>\n<strong>使用hash做购物车：以用户id为key, 商品id为field，商品数量为value。</strong><br>\n<img src=\"/redis-usage-scenario/01.png\" alt></p>\n<h2 id=\"9-用户消息时间线timeline\"><a class=\"markdownIt-Anchor\" href=\"#9-用户消息时间线timeline\"></a> 9. 用户消息时间线timeline</h2>\n<p>list，双向链表，直接作为timeline就好了。插入有序</p>\n<h2 id=\"10-消息队列\"><a class=\"markdownIt-Anchor\" href=\"#10-消息队列\"></a> 10. 消息队列</h2>\n<p>List提供了两个阻塞的弹出操作：blpop/brpop，可以设置超时时间</p>\n<ul>\n<li>\n<p>blpop：blpop key1 timeout 移除并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p>\n</li>\n<li>\n<p>brpop：brpop key1 timeout 移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。<br>\n上面的操作。其实就是java的阻塞队列。学习的东西越多。学习成本越低</p>\n</li>\n<li>\n<p>队列：先进先除：rpush blpop，左头右尾，右边进入队列，左边出队列</p>\n</li>\n<li>\n<p>栈：先进后出：rpush brpop</p>\n</li>\n</ul>\n<h2 id=\"11-抽奖\"><a class=\"markdownIt-Anchor\" href=\"#11-抽奖\"></a> 11. 抽奖</h2>\n<p>自带一个随机获得值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spop myset</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-点赞-签到-打卡\"><a class=\"markdownIt-Anchor\" href=\"#12-点赞-签到-打卡\"></a> 12. 点赞、签到、打卡</h2>\n<p><img src=\"/redis-usage-scenario/02.png\" alt=\"点赞、签到、打卡\"><br>\n假如上面的微博ID是t1001，用户ID是u3001</p>\n<p>用 like:t1001 来维护 t1001 这条微博的所有点赞用户</p>\n<ul>\n<li>点赞了这条微博：sadd like:t1001 u3001</li>\n<li>取消点赞：srem like:t1001 u3001</li>\n<li>是否点赞：sismember like:t1001 u3001</li>\n<li>点赞的所有用户：smembers like:t1001</li>\n<li>点赞数：scard like:t1001</li>\n</ul>\n<h2 id=\"13-商品标签\"><a class=\"markdownIt-Anchor\" href=\"#13-商品标签\"></a> 13. 商品标签</h2>\n<p><img src=\"/redis-usage-scenario/03.png\" alt=\"商品标签\"><br>\n用 tags:i5001 来维护商品所有的标签。</p>\n<ul>\n<li>sadd tags:i5001 画面清晰细腻</li>\n<li>sadd tags:i5001 真彩清晰显示屏</li>\n<li>sadd tags:i5001 流程至极</li>\n</ul>\n<h2 id=\"14商品筛选\"><a class=\"markdownIt-Anchor\" href=\"#14商品筛选\"></a> 14.商品筛选</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取差集</span><br><span class=\"line\">sdiff set1 set2</span><br><span class=\"line\">// 获取交集（intersection ）</span><br><span class=\"line\">sinter set1 set2</span><br><span class=\"line\">// 获取并集</span><br><span class=\"line\">sunion set1 set2</span><br></pre></td></tr></table></figure>\n<p><img src=\"/redis-usage-scenario/04.png\" alt=\"商品筛选\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sadd brand:apple iPhone11</span><br><span class=\"line\"></span><br><span class=\"line\">sadd brand:ios iPhone11</span><br><span class=\"line\"></span><br><span class=\"line\">sad screensize:6.0-6.24 iPhone11</span><br><span class=\"line\"></span><br><span class=\"line\">sad screentype:lcd iPhone 11</span><br></pre></td></tr></table></figure>\n<p>筛选商品，苹果的、ios的、屏幕在6.0-6.24之间的，屏幕材质是LCD屏幕</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinter brand:apple brand:ios screensize:6.0-6.24 screentype:lcd</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-用户关注-推荐模型\"><a class=\"markdownIt-Anchor\" href=\"#15-用户关注-推荐模型\"></a> 15. 用户关注、推荐模型</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># follow 关注 fans 粉丝</span></span></span><br><span class=\"line\">sadd 1:follow 2</span><br><span class=\"line\">sadd 2:fans 1</span><br><span class=\"line\">sadd 1:fans 2</span><br><span class=\"line\">sadd 2:follow 1</span><br></pre></td></tr></table></figure>\n<p>我关注的人也关注了他(取交集)：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinter 1:follow 2:fans</span><br></pre></td></tr></table></figure>\n<p>可能认识的人：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 用户1可能认识的人(差集)：</span></span></span><br><span class=\"line\">sdiff 2:follow 1:follow</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 用户2可能认识的人：</span></span></span><br><span class=\"line\">sdiff 1:follow 2:follow</span><br></pre></td></tr></table></figure>\n<h2 id=\"16-排行榜\"><a class=\"markdownIt-Anchor\" href=\"#16-排行榜\"></a> 16. 排行榜</h2>\n<p>id 为6001 的新闻点击数加1：zincrby hotNews:20190926 1 n6001<br>\n获取今天点击最多的15条：zrevrange hotNews:20190926 0 15 withscores<br>\n<img src=\"/redis-usage-scenario/05.png\" alt=\"排行榜\"></p>\n<hr>\n<p><img src=\"/redis-usage-scenario/06.png\" alt></p>\n<h2 id=\"redis不适用的场景\"><a class=\"markdownIt-Anchor\" href=\"#redis不适用的场景\"></a> redis不适用的场景</h2>\n<p>Redis是一种缓存技术，主要用来提高应用的性能，更多的应用场景是对数据库读数据进行缓存，减轻数据库的IO的访问压力，以下场景不太适合使用Redis:</p>\n<ul>\n<li>\n<p>数据规模大小角度</p>\n<p>Redis是将数据放在内存进行缓存的，内存相对于磁盘来锁价格是比较贵的。<strong>如果成本是需要考虑的重要因素，那么大规模的数据就不太适合</strong>；</p>\n</li>\n<li>\n<p>数据冷热程度角度</p>\n<p>很多业务数据可以根据数据读的频繁程度分为热数据和冷数据；<strong>频繁使用的热数据一般适合用redis，冷数据一般不太适合用redis</strong>,如果大量的冷数据进行了缓存，那是对内存资源的浪费，<br>\n所以在应用场景上区分冷热数据，将热数据放在内存中，进而提高性能。</p>\n</li>\n</ul>\n"},{"title":"Linux环境下安装Redis","comments":1,"abbrlink":52569,"date":"2021-05-13T05:40:44.000Z","translate_title":"redis-install","_content":"#####  1. 安装gcc\n   ```shell\n   yum -y install gcc gcc-c++\n   ```\n##### 2. 下载安装包\n   ```shell\n   wget http://download.redis.io/redis-stable.tar.gz \n   ```\n##### 3. 解压\n\n   ```shell\n   tar xvzf redis-stable.tar.gz\n   ```\n#####    4. 编译\n\n   ```shell\n   //如果使用make失败，那么就加上参数，因为jemalloc重载了Linux下的ANSI C的malloc和free函数\n   make MALLOC=libc\n   //make之后如果出现Hint: To run 'make test' is a good idea ;\n   //运行make test, 会提示需要安装tcl,执行yum install tcl\n   ```\n\n##### 5. 配置密码以及允许外网ip访问\n\n   ```properties\n   #在redis.conf中配置requirepass 密码以及port端口号（非必须）\n   requirepass xxx\n   port 6379 \n   \n   #开启redis允许外网ip访问，在 Linux 中安装了redis 服务，当在客户端通过远程连接的方式连接时，报could not connect错误。错误的原因为：redis采用的安全策略，默认会只准许本地访问。\n   #将所有的bing信息全部屏蔽\n   #bind 192.168.1.100 10.0.0.1\n   \n   #配置redis后台启动，如果不配置的话可以使用hohup启动\n   daemonize yes\n   ```\n##### 6. 启动redis服务\n   ```shell\n   cd ./src\n   nohup ./redis-server ../redis.conf &\n   ```\n##### 7. 查看redis进程\n   ```shell\n   [root@localhost redis]# pstree\n   ```\n   ![image-20201210103251475](./redis_install/image-20201201155441018.png)","source":"_posts/2021/07/redis_install.md","raw":"---\ntitle: Linux环境下安装Redis\ntags: redis\ncategories: linux\ncomments: true\nabbrlink: 52569\ndate: 2021-05-13 13:40:44\ntranslate_title: redis-install\n---\n#####  1. 安装gcc\n   ```shell\n   yum -y install gcc gcc-c++\n   ```\n##### 2. 下载安装包\n   ```shell\n   wget http://download.redis.io/redis-stable.tar.gz \n   ```\n##### 3. 解压\n\n   ```shell\n   tar xvzf redis-stable.tar.gz\n   ```\n#####    4. 编译\n\n   ```shell\n   //如果使用make失败，那么就加上参数，因为jemalloc重载了Linux下的ANSI C的malloc和free函数\n   make MALLOC=libc\n   //make之后如果出现Hint: To run 'make test' is a good idea ;\n   //运行make test, 会提示需要安装tcl,执行yum install tcl\n   ```\n\n##### 5. 配置密码以及允许外网ip访问\n\n   ```properties\n   #在redis.conf中配置requirepass 密码以及port端口号（非必须）\n   requirepass xxx\n   port 6379 \n   \n   #开启redis允许外网ip访问，在 Linux 中安装了redis 服务，当在客户端通过远程连接的方式连接时，报could not connect错误。错误的原因为：redis采用的安全策略，默认会只准许本地访问。\n   #将所有的bing信息全部屏蔽\n   #bind 192.168.1.100 10.0.0.1\n   \n   #配置redis后台启动，如果不配置的话可以使用hohup启动\n   daemonize yes\n   ```\n##### 6. 启动redis服务\n   ```shell\n   cd ./src\n   nohup ./redis-server ../redis.conf &\n   ```\n##### 7. 查看redis进程\n   ```shell\n   [root@localhost redis]# pstree\n   ```\n   ![image-20201210103251475](./redis_install/image-20201201155441018.png)","slug":"redis_install","published":1,"updated":"2022-03-27T14:06:03.346Z","layout":"post","photos":[],"link":"","_id":"cl235zcwh002twjpj103def5u","content":"<h5 id=\"1-安装gcc\"><a class=\"markdownIt-Anchor\" href=\"#1-安装gcc\"></a> 1. 安装gcc</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-下载安装包\"><a class=\"markdownIt-Anchor\" href=\"#2-下载安装包\"></a> 2. 下载安装包</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/redis-stable.tar.gz </span><br></pre></td></tr></table></figure>\n<h5 id=\"3-解压\"><a class=\"markdownIt-Anchor\" href=\"#3-解压\"></a> 3. 解压</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvzf redis-stable.tar.gz</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-编译\"><a class=\"markdownIt-Anchor\" href=\"#4-编译\"></a> 4. 编译</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如果使用make失败，那么就加上参数，因为jemalloc重载了Linux下的ANSI C的malloc和free函数</span><br><span class=\"line\">make MALLOC=libc</span><br><span class=\"line\">//make之后如果出现Hint: To run &#x27;make test&#x27; is a good idea ;</span><br><span class=\"line\">//运行make test, 会提示需要安装tcl,执行yum install tcl</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-配置密码以及允许外网ip访问\"><a class=\"markdownIt-Anchor\" href=\"#5-配置密码以及允许外网ip访问\"></a> 5. 配置密码以及允许外网ip访问</h5>\n   <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在redis.conf中配置requirepass 密码以及port端口号（非必须）</span></span><br><span class=\"line\"><span class=\"attr\">requirepass</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"attr\">port</span> <span class=\"string\">6379 </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#开启redis允许外网ip访问，在 Linux 中安装了redis 服务，当在客户端通过远程连接的方式连接时，报could not connect错误。错误的原因为：redis采用的安全策略，默认会只准许本地访问。</span></span><br><span class=\"line\"><span class=\"comment\">#将所有的bing信息全部屏蔽</span></span><br><span class=\"line\"><span class=\"comment\">#bind 192.168.1.100 10.0.0.1</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#配置redis后台启动，如果不配置的话可以使用hohup启动</span></span><br><span class=\"line\"><span class=\"attr\">daemonize</span> <span class=\"string\">yes</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"6-启动redis服务\"><a class=\"markdownIt-Anchor\" href=\"#6-启动redis服务\"></a> 6. 启动redis服务</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ./src</span><br><span class=\"line\">nohup ./redis-server ../redis.conf &amp;</span><br></pre></td></tr></table></figure>\n<h5 id=\"7-查看redis进程\"><a class=\"markdownIt-Anchor\" href=\"#7-查看redis进程\"></a> 7. 查看redis进程</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost redis]# pstree</span><br></pre></td></tr></table></figure>\n<p><img src=\"/redis_install/image-20201201155441018.png\" alt=\"image-20201210103251475\"></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h5 id=\"1-安装gcc\"><a class=\"markdownIt-Anchor\" href=\"#1-安装gcc\"></a> 1. 安装gcc</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-下载安装包\"><a class=\"markdownIt-Anchor\" href=\"#2-下载安装包\"></a> 2. 下载安装包</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/redis-stable.tar.gz </span><br></pre></td></tr></table></figure>\n<h5 id=\"3-解压\"><a class=\"markdownIt-Anchor\" href=\"#3-解压\"></a> 3. 解压</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvzf redis-stable.tar.gz</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-编译\"><a class=\"markdownIt-Anchor\" href=\"#4-编译\"></a> 4. 编译</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如果使用make失败，那么就加上参数，因为jemalloc重载了Linux下的ANSI C的malloc和free函数</span><br><span class=\"line\">make MALLOC=libc</span><br><span class=\"line\">//make之后如果出现Hint: To run &#x27;make test&#x27; is a good idea ;</span><br><span class=\"line\">//运行make test, 会提示需要安装tcl,执行yum install tcl</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-配置密码以及允许外网ip访问\"><a class=\"markdownIt-Anchor\" href=\"#5-配置密码以及允许外网ip访问\"></a> 5. 配置密码以及允许外网ip访问</h5>\n   <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在redis.conf中配置requirepass 密码以及port端口号（非必须）</span></span><br><span class=\"line\"><span class=\"attr\">requirepass</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"attr\">port</span> <span class=\"string\">6379 </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#开启redis允许外网ip访问，在 Linux 中安装了redis 服务，当在客户端通过远程连接的方式连接时，报could not connect错误。错误的原因为：redis采用的安全策略，默认会只准许本地访问。</span></span><br><span class=\"line\"><span class=\"comment\">#将所有的bing信息全部屏蔽</span></span><br><span class=\"line\"><span class=\"comment\">#bind 192.168.1.100 10.0.0.1</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#配置redis后台启动，如果不配置的话可以使用hohup启动</span></span><br><span class=\"line\"><span class=\"attr\">daemonize</span> <span class=\"string\">yes</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"6-启动redis服务\"><a class=\"markdownIt-Anchor\" href=\"#6-启动redis服务\"></a> 6. 启动redis服务</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ./src</span><br><span class=\"line\">nohup ./redis-server ../redis.conf &amp;</span><br></pre></td></tr></table></figure>\n<h5 id=\"7-查看redis进程\"><a class=\"markdownIt-Anchor\" href=\"#7-查看redis进程\"></a> 7. 查看redis进程</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost redis]# pstree</span><br></pre></td></tr></table></figure>\n<p><img src=\"/redis_install/image-20201201155441018.png\" alt=\"image-20201210103251475\"></p>\n"},{"title":"springboot读取yml配置的方式","comments":1,"translate_title":"springboot-yaml","abbrlink":58807,"date":"2021-08-18T13:41:24.000Z","_content":"springboot项目中默认的配置文件是application.properties；\n### 1.yml文件规则\n- 树状结构，结构清晰\n- 不支持tab缩进\n- 可以使用\"_\"或\"-\"消协字母代替大写字母；如userName 与user-name， user_name含义是一样的（宽松绑定原则 relaxed binding）; key: value格式书写，value前面有个空格\n\n### 2. 数据格式\n- 普通的值（数字，字符串，布尔）如：\n    ```yaml\n    port: 123      \n    name: abc      \n    flag: true\n    ```\n    字符串默认不用加上单引号或者双引号；\n  \n    \"\"：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思,name: \"zhangsan \\n lisi\"：输出；zhangsan 换行 lisi\n  \n    ''：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据,name: ‘zhangsan \\n lisi’：输出；zhangsan \\n lisi\n- 对象、Map(属性和值)如：\n    ```yaml\n    #k: v：在下一行来写对象的属性和值的关系；注意缩进(不支持tab,使用空格)\n    server:\n      port: 8123\n      tomcat:\n        uri-encoding: utf-8\n      servlet:\n        context-path: /app\n    ```\n  \n- 数组（list， set）\n    ```yaml\n    #用- 值表示数组中的一个元素\n    hands:\n        - left\n        - right\n    ```\n  \n### 3. 读取方式\n1. @Value注解\n    ```yaml\n    server:\n      port: 8081\n    ```\n    ```text\n    @Value(\"${server.port}\")\n    public String port;\n    ```\n    此处的port所在的类需要是一个组件,如果是实体类需要加上@Component\n   \n\n2. @ConfigurationProperties\n   \n   需要一个JavaBean 来专门映射配置的话,我们一般会使用@ConfigurationProperties来读取.\n   \n   使用的使用需要@EnableConfigurationProperties注解让类被springboot扫描到；\n    ```yaml\n    spring:\n      datasource:\n        druid:\n          url: jdbc:mysql://localhost:3307/app?useUnicode=yes&characterEncoding=UTF-8&useSSL=false&serverTimezone=GMT%2B8&useLegacyDatetimeCode=false\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: root\n    ```\n    ```java\n    //prefix 指定前缀\n    @ConfigurationProperties(prefix = \"spring.datasource\")\n    public class MyDataSourceProperties {\n    \n        private String type;\n        private String driverClassName;\n        private String url;\n        private String username;\n        private String password;\n        //省略getter setter方法\n    }\n    ```\n   - 前缀定义了哪些外部属性将绑定到类的字段上\n   - 根据 Spring Boot 宽松的绑定规则，类的属性名称必须与外部属性的名称匹配\n   - 我们可以简单地用一个值初始化一个字段来定义一个默认值\n   - 类本身可以是包私有的\n   - 类的字段必须有公共 setter 方法\n    \n\n   \n3. Environment\n   \n   Spring Environment bean\n    ```yaml\n    @RestController\n    @RequestMapping(\"/test\")\n    public class TestC {\n    \n        @Autowired\n        private Environment env;\n    \n        @RequestMapping(value = \"index\", method = RequestMethod.GET)\n        public String index() {\n            return \"environment : \"+ env.getProperty(\"spring.datasource.druid.url\");\n        }\n    }\n    ```","source":"_posts/2021/07/springboot-yml.md","raw":"---\ntitle: springboot读取yml配置的方式\ntags: springboot\ncategories: java\ncomments: true\ntranslate_title: springboot-yaml\nabbrlink: 58807\ndate: 2021-08-18 21:41:24\n---\nspringboot项目中默认的配置文件是application.properties；\n### 1.yml文件规则\n- 树状结构，结构清晰\n- 不支持tab缩进\n- 可以使用\"_\"或\"-\"消协字母代替大写字母；如userName 与user-name， user_name含义是一样的（宽松绑定原则 relaxed binding）; key: value格式书写，value前面有个空格\n\n### 2. 数据格式\n- 普通的值（数字，字符串，布尔）如：\n    ```yaml\n    port: 123      \n    name: abc      \n    flag: true\n    ```\n    字符串默认不用加上单引号或者双引号；\n  \n    \"\"：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思,name: \"zhangsan \\n lisi\"：输出；zhangsan 换行 lisi\n  \n    ''：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据,name: ‘zhangsan \\n lisi’：输出；zhangsan \\n lisi\n- 对象、Map(属性和值)如：\n    ```yaml\n    #k: v：在下一行来写对象的属性和值的关系；注意缩进(不支持tab,使用空格)\n    server:\n      port: 8123\n      tomcat:\n        uri-encoding: utf-8\n      servlet:\n        context-path: /app\n    ```\n  \n- 数组（list， set）\n    ```yaml\n    #用- 值表示数组中的一个元素\n    hands:\n        - left\n        - right\n    ```\n  \n### 3. 读取方式\n1. @Value注解\n    ```yaml\n    server:\n      port: 8081\n    ```\n    ```text\n    @Value(\"${server.port}\")\n    public String port;\n    ```\n    此处的port所在的类需要是一个组件,如果是实体类需要加上@Component\n   \n\n2. @ConfigurationProperties\n   \n   需要一个JavaBean 来专门映射配置的话,我们一般会使用@ConfigurationProperties来读取.\n   \n   使用的使用需要@EnableConfigurationProperties注解让类被springboot扫描到；\n    ```yaml\n    spring:\n      datasource:\n        druid:\n          url: jdbc:mysql://localhost:3307/app?useUnicode=yes&characterEncoding=UTF-8&useSSL=false&serverTimezone=GMT%2B8&useLegacyDatetimeCode=false\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: root\n    ```\n    ```java\n    //prefix 指定前缀\n    @ConfigurationProperties(prefix = \"spring.datasource\")\n    public class MyDataSourceProperties {\n    \n        private String type;\n        private String driverClassName;\n        private String url;\n        private String username;\n        private String password;\n        //省略getter setter方法\n    }\n    ```\n   - 前缀定义了哪些外部属性将绑定到类的字段上\n   - 根据 Spring Boot 宽松的绑定规则，类的属性名称必须与外部属性的名称匹配\n   - 我们可以简单地用一个值初始化一个字段来定义一个默认值\n   - 类本身可以是包私有的\n   - 类的字段必须有公共 setter 方法\n    \n\n   \n3. Environment\n   \n   Spring Environment bean\n    ```yaml\n    @RestController\n    @RequestMapping(\"/test\")\n    public class TestC {\n    \n        @Autowired\n        private Environment env;\n    \n        @RequestMapping(value = \"index\", method = RequestMethod.GET)\n        public String index() {\n            return \"environment : \"+ env.getProperty(\"spring.datasource.druid.url\");\n        }\n    }\n    ```","slug":"springboot-yml","published":1,"updated":"2022-03-27T14:06:03.467Z","layout":"post","photos":[],"link":"","_id":"cl235zcwi002wwjpjbf3ucac8","content":"<p>springboot项目中默认的配置文件是application.properties；</p>\n<h3 id=\"1yml文件规则\"><a class=\"markdownIt-Anchor\" href=\"#1yml文件规则\"></a> 1.yml文件规则</h3>\n<ul>\n<li>树状结构，结构清晰</li>\n<li>不支持tab缩进</li>\n<li>可以使用&quot;_“或”-&quot;消协字母代替大写字母；如userName 与user-name， user_name含义是一样的（宽松绑定原则 relaxed binding）; key: value格式书写，value前面有个空格</li>\n</ul>\n<h3 id=\"2-数据格式\"><a class=\"markdownIt-Anchor\" href=\"#2-数据格式\"></a> 2. 数据格式</h3>\n<ul>\n<li>\n<p>普通的值（数字，字符串，布尔）如：</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">port:</span> <span class=\"number\">123</span>      </span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">abc</span>      </span><br><span class=\"line\"><span class=\"attr\">flag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>字符串默认不用加上单引号或者双引号；</p>\n<p>“”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思,name: “zhangsan \\n lisi”：输出；zhangsan 换行 lisi</p>\n<p>‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据,name: ‘zhangsan \\n lisi’：输出；zhangsan \\n lisi</p>\n</li>\n<li>\n<p>对象、Map(属性和值)如：</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#k: v：在下一行来写对象的属性和值的关系；注意缩进(不支持tab,使用空格)</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8123</span></span><br><span class=\"line\">  <span class=\"attr\">tomcat:</span></span><br><span class=\"line\">    <span class=\"attr\">uri-encoding:</span> <span class=\"string\">utf-8</span></span><br><span class=\"line\">  <span class=\"attr\">servlet:</span></span><br><span class=\"line\">    <span class=\"attr\">context-path:</span> <span class=\"string\">/app</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>数组（list， set）</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#用- 值表示数组中的一个元素</span></span><br><span class=\"line\"><span class=\"attr\">hands:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">left</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">right</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-读取方式\"><a class=\"markdownIt-Anchor\" href=\"#3-读取方式\"></a> 3. 读取方式</h3>\n<ol>\n<li>\n<p>@Value注解</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class=\"line\">public String port;</span><br></pre></td></tr></table></figure>\n<p>此处的port所在的类需要是一个组件,如果是实体类需要加上@Component</p>\n</li>\n<li>\n<p>@ConfigurationProperties</p>\n<p>需要一个JavaBean 来专门映射配置的话,我们一般会使用@ConfigurationProperties来读取.</p>\n<p>使用的使用需要@EnableConfigurationProperties注解让类被springboot扫描到；</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">druid:</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3307/app?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8&amp;useLegacyDatetimeCode=false</span></span><br><span class=\"line\">      <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//prefix 指定前缀</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDataSourceProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String type;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String driverClassName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"comment\">//省略getter setter方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>前缀定义了哪些外部属性将绑定到类的字段上</li>\n<li>根据 Spring Boot 宽松的绑定规则，类的属性名称必须与外部属性的名称匹配</li>\n<li>我们可以简单地用一个值初始化一个字段来定义一个默认值</li>\n<li>类本身可以是包私有的</li>\n<li>类的字段必须有公共 setter 方法</li>\n</ul>\n</li>\n<li>\n<p>Environment</p>\n<p>Spring Environment bean</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">@RestController</span></span><br><span class=\"line\"><span class=\"string\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"string\">public</span> <span class=\"string\">class</span> <span class=\"string\">TestC</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@Autowired</span></span><br><span class=\"line\">    <span class=\"string\">private</span> <span class=\"string\">Environment</span> <span class=\"string\">env;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@RequestMapping(value</span> <span class=\"string\">=</span> <span class=\"string\">&quot;index&quot;</span>, <span class=\"string\">method</span> <span class=\"string\">=</span> <span class=\"string\">RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"string\">public</span> <span class=\"string\">String</span> <span class=\"string\">index()</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">&quot;environment : &quot;</span><span class=\"string\">+</span> <span class=\"string\">env.getProperty(&quot;spring.datasource.druid.url&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>springboot项目中默认的配置文件是application.properties；</p>\n<h3 id=\"1yml文件规则\"><a class=\"markdownIt-Anchor\" href=\"#1yml文件规则\"></a> 1.yml文件规则</h3>\n<ul>\n<li>树状结构，结构清晰</li>\n<li>不支持tab缩进</li>\n<li>可以使用&quot;_“或”-&quot;消协字母代替大写字母；如userName 与user-name， user_name含义是一样的（宽松绑定原则 relaxed binding）; key: value格式书写，value前面有个空格</li>\n</ul>\n<h3 id=\"2-数据格式\"><a class=\"markdownIt-Anchor\" href=\"#2-数据格式\"></a> 2. 数据格式</h3>\n<ul>\n<li>\n<p>普通的值（数字，字符串，布尔）如：</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">port:</span> <span class=\"number\">123</span>      </span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">abc</span>      </span><br><span class=\"line\"><span class=\"attr\">flag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>字符串默认不用加上单引号或者双引号；</p>\n<p>“”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思,name: “zhangsan \\n lisi”：输出；zhangsan 换行 lisi</p>\n<p>‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据,name: ‘zhangsan \\n lisi’：输出；zhangsan \\n lisi</p>\n</li>\n<li>\n<p>对象、Map(属性和值)如：</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#k: v：在下一行来写对象的属性和值的关系；注意缩进(不支持tab,使用空格)</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8123</span></span><br><span class=\"line\">  <span class=\"attr\">tomcat:</span></span><br><span class=\"line\">    <span class=\"attr\">uri-encoding:</span> <span class=\"string\">utf-8</span></span><br><span class=\"line\">  <span class=\"attr\">servlet:</span></span><br><span class=\"line\">    <span class=\"attr\">context-path:</span> <span class=\"string\">/app</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>数组（list， set）</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#用- 值表示数组中的一个元素</span></span><br><span class=\"line\"><span class=\"attr\">hands:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">left</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">right</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-读取方式\"><a class=\"markdownIt-Anchor\" href=\"#3-读取方式\"></a> 3. 读取方式</h3>\n<ol>\n<li>\n<p>@Value注解</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class=\"line\">public String port;</span><br></pre></td></tr></table></figure>\n<p>此处的port所在的类需要是一个组件,如果是实体类需要加上@Component</p>\n</li>\n<li>\n<p>@ConfigurationProperties</p>\n<p>需要一个JavaBean 来专门映射配置的话,我们一般会使用@ConfigurationProperties来读取.</p>\n<p>使用的使用需要@EnableConfigurationProperties注解让类被springboot扫描到；</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">druid:</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3307/app?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8&amp;useLegacyDatetimeCode=false</span></span><br><span class=\"line\">      <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//prefix 指定前缀</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDataSourceProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String type;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String driverClassName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"comment\">//省略getter setter方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>前缀定义了哪些外部属性将绑定到类的字段上</li>\n<li>根据 Spring Boot 宽松的绑定规则，类的属性名称必须与外部属性的名称匹配</li>\n<li>我们可以简单地用一个值初始化一个字段来定义一个默认值</li>\n<li>类本身可以是包私有的</li>\n<li>类的字段必须有公共 setter 方法</li>\n</ul>\n</li>\n<li>\n<p>Environment</p>\n<p>Spring Environment bean</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">@RestController</span></span><br><span class=\"line\"><span class=\"string\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"string\">public</span> <span class=\"string\">class</span> <span class=\"string\">TestC</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@Autowired</span></span><br><span class=\"line\">    <span class=\"string\">private</span> <span class=\"string\">Environment</span> <span class=\"string\">env;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@RequestMapping(value</span> <span class=\"string\">=</span> <span class=\"string\">&quot;index&quot;</span>, <span class=\"string\">method</span> <span class=\"string\">=</span> <span class=\"string\">RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"string\">public</span> <span class=\"string\">String</span> <span class=\"string\">index()</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">&quot;environment : &quot;</span><span class=\"string\">+</span> <span class=\"string\">env.getProperty(&quot;spring.datasource.druid.url&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"常见sql优化方式","comments":1,"abbrlink":9311,"date":"2021-07-01T08:00:57.000Z","translate_title":"common-SQL-optimization-methods","_content":"1. 对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。\n\n2. 应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：    \n    ```sql\n    select id from t where num is null    \n    -- 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：    \n    select id from t where num=0\n    ```\n\n3. 应尽量避免在 where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。\n\n4. 应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：    \n    ```sql\n    select id from t where num=10 or num=20    \n    --可以这样查询：    \n    select id from t where num=10    \n    union all    \n    select id from t where num=20\n    ```\n\n5. in 和 not in 也要慎用，否则会导致全表扫描，如：    \n    ```sql\n    select id from t where num in(1,2,3)    \n    --对于连续的数值，能用 between 就不要用 in 了：    \n    select id from t where num between 1 and 3\n    ```\n\n6. 下面的查询也将导致全表扫描：\n    ```sql\n    select id from t where name like '%abc%'\n    ```\n7. 应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：    \n    ```sql\n    select id from t where num/2=100    \n    ---应改为:    \n    select id from t where num=100*2\n    ```\n\n8. 应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：    \n    ```sql\n    select id from t where substring(name,1,3)='abc'--name以abc开头的id    \n    ---应改为:    \n    select id from t where name like 'abc%'\n    ```\n\n9. 不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。\n\n10. 在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。\n\n11. 不要写一些没有意义的查询，如需要生成一个空表结构：    \n    ```sql\n    select col1,col2 into #t from t where 1=0    \n    --这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：    \n    create table #t(...)\n    ```\n\n12. 很多时候用 exists 代替 in 是一个好的选择：    \n    ```sql\n    select num from a where num in(select num from b)    \n    --用下面的语句替换：    \n    select num from a where exists(select 1 from b where num=a.num)\n    ```\n\n13. 并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。\n\n14. 索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。    \n一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。\n\n15. 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。    \n这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。\n\n16. 尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。\n\n17. 任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。\n\n18. 避免频繁创建和删除临时表，以减少系统表资源的消耗。\n\n19. 临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。\n\n20. 在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。\n\n21. 如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。\n\n22. 尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。\n\n23. 使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。\n\n24. 与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。\n在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。\n\n25. 尽量避免大事务操作，提高系统并发能力。\n\n26. 尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。","source":"_posts/2021/07/sql-01.md","raw":"---\ntitle: 常见sql优化方式\ntags: mysql\ncategories: mysql\ncomments: true\nabbrlink: 9311\ndate: 2021-07-01 16:00:57\ntranslate_title: common-SQL-optimization-methods\n---\n1. 对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。\n\n2. 应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：    \n    ```sql\n    select id from t where num is null    \n    -- 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：    \n    select id from t where num=0\n    ```\n\n3. 应尽量避免在 where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。\n\n4. 应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：    \n    ```sql\n    select id from t where num=10 or num=20    \n    --可以这样查询：    \n    select id from t where num=10    \n    union all    \n    select id from t where num=20\n    ```\n\n5. in 和 not in 也要慎用，否则会导致全表扫描，如：    \n    ```sql\n    select id from t where num in(1,2,3)    \n    --对于连续的数值，能用 between 就不要用 in 了：    \n    select id from t where num between 1 and 3\n    ```\n\n6. 下面的查询也将导致全表扫描：\n    ```sql\n    select id from t where name like '%abc%'\n    ```\n7. 应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：    \n    ```sql\n    select id from t where num/2=100    \n    ---应改为:    \n    select id from t where num=100*2\n    ```\n\n8. 应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：    \n    ```sql\n    select id from t where substring(name,1,3)='abc'--name以abc开头的id    \n    ---应改为:    \n    select id from t where name like 'abc%'\n    ```\n\n9. 不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。\n\n10. 在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。\n\n11. 不要写一些没有意义的查询，如需要生成一个空表结构：    \n    ```sql\n    select col1,col2 into #t from t where 1=0    \n    --这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：    \n    create table #t(...)\n    ```\n\n12. 很多时候用 exists 代替 in 是一个好的选择：    \n    ```sql\n    select num from a where num in(select num from b)    \n    --用下面的语句替换：    \n    select num from a where exists(select 1 from b where num=a.num)\n    ```\n\n13. 并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。\n\n14. 索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。    \n一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。\n\n15. 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。    \n这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。\n\n16. 尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。\n\n17. 任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。\n\n18. 避免频繁创建和删除临时表，以减少系统表资源的消耗。\n\n19. 临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。\n\n20. 在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。\n\n21. 如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。\n\n22. 尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。\n\n23. 使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。\n\n24. 与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。\n在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。\n\n25. 尽量避免大事务操作，提高系统并发能力。\n\n26. 尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。","slug":"sql-01","published":1,"updated":"2022-04-06T09:51:44.934Z","layout":"post","photos":[],"link":"","_id":"cl235zcwj0030wjpjfghy39pb","content":"<ol>\n<li>\n<p>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>\n</li>\n<li>\n<p>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">is</span> <span class=\"keyword\">null</span>    </span><br><span class=\"line\"><span class=\"comment\">-- 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p>\n</li>\n<li>\n<p>应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">or</span> num<span class=\"operator\">=</span><span class=\"number\">20</span>    </span><br><span class=\"line\"><span class=\"comment\">--可以这样查询：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">10</span>    </span><br><span class=\"line\"><span class=\"keyword\">union</span> <span class=\"keyword\">all</span>    </span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>in 和 not in 也要慎用，否则会导致全表扫描，如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">in</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)    </span><br><span class=\"line\"><span class=\"comment\">--对于连续的数值，能用 between 就不要用 in 了：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">between</span> <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>下面的查询也将导致全表扫描：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%abc%&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">/</span><span class=\"number\">2</span><span class=\"operator\">=</span><span class=\"number\">100</span>    </span><br><span class=\"line\"><span class=\"comment\">---应改为:    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">100</span><span class=\"operator\">*</span><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> <span class=\"built_in\">substring</span>(name,<span class=\"number\">1</span>,<span class=\"number\">3</span>)<span class=\"operator\">=</span><span class=\"string\">&#x27;abc&#x27;</span><span class=\"comment\">--name以abc开头的id    </span></span><br><span class=\"line\"><span class=\"comment\">---应改为:    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;abc%&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p>\n</li>\n<li>\n<p>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p>\n</li>\n<li>\n<p>不要写一些没有意义的查询，如需要生成一个空表结构：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> col1,col2 <span class=\"keyword\">into</span> #t <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">0</span>    </span><br><span class=\"line\"><span class=\"comment\">--这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：    </span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> #t(...)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>很多时候用 exists 代替 in 是一个好的选择：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> a <span class=\"keyword\">where</span> num <span class=\"keyword\">in</span>(<span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> b)    </span><br><span class=\"line\"><span class=\"comment\">--用下面的语句替换：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> a <span class=\"keyword\">where</span> <span class=\"keyword\">exists</span>(<span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> b <span class=\"keyword\">where</span> num<span class=\"operator\">=</span>a.num)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p>\n</li>\n<li>\n<p>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。<br>\n一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p>\n</li>\n<li>\n<p>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。<br>\n这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p>\n</li>\n<li>\n<p>尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>\n</li>\n<li>\n<p>任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</p>\n</li>\n<li>\n<p>避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>\n</li>\n<li>\n<p>临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p>\n</li>\n<li>\n<p>在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>\n</li>\n<li>\n<p>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p>\n</li>\n<li>\n<p>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p>\n</li>\n<li>\n<p>使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>\n</li>\n<li>\n<p>与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。<br>\n在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p>\n</li>\n<li>\n<p>尽量避免大事务操作，提高系统并发能力。</p>\n</li>\n<li>\n<p>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>\n</li>\n</ol>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<ol>\n<li>\n<p>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>\n</li>\n<li>\n<p>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">is</span> <span class=\"keyword\">null</span>    </span><br><span class=\"line\"><span class=\"comment\">-- 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p>\n</li>\n<li>\n<p>应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">or</span> num<span class=\"operator\">=</span><span class=\"number\">20</span>    </span><br><span class=\"line\"><span class=\"comment\">--可以这样查询：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">10</span>    </span><br><span class=\"line\"><span class=\"keyword\">union</span> <span class=\"keyword\">all</span>    </span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>in 和 not in 也要慎用，否则会导致全表扫描，如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">in</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)    </span><br><span class=\"line\"><span class=\"comment\">--对于连续的数值，能用 between 就不要用 in 了：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">between</span> <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>下面的查询也将导致全表扫描：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%abc%&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">/</span><span class=\"number\">2</span><span class=\"operator\">=</span><span class=\"number\">100</span>    </span><br><span class=\"line\"><span class=\"comment\">---应改为:    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">100</span><span class=\"operator\">*</span><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> <span class=\"built_in\">substring</span>(name,<span class=\"number\">1</span>,<span class=\"number\">3</span>)<span class=\"operator\">=</span><span class=\"string\">&#x27;abc&#x27;</span><span class=\"comment\">--name以abc开头的id    </span></span><br><span class=\"line\"><span class=\"comment\">---应改为:    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;abc%&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p>\n</li>\n<li>\n<p>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p>\n</li>\n<li>\n<p>不要写一些没有意义的查询，如需要生成一个空表结构：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> col1,col2 <span class=\"keyword\">into</span> #t <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">0</span>    </span><br><span class=\"line\"><span class=\"comment\">--这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：    </span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> #t(...)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>很多时候用 exists 代替 in 是一个好的选择：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> a <span class=\"keyword\">where</span> num <span class=\"keyword\">in</span>(<span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> b)    </span><br><span class=\"line\"><span class=\"comment\">--用下面的语句替换：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> a <span class=\"keyword\">where</span> <span class=\"keyword\">exists</span>(<span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> b <span class=\"keyword\">where</span> num<span class=\"operator\">=</span>a.num)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p>\n</li>\n<li>\n<p>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。<br>\n一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p>\n</li>\n<li>\n<p>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。<br>\n这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p>\n</li>\n<li>\n<p>尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>\n</li>\n<li>\n<p>任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</p>\n</li>\n<li>\n<p>避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>\n</li>\n<li>\n<p>临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p>\n</li>\n<li>\n<p>在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>\n</li>\n<li>\n<p>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p>\n</li>\n<li>\n<p>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p>\n</li>\n<li>\n<p>使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>\n</li>\n<li>\n<p>与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。<br>\n在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p>\n</li>\n<li>\n<p>尽量避免大事务操作，提高系统并发能力。</p>\n</li>\n<li>\n<p>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>\n</li>\n</ol>\n"},{"title":"Java守护线程和非守护线程","comments":1,"translate_title":"thread-01","abbrlink":46320,"date":"2021-08-15T06:14:56.000Z","_content":"用户线程：我们平常创建的普通线程。\n\n守护线程：用来服务于用户线程；不需要上层逻辑介入\n\njava线程分为守护线程和非守护线程，当java jvm检测主线程或其他子线程执行完之后，守护线程也会马上停止执行，我们可以使用Thread.setDaemon(ture或false)来设置一个线程是守护线程还是非守护线程，默认为false，可以通过Thread.isDaemon()方法查询该线程是否是守护线程\n\n守护线程是所有的用户线程结束生命周期，守护线程才会结束生命周期，只要有一个用户线程存在，那么守护线程就不会结束，例如Java中的垃圾 回收器就是一个守护线程，只有应用程序中所有的线程结束，它才会结束。\n```java\npublic class DaemonThread {\n    public static void main(String[] args) {\n        Thread thread = new Thread(DaemonThread::print);\n        thread.setDaemon(true);\n        thread.start();\n        System.out.println(\"主线程main 结束\");\n    }\n\n    public static void print() {\n        int counter = 1;\n        //写一个死循环的方法来测试\n        while (true) {\n            try {\n                System.out.println(\"Counter:\" + counter++);\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n输出：\n```text\n主线程main 结束\nCounter:1\n```\n如果我们将daemon设置为非守护线程，代码如下:\n```java\nthread.setDaemon(false);\n```\n这个时候就不会退出while(true)循环了，会一直执行下去，结果如下：\n```text\n主线程main 结束\nCounter:1\nCounter:2\nCounter:3\nCounter:4\nCounter:5\n....\n```\n\n**总结：守护线程是为用户线程服务的，当用户线程全部结束，守护线程会自动结束。**\n\n**注意事项：**\n1. thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。\n2. 在Daemon线程中产生的新线程也是Daemon的。\n3. 守护线程不能用于去访问固有资源，比如读写操作或者计算逻辑。因为它会在任何时候甚至在一个操作的中间发生中断。\n4. Java自带的多线程框架，比如ExecutorService，会将守护线程转换为用户线程，所以如果要使用后台线程就不能用Java的线程池。\n\n**意义以及应用场景:**\n\n当主线程结束时，结束其余的子线程（守护线程）自动关闭，就免去了还要继续关闭子线程的麻烦。如：Java垃圾回收线程就是一个典型的守护线程；内存资源或者线程的管理，但是非守护线程也可以。","source":"_posts/2021/07/thread-01.md","raw":"---\ntitle: Java守护线程和非守护线程\ntags: 守护线程\ncategories: java\ncomments: true\ntranslate_title: thread-01\nabbrlink: 46320\ndate: 2021-08-15 14:14:56\n---\n用户线程：我们平常创建的普通线程。\n\n守护线程：用来服务于用户线程；不需要上层逻辑介入\n\njava线程分为守护线程和非守护线程，当java jvm检测主线程或其他子线程执行完之后，守护线程也会马上停止执行，我们可以使用Thread.setDaemon(ture或false)来设置一个线程是守护线程还是非守护线程，默认为false，可以通过Thread.isDaemon()方法查询该线程是否是守护线程\n\n守护线程是所有的用户线程结束生命周期，守护线程才会结束生命周期，只要有一个用户线程存在，那么守护线程就不会结束，例如Java中的垃圾 回收器就是一个守护线程，只有应用程序中所有的线程结束，它才会结束。\n```java\npublic class DaemonThread {\n    public static void main(String[] args) {\n        Thread thread = new Thread(DaemonThread::print);\n        thread.setDaemon(true);\n        thread.start();\n        System.out.println(\"主线程main 结束\");\n    }\n\n    public static void print() {\n        int counter = 1;\n        //写一个死循环的方法来测试\n        while (true) {\n            try {\n                System.out.println(\"Counter:\" + counter++);\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n输出：\n```text\n主线程main 结束\nCounter:1\n```\n如果我们将daemon设置为非守护线程，代码如下:\n```java\nthread.setDaemon(false);\n```\n这个时候就不会退出while(true)循环了，会一直执行下去，结果如下：\n```text\n主线程main 结束\nCounter:1\nCounter:2\nCounter:3\nCounter:4\nCounter:5\n....\n```\n\n**总结：守护线程是为用户线程服务的，当用户线程全部结束，守护线程会自动结束。**\n\n**注意事项：**\n1. thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。\n2. 在Daemon线程中产生的新线程也是Daemon的。\n3. 守护线程不能用于去访问固有资源，比如读写操作或者计算逻辑。因为它会在任何时候甚至在一个操作的中间发生中断。\n4. Java自带的多线程框架，比如ExecutorService，会将守护线程转换为用户线程，所以如果要使用后台线程就不能用Java的线程池。\n\n**意义以及应用场景:**\n\n当主线程结束时，结束其余的子线程（守护线程）自动关闭，就免去了还要继续关闭子线程的麻烦。如：Java垃圾回收线程就是一个典型的守护线程；内存资源或者线程的管理，但是非守护线程也可以。","slug":"thread-01","published":1,"updated":"2022-03-27T14:06:03.452Z","layout":"post","photos":[],"link":"","_id":"cl235zcwk0033wjpj4hbg7z6r","content":"<p>用户线程：我们平常创建的普通线程。</p>\n<p>守护线程：用来服务于用户线程；不需要上层逻辑介入</p>\n<p>java线程分为守护线程和非守护线程，当java jvm检测主线程或其他子线程执行完之后，守护线程也会马上停止执行，我们可以使用Thread.setDaemon(ture或false)来设置一个线程是守护线程还是非守护线程，默认为false，可以通过Thread.isDaemon()方法查询该线程是否是守护线程</p>\n<p>守护线程是所有的用户线程结束生命周期，守护线程才会结束生命周期，只要有一个用户线程存在，那么守护线程就不会结束，例如Java中的垃圾 回收器就是一个守护线程，只有应用程序中所有的线程结束，它才会结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaemonThread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(DaemonThread::print);</span><br><span class=\"line\">        thread.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;主线程main 结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> counter = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//写一个死循环的方法来测试</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Counter:&quot;</span> + counter++);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主线程main 结束</span><br><span class=\"line\">Counter:1</span><br></pre></td></tr></table></figure>\n<p>如果我们将daemon设置为非守护线程，代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread.setDaemon(<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>这个时候就不会退出while(true)循环了，会一直执行下去，结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主线程main 结束</span><br><span class=\"line\">Counter:1</span><br><span class=\"line\">Counter:2</span><br><span class=\"line\">Counter:3</span><br><span class=\"line\">Counter:4</span><br><span class=\"line\">Counter:5</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<p><strong>总结：守护线程是为用户线程服务的，当用户线程全部结束，守护线程会自动结束。</strong></p>\n<p><strong>注意事项：</strong></p>\n<ol>\n<li>thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。</li>\n<li>在Daemon线程中产生的新线程也是Daemon的。</li>\n<li>守护线程不能用于去访问固有资源，比如读写操作或者计算逻辑。因为它会在任何时候甚至在一个操作的中间发生中断。</li>\n<li>Java自带的多线程框架，比如ExecutorService，会将守护线程转换为用户线程，所以如果要使用后台线程就不能用Java的线程池。</li>\n</ol>\n<p><strong>意义以及应用场景:</strong></p>\n<p>当主线程结束时，结束其余的子线程（守护线程）自动关闭，就免去了还要继续关闭子线程的麻烦。如：Java垃圾回收线程就是一个典型的守护线程；内存资源或者线程的管理，但是非守护线程也可以。</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>用户线程：我们平常创建的普通线程。</p>\n<p>守护线程：用来服务于用户线程；不需要上层逻辑介入</p>\n<p>java线程分为守护线程和非守护线程，当java jvm检测主线程或其他子线程执行完之后，守护线程也会马上停止执行，我们可以使用Thread.setDaemon(ture或false)来设置一个线程是守护线程还是非守护线程，默认为false，可以通过Thread.isDaemon()方法查询该线程是否是守护线程</p>\n<p>守护线程是所有的用户线程结束生命周期，守护线程才会结束生命周期，只要有一个用户线程存在，那么守护线程就不会结束，例如Java中的垃圾 回收器就是一个守护线程，只有应用程序中所有的线程结束，它才会结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaemonThread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(DaemonThread::print);</span><br><span class=\"line\">        thread.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;主线程main 结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> counter = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//写一个死循环的方法来测试</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Counter:&quot;</span> + counter++);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主线程main 结束</span><br><span class=\"line\">Counter:1</span><br></pre></td></tr></table></figure>\n<p>如果我们将daemon设置为非守护线程，代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread.setDaemon(<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>这个时候就不会退出while(true)循环了，会一直执行下去，结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主线程main 结束</span><br><span class=\"line\">Counter:1</span><br><span class=\"line\">Counter:2</span><br><span class=\"line\">Counter:3</span><br><span class=\"line\">Counter:4</span><br><span class=\"line\">Counter:5</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<p><strong>总结：守护线程是为用户线程服务的，当用户线程全部结束，守护线程会自动结束。</strong></p>\n<p><strong>注意事项：</strong></p>\n<ol>\n<li>thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。</li>\n<li>在Daemon线程中产生的新线程也是Daemon的。</li>\n<li>守护线程不能用于去访问固有资源，比如读写操作或者计算逻辑。因为它会在任何时候甚至在一个操作的中间发生中断。</li>\n<li>Java自带的多线程框架，比如ExecutorService，会将守护线程转换为用户线程，所以如果要使用后台线程就不能用Java的线程池。</li>\n</ol>\n<p><strong>意义以及应用场景:</strong></p>\n<p>当主线程结束时，结束其余的子线程（守护线程）自动关闭，就免去了还要继续关闭子线程的麻烦。如：Java垃圾回收线程就是一个典型的守护线程；内存资源或者线程的管理，但是非守护线程也可以。</p>\n"},{"title":"Java线程的声明周期状态","comments":1,"translate_title":"thread-status","abbrlink":62212,"date":"2020-06-02T08:04:02.000Z","_content":"![线程的状态](./thread-status/01.jpg)\n1. **新建(NEW)**：新创建了一个线程对象。\n\n2. **可运行(RUNNABLE)**：线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu 的使用权 。\n\n3. **运行(RUNNING)**：可运行状态(runnable)的线程获得了cpu 时间片（timeslice） ，执行程序代码。\n4. **阻塞(BLOCKED)**：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种： \n   - **等待阻塞**：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。\n   - **同步阻塞**：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。\n   - **其他阻塞**：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。\n5. **死亡(DEAD)**：线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生。\n\n","source":"_posts/2021/07/thread-status.md","raw":"---\ntitle: Java线程的声明周期状态\ntags: 线程\ncategories: java\ncomments: true\ntranslate_title: thread-status\nabbrlink: 62212\ndate: 2020-06-02 16:04:02\n---\n![线程的状态](./thread-status/01.jpg)\n1. **新建(NEW)**：新创建了一个线程对象。\n\n2. **可运行(RUNNABLE)**：线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu 的使用权 。\n\n3. **运行(RUNNING)**：可运行状态(runnable)的线程获得了cpu 时间片（timeslice） ，执行程序代码。\n4. **阻塞(BLOCKED)**：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种： \n   - **等待阻塞**：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。\n   - **同步阻塞**：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。\n   - **其他阻塞**：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。\n5. **死亡(DEAD)**：线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生。\n\n","slug":"thread-status","published":1,"updated":"2022-03-27T14:06:03.459Z","layout":"post","photos":[],"link":"","_id":"cl235zcwl0037wjpj8q3nbyph","content":"<p><img src=\"/thread-status/01.jpg\" alt=\"线程的状态\"></p>\n<ol>\n<li>\n<p><strong>新建(NEW)</strong>：新创建了一个线程对象。</p>\n</li>\n<li>\n<p><strong>可运行(RUNNABLE)</strong>：线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu 的使用权 。</p>\n</li>\n<li>\n<p><strong>运行(RUNNING)</strong>：可运行状态(runnable)的线程获得了cpu 时间片（timeslice） ，执行程序代码。</p>\n</li>\n<li>\n<p><strong>阻塞(BLOCKED)</strong>：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种：</p>\n<ul>\n<li><strong>等待阻塞</strong>：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。</li>\n<li><strong>同步阻塞</strong>：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。</li>\n<li><strong>其他阻塞</strong>：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。</li>\n</ul>\n</li>\n<li>\n<p><strong>死亡(DEAD)</strong>：线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生。</p>\n</li>\n</ol>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p><img src=\"/thread-status/01.jpg\" alt=\"线程的状态\"></p>\n<ol>\n<li>\n<p><strong>新建(NEW)</strong>：新创建了一个线程对象。</p>\n</li>\n<li>\n<p><strong>可运行(RUNNABLE)</strong>：线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu 的使用权 。</p>\n</li>\n<li>\n<p><strong>运行(RUNNING)</strong>：可运行状态(runnable)的线程获得了cpu 时间片（timeslice） ，执行程序代码。</p>\n</li>\n<li>\n<p><strong>阻塞(BLOCKED)</strong>：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种：</p>\n<ul>\n<li><strong>等待阻塞</strong>：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。</li>\n<li><strong>同步阻塞</strong>：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。</li>\n<li><strong>其他阻塞</strong>：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。</li>\n</ul>\n</li>\n<li>\n<p><strong>死亡(DEAD)</strong>：线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生。</p>\n</li>\n</ol>\n"},{"title":"Hexo添加评论系统Valine","comments":1,"abbrlink":39319,"date":"2021-07-27T13:49:57.000Z","translate_title":"valine","_content":" \nHexo的评论系统有很多，常见的有以下几个\n- ~~多说~~\n- ~~网易云跟帖~~\n- 畅言\n- 来必力（LiveRe）\n- Disqus\n- Hypercomments\n- valine\n\n首先多说和网易云已经倒下了，其次畅言需要备案，Disqus，Hypercomments和LiveRe都是国外的，加载速度贼慢，甚至有被墙的可能，寻觅了很久之后，从Material主题换成next主题之后，终于找到了一个好用的评论系统，那就是 valine\n\n我使用的是Next 6.x版本，本身就已经集成了valine，因此正常情况下是按照官方文档走就可以了，5分钟开启你的评论系统~\n\n1. 注册LeanCloud\n   \n   我们的评论系统其实是放在Leancloud上的，因此首先需要去注册一个账号，注册地址：https://www.leancloud.cn/\n   ![](./valine/1.png)\n   \n2. 获取AppId\n   \n   注册完了之后 创建一个应用，名字随便起；然后进入应用->设置->应用凭证 中获取appid 和 appkey\n   ![](./valine/2.png)\n   \n3. 配置valine\n   \n   拿到appid和appkey之后，打开主题配置文件_config.yml 搜索 valine，填入appid 和 appkey\n   ```yaml\n     comment:\n         type: valine  # 启用哪种评论系统\n         valine: # Valine. https://valine.js.org\n            appid: your leancloud application appid\n            appkey: your leancloud application appkey\n            notify: false # mail notifier , https://github.com/xCss/Valine/wiki\n            verify: false # Verification code\n            placeholder: Just go go # comment box placeholder\n            avatar: mm # gravatar style\n            meta: nick,mail #,link      #   custom comment header\n            pageSize: 10 # pagination size\n            visitor: true # Article reading statistic https://valine.js.org/visitor.html\n    ```\n   \n4. LeanCloud 安全域名配置\n   \n   在LeanCloud -> 设置 -> 安全中心 -> Web 安全域名 把你的域名加进去\n   ![](./valine/3.png)\n   \n5. 查看评论数据\n   \n   在数据存储 -> 结构化数据 中可以查看到所有的存储的数据信息\n   ![](./valine/4.png)","source":"_posts/2021/07/valine.md","raw":"---\ntitle: Hexo添加评论系统Valine\ncomments: true\nabbrlink: 39319\ndate: 2021-07-27 21:49:57\ntags: hexo\ncategories: 踩坑记录\ntranslate_title: valine\n---\n \nHexo的评论系统有很多，常见的有以下几个\n- ~~多说~~\n- ~~网易云跟帖~~\n- 畅言\n- 来必力（LiveRe）\n- Disqus\n- Hypercomments\n- valine\n\n首先多说和网易云已经倒下了，其次畅言需要备案，Disqus，Hypercomments和LiveRe都是国外的，加载速度贼慢，甚至有被墙的可能，寻觅了很久之后，从Material主题换成next主题之后，终于找到了一个好用的评论系统，那就是 valine\n\n我使用的是Next 6.x版本，本身就已经集成了valine，因此正常情况下是按照官方文档走就可以了，5分钟开启你的评论系统~\n\n1. 注册LeanCloud\n   \n   我们的评论系统其实是放在Leancloud上的，因此首先需要去注册一个账号，注册地址：https://www.leancloud.cn/\n   ![](./valine/1.png)\n   \n2. 获取AppId\n   \n   注册完了之后 创建一个应用，名字随便起；然后进入应用->设置->应用凭证 中获取appid 和 appkey\n   ![](./valine/2.png)\n   \n3. 配置valine\n   \n   拿到appid和appkey之后，打开主题配置文件_config.yml 搜索 valine，填入appid 和 appkey\n   ```yaml\n     comment:\n         type: valine  # 启用哪种评论系统\n         valine: # Valine. https://valine.js.org\n            appid: your leancloud application appid\n            appkey: your leancloud application appkey\n            notify: false # mail notifier , https://github.com/xCss/Valine/wiki\n            verify: false # Verification code\n            placeholder: Just go go # comment box placeholder\n            avatar: mm # gravatar style\n            meta: nick,mail #,link      #   custom comment header\n            pageSize: 10 # pagination size\n            visitor: true # Article reading statistic https://valine.js.org/visitor.html\n    ```\n   \n4. LeanCloud 安全域名配置\n   \n   在LeanCloud -> 设置 -> 安全中心 -> Web 安全域名 把你的域名加进去\n   ![](./valine/3.png)\n   \n5. 查看评论数据\n   \n   在数据存储 -> 结构化数据 中可以查看到所有的存储的数据信息\n   ![](./valine/4.png)","slug":"valine","published":1,"updated":"2022-03-27T14:13:00.701Z","layout":"post","photos":[],"link":"","_id":"cl235zcwl003awjpjf7a2b25g","content":"<p>Hexo的评论系统有很多，常见的有以下几个</p>\n<ul>\n<li><s>多说</s></li>\n<li><s>网易云跟帖</s></li>\n<li>畅言</li>\n<li>来必力（LiveRe）</li>\n<li>Disqus</li>\n<li>Hypercomments</li>\n<li>valine</li>\n</ul>\n<p>首先多说和网易云已经倒下了，其次畅言需要备案，Disqus，Hypercomments和LiveRe都是国外的，加载速度贼慢，甚至有被墙的可能，寻觅了很久之后，从Material主题换成next主题之后，终于找到了一个好用的评论系统，那就是 valine</p>\n<p>我使用的是Next 6.x版本，本身就已经集成了valine，因此正常情况下是按照官方文档走就可以了，5分钟开启你的评论系统~</p>\n<ol>\n<li>\n<p>注册LeanCloud</p>\n<p>我们的评论系统其实是放在Leancloud上的，因此首先需要去注册一个账号，注册地址：<a href=\"https://www.leancloud.cn/\">https://www.leancloud.cn/</a><br>\n<img src=\"/valine/1.png\" alt></p>\n</li>\n<li>\n<p>获取AppId</p>\n<p>注册完了之后 创建一个应用，名字随便起；然后进入应用-&gt;设置-&gt;应用凭证 中获取appid 和 appkey<br>\n<img src=\"/valine/2.png\" alt></p>\n</li>\n<li>\n<p>配置valine</p>\n<p>拿到appid和appkey之后，打开主题配置文件_config.yml 搜索 valine，填入appid 和 appkey</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">comment:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">valine</span>  <span class=\"comment\"># 启用哪种评论系统</span></span><br><span class=\"line\">    <span class=\"attr\">valine:</span> <span class=\"comment\"># Valine. https://valine.js.org</span></span><br><span class=\"line\">       <span class=\"attr\">appid:</span> <span class=\"string\">your</span> <span class=\"string\">leancloud</span> <span class=\"string\">application</span> <span class=\"string\">appid</span></span><br><span class=\"line\">       <span class=\"attr\">appkey:</span> <span class=\"string\">your</span> <span class=\"string\">leancloud</span> <span class=\"string\">application</span> <span class=\"string\">appkey</span></span><br><span class=\"line\">       <span class=\"attr\">notify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class=\"line\">       <span class=\"attr\">verify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Verification code</span></span><br><span class=\"line\">       <span class=\"attr\">placeholder:</span> <span class=\"string\">Just</span> <span class=\"string\">go</span> <span class=\"string\">go</span> <span class=\"comment\"># comment box placeholder</span></span><br><span class=\"line\">       <span class=\"attr\">avatar:</span> <span class=\"string\">mm</span> <span class=\"comment\"># gravatar style</span></span><br><span class=\"line\">       <span class=\"attr\">meta:</span> <span class=\"string\">nick,mail</span> <span class=\"comment\">#,link      #   custom comment header</span></span><br><span class=\"line\">       <span class=\"attr\">pageSize:</span> <span class=\"number\">10</span> <span class=\"comment\"># pagination size</span></span><br><span class=\"line\">       <span class=\"attr\">visitor:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Article reading statistic https://valine.js.org/visitor.html</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>LeanCloud 安全域名配置</p>\n<p>在LeanCloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去<br>\n<img src=\"/valine/3.png\" alt></p>\n</li>\n<li>\n<p>查看评论数据</p>\n<p>在数据存储 -&gt; 结构化数据 中可以查看到所有的存储的数据信息<br>\n<img src=\"/valine/4.png\" alt></p>\n</li>\n</ol>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>Hexo的评论系统有很多，常见的有以下几个</p>\n<ul>\n<li><s>多说</s></li>\n<li><s>网易云跟帖</s></li>\n<li>畅言</li>\n<li>来必力（LiveRe）</li>\n<li>Disqus</li>\n<li>Hypercomments</li>\n<li>valine</li>\n</ul>\n<p>首先多说和网易云已经倒下了，其次畅言需要备案，Disqus，Hypercomments和LiveRe都是国外的，加载速度贼慢，甚至有被墙的可能，寻觅了很久之后，从Material主题换成next主题之后，终于找到了一个好用的评论系统，那就是 valine</p>\n<p>我使用的是Next 6.x版本，本身就已经集成了valine，因此正常情况下是按照官方文档走就可以了，5分钟开启你的评论系统~</p>\n<ol>\n<li>\n<p>注册LeanCloud</p>\n<p>我们的评论系统其实是放在Leancloud上的，因此首先需要去注册一个账号，注册地址：<a href=\"https://www.leancloud.cn/\">https://www.leancloud.cn/</a><br>\n<img src=\"/valine/1.png\" alt></p>\n</li>\n<li>\n<p>获取AppId</p>\n<p>注册完了之后 创建一个应用，名字随便起；然后进入应用-&gt;设置-&gt;应用凭证 中获取appid 和 appkey<br>\n<img src=\"/valine/2.png\" alt></p>\n</li>\n<li>\n<p>配置valine</p>\n<p>拿到appid和appkey之后，打开主题配置文件_config.yml 搜索 valine，填入appid 和 appkey</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">comment:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">valine</span>  <span class=\"comment\"># 启用哪种评论系统</span></span><br><span class=\"line\">    <span class=\"attr\">valine:</span> <span class=\"comment\"># Valine. https://valine.js.org</span></span><br><span class=\"line\">       <span class=\"attr\">appid:</span> <span class=\"string\">your</span> <span class=\"string\">leancloud</span> <span class=\"string\">application</span> <span class=\"string\">appid</span></span><br><span class=\"line\">       <span class=\"attr\">appkey:</span> <span class=\"string\">your</span> <span class=\"string\">leancloud</span> <span class=\"string\">application</span> <span class=\"string\">appkey</span></span><br><span class=\"line\">       <span class=\"attr\">notify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class=\"line\">       <span class=\"attr\">verify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Verification code</span></span><br><span class=\"line\">       <span class=\"attr\">placeholder:</span> <span class=\"string\">Just</span> <span class=\"string\">go</span> <span class=\"string\">go</span> <span class=\"comment\"># comment box placeholder</span></span><br><span class=\"line\">       <span class=\"attr\">avatar:</span> <span class=\"string\">mm</span> <span class=\"comment\"># gravatar style</span></span><br><span class=\"line\">       <span class=\"attr\">meta:</span> <span class=\"string\">nick,mail</span> <span class=\"comment\">#,link      #   custom comment header</span></span><br><span class=\"line\">       <span class=\"attr\">pageSize:</span> <span class=\"number\">10</span> <span class=\"comment\"># pagination size</span></span><br><span class=\"line\">       <span class=\"attr\">visitor:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Article reading statistic https://valine.js.org/visitor.html</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>LeanCloud 安全域名配置</p>\n<p>在LeanCloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去<br>\n<img src=\"/valine/3.png\" alt></p>\n</li>\n<li>\n<p>查看评论数据</p>\n<p>在数据存储 -&gt; 结构化数据 中可以查看到所有的存储的数据信息<br>\n<img src=\"/valine/4.png\" alt></p>\n</li>\n</ol>\n"},{"title":"volatile关键字","comments":1,"translate_title":"volatile1","abbrlink":63695,"date":"2021-08-02T10:20:38.000Z","_content":"## 1.volatile作用\n  volatile保证有序性，可见性，不能保证原子性\n  \n1. 禁止指令重排\n2. 保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量值，这个新值对其他线程立即可见的\n3. 不能保证原子性(线程不安全)\n\n## 2. 实现原理\n1. 通过插入内存屏障指令禁止编译器和CPU对程序进行重排序。\n2. 当对声明了volatile的变量进行写操作时，JVM就会向处理器发送一条Lock前缀的指令，这条Lock前缀指令产生如下两个作用：\n    - Lock前缀指令会引起处理器缓存回写到系统内存，并使用缓存一致性机制来确保回写的原子性。\n    - 一个处理器的缓存回写到系统内存会导致其他处理器的缓存无效。处理器使用MESI控制协议去维护内部缓存和其他处理器缓存的一致性。处理器能嗅探其他处理器访问系统内存和它们的内部缓存。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。例如，在Pentium和P6 family处理器中，如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充\n## 3.synchronized与volatile比较\n1. volatile关键字是线程同步的轻量级实现，性能较synchronized好；但是volatile关键字只能用于变量，而synchronized关键字可以修饰方法以及代码块\n2. synchronized关键字在java1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其他各种优化之后执行效率有了显著的提升；\n3. 多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞\n4. volatile关键字保证数据的可见性，但是不能保证数据的原子性；synchronized关键字两者都能保证（synchronized保证原子性，有序性，可见性）\n5. volatile关键字主要用于解决变量在多个线程之间的可见性，而synchronized关键字解决的是多个线程之间访问资源的同步性。\n6. synchronized是同步锁，同步快内的代码相当于同一时刻单线程执行\n   \n## 4. 可见性问题\nJava虚拟机规范中定义了一种Java内存 模型（Java Memory Model，即JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的并发效果。Java内存模型的主要目标就是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的细节。\n\nJMM中规定所有的变量都存储在主内存（Main Memory）中，每条线程都有自己的工作内存（Work Memory），线程的工作内存中保存了该线程所使用的变量的从主内存中拷贝的副本。线程对于变量的读、写都必须在工作内存中进行，而不能直接读、写主内存中的变量。同时，本线程的工作内存的变量也无法被其他线程直接访问，必须通过主内存完成\n整体内存模型如下：\n![image-20201210103251475](./volatile/01.png)\n\n### 4.1 synchronized\nsynchronized关键字的语义JMM（Java Main Memory）有两个规定，保证其实现内存可见性：\n    - **线程解锁前，必须把共享变量的最新值刷新到主内存中**\n    - **线程加锁前，将清空工作内存中共享变量的值，从主内存中重新取值**\n    \n### 4.2 volatile\n- 当对volatile变量执行写操作后，JMM会把工作内存中的最新变量值强制刷新到主内存\n- 写操作会导致其他线程中的缓存无效\n这样，其他线程使用缓存时，发现本地工作内存中此变量无效，便从主内存中获取，这样获取到的变量便是最新的值，实现了线程的可见性。","source":"_posts/2021/07/volatile.md","raw":"---\ntitle: volatile关键字\ntags: 线程\ncategories: java\ncomments: true\ntranslate_title: volatile1\nabbrlink: 63695\ndate: 2021-08-02 18:20:38\n---\n## 1.volatile作用\n  volatile保证有序性，可见性，不能保证原子性\n  \n1. 禁止指令重排\n2. 保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量值，这个新值对其他线程立即可见的\n3. 不能保证原子性(线程不安全)\n\n## 2. 实现原理\n1. 通过插入内存屏障指令禁止编译器和CPU对程序进行重排序。\n2. 当对声明了volatile的变量进行写操作时，JVM就会向处理器发送一条Lock前缀的指令，这条Lock前缀指令产生如下两个作用：\n    - Lock前缀指令会引起处理器缓存回写到系统内存，并使用缓存一致性机制来确保回写的原子性。\n    - 一个处理器的缓存回写到系统内存会导致其他处理器的缓存无效。处理器使用MESI控制协议去维护内部缓存和其他处理器缓存的一致性。处理器能嗅探其他处理器访问系统内存和它们的内部缓存。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。例如，在Pentium和P6 family处理器中，如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充\n## 3.synchronized与volatile比较\n1. volatile关键字是线程同步的轻量级实现，性能较synchronized好；但是volatile关键字只能用于变量，而synchronized关键字可以修饰方法以及代码块\n2. synchronized关键字在java1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其他各种优化之后执行效率有了显著的提升；\n3. 多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞\n4. volatile关键字保证数据的可见性，但是不能保证数据的原子性；synchronized关键字两者都能保证（synchronized保证原子性，有序性，可见性）\n5. volatile关键字主要用于解决变量在多个线程之间的可见性，而synchronized关键字解决的是多个线程之间访问资源的同步性。\n6. synchronized是同步锁，同步快内的代码相当于同一时刻单线程执行\n   \n## 4. 可见性问题\nJava虚拟机规范中定义了一种Java内存 模型（Java Memory Model，即JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的并发效果。Java内存模型的主要目标就是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的细节。\n\nJMM中规定所有的变量都存储在主内存（Main Memory）中，每条线程都有自己的工作内存（Work Memory），线程的工作内存中保存了该线程所使用的变量的从主内存中拷贝的副本。线程对于变量的读、写都必须在工作内存中进行，而不能直接读、写主内存中的变量。同时，本线程的工作内存的变量也无法被其他线程直接访问，必须通过主内存完成\n整体内存模型如下：\n![image-20201210103251475](./volatile/01.png)\n\n### 4.1 synchronized\nsynchronized关键字的语义JMM（Java Main Memory）有两个规定，保证其实现内存可见性：\n    - **线程解锁前，必须把共享变量的最新值刷新到主内存中**\n    - **线程加锁前，将清空工作内存中共享变量的值，从主内存中重新取值**\n    \n### 4.2 volatile\n- 当对volatile变量执行写操作后，JMM会把工作内存中的最新变量值强制刷新到主内存\n- 写操作会导致其他线程中的缓存无效\n这样，其他线程使用缓存时，发现本地工作内存中此变量无效，便从主内存中获取，这样获取到的变量便是最新的值，实现了线程的可见性。","slug":"volatile","published":1,"updated":"2022-03-27T14:06:03.371Z","layout":"post","photos":[],"link":"","_id":"cl235zcwm003ewjpj9rnj2132","content":"<h2 id=\"1volatile作用\"><a class=\"markdownIt-Anchor\" href=\"#1volatile作用\"></a> 1.volatile作用</h2>\n<p>volatile保证有序性，可见性，不能保证原子性</p>\n<ol>\n<li>禁止指令重排</li>\n<li>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量值，这个新值对其他线程立即可见的</li>\n<li>不能保证原子性(线程不安全)</li>\n</ol>\n<h2 id=\"2-实现原理\"><a class=\"markdownIt-Anchor\" href=\"#2-实现原理\"></a> 2. 实现原理</h2>\n<ol>\n<li>通过插入内存屏障指令禁止编译器和CPU对程序进行重排序。</li>\n<li>当对声明了volatile的变量进行写操作时，JVM就会向处理器发送一条Lock前缀的指令，这条Lock前缀指令产生如下两个作用：\n<ul>\n<li>Lock前缀指令会引起处理器缓存回写到系统内存，并使用缓存一致性机制来确保回写的原子性。</li>\n<li>一个处理器的缓存回写到系统内存会导致其他处理器的缓存无效。处理器使用MESI控制协议去维护内部缓存和其他处理器缓存的一致性。处理器能嗅探其他处理器访问系统内存和它们的内部缓存。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。例如，在Pentium和P6 family处理器中，如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"3synchronized与volatile比较\"><a class=\"markdownIt-Anchor\" href=\"#3synchronized与volatile比较\"></a> 3.synchronized与volatile比较</h2>\n<ol>\n<li>volatile关键字是线程同步的轻量级实现，性能较synchronized好；但是volatile关键字只能用于变量，而synchronized关键字可以修饰方法以及代码块</li>\n<li>synchronized关键字在java1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其他各种优化之后执行效率有了显著的提升；</li>\n<li>多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞</li>\n<li>volatile关键字保证数据的可见性，但是不能保证数据的原子性；synchronized关键字两者都能保证（synchronized保证原子性，有序性，可见性）</li>\n<li>volatile关键字主要用于解决变量在多个线程之间的可见性，而synchronized关键字解决的是多个线程之间访问资源的同步性。</li>\n<li>synchronized是同步锁，同步快内的代码相当于同一时刻单线程执行</li>\n</ol>\n<h2 id=\"4-可见性问题\"><a class=\"markdownIt-Anchor\" href=\"#4-可见性问题\"></a> 4. 可见性问题</h2>\n<p>Java虚拟机规范中定义了一种Java内存 模型（Java Memory Model，即JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的并发效果。Java内存模型的主要目标就是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的细节。</p>\n<p>JMM中规定所有的变量都存储在主内存（Main Memory）中，每条线程都有自己的工作内存（Work Memory），线程的工作内存中保存了该线程所使用的变量的从主内存中拷贝的副本。线程对于变量的读、写都必须在工作内存中进行，而不能直接读、写主内存中的变量。同时，本线程的工作内存的变量也无法被其他线程直接访问，必须通过主内存完成<br>\n整体内存模型如下：<br>\n<img src=\"/volatile/01.png\" alt=\"image-20201210103251475\"></p>\n<h3 id=\"41-synchronized\"><a class=\"markdownIt-Anchor\" href=\"#41-synchronized\"></a> 4.1 synchronized</h3>\n<p>synchronized关键字的语义JMM（Java Main Memory）有两个规定，保证其实现内存可见性：<br>\n- <strong>线程解锁前，必须把共享变量的最新值刷新到主内存中</strong><br>\n- <strong>线程加锁前，将清空工作内存中共享变量的值，从主内存中重新取值</strong></p>\n<h3 id=\"42-volatile\"><a class=\"markdownIt-Anchor\" href=\"#42-volatile\"></a> 4.2 volatile</h3>\n<ul>\n<li>当对volatile变量执行写操作后，JMM会把工作内存中的最新变量值强制刷新到主内存</li>\n<li>写操作会导致其他线程中的缓存无效<br>\n这样，其他线程使用缓存时，发现本地工作内存中此变量无效，便从主内存中获取，这样获取到的变量便是最新的值，实现了线程的可见性。</li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1volatile作用\"><a class=\"markdownIt-Anchor\" href=\"#1volatile作用\"></a> 1.volatile作用</h2>\n<p>volatile保证有序性，可见性，不能保证原子性</p>\n<ol>\n<li>禁止指令重排</li>\n<li>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量值，这个新值对其他线程立即可见的</li>\n<li>不能保证原子性(线程不安全)</li>\n</ol>\n<h2 id=\"2-实现原理\"><a class=\"markdownIt-Anchor\" href=\"#2-实现原理\"></a> 2. 实现原理</h2>\n<ol>\n<li>通过插入内存屏障指令禁止编译器和CPU对程序进行重排序。</li>\n<li>当对声明了volatile的变量进行写操作时，JVM就会向处理器发送一条Lock前缀的指令，这条Lock前缀指令产生如下两个作用：\n<ul>\n<li>Lock前缀指令会引起处理器缓存回写到系统内存，并使用缓存一致性机制来确保回写的原子性。</li>\n<li>一个处理器的缓存回写到系统内存会导致其他处理器的缓存无效。处理器使用MESI控制协议去维护内部缓存和其他处理器缓存的一致性。处理器能嗅探其他处理器访问系统内存和它们的内部缓存。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。例如，在Pentium和P6 family处理器中，如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"3synchronized与volatile比较\"><a class=\"markdownIt-Anchor\" href=\"#3synchronized与volatile比较\"></a> 3.synchronized与volatile比较</h2>\n<ol>\n<li>volatile关键字是线程同步的轻量级实现，性能较synchronized好；但是volatile关键字只能用于变量，而synchronized关键字可以修饰方法以及代码块</li>\n<li>synchronized关键字在java1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其他各种优化之后执行效率有了显著的提升；</li>\n<li>多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞</li>\n<li>volatile关键字保证数据的可见性，但是不能保证数据的原子性；synchronized关键字两者都能保证（synchronized保证原子性，有序性，可见性）</li>\n<li>volatile关键字主要用于解决变量在多个线程之间的可见性，而synchronized关键字解决的是多个线程之间访问资源的同步性。</li>\n<li>synchronized是同步锁，同步快内的代码相当于同一时刻单线程执行</li>\n</ol>\n<h2 id=\"4-可见性问题\"><a class=\"markdownIt-Anchor\" href=\"#4-可见性问题\"></a> 4. 可见性问题</h2>\n<p>Java虚拟机规范中定义了一种Java内存 模型（Java Memory Model，即JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的并发效果。Java内存模型的主要目标就是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的细节。</p>\n<p>JMM中规定所有的变量都存储在主内存（Main Memory）中，每条线程都有自己的工作内存（Work Memory），线程的工作内存中保存了该线程所使用的变量的从主内存中拷贝的副本。线程对于变量的读、写都必须在工作内存中进行，而不能直接读、写主内存中的变量。同时，本线程的工作内存的变量也无法被其他线程直接访问，必须通过主内存完成<br>\n整体内存模型如下：<br>\n<img src=\"/volatile/01.png\" alt=\"image-20201210103251475\"></p>\n<h3 id=\"41-synchronized\"><a class=\"markdownIt-Anchor\" href=\"#41-synchronized\"></a> 4.1 synchronized</h3>\n<p>synchronized关键字的语义JMM（Java Main Memory）有两个规定，保证其实现内存可见性：<br>\n- <strong>线程解锁前，必须把共享变量的最新值刷新到主内存中</strong><br>\n- <strong>线程加锁前，将清空工作内存中共享变量的值，从主内存中重新取值</strong></p>\n<h3 id=\"42-volatile\"><a class=\"markdownIt-Anchor\" href=\"#42-volatile\"></a> 4.2 volatile</h3>\n<ul>\n<li>当对volatile变量执行写操作后，JMM会把工作内存中的最新变量值强制刷新到主内存</li>\n<li>写操作会导致其他线程中的缓存无效<br>\n这样，其他线程使用缓存时，发现本地工作内存中此变量无效，便从主内存中获取，这样获取到的变量便是最新的值，实现了线程的可见性。</li>\n</ul>\n"},{"title":"在线修改静态文件","comments":1,"abbrlink":35817,"date":"2021-05-13T05:40:44.000Z","translate_title":"static-file-modify-online","_content":"项目运行时，如果需要修改某个css、js、html等文件的时候，需要自己连接到服务器然后修改，更有甚者需要连接vpn、堡垒机等等，特别烦！！！！于是弄了一个在线修改静态文件的工具，在此记录一下。\n#### 1. 引入pom\n\n```xml\n<dependency>\n  \t<groupId>com.github.xiaoyuge5201</groupId>\n  \t<artifactId>static-file-modify-online</artifactId>\n  \t<version>1.2.1</version>\n</dependency>\n```\n#### 2. 添加前后台代码\n前台使用的是thymeleaf，根据自己项目的实际情况修改！\n```txt\n链接: https://pan.baidu.com/s/1oW38vpj74yKOOtbu5xGCOQ  \n密码: tcmg\n```","source":"_posts/2021/07/在线修改静态文件.md","raw":"---\ntitle: 在线修改静态文件\ntags: java\ncategories: java\ncomments: true\nabbrlink: 35817\ndate: 2021-05-13 13:40:44\ntranslate_title: static-file-modify-online\n---\n项目运行时，如果需要修改某个css、js、html等文件的时候，需要自己连接到服务器然后修改，更有甚者需要连接vpn、堡垒机等等，特别烦！！！！于是弄了一个在线修改静态文件的工具，在此记录一下。\n#### 1. 引入pom\n\n```xml\n<dependency>\n  \t<groupId>com.github.xiaoyuge5201</groupId>\n  \t<artifactId>static-file-modify-online</artifactId>\n  \t<version>1.2.1</version>\n</dependency>\n```\n#### 2. 添加前后台代码\n前台使用的是thymeleaf，根据自己项目的实际情况修改！\n```txt\n链接: https://pan.baidu.com/s/1oW38vpj74yKOOtbu5xGCOQ  \n密码: tcmg\n```","slug":"在线修改静态文件","published":1,"updated":"2022-04-17T03:47:28.555Z","layout":"post","photos":[],"link":"","_id":"cl235zcwn003hwjpjb8f7hry6","content":"<p>项目运行时，如果需要修改某个css、js、html等文件的时候，需要自己连接到服务器然后修改，更有甚者需要连接vpn、堡垒机等等，特别烦！！！！于是弄了一个在线修改静态文件的工具，在此记录一下。</p>\n<h4 id=\"1-引入pom\"><a class=\"markdownIt-Anchor\" href=\"#1-引入pom\"></a> 1. 引入pom</h4>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.xiaoyuge5201<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>static-file-modify-online<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-添加前后台代码\"><a class=\"markdownIt-Anchor\" href=\"#2-添加前后台代码\"></a> 2. 添加前后台代码</h4>\n<p>前台使用的是thymeleaf，根据自己项目的实际情况修改！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">链接: https://pan.baidu.com/s/1oW38vpj74yKOOtbu5xGCOQ  </span><br><span class=\"line\">密码: tcmg</span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>项目运行时，如果需要修改某个css、js、html等文件的时候，需要自己连接到服务器然后修改，更有甚者需要连接vpn、堡垒机等等，特别烦！！！！于是弄了一个在线修改静态文件的工具，在此记录一下。</p>\n<h4 id=\"1-引入pom\"><a class=\"markdownIt-Anchor\" href=\"#1-引入pom\"></a> 1. 引入pom</h4>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.xiaoyuge5201<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>static-file-modify-online<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-添加前后台代码\"><a class=\"markdownIt-Anchor\" href=\"#2-添加前后台代码\"></a> 2. 添加前后台代码</h4>\n<p>前台使用的是thymeleaf，根据自己项目的实际情况修改！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">链接: https://pan.baidu.com/s/1oW38vpj74yKOOtbu5xGCOQ  </span><br><span class=\"line\">密码: tcmg</span><br></pre></td></tr></table></figure>"},{"title":"docker安装","comments":1,"abbrlink":8175,"date":"2021-12-09T13:20:57.000Z","translate_title":"docker-01","_content":"新的服务器没有安装docker，使用docker命令时提示：docker: command not found错误信息\n##### 1. 更新yum包\n```shell\nyum update\n```\n\n##### 2.安装依赖软件包\n```shell\nyum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n##### 3.设置yum源\n```shell\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n```\n#####  4.安装docker\n```shell\n#默认安装最新的docker稳定版本。\nyum install docker-ce\n```\n##### 5.启动docker服务\n```shell\nsystemctl start docker\n```\n##### 6.设置开机自启动\n```shell\nsystemctl enable docker\n```\n##### 7. 查看docker版本信息\n```shell\ndocker version\n```\n![查看docker版本](./docker-01/1.png)\n至此，解决。\n\n##### 8. 停止所有容器\n```shell\ndocker stop $(docker ps -a | awk '{ print $1}' | tail -n +2)\n```\n","source":"_posts/2021/12/docker-01.md","raw":"---\ntitle: docker安装\ncomments: true\ntags: docker\ncategories: Docker\nabbrlink: 8175\ndate: 2021-12-09 21:20:57\ntranslate_title: docker-01\n---\n新的服务器没有安装docker，使用docker命令时提示：docker: command not found错误信息\n##### 1. 更新yum包\n```shell\nyum update\n```\n\n##### 2.安装依赖软件包\n```shell\nyum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n##### 3.设置yum源\n```shell\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n```\n#####  4.安装docker\n```shell\n#默认安装最新的docker稳定版本。\nyum install docker-ce\n```\n##### 5.启动docker服务\n```shell\nsystemctl start docker\n```\n##### 6.设置开机自启动\n```shell\nsystemctl enable docker\n```\n##### 7. 查看docker版本信息\n```shell\ndocker version\n```\n![查看docker版本](./docker-01/1.png)\n至此，解决。\n\n##### 8. 停止所有容器\n```shell\ndocker stop $(docker ps -a | awk '{ print $1}' | tail -n +2)\n```\n","slug":"docker-01","published":1,"updated":"2022-04-02T07:45:56.614Z","layout":"post","photos":[],"link":"","_id":"cl235zcwn003lwjpj2jss8npm","content":"<p>新的服务器没有安装docker，使用docker命令时提示：docker: command not found错误信息</p>\n<h5 id=\"1-更新yum包\"><a class=\"markdownIt-Anchor\" href=\"#1-更新yum包\"></a> 1. 更新yum包</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br></pre></td></tr></table></figure>\n<h5 id=\"2安装依赖软件包\"><a class=\"markdownIt-Anchor\" href=\"#2安装依赖软件包\"></a> 2.安装依赖软件包</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>\n<h5 id=\"3设置yum源\"><a class=\"markdownIt-Anchor\" href=\"#3设置yum源\"></a> 3.设置yum源</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<h5 id=\"4安装docker\"><a class=\"markdownIt-Anchor\" href=\"#4安装docker\"></a> 4.安装docker</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">默认安装最新的docker稳定版本。</span></span><br><span class=\"line\">yum install docker-ce</span><br></pre></td></tr></table></figure>\n<h5 id=\"5启动docker服务\"><a class=\"markdownIt-Anchor\" href=\"#5启动docker服务\"></a> 5.启动docker服务</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n<h5 id=\"6设置开机自启动\"><a class=\"markdownIt-Anchor\" href=\"#6设置开机自启动\"></a> 6.设置开机自启动</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure>\n<h5 id=\"7-查看docker版本信息\"><a class=\"markdownIt-Anchor\" href=\"#7-查看docker版本信息\"></a> 7. 查看docker版本信息</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-01/1.png\" alt=\"查看docker版本\"><br>\n至此，解决。</p>\n<h5 id=\"8-停止所有容器\"><a class=\"markdownIt-Anchor\" href=\"#8-停止所有容器\"></a> 8. 停止所有容器</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop $(docker ps -a | awk &#x27;&#123; print $1&#125;&#x27; | tail -n +2)</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>新的服务器没有安装docker，使用docker命令时提示：docker: command not found错误信息</p>\n<h5 id=\"1-更新yum包\"><a class=\"markdownIt-Anchor\" href=\"#1-更新yum包\"></a> 1. 更新yum包</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br></pre></td></tr></table></figure>\n<h5 id=\"2安装依赖软件包\"><a class=\"markdownIt-Anchor\" href=\"#2安装依赖软件包\"></a> 2.安装依赖软件包</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>\n<h5 id=\"3设置yum源\"><a class=\"markdownIt-Anchor\" href=\"#3设置yum源\"></a> 3.设置yum源</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<h5 id=\"4安装docker\"><a class=\"markdownIt-Anchor\" href=\"#4安装docker\"></a> 4.安装docker</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">默认安装最新的docker稳定版本。</span></span><br><span class=\"line\">yum install docker-ce</span><br></pre></td></tr></table></figure>\n<h5 id=\"5启动docker服务\"><a class=\"markdownIt-Anchor\" href=\"#5启动docker服务\"></a> 5.启动docker服务</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n<h5 id=\"6设置开机自启动\"><a class=\"markdownIt-Anchor\" href=\"#6设置开机自启动\"></a> 6.设置开机自启动</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure>\n<h5 id=\"7-查看docker版本信息\"><a class=\"markdownIt-Anchor\" href=\"#7-查看docker版本信息\"></a> 7. 查看docker版本信息</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-01/1.png\" alt=\"查看docker版本\"><br>\n至此，解决。</p>\n<h5 id=\"8-停止所有容器\"><a class=\"markdownIt-Anchor\" href=\"#8-停止所有容器\"></a> 8. 停止所有容器</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop $(docker ps -a | awk &#x27;&#123; print $1&#125;&#x27; | tail -n +2)</span><br></pre></td></tr></table></figure>\n"},{"title":"docker安装nginx","comments":1,"abbrlink":57560,"date":"2021-12-09T13:47:19.000Z","translate_title":"docker-03","_content":"##### 1.查看所有的镜像\n```shell\ndocker search nginx\n```\n![](./docker-nginx/1.png)\n##### 2.拉取最新版本的镜像\n```shell\ndocker pull nginx\n\n#或者指定最新版本\ndocker pull nginx:latest\n```\n![](./docker-nginx/2.png)\n\n##### 3.使用命令查看本地镜像，确定nginx镜像已下载到本地\n```shell\ndocker images\n```\n![](./docker-nginx/3.png)\n##### 4. 创建挂载目录\n```shell\nmkdir -p /data/nginx/{conf,conf.d,html,logs}\n```\n##### 5. 创建配置文件\n```shell\ntouch nginx.cnf\n```\n##### 6. Nginx详情配置请参考：https://xiaoyuge.work/2021/12/05/nginx-02/\n\n##### 7. 查看容器\n```shell\ndocker ps -a\n\n# docker stop xxx  停止某个容器运行\n# docker rm xxx  删除容器\n```\n![查看容器](./docker-nginx/6.png)\n##### 8.启动容器，挂载配置文件\n```shell\ndocker run --name mynginx -d -p 80:80 -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /data/nginx/logs:/var/log/nginx -d docker.io/nginx\n```\n可以通过命令docker exec -it nginx-test bash进入容器内容修改配置\n\n![](./docker-nginx/4.png)\n##### 9.安装完毕，访问地址 http://localhost:8080，出现如下内容，安装成功！！！\n![](./docker-nginx/5.png)\n\n##### 10.域名解析配置\n我买的是阿里云的服务器以及域名，上面操作后，忘记在阿里云控制台中去配置\n![](./docker-nginx/7.png)\n![域名解析](./docker-nginx/8.png)\n\n##### 11.配置多个二级域名\n在第8步的时候将docker容器中的nginx配置映射到了目录/data/nginx/conf下面；\n修改nginx.conf\n```text\n\nuser  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    access_log  /var/log/nginx/access.log  main;\n    sendfile        on;\n    #tcp_nopush     on;\n    keepalive_timeout  65;\n    #gzip  on;\n    \n    #引入conf.d下面所有的配置文件\n    include /etc/nginx/conf.d/*.conf;\n}\n```\n然后在conf.d目录下面创建了两个子域名反向代理配置文件,其他的域名代理相同，只要改server_name和proxy_pass代理端口，配置文件需以.conf结尾\n![域名解析](./docker-nginx/8.png)\n- note.xiaoyuge520.vip.conf\n  ```text\n        ########   Nginx的main(全局配置)文件\n        #指定nginx运行的用户及用户组,默认为nobody\n        #user  nobody;\n        #开启的线程数，一般跟逻辑CPU核数一致\n        worker_processes  1;\n        events {\n        #设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式\n        #use epoll;\n            #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。\n            worker_connections  1024;\n        }\n        #######Nginx的Http服务器配置,Gzip配置\n        http {\n            include       mime.types;\n            #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式\n            default_type  application/octet-stream;\n            #开启高效文件传输模式\n            sendfile        on;\n            keepalive_timeout  65;\n            ########Nginx的server虚拟主机配置\n            server {\n                #监听端口为 80\n                listen       80;\n                #设置主机域名\n                server_name  note.xiaoyuge520.vip;\n                #设置访问的语言编码\n                #charset koi8-r;\n                #设置虚拟主机访问日志的存放路径及日志的格式为main\n                #access_log  logs/host.access.log  main;\n        \n                #设置虚拟主机的基本信息\n                location / {\n                    proxy_set_header  Host  $http_host;\n                    proxy_set_header  X-Real-IP  $remote_addr;\n                    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n                    proxy_pass http://47.101.130.163:8086/note; # 代理ip:端口\n                }\n                error_page   500 502 503 504  /50x.html;\n                location = /50x.html {\n                    root   html;\n                }\n            }\n        }\n    ```\n  \n- record.xiaoyuge520.vip.conf\n    ```text\n        worker_processes  1;\n        events {\n            worker_connections  1024;\n        }\n        #######Nginx的Http服务器配置,Gzip配置\n        http {\n            include       mime.types;\n            default_type  application/octet-stream;\n            sendfile        on;\n            keepalive_timeout  65;\n            server {\n                listen       80;\n                server_name  record.xiaoyuge520.vip;\n                #access_log  logs/host.access.log  main;\n                location / {\n                    proxy_set_header  Host  $http_host;\n                    proxy_set_header  X-Real-IP  $remote_addr;\n                    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n                    proxy_pass http://47.101.130.163:8888/record; # 代理ip:端口\n                }\n                error_page   500 502 503 504  /50x.html;\n                location = /50x.html {\n                    root   html;\n                }\n            }\n        }\n    ```\n  \n**如果挂载之后容器运行正常却依然不能通过域名访问可尝试以下操作**\n  ```shell\n  #查看所有容器,获取nginx的container 名称\n  docker ps -a\n  \n  #向名称为nginx的容器发送脚本命令, mynginx 为容器名称\n  docker exec -it mynginx /bin/bash\n  \n  #重新加载配置命令\n  cd /etc/nginx/conf.d\n  service nginx reload\n  #检查配置文件路径是否正确\n  ```\n  \n**每一次更改配置文件都需要重启容器**\n  ```shell\n    # 重启nginx容器\n    docker restart nginx \n  \n    #查看容器状态\n    docker ps\n  \n    #如果挂载失败，查看nginx容器log,显示错误信息，根据错误信息 更改配置文件等\n    docker logs -t nginx\n  ```\n---\n\n以上配置完成之后能够通过域名访问网站，但是css样式却被nginx解析成text/plain，打开控制台可看到warn信息\n\n**解决nginx将css文件解析为text/plain**\n- 方法一： ngin.conf中http添加：\n  ```text\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n  ```\n  注：此办法并不能使我网站的css正确解析，因为在拷贝nginx镜像中的原配置文件时，就已经添加mime.types了。却依然不能正确解析。\n\n- 方法二：解析成功，原因未知\n  ```html\n  将index.html中<!DOCTYPE html>去掉。\n  ```\n通过域名访问：成功！！\n","source":"_posts/2021/12/docker-nginx.md","raw":"---\ntitle: docker安装nginx\ncomments: true\ntags: nginx\ncategories: Docker\nabbrlink: 57560\ndate: 2021-12-09 21:47:19\ntranslate_title: docker-03\n---\n##### 1.查看所有的镜像\n```shell\ndocker search nginx\n```\n![](./docker-nginx/1.png)\n##### 2.拉取最新版本的镜像\n```shell\ndocker pull nginx\n\n#或者指定最新版本\ndocker pull nginx:latest\n```\n![](./docker-nginx/2.png)\n\n##### 3.使用命令查看本地镜像，确定nginx镜像已下载到本地\n```shell\ndocker images\n```\n![](./docker-nginx/3.png)\n##### 4. 创建挂载目录\n```shell\nmkdir -p /data/nginx/{conf,conf.d,html,logs}\n```\n##### 5. 创建配置文件\n```shell\ntouch nginx.cnf\n```\n##### 6. Nginx详情配置请参考：https://xiaoyuge.work/2021/12/05/nginx-02/\n\n##### 7. 查看容器\n```shell\ndocker ps -a\n\n# docker stop xxx  停止某个容器运行\n# docker rm xxx  删除容器\n```\n![查看容器](./docker-nginx/6.png)\n##### 8.启动容器，挂载配置文件\n```shell\ndocker run --name mynginx -d -p 80:80 -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /data/nginx/logs:/var/log/nginx -d docker.io/nginx\n```\n可以通过命令docker exec -it nginx-test bash进入容器内容修改配置\n\n![](./docker-nginx/4.png)\n##### 9.安装完毕，访问地址 http://localhost:8080，出现如下内容，安装成功！！！\n![](./docker-nginx/5.png)\n\n##### 10.域名解析配置\n我买的是阿里云的服务器以及域名，上面操作后，忘记在阿里云控制台中去配置\n![](./docker-nginx/7.png)\n![域名解析](./docker-nginx/8.png)\n\n##### 11.配置多个二级域名\n在第8步的时候将docker容器中的nginx配置映射到了目录/data/nginx/conf下面；\n修改nginx.conf\n```text\n\nuser  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    access_log  /var/log/nginx/access.log  main;\n    sendfile        on;\n    #tcp_nopush     on;\n    keepalive_timeout  65;\n    #gzip  on;\n    \n    #引入conf.d下面所有的配置文件\n    include /etc/nginx/conf.d/*.conf;\n}\n```\n然后在conf.d目录下面创建了两个子域名反向代理配置文件,其他的域名代理相同，只要改server_name和proxy_pass代理端口，配置文件需以.conf结尾\n![域名解析](./docker-nginx/8.png)\n- note.xiaoyuge520.vip.conf\n  ```text\n        ########   Nginx的main(全局配置)文件\n        #指定nginx运行的用户及用户组,默认为nobody\n        #user  nobody;\n        #开启的线程数，一般跟逻辑CPU核数一致\n        worker_processes  1;\n        events {\n        #设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式\n        #use epoll;\n            #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。\n            worker_connections  1024;\n        }\n        #######Nginx的Http服务器配置,Gzip配置\n        http {\n            include       mime.types;\n            #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式\n            default_type  application/octet-stream;\n            #开启高效文件传输模式\n            sendfile        on;\n            keepalive_timeout  65;\n            ########Nginx的server虚拟主机配置\n            server {\n                #监听端口为 80\n                listen       80;\n                #设置主机域名\n                server_name  note.xiaoyuge520.vip;\n                #设置访问的语言编码\n                #charset koi8-r;\n                #设置虚拟主机访问日志的存放路径及日志的格式为main\n                #access_log  logs/host.access.log  main;\n        \n                #设置虚拟主机的基本信息\n                location / {\n                    proxy_set_header  Host  $http_host;\n                    proxy_set_header  X-Real-IP  $remote_addr;\n                    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n                    proxy_pass http://47.101.130.163:8086/note; # 代理ip:端口\n                }\n                error_page   500 502 503 504  /50x.html;\n                location = /50x.html {\n                    root   html;\n                }\n            }\n        }\n    ```\n  \n- record.xiaoyuge520.vip.conf\n    ```text\n        worker_processes  1;\n        events {\n            worker_connections  1024;\n        }\n        #######Nginx的Http服务器配置,Gzip配置\n        http {\n            include       mime.types;\n            default_type  application/octet-stream;\n            sendfile        on;\n            keepalive_timeout  65;\n            server {\n                listen       80;\n                server_name  record.xiaoyuge520.vip;\n                #access_log  logs/host.access.log  main;\n                location / {\n                    proxy_set_header  Host  $http_host;\n                    proxy_set_header  X-Real-IP  $remote_addr;\n                    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n                    proxy_pass http://47.101.130.163:8888/record; # 代理ip:端口\n                }\n                error_page   500 502 503 504  /50x.html;\n                location = /50x.html {\n                    root   html;\n                }\n            }\n        }\n    ```\n  \n**如果挂载之后容器运行正常却依然不能通过域名访问可尝试以下操作**\n  ```shell\n  #查看所有容器,获取nginx的container 名称\n  docker ps -a\n  \n  #向名称为nginx的容器发送脚本命令, mynginx 为容器名称\n  docker exec -it mynginx /bin/bash\n  \n  #重新加载配置命令\n  cd /etc/nginx/conf.d\n  service nginx reload\n  #检查配置文件路径是否正确\n  ```\n  \n**每一次更改配置文件都需要重启容器**\n  ```shell\n    # 重启nginx容器\n    docker restart nginx \n  \n    #查看容器状态\n    docker ps\n  \n    #如果挂载失败，查看nginx容器log,显示错误信息，根据错误信息 更改配置文件等\n    docker logs -t nginx\n  ```\n---\n\n以上配置完成之后能够通过域名访问网站，但是css样式却被nginx解析成text/plain，打开控制台可看到warn信息\n\n**解决nginx将css文件解析为text/plain**\n- 方法一： ngin.conf中http添加：\n  ```text\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n  ```\n  注：此办法并不能使我网站的css正确解析，因为在拷贝nginx镜像中的原配置文件时，就已经添加mime.types了。却依然不能正确解析。\n\n- 方法二：解析成功，原因未知\n  ```html\n  将index.html中<!DOCTYPE html>去掉。\n  ```\n通过域名访问：成功！！\n","slug":"docker-nginx","published":1,"updated":"2022-03-27T14:06:03.386Z","layout":"post","photos":[],"link":"","_id":"cl235zcwo003owjpjdgck5rk4","content":"<h5 id=\"1查看所有的镜像\"><a class=\"markdownIt-Anchor\" href=\"#1查看所有的镜像\"></a> 1.查看所有的镜像</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search nginx</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-nginx/1.png\" alt></p>\n<h5 id=\"2拉取最新版本的镜像\"><a class=\"markdownIt-Anchor\" href=\"#2拉取最新版本的镜像\"></a> 2.拉取最新版本的镜像</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者指定最新版本</span></span><br><span class=\"line\">docker pull nginx:latest</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-nginx/2.png\" alt></p>\n<h5 id=\"3使用命令查看本地镜像确定nginx镜像已下载到本地\"><a class=\"markdownIt-Anchor\" href=\"#3使用命令查看本地镜像确定nginx镜像已下载到本地\"></a> 3.使用命令查看本地镜像，确定nginx镜像已下载到本地</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-nginx/3.png\" alt></p>\n<h5 id=\"4-创建挂载目录\"><a class=\"markdownIt-Anchor\" href=\"#4-创建挂载目录\"></a> 4. 创建挂载目录</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/nginx/&#123;conf,conf.d,html,logs&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-创建配置文件\"><a class=\"markdownIt-Anchor\" href=\"#5-创建配置文件\"></a> 5. 创建配置文件</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch nginx.cnf</span><br></pre></td></tr></table></figure>\n<h5 id=\"6-nginx详情配置请参考httpsxiaoyugework20211205nginx-02\"><a class=\"markdownIt-Anchor\" href=\"#6-nginx详情配置请参考httpsxiaoyugework20211205nginx-02\"></a> 6. Nginx详情配置请参考：<a href=\"https://xiaoyuge.work/2021/12/05/nginx-02/\">https://xiaoyuge.work/2021/12/05/nginx-02/</a></h5>\n<h5 id=\"7-查看容器\"><a class=\"markdownIt-Anchor\" href=\"#7-查看容器\"></a> 7. 查看容器</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker stop xxx  停止某个容器运行</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker rm xxx  删除容器</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-nginx/6.png\" alt=\"查看容器\"></p>\n<h5 id=\"8启动容器挂载配置文件\"><a class=\"markdownIt-Anchor\" href=\"#8启动容器挂载配置文件\"></a> 8.启动容器，挂载配置文件</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mynginx -d -p 80:80 -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /data/nginx/logs:/var/log/nginx -d docker.io/nginx</span><br></pre></td></tr></table></figure>\n<p>可以通过命令docker exec -it nginx-test bash进入容器内容修改配置</p>\n<p><img src=\"/docker-nginx/4.png\" alt></p>\n<h5 id=\"9安装完毕访问地址-httplocalhost8080出现如下内容安装成功\"><a class=\"markdownIt-Anchor\" href=\"#9安装完毕访问地址-httplocalhost8080出现如下内容安装成功\"></a> 9.安装完毕，访问地址 <a href=\"http://localhost:8080\">http://localhost:8080</a>，出现如下内容，安装成功！！！</h5>\n<p><img src=\"/docker-nginx/5.png\" alt></p>\n<h5 id=\"10域名解析配置\"><a class=\"markdownIt-Anchor\" href=\"#10域名解析配置\"></a> 10.域名解析配置</h5>\n<p>我买的是阿里云的服务器以及域名，上面操作后，忘记在阿里云控制台中去配置<br>\n<img src=\"/docker-nginx/7.png\" alt><br>\n<img src=\"/docker-nginx/8.png\" alt=\"域名解析\"></p>\n<h5 id=\"11配置多个二级域名\"><a class=\"markdownIt-Anchor\" href=\"#11配置多个二级域名\"></a> 11.配置多个二级域名</h5>\n<p>在第8步的时候将docker容器中的nginx配置映射到了目录/data/nginx/conf下面；<br>\n修改nginx.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">user  nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">    </span><br><span class=\"line\">    #引入conf.d下面所有的配置文件</span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在conf.d目录下面创建了两个子域名反向代理配置文件,其他的域名代理相同，只要改server_name和proxy_pass代理端口，配置文件需以.conf结尾<br>\n<img src=\"/docker-nginx/8.png\" alt=\"域名解析\"></p>\n<ul>\n<li>\n<p>note.xiaoyuge520.vip.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">########   Nginx的main(全局配置)文件</span><br><span class=\"line\">#指定nginx运行的用户及用户组,默认为nobody</span><br><span class=\"line\">#user  nobody;</span><br><span class=\"line\">#开启的线程数，一般跟逻辑CPU核数一致</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">#设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式</span><br><span class=\"line\">#use epoll;</span><br><span class=\"line\">    #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#######Nginx的Http服务器配置,Gzip配置</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    #开启高效文件传输模式</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    ########Nginx的server虚拟主机配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        #监听端口为 80</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        #设置主机域名</span><br><span class=\"line\">        server_name  note.xiaoyuge520.vip;</span><br><span class=\"line\">        #设置访问的语言编码</span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\">        #设置虚拟主机访问日志的存放路径及日志的格式为main</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置虚拟主机的基本信息</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_set_header  Host  $http_host;</span><br><span class=\"line\">            proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class=\"line\">            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_pass http://47.101.130.163:8086/note; # 代理ip:端口</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>record.xiaoyuge520.vip.conf</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#######Nginx的Http服务器配置,Gzip配置</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  record.xiaoyuge520.vip;</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_set_header  Host  $http_host;</span><br><span class=\"line\">            proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class=\"line\">            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_pass http://47.101.130.163:8888/record; # 代理ip:端口</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>如果挂载之后容器运行正常却依然不能通过域名访问可尝试以下操作</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看所有容器,获取nginx的container 名称</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">向名称为nginx的容器发送脚本命令, mynginx 为容器名称</span></span><br><span class=\"line\">docker exec -it mynginx /bin/bash</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重新加载配置命令</span></span><br><span class=\"line\">cd /etc/nginx/conf.d</span><br><span class=\"line\">service nginx reload</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">检查配置文件路径是否正确</span></span><br></pre></td></tr></table></figure>\n<p><strong>每一次更改配置文件都需要重启容器</strong></p>\n<h2 id=\"-code11-\"><a class=\"markdownIt-Anchor\" href=\"#-code11-\"></a> <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启nginx容器</span></span><br><span class=\"line\">docker restart nginx </span><br><span class=\"line\"><span class=\"meta\">  </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看容器状态</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"><span class=\"meta\">  </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果挂载失败，查看nginx容器<span class=\"built_in\">log</span>,显示错误信息，根据错误信息 更改配置文件等</span></span><br><span class=\"line\">docker logs -t nginx</span><br></pre></td></tr></table></figure></h2>\n<p>以上配置完成之后能够通过域名访问网站，但是css样式却被nginx解析成text/plain，打开控制台可看到warn信息</p>\n<p><strong>解决nginx将css文件解析为text/plain</strong></p>\n<ul>\n<li>\n<p>方法一： ngin.conf中http添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include       /etc/nginx/mime.types;</span><br><span class=\"line\">default_type  application/octet-stream;</span><br></pre></td></tr></table></figure>\n<p>注：此办法并不能使我网站的css正确解析，因为在拷贝nginx镜像中的原配置文件时，就已经添加mime.types了。却依然不能正确解析。</p>\n</li>\n<li>\n<p>方法二：解析成功，原因未知</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将index.html中<span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span>去掉。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过域名访问：成功！！</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h5 id=\"1查看所有的镜像\"><a class=\"markdownIt-Anchor\" href=\"#1查看所有的镜像\"></a> 1.查看所有的镜像</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search nginx</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-nginx/1.png\" alt></p>\n<h5 id=\"2拉取最新版本的镜像\"><a class=\"markdownIt-Anchor\" href=\"#2拉取最新版本的镜像\"></a> 2.拉取最新版本的镜像</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者指定最新版本</span></span><br><span class=\"line\">docker pull nginx:latest</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-nginx/2.png\" alt></p>\n<h5 id=\"3使用命令查看本地镜像确定nginx镜像已下载到本地\"><a class=\"markdownIt-Anchor\" href=\"#3使用命令查看本地镜像确定nginx镜像已下载到本地\"></a> 3.使用命令查看本地镜像，确定nginx镜像已下载到本地</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-nginx/3.png\" alt></p>\n<h5 id=\"4-创建挂载目录\"><a class=\"markdownIt-Anchor\" href=\"#4-创建挂载目录\"></a> 4. 创建挂载目录</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/nginx/&#123;conf,conf.d,html,logs&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-创建配置文件\"><a class=\"markdownIt-Anchor\" href=\"#5-创建配置文件\"></a> 5. 创建配置文件</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch nginx.cnf</span><br></pre></td></tr></table></figure>\n<h5 id=\"6-nginx详情配置请参考httpsxiaoyugework20211205nginx-02\"><a class=\"markdownIt-Anchor\" href=\"#6-nginx详情配置请参考httpsxiaoyugework20211205nginx-02\"></a> 6. Nginx详情配置请参考：<a href=\"https://xiaoyuge.work/2021/12/05/nginx-02/\">https://xiaoyuge.work/2021/12/05/nginx-02/</a></h5>\n<h5 id=\"7-查看容器\"><a class=\"markdownIt-Anchor\" href=\"#7-查看容器\"></a> 7. 查看容器</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker stop xxx  停止某个容器运行</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker rm xxx  删除容器</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-nginx/6.png\" alt=\"查看容器\"></p>\n<h5 id=\"8启动容器挂载配置文件\"><a class=\"markdownIt-Anchor\" href=\"#8启动容器挂载配置文件\"></a> 8.启动容器，挂载配置文件</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mynginx -d -p 80:80 -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /data/nginx/logs:/var/log/nginx -d docker.io/nginx</span><br></pre></td></tr></table></figure>\n<p>可以通过命令docker exec -it nginx-test bash进入容器内容修改配置</p>\n<p><img src=\"/docker-nginx/4.png\" alt></p>\n<h5 id=\"9安装完毕访问地址-httplocalhost8080出现如下内容安装成功\"><a class=\"markdownIt-Anchor\" href=\"#9安装完毕访问地址-httplocalhost8080出现如下内容安装成功\"></a> 9.安装完毕，访问地址 <a href=\"http://localhost:8080\">http://localhost:8080</a>，出现如下内容，安装成功！！！</h5>\n<p><img src=\"/docker-nginx/5.png\" alt></p>\n<h5 id=\"10域名解析配置\"><a class=\"markdownIt-Anchor\" href=\"#10域名解析配置\"></a> 10.域名解析配置</h5>\n<p>我买的是阿里云的服务器以及域名，上面操作后，忘记在阿里云控制台中去配置<br>\n<img src=\"/docker-nginx/7.png\" alt><br>\n<img src=\"/docker-nginx/8.png\" alt=\"域名解析\"></p>\n<h5 id=\"11配置多个二级域名\"><a class=\"markdownIt-Anchor\" href=\"#11配置多个二级域名\"></a> 11.配置多个二级域名</h5>\n<p>在第8步的时候将docker容器中的nginx配置映射到了目录/data/nginx/conf下面；<br>\n修改nginx.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">user  nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">    </span><br><span class=\"line\">    #引入conf.d下面所有的配置文件</span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在conf.d目录下面创建了两个子域名反向代理配置文件,其他的域名代理相同，只要改server_name和proxy_pass代理端口，配置文件需以.conf结尾<br>\n<img src=\"/docker-nginx/8.png\" alt=\"域名解析\"></p>\n<ul>\n<li>\n<p>note.xiaoyuge520.vip.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">########   Nginx的main(全局配置)文件</span><br><span class=\"line\">#指定nginx运行的用户及用户组,默认为nobody</span><br><span class=\"line\">#user  nobody;</span><br><span class=\"line\">#开启的线程数，一般跟逻辑CPU核数一致</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">#设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式</span><br><span class=\"line\">#use epoll;</span><br><span class=\"line\">    #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#######Nginx的Http服务器配置,Gzip配置</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    #开启高效文件传输模式</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    ########Nginx的server虚拟主机配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        #监听端口为 80</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        #设置主机域名</span><br><span class=\"line\">        server_name  note.xiaoyuge520.vip;</span><br><span class=\"line\">        #设置访问的语言编码</span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\">        #设置虚拟主机访问日志的存放路径及日志的格式为main</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置虚拟主机的基本信息</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_set_header  Host  $http_host;</span><br><span class=\"line\">            proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class=\"line\">            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_pass http://47.101.130.163:8086/note; # 代理ip:端口</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>record.xiaoyuge520.vip.conf</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#######Nginx的Http服务器配置,Gzip配置</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  record.xiaoyuge520.vip;</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_set_header  Host  $http_host;</span><br><span class=\"line\">            proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class=\"line\">            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_pass http://47.101.130.163:8888/record; # 代理ip:端口</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>如果挂载之后容器运行正常却依然不能通过域名访问可尝试以下操作</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看所有容器,获取nginx的container 名称</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">向名称为nginx的容器发送脚本命令, mynginx 为容器名称</span></span><br><span class=\"line\">docker exec -it mynginx /bin/bash</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重新加载配置命令</span></span><br><span class=\"line\">cd /etc/nginx/conf.d</span><br><span class=\"line\">service nginx reload</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">检查配置文件路径是否正确</span></span><br></pre></td></tr></table></figure>\n<p><strong>每一次更改配置文件都需要重启容器</strong></p>\n<h2 id=\"-code11-\"><a class=\"markdownIt-Anchor\" href=\"#-code11-\"></a> <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启nginx容器</span></span><br><span class=\"line\">docker restart nginx </span><br><span class=\"line\"><span class=\"meta\">  </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看容器状态</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"><span class=\"meta\">  </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果挂载失败，查看nginx容器<span class=\"built_in\">log</span>,显示错误信息，根据错误信息 更改配置文件等</span></span><br><span class=\"line\">docker logs -t nginx</span><br></pre></td></tr></table></figure></h2>\n<p>以上配置完成之后能够通过域名访问网站，但是css样式却被nginx解析成text/plain，打开控制台可看到warn信息</p>\n<p><strong>解决nginx将css文件解析为text/plain</strong></p>\n<ul>\n<li>\n<p>方法一： ngin.conf中http添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include       /etc/nginx/mime.types;</span><br><span class=\"line\">default_type  application/octet-stream;</span><br></pre></td></tr></table></figure>\n<p>注：此办法并不能使我网站的css正确解析，因为在拷贝nginx镜像中的原配置文件时，就已经添加mime.types了。却依然不能正确解析。</p>\n</li>\n<li>\n<p>方法二：解析成功，原因未知</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将index.html中<span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span>去掉。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过域名访问：成功！！</p>\n"},{"title":"docker安装mysql","comments":1,"abbrlink":12467,"date":"2021-12-09T13:32:36.000Z","translate_title":"docker-02","_content":"##### 1.查看所有的镜像\n```shell\ndocker search mysql\n```\n![](./docker-mysql/1.png)\n##### 2.拉取最新版本的镜像\n```shell\ndocker pull mysql\n\n#或者指定版本\ndocker pull mysql:8.0.16\n```\n![](./docker-mysql/2.png)\n\n##### 3.创建数据目录和配置文件\n```shell\nmkdir -p /usr/mysql/conf /usr/mysql/data\n\nchmod -R 777 /usr/mysql/\n```\n##### 4.创建配置文件\n在上面创建的配置文件目录/usr/mysql/conf下创建MySQL的配置文件my.cnf\n```shell\ntouch my.cnf;\n\nvim /usr/mysql/conf/my.cnf;\n```\n添加以下内容到上述创建的配置文件中\n```properties\n[client]\n#socket = /usr/mysql/mysqld.sock\ndefault-character-set = utf8mb4\n[mysqld]\n#pid-file        = /var/run/mysqld/mysqld.pid\n#socket          = /var/run/mysqld/mysqld.sock\n#datadir         = /var/lib/mysql\n#socket = /usr/mysql/mysqld.sock\n#pid-file = /usr/mysql/mysqld.pid\ndatadir = /usr/mysql/data\ncharacter_set_server = utf8mb4\ncollation_server = utf8mb4_bin\nsecure-file-priv= NULL\n\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\n# Custom config should go here\n!includedir /etc/mysql/conf.d/\n```\n##### 5.启动创建容器\n```shell\ndocker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql\n```\n参数解释：\n```text\n–name mysql5.7 容器别名\n-p 3307:3306 映射容器端口号和宿主机端口号（本机3307端口映射容器3306端口）\n-v /data/mysql/datadir:/var/lib/mysql 目录映射（挂载宿主机目录和 docker容器中的目录，前面是宿主机目录，后面是容器内部目录）\n-v /data/mysql/conf.d:/etc/mysql/conf.d 目录映射（mysql配置目录）\n-d 后台运行\n-e 环境参数，MYSQL_ROOT_PASSWORD设置root用户的密码\n```\n![启动创建容器](./docker-mysql/3.png)\n执行上述命令后，执行查询容器的命令就可以看到创建的mysql容器\n```shell\ndocker ps -a\n```\n![启动创建容器](./docker-mysql/4.png)\n\n##### 常见问题\n\n###### 1.远程无法链接\n上述虽然安装好了mysql，但是使用远程的Navicat连接时提示错误，不能正确连接mysql，此时需要修改按照下面说的步骤修改一下mysql的密码模式以及主机等内容才可以。\n修改mysql密码以及可访问主机\n1. 进入容器内部\n    ```shell\n    docker exec -it mysql /bin/bash\n    ```\n2. 连接mysql\n    ```shell\n    mysql -uroot -p\n    ```\n3. 使用mysql库\n    ```shell\n    use mysql;\n    ```\n4. 修改访问主机以及密码等，设置为所有主机可访问\n    ```shell\n    ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '新密码';\n    \n    #注意： mysql_native_password，mysql8.x版本必须使用这种模式，否则navicate无法正确连接\n    ```\n5. 刷新\n    ```shell\n    flush privileges;\n    \n    exit;\n    ```\n6. 远程使用Navicat连接数据库\n![连接](./docker-mysql/5.png)\n\n###### 2.docker启动mysql容器报错\n```shell\ndocker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql\n```\n启动时提示：Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: Running hook #0:: error running hook: signal: segmentation fault (core dumped), stdout: , stderr:: unknown\n\n![](./docker-mysql/6.png)\n解决方式：\n```shell\nsudo yum upgrade\n```\n或者可以试下\n```shell\nrm -rf /usr/mysql/conf/my.cnf\ntouch /usr/mysql/conf/my.cnf\nvim my.cnf\n\n#然后重新配置一下\n```","source":"_posts/2021/12/docker-mysql.md","raw":"---\ntitle: docker安装mysql\ncomments: true\ntags: mysql\ncategories: Docker\nabbrlink: 12467\ndate: 2021-12-09 21:32:36\ntranslate_title: docker-02\n---\n##### 1.查看所有的镜像\n```shell\ndocker search mysql\n```\n![](./docker-mysql/1.png)\n##### 2.拉取最新版本的镜像\n```shell\ndocker pull mysql\n\n#或者指定版本\ndocker pull mysql:8.0.16\n```\n![](./docker-mysql/2.png)\n\n##### 3.创建数据目录和配置文件\n```shell\nmkdir -p /usr/mysql/conf /usr/mysql/data\n\nchmod -R 777 /usr/mysql/\n```\n##### 4.创建配置文件\n在上面创建的配置文件目录/usr/mysql/conf下创建MySQL的配置文件my.cnf\n```shell\ntouch my.cnf;\n\nvim /usr/mysql/conf/my.cnf;\n```\n添加以下内容到上述创建的配置文件中\n```properties\n[client]\n#socket = /usr/mysql/mysqld.sock\ndefault-character-set = utf8mb4\n[mysqld]\n#pid-file        = /var/run/mysqld/mysqld.pid\n#socket          = /var/run/mysqld/mysqld.sock\n#datadir         = /var/lib/mysql\n#socket = /usr/mysql/mysqld.sock\n#pid-file = /usr/mysql/mysqld.pid\ndatadir = /usr/mysql/data\ncharacter_set_server = utf8mb4\ncollation_server = utf8mb4_bin\nsecure-file-priv= NULL\n\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\n# Custom config should go here\n!includedir /etc/mysql/conf.d/\n```\n##### 5.启动创建容器\n```shell\ndocker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql\n```\n参数解释：\n```text\n–name mysql5.7 容器别名\n-p 3307:3306 映射容器端口号和宿主机端口号（本机3307端口映射容器3306端口）\n-v /data/mysql/datadir:/var/lib/mysql 目录映射（挂载宿主机目录和 docker容器中的目录，前面是宿主机目录，后面是容器内部目录）\n-v /data/mysql/conf.d:/etc/mysql/conf.d 目录映射（mysql配置目录）\n-d 后台运行\n-e 环境参数，MYSQL_ROOT_PASSWORD设置root用户的密码\n```\n![启动创建容器](./docker-mysql/3.png)\n执行上述命令后，执行查询容器的命令就可以看到创建的mysql容器\n```shell\ndocker ps -a\n```\n![启动创建容器](./docker-mysql/4.png)\n\n##### 常见问题\n\n###### 1.远程无法链接\n上述虽然安装好了mysql，但是使用远程的Navicat连接时提示错误，不能正确连接mysql，此时需要修改按照下面说的步骤修改一下mysql的密码模式以及主机等内容才可以。\n修改mysql密码以及可访问主机\n1. 进入容器内部\n    ```shell\n    docker exec -it mysql /bin/bash\n    ```\n2. 连接mysql\n    ```shell\n    mysql -uroot -p\n    ```\n3. 使用mysql库\n    ```shell\n    use mysql;\n    ```\n4. 修改访问主机以及密码等，设置为所有主机可访问\n    ```shell\n    ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '新密码';\n    \n    #注意： mysql_native_password，mysql8.x版本必须使用这种模式，否则navicate无法正确连接\n    ```\n5. 刷新\n    ```shell\n    flush privileges;\n    \n    exit;\n    ```\n6. 远程使用Navicat连接数据库\n![连接](./docker-mysql/5.png)\n\n###### 2.docker启动mysql容器报错\n```shell\ndocker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql\n```\n启动时提示：Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: Running hook #0:: error running hook: signal: segmentation fault (core dumped), stdout: , stderr:: unknown\n\n![](./docker-mysql/6.png)\n解决方式：\n```shell\nsudo yum upgrade\n```\n或者可以试下\n```shell\nrm -rf /usr/mysql/conf/my.cnf\ntouch /usr/mysql/conf/my.cnf\nvim my.cnf\n\n#然后重新配置一下\n```","slug":"docker-mysql","published":1,"updated":"2022-04-02T07:53:19.044Z","layout":"post","photos":[],"link":"","_id":"cl235zcwp003swjpj1iph2vcj","content":"<h5 id=\"1查看所有的镜像\"><a class=\"markdownIt-Anchor\" href=\"#1查看所有的镜像\"></a> 1.查看所有的镜像</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search mysql</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-mysql/1.png\" alt></p>\n<h5 id=\"2拉取最新版本的镜像\"><a class=\"markdownIt-Anchor\" href=\"#2拉取最新版本的镜像\"></a> 2.拉取最新版本的镜像</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者指定版本</span></span><br><span class=\"line\">docker pull mysql:8.0.16</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-mysql/2.png\" alt></p>\n<h5 id=\"3创建数据目录和配置文件\"><a class=\"markdownIt-Anchor\" href=\"#3创建数据目录和配置文件\"></a> 3.创建数据目录和配置文件</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /usr/mysql/conf /usr/mysql/data</span><br><span class=\"line\"></span><br><span class=\"line\">chmod -R 777 /usr/mysql/</span><br></pre></td></tr></table></figure>\n<h5 id=\"4创建配置文件\"><a class=\"markdownIt-Anchor\" href=\"#4创建配置文件\"></a> 4.创建配置文件</h5>\n<p>在上面创建的配置文件目录/usr/mysql/conf下创建MySQL的配置文件my.cnf</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch my.cnf;</span><br><span class=\"line\"></span><br><span class=\"line\">vim /usr/mysql/conf/my.cnf;</span><br></pre></td></tr></table></figure>\n<p>添加以下内容到上述创建的配置文件中</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">[client]</span></span><br><span class=\"line\"><span class=\"comment\">#socket = /usr/mysql/mysqld.sock</span></span><br><span class=\"line\"><span class=\"meta\">default-character-set</span> = <span class=\"string\">utf8mb4</span></span><br><span class=\"line\"><span class=\"attr\">[mysqld]</span></span><br><span class=\"line\"><span class=\"comment\">#pid-file        = /var/run/mysqld/mysqld.pid</span></span><br><span class=\"line\"><span class=\"comment\">#socket          = /var/run/mysqld/mysqld.sock</span></span><br><span class=\"line\"><span class=\"comment\">#datadir         = /var/lib/mysql</span></span><br><span class=\"line\"><span class=\"comment\">#socket = /usr/mysql/mysqld.sock</span></span><br><span class=\"line\"><span class=\"comment\">#pid-file = /usr/mysql/mysqld.pid</span></span><br><span class=\"line\"><span class=\"attr\">datadir</span> = <span class=\"string\">/usr/mysql/data</span></span><br><span class=\"line\"><span class=\"attr\">character_set_server</span> = <span class=\"string\">utf8mb4</span></span><br><span class=\"line\"><span class=\"attr\">collation_server</span> = <span class=\"string\">utf8mb4_bin</span></span><br><span class=\"line\"><span class=\"meta\">secure-file-priv</span>= <span class=\"string\">NULL</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\"><span class=\"meta\">symbolic-links</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"comment\"># Custom config should go here</span></span><br><span class=\"line\"><span class=\"comment\">!includedir /etc/mysql/conf.d/</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"5启动创建容器\"><a class=\"markdownIt-Anchor\" href=\"#5启动创建容器\"></a> 5.启动创建容器</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql</span><br></pre></td></tr></table></figure>\n<p>参数解释：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">–name mysql5.7 容器别名</span><br><span class=\"line\">-p 3307:3306 映射容器端口号和宿主机端口号（本机3307端口映射容器3306端口）</span><br><span class=\"line\">-v /data/mysql/datadir:/var/lib/mysql 目录映射（挂载宿主机目录和 docker容器中的目录，前面是宿主机目录，后面是容器内部目录）</span><br><span class=\"line\">-v /data/mysql/conf.d:/etc/mysql/conf.d 目录映射（mysql配置目录）</span><br><span class=\"line\">-d 后台运行</span><br><span class=\"line\">-e 环境参数，MYSQL_ROOT_PASSWORD设置root用户的密码</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-mysql/3.png\" alt=\"启动创建容器\"><br>\n执行上述命令后，执行查询容器的命令就可以看到创建的mysql容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-mysql/4.png\" alt=\"启动创建容器\"></p>\n<h5 id=\"常见问题\"><a class=\"markdownIt-Anchor\" href=\"#常见问题\"></a> 常见问题</h5>\n<h6 id=\"1远程无法链接\"><a class=\"markdownIt-Anchor\" href=\"#1远程无法链接\"></a> 1.远程无法链接</h6>\n<p>上述虽然安装好了mysql，但是使用远程的Navicat连接时提示错误，不能正确连接mysql，此时需要修改按照下面说的步骤修改一下mysql的密码模式以及主机等内容才可以。<br>\n修改mysql密码以及可访问主机</p>\n<ol>\n<li>进入容器内部 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure>\n</li>\n<li>连接mysql <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br></pre></td></tr></table></figure>\n</li>\n<li>使用mysql库 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br></pre></td></tr></table></figure>\n</li>\n<li>修改访问主机以及密码等，设置为所有主机可访问 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注意： mysql_native_password，mysql8.x版本必须使用这种模式，否则navicate无法正确连接</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>刷新 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\">exit;</span><br></pre></td></tr></table></figure>\n</li>\n<li>远程使用Navicat连接数据库<br>\n<img src=\"/docker-mysql/5.png\" alt=\"连接\"></li>\n</ol>\n<h6 id=\"2docker启动mysql容器报错\"><a class=\"markdownIt-Anchor\" href=\"#2docker启动mysql容器报错\"></a> 2.docker启动mysql容器报错</h6>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql</span><br></pre></td></tr></table></figure>\n<p>启动时提示：Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: Running hook #0:: error running hook: signal: segmentation fault (core dumped), stdout: , stderr:: unknown</p>\n<p><img src=\"/docker-mysql/6.png\" alt><br>\n解决方式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum upgrade</span><br></pre></td></tr></table></figure>\n<p>或者可以试下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /usr/mysql/conf/my.cnf</span><br><span class=\"line\">touch /usr/mysql/conf/my.cnf</span><br><span class=\"line\">vim my.cnf</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">然后重新配置一下</span></span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h5 id=\"1查看所有的镜像\"><a class=\"markdownIt-Anchor\" href=\"#1查看所有的镜像\"></a> 1.查看所有的镜像</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search mysql</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-mysql/1.png\" alt></p>\n<h5 id=\"2拉取最新版本的镜像\"><a class=\"markdownIt-Anchor\" href=\"#2拉取最新版本的镜像\"></a> 2.拉取最新版本的镜像</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者指定版本</span></span><br><span class=\"line\">docker pull mysql:8.0.16</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-mysql/2.png\" alt></p>\n<h5 id=\"3创建数据目录和配置文件\"><a class=\"markdownIt-Anchor\" href=\"#3创建数据目录和配置文件\"></a> 3.创建数据目录和配置文件</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /usr/mysql/conf /usr/mysql/data</span><br><span class=\"line\"></span><br><span class=\"line\">chmod -R 777 /usr/mysql/</span><br></pre></td></tr></table></figure>\n<h5 id=\"4创建配置文件\"><a class=\"markdownIt-Anchor\" href=\"#4创建配置文件\"></a> 4.创建配置文件</h5>\n<p>在上面创建的配置文件目录/usr/mysql/conf下创建MySQL的配置文件my.cnf</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch my.cnf;</span><br><span class=\"line\"></span><br><span class=\"line\">vim /usr/mysql/conf/my.cnf;</span><br></pre></td></tr></table></figure>\n<p>添加以下内容到上述创建的配置文件中</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">[client]</span></span><br><span class=\"line\"><span class=\"comment\">#socket = /usr/mysql/mysqld.sock</span></span><br><span class=\"line\"><span class=\"meta\">default-character-set</span> = <span class=\"string\">utf8mb4</span></span><br><span class=\"line\"><span class=\"attr\">[mysqld]</span></span><br><span class=\"line\"><span class=\"comment\">#pid-file        = /var/run/mysqld/mysqld.pid</span></span><br><span class=\"line\"><span class=\"comment\">#socket          = /var/run/mysqld/mysqld.sock</span></span><br><span class=\"line\"><span class=\"comment\">#datadir         = /var/lib/mysql</span></span><br><span class=\"line\"><span class=\"comment\">#socket = /usr/mysql/mysqld.sock</span></span><br><span class=\"line\"><span class=\"comment\">#pid-file = /usr/mysql/mysqld.pid</span></span><br><span class=\"line\"><span class=\"attr\">datadir</span> = <span class=\"string\">/usr/mysql/data</span></span><br><span class=\"line\"><span class=\"attr\">character_set_server</span> = <span class=\"string\">utf8mb4</span></span><br><span class=\"line\"><span class=\"attr\">collation_server</span> = <span class=\"string\">utf8mb4_bin</span></span><br><span class=\"line\"><span class=\"meta\">secure-file-priv</span>= <span class=\"string\">NULL</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\"><span class=\"meta\">symbolic-links</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"comment\"># Custom config should go here</span></span><br><span class=\"line\"><span class=\"comment\">!includedir /etc/mysql/conf.d/</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"5启动创建容器\"><a class=\"markdownIt-Anchor\" href=\"#5启动创建容器\"></a> 5.启动创建容器</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql</span><br></pre></td></tr></table></figure>\n<p>参数解释：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">–name mysql5.7 容器别名</span><br><span class=\"line\">-p 3307:3306 映射容器端口号和宿主机端口号（本机3307端口映射容器3306端口）</span><br><span class=\"line\">-v /data/mysql/datadir:/var/lib/mysql 目录映射（挂载宿主机目录和 docker容器中的目录，前面是宿主机目录，后面是容器内部目录）</span><br><span class=\"line\">-v /data/mysql/conf.d:/etc/mysql/conf.d 目录映射（mysql配置目录）</span><br><span class=\"line\">-d 后台运行</span><br><span class=\"line\">-e 环境参数，MYSQL_ROOT_PASSWORD设置root用户的密码</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-mysql/3.png\" alt=\"启动创建容器\"><br>\n执行上述命令后，执行查询容器的命令就可以看到创建的mysql容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n<p><img src=\"/docker-mysql/4.png\" alt=\"启动创建容器\"></p>\n<h5 id=\"常见问题\"><a class=\"markdownIt-Anchor\" href=\"#常见问题\"></a> 常见问题</h5>\n<h6 id=\"1远程无法链接\"><a class=\"markdownIt-Anchor\" href=\"#1远程无法链接\"></a> 1.远程无法链接</h6>\n<p>上述虽然安装好了mysql，但是使用远程的Navicat连接时提示错误，不能正确连接mysql，此时需要修改按照下面说的步骤修改一下mysql的密码模式以及主机等内容才可以。<br>\n修改mysql密码以及可访问主机</p>\n<ol>\n<li>进入容器内部 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure>\n</li>\n<li>连接mysql <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br></pre></td></tr></table></figure>\n</li>\n<li>使用mysql库 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br></pre></td></tr></table></figure>\n</li>\n<li>修改访问主机以及密码等，设置为所有主机可访问 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注意： mysql_native_password，mysql8.x版本必须使用这种模式，否则navicate无法正确连接</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>刷新 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\">exit;</span><br></pre></td></tr></table></figure>\n</li>\n<li>远程使用Navicat连接数据库<br>\n<img src=\"/docker-mysql/5.png\" alt=\"连接\"></li>\n</ol>\n<h6 id=\"2docker启动mysql容器报错\"><a class=\"markdownIt-Anchor\" href=\"#2docker启动mysql容器报错\"></a> 2.docker启动mysql容器报错</h6>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql</span><br></pre></td></tr></table></figure>\n<p>启动时提示：Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: Running hook #0:: error running hook: signal: segmentation fault (core dumped), stdout: , stderr:: unknown</p>\n<p><img src=\"/docker-mysql/6.png\" alt><br>\n解决方式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum upgrade</span><br></pre></td></tr></table></figure>\n<p>或者可以试下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /usr/mysql/conf/my.cnf</span><br><span class=\"line\">touch /usr/mysql/conf/my.cnf</span><br><span class=\"line\">vim my.cnf</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">然后重新配置一下</span></span><br></pre></td></tr></table></figure>"},{"title":"Nginx基础篇（二）安装","comments":1,"abbrlink":14520,"date":"2021-12-05T08:10:44.000Z","translate_title":"nginx-install","_content":"## 1.Nginx安装\n\n1. 安装nginx前首先要确认系统中是否安装了gcc 、pcre-devel、zlib-devel、openssl-devel\n\n    ```shell\n    #1、rpm包安装的，可以用 rpm -qa 看到，如果要查找某软件包是否安装，用 rpm -qa | grep \"软件或者包的名字\"\n    #2、以deb包安装的，可以用 dpkg -l 看到。如果是查找指定软件包，用 dpkg -l | grep \"软件或者包的名字\"\n    #3、yum方法安装的，可以用 yum list installed 查找，如果是查找指定包，用 yum list installed | grep \"软件名或者包名\"\n    yum list installed | grep \"gcc\"\n    ```\n   ![image-20201210103251475](./nginx-02/image-20201210100736952.png)\n2. 安装依赖包\n\n    ```shell\n    yum -y install gcc pcre-devel zlib-devel openssl openssl-devel\n    ```\n\n3. 下载并解压安装包\n\n    ```shell\n    //创建nginx存放文件夹\n    cd /usr/local\n    mkdir nginx\n    cd nginx\n    #下载tar包\n    wget http://nginx.org/download/nginx-1.13.7.tar.gz\n    tar -xvf nginx-1.13.7.tar.gz\n    ```\n\n4. 配置\n\n    ```shell\n    cd nginx-1.13.7\n    ./configure --prefix=/usr/local/nginx\n    \n    make\n    make install\n    ```\n\n5. 测试是否安装成功\n\n    ```shell\n    ./sbin/nginx -t\n    ```\n\n    <img src=\"source/_posts/2021/07/nginx/image-20201210101238462.png\" alt=\"image-20201210101238462\" style=\"zoom: 67%;float:right;\" />\n\n6. 配置nginx.conf\n\n    ```yml\n    vim /usr/local/nginx/cong/nginx.conf\n    \n    #修改如下\n    server {\n      listen 80;\n      server_name localhost;\n    \n      # 注意设定 root路径是有dist的\n      location / {\n        root /usr/local/webapp/dist;\n        index /index.html;\n      }\n    \n      #跨域 ip和port自行替换\n      location /adminApi {\n        proxy_pass http://ip:port;\n      }\n    \n    }\n    \n    ```\n\n7. 启动\n   ```shell\n       #启动nginx\n       cd /usr/local/nginx/sbin\n       ./nginx-02 \n     ```\n\n   **常用命令：**\n   \n   ```shell\n       #修改配置后重新启动\n       ./nginx-02 -s reload\n       #如果出现：nginx: [error] open() ＂/usr/local/nginx/logs/nginx.pid＂ failed\n       /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\n       #再次启动即可\n       \n       #查看nginx进程是否启动\n       ps -ef|grep nginx\n       \n       #平滑启动nginx\n       kill -HUP\n       #主进程号或进程号文件路径 或者使用\n       \n       /usr/nginx/sbin/nginx -s reload\n       \n       #注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。\n       #判断Nginx配置是否正确命令如下：\n       nginx -t -c /usr/nginx/conf/nginx.conf\n       #或者使用\n       /usr/nginx/sbin/nginx -t\n       \n       #重启\n       nginx reload\n       /usr/local/nginx/sbin/nginx -s reload \n       service nginx restart\n       \n       #启动\n       ./nginx-02\n       #关闭\n       ./nginx-02 -s stop\n       \n       \n       #配置nginx开机自启动\n       vim /etc/rc.d/rc.local\n       \n       #再文件中添加nginx启动地址\n        \n       touch /var/lock/subsys/local\n       /usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf\n       \n       #设置开机自启动nginx\n       /usr/local/nginx/sb/nginx\n    ```\n![image-20201210103251475](./nginx-02/image-20210606160947369.png)\n\n启动后访问localhost 效果如下：\n![image-20201210103251475](./nginx-02/image-20201210103251475.png)\n\n## 2.Nginx配置\n```shell\n...... 全局块\n\nevents {\n\t//events 块\n}\n\n###数据库配置\nstream {\n    server {\n       listen 3306;\n       proxy_pass db;    \n    }\n    upstream db {\n       server 192.168.18.130:3305;\n       server 192.168.18.129:3305;\n    }\n \n}\n\nhttp{\n    ##http全局块\n\tserver+{\n\t\tlocation +[]\n\t}\n}\n```\n### 2.1配置内容规则\n官网配置教程：https://nginx.org/en/docs/dirindex.html\n变量应用：https://nginx.org/en/docs/varindex.html\n- 用#表示注释\n- 每行配置的结尾需要加上分号\n- 如果配置项值中包括语法符号，比如空格符，那么需要使用单引号或者双引号行括住配置项值，否则ngin x会报语法错误\n- 单位简写：\n   - K或者k千字节（kilo byte, KB）\n   - M或者m兆字节（megabyte MB）\n   - ms(毫秒)，s(秒)， m(分)， h(小时) ， d (天)， w（周）， M（月，包含30天），y（年）\n    \n### 2.2 详细配置内容\n```text\n########   Nginx的main(全局配置)文件\n#指定nginx运行的用户及用户组,默认为nobody\n#user  nobody;\n\n#开启的线程数，一般跟逻辑CPU核数一致\nworker_processes  1;\n\n#定位全局错误日志文件，级别以notice显示，还有debug,info,warn,error,crit模式，debug输出最多，crir输出最少，根据实际环境而定\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#指定进程id的存储文件位置\n#pid        logs/nginx.pid;\n\n#指定一个nginx进程打开的最多文件描述符数目，受系统进程的最大打开文件数量限制\n#worker_rlimit_nofile 65535\n\nevents {\n    #设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式\n    #use epoll;\n\n    #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。\n    worker_connections  1024;\n}\n###数据库的负载均衡\nstream {\n  upstream mysql_nginx {\n      hash $remote_addr consistent;\n      server 192.168.18.128:3306 weight=5 max_fails=3 fail_timeout=30s;\n      server 192.168.18.129:3306;\n      server 192.168.18.130:3306;\n      ##last_conn; #最小连接\n  }\n  server {\n      listen 3306; # 数据库服务器监听端口\n      proxy_connect_timeout 10s;\n      proxy_timeout 300s; # 设置客户端和代理服务之间的超时时间，如果5分钟内没操作将自动断开。\n      proxy_pass mysql_nginx;\n  }\n}\n#######Nginx的Http服务器配置,Gzip配置\nhttp {\n    #主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度，DNS主配置文件中的zonerfc1912,acl基本上都是用include语句。\n    include       mime.types;\n\n    #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式\n    default_type  application/octet-stream;\n\n    #下面代码为日志格式的设定，main为日志格式的名称，可自行设置，后面引用\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #引用日志main， main是log-format的格式，在上面配置了；后面可以加上日志缓冲区大小，写满了就flush到磁盘中buffer = 1M;\n    #access_log  logs/access.log  main;\n\n    #设置允许客户端请求的最大的单个文件字节数\n    #client_max_body_size 20M;\n    #指定来自客户端请求头的headebuffer大小\n    #client_header_buffer_size  32k;\n    #指定连接请求试图写入缓存文件的目录路径\n    #client_body_temp_path /dev/shm/client_body_temp;\n    #指定客户端请求中较大的消息头的缓存最大数量和大小，目前设置为4个32KB\n    #large client_header_buffers 4 32k;\n\n    #开启高效文件传输模式\n    sendfile        on;\n    #开启防止网络阻塞\n    #tcp_nopush     on;\n    #开启防止网络阻塞\n    #tcp_nodelay    on;\n\n    #设置客户端连接保存活动的超时时间\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #设置客户端请求读取超时时间\n    #client_header_timeout 10;\n    #设置客户端请求主体读取超时时间\n    #client_body_timeout 10;\n    #用于设置相应客户端的超时时间\n    #send_timeout\n\n    ####HttpGZip模块配置\n    #httpGzip modules\n    #开启gzip压缩\n    #gzip  on;\n    #设置允许压缩的页面最小字节数\n    #gzip_min_length 1k;\n    #申请4个单位为16K的内存作为压缩结果流缓存\n    #gzip_buffers 4 16k;\n    #设置识别http协议的版本，默认为1.1\n    #gzip_http_version 1.1;\n    #指定gzip压缩比，1-9数字越小，压缩比越小，速度越快\n    #gzip_comp_level 2;\n    #指定压缩的类型\n    #gzip_types text/plain application/x-javascript text/css application/xml;\n    #让前端的缓存服务器进过gzip压缩的页面\n    #gzip_vary on;\n\n    #########Nginx的server虚拟主机配置\n    server {\n        #监听端口为 80\n        listen       80;\n\n        #设置主机域名\n        server_name  localhost;\n\n        #设置访问的语言编码\n        #charset koi8-r;\n\n        #设置虚拟主机访问日志的存放路径及日志的格式为main\n        #access_log  logs/host.access.log  main;\n\n        #设置虚拟主机的基本信息\n        location / {\n            #设置虚拟主机的网站根目录\n            root   html;\n\n            #设置虚拟主机默认访问的网页\n            index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n}\n```\n\n### 2.3 日志\n在nginx同级目录下logs文件夹\n- access.log  正常日志\n- error.log 错误日期\n\n需要在nginx.conf中的http模块配置access_log","source":"_posts/2021/12/nginx-02.md","raw":"---\ntitle: Nginx基础篇（二）安装\ntags: nginx\ncategories: linux\ncomments: true\nabbrlink: 14520\ndate: 2021-12-05 16:10:44\ntranslate_title: nginx-install\n---\n## 1.Nginx安装\n\n1. 安装nginx前首先要确认系统中是否安装了gcc 、pcre-devel、zlib-devel、openssl-devel\n\n    ```shell\n    #1、rpm包安装的，可以用 rpm -qa 看到，如果要查找某软件包是否安装，用 rpm -qa | grep \"软件或者包的名字\"\n    #2、以deb包安装的，可以用 dpkg -l 看到。如果是查找指定软件包，用 dpkg -l | grep \"软件或者包的名字\"\n    #3、yum方法安装的，可以用 yum list installed 查找，如果是查找指定包，用 yum list installed | grep \"软件名或者包名\"\n    yum list installed | grep \"gcc\"\n    ```\n   ![image-20201210103251475](./nginx-02/image-20201210100736952.png)\n2. 安装依赖包\n\n    ```shell\n    yum -y install gcc pcre-devel zlib-devel openssl openssl-devel\n    ```\n\n3. 下载并解压安装包\n\n    ```shell\n    //创建nginx存放文件夹\n    cd /usr/local\n    mkdir nginx\n    cd nginx\n    #下载tar包\n    wget http://nginx.org/download/nginx-1.13.7.tar.gz\n    tar -xvf nginx-1.13.7.tar.gz\n    ```\n\n4. 配置\n\n    ```shell\n    cd nginx-1.13.7\n    ./configure --prefix=/usr/local/nginx\n    \n    make\n    make install\n    ```\n\n5. 测试是否安装成功\n\n    ```shell\n    ./sbin/nginx -t\n    ```\n\n    <img src=\"source/_posts/2021/07/nginx/image-20201210101238462.png\" alt=\"image-20201210101238462\" style=\"zoom: 67%;float:right;\" />\n\n6. 配置nginx.conf\n\n    ```yml\n    vim /usr/local/nginx/cong/nginx.conf\n    \n    #修改如下\n    server {\n      listen 80;\n      server_name localhost;\n    \n      # 注意设定 root路径是有dist的\n      location / {\n        root /usr/local/webapp/dist;\n        index /index.html;\n      }\n    \n      #跨域 ip和port自行替换\n      location /adminApi {\n        proxy_pass http://ip:port;\n      }\n    \n    }\n    \n    ```\n\n7. 启动\n   ```shell\n       #启动nginx\n       cd /usr/local/nginx/sbin\n       ./nginx-02 \n     ```\n\n   **常用命令：**\n   \n   ```shell\n       #修改配置后重新启动\n       ./nginx-02 -s reload\n       #如果出现：nginx: [error] open() ＂/usr/local/nginx/logs/nginx.pid＂ failed\n       /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\n       #再次启动即可\n       \n       #查看nginx进程是否启动\n       ps -ef|grep nginx\n       \n       #平滑启动nginx\n       kill -HUP\n       #主进程号或进程号文件路径 或者使用\n       \n       /usr/nginx/sbin/nginx -s reload\n       \n       #注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。\n       #判断Nginx配置是否正确命令如下：\n       nginx -t -c /usr/nginx/conf/nginx.conf\n       #或者使用\n       /usr/nginx/sbin/nginx -t\n       \n       #重启\n       nginx reload\n       /usr/local/nginx/sbin/nginx -s reload \n       service nginx restart\n       \n       #启动\n       ./nginx-02\n       #关闭\n       ./nginx-02 -s stop\n       \n       \n       #配置nginx开机自启动\n       vim /etc/rc.d/rc.local\n       \n       #再文件中添加nginx启动地址\n        \n       touch /var/lock/subsys/local\n       /usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf\n       \n       #设置开机自启动nginx\n       /usr/local/nginx/sb/nginx\n    ```\n![image-20201210103251475](./nginx-02/image-20210606160947369.png)\n\n启动后访问localhost 效果如下：\n![image-20201210103251475](./nginx-02/image-20201210103251475.png)\n\n## 2.Nginx配置\n```shell\n...... 全局块\n\nevents {\n\t//events 块\n}\n\n###数据库配置\nstream {\n    server {\n       listen 3306;\n       proxy_pass db;    \n    }\n    upstream db {\n       server 192.168.18.130:3305;\n       server 192.168.18.129:3305;\n    }\n \n}\n\nhttp{\n    ##http全局块\n\tserver+{\n\t\tlocation +[]\n\t}\n}\n```\n### 2.1配置内容规则\n官网配置教程：https://nginx.org/en/docs/dirindex.html\n变量应用：https://nginx.org/en/docs/varindex.html\n- 用#表示注释\n- 每行配置的结尾需要加上分号\n- 如果配置项值中包括语法符号，比如空格符，那么需要使用单引号或者双引号行括住配置项值，否则ngin x会报语法错误\n- 单位简写：\n   - K或者k千字节（kilo byte, KB）\n   - M或者m兆字节（megabyte MB）\n   - ms(毫秒)，s(秒)， m(分)， h(小时) ， d (天)， w（周）， M（月，包含30天），y（年）\n    \n### 2.2 详细配置内容\n```text\n########   Nginx的main(全局配置)文件\n#指定nginx运行的用户及用户组,默认为nobody\n#user  nobody;\n\n#开启的线程数，一般跟逻辑CPU核数一致\nworker_processes  1;\n\n#定位全局错误日志文件，级别以notice显示，还有debug,info,warn,error,crit模式，debug输出最多，crir输出最少，根据实际环境而定\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#指定进程id的存储文件位置\n#pid        logs/nginx.pid;\n\n#指定一个nginx进程打开的最多文件描述符数目，受系统进程的最大打开文件数量限制\n#worker_rlimit_nofile 65535\n\nevents {\n    #设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式\n    #use epoll;\n\n    #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。\n    worker_connections  1024;\n}\n###数据库的负载均衡\nstream {\n  upstream mysql_nginx {\n      hash $remote_addr consistent;\n      server 192.168.18.128:3306 weight=5 max_fails=3 fail_timeout=30s;\n      server 192.168.18.129:3306;\n      server 192.168.18.130:3306;\n      ##last_conn; #最小连接\n  }\n  server {\n      listen 3306; # 数据库服务器监听端口\n      proxy_connect_timeout 10s;\n      proxy_timeout 300s; # 设置客户端和代理服务之间的超时时间，如果5分钟内没操作将自动断开。\n      proxy_pass mysql_nginx;\n  }\n}\n#######Nginx的Http服务器配置,Gzip配置\nhttp {\n    #主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度，DNS主配置文件中的zonerfc1912,acl基本上都是用include语句。\n    include       mime.types;\n\n    #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式\n    default_type  application/octet-stream;\n\n    #下面代码为日志格式的设定，main为日志格式的名称，可自行设置，后面引用\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #引用日志main， main是log-format的格式，在上面配置了；后面可以加上日志缓冲区大小，写满了就flush到磁盘中buffer = 1M;\n    #access_log  logs/access.log  main;\n\n    #设置允许客户端请求的最大的单个文件字节数\n    #client_max_body_size 20M;\n    #指定来自客户端请求头的headebuffer大小\n    #client_header_buffer_size  32k;\n    #指定连接请求试图写入缓存文件的目录路径\n    #client_body_temp_path /dev/shm/client_body_temp;\n    #指定客户端请求中较大的消息头的缓存最大数量和大小，目前设置为4个32KB\n    #large client_header_buffers 4 32k;\n\n    #开启高效文件传输模式\n    sendfile        on;\n    #开启防止网络阻塞\n    #tcp_nopush     on;\n    #开启防止网络阻塞\n    #tcp_nodelay    on;\n\n    #设置客户端连接保存活动的超时时间\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #设置客户端请求读取超时时间\n    #client_header_timeout 10;\n    #设置客户端请求主体读取超时时间\n    #client_body_timeout 10;\n    #用于设置相应客户端的超时时间\n    #send_timeout\n\n    ####HttpGZip模块配置\n    #httpGzip modules\n    #开启gzip压缩\n    #gzip  on;\n    #设置允许压缩的页面最小字节数\n    #gzip_min_length 1k;\n    #申请4个单位为16K的内存作为压缩结果流缓存\n    #gzip_buffers 4 16k;\n    #设置识别http协议的版本，默认为1.1\n    #gzip_http_version 1.1;\n    #指定gzip压缩比，1-9数字越小，压缩比越小，速度越快\n    #gzip_comp_level 2;\n    #指定压缩的类型\n    #gzip_types text/plain application/x-javascript text/css application/xml;\n    #让前端的缓存服务器进过gzip压缩的页面\n    #gzip_vary on;\n\n    #########Nginx的server虚拟主机配置\n    server {\n        #监听端口为 80\n        listen       80;\n\n        #设置主机域名\n        server_name  localhost;\n\n        #设置访问的语言编码\n        #charset koi8-r;\n\n        #设置虚拟主机访问日志的存放路径及日志的格式为main\n        #access_log  logs/host.access.log  main;\n\n        #设置虚拟主机的基本信息\n        location / {\n            #设置虚拟主机的网站根目录\n            root   html;\n\n            #设置虚拟主机默认访问的网页\n            index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n}\n```\n\n### 2.3 日志\n在nginx同级目录下logs文件夹\n- access.log  正常日志\n- error.log 错误日期\n\n需要在nginx.conf中的http模块配置access_log","slug":"nginx-02","published":1,"updated":"2022-03-27T14:06:03.400Z","layout":"post","photos":[],"link":"","_id":"cl235zcwp003wwjpj43wte43a","content":"<h2 id=\"1nginx安装\"><a class=\"markdownIt-Anchor\" href=\"#1nginx安装\"></a> 1.Nginx安装</h2>\n<ol>\n<li>\n<p>安装nginx前首先要确认系统中是否安装了gcc 、pcre-devel、zlib-devel、openssl-devel</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1、rpm包安装的，可以用 rpm -qa 看到，如果要查找某软件包是否安装，用 rpm -qa | grep <span class=\"string\">&quot;软件或者包的名字&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2、以deb包安装的，可以用 dpkg -l 看到。如果是查找指定软件包，用 dpkg -l | grep <span class=\"string\">&quot;软件或者包的名字&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3、yum方法安装的，可以用 yum list installed 查找，如果是查找指定包，用 yum list installed | grep <span class=\"string\">&quot;软件名或者包名&quot;</span></span></span><br><span class=\"line\">yum list installed | grep &quot;gcc&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/nginx-02/image-20201210100736952.png\" alt=\"image-20201210103251475\"></p>\n</li>\n<li>\n<p>安装依赖包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>下载并解压安装包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建nginx存放文件夹</span><br><span class=\"line\">cd /usr/local</span><br><span class=\"line\">mkdir nginx</span><br><span class=\"line\">cd nginx</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载tar包</span></span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.13.7.tar.gz</span><br><span class=\"line\">tar -xvf nginx-1.13.7.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nginx-1.13.7</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>测试是否安装成功</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./sbin/nginx -t</span><br></pre></td></tr></table></figure>\n <img src=\"/nginx-02/_posts/2021/07/nginx/image-20201210101238462.png\" alt=\"image-20201210101238462\" style=\"zoom: 67%;float:right;\">\n</li>\n<li>\n<p>配置nginx.conf</p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">vim</span> <span class=\"string\">/usr/local/nginx/cong/nginx.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#修改如下</span></span><br><span class=\"line\"><span class=\"string\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">listen</span> <span class=\"number\">80</span><span class=\"string\">;</span></span><br><span class=\"line\">  <span class=\"string\">server_name</span> <span class=\"string\">localhost;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 注意设定 root路径是有dist的</span></span><br><span class=\"line\">  <span class=\"string\">location</span> <span class=\"string\">/</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">root</span> <span class=\"string\">/usr/local/webapp/dist;</span></span><br><span class=\"line\">    <span class=\"string\">index</span> <span class=\"string\">/index.html;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#跨域 ip和port自行替换</span></span><br><span class=\"line\">  <span class=\"string\">location</span> <span class=\"string\">/adminApi</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">proxy_pass</span> <span class=\"string\">http://ip:port;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动nginx</span></span><br><span class=\"line\">cd /usr/local/nginx/sbin</span><br><span class=\"line\">./nginx-02 </span><br></pre></td></tr></table></figure>\n<p><strong>常用命令：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改配置后重新启动</span></span><br><span class=\"line\">./nginx-02 -s reload</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果出现：nginx: [error] open() ＂/usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid＂ failed</span></span><br><span class=\"line\">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再次启动即可</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看nginx进程是否启动</span></span><br><span class=\"line\">ps -ef|grep nginx</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">平滑启动nginx</span></span><br><span class=\"line\">kill -HUP</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">主进程号或进程号文件路径 或者使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">/usr/nginx/sbin/nginx -s reload</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">判断Nginx配置是否正确命令如下：</span></span><br><span class=\"line\">nginx -t -c /usr/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者使用</span></span><br><span class=\"line\">/usr/nginx/sbin/nginx -t</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启</span></span><br><span class=\"line\">nginx reload</span><br><span class=\"line\">/usr/local/nginx/sbin/nginx -s reload </span><br><span class=\"line\">service nginx restart</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动</span></span><br><span class=\"line\">./nginx-02</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">关闭</span></span><br><span class=\"line\">./nginx-02 -s stop</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置nginx开机自启动</span></span><br><span class=\"line\">vim /etc/rc.d/rc.local</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再文件中添加nginx启动地址</span></span><br><span class=\"line\"> </span><br><span class=\"line\">touch /var/lock/subsys/local</span><br><span class=\"line\">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置开机自启动nginx</span></span><br><span class=\"line\">/usr/local/nginx/sb/nginx</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"/nginx-02/image-20210606160947369.png\" alt=\"image-20201210103251475\"></p>\n<p>启动后访问localhost 效果如下：<br>\n<img src=\"/nginx-02/image-20201210103251475.png\" alt=\"image-20201210103251475\"></p>\n<h2 id=\"2nginx配置\"><a class=\"markdownIt-Anchor\" href=\"#2nginx配置\"></a> 2.Nginx配置</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...... 全局块</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">\t//events 块</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##数据库配置</span></span></span><br><span class=\"line\">stream &#123;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">       listen 3306;</span><br><span class=\"line\">       proxy_pass db;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    upstream db &#123;</span><br><span class=\"line\">       server 192.168.18.130:3305;</span><br><span class=\"line\">       server 192.168.18.129:3305;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http&#123;</span><br><span class=\"line\">    ##http全局块</span><br><span class=\"line\">\tserver+&#123;</span><br><span class=\"line\">\t\tlocation +[]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"21配置内容规则\"><a class=\"markdownIt-Anchor\" href=\"#21配置内容规则\"></a> 2.1配置内容规则</h3>\n<p>官网配置教程：<a href=\"https://nginx.org/en/docs/dirindex.html\">https://nginx.org/en/docs/dirindex.html</a><br>\n变量应用：<a href=\"https://nginx.org/en/docs/varindex.html\">https://nginx.org/en/docs/varindex.html</a></p>\n<ul>\n<li>用#表示注释</li>\n<li>每行配置的结尾需要加上分号</li>\n<li>如果配置项值中包括语法符号，比如空格符，那么需要使用单引号或者双引号行括住配置项值，否则ngin x会报语法错误</li>\n<li>单位简写：\n<ul>\n<li>K或者k千字节（kilo byte, KB）</li>\n<li>M或者m兆字节（megabyte MB）</li>\n<li>ms(毫秒)，s(秒)， m(分)， h(小时) ， d (天)， w（周）， M（月，包含30天），y（年）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"22-详细配置内容\"><a class=\"markdownIt-Anchor\" href=\"#22-详细配置内容\"></a> 2.2 详细配置内容</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">########   Nginx的main(全局配置)文件</span><br><span class=\"line\">#指定nginx运行的用户及用户组,默认为nobody</span><br><span class=\"line\">#user  nobody;</span><br><span class=\"line\"></span><br><span class=\"line\">#开启的线程数，一般跟逻辑CPU核数一致</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#定位全局错误日志文件，级别以notice显示，还有debug,info,warn,error,crit模式，debug输出最多，crir输出最少，根据实际环境而定</span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#指定进程id的存储文件位置</span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">#指定一个nginx进程打开的最多文件描述符数目，受系统进程的最大打开文件数量限制</span><br><span class=\"line\">#worker_rlimit_nofile 65535</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    #设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式</span><br><span class=\"line\">    #use epoll;</span><br><span class=\"line\"></span><br><span class=\"line\">    #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">###数据库的负载均衡</span><br><span class=\"line\">stream &#123;</span><br><span class=\"line\">  upstream mysql_nginx &#123;</span><br><span class=\"line\">      hash $remote_addr consistent;</span><br><span class=\"line\">      server 192.168.18.128:3306 weight=5 max_fails=3 fail_timeout=30s;</span><br><span class=\"line\">      server 192.168.18.129:3306;</span><br><span class=\"line\">      server 192.168.18.130:3306;</span><br><span class=\"line\">      ##last_conn; #最小连接</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">      listen 3306; # 数据库服务器监听端口</span><br><span class=\"line\">      proxy_connect_timeout 10s;</span><br><span class=\"line\">      proxy_timeout 300s; # 设置客户端和代理服务之间的超时时间，如果5分钟内没操作将自动断开。</span><br><span class=\"line\">      proxy_pass mysql_nginx;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#######Nginx的Http服务器配置,Gzip配置</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    #主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度，DNS主配置文件中的zonerfc1912,acl基本上都是用include语句。</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\"></span><br><span class=\"line\">    #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #下面代码为日志格式的设定，main为日志格式的名称，可自行设置，后面引用</span><br><span class=\"line\">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #引用日志main， main是log-format的格式，在上面配置了；后面可以加上日志缓冲区大小，写满了就flush到磁盘中buffer = 1M;</span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设置允许客户端请求的最大的单个文件字节数</span><br><span class=\"line\">    #client_max_body_size 20M;</span><br><span class=\"line\">    #指定来自客户端请求头的headebuffer大小</span><br><span class=\"line\">    #client_header_buffer_size  32k;</span><br><span class=\"line\">    #指定连接请求试图写入缓存文件的目录路径</span><br><span class=\"line\">    #client_body_temp_path /dev/shm/client_body_temp;</span><br><span class=\"line\">    #指定客户端请求中较大的消息头的缓存最大数量和大小，目前设置为4个32KB</span><br><span class=\"line\">    #large client_header_buffers 4 32k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启高效文件传输模式</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #开启防止网络阻塞</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\">    #开启防止网络阻塞</span><br><span class=\"line\">    #tcp_nodelay    on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设置客户端连接保存活动的超时时间</span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设置客户端请求读取超时时间</span><br><span class=\"line\">    #client_header_timeout 10;</span><br><span class=\"line\">    #设置客户端请求主体读取超时时间</span><br><span class=\"line\">    #client_body_timeout 10;</span><br><span class=\"line\">    #用于设置相应客户端的超时时间</span><br><span class=\"line\">    #send_timeout</span><br><span class=\"line\"></span><br><span class=\"line\">    ####HttpGZip模块配置</span><br><span class=\"line\">    #httpGzip modules</span><br><span class=\"line\">    #开启gzip压缩</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">    #设置允许压缩的页面最小字节数</span><br><span class=\"line\">    #gzip_min_length 1k;</span><br><span class=\"line\">    #申请4个单位为16K的内存作为压缩结果流缓存</span><br><span class=\"line\">    #gzip_buffers 4 16k;</span><br><span class=\"line\">    #设置识别http协议的版本，默认为1.1</span><br><span class=\"line\">    #gzip_http_version 1.1;</span><br><span class=\"line\">    #指定gzip压缩比，1-9数字越小，压缩比越小，速度越快</span><br><span class=\"line\">    #gzip_comp_level 2;</span><br><span class=\"line\">    #指定压缩的类型</span><br><span class=\"line\">    #gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class=\"line\">    #让前端的缓存服务器进过gzip压缩的页面</span><br><span class=\"line\">    #gzip_vary on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #########Nginx的server虚拟主机配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        #监听端口为 80</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置主机域名</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置访问的语言编码</span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置虚拟主机访问日志的存放路径及日志的格式为main</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置虚拟主机的基本信息</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            #设置虚拟主机的网站根目录</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\"></span><br><span class=\"line\">            #设置虚拟主机默认访问的网页</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class=\"line\">        # concurs with nginx&#x27;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"23-日志\"><a class=\"markdownIt-Anchor\" href=\"#23-日志\"></a> 2.3 日志</h3>\n<p>在nginx同级目录下logs文件夹</p>\n<ul>\n<li>access.log  正常日志</li>\n<li>error.log 错误日期</li>\n</ul>\n<p>需要在nginx.conf中的http模块配置access_log</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1nginx安装\"><a class=\"markdownIt-Anchor\" href=\"#1nginx安装\"></a> 1.Nginx安装</h2>\n<ol>\n<li>\n<p>安装nginx前首先要确认系统中是否安装了gcc 、pcre-devel、zlib-devel、openssl-devel</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1、rpm包安装的，可以用 rpm -qa 看到，如果要查找某软件包是否安装，用 rpm -qa | grep <span class=\"string\">&quot;软件或者包的名字&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2、以deb包安装的，可以用 dpkg -l 看到。如果是查找指定软件包，用 dpkg -l | grep <span class=\"string\">&quot;软件或者包的名字&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3、yum方法安装的，可以用 yum list installed 查找，如果是查找指定包，用 yum list installed | grep <span class=\"string\">&quot;软件名或者包名&quot;</span></span></span><br><span class=\"line\">yum list installed | grep &quot;gcc&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/nginx-02/image-20201210100736952.png\" alt=\"image-20201210103251475\"></p>\n</li>\n<li>\n<p>安装依赖包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>下载并解压安装包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建nginx存放文件夹</span><br><span class=\"line\">cd /usr/local</span><br><span class=\"line\">mkdir nginx</span><br><span class=\"line\">cd nginx</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载tar包</span></span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.13.7.tar.gz</span><br><span class=\"line\">tar -xvf nginx-1.13.7.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nginx-1.13.7</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>测试是否安装成功</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./sbin/nginx -t</span><br></pre></td></tr></table></figure>\n <img src=\"/nginx-02/_posts/2021/07/nginx/image-20201210101238462.png\" alt=\"image-20201210101238462\" style=\"zoom: 67%;float:right;\">\n</li>\n<li>\n<p>配置nginx.conf</p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">vim</span> <span class=\"string\">/usr/local/nginx/cong/nginx.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#修改如下</span></span><br><span class=\"line\"><span class=\"string\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">listen</span> <span class=\"number\">80</span><span class=\"string\">;</span></span><br><span class=\"line\">  <span class=\"string\">server_name</span> <span class=\"string\">localhost;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 注意设定 root路径是有dist的</span></span><br><span class=\"line\">  <span class=\"string\">location</span> <span class=\"string\">/</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">root</span> <span class=\"string\">/usr/local/webapp/dist;</span></span><br><span class=\"line\">    <span class=\"string\">index</span> <span class=\"string\">/index.html;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#跨域 ip和port自行替换</span></span><br><span class=\"line\">  <span class=\"string\">location</span> <span class=\"string\">/adminApi</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">proxy_pass</span> <span class=\"string\">http://ip:port;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动nginx</span></span><br><span class=\"line\">cd /usr/local/nginx/sbin</span><br><span class=\"line\">./nginx-02 </span><br></pre></td></tr></table></figure>\n<p><strong>常用命令：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改配置后重新启动</span></span><br><span class=\"line\">./nginx-02 -s reload</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果出现：nginx: [error] open() ＂/usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid＂ failed</span></span><br><span class=\"line\">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再次启动即可</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看nginx进程是否启动</span></span><br><span class=\"line\">ps -ef|grep nginx</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">平滑启动nginx</span></span><br><span class=\"line\">kill -HUP</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">主进程号或进程号文件路径 或者使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">/usr/nginx/sbin/nginx -s reload</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">判断Nginx配置是否正确命令如下：</span></span><br><span class=\"line\">nginx -t -c /usr/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者使用</span></span><br><span class=\"line\">/usr/nginx/sbin/nginx -t</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启</span></span><br><span class=\"line\">nginx reload</span><br><span class=\"line\">/usr/local/nginx/sbin/nginx -s reload </span><br><span class=\"line\">service nginx restart</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动</span></span><br><span class=\"line\">./nginx-02</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">关闭</span></span><br><span class=\"line\">./nginx-02 -s stop</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置nginx开机自启动</span></span><br><span class=\"line\">vim /etc/rc.d/rc.local</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再文件中添加nginx启动地址</span></span><br><span class=\"line\"> </span><br><span class=\"line\">touch /var/lock/subsys/local</span><br><span class=\"line\">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置开机自启动nginx</span></span><br><span class=\"line\">/usr/local/nginx/sb/nginx</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"/nginx-02/image-20210606160947369.png\" alt=\"image-20201210103251475\"></p>\n<p>启动后访问localhost 效果如下：<br>\n<img src=\"/nginx-02/image-20201210103251475.png\" alt=\"image-20201210103251475\"></p>\n<h2 id=\"2nginx配置\"><a class=\"markdownIt-Anchor\" href=\"#2nginx配置\"></a> 2.Nginx配置</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...... 全局块</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">\t//events 块</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##数据库配置</span></span></span><br><span class=\"line\">stream &#123;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">       listen 3306;</span><br><span class=\"line\">       proxy_pass db;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    upstream db &#123;</span><br><span class=\"line\">       server 192.168.18.130:3305;</span><br><span class=\"line\">       server 192.168.18.129:3305;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http&#123;</span><br><span class=\"line\">    ##http全局块</span><br><span class=\"line\">\tserver+&#123;</span><br><span class=\"line\">\t\tlocation +[]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"21配置内容规则\"><a class=\"markdownIt-Anchor\" href=\"#21配置内容规则\"></a> 2.1配置内容规则</h3>\n<p>官网配置教程：<a href=\"https://nginx.org/en/docs/dirindex.html\">https://nginx.org/en/docs/dirindex.html</a><br>\n变量应用：<a href=\"https://nginx.org/en/docs/varindex.html\">https://nginx.org/en/docs/varindex.html</a></p>\n<ul>\n<li>用#表示注释</li>\n<li>每行配置的结尾需要加上分号</li>\n<li>如果配置项值中包括语法符号，比如空格符，那么需要使用单引号或者双引号行括住配置项值，否则ngin x会报语法错误</li>\n<li>单位简写：\n<ul>\n<li>K或者k千字节（kilo byte, KB）</li>\n<li>M或者m兆字节（megabyte MB）</li>\n<li>ms(毫秒)，s(秒)， m(分)， h(小时) ， d (天)， w（周）， M（月，包含30天），y（年）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"22-详细配置内容\"><a class=\"markdownIt-Anchor\" href=\"#22-详细配置内容\"></a> 2.2 详细配置内容</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">########   Nginx的main(全局配置)文件</span><br><span class=\"line\">#指定nginx运行的用户及用户组,默认为nobody</span><br><span class=\"line\">#user  nobody;</span><br><span class=\"line\"></span><br><span class=\"line\">#开启的线程数，一般跟逻辑CPU核数一致</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#定位全局错误日志文件，级别以notice显示，还有debug,info,warn,error,crit模式，debug输出最多，crir输出最少，根据实际环境而定</span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#指定进程id的存储文件位置</span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">#指定一个nginx进程打开的最多文件描述符数目，受系统进程的最大打开文件数量限制</span><br><span class=\"line\">#worker_rlimit_nofile 65535</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    #设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式</span><br><span class=\"line\">    #use epoll;</span><br><span class=\"line\"></span><br><span class=\"line\">    #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">###数据库的负载均衡</span><br><span class=\"line\">stream &#123;</span><br><span class=\"line\">  upstream mysql_nginx &#123;</span><br><span class=\"line\">      hash $remote_addr consistent;</span><br><span class=\"line\">      server 192.168.18.128:3306 weight=5 max_fails=3 fail_timeout=30s;</span><br><span class=\"line\">      server 192.168.18.129:3306;</span><br><span class=\"line\">      server 192.168.18.130:3306;</span><br><span class=\"line\">      ##last_conn; #最小连接</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">      listen 3306; # 数据库服务器监听端口</span><br><span class=\"line\">      proxy_connect_timeout 10s;</span><br><span class=\"line\">      proxy_timeout 300s; # 设置客户端和代理服务之间的超时时间，如果5分钟内没操作将自动断开。</span><br><span class=\"line\">      proxy_pass mysql_nginx;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#######Nginx的Http服务器配置,Gzip配置</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    #主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度，DNS主配置文件中的zonerfc1912,acl基本上都是用include语句。</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\"></span><br><span class=\"line\">    #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #下面代码为日志格式的设定，main为日志格式的名称，可自行设置，后面引用</span><br><span class=\"line\">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #引用日志main， main是log-format的格式，在上面配置了；后面可以加上日志缓冲区大小，写满了就flush到磁盘中buffer = 1M;</span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设置允许客户端请求的最大的单个文件字节数</span><br><span class=\"line\">    #client_max_body_size 20M;</span><br><span class=\"line\">    #指定来自客户端请求头的headebuffer大小</span><br><span class=\"line\">    #client_header_buffer_size  32k;</span><br><span class=\"line\">    #指定连接请求试图写入缓存文件的目录路径</span><br><span class=\"line\">    #client_body_temp_path /dev/shm/client_body_temp;</span><br><span class=\"line\">    #指定客户端请求中较大的消息头的缓存最大数量和大小，目前设置为4个32KB</span><br><span class=\"line\">    #large client_header_buffers 4 32k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启高效文件传输模式</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #开启防止网络阻塞</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\">    #开启防止网络阻塞</span><br><span class=\"line\">    #tcp_nodelay    on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设置客户端连接保存活动的超时时间</span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设置客户端请求读取超时时间</span><br><span class=\"line\">    #client_header_timeout 10;</span><br><span class=\"line\">    #设置客户端请求主体读取超时时间</span><br><span class=\"line\">    #client_body_timeout 10;</span><br><span class=\"line\">    #用于设置相应客户端的超时时间</span><br><span class=\"line\">    #send_timeout</span><br><span class=\"line\"></span><br><span class=\"line\">    ####HttpGZip模块配置</span><br><span class=\"line\">    #httpGzip modules</span><br><span class=\"line\">    #开启gzip压缩</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">    #设置允许压缩的页面最小字节数</span><br><span class=\"line\">    #gzip_min_length 1k;</span><br><span class=\"line\">    #申请4个单位为16K的内存作为压缩结果流缓存</span><br><span class=\"line\">    #gzip_buffers 4 16k;</span><br><span class=\"line\">    #设置识别http协议的版本，默认为1.1</span><br><span class=\"line\">    #gzip_http_version 1.1;</span><br><span class=\"line\">    #指定gzip压缩比，1-9数字越小，压缩比越小，速度越快</span><br><span class=\"line\">    #gzip_comp_level 2;</span><br><span class=\"line\">    #指定压缩的类型</span><br><span class=\"line\">    #gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class=\"line\">    #让前端的缓存服务器进过gzip压缩的页面</span><br><span class=\"line\">    #gzip_vary on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #########Nginx的server虚拟主机配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        #监听端口为 80</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置主机域名</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置访问的语言编码</span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置虚拟主机访问日志的存放路径及日志的格式为main</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置虚拟主机的基本信息</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            #设置虚拟主机的网站根目录</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\"></span><br><span class=\"line\">            #设置虚拟主机默认访问的网页</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class=\"line\">        # concurs with nginx&#x27;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"23-日志\"><a class=\"markdownIt-Anchor\" href=\"#23-日志\"></a> 2.3 日志</h3>\n<p>在nginx同级目录下logs文件夹</p>\n<ul>\n<li>access.log  正常日志</li>\n<li>error.log 错误日期</li>\n</ul>\n<p>需要在nginx.conf中的http模块配置access_log</p>\n"},{"title":"Nginx基础篇（三）实现虚拟主机","comments":1,"abbrlink":59090,"date":"2021-12-05T08:31:25.000Z","translate_title":"nginx-install","_content":"### 1. 虚拟主机Virtual Host\n一种在单一主机或主机群上，实现多网域服务的方法，可以运行多个网站或服务的技术，虚拟主机之间完全独立，并可由用户自行管理虚拟并非指不存在，而是指空间是由实体的服务器延伸而来，其硬件系统可以是基于服务器群，或者单个服务器\n\n使用域名访问虚拟主机，虚拟主机会给一个文件路径，然后部署自己的内容；访问域名时就会访问改文件夹下的某 个资源\n\n### 2. 使用Nginx配置虚拟主机\n1. 在nginx下建立一个ygb的文件夹，里面新建一个index.html\n2. 在nginx.conf配置下http -> server块内配置\n   ```text\n    server {\n        #监听端口为 80\n        listen       80;\n        #设置主机域名\n        server_name  www.xiaoyuge.work;\n        #设置访问的语言编码\n        #charset koi8-r;\n        #设置虚拟主机访问日志的存放路径及日志的格式为main\n        #access_log  logs/host.access.log  main;\n   \n        #    这个是域名反问的虚拟主机的文件路径\n        root  /usr/local/nginx/data/ygb\n        #设置虚拟主机的基本信息\n        location / {\n            #设置虚拟主机默认访问的网页\n            index  index.html index.htm;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n   ```\n\n3. 启动,然后在浏览器访问域名www.xiaoyuge.work\n    ```shell\n      ./nginx -c ./nginx.conf\n   ```","source":"_posts/2021/12/nginx-03.md","raw":"---\ntitle: Nginx基础篇（三）实现虚拟主机\ncomments: true\ntags: nginx\ncategories: nginx\nabbrlink: 59090\ndate: 2021-12-05 16:31:25\ntranslate_title: nginx-install\n---\n### 1. 虚拟主机Virtual Host\n一种在单一主机或主机群上，实现多网域服务的方法，可以运行多个网站或服务的技术，虚拟主机之间完全独立，并可由用户自行管理虚拟并非指不存在，而是指空间是由实体的服务器延伸而来，其硬件系统可以是基于服务器群，或者单个服务器\n\n使用域名访问虚拟主机，虚拟主机会给一个文件路径，然后部署自己的内容；访问域名时就会访问改文件夹下的某 个资源\n\n### 2. 使用Nginx配置虚拟主机\n1. 在nginx下建立一个ygb的文件夹，里面新建一个index.html\n2. 在nginx.conf配置下http -> server块内配置\n   ```text\n    server {\n        #监听端口为 80\n        listen       80;\n        #设置主机域名\n        server_name  www.xiaoyuge.work;\n        #设置访问的语言编码\n        #charset koi8-r;\n        #设置虚拟主机访问日志的存放路径及日志的格式为main\n        #access_log  logs/host.access.log  main;\n   \n        #    这个是域名反问的虚拟主机的文件路径\n        root  /usr/local/nginx/data/ygb\n        #设置虚拟主机的基本信息\n        location / {\n            #设置虚拟主机默认访问的网页\n            index  index.html index.htm;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n   ```\n\n3. 启动,然后在浏览器访问域名www.xiaoyuge.work\n    ```shell\n      ./nginx -c ./nginx.conf\n   ```","slug":"nginx-03","published":1,"updated":"2022-03-27T14:06:03.463Z","layout":"post","photos":[],"link":"","_id":"cl235zcwq003zwjpjf1c9gc4s","content":"<h3 id=\"1-虚拟主机virtual-host\"><a class=\"markdownIt-Anchor\" href=\"#1-虚拟主机virtual-host\"></a> 1. 虚拟主机Virtual Host</h3>\n<p>一种在单一主机或主机群上，实现多网域服务的方法，可以运行多个网站或服务的技术，虚拟主机之间完全独立，并可由用户自行管理虚拟并非指不存在，而是指空间是由实体的服务器延伸而来，其硬件系统可以是基于服务器群，或者单个服务器</p>\n<p>使用域名访问虚拟主机，虚拟主机会给一个文件路径，然后部署自己的内容；访问域名时就会访问改文件夹下的某 个资源</p>\n<h3 id=\"2-使用nginx配置虚拟主机\"><a class=\"markdownIt-Anchor\" href=\"#2-使用nginx配置虚拟主机\"></a> 2. 使用Nginx配置虚拟主机</h3>\n<ol>\n<li>\n<p>在nginx下建立一个ygb的文件夹，里面新建一个index.html</p>\n</li>\n<li>\n<p>在nginx.conf配置下http -&gt; server块内配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    #监听端口为 80</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    #设置主机域名</span><br><span class=\"line\">    server_name  www.xiaoyuge.work;</span><br><span class=\"line\">    #设置访问的语言编码</span><br><span class=\"line\">    #charset koi8-r;</span><br><span class=\"line\">    #设置虚拟主机访问日志的存放路径及日志的格式为main</span><br><span class=\"line\">    #access_log  logs/host.access.log  main;</span><br><span class=\"line\">   </span><br><span class=\"line\">    #    这个是域名反问的虚拟主机的文件路径</span><br><span class=\"line\">    root  /usr/local/nginx/data/ygb</span><br><span class=\"line\">    #设置虚拟主机的基本信息</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        #设置虚拟主机默认访问的网页</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>启动,然后在浏览器访问域名www.xiaoyuge.work</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -c ./nginx.conf</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"1-虚拟主机virtual-host\"><a class=\"markdownIt-Anchor\" href=\"#1-虚拟主机virtual-host\"></a> 1. 虚拟主机Virtual Host</h3>\n<p>一种在单一主机或主机群上，实现多网域服务的方法，可以运行多个网站或服务的技术，虚拟主机之间完全独立，并可由用户自行管理虚拟并非指不存在，而是指空间是由实体的服务器延伸而来，其硬件系统可以是基于服务器群，或者单个服务器</p>\n<p>使用域名访问虚拟主机，虚拟主机会给一个文件路径，然后部署自己的内容；访问域名时就会访问改文件夹下的某 个资源</p>\n<h3 id=\"2-使用nginx配置虚拟主机\"><a class=\"markdownIt-Anchor\" href=\"#2-使用nginx配置虚拟主机\"></a> 2. 使用Nginx配置虚拟主机</h3>\n<ol>\n<li>\n<p>在nginx下建立一个ygb的文件夹，里面新建一个index.html</p>\n</li>\n<li>\n<p>在nginx.conf配置下http -&gt; server块内配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    #监听端口为 80</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    #设置主机域名</span><br><span class=\"line\">    server_name  www.xiaoyuge.work;</span><br><span class=\"line\">    #设置访问的语言编码</span><br><span class=\"line\">    #charset koi8-r;</span><br><span class=\"line\">    #设置虚拟主机访问日志的存放路径及日志的格式为main</span><br><span class=\"line\">    #access_log  logs/host.access.log  main;</span><br><span class=\"line\">   </span><br><span class=\"line\">    #    这个是域名反问的虚拟主机的文件路径</span><br><span class=\"line\">    root  /usr/local/nginx/data/ygb</span><br><span class=\"line\">    #设置虚拟主机的基本信息</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        #设置虚拟主机默认访问的网页</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>启动,然后在浏览器访问域名www.xiaoyuge.work</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -c ./nginx.conf</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Nginx基础篇（四）Nginx实现反向代理","comments":1,"translate_title":"nginx-04","abbrlink":29976,"date":"2021-12-05T08:52:42.000Z","_content":"### 1. 正向代理和反向代理\n1. 正向代理：\n   正向代理类似一个跳板机，代理访问外部资源\n比如我们国内访问谷歌，直接访问访问不到，我们可以通过一个正向代理服务器，请求发到代理服，代理服务器能够访问谷歌，这样由代理去谷歌取到返回数据，再返回给我们，这样我们就能访问谷歌了\n![正向代理](./nginx-04/1.png)\n\n    **正向代理的用途**：\n    \n    （1）访问原来无法访问的资源，如google\n    \n    （2） 可以做缓存，加速访问资源\n    \n    （3）对客户端访问授权，上网进行认证\n    \n    （4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息\n    \n    **正向代理即是客户端代理, 代理客户端, 服务端不知道实际发起请求的客户端**\n   ![正反向代理](./nginx-04/3.png)\n   \n2. 反向代理：\n   反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器\n   ![反向代理](./nginx-04/2.png)\n   \n   **反向代理的作用**：\n   \n   （1）保证内网的安全，阻止web攻击，大型网站，通常将反向代理作为公网访问地址，Web服务器是内网\n   \n   （2）负载均衡，通过反向代理服务器来优化网站的负载\n\n   **反向代理即是服务端代理, 代理服务端, 客户端不知道实际提供服务的服务端**\n\n\n### 2. Nginx配置反向代理\n在http-> server块中配置server_name\n```shell\nserver {\n    #监听端口为 80\n    listen       80;\n    #设置主机域名\n    server_name  http://192.168.44.99;\n    #设置虚拟主机的基本信息\n    location / {\n        proxy_pass http://192.168.44.1:9096;      ###最重要的配置，转发到目标地址， 也可以配置服务器组，然后upstream一个服务器组\n        proxy_method POST;   #设置转发请求的格式\n        #Nginx在header里面增加一个自定义字段 Host， 用于存放当前客户端IP地址\n        proxy_set_header  Host $host;\n        #获取客户端的真实IP地址设置到header中的字段名为X-Real-IP里面\n        proxy_set_header X-Real-IP  $remote_addr;\n        #获取所有转发请求的IP信息列表\n        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;\n    }\n}\n```\n那么访问http://192.168.44.99 ， nginx会将请求转发给目标服务器http://192.168.44.1:9096\n\n#### 2.1 location 匹配规则\n匹配规则从上到下，匹配规则越宽松；\n\n|   模式   |   含义   | \n| ---- | ---- |\n|   location=/uri   |   = 表示精确匹配，只有完全匹配才能生效   |      \n|   location ^~ /uri   |   ^~ 开头对URL路径进行前缀匹配，并且在正则之前   |      \n|   location ~ pattern   |   开头表示区分大小写的正则匹配   |   \n|   location ~* pattern   |   开头表示不区分大小写的正则匹配   |     \n|   location /uri   |   不带任何修饰符，也表示前缀匹配，但是在正则匹配之后   |     \n|   location /  |   通用匹配，任何未匹配到其他location的请求都会匹配到，相当于switch中的default   |     \n\n\n","source":"_posts/2021/12/nginx-04.md","raw":"---\ntitle: Nginx基础篇（四）Nginx实现反向代理\ncomments: true\ntags: nginx\ncategories: nginx\ntranslate_title: nginx-04\nabbrlink: 29976\ndate: 2021-12-05 16:52:42\n---\n### 1. 正向代理和反向代理\n1. 正向代理：\n   正向代理类似一个跳板机，代理访问外部资源\n比如我们国内访问谷歌，直接访问访问不到，我们可以通过一个正向代理服务器，请求发到代理服，代理服务器能够访问谷歌，这样由代理去谷歌取到返回数据，再返回给我们，这样我们就能访问谷歌了\n![正向代理](./nginx-04/1.png)\n\n    **正向代理的用途**：\n    \n    （1）访问原来无法访问的资源，如google\n    \n    （2） 可以做缓存，加速访问资源\n    \n    （3）对客户端访问授权，上网进行认证\n    \n    （4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息\n    \n    **正向代理即是客户端代理, 代理客户端, 服务端不知道实际发起请求的客户端**\n   ![正反向代理](./nginx-04/3.png)\n   \n2. 反向代理：\n   反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器\n   ![反向代理](./nginx-04/2.png)\n   \n   **反向代理的作用**：\n   \n   （1）保证内网的安全，阻止web攻击，大型网站，通常将反向代理作为公网访问地址，Web服务器是内网\n   \n   （2）负载均衡，通过反向代理服务器来优化网站的负载\n\n   **反向代理即是服务端代理, 代理服务端, 客户端不知道实际提供服务的服务端**\n\n\n### 2. Nginx配置反向代理\n在http-> server块中配置server_name\n```shell\nserver {\n    #监听端口为 80\n    listen       80;\n    #设置主机域名\n    server_name  http://192.168.44.99;\n    #设置虚拟主机的基本信息\n    location / {\n        proxy_pass http://192.168.44.1:9096;      ###最重要的配置，转发到目标地址， 也可以配置服务器组，然后upstream一个服务器组\n        proxy_method POST;   #设置转发请求的格式\n        #Nginx在header里面增加一个自定义字段 Host， 用于存放当前客户端IP地址\n        proxy_set_header  Host $host;\n        #获取客户端的真实IP地址设置到header中的字段名为X-Real-IP里面\n        proxy_set_header X-Real-IP  $remote_addr;\n        #获取所有转发请求的IP信息列表\n        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;\n    }\n}\n```\n那么访问http://192.168.44.99 ， nginx会将请求转发给目标服务器http://192.168.44.1:9096\n\n#### 2.1 location 匹配规则\n匹配规则从上到下，匹配规则越宽松；\n\n|   模式   |   含义   | \n| ---- | ---- |\n|   location=/uri   |   = 表示精确匹配，只有完全匹配才能生效   |      \n|   location ^~ /uri   |   ^~ 开头对URL路径进行前缀匹配，并且在正则之前   |      \n|   location ~ pattern   |   开头表示区分大小写的正则匹配   |   \n|   location ~* pattern   |   开头表示不区分大小写的正则匹配   |     \n|   location /uri   |   不带任何修饰符，也表示前缀匹配，但是在正则匹配之后   |     \n|   location /  |   通用匹配，任何未匹配到其他location的请求都会匹配到，相当于switch中的default   |     \n\n\n","slug":"nginx-04","published":1,"updated":"2022-03-27T14:06:03.384Z","layout":"post","photos":[],"link":"","_id":"cl235zcwr0043wjpj0rc546do","content":"<h3 id=\"1-正向代理和反向代理\"><a class=\"markdownIt-Anchor\" href=\"#1-正向代理和反向代理\"></a> 1. 正向代理和反向代理</h3>\n<ol>\n<li>\n<p>正向代理：<br>\n正向代理类似一个跳板机，代理访问外部资源<br>\n比如我们国内访问谷歌，直接访问访问不到，我们可以通过一个正向代理服务器，请求发到代理服，代理服务器能够访问谷歌，这样由代理去谷歌取到返回数据，再返回给我们，这样我们就能访问谷歌了<br>\n<img src=\"/nginx-04/1.png\" alt=\"正向代理\"></p>\n<p><strong>正向代理的用途</strong>：</p>\n<p>（1）访问原来无法访问的资源，如google</p>\n<p>（2） 可以做缓存，加速访问资源</p>\n<p>（3）对客户端访问授权，上网进行认证</p>\n<p>（4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</p>\n<p><strong>正向代理即是客户端代理, 代理客户端, 服务端不知道实际发起请求的客户端</strong><br>\n<img src=\"/nginx-04/3.png\" alt=\"正反向代理\"></p>\n</li>\n<li>\n<p>反向代理：<br>\n反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器<br>\n<img src=\"/nginx-04/2.png\" alt=\"反向代理\"></p>\n<p><strong>反向代理的作用</strong>：</p>\n<p>（1）保证内网的安全，阻止web攻击，大型网站，通常将反向代理作为公网访问地址，Web服务器是内网</p>\n<p>（2）负载均衡，通过反向代理服务器来优化网站的负载</p>\n<p><strong>反向代理即是服务端代理, 代理服务端, 客户端不知道实际提供服务的服务端</strong></p>\n</li>\n</ol>\n<h3 id=\"2-nginx配置反向代理\"><a class=\"markdownIt-Anchor\" href=\"#2-nginx配置反向代理\"></a> 2. Nginx配置反向代理</h3>\n<p>在http-&gt; server块中配置server_name</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    #监听端口为 80</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    #设置主机域名</span><br><span class=\"line\">    server_name  http://192.168.44.99;</span><br><span class=\"line\">    #设置虚拟主机的基本信息</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://192.168.44.1:9096;      ###最重要的配置，转发到目标地址， 也可以配置服务器组，然后upstream一个服务器组</span><br><span class=\"line\">        proxy_method POST;   #设置转发请求的格式</span><br><span class=\"line\">        #Nginx在header里面增加一个自定义字段 Host， 用于存放当前客户端IP地址</span><br><span class=\"line\">        proxy_set_header  Host $host;</span><br><span class=\"line\">        #获取客户端的真实IP地址设置到header中的字段名为X-Real-IP里面</span><br><span class=\"line\">        proxy_set_header X-Real-IP  $remote_addr;</span><br><span class=\"line\">        #获取所有转发请求的IP信息列表</span><br><span class=\"line\">        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么访问http://192.168.44.99 ， nginx会将请求转发给目标服务器http://192.168.44.1:9096</p>\n<h4 id=\"21-location-匹配规则\"><a class=\"markdownIt-Anchor\" href=\"#21-location-匹配规则\"></a> 2.1 location 匹配规则</h4>\n<p>匹配规则从上到下，匹配规则越宽松；</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>location=/uri</td>\n<td>= 表示精确匹配，只有完全匹配才能生效</td>\n</tr>\n<tr>\n<td>location ^~ /uri</td>\n<td>^~ 开头对URL路径进行前缀匹配，并且在正则之前</td>\n</tr>\n<tr>\n<td>location ~ pattern</td>\n<td>开头表示区分大小写的正则匹配</td>\n</tr>\n<tr>\n<td>location ~* pattern</td>\n<td>开头表示不区分大小写的正则匹配</td>\n</tr>\n<tr>\n<td>location /uri</td>\n<td>不带任何修饰符，也表示前缀匹配，但是在正则匹配之后</td>\n</tr>\n<tr>\n<td>location /</td>\n<td>通用匹配，任何未匹配到其他location的请求都会匹配到，相当于switch中的default</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"1-正向代理和反向代理\"><a class=\"markdownIt-Anchor\" href=\"#1-正向代理和反向代理\"></a> 1. 正向代理和反向代理</h3>\n<ol>\n<li>\n<p>正向代理：<br>\n正向代理类似一个跳板机，代理访问外部资源<br>\n比如我们国内访问谷歌，直接访问访问不到，我们可以通过一个正向代理服务器，请求发到代理服，代理服务器能够访问谷歌，这样由代理去谷歌取到返回数据，再返回给我们，这样我们就能访问谷歌了<br>\n<img src=\"/nginx-04/1.png\" alt=\"正向代理\"></p>\n<p><strong>正向代理的用途</strong>：</p>\n<p>（1）访问原来无法访问的资源，如google</p>\n<p>（2） 可以做缓存，加速访问资源</p>\n<p>（3）对客户端访问授权，上网进行认证</p>\n<p>（4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</p>\n<p><strong>正向代理即是客户端代理, 代理客户端, 服务端不知道实际发起请求的客户端</strong><br>\n<img src=\"/nginx-04/3.png\" alt=\"正反向代理\"></p>\n</li>\n<li>\n<p>反向代理：<br>\n反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器<br>\n<img src=\"/nginx-04/2.png\" alt=\"反向代理\"></p>\n<p><strong>反向代理的作用</strong>：</p>\n<p>（1）保证内网的安全，阻止web攻击，大型网站，通常将反向代理作为公网访问地址，Web服务器是内网</p>\n<p>（2）负载均衡，通过反向代理服务器来优化网站的负载</p>\n<p><strong>反向代理即是服务端代理, 代理服务端, 客户端不知道实际提供服务的服务端</strong></p>\n</li>\n</ol>\n<h3 id=\"2-nginx配置反向代理\"><a class=\"markdownIt-Anchor\" href=\"#2-nginx配置反向代理\"></a> 2. Nginx配置反向代理</h3>\n<p>在http-&gt; server块中配置server_name</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    #监听端口为 80</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    #设置主机域名</span><br><span class=\"line\">    server_name  http://192.168.44.99;</span><br><span class=\"line\">    #设置虚拟主机的基本信息</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://192.168.44.1:9096;      ###最重要的配置，转发到目标地址， 也可以配置服务器组，然后upstream一个服务器组</span><br><span class=\"line\">        proxy_method POST;   #设置转发请求的格式</span><br><span class=\"line\">        #Nginx在header里面增加一个自定义字段 Host， 用于存放当前客户端IP地址</span><br><span class=\"line\">        proxy_set_header  Host $host;</span><br><span class=\"line\">        #获取客户端的真实IP地址设置到header中的字段名为X-Real-IP里面</span><br><span class=\"line\">        proxy_set_header X-Real-IP  $remote_addr;</span><br><span class=\"line\">        #获取所有转发请求的IP信息列表</span><br><span class=\"line\">        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么访问http://192.168.44.99 ， nginx会将请求转发给目标服务器http://192.168.44.1:9096</p>\n<h4 id=\"21-location-匹配规则\"><a class=\"markdownIt-Anchor\" href=\"#21-location-匹配规则\"></a> 2.1 location 匹配规则</h4>\n<p>匹配规则从上到下，匹配规则越宽松；</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>location=/uri</td>\n<td>= 表示精确匹配，只有完全匹配才能生效</td>\n</tr>\n<tr>\n<td>location ^~ /uri</td>\n<td>^~ 开头对URL路径进行前缀匹配，并且在正则之前</td>\n</tr>\n<tr>\n<td>location ~ pattern</td>\n<td>开头表示区分大小写的正则匹配</td>\n</tr>\n<tr>\n<td>location ~* pattern</td>\n<td>开头表示不区分大小写的正则匹配</td>\n</tr>\n<tr>\n<td>location /uri</td>\n<td>不带任何修饰符，也表示前缀匹配，但是在正则匹配之后</td>\n</tr>\n<tr>\n<td>location /</td>\n<td>通用匹配，任何未匹配到其他location的请求都会匹配到，相当于switch中的default</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Nginx基础篇（一）扫盲","comments":1,"translate_title":"Nginx-Basics-I-literacy","abbrlink":58927,"date":"2021-12-05T06:56:36.000Z","_content":"### 1.Nginx发展史\n作者：logo Sysoev\n- 2000年地洞，c语言编写\n- 2004年开源\n- 2011年成立商业公司\n- 2013 发布商业版本Nginx plus\n- 2019.5月F5 Networks收购nginx\n- 2019.12被Rambler集团起诉\n\n\n### 2.Nginx与其他web服务器对比\n\n1. Nginx与Apache HTTP server project区别\n   用来响应用户请求的web服务器\n2. Nginx 和tomcat区别\n   Nginx是HTTP Server，主要是用于访问一些静态资源，可以用做代理服务器\n   Tomcat是Application Server应用服务器，用来存放和运行程序；\n3. HTTP Server 和Application Server区别与联系\n\n### 3. HTTP知识\n#### 3.1 IP和端口\n120.77.38.160:80\n\n0为A类，10为B类，110为C类，1110为D类，1111为E类。D类地址供组播使用，E类地址保留。\n\n![img](./nginx-md/1.png)\n\n![img](./nginx-md/2.png)\n\n端口是：0～65535\n#### 3.2 域名\n协议、子域名、顶级域名、域名类型、资源路径、参数\n```text\n#https 协议默认端口443 可以省略\nhttps://www.baidu.com:443\n\n#user：子域名， com为域名类型（cn中国， us美国...）； 3623252831 为资源路径\nhttps://user.qzone.qq.com/3623252831\n\n#？号后面为参数\nhttps://baike.baidu.com/item/测试/232323?fr=asdfasdf\n```\n**域名(domainName)和IP的关系以及域名的组成**\n\n域名：https://www.baidu.com:443/member/query?far=adsfad\n   - http/ https: 协议\n   - baidu: 顶级域名\n   - Com： 域名类型\n   - www: 子域名，可以有多级：user.qzone.qq.com/232323\n   - far=asdfa: 参数\n   - member/query: 资源路径\nDNS(domain name server)将域名转化为ip+port\n     \n\n##### 3.3 HTTP协议的特点\n- 简单快速\n- 灵活\n- 无连接（一次请求，连接关闭）\n- 无状态（每次请求都和之前的请求无关）\n\n\n##### 3.4 HTTP协议的请求格式\n```text\nRequest URL: https://prtas.videocc.net/v2/view?pid=1638687363047X1327470&vid=8c8d9388d0b4c16f41ef557fba23dede_8&uid=8c8d9388d0&flow=0&ts=1638688553584&href=aHR0cHM6Ly9rZS5ndXBhb2VkdS5jbi9wbGF5LzI4OD9waGFzZUlkPTU&duration=1278&cts=789&sign=fcf19468eff088e983796d5826268f2d&sd=1190&pd=788&pn=HTML5&pv=v1.15.0&sid=ZDIzZGM4ODUtNDM2My00MTQ3LWJmYTktY2M3MDgwM2U0NDc5&param1=&param2=MTc2MjEyODQ5OTg&param3=&cataid=1591268435818\nRequest Method: GET\nStatus Code: 200 \nRemote Address: 221.231.81.238:443\nReferrer Policy: strict-origin-when-cross-origin\n```\n- 请求行\n- 请求类型 Request Method\n   1. GET: 请求指定的页面细腻，并返回尸体主题\n   2. HEAD: 类似于GET请求，只不过返回的相应中没有具体的内容，用于获取报头\n   3. POST：想指定资源提交数据进行处理请求，数据被高喊在请求体中\n   4. PUT: 从客户端想服务器传送的数据取代指定的文档的内容\n   5. DELETE: 请求服务器删除指定的页面\n   6. CONNECT: HTTP/1.1协议中预留给能够将连接方式改为管道方式的代理服务器\n   7. OPTIONS: 允许客户端查看服务器的性能\n   8. TRACE: 回显服务器收到的请求，主要用于测试后诊断\n- 请求头\n- 空行和请求数据\n\n##### 3.5 HTTP协议的返回格式\n状态行、小洗头、空行和响应正文\n```text\nHTTP/1.1 200\nServer: nginx/1.20.1\nDate: Sun, 05 Dec 2021 07:24:45 GMT\nContent-Type: application/json;charset=UTF-8\nTransfer-Encoding: chunked\nConnection: keep-alive\nAccess-Control-Allow-Origin: https://ke.gupaoedu.cn\nAccess-Control-Allow-Credentials: true\nAccess-Control-Allow-Methods: PUT,POST,GET,DELETE,OPTIONS,PATCH\nAccess-Control-Allow-Headers: DNT,web-token,app-token,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-Mx-ReqToken,X-Data-Type,X-Auth-Token,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,token,showerr\nAccess-Control-Max-Age: 86400\n```\n\n**Http格式响应状态码有哪些**\n\n- 1xx: informational(信息性状态码) 接受的请求正在处理\n- 2xx: success(成功状态码)  请求正常处理完毕\n- 3xx：redirection（重定向状态码）需要进行复检操作以完成请求\n- 4xx：client error（客户端错误状态码） 服务器无法处理请求\n- 5xx: server error（服务器错误错误状态码） 服务器处理请求出错\n\n##### 3.6 通用头字段Common Header\n|   字段   |   含义   | \n| ---- | ---- |\n|   Cache-control   |   控制缓存的行为   |      \n|   Connection   |   控制不再转发给代理的收不字段、管理持久连接   |      \n|   Date   |   创建报文的日期时间   |   \n|   Pragma   |   报文指令   |     \n|   Trailer   |   报文末端的首部一览   |     \n|   Transfer-Encoding   |   指定报文主题的传输编码方式   |     \n|   Upgrade   |   升级为其他协议   |     \n|   Via    |   代理服务器的相关信息   |     \n|   Warning   |   错误通知   |  \n\n##### 3.7 响应头字段Response Header\n|   字段   |   含义   | \n| ---- | ---- |\n|   Accept-Ranges   |   是否接收字节范围请求   |      \n|   Age   |   推算资源创建经过的时间   |      \n|   ETag   |   资源的匹配信息   |   \n|   Location   |   另客户端重定向至指定的URI   |      \n|   Proxy-Authenticate   |   代理服务器对客户端的认证信息   |     \n|   Retry-After   |   对再次发起请求的时机要求   |     \n|   Vary  |   代理服务器缓存的管理信息   |     \n|   WWW-Authenticate   |   服务器对客户端的认证信息   |  \n\n##### 3.8 实体头字段 Entity Header\n|   字段   |   含义   | \n| ---- | ---- |\n|   Allow  |   资源科支持的http方法   |      \n|   Connect-Encoding   |   实体主体适用的编码格式   |      \n|   Content-Language   |   实体主体的自然语言   |   \n|   Content-length   |   实体主体的大小   |      \n|   Content-Location   |   替代敌营资源的URI   |     \n|   Content-MD5   |   实体主体的报文摘要   |     \n|   Content-Range  |   实体主体的位置范围   |     \n|   Content-Type   |   实体主体的媒体类型   |\n|   Expires  |   实体主体过期的日期时间   |     \n|   Last-Modified   |   资源的最后修改日期时间   |  \n\n\n","source":"_posts/2021/12/nginx-md.md","raw":"---\ntitle: Nginx基础篇（一）扫盲\ncomments: true\ntags: nginx\ncategories: nginx\ntranslate_title: Nginx-Basics-I-literacy\nabbrlink: 58927\ndate: 2021-12-05 14:56:36\n---\n### 1.Nginx发展史\n作者：logo Sysoev\n- 2000年地洞，c语言编写\n- 2004年开源\n- 2011年成立商业公司\n- 2013 发布商业版本Nginx plus\n- 2019.5月F5 Networks收购nginx\n- 2019.12被Rambler集团起诉\n\n\n### 2.Nginx与其他web服务器对比\n\n1. Nginx与Apache HTTP server project区别\n   用来响应用户请求的web服务器\n2. Nginx 和tomcat区别\n   Nginx是HTTP Server，主要是用于访问一些静态资源，可以用做代理服务器\n   Tomcat是Application Server应用服务器，用来存放和运行程序；\n3. HTTP Server 和Application Server区别与联系\n\n### 3. HTTP知识\n#### 3.1 IP和端口\n120.77.38.160:80\n\n0为A类，10为B类，110为C类，1110为D类，1111为E类。D类地址供组播使用，E类地址保留。\n\n![img](./nginx-md/1.png)\n\n![img](./nginx-md/2.png)\n\n端口是：0～65535\n#### 3.2 域名\n协议、子域名、顶级域名、域名类型、资源路径、参数\n```text\n#https 协议默认端口443 可以省略\nhttps://www.baidu.com:443\n\n#user：子域名， com为域名类型（cn中国， us美国...）； 3623252831 为资源路径\nhttps://user.qzone.qq.com/3623252831\n\n#？号后面为参数\nhttps://baike.baidu.com/item/测试/232323?fr=asdfasdf\n```\n**域名(domainName)和IP的关系以及域名的组成**\n\n域名：https://www.baidu.com:443/member/query?far=adsfad\n   - http/ https: 协议\n   - baidu: 顶级域名\n   - Com： 域名类型\n   - www: 子域名，可以有多级：user.qzone.qq.com/232323\n   - far=asdfa: 参数\n   - member/query: 资源路径\nDNS(domain name server)将域名转化为ip+port\n     \n\n##### 3.3 HTTP协议的特点\n- 简单快速\n- 灵活\n- 无连接（一次请求，连接关闭）\n- 无状态（每次请求都和之前的请求无关）\n\n\n##### 3.4 HTTP协议的请求格式\n```text\nRequest URL: https://prtas.videocc.net/v2/view?pid=1638687363047X1327470&vid=8c8d9388d0b4c16f41ef557fba23dede_8&uid=8c8d9388d0&flow=0&ts=1638688553584&href=aHR0cHM6Ly9rZS5ndXBhb2VkdS5jbi9wbGF5LzI4OD9waGFzZUlkPTU&duration=1278&cts=789&sign=fcf19468eff088e983796d5826268f2d&sd=1190&pd=788&pn=HTML5&pv=v1.15.0&sid=ZDIzZGM4ODUtNDM2My00MTQ3LWJmYTktY2M3MDgwM2U0NDc5&param1=&param2=MTc2MjEyODQ5OTg&param3=&cataid=1591268435818\nRequest Method: GET\nStatus Code: 200 \nRemote Address: 221.231.81.238:443\nReferrer Policy: strict-origin-when-cross-origin\n```\n- 请求行\n- 请求类型 Request Method\n   1. GET: 请求指定的页面细腻，并返回尸体主题\n   2. HEAD: 类似于GET请求，只不过返回的相应中没有具体的内容，用于获取报头\n   3. POST：想指定资源提交数据进行处理请求，数据被高喊在请求体中\n   4. PUT: 从客户端想服务器传送的数据取代指定的文档的内容\n   5. DELETE: 请求服务器删除指定的页面\n   6. CONNECT: HTTP/1.1协议中预留给能够将连接方式改为管道方式的代理服务器\n   7. OPTIONS: 允许客户端查看服务器的性能\n   8. TRACE: 回显服务器收到的请求，主要用于测试后诊断\n- 请求头\n- 空行和请求数据\n\n##### 3.5 HTTP协议的返回格式\n状态行、小洗头、空行和响应正文\n```text\nHTTP/1.1 200\nServer: nginx/1.20.1\nDate: Sun, 05 Dec 2021 07:24:45 GMT\nContent-Type: application/json;charset=UTF-8\nTransfer-Encoding: chunked\nConnection: keep-alive\nAccess-Control-Allow-Origin: https://ke.gupaoedu.cn\nAccess-Control-Allow-Credentials: true\nAccess-Control-Allow-Methods: PUT,POST,GET,DELETE,OPTIONS,PATCH\nAccess-Control-Allow-Headers: DNT,web-token,app-token,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-Mx-ReqToken,X-Data-Type,X-Auth-Token,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,token,showerr\nAccess-Control-Max-Age: 86400\n```\n\n**Http格式响应状态码有哪些**\n\n- 1xx: informational(信息性状态码) 接受的请求正在处理\n- 2xx: success(成功状态码)  请求正常处理完毕\n- 3xx：redirection（重定向状态码）需要进行复检操作以完成请求\n- 4xx：client error（客户端错误状态码） 服务器无法处理请求\n- 5xx: server error（服务器错误错误状态码） 服务器处理请求出错\n\n##### 3.6 通用头字段Common Header\n|   字段   |   含义   | \n| ---- | ---- |\n|   Cache-control   |   控制缓存的行为   |      \n|   Connection   |   控制不再转发给代理的收不字段、管理持久连接   |      \n|   Date   |   创建报文的日期时间   |   \n|   Pragma   |   报文指令   |     \n|   Trailer   |   报文末端的首部一览   |     \n|   Transfer-Encoding   |   指定报文主题的传输编码方式   |     \n|   Upgrade   |   升级为其他协议   |     \n|   Via    |   代理服务器的相关信息   |     \n|   Warning   |   错误通知   |  \n\n##### 3.7 响应头字段Response Header\n|   字段   |   含义   | \n| ---- | ---- |\n|   Accept-Ranges   |   是否接收字节范围请求   |      \n|   Age   |   推算资源创建经过的时间   |      \n|   ETag   |   资源的匹配信息   |   \n|   Location   |   另客户端重定向至指定的URI   |      \n|   Proxy-Authenticate   |   代理服务器对客户端的认证信息   |     \n|   Retry-After   |   对再次发起请求的时机要求   |     \n|   Vary  |   代理服务器缓存的管理信息   |     \n|   WWW-Authenticate   |   服务器对客户端的认证信息   |  \n\n##### 3.8 实体头字段 Entity Header\n|   字段   |   含义   | \n| ---- | ---- |\n|   Allow  |   资源科支持的http方法   |      \n|   Connect-Encoding   |   实体主体适用的编码格式   |      \n|   Content-Language   |   实体主体的自然语言   |   \n|   Content-length   |   实体主体的大小   |      \n|   Content-Location   |   替代敌营资源的URI   |     \n|   Content-MD5   |   实体主体的报文摘要   |     \n|   Content-Range  |   实体主体的位置范围   |     \n|   Content-Type   |   实体主体的媒体类型   |\n|   Expires  |   实体主体过期的日期时间   |     \n|   Last-Modified   |   资源的最后修改日期时间   |  \n\n\n","slug":"nginx-md","published":1,"updated":"2022-03-27T14:06:03.377Z","layout":"post","photos":[],"link":"","_id":"cl235zcws0046wjpj5ph70fr9","content":"<h3 id=\"1nginx发展史\"><a class=\"markdownIt-Anchor\" href=\"#1nginx发展史\"></a> 1.Nginx发展史</h3>\n<p>作者：logo Sysoev</p>\n<ul>\n<li>2000年地洞，c语言编写</li>\n<li>2004年开源</li>\n<li>2011年成立商业公司</li>\n<li>2013 发布商业版本Nginx plus</li>\n<li>2019.5月F5 Networks收购nginx</li>\n<li>2019.12被Rambler集团起诉</li>\n</ul>\n<h3 id=\"2nginx与其他web服务器对比\"><a class=\"markdownIt-Anchor\" href=\"#2nginx与其他web服务器对比\"></a> 2.Nginx与其他web服务器对比</h3>\n<ol>\n<li>Nginx与Apache HTTP server project区别<br>\n用来响应用户请求的web服务器</li>\n<li>Nginx 和tomcat区别<br>\nNginx是HTTP Server，主要是用于访问一些静态资源，可以用做代理服务器<br>\nTomcat是Application Server应用服务器，用来存放和运行程序；</li>\n<li>HTTP Server 和Application Server区别与联系</li>\n</ol>\n<h3 id=\"3-http知识\"><a class=\"markdownIt-Anchor\" href=\"#3-http知识\"></a> 3. HTTP知识</h3>\n<h4 id=\"31-ip和端口\"><a class=\"markdownIt-Anchor\" href=\"#31-ip和端口\"></a> 3.1 IP和端口</h4>\n<p>120.77.38.160:80</p>\n<p>0为A类，10为B类，110为C类，1110为D类，1111为E类。D类地址供组播使用，E类地址保留。</p>\n<p><img src=\"/nginx-md/1.png\" alt=\"img\"></p>\n<p><img src=\"/nginx-md/2.png\" alt=\"img\"></p>\n<p>端口是：0～65535</p>\n<h4 id=\"32-域名\"><a class=\"markdownIt-Anchor\" href=\"#32-域名\"></a> 3.2 域名</h4>\n<p>协议、子域名、顶级域名、域名类型、资源路径、参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#https 协议默认端口443 可以省略</span><br><span class=\"line\">https://www.baidu.com:443</span><br><span class=\"line\"></span><br><span class=\"line\">#user：子域名， com为域名类型（cn中国， us美国...）； 3623252831 为资源路径</span><br><span class=\"line\">https://user.qzone.qq.com/3623252831</span><br><span class=\"line\"></span><br><span class=\"line\">#？号后面为参数</span><br><span class=\"line\">https://baike.baidu.com/item/测试/232323?fr=asdfasdf</span><br></pre></td></tr></table></figure>\n<p><strong>域名(domainName)和IP的关系以及域名的组成</strong></p>\n<p>域名：<a href=\"https://www.baidu.com:443/member/query?far=adsfad\">https://www.baidu.com:443/member/query?far=adsfad</a></p>\n<ul>\n<li>http/ https: 协议</li>\n<li>baidu: 顶级域名</li>\n<li>Com： 域名类型</li>\n<li>www: 子域名，可以有多级：<a href=\"http://user.qzone.qq.com/232323\">user.qzone.qq.com/232323</a></li>\n<li>far=asdfa: 参数</li>\n<li>member/query: 资源路径<br>\nDNS(domain name server)将域名转化为ip+port</li>\n</ul>\n<h5 id=\"33-http协议的特点\"><a class=\"markdownIt-Anchor\" href=\"#33-http协议的特点\"></a> 3.3 HTTP协议的特点</h5>\n<ul>\n<li>简单快速</li>\n<li>灵活</li>\n<li>无连接（一次请求，连接关闭）</li>\n<li>无状态（每次请求都和之前的请求无关）</li>\n</ul>\n<h5 id=\"34-http协议的请求格式\"><a class=\"markdownIt-Anchor\" href=\"#34-http协议的请求格式\"></a> 3.4 HTTP协议的请求格式</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request URL: https://prtas.videocc.net/v2/view?pid=1638687363047X1327470&amp;vid=8c8d9388d0b4c16f41ef557fba23dede_8&amp;uid=8c8d9388d0&amp;flow=0&amp;ts=1638688553584&amp;href=aHR0cHM6Ly9rZS5ndXBhb2VkdS5jbi9wbGF5LzI4OD9waGFzZUlkPTU&amp;duration=1278&amp;cts=789&amp;sign=fcf19468eff088e983796d5826268f2d&amp;sd=1190&amp;pd=788&amp;pn=HTML5&amp;pv=v1.15.0&amp;sid=ZDIzZGM4ODUtNDM2My00MTQ3LWJmYTktY2M3MDgwM2U0NDc5&amp;param1=&amp;param2=MTc2MjEyODQ5OTg&amp;param3=&amp;cataid=1591268435818</span><br><span class=\"line\">Request Method: GET</span><br><span class=\"line\">Status Code: 200 </span><br><span class=\"line\">Remote Address: 221.231.81.238:443</span><br><span class=\"line\">Referrer Policy: strict-origin-when-cross-origin</span><br></pre></td></tr></table></figure>\n<ul>\n<li>请求行</li>\n<li>请求类型 Request Method\n<ol>\n<li>GET: 请求指定的页面细腻，并返回尸体主题</li>\n<li>HEAD: 类似于GET请求，只不过返回的相应中没有具体的内容，用于获取报头</li>\n<li>POST：想指定资源提交数据进行处理请求，数据被高喊在请求体中</li>\n<li>PUT: 从客户端想服务器传送的数据取代指定的文档的内容</li>\n<li>DELETE: 请求服务器删除指定的页面</li>\n<li>CONNECT: HTTP/1.1协议中预留给能够将连接方式改为管道方式的代理服务器</li>\n<li>OPTIONS: 允许客户端查看服务器的性能</li>\n<li>TRACE: 回显服务器收到的请求，主要用于测试后诊断</li>\n</ol>\n</li>\n<li>请求头</li>\n<li>空行和请求数据</li>\n</ul>\n<h5 id=\"35-http协议的返回格式\"><a class=\"markdownIt-Anchor\" href=\"#35-http协议的返回格式\"></a> 3.5 HTTP协议的返回格式</h5>\n<p>状态行、小洗头、空行和响应正文</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200</span><br><span class=\"line\">Server: nginx/1.20.1</span><br><span class=\"line\">Date: Sun, 05 Dec 2021 07:24:45 GMT</span><br><span class=\"line\">Content-Type: application/json;charset=UTF-8</span><br><span class=\"line\">Transfer-Encoding: chunked</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Access-Control-Allow-Origin: https://ke.gupaoedu.cn</span><br><span class=\"line\">Access-Control-Allow-Credentials: true</span><br><span class=\"line\">Access-Control-Allow-Methods: PUT,POST,GET,DELETE,OPTIONS,PATCH</span><br><span class=\"line\">Access-Control-Allow-Headers: DNT,web-token,app-token,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-Mx-ReqToken,X-Data-Type,X-Auth-Token,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,token,showerr</span><br><span class=\"line\">Access-Control-Max-Age: 86400</span><br></pre></td></tr></table></figure>\n<p><strong>Http格式响应状态码有哪些</strong></p>\n<ul>\n<li>1xx: informational(信息性状态码) 接受的请求正在处理</li>\n<li>2xx: success(成功状态码)  请求正常处理完毕</li>\n<li>3xx：redirection（重定向状态码）需要进行复检操作以完成请求</li>\n<li>4xx：client error（客户端错误状态码） 服务器无法处理请求</li>\n<li>5xx: server error（服务器错误错误状态码） 服务器处理请求出错</li>\n</ul>\n<h5 id=\"36-通用头字段common-header\"><a class=\"markdownIt-Anchor\" href=\"#36-通用头字段common-header\"></a> 3.6 通用头字段Common Header</h5>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Cache-control</td>\n<td>控制缓存的行为</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>控制不再转发给代理的收不字段、管理持久连接</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>创建报文的日期时间</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>报文指令</td>\n</tr>\n<tr>\n<td>Trailer</td>\n<td>报文末端的首部一览</td>\n</tr>\n<tr>\n<td>Transfer-Encoding</td>\n<td>指定报文主题的传输编码方式</td>\n</tr>\n<tr>\n<td>Upgrade</td>\n<td>升级为其他协议</td>\n</tr>\n<tr>\n<td>Via</td>\n<td>代理服务器的相关信息</td>\n</tr>\n<tr>\n<td>Warning</td>\n<td>错误通知</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"37-响应头字段response-header\"><a class=\"markdownIt-Anchor\" href=\"#37-响应头字段response-header\"></a> 3.7 响应头字段Response Header</h5>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Accept-Ranges</td>\n<td>是否接收字节范围请求</td>\n</tr>\n<tr>\n<td>Age</td>\n<td>推算资源创建经过的时间</td>\n</tr>\n<tr>\n<td>ETag</td>\n<td>资源的匹配信息</td>\n</tr>\n<tr>\n<td>Location</td>\n<td>另客户端重定向至指定的URI</td>\n</tr>\n<tr>\n<td>Proxy-Authenticate</td>\n<td>代理服务器对客户端的认证信息</td>\n</tr>\n<tr>\n<td>Retry-After</td>\n<td>对再次发起请求的时机要求</td>\n</tr>\n<tr>\n<td>Vary</td>\n<td>代理服务器缓存的管理信息</td>\n</tr>\n<tr>\n<td>WWW-Authenticate</td>\n<td>服务器对客户端的认证信息</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"38-实体头字段-entity-header\"><a class=\"markdownIt-Anchor\" href=\"#38-实体头字段-entity-header\"></a> 3.8 实体头字段 Entity Header</h5>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Allow</td>\n<td>资源科支持的http方法</td>\n</tr>\n<tr>\n<td>Connect-Encoding</td>\n<td>实体主体适用的编码格式</td>\n</tr>\n<tr>\n<td>Content-Language</td>\n<td>实体主体的自然语言</td>\n</tr>\n<tr>\n<td>Content-length</td>\n<td>实体主体的大小</td>\n</tr>\n<tr>\n<td>Content-Location</td>\n<td>替代敌营资源的URI</td>\n</tr>\n<tr>\n<td>Content-MD5</td>\n<td>实体主体的报文摘要</td>\n</tr>\n<tr>\n<td>Content-Range</td>\n<td>实体主体的位置范围</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>实体主体的媒体类型</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>实体主体过期的日期时间</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>资源的最后修改日期时间</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"1nginx发展史\"><a class=\"markdownIt-Anchor\" href=\"#1nginx发展史\"></a> 1.Nginx发展史</h3>\n<p>作者：logo Sysoev</p>\n<ul>\n<li>2000年地洞，c语言编写</li>\n<li>2004年开源</li>\n<li>2011年成立商业公司</li>\n<li>2013 发布商业版本Nginx plus</li>\n<li>2019.5月F5 Networks收购nginx</li>\n<li>2019.12被Rambler集团起诉</li>\n</ul>\n<h3 id=\"2nginx与其他web服务器对比\"><a class=\"markdownIt-Anchor\" href=\"#2nginx与其他web服务器对比\"></a> 2.Nginx与其他web服务器对比</h3>\n<ol>\n<li>Nginx与Apache HTTP server project区别<br>\n用来响应用户请求的web服务器</li>\n<li>Nginx 和tomcat区别<br>\nNginx是HTTP Server，主要是用于访问一些静态资源，可以用做代理服务器<br>\nTomcat是Application Server应用服务器，用来存放和运行程序；</li>\n<li>HTTP Server 和Application Server区别与联系</li>\n</ol>\n<h3 id=\"3-http知识\"><a class=\"markdownIt-Anchor\" href=\"#3-http知识\"></a> 3. HTTP知识</h3>\n<h4 id=\"31-ip和端口\"><a class=\"markdownIt-Anchor\" href=\"#31-ip和端口\"></a> 3.1 IP和端口</h4>\n<p>120.77.38.160:80</p>\n<p>0为A类，10为B类，110为C类，1110为D类，1111为E类。D类地址供组播使用，E类地址保留。</p>\n<p><img src=\"/nginx-md/1.png\" alt=\"img\"></p>\n<p><img src=\"/nginx-md/2.png\" alt=\"img\"></p>\n<p>端口是：0～65535</p>\n<h4 id=\"32-域名\"><a class=\"markdownIt-Anchor\" href=\"#32-域名\"></a> 3.2 域名</h4>\n<p>协议、子域名、顶级域名、域名类型、资源路径、参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#https 协议默认端口443 可以省略</span><br><span class=\"line\">https://www.baidu.com:443</span><br><span class=\"line\"></span><br><span class=\"line\">#user：子域名， com为域名类型（cn中国， us美国...）； 3623252831 为资源路径</span><br><span class=\"line\">https://user.qzone.qq.com/3623252831</span><br><span class=\"line\"></span><br><span class=\"line\">#？号后面为参数</span><br><span class=\"line\">https://baike.baidu.com/item/测试/232323?fr=asdfasdf</span><br></pre></td></tr></table></figure>\n<p><strong>域名(domainName)和IP的关系以及域名的组成</strong></p>\n<p>域名：<a href=\"https://www.baidu.com:443/member/query?far=adsfad\">https://www.baidu.com:443/member/query?far=adsfad</a></p>\n<ul>\n<li>http/ https: 协议</li>\n<li>baidu: 顶级域名</li>\n<li>Com： 域名类型</li>\n<li>www: 子域名，可以有多级：<a href=\"http://user.qzone.qq.com/232323\">user.qzone.qq.com/232323</a></li>\n<li>far=asdfa: 参数</li>\n<li>member/query: 资源路径<br>\nDNS(domain name server)将域名转化为ip+port</li>\n</ul>\n<h5 id=\"33-http协议的特点\"><a class=\"markdownIt-Anchor\" href=\"#33-http协议的特点\"></a> 3.3 HTTP协议的特点</h5>\n<ul>\n<li>简单快速</li>\n<li>灵活</li>\n<li>无连接（一次请求，连接关闭）</li>\n<li>无状态（每次请求都和之前的请求无关）</li>\n</ul>\n<h5 id=\"34-http协议的请求格式\"><a class=\"markdownIt-Anchor\" href=\"#34-http协议的请求格式\"></a> 3.4 HTTP协议的请求格式</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request URL: https://prtas.videocc.net/v2/view?pid=1638687363047X1327470&amp;vid=8c8d9388d0b4c16f41ef557fba23dede_8&amp;uid=8c8d9388d0&amp;flow=0&amp;ts=1638688553584&amp;href=aHR0cHM6Ly9rZS5ndXBhb2VkdS5jbi9wbGF5LzI4OD9waGFzZUlkPTU&amp;duration=1278&amp;cts=789&amp;sign=fcf19468eff088e983796d5826268f2d&amp;sd=1190&amp;pd=788&amp;pn=HTML5&amp;pv=v1.15.0&amp;sid=ZDIzZGM4ODUtNDM2My00MTQ3LWJmYTktY2M3MDgwM2U0NDc5&amp;param1=&amp;param2=MTc2MjEyODQ5OTg&amp;param3=&amp;cataid=1591268435818</span><br><span class=\"line\">Request Method: GET</span><br><span class=\"line\">Status Code: 200 </span><br><span class=\"line\">Remote Address: 221.231.81.238:443</span><br><span class=\"line\">Referrer Policy: strict-origin-when-cross-origin</span><br></pre></td></tr></table></figure>\n<ul>\n<li>请求行</li>\n<li>请求类型 Request Method\n<ol>\n<li>GET: 请求指定的页面细腻，并返回尸体主题</li>\n<li>HEAD: 类似于GET请求，只不过返回的相应中没有具体的内容，用于获取报头</li>\n<li>POST：想指定资源提交数据进行处理请求，数据被高喊在请求体中</li>\n<li>PUT: 从客户端想服务器传送的数据取代指定的文档的内容</li>\n<li>DELETE: 请求服务器删除指定的页面</li>\n<li>CONNECT: HTTP/1.1协议中预留给能够将连接方式改为管道方式的代理服务器</li>\n<li>OPTIONS: 允许客户端查看服务器的性能</li>\n<li>TRACE: 回显服务器收到的请求，主要用于测试后诊断</li>\n</ol>\n</li>\n<li>请求头</li>\n<li>空行和请求数据</li>\n</ul>\n<h5 id=\"35-http协议的返回格式\"><a class=\"markdownIt-Anchor\" href=\"#35-http协议的返回格式\"></a> 3.5 HTTP协议的返回格式</h5>\n<p>状态行、小洗头、空行和响应正文</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200</span><br><span class=\"line\">Server: nginx/1.20.1</span><br><span class=\"line\">Date: Sun, 05 Dec 2021 07:24:45 GMT</span><br><span class=\"line\">Content-Type: application/json;charset=UTF-8</span><br><span class=\"line\">Transfer-Encoding: chunked</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Access-Control-Allow-Origin: https://ke.gupaoedu.cn</span><br><span class=\"line\">Access-Control-Allow-Credentials: true</span><br><span class=\"line\">Access-Control-Allow-Methods: PUT,POST,GET,DELETE,OPTIONS,PATCH</span><br><span class=\"line\">Access-Control-Allow-Headers: DNT,web-token,app-token,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-Mx-ReqToken,X-Data-Type,X-Auth-Token,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,token,showerr</span><br><span class=\"line\">Access-Control-Max-Age: 86400</span><br></pre></td></tr></table></figure>\n<p><strong>Http格式响应状态码有哪些</strong></p>\n<ul>\n<li>1xx: informational(信息性状态码) 接受的请求正在处理</li>\n<li>2xx: success(成功状态码)  请求正常处理完毕</li>\n<li>3xx：redirection（重定向状态码）需要进行复检操作以完成请求</li>\n<li>4xx：client error（客户端错误状态码） 服务器无法处理请求</li>\n<li>5xx: server error（服务器错误错误状态码） 服务器处理请求出错</li>\n</ul>\n<h5 id=\"36-通用头字段common-header\"><a class=\"markdownIt-Anchor\" href=\"#36-通用头字段common-header\"></a> 3.6 通用头字段Common Header</h5>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Cache-control</td>\n<td>控制缓存的行为</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>控制不再转发给代理的收不字段、管理持久连接</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>创建报文的日期时间</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>报文指令</td>\n</tr>\n<tr>\n<td>Trailer</td>\n<td>报文末端的首部一览</td>\n</tr>\n<tr>\n<td>Transfer-Encoding</td>\n<td>指定报文主题的传输编码方式</td>\n</tr>\n<tr>\n<td>Upgrade</td>\n<td>升级为其他协议</td>\n</tr>\n<tr>\n<td>Via</td>\n<td>代理服务器的相关信息</td>\n</tr>\n<tr>\n<td>Warning</td>\n<td>错误通知</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"37-响应头字段response-header\"><a class=\"markdownIt-Anchor\" href=\"#37-响应头字段response-header\"></a> 3.7 响应头字段Response Header</h5>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Accept-Ranges</td>\n<td>是否接收字节范围请求</td>\n</tr>\n<tr>\n<td>Age</td>\n<td>推算资源创建经过的时间</td>\n</tr>\n<tr>\n<td>ETag</td>\n<td>资源的匹配信息</td>\n</tr>\n<tr>\n<td>Location</td>\n<td>另客户端重定向至指定的URI</td>\n</tr>\n<tr>\n<td>Proxy-Authenticate</td>\n<td>代理服务器对客户端的认证信息</td>\n</tr>\n<tr>\n<td>Retry-After</td>\n<td>对再次发起请求的时机要求</td>\n</tr>\n<tr>\n<td>Vary</td>\n<td>代理服务器缓存的管理信息</td>\n</tr>\n<tr>\n<td>WWW-Authenticate</td>\n<td>服务器对客户端的认证信息</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"38-实体头字段-entity-header\"><a class=\"markdownIt-Anchor\" href=\"#38-实体头字段-entity-header\"></a> 3.8 实体头字段 Entity Header</h5>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Allow</td>\n<td>资源科支持的http方法</td>\n</tr>\n<tr>\n<td>Connect-Encoding</td>\n<td>实体主体适用的编码格式</td>\n</tr>\n<tr>\n<td>Content-Language</td>\n<td>实体主体的自然语言</td>\n</tr>\n<tr>\n<td>Content-length</td>\n<td>实体主体的大小</td>\n</tr>\n<tr>\n<td>Content-Location</td>\n<td>替代敌营资源的URI</td>\n</tr>\n<tr>\n<td>Content-MD5</td>\n<td>实体主体的报文摘要</td>\n</tr>\n<tr>\n<td>Content-Range</td>\n<td>实体主体的位置范围</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>实体主体的媒体类型</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>实体主体过期的日期时间</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>资源的最后修改日期时间</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"二分法查找题","comments":1,"abbrlink":47921,"date":"2021-11-26T13:57:32.000Z","translate_title":"binary-search","_content":"### 1. 第一个错误的版本\n\n### 1.1 题目描述\n你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。\n假设你有 n 个版本 [1, 2, ..., n]，你想找出导致之后所有版本出错的第一个错误的版本。\n你可以通过调用bool isBadVersion(version)接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。\n示例\n```text\n输入：n = 5, bad = 4\n输出：4\n解释：\n    调用 isBadVersion(3) -> false \n    调用 isBadVersion(5) -> true \n    调用 isBadVersion(4) -> true\n所以，4 是第一个错误的版本\n```\n\n### 1.2 解题思路\n当一个版本为正确版本，则该版本之前的所有版本均为正确版本；当一个版本为错误版本，则该版本之后的所有版本均为错误版本。我们可以利用这个性质进行二分查找。\n\n具体地，将左右边界分别初始化为 1和 n ，其中 n 是给定的版本数量。设定左右边界之后，每次我们都依据左右边界找到其中间的版本，检查其是否为正确版本。如果该版本为正确版本，那么第一个错误的版本必然位于该版本的右侧，我们缩紧左边界；否则第一个错误的版本必然位于该版本及该版本的左侧，我们缩紧右边界。\n这样我们每判断一次都可以缩紧一次边界，而每次缩紧时两边界距离将变为原来的一半，因此我们至多只需要缩紧 O(logn) 次。\n\n\n### 1.3 代码\n```java\npublic int firstBadVersion(int n) {\n    int left = 1, right = n;\n    while (left < right){\n        int mid = left + (right - left) / 2;    // 防止计算时溢出\n        if (isBadVersion(mid)){\n            // 答案在区间 [left, mid] 中\n           right = mid; //如果中间版本是错误的版本，那么它之后的都是错误的;\n        }else {\n            // 答案在区间 [mid+1, right] 中\n            left = mid + 1;\n        }\n    }\n    //此时有 left == right,退出了while循环\n    return left;\n}\n```\n","source":"_posts/2021/11/algorithm-dinary-search.md","raw":"---\ntitle: 二分法查找题\ncomments: true\nabbrlink: 47921\ndate: 2021-11-26 21:57:32\ntags: algorithm\ncategories: 算法\ntranslate_title: binary-search\n---\n### 1. 第一个错误的版本\n\n### 1.1 题目描述\n你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。\n假设你有 n 个版本 [1, 2, ..., n]，你想找出导致之后所有版本出错的第一个错误的版本。\n你可以通过调用bool isBadVersion(version)接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。\n示例\n```text\n输入：n = 5, bad = 4\n输出：4\n解释：\n    调用 isBadVersion(3) -> false \n    调用 isBadVersion(5) -> true \n    调用 isBadVersion(4) -> true\n所以，4 是第一个错误的版本\n```\n\n### 1.2 解题思路\n当一个版本为正确版本，则该版本之前的所有版本均为正确版本；当一个版本为错误版本，则该版本之后的所有版本均为错误版本。我们可以利用这个性质进行二分查找。\n\n具体地，将左右边界分别初始化为 1和 n ，其中 n 是给定的版本数量。设定左右边界之后，每次我们都依据左右边界找到其中间的版本，检查其是否为正确版本。如果该版本为正确版本，那么第一个错误的版本必然位于该版本的右侧，我们缩紧左边界；否则第一个错误的版本必然位于该版本及该版本的左侧，我们缩紧右边界。\n这样我们每判断一次都可以缩紧一次边界，而每次缩紧时两边界距离将变为原来的一半，因此我们至多只需要缩紧 O(logn) 次。\n\n\n### 1.3 代码\n```java\npublic int firstBadVersion(int n) {\n    int left = 1, right = n;\n    while (left < right){\n        int mid = left + (right - left) / 2;    // 防止计算时溢出\n        if (isBadVersion(mid)){\n            // 答案在区间 [left, mid] 中\n           right = mid; //如果中间版本是错误的版本，那么它之后的都是错误的;\n        }else {\n            // 答案在区间 [mid+1, right] 中\n            left = mid + 1;\n        }\n    }\n    //此时有 left == right,退出了while循环\n    return left;\n}\n```\n","slug":"algorithm-dinary-search","published":1,"updated":"2022-03-27T14:06:03.335Z","layout":"post","photos":[],"link":"","_id":"cl235zcws004awjpj8ayg4sps","content":"<h3 id=\"1-第一个错误的版本\"><a class=\"markdownIt-Anchor\" href=\"#1-第一个错误的版本\"></a> 1. 第一个错误的版本</h3>\n<h3 id=\"11-题目描述\"><a class=\"markdownIt-Anchor\" href=\"#11-题目描述\"></a> 1.1 题目描述</h3>\n<p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。<br>\n假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。<br>\n你可以通过调用bool isBadVersion(version)接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。<br>\n示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：n = 5, bad = 4</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：</span><br><span class=\"line\">    调用 isBadVersion(3) -&gt; false </span><br><span class=\"line\">    调用 isBadVersion(5) -&gt; true </span><br><span class=\"line\">    调用 isBadVersion(4) -&gt; true</span><br><span class=\"line\">所以，4 是第一个错误的版本</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-解题思路\"><a class=\"markdownIt-Anchor\" href=\"#12-解题思路\"></a> 1.2 解题思路</h3>\n<p>当一个版本为正确版本，则该版本之前的所有版本均为正确版本；当一个版本为错误版本，则该版本之后的所有版本均为错误版本。我们可以利用这个性质进行二分查找。</p>\n<p>具体地，将左右边界分别初始化为 1和 n ，其中 n 是给定的版本数量。设定左右边界之后，每次我们都依据左右边界找到其中间的版本，检查其是否为正确版本。如果该版本为正确版本，那么第一个错误的版本必然位于该版本的右侧，我们缩紧左边界；否则第一个错误的版本必然位于该版本及该版本的左侧，我们缩紧右边界。<br>\n这样我们每判断一次都可以缩紧一次边界，而每次缩紧时两边界距离将变为原来的一半，因此我们至多只需要缩紧 O(logn) 次。</p>\n<h3 id=\"13-代码\"><a class=\"markdownIt-Anchor\" href=\"#13-代码\"></a> 1.3 代码</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">firstBadVersion</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">1</span>, right = n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;    <span class=\"comment\">// 防止计算时溢出</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isBadVersion(mid))&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 答案在区间 [left, mid] 中</span></span><br><span class=\"line\">           right = mid; <span class=\"comment\">//如果中间版本是错误的版本，那么它之后的都是错误的;</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 答案在区间 [mid+1, right] 中</span></span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//此时有 left == right,退出了while循环</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"1-第一个错误的版本\"><a class=\"markdownIt-Anchor\" href=\"#1-第一个错误的版本\"></a> 1. 第一个错误的版本</h3>\n<h3 id=\"11-题目描述\"><a class=\"markdownIt-Anchor\" href=\"#11-题目描述\"></a> 1.1 题目描述</h3>\n<p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。<br>\n假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。<br>\n你可以通过调用bool isBadVersion(version)接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。<br>\n示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：n = 5, bad = 4</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：</span><br><span class=\"line\">    调用 isBadVersion(3) -&gt; false </span><br><span class=\"line\">    调用 isBadVersion(5) -&gt; true </span><br><span class=\"line\">    调用 isBadVersion(4) -&gt; true</span><br><span class=\"line\">所以，4 是第一个错误的版本</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-解题思路\"><a class=\"markdownIt-Anchor\" href=\"#12-解题思路\"></a> 1.2 解题思路</h3>\n<p>当一个版本为正确版本，则该版本之前的所有版本均为正确版本；当一个版本为错误版本，则该版本之后的所有版本均为错误版本。我们可以利用这个性质进行二分查找。</p>\n<p>具体地，将左右边界分别初始化为 1和 n ，其中 n 是给定的版本数量。设定左右边界之后，每次我们都依据左右边界找到其中间的版本，检查其是否为正确版本。如果该版本为正确版本，那么第一个错误的版本必然位于该版本的右侧，我们缩紧左边界；否则第一个错误的版本必然位于该版本及该版本的左侧，我们缩紧右边界。<br>\n这样我们每判断一次都可以缩紧一次边界，而每次缩紧时两边界距离将变为原来的一半，因此我们至多只需要缩紧 O(logn) 次。</p>\n<h3 id=\"13-代码\"><a class=\"markdownIt-Anchor\" href=\"#13-代码\"></a> 1.3 代码</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">firstBadVersion</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">1</span>, right = n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;    <span class=\"comment\">// 防止计算时溢出</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isBadVersion(mid))&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 答案在区间 [left, mid] 中</span></span><br><span class=\"line\">           right = mid; <span class=\"comment\">//如果中间版本是错误的版本，那么它之后的都是错误的;</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 答案在区间 [mid+1, right] 中</span></span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//此时有 left == right,退出了while循环</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Mysql添加/修改/删除字段","comments":1,"abbrlink":11250,"date":"2021-11-15T13:13:42.000Z","translate_title":"mysql-operate-column","_content":"### 1. 添加字段\n#### 1.1 在末尾添加字段\n1）语法：\n```sql\nALTER TABLE <表名> ADD <字段名> <数据类型> [约束条件];\n```\n语法格式的说明：\n- <表名> 为数据表的名字；\n- <字段名> 为所要添加的字段的名字；\n- <数据类型> 为所要添加的字段能存储数据的数据类型；\n- [约束条件] 是可选的，用来对添加的字段进行约束。\n- 这种语法格式默认在表的最后位置（最后一列的后面）添加新字段\n\n2）示例：在user表末尾添加字段phone\n```sql\nALTER TABLE user ADD phone VARCHAR(11) DEFAULT NULL COMMENT '电话号码';\n```\n#### 1.2 在开头添加字段\n1）语法：\n```sql\nALTER TABLE <表名> ADD <字段名> <数据类型> [约束条件] FIRST;\n```\nFIRST 关键字一般放在语句的末尾\n2）示例：在user表开头添加字段user_id\n```sql\nALTER TABLE user ADD user_id VARCHAR(32) NOT NULL COMMENT '用户主键' FIRST;\n```\n#### 1.3 在中间添加字段\n1）语法：\n```sql\nALTER TABLE <表名> ADD <字段名> <数据类型> [约束条件] AFTER <已经存在的字段名>;\n```\nAFTER 的作用是将新字段添加到某个已有字段后面。\n注意：只能在某个已有字段的后面添加新字段，不能在它的前面添加新字段\n\n2）示例：在user表的user_id字段后添加username字段\n```sql\nALTER TABLE user ADD username VARCHAR(30) DEFAULT NULL COMMENT '用户名' AFTER `user_id`;\n```\n### 2. 修改字段\n#### 2.1 修改字段属性\n1）语法：\n```sql\nALTER TABLE <表名> MODIFY <字段名> <数据类型> [约束条件];\n```\n2）示例1：修改字段属性\n```sql\n-- 将email字段VARCHAR(50)修改成VARCHAR(200)\nALTER TABLE user MODIFY email VARCHAR(200) NOT NULL DEFAULT 'email@163.com';\n```\n注意：修改时如果不带完整性约束条件，原有的约束条件将丢失，如果想保留修改时就得带上完整性约束条件\n\n3）示例2： 将email移到phone后面\n```sql\nALTER TABLE user MODIFY email VARCHAR(50) AFTER `phone`;\n```\n4）示例3：放置第一个，保留原完成性约束条件\n```sql\nALTER TABLE user`MODIFY email VARCHAR(50) NOT NULL DEFAULT 'test@163.com' FIRST;\n```\n5）示例4：修改成大小写敏感，即查询区分大小写\n```sql\nALTER TABLE user MODIFY username VARCHAR(30) BINARY CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT '用户名';\n```\n#### 2.2 修改字段名称和属性\n1）语法：\n```sql\nALTER TABLE <表名> CHANGE <原字段名> <新字段名> <数据类型> [约束条件];\n```\n2）示例：将username字段修改成user_name\n```sql\nALTER TABLE user CHANGE username user_name VARCHAR(30) DEFAULT NULL COMMENT '用户名';\n```\n\n#### 2.3 添加、删除默认值\n1）语法：\n```sql\n-- 添加默认值\nALTER TABLE <表名> ALTER <字段名> SET DEFAULT <默认值>;\n\n-- 删除默认值\nALTER TABLE <表名> ALTER <字段名> DROP DEFAULT;\n```\n2）示例：给sex添加默认值\n```sql\nALTER TABLE USER ALTER sex SET DEFAULT  '难';\n```\n3）示例：删除sex默认值\n```sql\nALTER TABLE user ALTER sex DROP DEFAULT;\n```\n\n#### 2.4 添加、删除主键\n1) 语法：\n```sql\n-- 添加主键\nALTER TABLE <表名> ADD [CONSTRAINT <约束名>] PRIMARY KEY (<字段名称,...>);\n\n-- 删除主键\nALTER TABLE <表名> DROP PRIMARY KEY;\n```\n2）示例：添加主键\n```sql\nALTER TABLE user ADD PRIMARY  KEY (user_id)\n```\n\n3）示例：添加复合主键\n```sql\nALTER TABLE  user_role ADD PRIMARY KEY (user_id, role_id);\n```\n4）示例：删除主键\n```sql\nALTER TABLE user DROP PRIMARY KEY;\n```\n5）示例：删除带自增长属性的主键\n```sql\n-- 先用MODIFY删除自增长属性，注意MODIFY不能去掉主键属性\nALTER TABLE test MODIFY id INT UNSIGNED;\n-- 再来删除主键\nALTER TABLE test DROP PRIMARY KEY;\n```\n#### 2.5 添加、删除唯一索引\n1）语法：\n```sql\n-- 添加唯一性约束\nALTER TABLE <表名> ADD [CONSTANT <约束名>] UNIQUE [INDEX | KEY] [索引名称](<字段名称,...>)\n\n-- 删除唯一性约束\nALTER TABLE <表名> DROP [INDEX | KEY] [索引名称];\n```\n2）示例：为username添加唯一性约束，如果没有指定索引名称，系统会以字段名建立索引\n```sql\nALTER TABLE user ADD UNIQUE(username);\n```\n3）示例：为username添加唯一性约束，并指定索引名称\n```sql\nALTER TABLE user ADD UNION KEY uni_username(username);\n```\n4）示例：查看索引\n```sql\nSHOW CREATE TABLE user;\n```\n5）示例：添加联合UNIQUE\n```sql\nALTER TABLE user ADD UNIQUE INDEX uni_nickname_username(nickname, username);\n```\n6）示例：删除索引\n```sql\nALTER TABLE user DROP INDEX username;\nALTER TABLE user DROP KEY uni_username;\nALTER TABLE user DROP INDEX uni_nickname_username;\n```\n#### 2.6 修改表的存储引擎\n1）语法：\n```sql\nALTER TABLE <表名> ENGINE=<存储引擎名称>\n```\n2）示例：\n```sql\nALTER TABLE user ENGINE=MyISAM;\nALTER TABLE user ENGINE=INNODB;\n```\n#### 2.7 修改自增长值\n1）语法：\n```sql\nALTER TABLE <表名> AUTO_INCREMENT=[值];\n```\n2）示例：\n```sql\nALTER TABLE user AUTO_INCREMENT= 100;\n```\n\n\n博客原文链接：https://www.cnblogs.com/Jimc/p/12979319.html\n如有侵权，请联系删除！\n","source":"_posts/2021/11/mysql-column.md","raw":"---\ntitle: Mysql添加/修改/删除字段\ntags: mysql\ncomments: true\ncategories: mysql\nabbrlink: 11250\ndate: 2021-11-15 21:13:42\ntranslate_title: mysql-operate-column\n---\n### 1. 添加字段\n#### 1.1 在末尾添加字段\n1）语法：\n```sql\nALTER TABLE <表名> ADD <字段名> <数据类型> [约束条件];\n```\n语法格式的说明：\n- <表名> 为数据表的名字；\n- <字段名> 为所要添加的字段的名字；\n- <数据类型> 为所要添加的字段能存储数据的数据类型；\n- [约束条件] 是可选的，用来对添加的字段进行约束。\n- 这种语法格式默认在表的最后位置（最后一列的后面）添加新字段\n\n2）示例：在user表末尾添加字段phone\n```sql\nALTER TABLE user ADD phone VARCHAR(11) DEFAULT NULL COMMENT '电话号码';\n```\n#### 1.2 在开头添加字段\n1）语法：\n```sql\nALTER TABLE <表名> ADD <字段名> <数据类型> [约束条件] FIRST;\n```\nFIRST 关键字一般放在语句的末尾\n2）示例：在user表开头添加字段user_id\n```sql\nALTER TABLE user ADD user_id VARCHAR(32) NOT NULL COMMENT '用户主键' FIRST;\n```\n#### 1.3 在中间添加字段\n1）语法：\n```sql\nALTER TABLE <表名> ADD <字段名> <数据类型> [约束条件] AFTER <已经存在的字段名>;\n```\nAFTER 的作用是将新字段添加到某个已有字段后面。\n注意：只能在某个已有字段的后面添加新字段，不能在它的前面添加新字段\n\n2）示例：在user表的user_id字段后添加username字段\n```sql\nALTER TABLE user ADD username VARCHAR(30) DEFAULT NULL COMMENT '用户名' AFTER `user_id`;\n```\n### 2. 修改字段\n#### 2.1 修改字段属性\n1）语法：\n```sql\nALTER TABLE <表名> MODIFY <字段名> <数据类型> [约束条件];\n```\n2）示例1：修改字段属性\n```sql\n-- 将email字段VARCHAR(50)修改成VARCHAR(200)\nALTER TABLE user MODIFY email VARCHAR(200) NOT NULL DEFAULT 'email@163.com';\n```\n注意：修改时如果不带完整性约束条件，原有的约束条件将丢失，如果想保留修改时就得带上完整性约束条件\n\n3）示例2： 将email移到phone后面\n```sql\nALTER TABLE user MODIFY email VARCHAR(50) AFTER `phone`;\n```\n4）示例3：放置第一个，保留原完成性约束条件\n```sql\nALTER TABLE user`MODIFY email VARCHAR(50) NOT NULL DEFAULT 'test@163.com' FIRST;\n```\n5）示例4：修改成大小写敏感，即查询区分大小写\n```sql\nALTER TABLE user MODIFY username VARCHAR(30) BINARY CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT '用户名';\n```\n#### 2.2 修改字段名称和属性\n1）语法：\n```sql\nALTER TABLE <表名> CHANGE <原字段名> <新字段名> <数据类型> [约束条件];\n```\n2）示例：将username字段修改成user_name\n```sql\nALTER TABLE user CHANGE username user_name VARCHAR(30) DEFAULT NULL COMMENT '用户名';\n```\n\n#### 2.3 添加、删除默认值\n1）语法：\n```sql\n-- 添加默认值\nALTER TABLE <表名> ALTER <字段名> SET DEFAULT <默认值>;\n\n-- 删除默认值\nALTER TABLE <表名> ALTER <字段名> DROP DEFAULT;\n```\n2）示例：给sex添加默认值\n```sql\nALTER TABLE USER ALTER sex SET DEFAULT  '难';\n```\n3）示例：删除sex默认值\n```sql\nALTER TABLE user ALTER sex DROP DEFAULT;\n```\n\n#### 2.4 添加、删除主键\n1) 语法：\n```sql\n-- 添加主键\nALTER TABLE <表名> ADD [CONSTRAINT <约束名>] PRIMARY KEY (<字段名称,...>);\n\n-- 删除主键\nALTER TABLE <表名> DROP PRIMARY KEY;\n```\n2）示例：添加主键\n```sql\nALTER TABLE user ADD PRIMARY  KEY (user_id)\n```\n\n3）示例：添加复合主键\n```sql\nALTER TABLE  user_role ADD PRIMARY KEY (user_id, role_id);\n```\n4）示例：删除主键\n```sql\nALTER TABLE user DROP PRIMARY KEY;\n```\n5）示例：删除带自增长属性的主键\n```sql\n-- 先用MODIFY删除自增长属性，注意MODIFY不能去掉主键属性\nALTER TABLE test MODIFY id INT UNSIGNED;\n-- 再来删除主键\nALTER TABLE test DROP PRIMARY KEY;\n```\n#### 2.5 添加、删除唯一索引\n1）语法：\n```sql\n-- 添加唯一性约束\nALTER TABLE <表名> ADD [CONSTANT <约束名>] UNIQUE [INDEX | KEY] [索引名称](<字段名称,...>)\n\n-- 删除唯一性约束\nALTER TABLE <表名> DROP [INDEX | KEY] [索引名称];\n```\n2）示例：为username添加唯一性约束，如果没有指定索引名称，系统会以字段名建立索引\n```sql\nALTER TABLE user ADD UNIQUE(username);\n```\n3）示例：为username添加唯一性约束，并指定索引名称\n```sql\nALTER TABLE user ADD UNION KEY uni_username(username);\n```\n4）示例：查看索引\n```sql\nSHOW CREATE TABLE user;\n```\n5）示例：添加联合UNIQUE\n```sql\nALTER TABLE user ADD UNIQUE INDEX uni_nickname_username(nickname, username);\n```\n6）示例：删除索引\n```sql\nALTER TABLE user DROP INDEX username;\nALTER TABLE user DROP KEY uni_username;\nALTER TABLE user DROP INDEX uni_nickname_username;\n```\n#### 2.6 修改表的存储引擎\n1）语法：\n```sql\nALTER TABLE <表名> ENGINE=<存储引擎名称>\n```\n2）示例：\n```sql\nALTER TABLE user ENGINE=MyISAM;\nALTER TABLE user ENGINE=INNODB;\n```\n#### 2.7 修改自增长值\n1）语法：\n```sql\nALTER TABLE <表名> AUTO_INCREMENT=[值];\n```\n2）示例：\n```sql\nALTER TABLE user AUTO_INCREMENT= 100;\n```\n\n\n博客原文链接：https://www.cnblogs.com/Jimc/p/12979319.html\n如有侵权，请联系删除！\n","slug":"mysql-column","published":1,"updated":"2022-04-06T09:51:44.947Z","layout":"post","photos":[],"link":"","_id":"cl235zcwt004dwjpjg3p1glx2","content":"<h3 id=\"1-添加字段\"><a class=\"markdownIt-Anchor\" href=\"#1-添加字段\"></a> 1. 添加字段</h3>\n<h4 id=\"11-在末尾添加字段\"><a class=\"markdownIt-Anchor\" href=\"#11-在末尾添加字段\"></a> 1.1 在末尾添加字段</h4>\n<p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件];</span><br></pre></td></tr></table></figure>\n<p>语法格式的说明：</p>\n<ul>\n<li>&lt;表名&gt; 为数据表的名字；</li>\n<li>&lt;字段名&gt; 为所要添加的字段的名字；</li>\n<li>&lt;数据类型&gt; 为所要添加的字段能存储数据的数据类型；</li>\n<li>[约束条件] 是可选的，用来对添加的字段进行约束。</li>\n<li>这种语法格式默认在表的最后位置（最后一列的后面）添加新字段</li>\n</ul>\n<p>2）示例：在user表末尾添加字段phone</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> phone <span class=\"type\">VARCHAR</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;电话号码&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"12-在开头添加字段\"><a class=\"markdownIt-Anchor\" href=\"#12-在开头添加字段\"></a> 1.2 在开头添加字段</h4>\n<p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件] <span class=\"keyword\">FIRST</span>;</span><br></pre></td></tr></table></figure>\n<p>FIRST 关键字一般放在语句的末尾<br>\n2）示例：在user表开头添加字段user_id</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> user_id <span class=\"type\">VARCHAR</span>(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户主键&#x27;</span> <span class=\"keyword\">FIRST</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"13-在中间添加字段\"><a class=\"markdownIt-Anchor\" href=\"#13-在中间添加字段\"></a> 1.3 在中间添加字段</h4>\n<p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件] AFTER <span class=\"operator\">&lt;</span>已经存在的字段名<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure>\n<p>AFTER 的作用是将新字段添加到某个已有字段后面。<br>\n注意：只能在某个已有字段的后面添加新字段，不能在它的前面添加新字段</p>\n<p>2）示例：在user表的user_id字段后添加username字段</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> username <span class=\"type\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户名&#x27;</span> AFTER `user_id`;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-修改字段\"><a class=\"markdownIt-Anchor\" href=\"#2-修改字段\"></a> 2. 修改字段</h3>\n<h4 id=\"21-修改字段属性\"><a class=\"markdownIt-Anchor\" href=\"#21-修改字段属性\"></a> 2.1 修改字段属性</h4>\n<p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> MODIFY <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件];</span><br></pre></td></tr></table></figure>\n<p>2）示例1：修改字段属性</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 将email字段VARCHAR(50)修改成VARCHAR(200)</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> MODIFY email <span class=\"type\">VARCHAR</span>(<span class=\"number\">200</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;email@163.com&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>注意：修改时如果不带完整性约束条件，原有的约束条件将丢失，如果想保留修改时就得带上完整性约束条件</p>\n<p>3）示例2： 将email移到phone后面</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> MODIFY email <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) AFTER `phone`;</span><br></pre></td></tr></table></figure>\n<p>4）示例3：放置第一个，保留原完成性约束条件</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span>`MODIFY email <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;test@163.com&#x27;</span> <span class=\"keyword\">FIRST</span>;</span><br></pre></td></tr></table></figure>\n<p>5）示例4：修改成大小写敏感，即查询区分大小写</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> MODIFY username <span class=\"type\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"type\">BINARY</span> <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_bin <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户名&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"22-修改字段名称和属性\"><a class=\"markdownIt-Anchor\" href=\"#22-修改字段名称和属性\"></a> 2.2 修改字段名称和属性</h4>\n<p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> CHANGE <span class=\"operator\">&lt;</span>原字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>新字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件];</span><br></pre></td></tr></table></figure>\n<p>2）示例：将username字段修改成user_name</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> CHANGE username user_name <span class=\"type\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户名&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"23-添加-删除默认值\"><a class=\"markdownIt-Anchor\" href=\"#23-添加-删除默认值\"></a> 2.3 添加、删除默认值</h4>\n<p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加默认值</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ALTER</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span> <span class=\"operator\">&lt;</span>默认值<span class=\"operator\">&gt;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除默认值</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ALTER</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"keyword\">DROP</span> <span class=\"keyword\">DEFAULT</span>;</span><br></pre></td></tr></table></figure>\n<p>2）示例：给sex添加默认值</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">USER</span> <span class=\"keyword\">ALTER</span> sex <span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span>  <span class=\"string\">&#x27;难&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>3）示例：删除sex默认值</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ALTER</span> sex <span class=\"keyword\">DROP</span> <span class=\"keyword\">DEFAULT</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"24-添加-删除主键\"><a class=\"markdownIt-Anchor\" href=\"#24-添加-删除主键\"></a> 2.4 添加、删除主键</h4>\n<ol>\n<li>语法：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加主键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> [<span class=\"keyword\">CONSTRAINT</span> <span class=\"operator\">&lt;</span>约束名<span class=\"operator\">&gt;</span>] <span class=\"keyword\">PRIMARY</span> KEY (<span class=\"operator\">&lt;</span>字段名称,...<span class=\"operator\">&gt;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除主键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">DROP</span> <span class=\"keyword\">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>\n<p>2）示例：添加主键</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">PRIMARY</span>  KEY (user_id)</span><br></pre></td></tr></table></figure>\n<p>3）示例：添加复合主键</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span>  user_role <span class=\"keyword\">ADD</span> <span class=\"keyword\">PRIMARY</span> KEY (user_id, role_id);</span><br></pre></td></tr></table></figure>\n<p>4）示例：删除主键</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">DROP</span> <span class=\"keyword\">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>\n<p>5）示例：删除带自增长属性的主键</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 先用MODIFY删除自增长属性，注意MODIFY不能去掉主键属性</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> test MODIFY id <span class=\"type\">INT</span> UNSIGNED;</span><br><span class=\"line\"><span class=\"comment\">-- 再来删除主键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> test <span class=\"keyword\">DROP</span> <span class=\"keyword\">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>\n<h4 id=\"25-添加-删除唯一索引\"><a class=\"markdownIt-Anchor\" href=\"#25-添加-删除唯一索引\"></a> 2.5 添加、删除唯一索引</h4>\n<p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加唯一性约束</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> [CONSTANT <span class=\"operator\">&lt;</span>约束名<span class=\"operator\">&gt;</span>] <span class=\"keyword\">UNIQUE</span> [INDEX <span class=\"operator\">|</span> KEY] [索引名称](<span class=\"operator\">&lt;</span>字段名称,...<span class=\"operator\">&gt;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除唯一性约束</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">DROP</span> [INDEX <span class=\"operator\">|</span> KEY] [索引名称];</span><br></pre></td></tr></table></figure>\n<p>2）示例：为username添加唯一性约束，如果没有指定索引名称，系统会以字段名建立索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span>(username);</span><br></pre></td></tr></table></figure>\n<p>3）示例：为username添加唯一性约束，并指定索引名称</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNION</span> KEY uni_username(username);</span><br></pre></td></tr></table></figure>\n<p>4）示例：查看索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure>\n<p>5）示例：添加联合UNIQUE</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> INDEX uni_nickname_username(nickname, username);</span><br></pre></td></tr></table></figure>\n<p>6）示例：删除索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">DROP</span> INDEX username;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">DROP</span> KEY uni_username;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">DROP</span> INDEX uni_nickname_username;</span><br></pre></td></tr></table></figure>\n<h4 id=\"26-修改表的存储引擎\"><a class=\"markdownIt-Anchor\" href=\"#26-修改表的存储引擎\"></a> 2.6 修改表的存储引擎</h4>\n<p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> ENGINE<span class=\"operator\">=</span><span class=\"operator\">&lt;</span>存储引擎名称<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2）示例：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> ENGINE<span class=\"operator\">=</span>MyISAM;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> ENGINE<span class=\"operator\">=</span>INNODB;</span><br></pre></td></tr></table></figure>\n<h4 id=\"27-修改自增长值\"><a class=\"markdownIt-Anchor\" href=\"#27-修改自增长值\"></a> 2.7 修改自增长值</h4>\n<p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> AUTO_INCREMENT<span class=\"operator\">=</span>[值];</span><br></pre></td></tr></table></figure>\n<p>2）示例：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> AUTO_INCREMENT<span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n<p>博客原文链接：<a href=\"https://www.cnblogs.com/Jimc/p/12979319.html\">https://www.cnblogs.com/Jimc/p/12979319.html</a><br>\n如有侵权，请联系删除！</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"1-添加字段\"><a class=\"markdownIt-Anchor\" href=\"#1-添加字段\"></a> 1. 添加字段</h3>\n<h4 id=\"11-在末尾添加字段\"><a class=\"markdownIt-Anchor\" href=\"#11-在末尾添加字段\"></a> 1.1 在末尾添加字段</h4>\n<p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件];</span><br></pre></td></tr></table></figure>\n<p>语法格式的说明：</p>\n<ul>\n<li>&lt;表名&gt; 为数据表的名字；</li>\n<li>&lt;字段名&gt; 为所要添加的字段的名字；</li>\n<li>&lt;数据类型&gt; 为所要添加的字段能存储数据的数据类型；</li>\n<li>[约束条件] 是可选的，用来对添加的字段进行约束。</li>\n<li>这种语法格式默认在表的最后位置（最后一列的后面）添加新字段</li>\n</ul>\n<p>2）示例：在user表末尾添加字段phone</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> phone <span class=\"type\">VARCHAR</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;电话号码&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"12-在开头添加字段\"><a class=\"markdownIt-Anchor\" href=\"#12-在开头添加字段\"></a> 1.2 在开头添加字段</h4>\n<p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件] <span class=\"keyword\">FIRST</span>;</span><br></pre></td></tr></table></figure>\n<p>FIRST 关键字一般放在语句的末尾<br>\n2）示例：在user表开头添加字段user_id</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> user_id <span class=\"type\">VARCHAR</span>(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户主键&#x27;</span> <span class=\"keyword\">FIRST</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"13-在中间添加字段\"><a class=\"markdownIt-Anchor\" href=\"#13-在中间添加字段\"></a> 1.3 在中间添加字段</h4>\n<p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件] AFTER <span class=\"operator\">&lt;</span>已经存在的字段名<span class=\"operator\">&gt;</span>;</span><br></pre></td></tr></table></figure>\n<p>AFTER 的作用是将新字段添加到某个已有字段后面。<br>\n注意：只能在某个已有字段的后面添加新字段，不能在它的前面添加新字段</p>\n<p>2）示例：在user表的user_id字段后添加username字段</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> username <span class=\"type\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户名&#x27;</span> AFTER `user_id`;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-修改字段\"><a class=\"markdownIt-Anchor\" href=\"#2-修改字段\"></a> 2. 修改字段</h3>\n<h4 id=\"21-修改字段属性\"><a class=\"markdownIt-Anchor\" href=\"#21-修改字段属性\"></a> 2.1 修改字段属性</h4>\n<p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> MODIFY <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件];</span><br></pre></td></tr></table></figure>\n<p>2）示例1：修改字段属性</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 将email字段VARCHAR(50)修改成VARCHAR(200)</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> MODIFY email <span class=\"type\">VARCHAR</span>(<span class=\"number\">200</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;email@163.com&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>注意：修改时如果不带完整性约束条件，原有的约束条件将丢失，如果想保留修改时就得带上完整性约束条件</p>\n<p>3）示例2： 将email移到phone后面</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> MODIFY email <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) AFTER `phone`;</span><br></pre></td></tr></table></figure>\n<p>4）示例3：放置第一个，保留原完成性约束条件</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span>`MODIFY email <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;test@163.com&#x27;</span> <span class=\"keyword\">FIRST</span>;</span><br></pre></td></tr></table></figure>\n<p>5）示例4：修改成大小写敏感，即查询区分大小写</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> MODIFY username <span class=\"type\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"type\">BINARY</span> <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_bin <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户名&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"22-修改字段名称和属性\"><a class=\"markdownIt-Anchor\" href=\"#22-修改字段名称和属性\"></a> 2.2 修改字段名称和属性</h4>\n<p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> CHANGE <span class=\"operator\">&lt;</span>原字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>新字段名<span class=\"operator\">&gt;</span> <span class=\"operator\">&lt;</span>数据类型<span class=\"operator\">&gt;</span> [约束条件];</span><br></pre></td></tr></table></figure>\n<p>2）示例：将username字段修改成user_name</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> CHANGE username user_name <span class=\"type\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户名&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"23-添加-删除默认值\"><a class=\"markdownIt-Anchor\" href=\"#23-添加-删除默认值\"></a> 2.3 添加、删除默认值</h4>\n<p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加默认值</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ALTER</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span> <span class=\"operator\">&lt;</span>默认值<span class=\"operator\">&gt;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除默认值</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ALTER</span> <span class=\"operator\">&lt;</span>字段名<span class=\"operator\">&gt;</span> <span class=\"keyword\">DROP</span> <span class=\"keyword\">DEFAULT</span>;</span><br></pre></td></tr></table></figure>\n<p>2）示例：给sex添加默认值</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">USER</span> <span class=\"keyword\">ALTER</span> sex <span class=\"keyword\">SET</span> <span class=\"keyword\">DEFAULT</span>  <span class=\"string\">&#x27;难&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>3）示例：删除sex默认值</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ALTER</span> sex <span class=\"keyword\">DROP</span> <span class=\"keyword\">DEFAULT</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"24-添加-删除主键\"><a class=\"markdownIt-Anchor\" href=\"#24-添加-删除主键\"></a> 2.4 添加、删除主键</h4>\n<ol>\n<li>语法：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加主键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> [<span class=\"keyword\">CONSTRAINT</span> <span class=\"operator\">&lt;</span>约束名<span class=\"operator\">&gt;</span>] <span class=\"keyword\">PRIMARY</span> KEY (<span class=\"operator\">&lt;</span>字段名称,...<span class=\"operator\">&gt;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除主键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">DROP</span> <span class=\"keyword\">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>\n<p>2）示例：添加主键</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">PRIMARY</span>  KEY (user_id)</span><br></pre></td></tr></table></figure>\n<p>3）示例：添加复合主键</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span>  user_role <span class=\"keyword\">ADD</span> <span class=\"keyword\">PRIMARY</span> KEY (user_id, role_id);</span><br></pre></td></tr></table></figure>\n<p>4）示例：删除主键</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">DROP</span> <span class=\"keyword\">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>\n<p>5）示例：删除带自增长属性的主键</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 先用MODIFY删除自增长属性，注意MODIFY不能去掉主键属性</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> test MODIFY id <span class=\"type\">INT</span> UNSIGNED;</span><br><span class=\"line\"><span class=\"comment\">-- 再来删除主键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> test <span class=\"keyword\">DROP</span> <span class=\"keyword\">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>\n<h4 id=\"25-添加-删除唯一索引\"><a class=\"markdownIt-Anchor\" href=\"#25-添加-删除唯一索引\"></a> 2.5 添加、删除唯一索引</h4>\n<p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加唯一性约束</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">ADD</span> [CONSTANT <span class=\"operator\">&lt;</span>约束名<span class=\"operator\">&gt;</span>] <span class=\"keyword\">UNIQUE</span> [INDEX <span class=\"operator\">|</span> KEY] [索引名称](<span class=\"operator\">&lt;</span>字段名称,...<span class=\"operator\">&gt;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除唯一性约束</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> <span class=\"keyword\">DROP</span> [INDEX <span class=\"operator\">|</span> KEY] [索引名称];</span><br></pre></td></tr></table></figure>\n<p>2）示例：为username添加唯一性约束，如果没有指定索引名称，系统会以字段名建立索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span>(username);</span><br></pre></td></tr></table></figure>\n<p>3）示例：为username添加唯一性约束，并指定索引名称</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNION</span> KEY uni_username(username);</span><br></pre></td></tr></table></figure>\n<p>4）示例：查看索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure>\n<p>5）示例：添加联合UNIQUE</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> INDEX uni_nickname_username(nickname, username);</span><br></pre></td></tr></table></figure>\n<p>6）示例：删除索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">DROP</span> INDEX username;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">DROP</span> KEY uni_username;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">DROP</span> INDEX uni_nickname_username;</span><br></pre></td></tr></table></figure>\n<h4 id=\"26-修改表的存储引擎\"><a class=\"markdownIt-Anchor\" href=\"#26-修改表的存储引擎\"></a> 2.6 修改表的存储引擎</h4>\n<p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> ENGINE<span class=\"operator\">=</span><span class=\"operator\">&lt;</span>存储引擎名称<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2）示例：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> ENGINE<span class=\"operator\">=</span>MyISAM;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> ENGINE<span class=\"operator\">=</span>INNODB;</span><br></pre></td></tr></table></figure>\n<h4 id=\"27-修改自增长值\"><a class=\"markdownIt-Anchor\" href=\"#27-修改自增长值\"></a> 2.7 修改自增长值</h4>\n<p>1）语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"operator\">&lt;</span>表名<span class=\"operator\">&gt;</span> AUTO_INCREMENT<span class=\"operator\">=</span>[值];</span><br></pre></td></tr></table></figure>\n<p>2）示例：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> AUTO_INCREMENT<span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n<p>博客原文链接：<a href=\"https://www.cnblogs.com/Jimc/p/12979319.html\">https://www.cnblogs.com/Jimc/p/12979319.html</a><br>\n如有侵权，请联系删除！</p>\n"},{"title":"TIDB设置sql_mode","comments":1,"abbrlink":47745,"date":"2021-11-15T12:57:46.000Z","translate_title":"tidb-set-sql-mode","_content":"### 1. 使用命令查询当前sql_mode\n```sql\nselect @@sql_mode\n-- 或者\nselect @@GLOBAL.sql_mode\n```\n![sql_mode](./sql-model/1.png)\n\n##### sql_mode常用值：\n- ONLY_FULL_GROUP_BY\n  对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中\n  \n- NO_AUTO_VALUE_ON_ZERO\n  该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。如果用户希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。\n\n- STRICT_TRANS_TABLES \n  在该模式下，如果一个值不能插入到一个事务中，则中断当前的操作，对非事务表不做限制\n\n- NO_ZERO_IN_DATE \n  在严格模式下，不允许日期和月份为零\n\n- NO_ZERO_DATE \n  设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告\n\n- ERROR_FOR_DIVISION_BY_ZERO \n  在insert或update过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时Mysql返回NULL\n\n- NO_AUTO_CREATE_USER \n  禁止GRANT创建密码为空的用户\n\n- NO_ENGINE_SUBSTITUTION \n  如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常\n\n- PIPES_AS_CONCAT \n  将\"||\"视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样是，也和字符串的拼接函数Concat想类似\n\n- ANSI_QUOTES \n  启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符\n  \n### 2. 临时设置（新session仍然使用之前的sql_mode）\n```sql\nset sql_mode=‘ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES’;\n```\n\n### 3. 全局设置（新session仍然使用修改后的sql_mode）\n```sql\nset @@global.sql_mode='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE‘；\n```","source":"_posts/2021/11/sql-model.md","raw":"---\ntitle: TIDB设置sql_mode\ncomments: true\ntags: tidb\ncategories: mysql\nabbrlink: 47745\ndate: 2021-11-15 20:57:46\ntranslate_title: tidb-set-sql-mode\n---\n### 1. 使用命令查询当前sql_mode\n```sql\nselect @@sql_mode\n-- 或者\nselect @@GLOBAL.sql_mode\n```\n![sql_mode](./sql-model/1.png)\n\n##### sql_mode常用值：\n- ONLY_FULL_GROUP_BY\n  对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中\n  \n- NO_AUTO_VALUE_ON_ZERO\n  该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。如果用户希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。\n\n- STRICT_TRANS_TABLES \n  在该模式下，如果一个值不能插入到一个事务中，则中断当前的操作，对非事务表不做限制\n\n- NO_ZERO_IN_DATE \n  在严格模式下，不允许日期和月份为零\n\n- NO_ZERO_DATE \n  设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告\n\n- ERROR_FOR_DIVISION_BY_ZERO \n  在insert或update过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时Mysql返回NULL\n\n- NO_AUTO_CREATE_USER \n  禁止GRANT创建密码为空的用户\n\n- NO_ENGINE_SUBSTITUTION \n  如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常\n\n- PIPES_AS_CONCAT \n  将\"||\"视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样是，也和字符串的拼接函数Concat想类似\n\n- ANSI_QUOTES \n  启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符\n  \n### 2. 临时设置（新session仍然使用之前的sql_mode）\n```sql\nset sql_mode=‘ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES’;\n```\n\n### 3. 全局设置（新session仍然使用修改后的sql_mode）\n```sql\nset @@global.sql_mode='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE‘；\n```","slug":"sql-model","published":1,"updated":"2022-04-06T09:51:44.957Z","layout":"post","photos":[],"link":"","_id":"cl235zcwu004iwjpj7kak2l0g","content":"<h3 id=\"1-使用命令查询当前sql_mode\"><a class=\"markdownIt-Anchor\" href=\"#1-使用命令查询当前sql_mode\"></a> 1. 使用命令查询当前sql_mode</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> @<span class=\"variable\">@sql</span>_mode</span><br><span class=\"line\"><span class=\"comment\">-- 或者</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> @<span class=\"variable\">@GLOBAL</span>.sql_mode</span><br></pre></td></tr></table></figure>\n<p><img src=\"/sql-model/1.png\" alt=\"sql_mode\"></p>\n<h5 id=\"sql_mode常用值\"><a class=\"markdownIt-Anchor\" href=\"#sql_mode常用值\"></a> sql_mode常用值：</h5>\n<ul>\n<li>\n<p>ONLY_FULL_GROUP_BY<br>\n对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中</p>\n</li>\n<li>\n<p>NO_AUTO_VALUE_ON_ZERO<br>\n该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。如果用户希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。</p>\n</li>\n<li>\n<p>STRICT_TRANS_TABLES<br>\n在该模式下，如果一个值不能插入到一个事务中，则中断当前的操作，对非事务表不做限制</p>\n</li>\n<li>\n<p>NO_ZERO_IN_DATE<br>\n在严格模式下，不允许日期和月份为零</p>\n</li>\n<li>\n<p>NO_ZERO_DATE<br>\n设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告</p>\n</li>\n<li>\n<p>ERROR_FOR_DIVISION_BY_ZERO<br>\n在insert或update过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时Mysql返回NULL</p>\n</li>\n<li>\n<p>NO_AUTO_CREATE_USER<br>\n禁止GRANT创建密码为空的用户</p>\n</li>\n<li>\n<p>NO_ENGINE_SUBSTITUTION<br>\n如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常</p>\n</li>\n<li>\n<p>PIPES_AS_CONCAT<br>\n将&quot;||&quot;视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样是，也和字符串的拼接函数Concat想类似</p>\n</li>\n<li>\n<p>ANSI_QUOTES<br>\n启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符</p>\n</li>\n</ul>\n<h3 id=\"2-临时设置新session仍然使用之前的sql_mode\"><a class=\"markdownIt-Anchor\" href=\"#2-临时设置新session仍然使用之前的sql_mode\"></a> 2. 临时设置（新session仍然使用之前的sql_mode）</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> sql_mode<span class=\"operator\">=</span>‘ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES’;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-全局设置新session仍然使用修改后的sql_mode\"><a class=\"markdownIt-Anchor\" href=\"#3-全局设置新session仍然使用修改后的sql_mode\"></a> 3. 全局设置（新session仍然使用修改后的sql_mode）</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> @<span class=\"variable\">@global</span>.sql_mode<span class=\"operator\">=</span><span class=\"string\">&#x27;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE‘；</span></span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"1-使用命令查询当前sql_mode\"><a class=\"markdownIt-Anchor\" href=\"#1-使用命令查询当前sql_mode\"></a> 1. 使用命令查询当前sql_mode</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> @<span class=\"variable\">@sql</span>_mode</span><br><span class=\"line\"><span class=\"comment\">-- 或者</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> @<span class=\"variable\">@GLOBAL</span>.sql_mode</span><br></pre></td></tr></table></figure>\n<p><img src=\"/sql-model/1.png\" alt=\"sql_mode\"></p>\n<h5 id=\"sql_mode常用值\"><a class=\"markdownIt-Anchor\" href=\"#sql_mode常用值\"></a> sql_mode常用值：</h5>\n<ul>\n<li>\n<p>ONLY_FULL_GROUP_BY<br>\n对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中</p>\n</li>\n<li>\n<p>NO_AUTO_VALUE_ON_ZERO<br>\n该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。如果用户希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。</p>\n</li>\n<li>\n<p>STRICT_TRANS_TABLES<br>\n在该模式下，如果一个值不能插入到一个事务中，则中断当前的操作，对非事务表不做限制</p>\n</li>\n<li>\n<p>NO_ZERO_IN_DATE<br>\n在严格模式下，不允许日期和月份为零</p>\n</li>\n<li>\n<p>NO_ZERO_DATE<br>\n设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告</p>\n</li>\n<li>\n<p>ERROR_FOR_DIVISION_BY_ZERO<br>\n在insert或update过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时Mysql返回NULL</p>\n</li>\n<li>\n<p>NO_AUTO_CREATE_USER<br>\n禁止GRANT创建密码为空的用户</p>\n</li>\n<li>\n<p>NO_ENGINE_SUBSTITUTION<br>\n如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常</p>\n</li>\n<li>\n<p>PIPES_AS_CONCAT<br>\n将&quot;||&quot;视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样是，也和字符串的拼接函数Concat想类似</p>\n</li>\n<li>\n<p>ANSI_QUOTES<br>\n启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符</p>\n</li>\n</ul>\n<h3 id=\"2-临时设置新session仍然使用之前的sql_mode\"><a class=\"markdownIt-Anchor\" href=\"#2-临时设置新session仍然使用之前的sql_mode\"></a> 2. 临时设置（新session仍然使用之前的sql_mode）</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> sql_mode<span class=\"operator\">=</span>‘ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES’;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-全局设置新session仍然使用修改后的sql_mode\"><a class=\"markdownIt-Anchor\" href=\"#3-全局设置新session仍然使用修改后的sql_mode\"></a> 3. 全局设置（新session仍然使用修改后的sql_mode）</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> @<span class=\"variable\">@global</span>.sql_mode<span class=\"operator\">=</span><span class=\"string\">&#x27;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE‘；</span></span><br></pre></td></tr></table></figure>"},{"title":"Java中将List列表转换为字符串","comments":1,"abbrlink":28733,"date":"2021-10-10T09:48:19.000Z","translate_title":"list_to_string","_content":"\n### 1. toString() 方法\nList.toString()是最简单的，但它在开头和结尾添加方括号，每个字符串用逗号分隔符分隔。\n缺点是我们不能用另一个分隔符替换逗号，也不能去掉方括号\n```java\npublic class ListToStringUsingToStringExample {\n\n    public static void main(String args) {\n        \n    // creating a list with strings.\n    List<String> list = Arrays.asList(\"One\",\n                      \"Two\",\n                      \"Three\",\n                      \"Four\",\n                      \"Five\");\n    \n    // converting List<String> to String using toString() method\n    String stringFromList = list.toString();\n    \n    // priting the string\n    System.out.println(\"String : \"+stringFromList);        \n    }\n}\n// 输出：String : [One, Two, Three, Four, Five]\n```\n\n### 2. Java 8 String.join() \njava 8 String添加了一个特殊的方法String.join()以将集合转换为具有给定分隔符的字符串\n```java\npublic class ListToStringUsingString_JoinExample {\n\n    public static void main(String args) {\n        // creating a list with strings.\n        List<String> list = Arrays.asList(\"One\",\n                          \"Two\",\n                          \"Three\",\n                          \"Four\",\n                          \"Five\");\n        \n        // converting List<String> to String using toString() method\n        String stringFromList = String.join(\"~\", list);\n        \n        // priting the string\n        System.out.println(\"String with tilde delimiter: \"+stringFromList);\n        \n        // delimiting with pipe | symbol.\n        String stringPipe = String.join(\"|\", list);\n        \n        // printing\n        System.out.println(\"String with pipe delimiter : \"+stringPipe);\n    \n    }\n}\n//输出：\n//  String with tilde delimiter: One~Two~Three~Four~Five\n//  String with pipe delimiter : One|Two|Three|Four|Five\n```\n\n### 3. Collectors.joining() \nCollectors.join()方法来自 java 8 stream api。Collctors.joining()方法将分隔符、前缀和后缀作为参数。此方法将列表转换为具有给定分隔符、前缀和后缀的字符串。\n\n查看以下有关使用不同分隔符的 join() 方法的示例。但是，String.join() 方法不提供前缀和后缀选项。\n```java\npublic class ListToStringUsingString_JoinExample {\n\n    public static void main(String args) {\n        // creating a list with strings.\n        List<String> list = Arrays.asList(\"One\",\n                          \"Two\",\n                          \"Three\",\n                          \"Four\",\n                          \"Five\");\n    \n        // using java 8 Collectors.joining with delimiter, prefix and suffix\n        String joiningString = list.stream().collect(Collectors.joining(\"-\", \"{\", \"}\"));\n        // printing\n        System.out.println(\"Collectors.joining string : \"+joiningString);\n        String joiningString3 = list.stream().collect(Collectors.joining(\"@\", \"\", \"\"));\n        // printing\n        System.out.println(\"Collectors.joining string with @ separator : \"+joiningString3);\n    \n    \n    }\n}\n//输出：\n//Collectors.joining string : {One-Two-Three-Four-Five}\n//Collectors.joining string with @ separator : One@Two@Three@Four@Five\n```\n### 4. Apache Commons StringUtils.join() \n使用来自 apache commons 包的外部库。该库有一个方法StringUtils.join() ，它采用类似于 String.join() 方法的列表和分隔符\n```java\npublic class ListToStringUsingStringUtils_JoinExample {\n\n    public static void main(String args) {\n        // creating a list with strings.\n        List<String> list = Arrays.asList(\"One\",\n                          \"Two\",\n                          \"Three\",\n                          \"Four\",\n                          \"Five\");\n    \n        // using java 8 Collectors.joining with delimiter, prefix and suffix\n        String joiningString = StringUtils.join(list, \"^\");\n        \n        // printing\n        System.out.println(\"StringUtils.join string with ^ delimiter : \"+joiningString);\n        \n        String joiningString3 = StringUtils.join(list, \"$\");\n        \n        // printing\n        System.out.println(\"StringUtils.join string with @ separator : \"+joiningString3);\n    }\n}\n//输出：\n//  StringUtils.join string with ^ delimiter : One^Two^Three^Four^Five\n//  StringUtils.join string with @ separator : One$Two$Three$Four$Five\n```","source":"_posts/2021/10/list-to-string.md","raw":"---\ntitle: Java中将List列表转换为字符串\ncomments: true\ntags: 集合\nabbrlink: 28733\ndate: 2021-10-10 17:48:19\ncategories: java\ntranslate_title: list_to_string\n---\n\n### 1. toString() 方法\nList.toString()是最简单的，但它在开头和结尾添加方括号，每个字符串用逗号分隔符分隔。\n缺点是我们不能用另一个分隔符替换逗号，也不能去掉方括号\n```java\npublic class ListToStringUsingToStringExample {\n\n    public static void main(String args) {\n        \n    // creating a list with strings.\n    List<String> list = Arrays.asList(\"One\",\n                      \"Two\",\n                      \"Three\",\n                      \"Four\",\n                      \"Five\");\n    \n    // converting List<String> to String using toString() method\n    String stringFromList = list.toString();\n    \n    // priting the string\n    System.out.println(\"String : \"+stringFromList);        \n    }\n}\n// 输出：String : [One, Two, Three, Four, Five]\n```\n\n### 2. Java 8 String.join() \njava 8 String添加了一个特殊的方法String.join()以将集合转换为具有给定分隔符的字符串\n```java\npublic class ListToStringUsingString_JoinExample {\n\n    public static void main(String args) {\n        // creating a list with strings.\n        List<String> list = Arrays.asList(\"One\",\n                          \"Two\",\n                          \"Three\",\n                          \"Four\",\n                          \"Five\");\n        \n        // converting List<String> to String using toString() method\n        String stringFromList = String.join(\"~\", list);\n        \n        // priting the string\n        System.out.println(\"String with tilde delimiter: \"+stringFromList);\n        \n        // delimiting with pipe | symbol.\n        String stringPipe = String.join(\"|\", list);\n        \n        // printing\n        System.out.println(\"String with pipe delimiter : \"+stringPipe);\n    \n    }\n}\n//输出：\n//  String with tilde delimiter: One~Two~Three~Four~Five\n//  String with pipe delimiter : One|Two|Three|Four|Five\n```\n\n### 3. Collectors.joining() \nCollectors.join()方法来自 java 8 stream api。Collctors.joining()方法将分隔符、前缀和后缀作为参数。此方法将列表转换为具有给定分隔符、前缀和后缀的字符串。\n\n查看以下有关使用不同分隔符的 join() 方法的示例。但是，String.join() 方法不提供前缀和后缀选项。\n```java\npublic class ListToStringUsingString_JoinExample {\n\n    public static void main(String args) {\n        // creating a list with strings.\n        List<String> list = Arrays.asList(\"One\",\n                          \"Two\",\n                          \"Three\",\n                          \"Four\",\n                          \"Five\");\n    \n        // using java 8 Collectors.joining with delimiter, prefix and suffix\n        String joiningString = list.stream().collect(Collectors.joining(\"-\", \"{\", \"}\"));\n        // printing\n        System.out.println(\"Collectors.joining string : \"+joiningString);\n        String joiningString3 = list.stream().collect(Collectors.joining(\"@\", \"\", \"\"));\n        // printing\n        System.out.println(\"Collectors.joining string with @ separator : \"+joiningString3);\n    \n    \n    }\n}\n//输出：\n//Collectors.joining string : {One-Two-Three-Four-Five}\n//Collectors.joining string with @ separator : One@Two@Three@Four@Five\n```\n### 4. Apache Commons StringUtils.join() \n使用来自 apache commons 包的外部库。该库有一个方法StringUtils.join() ，它采用类似于 String.join() 方法的列表和分隔符\n```java\npublic class ListToStringUsingStringUtils_JoinExample {\n\n    public static void main(String args) {\n        // creating a list with strings.\n        List<String> list = Arrays.asList(\"One\",\n                          \"Two\",\n                          \"Three\",\n                          \"Four\",\n                          \"Five\");\n    \n        // using java 8 Collectors.joining with delimiter, prefix and suffix\n        String joiningString = StringUtils.join(list, \"^\");\n        \n        // printing\n        System.out.println(\"StringUtils.join string with ^ delimiter : \"+joiningString);\n        \n        String joiningString3 = StringUtils.join(list, \"$\");\n        \n        // printing\n        System.out.println(\"StringUtils.join string with @ separator : \"+joiningString3);\n    }\n}\n//输出：\n//  StringUtils.join string with ^ delimiter : One^Two^Three^Four^Five\n//  StringUtils.join string with @ separator : One$Two$Three$Four$Five\n```","slug":"list-to-string","published":1,"updated":"2022-03-27T14:06:03.359Z","layout":"post","photos":[],"link":"","_id":"cl235zcww004lwjpj4pr47nh3","content":"<h3 id=\"1-tostring-方法\"><a class=\"markdownIt-Anchor\" href=\"#1-tostring-方法\"></a> 1. toString() 方法</h3>\n<p>List.toString()是最简单的，但它在开头和结尾添加方括号，每个字符串用逗号分隔符分隔。<br>\n缺点是我们不能用另一个分隔符替换逗号，也不能去掉方括号</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListToStringUsingToStringExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// creating a list with strings.</span></span><br><span class=\"line\">    List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;One&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;Two&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;Three&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;Four&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;Five&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// converting List&lt;String&gt; to String using toString() method</span></span><br><span class=\"line\">    String stringFromList = list.toString();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// priting the string</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;String : &quot;</span>+stringFromList);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：String : [One, Two, Three, Four, Five]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-java-8-stringjoin\"><a class=\"markdownIt-Anchor\" href=\"#2-java-8-stringjoin\"></a> 2. Java 8 String.join()</h3>\n<p>java 8 String添加了一个特殊的方法String.join()以将集合转换为具有给定分隔符的字符串</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListToStringUsingString_JoinExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// creating a list with strings.</span></span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;One&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Two&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Three&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Four&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Five&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// converting List&lt;String&gt; to String using toString() method</span></span><br><span class=\"line\">        String stringFromList = String.join(<span class=\"string\">&quot;~&quot;</span>, list);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// priting the string</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;String with tilde delimiter: &quot;</span>+stringFromList);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// delimiting with pipe | symbol.</span></span><br><span class=\"line\">        String stringPipe = String.join(<span class=\"string\">&quot;|&quot;</span>, list);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;String with pipe delimiter : &quot;</span>+stringPipe);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：</span></span><br><span class=\"line\"><span class=\"comment\">//  String with tilde delimiter: One~Two~Three~Four~Five</span></span><br><span class=\"line\"><span class=\"comment\">//  String with pipe delimiter : One|Two|Three|Four|Five</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-collectorsjoining\"><a class=\"markdownIt-Anchor\" href=\"#3-collectorsjoining\"></a> 3. Collectors.joining()</h3>\n<p>Collectors.join()方法来自 java 8 stream api。Collctors.joining()方法将分隔符、前缀和后缀作为参数。此方法将列表转换为具有给定分隔符、前缀和后缀的字符串。</p>\n<p>查看以下有关使用不同分隔符的 join() 方法的示例。但是，String.join() 方法不提供前缀和后缀选项。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListToStringUsingString_JoinExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// creating a list with strings.</span></span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;One&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Two&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Three&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Four&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Five&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// using java 8 Collectors.joining with delimiter, prefix and suffix</span></span><br><span class=\"line\">        String joiningString = list.stream().collect(Collectors.joining(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;&#123;&quot;</span>, <span class=\"string\">&quot;&#125;&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Collectors.joining string : &quot;</span>+joiningString);</span><br><span class=\"line\">        String joiningString3 = list.stream().collect(Collectors.joining(<span class=\"string\">&quot;@&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Collectors.joining string with @ separator : &quot;</span>+joiningString3);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：</span></span><br><span class=\"line\"><span class=\"comment\">//Collectors.joining string : &#123;One-Two-Three-Four-Five&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//Collectors.joining string with @ separator : One@Two@Three@Four@Five</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-apache-commons-stringutilsjoin\"><a class=\"markdownIt-Anchor\" href=\"#4-apache-commons-stringutilsjoin\"></a> 4. Apache Commons StringUtils.join()</h3>\n<p>使用来自 apache commons 包的外部库。该库有一个方法StringUtils.join() ，它采用类似于 String.join() 方法的列表和分隔符</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListToStringUsingStringUtils_JoinExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// creating a list with strings.</span></span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;One&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Two&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Three&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Four&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Five&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// using java 8 Collectors.joining with delimiter, prefix and suffix</span></span><br><span class=\"line\">        String joiningString = StringUtils.join(list, <span class=\"string\">&quot;^&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;StringUtils.join string with ^ delimiter : &quot;</span>+joiningString);</span><br><span class=\"line\">        </span><br><span class=\"line\">        String joiningString3 = StringUtils.join(list, <span class=\"string\">&quot;$&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;StringUtils.join string with @ separator : &quot;</span>+joiningString3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：</span></span><br><span class=\"line\"><span class=\"comment\">//  StringUtils.join string with ^ delimiter : One^Two^Three^Four^Five</span></span><br><span class=\"line\"><span class=\"comment\">//  StringUtils.join string with @ separator : One$Two$Three$Four$Five</span></span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"1-tostring-方法\"><a class=\"markdownIt-Anchor\" href=\"#1-tostring-方法\"></a> 1. toString() 方法</h3>\n<p>List.toString()是最简单的，但它在开头和结尾添加方括号，每个字符串用逗号分隔符分隔。<br>\n缺点是我们不能用另一个分隔符替换逗号，也不能去掉方括号</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListToStringUsingToStringExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// creating a list with strings.</span></span><br><span class=\"line\">    List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;One&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;Two&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;Three&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;Four&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;Five&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// converting List&lt;String&gt; to String using toString() method</span></span><br><span class=\"line\">    String stringFromList = list.toString();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// priting the string</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;String : &quot;</span>+stringFromList);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：String : [One, Two, Three, Four, Five]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-java-8-stringjoin\"><a class=\"markdownIt-Anchor\" href=\"#2-java-8-stringjoin\"></a> 2. Java 8 String.join()</h3>\n<p>java 8 String添加了一个特殊的方法String.join()以将集合转换为具有给定分隔符的字符串</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListToStringUsingString_JoinExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// creating a list with strings.</span></span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;One&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Two&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Three&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Four&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Five&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// converting List&lt;String&gt; to String using toString() method</span></span><br><span class=\"line\">        String stringFromList = String.join(<span class=\"string\">&quot;~&quot;</span>, list);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// priting the string</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;String with tilde delimiter: &quot;</span>+stringFromList);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// delimiting with pipe | symbol.</span></span><br><span class=\"line\">        String stringPipe = String.join(<span class=\"string\">&quot;|&quot;</span>, list);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;String with pipe delimiter : &quot;</span>+stringPipe);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：</span></span><br><span class=\"line\"><span class=\"comment\">//  String with tilde delimiter: One~Two~Three~Four~Five</span></span><br><span class=\"line\"><span class=\"comment\">//  String with pipe delimiter : One|Two|Three|Four|Five</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-collectorsjoining\"><a class=\"markdownIt-Anchor\" href=\"#3-collectorsjoining\"></a> 3. Collectors.joining()</h3>\n<p>Collectors.join()方法来自 java 8 stream api。Collctors.joining()方法将分隔符、前缀和后缀作为参数。此方法将列表转换为具有给定分隔符、前缀和后缀的字符串。</p>\n<p>查看以下有关使用不同分隔符的 join() 方法的示例。但是，String.join() 方法不提供前缀和后缀选项。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListToStringUsingString_JoinExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// creating a list with strings.</span></span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;One&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Two&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Three&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Four&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Five&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// using java 8 Collectors.joining with delimiter, prefix and suffix</span></span><br><span class=\"line\">        String joiningString = list.stream().collect(Collectors.joining(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;&#123;&quot;</span>, <span class=\"string\">&quot;&#125;&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Collectors.joining string : &quot;</span>+joiningString);</span><br><span class=\"line\">        String joiningString3 = list.stream().collect(Collectors.joining(<span class=\"string\">&quot;@&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Collectors.joining string with @ separator : &quot;</span>+joiningString3);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：</span></span><br><span class=\"line\"><span class=\"comment\">//Collectors.joining string : &#123;One-Two-Three-Four-Five&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//Collectors.joining string with @ separator : One@Two@Three@Four@Five</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-apache-commons-stringutilsjoin\"><a class=\"markdownIt-Anchor\" href=\"#4-apache-commons-stringutilsjoin\"></a> 4. Apache Commons StringUtils.join()</h3>\n<p>使用来自 apache commons 包的外部库。该库有一个方法StringUtils.join() ，它采用类似于 String.join() 方法的列表和分隔符</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListToStringUsingStringUtils_JoinExample</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// creating a list with strings.</span></span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;One&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Two&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Three&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Four&quot;</span>,</span><br><span class=\"line\">                          <span class=\"string\">&quot;Five&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// using java 8 Collectors.joining with delimiter, prefix and suffix</span></span><br><span class=\"line\">        String joiningString = StringUtils.join(list, <span class=\"string\">&quot;^&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;StringUtils.join string with ^ delimiter : &quot;</span>+joiningString);</span><br><span class=\"line\">        </span><br><span class=\"line\">        String joiningString3 = StringUtils.join(list, <span class=\"string\">&quot;$&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// printing</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;StringUtils.join string with @ separator : &quot;</span>+joiningString3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：</span></span><br><span class=\"line\"><span class=\"comment\">//  StringUtils.join string with ^ delimiter : One^Two^Three^Four^Five</span></span><br><span class=\"line\"><span class=\"comment\">//  StringUtils.join string with @ separator : One$Two$Three$Four$Five</span></span><br></pre></td></tr></table></figure>"},{"title":"linux关机命令","comments":1,"abbrlink":2292,"date":"2021-10-02T03:39:17.000Z","translate_title":"Linux-shutdown-command","_content":"\n### 1. shutdown命令\n\nshutdown会给系统计划一个时间关机。它可以被用于停止、关机、重启机器。\n你可以指定一个时间字符串（通常是 now或者用hh:mm 指定小时/分钟）作为第一个参数。\n\nshutdown命令示例：\n```shell\nshutdown\n\nshutdown now  #立即关机\n\nshutdown 13:20  # 下午13：20关机\n\nshutdown -p now  ### 关闭机器\n\nshutdown -H now  ### 停止机器      \n\nshutdown -r09:35 ### 在 09:35am 重启机器\n\nshutdown -c  ## 取消关机\n```\n\n### 2. halt 命令\n\nhalt通知硬件来停止所有的 CPU 功能，但是仍然保持通电。你可以用它使系统处于低层维护状态。\n注意在有些情况会它会完全关闭系统。\n\nhalt 命令示例：\n```shell\nhalt             ### 停止机器\n\nhalt -p          ### 关闭机器\n\nhalt --reboot    ### 重启机器\n```\n\n### 3.poweroff 命令\npoweroff会发送一个 ACPI 信号来通知系统关机\n\n```shell\npoweroff           ### 关闭机器\n\npoweroff --halt    ### 停止机器\n\npoweroff --reboot  ### 重启机器\n```\n\n### 4.reboot 命令\n\nreboot 通知系统重启。\n```shell\nreboot           ### 重启机器\n\nreboot --halt    ### 停止机器\n\nreboot -p        ### 关闭机器\n```\n\n### 5. init 命令\n一. init是Linux系统操作中不可缺少的程序之一。\n所谓的init进程，它是一个由内核启动的用户级进程。\n内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。所以,init始终是第一个进程（其进程编号始终为1）。\n内核会在过去曾使用过init的几个地方查找它，它的正确位置（对Linux系统来说）是/sbin/init。如果内核找不到init，它就会试着运行/bin/sh，如果运行失败，系统的启动也会失败。\n\n二. init一共分为7个级别，这7个级别的所代表的含义如下\n\n0：停机或者关机（千万不能将initdefault设置为0）\n\n1：单用户模式，只root用户进行维护\n\n2：多用户模式，不能使用NFS(Net File System)\n\n3：完全多用户模式（标准的运行级别）\n\n4：安全模式\n\n5：图形化（即图形界面）\n\n6：重启（千万不要把initdefault设置为6）\n","source":"_posts/2021/10/shutdown.md","raw":"---\ntitle: linux关机命令\ncomments: true\ntags: shutdown\ncategories: linux\nabbrlink: 2292\ndate: 2021-10-02 11:39:17\ntranslate_title: Linux-shutdown-command\n---\n\n### 1. shutdown命令\n\nshutdown会给系统计划一个时间关机。它可以被用于停止、关机、重启机器。\n你可以指定一个时间字符串（通常是 now或者用hh:mm 指定小时/分钟）作为第一个参数。\n\nshutdown命令示例：\n```shell\nshutdown\n\nshutdown now  #立即关机\n\nshutdown 13:20  # 下午13：20关机\n\nshutdown -p now  ### 关闭机器\n\nshutdown -H now  ### 停止机器      \n\nshutdown -r09:35 ### 在 09:35am 重启机器\n\nshutdown -c  ## 取消关机\n```\n\n### 2. halt 命令\n\nhalt通知硬件来停止所有的 CPU 功能，但是仍然保持通电。你可以用它使系统处于低层维护状态。\n注意在有些情况会它会完全关闭系统。\n\nhalt 命令示例：\n```shell\nhalt             ### 停止机器\n\nhalt -p          ### 关闭机器\n\nhalt --reboot    ### 重启机器\n```\n\n### 3.poweroff 命令\npoweroff会发送一个 ACPI 信号来通知系统关机\n\n```shell\npoweroff           ### 关闭机器\n\npoweroff --halt    ### 停止机器\n\npoweroff --reboot  ### 重启机器\n```\n\n### 4.reboot 命令\n\nreboot 通知系统重启。\n```shell\nreboot           ### 重启机器\n\nreboot --halt    ### 停止机器\n\nreboot -p        ### 关闭机器\n```\n\n### 5. init 命令\n一. init是Linux系统操作中不可缺少的程序之一。\n所谓的init进程，它是一个由内核启动的用户级进程。\n内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。所以,init始终是第一个进程（其进程编号始终为1）。\n内核会在过去曾使用过init的几个地方查找它，它的正确位置（对Linux系统来说）是/sbin/init。如果内核找不到init，它就会试着运行/bin/sh，如果运行失败，系统的启动也会失败。\n\n二. init一共分为7个级别，这7个级别的所代表的含义如下\n\n0：停机或者关机（千万不能将initdefault设置为0）\n\n1：单用户模式，只root用户进行维护\n\n2：多用户模式，不能使用NFS(Net File System)\n\n3：完全多用户模式（标准的运行级别）\n\n4：安全模式\n\n5：图形化（即图形界面）\n\n6：重启（千万不要把initdefault设置为6）\n","slug":"shutdown","published":1,"updated":"2022-03-27T14:06:03.482Z","layout":"post","photos":[],"link":"","_id":"cl235zcwx004qwjpj1ellcgtn","content":"<h3 id=\"1-shutdown命令\"><a class=\"markdownIt-Anchor\" href=\"#1-shutdown命令\"></a> 1. shutdown命令</h3>\n<p>shutdown会给系统计划一个时间关机。它可以被用于停止、关机、重启机器。<br>\n你可以指定一个时间字符串（通常是 now或者用hh:mm 指定小时/分钟）作为第一个参数。</p>\n<p>shutdown命令示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shutdown</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown now  #立即关机</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown 13:20  # 下午13：20关机</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown -p now  ### 关闭机器</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown -H now  ### 停止机器      </span><br><span class=\"line\"></span><br><span class=\"line\">shutdown -r09:35 ### 在 09:35am 重启机器</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown -c  ## 取消关机</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-halt-命令\"><a class=\"markdownIt-Anchor\" href=\"#2-halt-命令\"></a> 2. halt 命令</h3>\n<p>halt通知硬件来停止所有的 CPU 功能，但是仍然保持通电。你可以用它使系统处于低层维护状态。<br>\n注意在有些情况会它会完全关闭系统。</p>\n<p>halt 命令示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">halt             ### 停止机器</span><br><span class=\"line\"></span><br><span class=\"line\">halt -p          ### 关闭机器</span><br><span class=\"line\"></span><br><span class=\"line\">halt --reboot    ### 重启机器</span><br></pre></td></tr></table></figure>\n<h3 id=\"3poweroff-命令\"><a class=\"markdownIt-Anchor\" href=\"#3poweroff-命令\"></a> 3.poweroff 命令</h3>\n<p>poweroff会发送一个 ACPI 信号来通知系统关机</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poweroff           ### 关闭机器</span><br><span class=\"line\"></span><br><span class=\"line\">poweroff --halt    ### 停止机器</span><br><span class=\"line\"></span><br><span class=\"line\">poweroff --reboot  ### 重启机器</span><br></pre></td></tr></table></figure>\n<h3 id=\"4reboot-命令\"><a class=\"markdownIt-Anchor\" href=\"#4reboot-命令\"></a> 4.reboot 命令</h3>\n<p>reboot 通知系统重启。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot           ### 重启机器</span><br><span class=\"line\"></span><br><span class=\"line\">reboot --halt    ### 停止机器</span><br><span class=\"line\"></span><br><span class=\"line\">reboot -p        ### 关闭机器</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-init-命令\"><a class=\"markdownIt-Anchor\" href=\"#5-init-命令\"></a> 5. init 命令</h3>\n<p>一. init是Linux系统操作中不可缺少的程序之一。<br>\n所谓的init进程，它是一个由内核启动的用户级进程。<br>\n内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。所以,init始终是第一个进程（其进程编号始终为1）。<br>\n内核会在过去曾使用过init的几个地方查找它，它的正确位置（对Linux系统来说）是/sbin/init。如果内核找不到init，它就会试着运行/bin/sh，如果运行失败，系统的启动也会失败。</p>\n<p>二. init一共分为7个级别，这7个级别的所代表的含义如下</p>\n<p>0：停机或者关机（千万不能将initdefault设置为0）</p>\n<p>1：单用户模式，只root用户进行维护</p>\n<p>2：多用户模式，不能使用NFS(Net File System)</p>\n<p>3：完全多用户模式（标准的运行级别）</p>\n<p>4：安全模式</p>\n<p>5：图形化（即图形界面）</p>\n<p>6：重启（千万不要把initdefault设置为6）</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"1-shutdown命令\"><a class=\"markdownIt-Anchor\" href=\"#1-shutdown命令\"></a> 1. shutdown命令</h3>\n<p>shutdown会给系统计划一个时间关机。它可以被用于停止、关机、重启机器。<br>\n你可以指定一个时间字符串（通常是 now或者用hh:mm 指定小时/分钟）作为第一个参数。</p>\n<p>shutdown命令示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shutdown</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown now  #立即关机</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown 13:20  # 下午13：20关机</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown -p now  ### 关闭机器</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown -H now  ### 停止机器      </span><br><span class=\"line\"></span><br><span class=\"line\">shutdown -r09:35 ### 在 09:35am 重启机器</span><br><span class=\"line\"></span><br><span class=\"line\">shutdown -c  ## 取消关机</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-halt-命令\"><a class=\"markdownIt-Anchor\" href=\"#2-halt-命令\"></a> 2. halt 命令</h3>\n<p>halt通知硬件来停止所有的 CPU 功能，但是仍然保持通电。你可以用它使系统处于低层维护状态。<br>\n注意在有些情况会它会完全关闭系统。</p>\n<p>halt 命令示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">halt             ### 停止机器</span><br><span class=\"line\"></span><br><span class=\"line\">halt -p          ### 关闭机器</span><br><span class=\"line\"></span><br><span class=\"line\">halt --reboot    ### 重启机器</span><br></pre></td></tr></table></figure>\n<h3 id=\"3poweroff-命令\"><a class=\"markdownIt-Anchor\" href=\"#3poweroff-命令\"></a> 3.poweroff 命令</h3>\n<p>poweroff会发送一个 ACPI 信号来通知系统关机</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poweroff           ### 关闭机器</span><br><span class=\"line\"></span><br><span class=\"line\">poweroff --halt    ### 停止机器</span><br><span class=\"line\"></span><br><span class=\"line\">poweroff --reboot  ### 重启机器</span><br></pre></td></tr></table></figure>\n<h3 id=\"4reboot-命令\"><a class=\"markdownIt-Anchor\" href=\"#4reboot-命令\"></a> 4.reboot 命令</h3>\n<p>reboot 通知系统重启。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot           ### 重启机器</span><br><span class=\"line\"></span><br><span class=\"line\">reboot --halt    ### 停止机器</span><br><span class=\"line\"></span><br><span class=\"line\">reboot -p        ### 关闭机器</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-init-命令\"><a class=\"markdownIt-Anchor\" href=\"#5-init-命令\"></a> 5. init 命令</h3>\n<p>一. init是Linux系统操作中不可缺少的程序之一。<br>\n所谓的init进程，它是一个由内核启动的用户级进程。<br>\n内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。所以,init始终是第一个进程（其进程编号始终为1）。<br>\n内核会在过去曾使用过init的几个地方查找它，它的正确位置（对Linux系统来说）是/sbin/init。如果内核找不到init，它就会试着运行/bin/sh，如果运行失败，系统的启动也会失败。</p>\n<p>二. init一共分为7个级别，这7个级别的所代表的含义如下</p>\n<p>0：停机或者关机（千万不能将initdefault设置为0）</p>\n<p>1：单用户模式，只root用户进行维护</p>\n<p>2：多用户模式，不能使用NFS(Net File System)</p>\n<p>3：完全多用户模式（标准的运行级别）</p>\n<p>4：安全模式</p>\n<p>5：图形化（即图形界面）</p>\n<p>6：重启（千万不要把initdefault设置为6）</p>\n"},{"title":"安装Centos系统以及配置IP","comments":1,"abbrlink":23533,"date":"2021-10-01T08:47:11.000Z","translate_title":"installing-centOS-system-and-configuring-IP","_content":"\n## 1. 系统安装\n1. 安装\n    ![](Installing-CentOS-system/1.png)\n   \n2. 选择语言\n    ![](Installing-CentOS-system/2.png)\n\n3. 设置时区以及软件安装\n    ![](Installing-CentOS-system/3.png)\n   \n4. 选择GNOME桌面，开发工具。然后点击左上角的完成\n   ![](Installing-CentOS-system/4.png)\n\n5. 配置分区，选址本地标准磁盘，并且在分区中勾选\"我要配置分区\",\"我想让额外空间可用\"；初学者可以使用自动配置分区\n   ![](Installing-CentOS-system/5.png)\n   \n6. 开始安装\n   ![](Installing-CentOS-system/6.png)\n\n7. 设置Root账户\n   ![](Installing-CentOS-system/7.png) \n   \n8. 等待安装成功,安装成功后会提示重启；\n   ![](Installing-CentOS-system/8.png) \n   \n\n## 2. 永久关闭防火墙\n\n```shell\n一、下面是red hat/CentOs7关闭防火墙的命令!\n#1:查看防火状态\nsystemctl status firewalld\nservice iptables status\n\n#2:暂时关闭防火墙\nsystemctl stop firewalld\nservice iptables stop\n\n#3:永久关闭防火墙\nsystemctl disable firewalld\nchkconfig iptables off\n\n#4:重启防火墙\n\nsystemctl enable firewalld\nservice iptables restart\n```\n## 3. 配置SELinux\nSELinux是Linux 内核中提供的强制访问控制系统。selinux有disabled、permissive、enforcing 三种选择：\n- disabled ：不启用控制系统。\n- permissive：开启控制系统，但是处于警告模式。即使你违反了策略的话它让你继续操作，但是把你的违反的内容记录下来。\n- Enforcing：开启控制系统，处于强制状态。一旦违反了策略，就无法继续操作下去\n\n使用命令：\n```shell\ncd /etc/sysconfig/\nvim selinux\n```\n![](Installing-CentOS-system/3-1.png) \n\n## 4.修改ip配置文件\n1. 进入文件目录\n    ```shell\n    cd /etc/sysconfig/network-scripts/   #进入配置文件\n    ```\n    ![](Installing-CentOS-system/4-1.png) \n\n2. 写入配置信息并保存退出\n    ```shell\n    vim ifcfg-ens33 #编辑配置文件ifcfg-ens33\n    ```\n    如果要设置固定IP的话，常见设置属性有：BOOTPROTO、ONBOOT、IPADDR、NETMASK、GATEWAY\n    ```yaml\n    #以下为配置文件的内容\n    TYPE=\"Ethernet\"\t\t#网卡类型（通常是Ethemet以太网）\n    PROXY_METHOD=\"none\"\t#代理方式：为关闭状态\n    BROWSER_ONLY=\"no\"\t#只是浏览器：否\n    BOOTPROTO=\"static\"\t#网卡的引导协议【static：静态IP(指定静态后IP地址就固定了,不建议采用动态分配)  dhcp：动态IP   none：不指定，不指定容易出现各种各样的网络受限】\n    DEFROUTE=\"yes\"\t\t#默认路由\n    IPV4_FAILURE_FATAL=\"no\"\t\t#是否开启IPV4致命错误检测\n    IPV6INIT=\"yes\"\t\t#IPV6是否自动初始化：是（现在还未用到IPV6，不会有任何影响）\n    IPV6_AUTOCONF=\"yes\"\t#IPV6是否自动配置：是（现在还未用到IPV6，不会有任何影响）\n    IPV6_DEFROUTE=\"yes\"\t#IPV6是否可以为默认路由：是（现在还未用到IPV6，不会有任何影响）\n    IPV6_FAILURE_FATAL=\"no\"\t\t#是否开启IPV6致命错误检测\n    IPV6_ADDR_GEN_MODE=\"stable-privacy\"\t#IPV6地址生成模型\n    NAME=\"ens33\"\t\t#网卡物理设备名称\n    UUID=\"ab60d501-535b-49f5-a76b-3336a4120f64\" #通用唯一识别码，每一个网卡都会有，不能重复，否则两台linux机器只有一台可上网,可不写\n    DEVICE=\"ens33\"\t\t#网卡设备名称，必须和‘NAME’值一样\n    ONBOOT=\"yes\"\t\t#是否开机启动(如果yes则开机后自动加载使用当前配置文件)，要想网卡开机就启动或通过 `systemctl restart network`控制网卡,必须设置为 `yes`\n    IPADDR=192.168.1.111\t\t# 本机IP 设置固定IP 对应上面的BOOTPROTO\n    NETMASK=255.255.255.0\t\t#子网掩码 ,可不写\n    GATEWAY=192.168.137.2\t\t#默认网关 ,可不写\n    DNS1=8.8.8.8 # 可不写\n    DNS2=8.8.8.5 # 可不写\n    ZONE=public # 可不写\n    ```\n\n3. 重启网络服务\n    ```shell\n    service network restart  #重启网卡\n    ```\n    ![](Installing-CentOS-system/4-2.png) \n\n4. 查看IP\n    ```shell\n    ip addr\n    ```\n    ![](Installing-CentOS-system/4-3.png) \n\n5. 重启系统\n    ```shell\n    reboot\n    ```\n\n\n\n   \n\n   \n\n\n","source":"_posts/2021/10/Installing-CentOS-system.md","raw":"---\ntitle: 安装Centos系统以及配置IP\ncomments: true\ntags: linux\ncategories: linux\nabbrlink: 23533\ndate: 2021-10-01 16:47:11\ntranslate_title: installing-centOS-system-and-configuring-IP\n---\n\n## 1. 系统安装\n1. 安装\n    ![](Installing-CentOS-system/1.png)\n   \n2. 选择语言\n    ![](Installing-CentOS-system/2.png)\n\n3. 设置时区以及软件安装\n    ![](Installing-CentOS-system/3.png)\n   \n4. 选择GNOME桌面，开发工具。然后点击左上角的完成\n   ![](Installing-CentOS-system/4.png)\n\n5. 配置分区，选址本地标准磁盘，并且在分区中勾选\"我要配置分区\",\"我想让额外空间可用\"；初学者可以使用自动配置分区\n   ![](Installing-CentOS-system/5.png)\n   \n6. 开始安装\n   ![](Installing-CentOS-system/6.png)\n\n7. 设置Root账户\n   ![](Installing-CentOS-system/7.png) \n   \n8. 等待安装成功,安装成功后会提示重启；\n   ![](Installing-CentOS-system/8.png) \n   \n\n## 2. 永久关闭防火墙\n\n```shell\n一、下面是red hat/CentOs7关闭防火墙的命令!\n#1:查看防火状态\nsystemctl status firewalld\nservice iptables status\n\n#2:暂时关闭防火墙\nsystemctl stop firewalld\nservice iptables stop\n\n#3:永久关闭防火墙\nsystemctl disable firewalld\nchkconfig iptables off\n\n#4:重启防火墙\n\nsystemctl enable firewalld\nservice iptables restart\n```\n## 3. 配置SELinux\nSELinux是Linux 内核中提供的强制访问控制系统。selinux有disabled、permissive、enforcing 三种选择：\n- disabled ：不启用控制系统。\n- permissive：开启控制系统，但是处于警告模式。即使你违反了策略的话它让你继续操作，但是把你的违反的内容记录下来。\n- Enforcing：开启控制系统，处于强制状态。一旦违反了策略，就无法继续操作下去\n\n使用命令：\n```shell\ncd /etc/sysconfig/\nvim selinux\n```\n![](Installing-CentOS-system/3-1.png) \n\n## 4.修改ip配置文件\n1. 进入文件目录\n    ```shell\n    cd /etc/sysconfig/network-scripts/   #进入配置文件\n    ```\n    ![](Installing-CentOS-system/4-1.png) \n\n2. 写入配置信息并保存退出\n    ```shell\n    vim ifcfg-ens33 #编辑配置文件ifcfg-ens33\n    ```\n    如果要设置固定IP的话，常见设置属性有：BOOTPROTO、ONBOOT、IPADDR、NETMASK、GATEWAY\n    ```yaml\n    #以下为配置文件的内容\n    TYPE=\"Ethernet\"\t\t#网卡类型（通常是Ethemet以太网）\n    PROXY_METHOD=\"none\"\t#代理方式：为关闭状态\n    BROWSER_ONLY=\"no\"\t#只是浏览器：否\n    BOOTPROTO=\"static\"\t#网卡的引导协议【static：静态IP(指定静态后IP地址就固定了,不建议采用动态分配)  dhcp：动态IP   none：不指定，不指定容易出现各种各样的网络受限】\n    DEFROUTE=\"yes\"\t\t#默认路由\n    IPV4_FAILURE_FATAL=\"no\"\t\t#是否开启IPV4致命错误检测\n    IPV6INIT=\"yes\"\t\t#IPV6是否自动初始化：是（现在还未用到IPV6，不会有任何影响）\n    IPV6_AUTOCONF=\"yes\"\t#IPV6是否自动配置：是（现在还未用到IPV6，不会有任何影响）\n    IPV6_DEFROUTE=\"yes\"\t#IPV6是否可以为默认路由：是（现在还未用到IPV6，不会有任何影响）\n    IPV6_FAILURE_FATAL=\"no\"\t\t#是否开启IPV6致命错误检测\n    IPV6_ADDR_GEN_MODE=\"stable-privacy\"\t#IPV6地址生成模型\n    NAME=\"ens33\"\t\t#网卡物理设备名称\n    UUID=\"ab60d501-535b-49f5-a76b-3336a4120f64\" #通用唯一识别码，每一个网卡都会有，不能重复，否则两台linux机器只有一台可上网,可不写\n    DEVICE=\"ens33\"\t\t#网卡设备名称，必须和‘NAME’值一样\n    ONBOOT=\"yes\"\t\t#是否开机启动(如果yes则开机后自动加载使用当前配置文件)，要想网卡开机就启动或通过 `systemctl restart network`控制网卡,必须设置为 `yes`\n    IPADDR=192.168.1.111\t\t# 本机IP 设置固定IP 对应上面的BOOTPROTO\n    NETMASK=255.255.255.0\t\t#子网掩码 ,可不写\n    GATEWAY=192.168.137.2\t\t#默认网关 ,可不写\n    DNS1=8.8.8.8 # 可不写\n    DNS2=8.8.8.5 # 可不写\n    ZONE=public # 可不写\n    ```\n\n3. 重启网络服务\n    ```shell\n    service network restart  #重启网卡\n    ```\n    ![](Installing-CentOS-system/4-2.png) \n\n4. 查看IP\n    ```shell\n    ip addr\n    ```\n    ![](Installing-CentOS-system/4-3.png) \n\n5. 重启系统\n    ```shell\n    reboot\n    ```\n\n\n\n   \n\n   \n\n\n","slug":"Installing-CentOS-system","published":1,"updated":"2022-03-29T06:26:02.010Z","layout":"post","photos":[],"link":"","_id":"cl235zcx6005rwjpjhthj5c4o","content":"<h2 id=\"1-系统安装\"><a class=\"markdownIt-Anchor\" href=\"#1-系统安装\"></a> 1. 系统安装</h2>\n<ol>\n<li>\n<p>安装<br>\n<img src=\"/Installing-CentOS-system/1.png\" alt></p>\n</li>\n<li>\n<p>选择语言<br>\n<img src=\"/Installing-CentOS-system/2.png\" alt></p>\n</li>\n<li>\n<p>设置时区以及软件安装<br>\n<img src=\"/Installing-CentOS-system/3.png\" alt></p>\n</li>\n<li>\n<p>选择GNOME桌面，开发工具。然后点击左上角的完成<br>\n<img src=\"/Installing-CentOS-system/4.png\" alt></p>\n</li>\n<li>\n<p>配置分区，选址本地标准磁盘，并且在分区中勾选&quot;我要配置分区&quot;,“我想让额外空间可用”；初学者可以使用自动配置分区<br>\n<img src=\"/Installing-CentOS-system/5.png\" alt></p>\n</li>\n<li>\n<p>开始安装<br>\n<img src=\"/Installing-CentOS-system/6.png\" alt></p>\n</li>\n<li>\n<p>设置Root账户<br>\n<img src=\"/Installing-CentOS-system/7.png\" alt></p>\n</li>\n<li>\n<p>等待安装成功,安装成功后会提示重启；<br>\n<img src=\"/Installing-CentOS-system/8.png\" alt></p>\n</li>\n</ol>\n<h2 id=\"2-永久关闭防火墙\"><a class=\"markdownIt-Anchor\" href=\"#2-永久关闭防火墙\"></a> 2. 永久关闭防火墙</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一、下面是red hat/CentOs7关闭防火墙的命令!</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1:查看防火状态</span></span><br><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\">service iptables status</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2:暂时关闭防火墙</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">service iptables stop</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3:永久关闭防火墙</span></span><br><span class=\"line\">systemctl disable firewalld</span><br><span class=\"line\">chkconfig iptables off</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">4:重启防火墙</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl enable firewalld</span><br><span class=\"line\">service iptables restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-配置selinux\"><a class=\"markdownIt-Anchor\" href=\"#3-配置selinux\"></a> 3. 配置SELinux</h2>\n<p>SELinux是Linux 内核中提供的强制访问控制系统。selinux有disabled、permissive、enforcing 三种选择：</p>\n<ul>\n<li>disabled ：不启用控制系统。</li>\n<li>permissive：开启控制系统，但是处于警告模式。即使你违反了策略的话它让你继续操作，但是把你的违反的内容记录下来。</li>\n<li>Enforcing：开启控制系统，处于强制状态。一旦违反了策略，就无法继续操作下去</li>\n</ul>\n<p>使用命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/sysconfig/</span><br><span class=\"line\">vim selinux</span><br></pre></td></tr></table></figure>\n<p><img src=\"/Installing-CentOS-system/3-1.png\" alt></p>\n<h2 id=\"4修改ip配置文件\"><a class=\"markdownIt-Anchor\" href=\"#4修改ip配置文件\"></a> 4.修改ip配置文件</h2>\n<ol>\n<li>\n<p>进入文件目录</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/sysconfig/network-scripts/   #进入配置文件</span><br></pre></td></tr></table></figure>\n<p><img src=\"/Installing-CentOS-system/4-1.png\" alt></p>\n</li>\n<li>\n<p>写入配置信息并保存退出</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ifcfg-ens33 #编辑配置文件ifcfg-ens33</span><br></pre></td></tr></table></figure>\n<p>如果要设置固定IP的话，常见设置属性有：BOOTPROTO、ONBOOT、IPADDR、NETMASK、GATEWAY</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#以下为配置文件的内容</span></span><br><span class=\"line\"><span class=\"string\">TYPE=&quot;Ethernet&quot;</span>\t\t<span class=\"comment\">#网卡类型（通常是Ethemet以太网）</span></span><br><span class=\"line\"><span class=\"string\">PROXY_METHOD=&quot;none&quot;</span>\t<span class=\"comment\">#代理方式：为关闭状态</span></span><br><span class=\"line\"><span class=\"string\">BROWSER_ONLY=&quot;no&quot;</span>\t<span class=\"comment\">#只是浏览器：否</span></span><br><span class=\"line\"><span class=\"string\">BOOTPROTO=&quot;static&quot;</span>\t<span class=\"comment\">#网卡的引导协议【static：静态IP(指定静态后IP地址就固定了,不建议采用动态分配)  dhcp：动态IP   none：不指定，不指定容易出现各种各样的网络受限】</span></span><br><span class=\"line\"><span class=\"string\">DEFROUTE=&quot;yes&quot;</span>\t\t<span class=\"comment\">#默认路由</span></span><br><span class=\"line\"><span class=\"string\">IPV4_FAILURE_FATAL=&quot;no&quot;</span>\t\t<span class=\"comment\">#是否开启IPV4致命错误检测</span></span><br><span class=\"line\"><span class=\"string\">IPV6INIT=&quot;yes&quot;</span>\t\t<span class=\"comment\">#IPV6是否自动初始化：是（现在还未用到IPV6，不会有任何影响）</span></span><br><span class=\"line\"><span class=\"string\">IPV6_AUTOCONF=&quot;yes&quot;</span>\t<span class=\"comment\">#IPV6是否自动配置：是（现在还未用到IPV6，不会有任何影响）</span></span><br><span class=\"line\"><span class=\"string\">IPV6_DEFROUTE=&quot;yes&quot;</span>\t<span class=\"comment\">#IPV6是否可以为默认路由：是（现在还未用到IPV6，不会有任何影响）</span></span><br><span class=\"line\"><span class=\"string\">IPV6_FAILURE_FATAL=&quot;no&quot;</span>\t\t<span class=\"comment\">#是否开启IPV6致命错误检测</span></span><br><span class=\"line\"><span class=\"string\">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span>\t<span class=\"comment\">#IPV6地址生成模型</span></span><br><span class=\"line\"><span class=\"string\">NAME=&quot;ens33&quot;</span>\t\t<span class=\"comment\">#网卡物理设备名称</span></span><br><span class=\"line\"><span class=\"string\">UUID=&quot;ab60d501-535b-49f5-a76b-3336a4120f64&quot;</span> <span class=\"comment\">#通用唯一识别码，每一个网卡都会有，不能重复，否则两台linux机器只有一台可上网,可不写</span></span><br><span class=\"line\"><span class=\"string\">DEVICE=&quot;ens33&quot;</span>\t\t<span class=\"comment\">#网卡设备名称，必须和‘NAME’值一样</span></span><br><span class=\"line\"><span class=\"string\">ONBOOT=&quot;yes&quot;</span>\t\t<span class=\"comment\">#是否开机启动(如果yes则开机后自动加载使用当前配置文件)，要想网卡开机就启动或通过 `systemctl restart network`控制网卡,必须设置为 `yes`</span></span><br><span class=\"line\"><span class=\"string\">IPADDR=192.168.1.111</span>\t\t<span class=\"comment\"># 本机IP 设置固定IP 对应上面的BOOTPROTO</span></span><br><span class=\"line\"><span class=\"string\">NETMASK=255.255.255.0</span>\t\t<span class=\"comment\">#子网掩码 ,可不写</span></span><br><span class=\"line\"><span class=\"string\">GATEWAY=192.168.137.2</span>\t\t<span class=\"comment\">#默认网关 ,可不写</span></span><br><span class=\"line\"><span class=\"string\">DNS1=8.8.8.8</span> <span class=\"comment\"># 可不写</span></span><br><span class=\"line\"><span class=\"string\">DNS2=8.8.8.5</span> <span class=\"comment\"># 可不写</span></span><br><span class=\"line\"><span class=\"string\">ZONE=public</span> <span class=\"comment\"># 可不写</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>重启网络服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service network restart  #重启网卡</span><br></pre></td></tr></table></figure>\n<p><img src=\"/Installing-CentOS-system/4-2.png\" alt></p>\n</li>\n<li>\n<p>查看IP</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr</span><br></pre></td></tr></table></figure>\n<p><img src=\"/Installing-CentOS-system/4-3.png\" alt></p>\n</li>\n<li>\n<p>重启系统</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1-系统安装\"><a class=\"markdownIt-Anchor\" href=\"#1-系统安装\"></a> 1. 系统安装</h2>\n<ol>\n<li>\n<p>安装<br>\n<img src=\"/Installing-CentOS-system/1.png\" alt></p>\n</li>\n<li>\n<p>选择语言<br>\n<img src=\"/Installing-CentOS-system/2.png\" alt></p>\n</li>\n<li>\n<p>设置时区以及软件安装<br>\n<img src=\"/Installing-CentOS-system/3.png\" alt></p>\n</li>\n<li>\n<p>选择GNOME桌面，开发工具。然后点击左上角的完成<br>\n<img src=\"/Installing-CentOS-system/4.png\" alt></p>\n</li>\n<li>\n<p>配置分区，选址本地标准磁盘，并且在分区中勾选&quot;我要配置分区&quot;,“我想让额外空间可用”；初学者可以使用自动配置分区<br>\n<img src=\"/Installing-CentOS-system/5.png\" alt></p>\n</li>\n<li>\n<p>开始安装<br>\n<img src=\"/Installing-CentOS-system/6.png\" alt></p>\n</li>\n<li>\n<p>设置Root账户<br>\n<img src=\"/Installing-CentOS-system/7.png\" alt></p>\n</li>\n<li>\n<p>等待安装成功,安装成功后会提示重启；<br>\n<img src=\"/Installing-CentOS-system/8.png\" alt></p>\n</li>\n</ol>\n<h2 id=\"2-永久关闭防火墙\"><a class=\"markdownIt-Anchor\" href=\"#2-永久关闭防火墙\"></a> 2. 永久关闭防火墙</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一、下面是red hat/CentOs7关闭防火墙的命令!</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1:查看防火状态</span></span><br><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\">service iptables status</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2:暂时关闭防火墙</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">service iptables stop</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3:永久关闭防火墙</span></span><br><span class=\"line\">systemctl disable firewalld</span><br><span class=\"line\">chkconfig iptables off</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">4:重启防火墙</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl enable firewalld</span><br><span class=\"line\">service iptables restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-配置selinux\"><a class=\"markdownIt-Anchor\" href=\"#3-配置selinux\"></a> 3. 配置SELinux</h2>\n<p>SELinux是Linux 内核中提供的强制访问控制系统。selinux有disabled、permissive、enforcing 三种选择：</p>\n<ul>\n<li>disabled ：不启用控制系统。</li>\n<li>permissive：开启控制系统，但是处于警告模式。即使你违反了策略的话它让你继续操作，但是把你的违反的内容记录下来。</li>\n<li>Enforcing：开启控制系统，处于强制状态。一旦违反了策略，就无法继续操作下去</li>\n</ul>\n<p>使用命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/sysconfig/</span><br><span class=\"line\">vim selinux</span><br></pre></td></tr></table></figure>\n<p><img src=\"/Installing-CentOS-system/3-1.png\" alt></p>\n<h2 id=\"4修改ip配置文件\"><a class=\"markdownIt-Anchor\" href=\"#4修改ip配置文件\"></a> 4.修改ip配置文件</h2>\n<ol>\n<li>\n<p>进入文件目录</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/sysconfig/network-scripts/   #进入配置文件</span><br></pre></td></tr></table></figure>\n<p><img src=\"/Installing-CentOS-system/4-1.png\" alt></p>\n</li>\n<li>\n<p>写入配置信息并保存退出</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ifcfg-ens33 #编辑配置文件ifcfg-ens33</span><br></pre></td></tr></table></figure>\n<p>如果要设置固定IP的话，常见设置属性有：BOOTPROTO、ONBOOT、IPADDR、NETMASK、GATEWAY</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#以下为配置文件的内容</span></span><br><span class=\"line\"><span class=\"string\">TYPE=&quot;Ethernet&quot;</span>\t\t<span class=\"comment\">#网卡类型（通常是Ethemet以太网）</span></span><br><span class=\"line\"><span class=\"string\">PROXY_METHOD=&quot;none&quot;</span>\t<span class=\"comment\">#代理方式：为关闭状态</span></span><br><span class=\"line\"><span class=\"string\">BROWSER_ONLY=&quot;no&quot;</span>\t<span class=\"comment\">#只是浏览器：否</span></span><br><span class=\"line\"><span class=\"string\">BOOTPROTO=&quot;static&quot;</span>\t<span class=\"comment\">#网卡的引导协议【static：静态IP(指定静态后IP地址就固定了,不建议采用动态分配)  dhcp：动态IP   none：不指定，不指定容易出现各种各样的网络受限】</span></span><br><span class=\"line\"><span class=\"string\">DEFROUTE=&quot;yes&quot;</span>\t\t<span class=\"comment\">#默认路由</span></span><br><span class=\"line\"><span class=\"string\">IPV4_FAILURE_FATAL=&quot;no&quot;</span>\t\t<span class=\"comment\">#是否开启IPV4致命错误检测</span></span><br><span class=\"line\"><span class=\"string\">IPV6INIT=&quot;yes&quot;</span>\t\t<span class=\"comment\">#IPV6是否自动初始化：是（现在还未用到IPV6，不会有任何影响）</span></span><br><span class=\"line\"><span class=\"string\">IPV6_AUTOCONF=&quot;yes&quot;</span>\t<span class=\"comment\">#IPV6是否自动配置：是（现在还未用到IPV6，不会有任何影响）</span></span><br><span class=\"line\"><span class=\"string\">IPV6_DEFROUTE=&quot;yes&quot;</span>\t<span class=\"comment\">#IPV6是否可以为默认路由：是（现在还未用到IPV6，不会有任何影响）</span></span><br><span class=\"line\"><span class=\"string\">IPV6_FAILURE_FATAL=&quot;no&quot;</span>\t\t<span class=\"comment\">#是否开启IPV6致命错误检测</span></span><br><span class=\"line\"><span class=\"string\">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span>\t<span class=\"comment\">#IPV6地址生成模型</span></span><br><span class=\"line\"><span class=\"string\">NAME=&quot;ens33&quot;</span>\t\t<span class=\"comment\">#网卡物理设备名称</span></span><br><span class=\"line\"><span class=\"string\">UUID=&quot;ab60d501-535b-49f5-a76b-3336a4120f64&quot;</span> <span class=\"comment\">#通用唯一识别码，每一个网卡都会有，不能重复，否则两台linux机器只有一台可上网,可不写</span></span><br><span class=\"line\"><span class=\"string\">DEVICE=&quot;ens33&quot;</span>\t\t<span class=\"comment\">#网卡设备名称，必须和‘NAME’值一样</span></span><br><span class=\"line\"><span class=\"string\">ONBOOT=&quot;yes&quot;</span>\t\t<span class=\"comment\">#是否开机启动(如果yes则开机后自动加载使用当前配置文件)，要想网卡开机就启动或通过 `systemctl restart network`控制网卡,必须设置为 `yes`</span></span><br><span class=\"line\"><span class=\"string\">IPADDR=192.168.1.111</span>\t\t<span class=\"comment\"># 本机IP 设置固定IP 对应上面的BOOTPROTO</span></span><br><span class=\"line\"><span class=\"string\">NETMASK=255.255.255.0</span>\t\t<span class=\"comment\">#子网掩码 ,可不写</span></span><br><span class=\"line\"><span class=\"string\">GATEWAY=192.168.137.2</span>\t\t<span class=\"comment\">#默认网关 ,可不写</span></span><br><span class=\"line\"><span class=\"string\">DNS1=8.8.8.8</span> <span class=\"comment\"># 可不写</span></span><br><span class=\"line\"><span class=\"string\">DNS2=8.8.8.5</span> <span class=\"comment\"># 可不写</span></span><br><span class=\"line\"><span class=\"string\">ZONE=public</span> <span class=\"comment\"># 可不写</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>重启网络服务</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service network restart  #重启网卡</span><br></pre></td></tr></table></figure>\n<p><img src=\"/Installing-CentOS-system/4-2.png\" alt></p>\n</li>\n<li>\n<p>查看IP</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr</span><br></pre></td></tr></table></figure>\n<p><img src=\"/Installing-CentOS-system/4-3.png\" alt></p>\n</li>\n<li>\n<p>重启系统</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"常见的接口测试工具","comments":1,"abbrlink":56669,"date":"2022-04-17T09:10:15.000Z","_content":"## 1. Swagger\nSwagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。\nSwagger 的目标是对 REST API 定义一个标准且和语言无关的接口，可以让人和计算机拥有无须访问源码、文档或网络流量监测就可以发现和理解服务的能力。\n \n静态的swagger跟不上频繁变更的代码，容易出现以下问题\n- “为什么改了这个没告诉我” \n  \n- “实际功能和文档上说的不一样啊”\n\n这样会带来的问题是：\n 1. Swagger，postman，MockJS只能完成软件研发流程中某个环节的功能，造成完成接口设计，文档编写，调试，测试验证等工作需要使用好几个工具；\n 2. 更麻烦的是这些工具数据格式不互通，无法互相导入，造成用Swagger定义和编写完成接口后，在Postman，MockJS，Jmeter等工具还要再去手动填写一遍才能开始工作，增加了无意义的工作量。\n 3. 沟通成本总是被忽略不计，但实际上不仅占据了很大时间，各种沟通不及时、沟通不到位还非常让人心累。\n 4. 老板的需求来得急，老板的需求变得快，各种代码修改和变更难以及时通知和同步到团队成员手中。\n\n## 2. 常见的可视化RestFul风格的服务\n\n- springfox-swagger2\n- springdoc\n- Apifox（接口测试工具，非集成在项目中postman加强升级版）\n\n## 3. 各个工具的使用以及风格\n使用Springboot项目分别集成各个组件，看下具体的实现效果；\n\n### 3.1 springfox-swagger2\n1. 引入依赖\n   ```java\n   <dependency>\n       <groupId>io.springfox</groupId>\n       <artifactId>springfox-swagger2</artifactId>\n       <version>2.10.5</version>\n   </dependency>\n       <dependency>\n        <groupId>io.springfox</groupId>\n        <artifactId>springfox-swagger-ui</artifactId>\n        <version>2.9.2</version>\n    </dependency>\n   ```\n   \n2. 编写配置类\n   - SwaggerConfiguration类\n       ```java    \n        @Configuration\n        @EnableSwagger2WebMvc\n        @EnableKnife4j\n        public class SwaggerConfiguration {\n        \n            @Value(\"${spring.application.name}\")\n            private String applicationName;\n        \n            @Bean(value = \"defaultApi\")\n            public Docket defaultApi2() {\n                //设置处理请求的包，我的controller类都在com.yugb.controller中\n                Predicate<RequestHandler> apiPackage = RequestHandlerSelectors.basePackage(\"com.yugb.controller\");\n        \n                Docket docket = new Docket(DocumentationType.SWAGGER_2)\n                        .apiInfo(new ApiInfoBuilder()\n                                .version(\"1.0\")\n                                .contact(new Contact(\"xiaoyuge\",\"123\", \"12342qq.com\"))\n                                .title(applicationName + \" 文档中心\")\n                                .description(\"<div style='font-size:15px;'>\" + applicationName + \" RESTful APIs</div>\")\n                                .build())\n                        //分组名称\n                        .groupName(\"2.X版本\")\n                        .select()\n                        //这里指定Controller扫描包路径\n                        .apis(apiPackage)\n                        .paths(PathSelectors.any())\n                        .build();\n                return docket;\n            }\n        \n        }\n       ```\n     \n    - SwaggerWebMvcConfigurer 类\n        ```java\n        @Configuration\n        public class SwaggerWebMvcConfigurer implements WebMvcConfigurer {\n            @Override\n            public void addResourceHandlers(ResourceHandlerRegistry registry) {\n                registry.addResourceHandler(\"doc.html\").addResourceLocations(\"classpath:/META-INF/resources/\");\n                registry.addResourceHandler(\"/webjars/**\").addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n            }\n        }\n       ```\n      \n    \n3. 添加注解\n   \n   我们接口文档的直接描述主要就是在Controller这一层，比如这个接口的功能，参数的名称，返回值的名称等。这些值我们都需要在Controller上通过给方法上，请求参数和返回参数上添加对应的注解，swagger才能帮我们生成相应的接口文档。\n   \n\n   - **JavaBean**: @ApiModel注解和 @@ApiModelProperty 注解定义了实体的名称和字段的名称\n       ```java\n        @Data\n        @ApiModel(\"创建Swagger响应结果\")\n        public class SwaggerResVO {\n\n            @ApiModelProperty(\"id\")\n            private Integer id;\n        \n            @ApiModelProperty(\"姓名\")\n            private String name;\n        \n            @ApiModelProperty(\"性别\")\n            private Integer gender;\n        \n            @ApiModelProperty(\"啥啥\")\n            private String what;\n        }\n        ```\n     \n - **controller**: @Api注解和 @ApiOperation注解分别标注了接口组名和接口的名称\n    ```java\n    @RestController\n    @RequestMapping(\"/swagger\")\n    @Api(value = \"用户接口\", tags = {\"用户接口\"})\n    public class SwaggerController {\n    \n        @ApiOperation(\"新增用户\")\n        @PostMapping(\"save\")\n        public String save(@RequestBody SwaggerReqVO req) {\n            return \"success\";\n        }\n     \n        @GetMapping(\"getById\")\n        @ApiOperation(\"根据条件查询用户\")\n        public SwaggerResVO getById(@RequestBody SwaggerResVO req) {\n            return new SwaggerResVO();\n        }\n    }\n   ```\n3. 启动项目\n    \n    访问 http://localhost:8080/doc.html 查看springfox-swagger2的文档中心\n    ![springfox-swagger2](./swagger/1.png)\n   \n    查看GET请求的界面\n    ![springfox-swagger2](./swagger/2.png)\n    ![springfox-swagger2](./swagger/3.png)\n\n4. 优缺点\n\n    - 优点：界面美观，集成方便，不同类型的接口按照controller分组，**可以导出所有的接口文档！！！！！**\n    \n    - 缺点：暂时没有遇到\n\n\n### 3.2 springdoc\n\n1. 引入依赖\n   ```java\n   <dependency>\n        <groupId>org.springdoc</groupId>\n        <artifactId>springdoc-openapi-ui</artifactId>\n        <version>1.5.8</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springdoc</groupId>\n        <artifactId>springdoc-openapi-webmvc-core</artifactId>\n        <version>1.5.8</version>\n    </dependency>\n   ```\n   \n2. 配置yml /yaml /properties\n    ```yaml\n    springdoc:\n      api-docs:\n        enabled: true\n        groups:\n          enabled: true\n        path: /api-docs\n      cache:\n        disabled: true\n      swagger-ui:\n        groups-order: asc\n        # 自定义的文档界面访问路径。默认访问路径是/swagger-ui.html\n        path: /springdoc/docs.html\n      # 布尔值。实现OpenApi规范的打印。\n      writer-with-default-pretty-printer: true\n    ```\n   \n3. 编写配置类\n\n    - SpringdocOpenapiConfiguration\n        ```java\n        @Configuration\n        public class SpringdocOpenapiConfiguration implements WebMvcConfigurer {\n        \n            private final SwaggerProperties swaggerProperties;\n        \n            public SpringdocOpenapiConfiguration(SwaggerProperties swaggerProperties) {\n                this.swaggerProperties = swaggerProperties;\n            }\n        \n            @Bean\n            public OpenAPI springDocOpenAPI() {\n                //配置认证、请求头参数\n                Components components = new Components();\n        //        Map<String, Object> myHeader2extensions = new HashMap<>(2);\n        //        myHeader2extensions.put(\"name\", \"myHeader2\");\n        //        components\n        //                .addSecuritySchemes(\"bearer-key\", new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(\"bearer\").bearerFormat(\"JWT\"))\n        //                .addSecuritySchemes(\"basicScheme\", new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(\"basic\"))\n        //                .addHeaders(\"myHeader2\", new Header().description(\"myHeader2 header\").schema(new StringSchema()).extensions(myHeader2extensions))\n        //                .addParameters(\"myGlobalHeader\", new HeaderParameter().required(true).name(\"My-Global-Header\").description(\"My Global Header\").schema(new StringSchema()).required(false))\n        //        ;\n      \n                // 接口调试路径\n                Server tryServer = new Server();\n                tryServer.setUrl(swaggerProperties.getTryHost());\n        \n                return new OpenAPI()\n                        .components(components)\n                        .servers(Collections.singletonList(tryServer))\n                        .info(new Info()\n                                .title(swaggerProperties.getApplicationName() + \" Api Doc\")\n                                .description(swaggerProperties.getApplicationDescription())\n                                .version(\"Application Version: \" + swaggerProperties.getApplicationVersion() + \"\\n Spring Boot Version: \" + SpringBootVersion.getVersion())\n                                .license(new License().name(\"Apache 2.0\").url(\"https://www.apache.org/licenses/LICENSE-2.0.html\"))\n                        )\n                        .externalDocs(new ExternalDocumentation()\n                                .description(\"SpringDoc Full Documentation\")\n                                .url(\"https://springdoc.org/\")\n                        );\n            }\n        \n            /**\n             * 添加全局的请求头参数\n             */\n        //    @Bean\n        //    public OpenApiCustomiser customerGlobalHeaderOpenApiCustomiser() {\n        //        return openApi -> openApi.getPaths().values().stream().flatMap(pathItem -> pathItem.readOperations().stream())\n        //                .forEach(operation -> {\n        //                    operation.addParametersItem(new HeaderParameter().$ref(\"#/components/parameters/myGlobalHeader\"));\n        //                });\n        //    }\n        \n            /**\n             * 通用拦截器排除设置，所有拦截器都会自动加springdoc-opapi相关的资源排除信息，不用在应用程序自身拦截器定义的地方去添加，算是良心解耦实现。\n             */\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void addInterceptors(InterceptorRegistry registry) {\n                try {\n                    Field registrationsField = FieldUtils.getField(InterceptorRegistry.class, \"registrations\", true);\n                    List<InterceptorRegistration> registrations = (List<InterceptorRegistration>) ReflectionUtils.getField(registrationsField, registry);\n                    if (registrations != null) {\n                        for (InterceptorRegistration interceptorRegistration : registrations) {\n                            interceptorRegistration.excludePathPatterns(\"/springdoc**/**\");\n                        }\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        \n            // 服务器支持跨域\n            @Override\n            public void addCorsMappings(CorsRegistry registry) {\n                registry.addMapping(\"/**\")\n                        .allowedOrigins(\"*\")\n                        .allowedMethods(\"GET\", \"POST\", \"OPTIONS\")\n                        .allowedHeaders(\"*\")\n                        .exposedHeaders(\"Access-Control-Allow-Headers\",\n                                \"Access-Control-Allow-Methods\",\n                                \"Access-Control-Allow-Origin\",\n                                \"Access-Control-Max-Age\",\n                                \"X-Frame-Options\")\n                        .allowCredentials(false)\n                        .maxAge(3600);\n            }\n        \n        }\n        ```\n    - SwaggerProperties\n        ```java\n        @Getter\n        @Setter\n        @Component\n        @ConfigurationProperties(\"swagger\")\n        public class SwaggerProperties {\n        /**\n        * 项目应用名\n        */\n        private String applicationName;\n            /**\n             * 项目版本信息\n             */\n            private String applicationVersion;\n            /**\n             * 项目描述信息\n             */\n            private String applicationDescription;\n            /**\n             * 接口调试地址\n             */\n            private String tryHost;\n        }\n        ```\n      \n    - 编写接口方法\n      - 在controller上添加@Tag注解\n      - 在接口方法上添加@Operation 注解\n      - 在接口参数添加@Parameter 或@Parameters 注解\n      ```java\n      @Tags({\n        @Tag(name = \"ExpirationWarningController\", description = \"设备寿命到期预警\"),\n      })\n      @RestController\n      @RequestMapping(\"/test\")\n      public class ExpirationWarningController {\n          //需要使用@Operation竹节\n          @PostMapping(\"/getOne/{id}/{type}\")\n          @Operation(summary = \"按ID查询\", description = \"按ID查询\")\n          public ResponseResult getOne(@Parameter(description = \"主键ID\") @PathVariable Integer id,\n          @Parameter(description = \"类型\") @PathVariable String type) {\n         \n              return ResponseResult.success(expirationWarningVO);\n          }\n      \n          @PostMapping(\"/save\")\n          @ResponseBody\n          @Operation(summary = \"保存\", description = \"保存\")\n          public ResponseResult save(@RequestBody ExpirationWarning expirationWarning) {\n             return null;\n          }\n        }\n      ```\n    - 在springboot启动类上加上以下配置\n      ```java\n      @OpenAPIDefinition(\n          info = @Info(\n              title = \"测试springdoc\",\n              version = \"1.0\"\n          ),\n          externalDocs = @ExternalDocumentation(description = \"swagger-api参考文档\",\n              url = \"https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Annotations\"\n          ),\n          servers = {\n              @Server(\n                  url = \"http://localhost:8123/app\",\n                  description = \"本地地址\"\n              ),\n              @Server(\n                  url = \"http://www.xiaoyuge.vip/app\",\n                  description = \"公网测试环境\"\n              )\n          }\n      )\n      public class ResolutionApplication {\n          public static void main(String[] args) {\n              SpringApplication.run(ResolutionApplication.class, args);\n              logger.info(\"============= Start Success =============\");\n          }\n      }\n      ```\n4. 启动项目\n\n   访问 http://localhost:8123/app/springdoc/swagger-ui/index.html 查看springdox的文档中心\n   ![springdoc](./swagger/4.png)\n   ![springdoc](./swagger/5.png)\n\n\n5. 优缺点\n\n    - 优点：不好说\n\n    - 缺点：界面没有按照每个controller分组，不直观！；\n\n\n### 3.3 Apifox\n一款研发全流程，接口全周期的生产力工具，这款软件真正完成了数据流的打通，在一个软件上就能实现**接口设计--接口文档--接口调试--接口修改--接口mock--接口测试--接口自动化--接口迭代**的工作流闭环；\n\n#### 3.3.1 Apifox上的协作流程\n1. 后端在Apifox可视化接口设计界面上定义好项目各个接口及对应参数同时编写接口文档说明\n2. 前后端一起评审，修改完善接口并在同一界面顺手更新接口文档\n3. 后端使用接口调试功能调试接口\n4. 前端使用零配置高仿真mock功能对前端页面进行调试，无需手写mock规则\n5. 后端使用代码生成功能直接生成接口代码\n6. 测试在接口管理页面一键生成接口参数测试用例,并依据业务场景生成自动化测试用例，一键运行接口用例并生成接口测试报告并分享给相关人员。\n7. 前后端 都开发完，前端从Mock 数据切换到正式数据，进行联调，由于使用同一个接口数据源，且遵循了接口规范，联调顺利\n8. 由于bug修复或需求变更，接口发生了变化，后端修改提交后，前端和测试实时同步到了修改后的数据\n9. 项目经理通过权限设置给研发,产品,测试,外部合作人员分配编辑,只读等各种操作权限，维护了项目安全\n10. 项目经理通过各个接口的状态开发中,测试中,已发布来跟进项目的进度情况，把控项目风险。\n\n#### 3.3.2 Apifox做的增速提效优化\n- 接口设计：从代码生成界面到可视化接口设计界面\n  \n  Apifox 接口文档遵循 OpenApi 3.0 (原 Swagger)、JSON Schema 规范，可生成在线文档；零学习成本即可编写出符合RESTful风格的接口文档，新人上手快；所见即所得，不易出错\n  ![Apifox](./swagger/6.png)\n  ![Apifox](./swagger/7.png)\n  \n- 文档维护：从接口与文档分离到接口与文档合并\n\n  Apifox的接口设计界面提供了Markdown格式的文档说明区，修改完接口就如同commit代码时添加变更说明般\n  ![Apifox](./swagger/8.png)\n  \n- 数据复用：从各自为政到定义一次、多次复用\n  - 接口数据复用：Swagger，Postman，MockJS，Jmeter等软件彼此之间数据不互通，数据格式不一致，接口导入非常耗时麻烦。\n    而Apifox能身兼多职，包揽上述软件功能，在Apifox中定义一次接口，能被后端直接用来调试，前端直接用来mock界面，测试直接执行接口自动化。\n  \n  - 数据模型复用：可复用的数据结构，定义接口返回数据结构及请求参数数据结构（仅 JSON 和 XML 模式）时可直接引用。\n    \n\n- 同步更新，高效沟通:从沟通滞后到数据变更即时同步\n  \n  Apifox为此提供了同步功能，一旦接口数据有更新发生，就会即时同步更新并通知到项目内所有成员。\n\n\n- Apihub\n\n  内置企业微信开放API，抖音开放API等第三方接口开放项目，接口可以直接在Apifox中调试，不需要到处找接口文档和手工填写接口\n#### 3.3.3 下载地址\n官网地址： http://www.apifox.cn/?utm_medium=WCSA&utm_source=xxzsq","source":"_posts/2022/04/swagger.md","raw":"---\ntitle: 常见的接口测试工具\ncomments: true\ntags: swagger\ncategories: swagger\nabbrlink: 56669\ndate: 2022-04-17 17:10:15\n---\n## 1. Swagger\nSwagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。\nSwagger 的目标是对 REST API 定义一个标准且和语言无关的接口，可以让人和计算机拥有无须访问源码、文档或网络流量监测就可以发现和理解服务的能力。\n \n静态的swagger跟不上频繁变更的代码，容易出现以下问题\n- “为什么改了这个没告诉我” \n  \n- “实际功能和文档上说的不一样啊”\n\n这样会带来的问题是：\n 1. Swagger，postman，MockJS只能完成软件研发流程中某个环节的功能，造成完成接口设计，文档编写，调试，测试验证等工作需要使用好几个工具；\n 2. 更麻烦的是这些工具数据格式不互通，无法互相导入，造成用Swagger定义和编写完成接口后，在Postman，MockJS，Jmeter等工具还要再去手动填写一遍才能开始工作，增加了无意义的工作量。\n 3. 沟通成本总是被忽略不计，但实际上不仅占据了很大时间，各种沟通不及时、沟通不到位还非常让人心累。\n 4. 老板的需求来得急，老板的需求变得快，各种代码修改和变更难以及时通知和同步到团队成员手中。\n\n## 2. 常见的可视化RestFul风格的服务\n\n- springfox-swagger2\n- springdoc\n- Apifox（接口测试工具，非集成在项目中postman加强升级版）\n\n## 3. 各个工具的使用以及风格\n使用Springboot项目分别集成各个组件，看下具体的实现效果；\n\n### 3.1 springfox-swagger2\n1. 引入依赖\n   ```java\n   <dependency>\n       <groupId>io.springfox</groupId>\n       <artifactId>springfox-swagger2</artifactId>\n       <version>2.10.5</version>\n   </dependency>\n       <dependency>\n        <groupId>io.springfox</groupId>\n        <artifactId>springfox-swagger-ui</artifactId>\n        <version>2.9.2</version>\n    </dependency>\n   ```\n   \n2. 编写配置类\n   - SwaggerConfiguration类\n       ```java    \n        @Configuration\n        @EnableSwagger2WebMvc\n        @EnableKnife4j\n        public class SwaggerConfiguration {\n        \n            @Value(\"${spring.application.name}\")\n            private String applicationName;\n        \n            @Bean(value = \"defaultApi\")\n            public Docket defaultApi2() {\n                //设置处理请求的包，我的controller类都在com.yugb.controller中\n                Predicate<RequestHandler> apiPackage = RequestHandlerSelectors.basePackage(\"com.yugb.controller\");\n        \n                Docket docket = new Docket(DocumentationType.SWAGGER_2)\n                        .apiInfo(new ApiInfoBuilder()\n                                .version(\"1.0\")\n                                .contact(new Contact(\"xiaoyuge\",\"123\", \"12342qq.com\"))\n                                .title(applicationName + \" 文档中心\")\n                                .description(\"<div style='font-size:15px;'>\" + applicationName + \" RESTful APIs</div>\")\n                                .build())\n                        //分组名称\n                        .groupName(\"2.X版本\")\n                        .select()\n                        //这里指定Controller扫描包路径\n                        .apis(apiPackage)\n                        .paths(PathSelectors.any())\n                        .build();\n                return docket;\n            }\n        \n        }\n       ```\n     \n    - SwaggerWebMvcConfigurer 类\n        ```java\n        @Configuration\n        public class SwaggerWebMvcConfigurer implements WebMvcConfigurer {\n            @Override\n            public void addResourceHandlers(ResourceHandlerRegistry registry) {\n                registry.addResourceHandler(\"doc.html\").addResourceLocations(\"classpath:/META-INF/resources/\");\n                registry.addResourceHandler(\"/webjars/**\").addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n            }\n        }\n       ```\n      \n    \n3. 添加注解\n   \n   我们接口文档的直接描述主要就是在Controller这一层，比如这个接口的功能，参数的名称，返回值的名称等。这些值我们都需要在Controller上通过给方法上，请求参数和返回参数上添加对应的注解，swagger才能帮我们生成相应的接口文档。\n   \n\n   - **JavaBean**: @ApiModel注解和 @@ApiModelProperty 注解定义了实体的名称和字段的名称\n       ```java\n        @Data\n        @ApiModel(\"创建Swagger响应结果\")\n        public class SwaggerResVO {\n\n            @ApiModelProperty(\"id\")\n            private Integer id;\n        \n            @ApiModelProperty(\"姓名\")\n            private String name;\n        \n            @ApiModelProperty(\"性别\")\n            private Integer gender;\n        \n            @ApiModelProperty(\"啥啥\")\n            private String what;\n        }\n        ```\n     \n - **controller**: @Api注解和 @ApiOperation注解分别标注了接口组名和接口的名称\n    ```java\n    @RestController\n    @RequestMapping(\"/swagger\")\n    @Api(value = \"用户接口\", tags = {\"用户接口\"})\n    public class SwaggerController {\n    \n        @ApiOperation(\"新增用户\")\n        @PostMapping(\"save\")\n        public String save(@RequestBody SwaggerReqVO req) {\n            return \"success\";\n        }\n     \n        @GetMapping(\"getById\")\n        @ApiOperation(\"根据条件查询用户\")\n        public SwaggerResVO getById(@RequestBody SwaggerResVO req) {\n            return new SwaggerResVO();\n        }\n    }\n   ```\n3. 启动项目\n    \n    访问 http://localhost:8080/doc.html 查看springfox-swagger2的文档中心\n    ![springfox-swagger2](./swagger/1.png)\n   \n    查看GET请求的界面\n    ![springfox-swagger2](./swagger/2.png)\n    ![springfox-swagger2](./swagger/3.png)\n\n4. 优缺点\n\n    - 优点：界面美观，集成方便，不同类型的接口按照controller分组，**可以导出所有的接口文档！！！！！**\n    \n    - 缺点：暂时没有遇到\n\n\n### 3.2 springdoc\n\n1. 引入依赖\n   ```java\n   <dependency>\n        <groupId>org.springdoc</groupId>\n        <artifactId>springdoc-openapi-ui</artifactId>\n        <version>1.5.8</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springdoc</groupId>\n        <artifactId>springdoc-openapi-webmvc-core</artifactId>\n        <version>1.5.8</version>\n    </dependency>\n   ```\n   \n2. 配置yml /yaml /properties\n    ```yaml\n    springdoc:\n      api-docs:\n        enabled: true\n        groups:\n          enabled: true\n        path: /api-docs\n      cache:\n        disabled: true\n      swagger-ui:\n        groups-order: asc\n        # 自定义的文档界面访问路径。默认访问路径是/swagger-ui.html\n        path: /springdoc/docs.html\n      # 布尔值。实现OpenApi规范的打印。\n      writer-with-default-pretty-printer: true\n    ```\n   \n3. 编写配置类\n\n    - SpringdocOpenapiConfiguration\n        ```java\n        @Configuration\n        public class SpringdocOpenapiConfiguration implements WebMvcConfigurer {\n        \n            private final SwaggerProperties swaggerProperties;\n        \n            public SpringdocOpenapiConfiguration(SwaggerProperties swaggerProperties) {\n                this.swaggerProperties = swaggerProperties;\n            }\n        \n            @Bean\n            public OpenAPI springDocOpenAPI() {\n                //配置认证、请求头参数\n                Components components = new Components();\n        //        Map<String, Object> myHeader2extensions = new HashMap<>(2);\n        //        myHeader2extensions.put(\"name\", \"myHeader2\");\n        //        components\n        //                .addSecuritySchemes(\"bearer-key\", new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(\"bearer\").bearerFormat(\"JWT\"))\n        //                .addSecuritySchemes(\"basicScheme\", new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(\"basic\"))\n        //                .addHeaders(\"myHeader2\", new Header().description(\"myHeader2 header\").schema(new StringSchema()).extensions(myHeader2extensions))\n        //                .addParameters(\"myGlobalHeader\", new HeaderParameter().required(true).name(\"My-Global-Header\").description(\"My Global Header\").schema(new StringSchema()).required(false))\n        //        ;\n      \n                // 接口调试路径\n                Server tryServer = new Server();\n                tryServer.setUrl(swaggerProperties.getTryHost());\n        \n                return new OpenAPI()\n                        .components(components)\n                        .servers(Collections.singletonList(tryServer))\n                        .info(new Info()\n                                .title(swaggerProperties.getApplicationName() + \" Api Doc\")\n                                .description(swaggerProperties.getApplicationDescription())\n                                .version(\"Application Version: \" + swaggerProperties.getApplicationVersion() + \"\\n Spring Boot Version: \" + SpringBootVersion.getVersion())\n                                .license(new License().name(\"Apache 2.0\").url(\"https://www.apache.org/licenses/LICENSE-2.0.html\"))\n                        )\n                        .externalDocs(new ExternalDocumentation()\n                                .description(\"SpringDoc Full Documentation\")\n                                .url(\"https://springdoc.org/\")\n                        );\n            }\n        \n            /**\n             * 添加全局的请求头参数\n             */\n        //    @Bean\n        //    public OpenApiCustomiser customerGlobalHeaderOpenApiCustomiser() {\n        //        return openApi -> openApi.getPaths().values().stream().flatMap(pathItem -> pathItem.readOperations().stream())\n        //                .forEach(operation -> {\n        //                    operation.addParametersItem(new HeaderParameter().$ref(\"#/components/parameters/myGlobalHeader\"));\n        //                });\n        //    }\n        \n            /**\n             * 通用拦截器排除设置，所有拦截器都会自动加springdoc-opapi相关的资源排除信息，不用在应用程序自身拦截器定义的地方去添加，算是良心解耦实现。\n             */\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void addInterceptors(InterceptorRegistry registry) {\n                try {\n                    Field registrationsField = FieldUtils.getField(InterceptorRegistry.class, \"registrations\", true);\n                    List<InterceptorRegistration> registrations = (List<InterceptorRegistration>) ReflectionUtils.getField(registrationsField, registry);\n                    if (registrations != null) {\n                        for (InterceptorRegistration interceptorRegistration : registrations) {\n                            interceptorRegistration.excludePathPatterns(\"/springdoc**/**\");\n                        }\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        \n            // 服务器支持跨域\n            @Override\n            public void addCorsMappings(CorsRegistry registry) {\n                registry.addMapping(\"/**\")\n                        .allowedOrigins(\"*\")\n                        .allowedMethods(\"GET\", \"POST\", \"OPTIONS\")\n                        .allowedHeaders(\"*\")\n                        .exposedHeaders(\"Access-Control-Allow-Headers\",\n                                \"Access-Control-Allow-Methods\",\n                                \"Access-Control-Allow-Origin\",\n                                \"Access-Control-Max-Age\",\n                                \"X-Frame-Options\")\n                        .allowCredentials(false)\n                        .maxAge(3600);\n            }\n        \n        }\n        ```\n    - SwaggerProperties\n        ```java\n        @Getter\n        @Setter\n        @Component\n        @ConfigurationProperties(\"swagger\")\n        public class SwaggerProperties {\n        /**\n        * 项目应用名\n        */\n        private String applicationName;\n            /**\n             * 项目版本信息\n             */\n            private String applicationVersion;\n            /**\n             * 项目描述信息\n             */\n            private String applicationDescription;\n            /**\n             * 接口调试地址\n             */\n            private String tryHost;\n        }\n        ```\n      \n    - 编写接口方法\n      - 在controller上添加@Tag注解\n      - 在接口方法上添加@Operation 注解\n      - 在接口参数添加@Parameter 或@Parameters 注解\n      ```java\n      @Tags({\n        @Tag(name = \"ExpirationWarningController\", description = \"设备寿命到期预警\"),\n      })\n      @RestController\n      @RequestMapping(\"/test\")\n      public class ExpirationWarningController {\n          //需要使用@Operation竹节\n          @PostMapping(\"/getOne/{id}/{type}\")\n          @Operation(summary = \"按ID查询\", description = \"按ID查询\")\n          public ResponseResult getOne(@Parameter(description = \"主键ID\") @PathVariable Integer id,\n          @Parameter(description = \"类型\") @PathVariable String type) {\n         \n              return ResponseResult.success(expirationWarningVO);\n          }\n      \n          @PostMapping(\"/save\")\n          @ResponseBody\n          @Operation(summary = \"保存\", description = \"保存\")\n          public ResponseResult save(@RequestBody ExpirationWarning expirationWarning) {\n             return null;\n          }\n        }\n      ```\n    - 在springboot启动类上加上以下配置\n      ```java\n      @OpenAPIDefinition(\n          info = @Info(\n              title = \"测试springdoc\",\n              version = \"1.0\"\n          ),\n          externalDocs = @ExternalDocumentation(description = \"swagger-api参考文档\",\n              url = \"https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Annotations\"\n          ),\n          servers = {\n              @Server(\n                  url = \"http://localhost:8123/app\",\n                  description = \"本地地址\"\n              ),\n              @Server(\n                  url = \"http://www.xiaoyuge.vip/app\",\n                  description = \"公网测试环境\"\n              )\n          }\n      )\n      public class ResolutionApplication {\n          public static void main(String[] args) {\n              SpringApplication.run(ResolutionApplication.class, args);\n              logger.info(\"============= Start Success =============\");\n          }\n      }\n      ```\n4. 启动项目\n\n   访问 http://localhost:8123/app/springdoc/swagger-ui/index.html 查看springdox的文档中心\n   ![springdoc](./swagger/4.png)\n   ![springdoc](./swagger/5.png)\n\n\n5. 优缺点\n\n    - 优点：不好说\n\n    - 缺点：界面没有按照每个controller分组，不直观！；\n\n\n### 3.3 Apifox\n一款研发全流程，接口全周期的生产力工具，这款软件真正完成了数据流的打通，在一个软件上就能实现**接口设计--接口文档--接口调试--接口修改--接口mock--接口测试--接口自动化--接口迭代**的工作流闭环；\n\n#### 3.3.1 Apifox上的协作流程\n1. 后端在Apifox可视化接口设计界面上定义好项目各个接口及对应参数同时编写接口文档说明\n2. 前后端一起评审，修改完善接口并在同一界面顺手更新接口文档\n3. 后端使用接口调试功能调试接口\n4. 前端使用零配置高仿真mock功能对前端页面进行调试，无需手写mock规则\n5. 后端使用代码生成功能直接生成接口代码\n6. 测试在接口管理页面一键生成接口参数测试用例,并依据业务场景生成自动化测试用例，一键运行接口用例并生成接口测试报告并分享给相关人员。\n7. 前后端 都开发完，前端从Mock 数据切换到正式数据，进行联调，由于使用同一个接口数据源，且遵循了接口规范，联调顺利\n8. 由于bug修复或需求变更，接口发生了变化，后端修改提交后，前端和测试实时同步到了修改后的数据\n9. 项目经理通过权限设置给研发,产品,测试,外部合作人员分配编辑,只读等各种操作权限，维护了项目安全\n10. 项目经理通过各个接口的状态开发中,测试中,已发布来跟进项目的进度情况，把控项目风险。\n\n#### 3.3.2 Apifox做的增速提效优化\n- 接口设计：从代码生成界面到可视化接口设计界面\n  \n  Apifox 接口文档遵循 OpenApi 3.0 (原 Swagger)、JSON Schema 规范，可生成在线文档；零学习成本即可编写出符合RESTful风格的接口文档，新人上手快；所见即所得，不易出错\n  ![Apifox](./swagger/6.png)\n  ![Apifox](./swagger/7.png)\n  \n- 文档维护：从接口与文档分离到接口与文档合并\n\n  Apifox的接口设计界面提供了Markdown格式的文档说明区，修改完接口就如同commit代码时添加变更说明般\n  ![Apifox](./swagger/8.png)\n  \n- 数据复用：从各自为政到定义一次、多次复用\n  - 接口数据复用：Swagger，Postman，MockJS，Jmeter等软件彼此之间数据不互通，数据格式不一致，接口导入非常耗时麻烦。\n    而Apifox能身兼多职，包揽上述软件功能，在Apifox中定义一次接口，能被后端直接用来调试，前端直接用来mock界面，测试直接执行接口自动化。\n  \n  - 数据模型复用：可复用的数据结构，定义接口返回数据结构及请求参数数据结构（仅 JSON 和 XML 模式）时可直接引用。\n    \n\n- 同步更新，高效沟通:从沟通滞后到数据变更即时同步\n  \n  Apifox为此提供了同步功能，一旦接口数据有更新发生，就会即时同步更新并通知到项目内所有成员。\n\n\n- Apihub\n\n  内置企业微信开放API，抖音开放API等第三方接口开放项目，接口可以直接在Apifox中调试，不需要到处找接口文档和手工填写接口\n#### 3.3.3 下载地址\n官网地址： http://www.apifox.cn/?utm_medium=WCSA&utm_source=xxzsq","slug":"swagger","published":1,"updated":"2022-04-17T10:49:31.138Z","_id":"cl235zcx7005swjpjheyc9mr0","layout":"post","photos":[],"link":"","content":"<h2 id=\"1-Swagger\"><a href=\"#1-Swagger\" class=\"headerlink\" title=\"1. Swagger\"></a>1. Swagger</h2><p>Swagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。<br>Swagger 的目标是对 REST API 定义一个标准且和语言无关的接口，可以让人和计算机拥有无须访问源码、文档或网络流量监测就可以发现和理解服务的能力。</p>\n<p>静态的swagger跟不上频繁变更的代码，容易出现以下问题</p>\n<ul>\n<li>“为什么改了这个没告诉我” </li>\n<li>“实际功能和文档上说的不一样啊”</li>\n</ul>\n<p>这样会带来的问题是：</p>\n<ol>\n<li>Swagger，postman，MockJS只能完成软件研发流程中某个环节的功能，造成完成接口设计，文档编写，调试，测试验证等工作需要使用好几个工具；</li>\n<li>更麻烦的是这些工具数据格式不互通，无法互相导入，造成用Swagger定义和编写完成接口后，在Postman，MockJS，Jmeter等工具还要再去手动填写一遍才能开始工作，增加了无意义的工作量。</li>\n<li>沟通成本总是被忽略不计，但实际上不仅占据了很大时间，各种沟通不及时、沟通不到位还非常让人心累。</li>\n<li>老板的需求来得急，老板的需求变得快，各种代码修改和变更难以及时通知和同步到团队成员手中。</li>\n</ol>\n<h2 id=\"2-常见的可视化RestFul风格的服务\"><a href=\"#2-常见的可视化RestFul风格的服务\" class=\"headerlink\" title=\"2. 常见的可视化RestFul风格的服务\"></a>2. 常见的可视化RestFul风格的服务</h2><ul>\n<li>springfox-swagger2</li>\n<li>springdoc</li>\n<li>Apifox（接口测试工具，非集成在项目中postman加强升级版）</li>\n</ul>\n<h2 id=\"3-各个工具的使用以及风格\"><a href=\"#3-各个工具的使用以及风格\" class=\"headerlink\" title=\"3. 各个工具的使用以及风格\"></a>3. 各个工具的使用以及风格</h2><p>使用Springboot项目分别集成各个组件，看下具体的实现效果；</p>\n<h3 id=\"3-1-springfox-swagger2\"><a href=\"#3-1-springfox-swagger2\" class=\"headerlink\" title=\"3.1 springfox-swagger2\"></a>3.1 springfox-swagger2</h3><ol>\n<li><p>引入依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">2.10</span><span class=\"number\">.5</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;<span class=\"number\">2.9</span><span class=\"number\">.2</span>&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>编写配置类</p>\n<ul>\n<li>SwaggerConfiguration类  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger2WebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@EnableKnife4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String applicationName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(value = &quot;defaultApi&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">defaultApi2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//设置处理请求的包，我的controller类都在com.yugb.controller中</span></span><br><span class=\"line\">        Predicate&lt;RequestHandler&gt; apiPackage = RequestHandlerSelectors.basePackage(<span class=\"string\">&quot;com.yugb.controller&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Docket docket = <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .apiInfo(<span class=\"keyword\">new</span> ApiInfoBuilder()</span><br><span class=\"line\">                        .version(<span class=\"string\">&quot;1.0&quot;</span>)</span><br><span class=\"line\">                        .contact(<span class=\"keyword\">new</span> Contact(<span class=\"string\">&quot;xiaoyuge&quot;</span>,<span class=\"string\">&quot;123&quot;</span>, <span class=\"string\">&quot;12342qq.com&quot;</span>))</span><br><span class=\"line\">                        .title(applicationName + <span class=\"string\">&quot; 文档中心&quot;</span>)</span><br><span class=\"line\">                        .description(<span class=\"string\">&quot;&lt;div style=&#x27;font-size:15px;&#x27;&gt;&quot;</span> + applicationName + <span class=\"string\">&quot; RESTful APIs&lt;/div&gt;&quot;</span>)</span><br><span class=\"line\">                        .build())</span><br><span class=\"line\">                <span class=\"comment\">//分组名称</span></span><br><span class=\"line\">                .groupName(<span class=\"string\">&quot;2.X版本&quot;</span>)</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                <span class=\"comment\">//这里指定Controller扫描包路径</span></span><br><span class=\"line\">                .apis(apiPackage)</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> docket;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>SwaggerWebMvcConfigurer 类  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerWebMvcConfigurer</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addResourceHandler(<span class=\"string\">&quot;doc.html&quot;</span>).addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class=\"line\">        registry.addResourceHandler(<span class=\"string\">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>添加注解</p>\n<p>我们接口文档的直接描述主要就是在Controller这一层，比如这个接口的功能，参数的名称，返回值的名称等。这些值我们都需要在Controller上通过给方法上，请求参数和返回参数上添加对应的注解，swagger才能帮我们生成相应的接口文档。</p>\n<ul>\n<li><strong>JavaBean</strong>: @ApiModel注解和 @@ApiModelProperty 注解定义了实体的名称和字段的名称  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel(&quot;创建Swagger响应结果&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerResVO</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;姓名&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;性别&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer gender;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;啥啥&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String what;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><strong>controller</strong>: @Api注解和 @ApiOperation注解分别标注了接口组名和接口的名称 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/swagger&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Api(value = &quot;用户接口&quot;, tags = &#123;&quot;用户接口&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;新增用户&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;save&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">save</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> SwaggerReqVO req)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;getById&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;根据条件查询用户&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SwaggerResVO <span class=\"title\">getById</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> SwaggerResVO req)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SwaggerResVO();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li><p>启动项目</p>\n<p> 访问 <a href=\"http://localhost:8080/doc.html\">http://localhost:8080/doc.html</a> 查看springfox-swagger2的文档中心<br> <img src=\"/swagger/1.png\" alt=\"springfox-swagger2\"></p>\n<p> 查看GET请求的界面<br> <img src=\"/swagger/2.png\" alt=\"springfox-swagger2\"><br> <img src=\"/swagger/3.png\" alt=\"springfox-swagger2\"></p>\n</li>\n<li><p>优缺点</p>\n<ul>\n<li>优点：界面美观，集成方便，不同类型的接口按照controller分组，<strong>可以导出所有的接口文档！！！！！</strong></li>\n<li>缺点：暂时没有遇到</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-2-springdoc\"><a href=\"#3-2-springdoc\" class=\"headerlink\" title=\"3.2 springdoc\"></a>3.2 springdoc</h3><ol>\n<li><p>引入依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.springdoc&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;springdoc-openapi-ui&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;<span class=\"number\">1.5</span><span class=\"number\">.8</span>&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.springdoc&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;springdoc-openapi-webmvc-core&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;<span class=\"number\">1.5</span><span class=\"number\">.8</span>&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>配置yml /yaml /properties</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">springdoc:</span></span><br><span class=\"line\">  <span class=\"attr\">api-docs:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">groups:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/api-docs</span></span><br><span class=\"line\">  <span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">disabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">swagger-ui:</span></span><br><span class=\"line\">    <span class=\"attr\">groups-order:</span> <span class=\"string\">asc</span></span><br><span class=\"line\">    <span class=\"comment\"># 自定义的文档界面访问路径。默认访问路径是/swagger-ui.html</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/springdoc/docs.html</span></span><br><span class=\"line\">  <span class=\"comment\"># 布尔值。实现OpenApi规范的打印。</span></span><br><span class=\"line\">  <span class=\"attr\">writer-with-default-pretty-printer:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n<li><p>编写配置类</p>\n<ul>\n<li>SpringdocOpenapiConfiguration  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringdocOpenapiConfiguration</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SwaggerProperties swaggerProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpringdocOpenapiConfiguration</span><span class=\"params\">(SwaggerProperties swaggerProperties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.swaggerProperties = swaggerProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> OpenAPI <span class=\"title\">springDocOpenAPI</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//配置认证、请求头参数</span></span><br><span class=\"line\">        Components components = <span class=\"keyword\">new</span> Components();</span><br><span class=\"line\"><span class=\"comment\">//        Map&lt;String, Object&gt; myHeader2extensions = new HashMap&lt;&gt;(2);</span></span><br><span class=\"line\"><span class=\"comment\">//        myHeader2extensions.put(&quot;name&quot;, &quot;myHeader2&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        components</span></span><br><span class=\"line\"><span class=\"comment\">//                .addSecuritySchemes(&quot;bearer-key&quot;, new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(&quot;bearer&quot;).bearerFormat(&quot;JWT&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">//                .addSecuritySchemes(&quot;basicScheme&quot;, new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(&quot;basic&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">//                .addHeaders(&quot;myHeader2&quot;, new Header().description(&quot;myHeader2 header&quot;).schema(new StringSchema()).extensions(myHeader2extensions))</span></span><br><span class=\"line\"><span class=\"comment\">//                .addParameters(&quot;myGlobalHeader&quot;, new HeaderParameter().required(true).name(&quot;My-Global-Header&quot;).description(&quot;My Global Header&quot;).schema(new StringSchema()).required(false))</span></span><br><span class=\"line\"><span class=\"comment\">//        ;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"comment\">// 接口调试路径</span></span><br><span class=\"line\">        Server tryServer = <span class=\"keyword\">new</span> Server();</span><br><span class=\"line\">        tryServer.setUrl(swaggerProperties.getTryHost());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OpenAPI()</span><br><span class=\"line\">                .components(components)</span><br><span class=\"line\">                .servers(Collections.singletonList(tryServer))</span><br><span class=\"line\">                .info(<span class=\"keyword\">new</span> Info()</span><br><span class=\"line\">                        .title(swaggerProperties.getApplicationName() + <span class=\"string\">&quot; Api Doc&quot;</span>)</span><br><span class=\"line\">                        .description(swaggerProperties.getApplicationDescription())</span><br><span class=\"line\">                        .version(<span class=\"string\">&quot;Application Version: &quot;</span> + swaggerProperties.getApplicationVersion() + <span class=\"string\">&quot;\\n Spring Boot Version: &quot;</span> + SpringBootVersion.getVersion())</span><br><span class=\"line\">                        .license(<span class=\"keyword\">new</span> License().name(<span class=\"string\">&quot;Apache 2.0&quot;</span>).url(<span class=\"string\">&quot;https://www.apache.org/licenses/LICENSE-2.0.html&quot;</span>))</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .externalDocs(<span class=\"keyword\">new</span> ExternalDocumentation()</span><br><span class=\"line\">                        .description(<span class=\"string\">&quot;SpringDoc Full Documentation&quot;</span>)</span><br><span class=\"line\">                        .url(<span class=\"string\">&quot;https://springdoc.org/&quot;</span>)</span><br><span class=\"line\">                );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加全局的请求头参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"comment\">//    @Bean</span></span><br><span class=\"line\"><span class=\"comment\">//    public OpenApiCustomiser customerGlobalHeaderOpenApiCustomiser() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        return openApi -&gt; openApi.getPaths().values().stream().flatMap(pathItem -&gt; pathItem.readOperations().stream())</span></span><br><span class=\"line\"><span class=\"comment\">//                .forEach(operation -&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                    operation.addParametersItem(new HeaderParameter().$ref(&quot;#/components/parameters/myGlobalHeader&quot;));</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通用拦截器排除设置，所有拦截器都会自动加springdoc-opapi相关的资源排除信息，不用在应用程序自身拦截器定义的地方去添加，算是良心解耦实现。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Field registrationsField = FieldUtils.getField(InterceptorRegistry.class, <span class=\"string\">&quot;registrations&quot;</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            List&lt;InterceptorRegistration&gt; registrations = (List&lt;InterceptorRegistration&gt;) ReflectionUtils.getField(registrationsField, registry);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (registrations != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (InterceptorRegistration interceptorRegistration : registrations) &#123;</span><br><span class=\"line\">                    interceptorRegistration.excludePathPatterns(<span class=\"string\">&quot;/springdoc**/**&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 服务器支持跨域</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCorsMappings</span><span class=\"params\">(CorsRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addMapping(<span class=\"string\">&quot;/**&quot;</span>)</span><br><span class=\"line\">                .allowedOrigins(<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">                .allowedMethods(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;OPTIONS&quot;</span>)</span><br><span class=\"line\">                .allowedHeaders(<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">                .exposedHeaders(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;Access-Control-Max-Age&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;X-Frame-Options&quot;</span>)</span><br><span class=\"line\">                .allowCredentials(<span class=\"keyword\">false</span>)</span><br><span class=\"line\">                .maxAge(<span class=\"number\">3600</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>SwaggerProperties  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;swagger&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerProperties</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 项目应用名</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String applicationName;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 项目版本信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String applicationVersion;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 项目描述信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String applicationDescription;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 接口调试地址</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tryHost;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>编写接口方法<ul>\n<li>在controller上添加@Tag注解</li>\n<li>在接口方法上添加@Operation 注解</li>\n<li>在接口参数添加@Parameter 或@Parameters 注解<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Tags(&#123;</span></span><br><span class=\"line\"><span class=\"meta\">  @Tag(name = &quot;ExpirationWarningController&quot;, description = &quot;设备寿命到期预警&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExpirationWarningController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//需要使用@Operation竹节</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/getOne/&#123;id&#125;/&#123;type&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Operation(summary = &quot;按ID查询&quot;, description = &quot;按ID查询&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResponseResult <span class=\"title\">getOne</span><span class=\"params\">(<span class=\"meta\">@Parameter(description = &quot;主键ID&quot;)</span> <span class=\"meta\">@PathVariable</span> Integer id,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"meta\">@Parameter(description = &quot;类型&quot;)</span> <span class=\"meta\">@PathVariable</span> String type)</span> </span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseResult.success(expirationWarningVO);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/save&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@Operation(summary = &quot;保存&quot;, description = &quot;保存&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResponseResult <span class=\"title\">save</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> ExpirationWarning expirationWarning)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>在springboot启动类上加上以下配置<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@OpenAPIDefinition(</span></span><br><span class=\"line\"><span class=\"meta\">    info = @Info(</span></span><br><span class=\"line\"><span class=\"meta\">        title = &quot;测试springdoc&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">        version = &quot;1.0&quot;</span></span><br><span class=\"line\"><span class=\"meta\">    ),</span></span><br><span class=\"line\"><span class=\"meta\">    externalDocs = @ExternalDocumentation(description = &quot;swagger-api参考文档&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">        url = &quot;https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Annotations&quot;</span></span><br><span class=\"line\"><span class=\"meta\">    ),</span></span><br><span class=\"line\"><span class=\"meta\">    servers = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">        @Server(</span></span><br><span class=\"line\"><span class=\"meta\">            url = &quot;http://localhost:8123/app&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">            description = &quot;本地地址&quot;</span></span><br><span class=\"line\"><span class=\"meta\">        ),</span></span><br><span class=\"line\"><span class=\"meta\">        @Server(</span></span><br><span class=\"line\"><span class=\"meta\">            url = &quot;http://www.xiaoyuge.vip/app&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">            description = &quot;公网测试环境&quot;</span></span><br><span class=\"line\"><span class=\"meta\">        )</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResolutionApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(ResolutionApplication.class, args);</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;============= Start Success =============&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>启动项目</p>\n<p>访问 <a href=\"http://localhost:8123/app/springdoc/swagger-ui/index.html\">http://localhost:8123/app/springdoc/swagger-ui/index.html</a> 查看springdox的文档中心<br><img src=\"/swagger/4.png\" alt=\"springdoc\"><br><img src=\"/swagger/5.png\" alt=\"springdoc\"></p>\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>优缺点</p>\n<ul>\n<li><p>优点：不好说</p>\n</li>\n<li><p>缺点：界面没有按照每个controller分组，不直观！；</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-3-Apifox\"><a href=\"#3-3-Apifox\" class=\"headerlink\" title=\"3.3 Apifox\"></a>3.3 Apifox</h3><p>一款研发全流程，接口全周期的生产力工具，这款软件真正完成了数据流的打通，在一个软件上就能实现<strong>接口设计–接口文档–接口调试–接口修改–接口mock–接口测试–接口自动化–接口迭代</strong>的工作流闭环；</p>\n<h4 id=\"3-3-1-Apifox上的协作流程\"><a href=\"#3-3-1-Apifox上的协作流程\" class=\"headerlink\" title=\"3.3.1 Apifox上的协作流程\"></a>3.3.1 Apifox上的协作流程</h4><ol>\n<li>后端在Apifox可视化接口设计界面上定义好项目各个接口及对应参数同时编写接口文档说明</li>\n<li>前后端一起评审，修改完善接口并在同一界面顺手更新接口文档</li>\n<li>后端使用接口调试功能调试接口</li>\n<li>前端使用零配置高仿真mock功能对前端页面进行调试，无需手写mock规则</li>\n<li>后端使用代码生成功能直接生成接口代码</li>\n<li>测试在接口管理页面一键生成接口参数测试用例,并依据业务场景生成自动化测试用例，一键运行接口用例并生成接口测试报告并分享给相关人员。</li>\n<li>前后端 都开发完，前端从Mock 数据切换到正式数据，进行联调，由于使用同一个接口数据源，且遵循了接口规范，联调顺利</li>\n<li>由于bug修复或需求变更，接口发生了变化，后端修改提交后，前端和测试实时同步到了修改后的数据</li>\n<li>项目经理通过权限设置给研发,产品,测试,外部合作人员分配编辑,只读等各种操作权限，维护了项目安全</li>\n<li>项目经理通过各个接口的状态开发中,测试中,已发布来跟进项目的进度情况，把控项目风险。</li>\n</ol>\n<h4 id=\"3-3-2-Apifox做的增速提效优化\"><a href=\"#3-3-2-Apifox做的增速提效优化\" class=\"headerlink\" title=\"3.3.2 Apifox做的增速提效优化\"></a>3.3.2 Apifox做的增速提效优化</h4><ul>\n<li><p>接口设计：从代码生成界面到可视化接口设计界面</p>\n<p>Apifox 接口文档遵循 OpenApi 3.0 (原 Swagger)、JSON Schema 规范，可生成在线文档；零学习成本即可编写出符合RESTful风格的接口文档，新人上手快；所见即所得，不易出错<br><img src=\"/swagger/6.png\" alt=\"Apifox\"><br><img src=\"/swagger/7.png\" alt=\"Apifox\"></p>\n</li>\n<li><p>文档维护：从接口与文档分离到接口与文档合并</p>\n<p>Apifox的接口设计界面提供了Markdown格式的文档说明区，修改完接口就如同commit代码时添加变更说明般<br><img src=\"/swagger/8.png\" alt=\"Apifox\"></p>\n</li>\n<li><p>数据复用：从各自为政到定义一次、多次复用</p>\n<ul>\n<li><p>接口数据复用：Swagger，Postman，MockJS，Jmeter等软件彼此之间数据不互通，数据格式不一致，接口导入非常耗时麻烦。<br>而Apifox能身兼多职，包揽上述软件功能，在Apifox中定义一次接口，能被后端直接用来调试，前端直接用来mock界面，测试直接执行接口自动化。</p>\n</li>\n<li><p>数据模型复用：可复用的数据结构，定义接口返回数据结构及请求参数数据结构（仅 JSON 和 XML 模式）时可直接引用。</p>\n</li>\n</ul>\n</li>\n<li><p>同步更新，高效沟通:从沟通滞后到数据变更即时同步</p>\n<p>Apifox为此提供了同步功能，一旦接口数据有更新发生，就会即时同步更新并通知到项目内所有成员。</p>\n</li>\n</ul>\n<ul>\n<li><p>Apihub</p>\n<p>内置企业微信开放API，抖音开放API等第三方接口开放项目，接口可以直接在Apifox中调试，不需要到处找接口文档和手工填写接口</p>\n<h4 id=\"3-3-3-下载地址\"><a href=\"#3-3-3-下载地址\" class=\"headerlink\" title=\"3.3.3 下载地址\"></a>3.3.3 下载地址</h4><p>官网地址： <a href=\"http://www.apifox.cn/?utm_medium=WCSA&amp;utm_source=xxzsq\">http://www.apifox.cn/?utm_medium=WCSA&amp;utm_source=xxzsq</a></p>\n</li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1-Swagger\"><a href=\"#1-Swagger\" class=\"headerlink\" title=\"1. Swagger\"></a>1. Swagger</h2><p>Swagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。<br>Swagger 的目标是对 REST API 定义一个标准且和语言无关的接口，可以让人和计算机拥有无须访问源码、文档或网络流量监测就可以发现和理解服务的能力。</p>\n<p>静态的swagger跟不上频繁变更的代码，容易出现以下问题</p>\n<ul>\n<li>“为什么改了这个没告诉我” </li>\n<li>“实际功能和文档上说的不一样啊”</li>\n</ul>\n<p>这样会带来的问题是：</p>\n<ol>\n<li>Swagger，postman，MockJS只能完成软件研发流程中某个环节的功能，造成完成接口设计，文档编写，调试，测试验证等工作需要使用好几个工具；</li>\n<li>更麻烦的是这些工具数据格式不互通，无法互相导入，造成用Swagger定义和编写完成接口后，在Postman，MockJS，Jmeter等工具还要再去手动填写一遍才能开始工作，增加了无意义的工作量。</li>\n<li>沟通成本总是被忽略不计，但实际上不仅占据了很大时间，各种沟通不及时、沟通不到位还非常让人心累。</li>\n<li>老板的需求来得急，老板的需求变得快，各种代码修改和变更难以及时通知和同步到团队成员手中。</li>\n</ol>\n<h2 id=\"2-常见的可视化RestFul风格的服务\"><a href=\"#2-常见的可视化RestFul风格的服务\" class=\"headerlink\" title=\"2. 常见的可视化RestFul风格的服务\"></a>2. 常见的可视化RestFul风格的服务</h2><ul>\n<li>springfox-swagger2</li>\n<li>springdoc</li>\n<li>Apifox（接口测试工具，非集成在项目中postman加强升级版）</li>\n</ul>\n<h2 id=\"3-各个工具的使用以及风格\"><a href=\"#3-各个工具的使用以及风格\" class=\"headerlink\" title=\"3. 各个工具的使用以及风格\"></a>3. 各个工具的使用以及风格</h2><p>使用Springboot项目分别集成各个组件，看下具体的实现效果；</p>\n<h3 id=\"3-1-springfox-swagger2\"><a href=\"#3-1-springfox-swagger2\" class=\"headerlink\" title=\"3.1 springfox-swagger2\"></a>3.1 springfox-swagger2</h3><ol>\n<li><p>引入依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">2.10</span><span class=\"number\">.5</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;<span class=\"number\">2.9</span><span class=\"number\">.2</span>&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>编写配置类</p>\n<ul>\n<li>SwaggerConfiguration类  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger2WebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@EnableKnife4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String applicationName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(value = &quot;defaultApi&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">defaultApi2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//设置处理请求的包，我的controller类都在com.yugb.controller中</span></span><br><span class=\"line\">        Predicate&lt;RequestHandler&gt; apiPackage = RequestHandlerSelectors.basePackage(<span class=\"string\">&quot;com.yugb.controller&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Docket docket = <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .apiInfo(<span class=\"keyword\">new</span> ApiInfoBuilder()</span><br><span class=\"line\">                        .version(<span class=\"string\">&quot;1.0&quot;</span>)</span><br><span class=\"line\">                        .contact(<span class=\"keyword\">new</span> Contact(<span class=\"string\">&quot;xiaoyuge&quot;</span>,<span class=\"string\">&quot;123&quot;</span>, <span class=\"string\">&quot;12342qq.com&quot;</span>))</span><br><span class=\"line\">                        .title(applicationName + <span class=\"string\">&quot; 文档中心&quot;</span>)</span><br><span class=\"line\">                        .description(<span class=\"string\">&quot;&lt;div style=&#x27;font-size:15px;&#x27;&gt;&quot;</span> + applicationName + <span class=\"string\">&quot; RESTful APIs&lt;/div&gt;&quot;</span>)</span><br><span class=\"line\">                        .build())</span><br><span class=\"line\">                <span class=\"comment\">//分组名称</span></span><br><span class=\"line\">                .groupName(<span class=\"string\">&quot;2.X版本&quot;</span>)</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                <span class=\"comment\">//这里指定Controller扫描包路径</span></span><br><span class=\"line\">                .apis(apiPackage)</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> docket;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>SwaggerWebMvcConfigurer 类  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerWebMvcConfigurer</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addResourceHandler(<span class=\"string\">&quot;doc.html&quot;</span>).addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class=\"line\">        registry.addResourceHandler(<span class=\"string\">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>添加注解</p>\n<p>我们接口文档的直接描述主要就是在Controller这一层，比如这个接口的功能，参数的名称，返回值的名称等。这些值我们都需要在Controller上通过给方法上，请求参数和返回参数上添加对应的注解，swagger才能帮我们生成相应的接口文档。</p>\n<ul>\n<li><strong>JavaBean</strong>: @ApiModel注解和 @@ApiModelProperty 注解定义了实体的名称和字段的名称  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel(&quot;创建Swagger响应结果&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerResVO</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;姓名&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;性别&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer gender;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;啥啥&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String what;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><strong>controller</strong>: @Api注解和 @ApiOperation注解分别标注了接口组名和接口的名称 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/swagger&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Api(value = &quot;用户接口&quot;, tags = &#123;&quot;用户接口&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;新增用户&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;save&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">save</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> SwaggerReqVO req)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;getById&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;根据条件查询用户&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SwaggerResVO <span class=\"title\">getById</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> SwaggerResVO req)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SwaggerResVO();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li><p>启动项目</p>\n<p> 访问 <a href=\"http://localhost:8080/doc.html\">http://localhost:8080/doc.html</a> 查看springfox-swagger2的文档中心<br> <img src=\"/swagger/1.png\" alt=\"springfox-swagger2\"></p>\n<p> 查看GET请求的界面<br> <img src=\"/swagger/2.png\" alt=\"springfox-swagger2\"><br> <img src=\"/swagger/3.png\" alt=\"springfox-swagger2\"></p>\n</li>\n<li><p>优缺点</p>\n<ul>\n<li>优点：界面美观，集成方便，不同类型的接口按照controller分组，<strong>可以导出所有的接口文档！！！！！</strong></li>\n<li>缺点：暂时没有遇到</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-2-springdoc\"><a href=\"#3-2-springdoc\" class=\"headerlink\" title=\"3.2 springdoc\"></a>3.2 springdoc</h3><ol>\n<li><p>引入依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.springdoc&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;springdoc-openapi-ui&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;<span class=\"number\">1.5</span><span class=\"number\">.8</span>&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.springdoc&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;springdoc-openapi-webmvc-core&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;<span class=\"number\">1.5</span><span class=\"number\">.8</span>&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>配置yml /yaml /properties</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">springdoc:</span></span><br><span class=\"line\">  <span class=\"attr\">api-docs:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">groups:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/api-docs</span></span><br><span class=\"line\">  <span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">disabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">swagger-ui:</span></span><br><span class=\"line\">    <span class=\"attr\">groups-order:</span> <span class=\"string\">asc</span></span><br><span class=\"line\">    <span class=\"comment\"># 自定义的文档界面访问路径。默认访问路径是/swagger-ui.html</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/springdoc/docs.html</span></span><br><span class=\"line\">  <span class=\"comment\"># 布尔值。实现OpenApi规范的打印。</span></span><br><span class=\"line\">  <span class=\"attr\">writer-with-default-pretty-printer:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n<li><p>编写配置类</p>\n<ul>\n<li>SpringdocOpenapiConfiguration  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringdocOpenapiConfiguration</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SwaggerProperties swaggerProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpringdocOpenapiConfiguration</span><span class=\"params\">(SwaggerProperties swaggerProperties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.swaggerProperties = swaggerProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> OpenAPI <span class=\"title\">springDocOpenAPI</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//配置认证、请求头参数</span></span><br><span class=\"line\">        Components components = <span class=\"keyword\">new</span> Components();</span><br><span class=\"line\"><span class=\"comment\">//        Map&lt;String, Object&gt; myHeader2extensions = new HashMap&lt;&gt;(2);</span></span><br><span class=\"line\"><span class=\"comment\">//        myHeader2extensions.put(&quot;name&quot;, &quot;myHeader2&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        components</span></span><br><span class=\"line\"><span class=\"comment\">//                .addSecuritySchemes(&quot;bearer-key&quot;, new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(&quot;bearer&quot;).bearerFormat(&quot;JWT&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">//                .addSecuritySchemes(&quot;basicScheme&quot;, new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(&quot;basic&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">//                .addHeaders(&quot;myHeader2&quot;, new Header().description(&quot;myHeader2 header&quot;).schema(new StringSchema()).extensions(myHeader2extensions))</span></span><br><span class=\"line\"><span class=\"comment\">//                .addParameters(&quot;myGlobalHeader&quot;, new HeaderParameter().required(true).name(&quot;My-Global-Header&quot;).description(&quot;My Global Header&quot;).schema(new StringSchema()).required(false))</span></span><br><span class=\"line\"><span class=\"comment\">//        ;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"comment\">// 接口调试路径</span></span><br><span class=\"line\">        Server tryServer = <span class=\"keyword\">new</span> Server();</span><br><span class=\"line\">        tryServer.setUrl(swaggerProperties.getTryHost());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OpenAPI()</span><br><span class=\"line\">                .components(components)</span><br><span class=\"line\">                .servers(Collections.singletonList(tryServer))</span><br><span class=\"line\">                .info(<span class=\"keyword\">new</span> Info()</span><br><span class=\"line\">                        .title(swaggerProperties.getApplicationName() + <span class=\"string\">&quot; Api Doc&quot;</span>)</span><br><span class=\"line\">                        .description(swaggerProperties.getApplicationDescription())</span><br><span class=\"line\">                        .version(<span class=\"string\">&quot;Application Version: &quot;</span> + swaggerProperties.getApplicationVersion() + <span class=\"string\">&quot;\\n Spring Boot Version: &quot;</span> + SpringBootVersion.getVersion())</span><br><span class=\"line\">                        .license(<span class=\"keyword\">new</span> License().name(<span class=\"string\">&quot;Apache 2.0&quot;</span>).url(<span class=\"string\">&quot;https://www.apache.org/licenses/LICENSE-2.0.html&quot;</span>))</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .externalDocs(<span class=\"keyword\">new</span> ExternalDocumentation()</span><br><span class=\"line\">                        .description(<span class=\"string\">&quot;SpringDoc Full Documentation&quot;</span>)</span><br><span class=\"line\">                        .url(<span class=\"string\">&quot;https://springdoc.org/&quot;</span>)</span><br><span class=\"line\">                );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加全局的请求头参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"comment\">//    @Bean</span></span><br><span class=\"line\"><span class=\"comment\">//    public OpenApiCustomiser customerGlobalHeaderOpenApiCustomiser() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        return openApi -&gt; openApi.getPaths().values().stream().flatMap(pathItem -&gt; pathItem.readOperations().stream())</span></span><br><span class=\"line\"><span class=\"comment\">//                .forEach(operation -&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                    operation.addParametersItem(new HeaderParameter().$ref(&quot;#/components/parameters/myGlobalHeader&quot;));</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通用拦截器排除设置，所有拦截器都会自动加springdoc-opapi相关的资源排除信息，不用在应用程序自身拦截器定义的地方去添加，算是良心解耦实现。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Field registrationsField = FieldUtils.getField(InterceptorRegistry.class, <span class=\"string\">&quot;registrations&quot;</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            List&lt;InterceptorRegistration&gt; registrations = (List&lt;InterceptorRegistration&gt;) ReflectionUtils.getField(registrationsField, registry);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (registrations != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (InterceptorRegistration interceptorRegistration : registrations) &#123;</span><br><span class=\"line\">                    interceptorRegistration.excludePathPatterns(<span class=\"string\">&quot;/springdoc**/**&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 服务器支持跨域</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCorsMappings</span><span class=\"params\">(CorsRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addMapping(<span class=\"string\">&quot;/**&quot;</span>)</span><br><span class=\"line\">                .allowedOrigins(<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">                .allowedMethods(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;OPTIONS&quot;</span>)</span><br><span class=\"line\">                .allowedHeaders(<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">                .exposedHeaders(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;Access-Control-Max-Age&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;X-Frame-Options&quot;</span>)</span><br><span class=\"line\">                .allowCredentials(<span class=\"keyword\">false</span>)</span><br><span class=\"line\">                .maxAge(<span class=\"number\">3600</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>SwaggerProperties  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;swagger&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerProperties</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 项目应用名</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String applicationName;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 项目版本信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String applicationVersion;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 项目描述信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String applicationDescription;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 接口调试地址</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tryHost;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>编写接口方法<ul>\n<li>在controller上添加@Tag注解</li>\n<li>在接口方法上添加@Operation 注解</li>\n<li>在接口参数添加@Parameter 或@Parameters 注解<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Tags(&#123;</span></span><br><span class=\"line\"><span class=\"meta\">  @Tag(name = &quot;ExpirationWarningController&quot;, description = &quot;设备寿命到期预警&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExpirationWarningController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//需要使用@Operation竹节</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/getOne/&#123;id&#125;/&#123;type&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Operation(summary = &quot;按ID查询&quot;, description = &quot;按ID查询&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResponseResult <span class=\"title\">getOne</span><span class=\"params\">(<span class=\"meta\">@Parameter(description = &quot;主键ID&quot;)</span> <span class=\"meta\">@PathVariable</span> Integer id,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"meta\">@Parameter(description = &quot;类型&quot;)</span> <span class=\"meta\">@PathVariable</span> String type)</span> </span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseResult.success(expirationWarningVO);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/save&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@Operation(summary = &quot;保存&quot;, description = &quot;保存&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResponseResult <span class=\"title\">save</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> ExpirationWarning expirationWarning)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>在springboot启动类上加上以下配置<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@OpenAPIDefinition(</span></span><br><span class=\"line\"><span class=\"meta\">    info = @Info(</span></span><br><span class=\"line\"><span class=\"meta\">        title = &quot;测试springdoc&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">        version = &quot;1.0&quot;</span></span><br><span class=\"line\"><span class=\"meta\">    ),</span></span><br><span class=\"line\"><span class=\"meta\">    externalDocs = @ExternalDocumentation(description = &quot;swagger-api参考文档&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">        url = &quot;https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Annotations&quot;</span></span><br><span class=\"line\"><span class=\"meta\">    ),</span></span><br><span class=\"line\"><span class=\"meta\">    servers = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">        @Server(</span></span><br><span class=\"line\"><span class=\"meta\">            url = &quot;http://localhost:8123/app&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">            description = &quot;本地地址&quot;</span></span><br><span class=\"line\"><span class=\"meta\">        ),</span></span><br><span class=\"line\"><span class=\"meta\">        @Server(</span></span><br><span class=\"line\"><span class=\"meta\">            url = &quot;http://www.xiaoyuge.vip/app&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">            description = &quot;公网测试环境&quot;</span></span><br><span class=\"line\"><span class=\"meta\">        )</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResolutionApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(ResolutionApplication.class, args);</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;============= Start Success =============&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>启动项目</p>\n<p>访问 <a href=\"http://localhost:8123/app/springdoc/swagger-ui/index.html\">http://localhost:8123/app/springdoc/swagger-ui/index.html</a> 查看springdox的文档中心<br><img src=\"/swagger/4.png\" alt=\"springdoc\"><br><img src=\"/swagger/5.png\" alt=\"springdoc\"></p>\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>优缺点</p>\n<ul>\n<li><p>优点：不好说</p>\n</li>\n<li><p>缺点：界面没有按照每个controller分组，不直观！；</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-3-Apifox\"><a href=\"#3-3-Apifox\" class=\"headerlink\" title=\"3.3 Apifox\"></a>3.3 Apifox</h3><p>一款研发全流程，接口全周期的生产力工具，这款软件真正完成了数据流的打通，在一个软件上就能实现<strong>接口设计–接口文档–接口调试–接口修改–接口mock–接口测试–接口自动化–接口迭代</strong>的工作流闭环；</p>\n<h4 id=\"3-3-1-Apifox上的协作流程\"><a href=\"#3-3-1-Apifox上的协作流程\" class=\"headerlink\" title=\"3.3.1 Apifox上的协作流程\"></a>3.3.1 Apifox上的协作流程</h4><ol>\n<li>后端在Apifox可视化接口设计界面上定义好项目各个接口及对应参数同时编写接口文档说明</li>\n<li>前后端一起评审，修改完善接口并在同一界面顺手更新接口文档</li>\n<li>后端使用接口调试功能调试接口</li>\n<li>前端使用零配置高仿真mock功能对前端页面进行调试，无需手写mock规则</li>\n<li>后端使用代码生成功能直接生成接口代码</li>\n<li>测试在接口管理页面一键生成接口参数测试用例,并依据业务场景生成自动化测试用例，一键运行接口用例并生成接口测试报告并分享给相关人员。</li>\n<li>前后端 都开发完，前端从Mock 数据切换到正式数据，进行联调，由于使用同一个接口数据源，且遵循了接口规范，联调顺利</li>\n<li>由于bug修复或需求变更，接口发生了变化，后端修改提交后，前端和测试实时同步到了修改后的数据</li>\n<li>项目经理通过权限设置给研发,产品,测试,外部合作人员分配编辑,只读等各种操作权限，维护了项目安全</li>\n<li>项目经理通过各个接口的状态开发中,测试中,已发布来跟进项目的进度情况，把控项目风险。</li>\n</ol>\n<h4 id=\"3-3-2-Apifox做的增速提效优化\"><a href=\"#3-3-2-Apifox做的增速提效优化\" class=\"headerlink\" title=\"3.3.2 Apifox做的增速提效优化\"></a>3.3.2 Apifox做的增速提效优化</h4><ul>\n<li><p>接口设计：从代码生成界面到可视化接口设计界面</p>\n<p>Apifox 接口文档遵循 OpenApi 3.0 (原 Swagger)、JSON Schema 规范，可生成在线文档；零学习成本即可编写出符合RESTful风格的接口文档，新人上手快；所见即所得，不易出错<br><img src=\"/swagger/6.png\" alt=\"Apifox\"><br><img src=\"/swagger/7.png\" alt=\"Apifox\"></p>\n</li>\n<li><p>文档维护：从接口与文档分离到接口与文档合并</p>\n<p>Apifox的接口设计界面提供了Markdown格式的文档说明区，修改完接口就如同commit代码时添加变更说明般<br><img src=\"/swagger/8.png\" alt=\"Apifox\"></p>\n</li>\n<li><p>数据复用：从各自为政到定义一次、多次复用</p>\n<ul>\n<li><p>接口数据复用：Swagger，Postman，MockJS，Jmeter等软件彼此之间数据不互通，数据格式不一致，接口导入非常耗时麻烦。<br>而Apifox能身兼多职，包揽上述软件功能，在Apifox中定义一次接口，能被后端直接用来调试，前端直接用来mock界面，测试直接执行接口自动化。</p>\n</li>\n<li><p>数据模型复用：可复用的数据结构，定义接口返回数据结构及请求参数数据结构（仅 JSON 和 XML 模式）时可直接引用。</p>\n</li>\n</ul>\n</li>\n<li><p>同步更新，高效沟通:从沟通滞后到数据变更即时同步</p>\n<p>Apifox为此提供了同步功能，一旦接口数据有更新发生，就会即时同步更新并通知到项目内所有成员。</p>\n</li>\n</ul>\n<ul>\n<li><p>Apihub</p>\n<p>内置企业微信开放API，抖音开放API等第三方接口开放项目，接口可以直接在Apifox中调试，不需要到处找接口文档和手工填写接口</p>\n<h4 id=\"3-3-3-下载地址\"><a href=\"#3-3-3-下载地址\" class=\"headerlink\" title=\"3.3.3 下载地址\"></a>3.3.3 下载地址</h4><p>官网地址： <a href=\"http://www.apifox.cn/?utm_medium=WCSA&amp;utm_source=xxzsq\">http://www.apifox.cn/?utm_medium=WCSA&amp;utm_source=xxzsq</a></p>\n</li>\n</ul>\n"},{"title":"mycat学习","comments":1,"abbrlink":754,"date":"2021-07-23T08:16:49.000Z","translate_title":"mycat_learning","_content":"# Mycat(分库分表中间件)\n\n## 1. 数据库优化策略\n\n1.  重启：释放资源\n2.  SQL与索引\n3.  表与存储引擎（字段类型选择，长度设置，是否需要分表、分区）\n4.  数据库与应用架构（考虑使用缓存服务器，减轻是数据库压力；可以数据库分布式，读写分离，主从复制）\n5.  数据库与操作系统配置（修改mysql配置，使用单独服务器部署数据库）\n6.  硬件\n\n## 2. 数据库演化\n\n根据业务需要、数据量变化，随之而来的数据库的变化\n\n1.  数据库与应用部署在同一台服务器\n![mycat](./mycat/image-20201104204430049.png)\n2.  单体应用架构，单数据库（数据库服务器和应用服务器分离，但是业务系统越做越大）\n    ![mycat](./mycat/image-20201104204624925.png)\n\n3.  多应用单数据库（应用解耦）\n    ![mycat](./mycat/image-20201104204933409.png)\n\n4.  多应用 独立数据库\n    ![mycat](./mycat/image-20201104205054233.png)\n\n5.  但应用多数据库(分表)\n    ![mycat](./mycat/image-20201104205319372.png)\n\n## 3. 如何分库分表\n![mycat](./mycat/image-20201104205653611.png)\n\n-   垂直切分\n\n    -   单库\n        ![mycat](./mycat/image-20201104205756827.png)\n\n    -   多库\n        ![mycat](./mycat/image-20201104210008624.png)\n\n-   水平切分\n\n    -   按照月分表或者分成实时、历史表等\n        ![mycat](./mycat/image-20201104210117373.png)\n\n    -   分成多库\n        ![mycat](./mycat/image-20201104210416994.png)\n\n## 4. 分库分表带来的问题\n\n1.  跨库关联查询\n\n    -   增加冗余字段（违反了第三范式：表中的所有数据元素不但要能唯一地被主关键字所标识,而且它们之间还必须相互独立,不存在其他的函数关系）\n    -   跨数据库的同步（canal、Mq（最好）、ETL、kettle、ogg）(在某个库中同步其他数据库中表的数据，避免跨库关联查询)\n    -   全局表(广播表)：比如行政区划表，所有的系统都是一样的；\n    -   API\n\n2.  分布式事务\n\n    -   Local\n\n3.  排序、翻页、函数计算\n\n    -\n\n4.  全局主键\n\n    -   雪花算法leaf\n    -   redis(int 类型可以设置incby)\n    -   ZookKeeper\n    -   uuid(数据过长， 影响索引存储)\n\n5.  多数据源连接（动态数据源）\n    ![mycat](./mycat/image-20201104213343204.png)\n\n## 5. Mycat分库分表中间件\n\n**官网地址**：http://www.mycat.org.cn/\n\n从阿里cobar升级而来，完全实现了mysql协议，可以当作一个mysql数据库来使用，通过JDBC支持其他数据库实现分库分表，解决了**多表join、分布式事务、全局序列号、翻页查询、函数计算**的问题\n\n*   一个彻底开源的，面向企业应用开发的大数据库集群\n*   支持事务、ACID、可以替代MySQL的加强版数据库\n*   一个可以视为MySQL集群的企业级数据库，用来替代昂贵的Oracle集群\n*   一个融合内存缓存技术、NoSQL技术、HDFS大数据的新型SQL Server\n*   结合传统数据库和新型分布式数据仓库的新一代企业级数据库产品\n*   一个新颖的数据库中间件产品\n\n华为云的DDM其实也是根据mycat做的\n\n### 5.1 核心概念\n\n![image-20201104215015366](./mycat/image-20201104215015366.png)\n\n### 5.2 Mycat安装与配置\n\n#### 5.2.1 Mycat安装\n\n从官网下载安装版本，解压到文件(官网建议安装在/usr/local/Mycat)后页面如下图所示：\n![image-20201127094703483](./mycat/image-20201127094703483.png)\n\n目录解释如下：\n\n- **bin：**存放window版和linux版本除了提供封装成服务的版本之外，也提供了nowrap的shell脚本命令，方便选择和修改；Linux下运行:./mycat console， 首先要chmod + x*;(mycat支持的命令console、start、stop、restart、status、dump)\n- **conf：**server.xml是mycat服务器参数调整和用户授权的配置文件，schema.xml是逻辑库定义和表以及分片定义的配置文件，rule.xml是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改，需要重启mycat或者通过9066端口reload\n- **lib:**主要存放mycat依赖的一些jar文件\n- **logs:**日志存放在mycat.log中，每天一个文件，日志的配置是在conf/log4j.xml中，根据自己的需要，可以调整输出级别为debug，方便排查问题；注意Linux下部署安装mysql，默认不忽略，需要手动到/etc/my.cnf下配置**lower_case_table_names=1**使Linux环境下MySQL忽略表明大小写，否则使用mycat的时候会提示找不到表的错误\n\n#### 5.2.2 服务启动与配置\n\nMycat在Linux中部署启动时，首先需要在Linux系统的环境变量中配置MYCAT_HOE,操作方式如下：\n\n1. vi /etc/profile，在系统环境变量文件中增加MYCAT_HOME=/usr/lib/tools/mycat\n   ![image-20201127103212598](./mycat/image-20201127103212598.png)\n\n2. 执行 source/etc/profile命令，使环境变量生效。如果是多台Linux系统中组件Mycat集群，那需要在mycat Server所在的服务器配置对其他ip和主机名的映射，配置方式如下：\n   ![image-20201127104159580](./mycat/image-20201127104159580.png)\n\n   经过以上两个步骤的配置，就可以到/usr/lib/tools/mycat/bin目录下执行./mycat start启动mycat服务；使用mycat status查看mycat的运行状态；如下图\n   ![image-20201128135953635](./mycat/image-20201128135953635.png)\n\n##### 5.2.2.1 安装遇到的问题\n\n1. schema TESTDB refered by user root is not exist!![image-20201215152125176](./mycat/image-20201215152125176.png)\n\n   解决方式：\n\n    ```xml\n    <!--在conf/server.xml文件中schemas中配置schema.xml文件中的schema的name值-->\n    \n    <!--user中的name为mycat服务的用户名-->\n     <user name=\"root\" defaultAccount=\"true\">\n         <!--这个是mycat服务连接的密码-->\n          <property name=\"password\">123456</property>\n          <property name=\"schemas\">xiaoyuge</property>\n    </user>\n    ```\n\n\n\n#### 5.2.3日志分析\n\nmycat的日志文件配置为MYCAT_HOME/conf/log4j.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n    <log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\n    <appender name=\"ConsoleAppender\" class=\"org.apache.log4j.ConsoleAppender\">\n    <layout class=\"org.apache.log4j.PatternLayout\">\n    <param name=\"ConversionPattern\" value=\"%d{MM-dd HH:mm:ss.SSS} %5p [%t] (%F:%L) -%m%n\" />\n\t</layout>\n\t</appender>\n\t<appender name=\"FILE\" class=\"org.apache.log4j.RollingFileAppender\">\n        <!--日志文件存放的目录-->\n        <param name=\"file\" value=\"${MYCAT_HOME}/logs/mycat.log\" />\n        <param name=\"Append\" value=\"false\"/>\n        <param name=\"MaxFileSize\" value=\"10000KB\"/>\n        <param name=\"MaxBackupIndex\" value=\"10\"/>\n        <param name=\"encoding\" value=\"UTF-8\" />\n        <layout class=\"org.apache.log4j.PatternLayout\">\n        <param name=\"ConversionPattern\" value=\"%d{MM/dd HH:mm:ss.SSS} %5p [%t] (%F:%L) -%m%n\" />\n\t</layout>\n\t</appender>\n\t<root>\n        <!--level是日志级别，生产环境下加以将级别调整为info/ware，如果是研究测试，碰到异常设置为debug-->\n\t\t<level value=\"debug\" />\n\t\t<appender-ref ref=\"ConsoleAppender\" />\n\t</root>\n</log4j:configuration>\n```\n\n##### 5.2.3.1 warpper日志\n\n目前mycat的启动时经过warpper封装成启动脚本，所以日志也会有其相关的日志文件：${MYCAT_HOME}/logs/warapper.log， 在启动的时候如果系统环境配置错误或缺少配置时，导致mycat无法启动，可以通过查看wrapper.log查看具体错误原因。\n\n1. 正常启动\n\n    ```verilog\n    STATUS | wrapper | 2015/04/12 15:05:00 | --> Wrapper Started as Daemon\n    STATUS | wrapper | 2015/04/12 15:05:00 | Launching a JVM...\n    INFO | jvm 1 | 2015/04/12 15:05:01 | Wrapper (Version 3.2.3) http://wrapper.tanukisoftware.org\n    INFO | jvm 1 | 2015/04/12 15:05:01 | Copyright 1999-2006 Tanuki Software, Inc. AllRights Reserved.\n    INFO | jvm 1 | 2015/04/12 15:05:01 |\n    INFO | jvm 1 | 2015/04/12 15:05:01 | log4j 2015-04-12 15:05:01 [./conf/log4j.xml]load completed.\n    INFO | jvm 1 | 2015/04/12 15:05:02 | MyCAT Server startup successfully. see logs in logs/mycat.log\n    ```\n\n2. 启动异常\n\n    ```verilog\n    STATUS | wrapper | 2015/02/14 01:43:44 | --> Wrapper Started as Daemon\n    STATUS | wrapper | 2015/02/14 01:43:44 | Launching a JVM...\n    INFO | jvm 1 | 2015/02/14 01:43:45 | Error: Exception thrown by the agent : java.rmi.server.ExportException:\n    Port already in use: 1984; nested exception is:\n    INFO | jvm 1 | 2015/02/14 01:43:45 | java.net.BindException: Address already in use\n    ERROR | wrapper | 2015/02/14 01:43:45 | JVM exited while loading the application.\n        \n    # 日志显示异常原因为 java.net.BindException: Address already in use,也就是端口占用，很有可能是原有服\n    务未停止，或者 Mycat 默认端口被其他程序占用，正常启动成功后会有 mycat.log 日志，如果服务未启动成功不会有对应的日志。 也可以去修改 conf 文件夹里的 wrapper.conf 里的 wrapper.java.additional.7=-Dcom.sun.management.jmxremote.port=1984，server.xml 的<property name=\"serverPort\">8066</property>和\n    <property name=\"managerPort\">9066</property>，这方法适\n    合一台机器上两个 mycat 或者 1984,8066,9066 端口被其它应用占用的情况\n    ```\n\n\n\n##### 5.2.3.2 mycat日志\n\n\n\n#### 5.2.4 mycat防火墙设置\n\n白名单和SQL黑名单说明：\n\n```xml\n<!--在 server.xml 中配置：-->\n<firewall>\n     <!--ip 白名单列表，可以配置多个-->\n    <whitehost>\n        <!--ip 白名单 用户对应的可以访问的 ip 地址-->\n    \t<host user=\"mycat\" host=\"127.0.0.1\"></host> \n    </whitehost>\n     <!-是否开启检查黑名单列表-->\n    <blacklist check=\"true\">\n        <!--黑名单允许的 权限 后面为默认-->\n    \t<property name=\"selelctAllow\">false</property>\n    </blacklist>\n</firewall>\n```\n\n**黑名单配置拦截明细如下：**\n\n|         配置项         | 缺省值 |                             描述                             |\n| :--------------------: | :----: | :----------------------------------------------------------: |\n|     rollbackAllow      |  true  | 是否允许执行 roll back 操作,如果把 selectIntoAllow、deleteAllow、updateAllow、insertAllow、mergeAllow 都设置为 false，这就是一个只读数据源了。 |\n|      selectAllow       |  true  |                    是否运行执行SELECT语句                    |\n|  selectAllColumnAllow  |  true  | 是否允许执行 SELECT * FROM T 这样的语句。如果设置为 false，不允许执行 select * from t，但 select * from (select id, name from t) a。这个选项是防御程序通过调用 select *获得数据表的结构信息 |\n|    selectIntoAllow     |  true  |               SELECT 查询中是否允许 INTO 字句                |\n|      deleteAllow       |  true  |                   是否允许执行 DELETE 语句                   |\n|      updateAllow       |  true  |                   是否允许执行 UPDATE 语句                   |\n|      insertAllow       |  true  |                   是否允许执行 INSERT 语句                   |\n|      replaceAllow      |  true  |                  是否允许执行 REPLACE 语句                   |\n|       mergeAllow       |  true  |       是否允许执行 MERGE 语句，这个只在 Oracle 中有用        |\n|       callAllow        |  true  |          是否允许通过 jdbc 的 call 语法调用存储过程          |\n|        setAllow        |  true  |                    是否允许使用 SET 语法                     |\n|     truncateAllow      |  true  |        truncate 语句是危险，缺省打开，若需要自行关闭         |\n|    createTableAllow    |  true  |                        是否允许创建表                        |\n|    alterTableAllow     |  true  |                是否允许执行 Alter Table 语句                 |\n|     dropTableAllow     |  true  |                        是否允许修改表                        |\n|      commentAllow      | false  | 是否允许语句中存在注释，Oracle 的用户不用担心，Wall 能够识别 hints和注释的区别 |\n| noneBaseStatementAllow | false  | 是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项 就能够屏蔽 DDL。 |\n|  multiStatementAllow   | false  |              是否允许一次执行多条语句，缺省关闭              |\n|        useAllow        |  true  |           是否允许执行 mysql 的 use 语句，缺省打开           |\n|     describeAllow      |  true  |        是否允许执行 mysql 的 describe 语句，缺省打开         |\n|       showAllow        |  true  |          是否允许执行 mysql 的 show 语句，缺省打开           |\n|      commitAllow       |  true  |                   是否允许执行 commit 操作                   |\n\n**拦截配置=-永真条件：**\n\n|           配置项            | 缺省值 |                             描述                             |\n| :-------------------------: | :----: | :----------------------------------------------------------: |\n|  selectWhereAlwayTrueCheck  |  true  |       检查 SELECT 语句的 WHERE 子句是否是一个永真条件        |\n| selectHavingAlwayTrueCheck  |  true  |       检查 SELECT 语句的 HAVING 子句是否是一个永真条件       |\n|  deleteWhereAlwayTrueCheck  |  true  |       检查 DELETE 语句的 WHERE 子句是否是一个永真条件        |\n|    deleteWhereNoneCheck     | false  | 检查 DELETE 语句是否无 where 条件，这是有风险的，但不是 SQL 注入类型的风险 |\n|  updateWhereAlayTrueCheck   |  true  |       检查 UPDATE 语句的 WHERE 子句是否是一个永真条件        |\n|    updateWhereNoneCheck     | false  | 检查 UPDATE 语句是否无 where 条件，这是有风险的，但不是SQL 注入类型的风险 |\n| conditionAndAlwayTrueAllow  | false  |    检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永真条件    |\n| conditionAndAlwayFalseAllow | false  |    检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永假条件    |\n|   conditionLikeTrueAllow    |  true  |   检查查询条件(WHERE/HAVING 子句)中是否包含 LIKE 永真条件    |\n\n**其他拦截配置：**\n\n|          配置项           | 缺省值 |                             描述                             |\n| :-----------------------: | :----- | :----------------------------------------------------------: |\n|  selectIntoOutfileAllow   | false  | SELECT ... INTO OUTFILE 是否允许，这个是 mysql 注入攻击的常见手段，缺省是禁止的 |\n|     selectUnionCheck      | true   |                      检测 SELECT UNION                       |\n|     selectMinusCheck      | true   |                      检测 SELECT MINUS                       |\n|     selectExceptCheck     | true   |                      检测 SELECT EXCEPT                      |\n|   selectIntersectCheck    | true   |                    检测 SELECT INTERSECT                     |\n|     mustParameterized     | false  | 是否必须参数化，如果为 True，则不允许类似 WHERE ID = 1 这种不参数化的 SQL |\n|     strictSyntaxCheck     | true   | 是否进行严格的语法检测，Druid SQL Parser 在某些场景不能覆盖所有的，SQL 语法，出现解析 SQL 出错，可以临时把这个选项设置为 false，同时把 SQL 反馈给 Druid 的开发者 |\n|    conditionOpXorAllow    | false  | 查询条件中是否允许有 XOR 条件。XOR 不常用，很难判断永真或者永假，缺省不允许。 |\n|  conditionOpBitwseAllow   | true   |               查询条件中是否允许有\"&\"、\"~\"、\"                |\n| conditionDoubleConstAllow | false  |           查询条件中是否允许连续两个常量运算表达式           |\n|        minusAllow         | true   |  是否允许 SELECT * FROM A MINUS SELECT * FROM B 这样的语句   |\n|      intersectAllow       | true   | 是否允许 SELECT * FROM A INTERSECT SELECT * FROM B 这样的语句 |\n|   constArithmeticAllow    | true   | 拦截常量运算的条件，比如说 WHERE FID = 3 - 1，其中\"3 - 1\"是常量运算表达式。 |\n|      limitZeroAllow       | false  |                 是否允许 limit 0 这样的语句                  |\n\n**禁用对象检测配置：**\n\n|     配置项     | 缺省值 |                             描述                             |\n| :------------: | :----: | :----------------------------------------------------------: |\n|   tableCheck   |  true  |                    检测是否使用了禁用的表                    |\n|  schemaCheck   |  true  |                 检测是否使用了禁用的 Schema                  |\n| functionCheck  |  true  |                   检测是否使用了禁用的函数                   |\n|  objectCheck   |  true  |                  检测是否使用了“禁用对对象”                  |\n|  variantCheck  |  true  |                  检测是否使用了“禁用的变量”                  |\n| readOnlyTables |   空   | 指定的表只读，不能够在 SELECT INTO、DELETE、UPDATE、INSERT、MERGE 中作为\"被修改表\"出现 |\n\n#### 5.2.5 mycat配置文件\n\n##### 5.2.5.1 schema.xml配置\n\nschema.xml作为mycat中重要的配置文件之一，管理者mycat的逻辑库、表、分片规则、DataNode以及DataSource。\n\n##### 5.2.5.2 scheme标签\n\n```xml\n<schema name=\"TESTDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\"></schema>\n```\n\nschema标签用于定义mycat实例中的逻辑库，mycat可以由多个逻辑库，每个逻辑库都有自己的相关配置，可以使用schema标签来划分这些不同的逻辑库。如果不配置schema标签，所有的表配置，会属于同一个默认的逻辑库。\n\n```xml\n<!--逻辑库TESTDB-->\n<schema name=\"TESTDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\">\n\t<table name=\"travelrecord\" dataNode=\"dn1,dn2,dn3\" rule=\"auto-sharding-long\" ></table>\n</schema>\n<!--USERDB-->\n<schema name=\"USERDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\">\n\t<table name=\"company\" dataNode=\"dn10,dn11,dn12\" rule=\"auto-sharding-long\" ></table>\n</schema>\n<!--\n\t逻辑库的概念和MySQL数据库中的database概念相同，我们在查询这两个不同的逻辑库中表的时候需要切换到该逻辑库下才可以查询到所需要的表\n-->\n```\n\n在server.xml中可以配置不同的用户能够使用的schema\n\n```xml\n        <user name=\"root\" defaultAccount=\"true\">\n                <property name=\"password\">root</property>\n                <property name=\"schemas\">TESTDB</property>\n                <property name=\"defaultSchema\">TESTDB</property>\n                <!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 -->\n\n                <!-- 表级 DML 权限设置 -->\n                <!--\n                <privileges check=\"false\">\n                        <schema name=\"TESTDB\" dml=\"0110\" >\n                                <table name=\"tb01\" dml=\"0000\"></table>\n                                <table name=\"tb02\" dml=\"1111\"></table>\n                        </schema>\n                </privileges>\n                 -->\n        </user>\n\n        <user name=\"user\">\n                <property name=\"password\">user</property>\n                <property name=\"schemas\">TESTDB</property>\n                <property name=\"readOnly\">true</property>\n                <property name=\"defaultSchema\">TESTDB</property>\n        </user>\n\n```\n![](./mycat/image-20201129110838590.png)\n\nschema标签的相关属性：\n\n|     属性名     |     值     | 数量限制 |\n| :------------: | :--------: | :------: |\n|    dataNode    | 任意string | （0..1） |\n| checkSQLschema |  Boolean   |  （1）   |\n|  sqlMaxLimit   |  Integer   |  （1）   |\n\n###### 5.2.5.2.1  dataNode\n\n该属性用于绑定逻辑库到某个具体的database上，1.3版本如果配置了dataNode,则不可以配置分片表，1.4可以配置默认分片，只需要配置需要分片的表即可，具体配置如下：\n\n```xml\n<!--1.3版本配置--><schema name=\"USERDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\" dataNode=\"dn1\"><!—里面不能配置任何表--></schema><!--1.4版本配置--><schema name=\"USERDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\" dataNode=\"dn2\"><!—配置需要分片的表-->\t<table name=“tuser” dataNode=”dn1”/></schema><!-- \t那么现在tuser就绑定到dn1所配置的具体database上，可以直接访问这个database，没有配置的表则会走默认的节点dn2，这里注意没有配置在分片里面的表工具查看无法显示，但是可以正常使用。-->\n```\n\n###### 5.2.5.2.2 checkSQLschema\n\n当改制设置为true时，我们执行“SELECT * FROM TESTDB.travelrecord；”则mycat会把语句修改为“SELECT * FROM travelrecord;”即把表示schema的字符去掉，避免发送到后端数据库执行报ERROR 1146：Table 'testdb.travelrecord' doest't exist.不过，即使设置该值为 true ，如果语句所带的是并非是 schema 指定的名字，例如：**select * from db1.travelrecord;** 那么 MyCat 并不会删除 db1 这个字段，如果没有定义该库的话则会报错，所以在提供 SQL语句的最好是不带这个字段。\n\n###### 5.2.5.2.3 sqlMaxLimit\n\n当该值设置为某个数值时。每条执行的 SQL 语句，如果没有加上 limit 语句，MyCat 也会自动的加上所对应的值。例如设置值为 100，执行**select * from TESTDB.travelrecord;**的效果为和执行**select * from TESTDB.travelrecord limit 100;**相同。\n\n设置该值的话，MyCat 默认会把查询到的信息全部都展示出来，造成过多的输出。所以，在正常使用中，还是建议加上一个值，用于减少过多的数据返回。\n\n当然 SQL 语句中也显式的指定 limit 的大小，不受该属性的约束。\n\n需要注意的是，如果运行的 schema 为非拆分库的，那么该属性不会生效。需要手动添加 limit 语句。\n\n### 5.2 分配规则\n\n![image-20201104222632963](./mycat/image-20201104222632963.png)\n![image-20201104221336437](./mycat/image-20201104221336437.png)\n\n-   范围分片：根据某个字设置auto-sharding-long，如果这个primaryKey超出了范围会报错\n\n-   取模分片：\n\n-   ER分片（将父子表有关联的数据放在一个data-node里面）\n\n    ![image-20201104221659540](./mycat/image-20201104221659540.png)\n\n-   全局表：所有dataNode存储相同的数据，查询的时候是随机查询某个表 type=global，查询的时候随机从某个datanode获取\n\n-   非分片表：只在某个dataNode上存储,指定一个dataNode并且不写分片规则\n\n-   单库分表：有个bug在实际数据库中必须要创建mycat中一摸一样的数据表，而且truncat的时候要现在dataNode先删除，才能删除的掉mycat的数据\n\n\n\n### 5.3 全局ID\n\n![image-20201104223246735](./mycat/image-20201104223246735.png)\n\n-   文件方式---0\n-   数据库方式---1\n-   本地时间戳----2\n-   ZK方式----3\n\n## 6. Mycat分片策略详解\n\n连续分片与离散分片\n\n![image-20201107201442912](./mycat/image-20201107201442912.png)\n\n**连续分片**：\n\n-   范围分片\n-   日期/事件\n\n\n\n缺点：\n\n-   存在数据热点的可能性\n-   并发访问能力受限于单一或少量DataNode（访问集中），并不能分摊数据库访问的压力\n\n**离散**：\n\n-   取模（partioncount 的总数必须和分片总数相同）\n\n-   枚举\n\n-   一致性哈希(qs-murmur)\n\n-   固定分片哈希\n\n    -   partitionCount: 2, 1表示有三个分片必须和节点数量一致，否则会报错，前面两个一样长\n\n    -   partitionLength: 256, 512表示长度为256和512\n\n    -   综合在一起就是前面2个分片长度为256， 最后一个为512，结果如下图所示（注意partitionCount和partitionLength的数量一定要一致）\n\n    -   ![image-20201219103201836](./mycat/image-20201219103201836.png)\n\n        ![image-20201219102742172](./mycat/image-20201219102742172.png)\n\n-   取模范围(sharting-by-pattern)：先取模PartitionByPattern后分片\n\n-   范围取模: PartitionByRangeMod(partition-rane-mod.txt)\n\n    -   ```txt\n        0-2000=1\t\t#范围在2000以内的在第一个节点（取模的结果还是本身）\n        2001-4000=2\t\t#范围在2001到4000以内的再模2，结果为0在第一个节点，结果为1在第三个节点\n        ```\n\n-   其他\n\n优点：\n\n-   并发访问能力增强（负载到不同的节点）\n-   范围条件查询性能提升（并行计算）\n\n缺点：\n\n-   数据扩容比较困难，设计到数据迁移问题\n-   数据库连接消耗比较多\n\n分片策略的选择：\n\n1） 确定分片表\n\n2） 找出分片键\n\n3） 考虑容量、增速、业务用户\n\n如果在查询语句中没有携带分片建，那么mycat会将sql发布到所有的节点上\n\n## 7. Mycat扩缩容\n\n### 7.1 在线不停机扩缩容（双写）\n\n![image-20201107205855474](./mycat/image-20201107205855474.png)\n\n\n\n### 7.2 离线扩缩容\n\n#### 7.2.1Mysql Dump\n\n```shell\nmysqldump -uroot -p123456 -h127.0.0.1 -p3306 -c -t --skip-extended-insert 数据库名称 > mysql.11.11.sql\n```\n\n#### 7.2.2 Mycat自带工具\n\n1.  mycat所在环境安装mysql客户端程序\n2.  mycat的lib目录下添加mysql的jdbc驱动包（mysql-connector-java-5.7.1.jar）\n3.  对扩容缩容的表所有节点数据进行备份\n4.  复制schema.xml、rule.xml并重命名为newSchema.xml、newRule.xml\n5.  修改newSchema.xml和newRule.xml配置文件为扩容缩容后的参数\n6.  在conf/migrateTable.properties配置文件中配置分片库和分片表如：imall=table_test1\n7.  dataMigrate.sh配置mysqldump路径\n8.  停止mycat服务\n9.  执行bin/dataMigrate.sh脚本（不能用openjdk）\n10.  替换schema.xml、rule.xml\n\n\n\n**注意事项：**\n\n-   保证分片表迁移数据前后路由规则一致（取模-->取模）\n-   保证分片表歉意数据前后分片字段一致\n-   全局表将被忽略\n-   不要将非分片表配置到migrateTables.properties文件中\n-   暂时只支持分片表使用Mysql作为数据源的扩容缩容\n\n## 8. Mycat读写分离\n\n### 8.1 主从复制\n\n1.  数据备份回复\n2.  负载均衡（读写分离）\n3.  高可用HA\n\n### 8.2 主从复制形式;\n\n![image-20201107212552852](./mycat/image-20201107212552852.png)\n\n#### binlog(Binary log 二进制日志)\n\n```sql\n--查看binglog: SHOW binlog events in 'mysql-bin.000001'\n--show variables like 'max_blog_max'\n```\n\n#### binlog配置\n\n-   STATEMENT: 记录每一天修改数据的sql语句（减少日志量，节约IO）\n-   ROW: 记录哪条数据被修改了，修改成什么样子了（5.7以后默认）\n-   MIXED: 结合两种方式，一般语句用STATEMENT,函数之类的使用ROW\n\n**binlog**格式（mysql-bin.00001等）\n\n**查看binlog**\n\n```sql\nshow binlog events in 'mysql-bin.00001';\n```\n\n### 主从复制原理\n\nSQL Thread是单线程的， 这也是所有的主从复制延迟的原因，那么relay log接受master节点的sql语句主要是用于缓冲\n\n![image-20201107213638624](./mycat/image-20201107213638624.png)\n\n### mycat读写分离配置\n\n![image-20201107213859155](./mycat/image-20201107213859155.png)\n\n### 8.5 Mycat注解（hint）\n\n注解用法：\n\n```tex\n\t/*!mycat:sql=注解sql语句*/真正执行的SQL\n\t\n\t比如说在mycat上创建表无法创建成功，可以使用注解\n\t/*!mycat:sql=select * from table_1 where id = 1*/create table test2(id int);\n\t主要注解sql可以确认mycat可以路由到子结点上，就可以执行后面的真正执行的sql语句\n```\n\n注解用途：\n\n-   跨库关联查询\n-   DDL或存储过程\n-   自定义分片\n-   读写分离\n\n### 分布式事务\n\n基于XA协议的两阶段提交\n\n![image-20201107215437139](./mycat/image-20201107215437139.png)\n\n#### XA角色\n\n![image-20201107215605251](./mycat/image-20201107215605251.png)\n\n#### XA实现\n\n![image-20201107220049532](./mycat/image-20201107220049532.png)\n\n\n\n## 9. Mycat核心流程\n\n### 9.1 架构图\n\n![image-20201220170713526](./mycat/image-20201220170713526.png)\n\n### 9.2 启动流程\n\n1.  MycatServer启动，解析配置文件，包括服务器、分片规则等\n2.  创建工作线程，建立前端连接和后端连接\n\n### 9.3 执行SQL流程\n\n1.  前端连接接收mysql命令\n2.  解析MySQL，mycat用的是Druid的DruidParser\n3.  获取路由\n4.  改写MySQL，例如两个条件在两个节点上，则变成两条单独的sql\n5.  与后端数据库建立连接\n6.  发送sql语句到MySQL执行\n7.  获取返回结果\n8.  处理返回结果，例如排序、计算等等\n9.  返回给客户端\n\n\n\n## Mycat高可用\n\n![image-20201220172406074](./mycat/image-20201220172406074.png)\n\n","source":"_posts/2021/07/mycat.md","raw":"---\ntitle: mycat学习\ntags: mycat\ncategories: 中间件\ncomments: true\nabbrlink: 754\ndate: 2021-07-23 16:16:49\ntranslate_title: mycat_learning\n---\n# Mycat(分库分表中间件)\n\n## 1. 数据库优化策略\n\n1.  重启：释放资源\n2.  SQL与索引\n3.  表与存储引擎（字段类型选择，长度设置，是否需要分表、分区）\n4.  数据库与应用架构（考虑使用缓存服务器，减轻是数据库压力；可以数据库分布式，读写分离，主从复制）\n5.  数据库与操作系统配置（修改mysql配置，使用单独服务器部署数据库）\n6.  硬件\n\n## 2. 数据库演化\n\n根据业务需要、数据量变化，随之而来的数据库的变化\n\n1.  数据库与应用部署在同一台服务器\n![mycat](./mycat/image-20201104204430049.png)\n2.  单体应用架构，单数据库（数据库服务器和应用服务器分离，但是业务系统越做越大）\n    ![mycat](./mycat/image-20201104204624925.png)\n\n3.  多应用单数据库（应用解耦）\n    ![mycat](./mycat/image-20201104204933409.png)\n\n4.  多应用 独立数据库\n    ![mycat](./mycat/image-20201104205054233.png)\n\n5.  但应用多数据库(分表)\n    ![mycat](./mycat/image-20201104205319372.png)\n\n## 3. 如何分库分表\n![mycat](./mycat/image-20201104205653611.png)\n\n-   垂直切分\n\n    -   单库\n        ![mycat](./mycat/image-20201104205756827.png)\n\n    -   多库\n        ![mycat](./mycat/image-20201104210008624.png)\n\n-   水平切分\n\n    -   按照月分表或者分成实时、历史表等\n        ![mycat](./mycat/image-20201104210117373.png)\n\n    -   分成多库\n        ![mycat](./mycat/image-20201104210416994.png)\n\n## 4. 分库分表带来的问题\n\n1.  跨库关联查询\n\n    -   增加冗余字段（违反了第三范式：表中的所有数据元素不但要能唯一地被主关键字所标识,而且它们之间还必须相互独立,不存在其他的函数关系）\n    -   跨数据库的同步（canal、Mq（最好）、ETL、kettle、ogg）(在某个库中同步其他数据库中表的数据，避免跨库关联查询)\n    -   全局表(广播表)：比如行政区划表，所有的系统都是一样的；\n    -   API\n\n2.  分布式事务\n\n    -   Local\n\n3.  排序、翻页、函数计算\n\n    -\n\n4.  全局主键\n\n    -   雪花算法leaf\n    -   redis(int 类型可以设置incby)\n    -   ZookKeeper\n    -   uuid(数据过长， 影响索引存储)\n\n5.  多数据源连接（动态数据源）\n    ![mycat](./mycat/image-20201104213343204.png)\n\n## 5. Mycat分库分表中间件\n\n**官网地址**：http://www.mycat.org.cn/\n\n从阿里cobar升级而来，完全实现了mysql协议，可以当作一个mysql数据库来使用，通过JDBC支持其他数据库实现分库分表，解决了**多表join、分布式事务、全局序列号、翻页查询、函数计算**的问题\n\n*   一个彻底开源的，面向企业应用开发的大数据库集群\n*   支持事务、ACID、可以替代MySQL的加强版数据库\n*   一个可以视为MySQL集群的企业级数据库，用来替代昂贵的Oracle集群\n*   一个融合内存缓存技术、NoSQL技术、HDFS大数据的新型SQL Server\n*   结合传统数据库和新型分布式数据仓库的新一代企业级数据库产品\n*   一个新颖的数据库中间件产品\n\n华为云的DDM其实也是根据mycat做的\n\n### 5.1 核心概念\n\n![image-20201104215015366](./mycat/image-20201104215015366.png)\n\n### 5.2 Mycat安装与配置\n\n#### 5.2.1 Mycat安装\n\n从官网下载安装版本，解压到文件(官网建议安装在/usr/local/Mycat)后页面如下图所示：\n![image-20201127094703483](./mycat/image-20201127094703483.png)\n\n目录解释如下：\n\n- **bin：**存放window版和linux版本除了提供封装成服务的版本之外，也提供了nowrap的shell脚本命令，方便选择和修改；Linux下运行:./mycat console， 首先要chmod + x*;(mycat支持的命令console、start、stop、restart、status、dump)\n- **conf：**server.xml是mycat服务器参数调整和用户授权的配置文件，schema.xml是逻辑库定义和表以及分片定义的配置文件，rule.xml是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改，需要重启mycat或者通过9066端口reload\n- **lib:**主要存放mycat依赖的一些jar文件\n- **logs:**日志存放在mycat.log中，每天一个文件，日志的配置是在conf/log4j.xml中，根据自己的需要，可以调整输出级别为debug，方便排查问题；注意Linux下部署安装mysql，默认不忽略，需要手动到/etc/my.cnf下配置**lower_case_table_names=1**使Linux环境下MySQL忽略表明大小写，否则使用mycat的时候会提示找不到表的错误\n\n#### 5.2.2 服务启动与配置\n\nMycat在Linux中部署启动时，首先需要在Linux系统的环境变量中配置MYCAT_HOE,操作方式如下：\n\n1. vi /etc/profile，在系统环境变量文件中增加MYCAT_HOME=/usr/lib/tools/mycat\n   ![image-20201127103212598](./mycat/image-20201127103212598.png)\n\n2. 执行 source/etc/profile命令，使环境变量生效。如果是多台Linux系统中组件Mycat集群，那需要在mycat Server所在的服务器配置对其他ip和主机名的映射，配置方式如下：\n   ![image-20201127104159580](./mycat/image-20201127104159580.png)\n\n   经过以上两个步骤的配置，就可以到/usr/lib/tools/mycat/bin目录下执行./mycat start启动mycat服务；使用mycat status查看mycat的运行状态；如下图\n   ![image-20201128135953635](./mycat/image-20201128135953635.png)\n\n##### 5.2.2.1 安装遇到的问题\n\n1. schema TESTDB refered by user root is not exist!![image-20201215152125176](./mycat/image-20201215152125176.png)\n\n   解决方式：\n\n    ```xml\n    <!--在conf/server.xml文件中schemas中配置schema.xml文件中的schema的name值-->\n    \n    <!--user中的name为mycat服务的用户名-->\n     <user name=\"root\" defaultAccount=\"true\">\n         <!--这个是mycat服务连接的密码-->\n          <property name=\"password\">123456</property>\n          <property name=\"schemas\">xiaoyuge</property>\n    </user>\n    ```\n\n\n\n#### 5.2.3日志分析\n\nmycat的日志文件配置为MYCAT_HOME/conf/log4j.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n    <log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\n    <appender name=\"ConsoleAppender\" class=\"org.apache.log4j.ConsoleAppender\">\n    <layout class=\"org.apache.log4j.PatternLayout\">\n    <param name=\"ConversionPattern\" value=\"%d{MM-dd HH:mm:ss.SSS} %5p [%t] (%F:%L) -%m%n\" />\n\t</layout>\n\t</appender>\n\t<appender name=\"FILE\" class=\"org.apache.log4j.RollingFileAppender\">\n        <!--日志文件存放的目录-->\n        <param name=\"file\" value=\"${MYCAT_HOME}/logs/mycat.log\" />\n        <param name=\"Append\" value=\"false\"/>\n        <param name=\"MaxFileSize\" value=\"10000KB\"/>\n        <param name=\"MaxBackupIndex\" value=\"10\"/>\n        <param name=\"encoding\" value=\"UTF-8\" />\n        <layout class=\"org.apache.log4j.PatternLayout\">\n        <param name=\"ConversionPattern\" value=\"%d{MM/dd HH:mm:ss.SSS} %5p [%t] (%F:%L) -%m%n\" />\n\t</layout>\n\t</appender>\n\t<root>\n        <!--level是日志级别，生产环境下加以将级别调整为info/ware，如果是研究测试，碰到异常设置为debug-->\n\t\t<level value=\"debug\" />\n\t\t<appender-ref ref=\"ConsoleAppender\" />\n\t</root>\n</log4j:configuration>\n```\n\n##### 5.2.3.1 warpper日志\n\n目前mycat的启动时经过warpper封装成启动脚本，所以日志也会有其相关的日志文件：${MYCAT_HOME}/logs/warapper.log， 在启动的时候如果系统环境配置错误或缺少配置时，导致mycat无法启动，可以通过查看wrapper.log查看具体错误原因。\n\n1. 正常启动\n\n    ```verilog\n    STATUS | wrapper | 2015/04/12 15:05:00 | --> Wrapper Started as Daemon\n    STATUS | wrapper | 2015/04/12 15:05:00 | Launching a JVM...\n    INFO | jvm 1 | 2015/04/12 15:05:01 | Wrapper (Version 3.2.3) http://wrapper.tanukisoftware.org\n    INFO | jvm 1 | 2015/04/12 15:05:01 | Copyright 1999-2006 Tanuki Software, Inc. AllRights Reserved.\n    INFO | jvm 1 | 2015/04/12 15:05:01 |\n    INFO | jvm 1 | 2015/04/12 15:05:01 | log4j 2015-04-12 15:05:01 [./conf/log4j.xml]load completed.\n    INFO | jvm 1 | 2015/04/12 15:05:02 | MyCAT Server startup successfully. see logs in logs/mycat.log\n    ```\n\n2. 启动异常\n\n    ```verilog\n    STATUS | wrapper | 2015/02/14 01:43:44 | --> Wrapper Started as Daemon\n    STATUS | wrapper | 2015/02/14 01:43:44 | Launching a JVM...\n    INFO | jvm 1 | 2015/02/14 01:43:45 | Error: Exception thrown by the agent : java.rmi.server.ExportException:\n    Port already in use: 1984; nested exception is:\n    INFO | jvm 1 | 2015/02/14 01:43:45 | java.net.BindException: Address already in use\n    ERROR | wrapper | 2015/02/14 01:43:45 | JVM exited while loading the application.\n        \n    # 日志显示异常原因为 java.net.BindException: Address already in use,也就是端口占用，很有可能是原有服\n    务未停止，或者 Mycat 默认端口被其他程序占用，正常启动成功后会有 mycat.log 日志，如果服务未启动成功不会有对应的日志。 也可以去修改 conf 文件夹里的 wrapper.conf 里的 wrapper.java.additional.7=-Dcom.sun.management.jmxremote.port=1984，server.xml 的<property name=\"serverPort\">8066</property>和\n    <property name=\"managerPort\">9066</property>，这方法适\n    合一台机器上两个 mycat 或者 1984,8066,9066 端口被其它应用占用的情况\n    ```\n\n\n\n##### 5.2.3.2 mycat日志\n\n\n\n#### 5.2.4 mycat防火墙设置\n\n白名单和SQL黑名单说明：\n\n```xml\n<!--在 server.xml 中配置：-->\n<firewall>\n     <!--ip 白名单列表，可以配置多个-->\n    <whitehost>\n        <!--ip 白名单 用户对应的可以访问的 ip 地址-->\n    \t<host user=\"mycat\" host=\"127.0.0.1\"></host> \n    </whitehost>\n     <!-是否开启检查黑名单列表-->\n    <blacklist check=\"true\">\n        <!--黑名单允许的 权限 后面为默认-->\n    \t<property name=\"selelctAllow\">false</property>\n    </blacklist>\n</firewall>\n```\n\n**黑名单配置拦截明细如下：**\n\n|         配置项         | 缺省值 |                             描述                             |\n| :--------------------: | :----: | :----------------------------------------------------------: |\n|     rollbackAllow      |  true  | 是否允许执行 roll back 操作,如果把 selectIntoAllow、deleteAllow、updateAllow、insertAllow、mergeAllow 都设置为 false，这就是一个只读数据源了。 |\n|      selectAllow       |  true  |                    是否运行执行SELECT语句                    |\n|  selectAllColumnAllow  |  true  | 是否允许执行 SELECT * FROM T 这样的语句。如果设置为 false，不允许执行 select * from t，但 select * from (select id, name from t) a。这个选项是防御程序通过调用 select *获得数据表的结构信息 |\n|    selectIntoAllow     |  true  |               SELECT 查询中是否允许 INTO 字句                |\n|      deleteAllow       |  true  |                   是否允许执行 DELETE 语句                   |\n|      updateAllow       |  true  |                   是否允许执行 UPDATE 语句                   |\n|      insertAllow       |  true  |                   是否允许执行 INSERT 语句                   |\n|      replaceAllow      |  true  |                  是否允许执行 REPLACE 语句                   |\n|       mergeAllow       |  true  |       是否允许执行 MERGE 语句，这个只在 Oracle 中有用        |\n|       callAllow        |  true  |          是否允许通过 jdbc 的 call 语法调用存储过程          |\n|        setAllow        |  true  |                    是否允许使用 SET 语法                     |\n|     truncateAllow      |  true  |        truncate 语句是危险，缺省打开，若需要自行关闭         |\n|    createTableAllow    |  true  |                        是否允许创建表                        |\n|    alterTableAllow     |  true  |                是否允许执行 Alter Table 语句                 |\n|     dropTableAllow     |  true  |                        是否允许修改表                        |\n|      commentAllow      | false  | 是否允许语句中存在注释，Oracle 的用户不用担心，Wall 能够识别 hints和注释的区别 |\n| noneBaseStatementAllow | false  | 是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项 就能够屏蔽 DDL。 |\n|  multiStatementAllow   | false  |              是否允许一次执行多条语句，缺省关闭              |\n|        useAllow        |  true  |           是否允许执行 mysql 的 use 语句，缺省打开           |\n|     describeAllow      |  true  |        是否允许执行 mysql 的 describe 语句，缺省打开         |\n|       showAllow        |  true  |          是否允许执行 mysql 的 show 语句，缺省打开           |\n|      commitAllow       |  true  |                   是否允许执行 commit 操作                   |\n\n**拦截配置=-永真条件：**\n\n|           配置项            | 缺省值 |                             描述                             |\n| :-------------------------: | :----: | :----------------------------------------------------------: |\n|  selectWhereAlwayTrueCheck  |  true  |       检查 SELECT 语句的 WHERE 子句是否是一个永真条件        |\n| selectHavingAlwayTrueCheck  |  true  |       检查 SELECT 语句的 HAVING 子句是否是一个永真条件       |\n|  deleteWhereAlwayTrueCheck  |  true  |       检查 DELETE 语句的 WHERE 子句是否是一个永真条件        |\n|    deleteWhereNoneCheck     | false  | 检查 DELETE 语句是否无 where 条件，这是有风险的，但不是 SQL 注入类型的风险 |\n|  updateWhereAlayTrueCheck   |  true  |       检查 UPDATE 语句的 WHERE 子句是否是一个永真条件        |\n|    updateWhereNoneCheck     | false  | 检查 UPDATE 语句是否无 where 条件，这是有风险的，但不是SQL 注入类型的风险 |\n| conditionAndAlwayTrueAllow  | false  |    检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永真条件    |\n| conditionAndAlwayFalseAllow | false  |    检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永假条件    |\n|   conditionLikeTrueAllow    |  true  |   检查查询条件(WHERE/HAVING 子句)中是否包含 LIKE 永真条件    |\n\n**其他拦截配置：**\n\n|          配置项           | 缺省值 |                             描述                             |\n| :-----------------------: | :----- | :----------------------------------------------------------: |\n|  selectIntoOutfileAllow   | false  | SELECT ... INTO OUTFILE 是否允许，这个是 mysql 注入攻击的常见手段，缺省是禁止的 |\n|     selectUnionCheck      | true   |                      检测 SELECT UNION                       |\n|     selectMinusCheck      | true   |                      检测 SELECT MINUS                       |\n|     selectExceptCheck     | true   |                      检测 SELECT EXCEPT                      |\n|   selectIntersectCheck    | true   |                    检测 SELECT INTERSECT                     |\n|     mustParameterized     | false  | 是否必须参数化，如果为 True，则不允许类似 WHERE ID = 1 这种不参数化的 SQL |\n|     strictSyntaxCheck     | true   | 是否进行严格的语法检测，Druid SQL Parser 在某些场景不能覆盖所有的，SQL 语法，出现解析 SQL 出错，可以临时把这个选项设置为 false，同时把 SQL 反馈给 Druid 的开发者 |\n|    conditionOpXorAllow    | false  | 查询条件中是否允许有 XOR 条件。XOR 不常用，很难判断永真或者永假，缺省不允许。 |\n|  conditionOpBitwseAllow   | true   |               查询条件中是否允许有\"&\"、\"~\"、\"                |\n| conditionDoubleConstAllow | false  |           查询条件中是否允许连续两个常量运算表达式           |\n|        minusAllow         | true   |  是否允许 SELECT * FROM A MINUS SELECT * FROM B 这样的语句   |\n|      intersectAllow       | true   | 是否允许 SELECT * FROM A INTERSECT SELECT * FROM B 这样的语句 |\n|   constArithmeticAllow    | true   | 拦截常量运算的条件，比如说 WHERE FID = 3 - 1，其中\"3 - 1\"是常量运算表达式。 |\n|      limitZeroAllow       | false  |                 是否允许 limit 0 这样的语句                  |\n\n**禁用对象检测配置：**\n\n|     配置项     | 缺省值 |                             描述                             |\n| :------------: | :----: | :----------------------------------------------------------: |\n|   tableCheck   |  true  |                    检测是否使用了禁用的表                    |\n|  schemaCheck   |  true  |                 检测是否使用了禁用的 Schema                  |\n| functionCheck  |  true  |                   检测是否使用了禁用的函数                   |\n|  objectCheck   |  true  |                  检测是否使用了“禁用对对象”                  |\n|  variantCheck  |  true  |                  检测是否使用了“禁用的变量”                  |\n| readOnlyTables |   空   | 指定的表只读，不能够在 SELECT INTO、DELETE、UPDATE、INSERT、MERGE 中作为\"被修改表\"出现 |\n\n#### 5.2.5 mycat配置文件\n\n##### 5.2.5.1 schema.xml配置\n\nschema.xml作为mycat中重要的配置文件之一，管理者mycat的逻辑库、表、分片规则、DataNode以及DataSource。\n\n##### 5.2.5.2 scheme标签\n\n```xml\n<schema name=\"TESTDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\"></schema>\n```\n\nschema标签用于定义mycat实例中的逻辑库，mycat可以由多个逻辑库，每个逻辑库都有自己的相关配置，可以使用schema标签来划分这些不同的逻辑库。如果不配置schema标签，所有的表配置，会属于同一个默认的逻辑库。\n\n```xml\n<!--逻辑库TESTDB-->\n<schema name=\"TESTDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\">\n\t<table name=\"travelrecord\" dataNode=\"dn1,dn2,dn3\" rule=\"auto-sharding-long\" ></table>\n</schema>\n<!--USERDB-->\n<schema name=\"USERDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\">\n\t<table name=\"company\" dataNode=\"dn10,dn11,dn12\" rule=\"auto-sharding-long\" ></table>\n</schema>\n<!--\n\t逻辑库的概念和MySQL数据库中的database概念相同，我们在查询这两个不同的逻辑库中表的时候需要切换到该逻辑库下才可以查询到所需要的表\n-->\n```\n\n在server.xml中可以配置不同的用户能够使用的schema\n\n```xml\n        <user name=\"root\" defaultAccount=\"true\">\n                <property name=\"password\">root</property>\n                <property name=\"schemas\">TESTDB</property>\n                <property name=\"defaultSchema\">TESTDB</property>\n                <!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 -->\n\n                <!-- 表级 DML 权限设置 -->\n                <!--\n                <privileges check=\"false\">\n                        <schema name=\"TESTDB\" dml=\"0110\" >\n                                <table name=\"tb01\" dml=\"0000\"></table>\n                                <table name=\"tb02\" dml=\"1111\"></table>\n                        </schema>\n                </privileges>\n                 -->\n        </user>\n\n        <user name=\"user\">\n                <property name=\"password\">user</property>\n                <property name=\"schemas\">TESTDB</property>\n                <property name=\"readOnly\">true</property>\n                <property name=\"defaultSchema\">TESTDB</property>\n        </user>\n\n```\n![](./mycat/image-20201129110838590.png)\n\nschema标签的相关属性：\n\n|     属性名     |     值     | 数量限制 |\n| :------------: | :--------: | :------: |\n|    dataNode    | 任意string | （0..1） |\n| checkSQLschema |  Boolean   |  （1）   |\n|  sqlMaxLimit   |  Integer   |  （1）   |\n\n###### 5.2.5.2.1  dataNode\n\n该属性用于绑定逻辑库到某个具体的database上，1.3版本如果配置了dataNode,则不可以配置分片表，1.4可以配置默认分片，只需要配置需要分片的表即可，具体配置如下：\n\n```xml\n<!--1.3版本配置--><schema name=\"USERDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\" dataNode=\"dn1\"><!—里面不能配置任何表--></schema><!--1.4版本配置--><schema name=\"USERDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\" dataNode=\"dn2\"><!—配置需要分片的表-->\t<table name=“tuser” dataNode=”dn1”/></schema><!-- \t那么现在tuser就绑定到dn1所配置的具体database上，可以直接访问这个database，没有配置的表则会走默认的节点dn2，这里注意没有配置在分片里面的表工具查看无法显示，但是可以正常使用。-->\n```\n\n###### 5.2.5.2.2 checkSQLschema\n\n当改制设置为true时，我们执行“SELECT * FROM TESTDB.travelrecord；”则mycat会把语句修改为“SELECT * FROM travelrecord;”即把表示schema的字符去掉，避免发送到后端数据库执行报ERROR 1146：Table 'testdb.travelrecord' doest't exist.不过，即使设置该值为 true ，如果语句所带的是并非是 schema 指定的名字，例如：**select * from db1.travelrecord;** 那么 MyCat 并不会删除 db1 这个字段，如果没有定义该库的话则会报错，所以在提供 SQL语句的最好是不带这个字段。\n\n###### 5.2.5.2.3 sqlMaxLimit\n\n当该值设置为某个数值时。每条执行的 SQL 语句，如果没有加上 limit 语句，MyCat 也会自动的加上所对应的值。例如设置值为 100，执行**select * from TESTDB.travelrecord;**的效果为和执行**select * from TESTDB.travelrecord limit 100;**相同。\n\n设置该值的话，MyCat 默认会把查询到的信息全部都展示出来，造成过多的输出。所以，在正常使用中，还是建议加上一个值，用于减少过多的数据返回。\n\n当然 SQL 语句中也显式的指定 limit 的大小，不受该属性的约束。\n\n需要注意的是，如果运行的 schema 为非拆分库的，那么该属性不会生效。需要手动添加 limit 语句。\n\n### 5.2 分配规则\n\n![image-20201104222632963](./mycat/image-20201104222632963.png)\n![image-20201104221336437](./mycat/image-20201104221336437.png)\n\n-   范围分片：根据某个字设置auto-sharding-long，如果这个primaryKey超出了范围会报错\n\n-   取模分片：\n\n-   ER分片（将父子表有关联的数据放在一个data-node里面）\n\n    ![image-20201104221659540](./mycat/image-20201104221659540.png)\n\n-   全局表：所有dataNode存储相同的数据，查询的时候是随机查询某个表 type=global，查询的时候随机从某个datanode获取\n\n-   非分片表：只在某个dataNode上存储,指定一个dataNode并且不写分片规则\n\n-   单库分表：有个bug在实际数据库中必须要创建mycat中一摸一样的数据表，而且truncat的时候要现在dataNode先删除，才能删除的掉mycat的数据\n\n\n\n### 5.3 全局ID\n\n![image-20201104223246735](./mycat/image-20201104223246735.png)\n\n-   文件方式---0\n-   数据库方式---1\n-   本地时间戳----2\n-   ZK方式----3\n\n## 6. Mycat分片策略详解\n\n连续分片与离散分片\n\n![image-20201107201442912](./mycat/image-20201107201442912.png)\n\n**连续分片**：\n\n-   范围分片\n-   日期/事件\n\n\n\n缺点：\n\n-   存在数据热点的可能性\n-   并发访问能力受限于单一或少量DataNode（访问集中），并不能分摊数据库访问的压力\n\n**离散**：\n\n-   取模（partioncount 的总数必须和分片总数相同）\n\n-   枚举\n\n-   一致性哈希(qs-murmur)\n\n-   固定分片哈希\n\n    -   partitionCount: 2, 1表示有三个分片必须和节点数量一致，否则会报错，前面两个一样长\n\n    -   partitionLength: 256, 512表示长度为256和512\n\n    -   综合在一起就是前面2个分片长度为256， 最后一个为512，结果如下图所示（注意partitionCount和partitionLength的数量一定要一致）\n\n    -   ![image-20201219103201836](./mycat/image-20201219103201836.png)\n\n        ![image-20201219102742172](./mycat/image-20201219102742172.png)\n\n-   取模范围(sharting-by-pattern)：先取模PartitionByPattern后分片\n\n-   范围取模: PartitionByRangeMod(partition-rane-mod.txt)\n\n    -   ```txt\n        0-2000=1\t\t#范围在2000以内的在第一个节点（取模的结果还是本身）\n        2001-4000=2\t\t#范围在2001到4000以内的再模2，结果为0在第一个节点，结果为1在第三个节点\n        ```\n\n-   其他\n\n优点：\n\n-   并发访问能力增强（负载到不同的节点）\n-   范围条件查询性能提升（并行计算）\n\n缺点：\n\n-   数据扩容比较困难，设计到数据迁移问题\n-   数据库连接消耗比较多\n\n分片策略的选择：\n\n1） 确定分片表\n\n2） 找出分片键\n\n3） 考虑容量、增速、业务用户\n\n如果在查询语句中没有携带分片建，那么mycat会将sql发布到所有的节点上\n\n## 7. Mycat扩缩容\n\n### 7.1 在线不停机扩缩容（双写）\n\n![image-20201107205855474](./mycat/image-20201107205855474.png)\n\n\n\n### 7.2 离线扩缩容\n\n#### 7.2.1Mysql Dump\n\n```shell\nmysqldump -uroot -p123456 -h127.0.0.1 -p3306 -c -t --skip-extended-insert 数据库名称 > mysql.11.11.sql\n```\n\n#### 7.2.2 Mycat自带工具\n\n1.  mycat所在环境安装mysql客户端程序\n2.  mycat的lib目录下添加mysql的jdbc驱动包（mysql-connector-java-5.7.1.jar）\n3.  对扩容缩容的表所有节点数据进行备份\n4.  复制schema.xml、rule.xml并重命名为newSchema.xml、newRule.xml\n5.  修改newSchema.xml和newRule.xml配置文件为扩容缩容后的参数\n6.  在conf/migrateTable.properties配置文件中配置分片库和分片表如：imall=table_test1\n7.  dataMigrate.sh配置mysqldump路径\n8.  停止mycat服务\n9.  执行bin/dataMigrate.sh脚本（不能用openjdk）\n10.  替换schema.xml、rule.xml\n\n\n\n**注意事项：**\n\n-   保证分片表迁移数据前后路由规则一致（取模-->取模）\n-   保证分片表歉意数据前后分片字段一致\n-   全局表将被忽略\n-   不要将非分片表配置到migrateTables.properties文件中\n-   暂时只支持分片表使用Mysql作为数据源的扩容缩容\n\n## 8. Mycat读写分离\n\n### 8.1 主从复制\n\n1.  数据备份回复\n2.  负载均衡（读写分离）\n3.  高可用HA\n\n### 8.2 主从复制形式;\n\n![image-20201107212552852](./mycat/image-20201107212552852.png)\n\n#### binlog(Binary log 二进制日志)\n\n```sql\n--查看binglog: SHOW binlog events in 'mysql-bin.000001'\n--show variables like 'max_blog_max'\n```\n\n#### binlog配置\n\n-   STATEMENT: 记录每一天修改数据的sql语句（减少日志量，节约IO）\n-   ROW: 记录哪条数据被修改了，修改成什么样子了（5.7以后默认）\n-   MIXED: 结合两种方式，一般语句用STATEMENT,函数之类的使用ROW\n\n**binlog**格式（mysql-bin.00001等）\n\n**查看binlog**\n\n```sql\nshow binlog events in 'mysql-bin.00001';\n```\n\n### 主从复制原理\n\nSQL Thread是单线程的， 这也是所有的主从复制延迟的原因，那么relay log接受master节点的sql语句主要是用于缓冲\n\n![image-20201107213638624](./mycat/image-20201107213638624.png)\n\n### mycat读写分离配置\n\n![image-20201107213859155](./mycat/image-20201107213859155.png)\n\n### 8.5 Mycat注解（hint）\n\n注解用法：\n\n```tex\n\t/*!mycat:sql=注解sql语句*/真正执行的SQL\n\t\n\t比如说在mycat上创建表无法创建成功，可以使用注解\n\t/*!mycat:sql=select * from table_1 where id = 1*/create table test2(id int);\n\t主要注解sql可以确认mycat可以路由到子结点上，就可以执行后面的真正执行的sql语句\n```\n\n注解用途：\n\n-   跨库关联查询\n-   DDL或存储过程\n-   自定义分片\n-   读写分离\n\n### 分布式事务\n\n基于XA协议的两阶段提交\n\n![image-20201107215437139](./mycat/image-20201107215437139.png)\n\n#### XA角色\n\n![image-20201107215605251](./mycat/image-20201107215605251.png)\n\n#### XA实现\n\n![image-20201107220049532](./mycat/image-20201107220049532.png)\n\n\n\n## 9. Mycat核心流程\n\n### 9.1 架构图\n\n![image-20201220170713526](./mycat/image-20201220170713526.png)\n\n### 9.2 启动流程\n\n1.  MycatServer启动，解析配置文件，包括服务器、分片规则等\n2.  创建工作线程，建立前端连接和后端连接\n\n### 9.3 执行SQL流程\n\n1.  前端连接接收mysql命令\n2.  解析MySQL，mycat用的是Druid的DruidParser\n3.  获取路由\n4.  改写MySQL，例如两个条件在两个节点上，则变成两条单独的sql\n5.  与后端数据库建立连接\n6.  发送sql语句到MySQL执行\n7.  获取返回结果\n8.  处理返回结果，例如排序、计算等等\n9.  返回给客户端\n\n\n\n## Mycat高可用\n\n![image-20201220172406074](./mycat/image-20201220172406074.png)\n\n","slug":"mycat","published":1,"updated":"2022-03-27T14:06:03.312Z","layout":"post","photos":[],"link":"","_id":"cl235zcx9005uwjpjef8patdw","content":"<h1 id=\"mycat分库分表中间件\"><a class=\"markdownIt-Anchor\" href=\"#mycat分库分表中间件\"></a> Mycat(分库分表中间件)</h1>\n<h2 id=\"1-数据库优化策略\"><a class=\"markdownIt-Anchor\" href=\"#1-数据库优化策略\"></a> 1. 数据库优化策略</h2>\n<ol>\n<li>重启：释放资源</li>\n<li>SQL与索引</li>\n<li>表与存储引擎（字段类型选择，长度设置，是否需要分表、分区）</li>\n<li>数据库与应用架构（考虑使用缓存服务器，减轻是数据库压力；可以数据库分布式，读写分离，主从复制）</li>\n<li>数据库与操作系统配置（修改mysql配置，使用单独服务器部署数据库）</li>\n<li>硬件</li>\n</ol>\n<h2 id=\"2-数据库演化\"><a class=\"markdownIt-Anchor\" href=\"#2-数据库演化\"></a> 2. 数据库演化</h2>\n<p>根据业务需要、数据量变化，随之而来的数据库的变化</p>\n<ol>\n<li>\n<p>数据库与应用部署在同一台服务器<br>\n<img src=\"/mycat/image-20201104204430049.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>单体应用架构，单数据库（数据库服务器和应用服务器分离，但是业务系统越做越大）<br>\n<img src=\"/mycat/image-20201104204624925.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>多应用单数据库（应用解耦）<br>\n<img src=\"/mycat/image-20201104204933409.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>多应用 独立数据库<br>\n<img src=\"/mycat/image-20201104205054233.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>但应用多数据库(分表)<br>\n<img src=\"/mycat/image-20201104205319372.png\" alt=\"mycat\"></p>\n</li>\n</ol>\n<h2 id=\"3-如何分库分表\"><a class=\"markdownIt-Anchor\" href=\"#3-如何分库分表\"></a> 3. 如何分库分表</h2>\n<p><img src=\"/mycat/image-20201104205653611.png\" alt=\"mycat\"></p>\n<ul>\n<li>\n<p>垂直切分</p>\n<ul>\n<li>\n<p>单库<br>\n<img src=\"/mycat/image-20201104205756827.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>多库<br>\n<img src=\"/mycat/image-20201104210008624.png\" alt=\"mycat\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>水平切分</p>\n<ul>\n<li>\n<p>按照月分表或者分成实时、历史表等<br>\n<img src=\"/mycat/image-20201104210117373.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>分成多库<br>\n<img src=\"/mycat/image-20201104210416994.png\" alt=\"mycat\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-分库分表带来的问题\"><a class=\"markdownIt-Anchor\" href=\"#4-分库分表带来的问题\"></a> 4. 分库分表带来的问题</h2>\n<ol>\n<li>\n<p>跨库关联查询</p>\n<ul>\n<li>增加冗余字段（违反了第三范式：表中的所有数据元素不但要能唯一地被主关键字所标识,而且它们之间还必须相互独立,不存在其他的函数关系）</li>\n<li>跨数据库的同步（canal、Mq（最好）、ETL、kettle、ogg）(在某个库中同步其他数据库中表的数据，避免跨库关联查询)</li>\n<li>全局表(广播表)：比如行政区划表，所有的系统都是一样的；</li>\n<li>API</li>\n</ul>\n</li>\n<li>\n<p>分布式事务</p>\n<ul>\n<li>Local</li>\n</ul>\n</li>\n<li>\n<p>排序、翻页、函数计算</p>\n<ul>\n<li></li>\n</ul>\n</li>\n<li>\n<p>全局主键</p>\n<ul>\n<li>雪花算法leaf</li>\n<li>redis(int 类型可以设置incby)</li>\n<li>ZookKeeper</li>\n<li>uuid(数据过长， 影响索引存储)</li>\n</ul>\n</li>\n<li>\n<p>多数据源连接（动态数据源）<br>\n<img src=\"/mycat/image-20201104213343204.png\" alt=\"mycat\"></p>\n</li>\n</ol>\n<h2 id=\"5-mycat分库分表中间件\"><a class=\"markdownIt-Anchor\" href=\"#5-mycat分库分表中间件\"></a> 5. Mycat分库分表中间件</h2>\n<p><strong>官网地址</strong>：<a href=\"http://www.mycat.org.cn/\">http://www.mycat.org.cn/</a></p>\n<p>从阿里cobar升级而来，完全实现了mysql协议，可以当作一个mysql数据库来使用，通过JDBC支持其他数据库实现分库分表，解决了<strong>多表join、分布式事务、全局序列号、翻页查询、函数计算</strong>的问题</p>\n<ul>\n<li>一个彻底开源的，面向企业应用开发的大数据库集群</li>\n<li>支持事务、ACID、可以替代MySQL的加强版数据库</li>\n<li>一个可以视为MySQL集群的企业级数据库，用来替代昂贵的Oracle集群</li>\n<li>一个融合内存缓存技术、NoSQL技术、HDFS大数据的新型SQL Server</li>\n<li>结合传统数据库和新型分布式数据仓库的新一代企业级数据库产品</li>\n<li>一个新颖的数据库中间件产品</li>\n</ul>\n<p>华为云的DDM其实也是根据mycat做的</p>\n<h3 id=\"51-核心概念\"><a class=\"markdownIt-Anchor\" href=\"#51-核心概念\"></a> 5.1 核心概念</h3>\n<p><img src=\"/mycat/image-20201104215015366.png\" alt=\"image-20201104215015366\"></p>\n<h3 id=\"52-mycat安装与配置\"><a class=\"markdownIt-Anchor\" href=\"#52-mycat安装与配置\"></a> 5.2 Mycat安装与配置</h3>\n<h4 id=\"521-mycat安装\"><a class=\"markdownIt-Anchor\" href=\"#521-mycat安装\"></a> 5.2.1 Mycat安装</h4>\n<p>从官网下载安装版本，解压到文件(官网建议安装在/usr/local/Mycat)后页面如下图所示：<br>\n<img src=\"/mycat/image-20201127094703483.png\" alt=\"image-20201127094703483\"></p>\n<p>目录解释如下：</p>\n<ul>\n<li>**bin：*<em>存放window版和linux版本除了提供封装成服务的版本之外，也提供了nowrap的shell脚本命令，方便选择和修改；Linux下运行:./mycat console， 首先要chmod + x</em>;(mycat支持的命令console、start、stop、restart、status、dump)</li>\n<li>**conf：**server.xml是mycat服务器参数调整和用户授权的配置文件，schema.xml是逻辑库定义和表以及分片定义的配置文件，rule.xml是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改，需要重启mycat或者通过9066端口reload</li>\n<li>**lib:**主要存放mycat依赖的一些jar文件</li>\n<li><strong>logs:<strong>日志存放在mycat.log中，每天一个文件，日志的配置是在conf/log4j.xml中，根据自己的需要，可以调整输出级别为debug，方便排查问题；注意Linux下部署安装mysql，默认不忽略，需要手动到/etc/my.cnf下配置</strong>lower_case_table_names=1</strong>使Linux环境下MySQL忽略表明大小写，否则使用mycat的时候会提示找不到表的错误</li>\n</ul>\n<h4 id=\"522-服务启动与配置\"><a class=\"markdownIt-Anchor\" href=\"#522-服务启动与配置\"></a> 5.2.2 服务启动与配置</h4>\n<p>Mycat在Linux中部署启动时，首先需要在Linux系统的环境变量中配置MYCAT_HOE,操作方式如下：</p>\n<ol>\n<li>\n<p>vi /etc/profile，在系统环境变量文件中增加MYCAT_HOME=/usr/lib/tools/mycat<br>\n<img src=\"/mycat/image-20201127103212598.png\" alt=\"image-20201127103212598\"></p>\n</li>\n<li>\n<p>执行 source/etc/profile命令，使环境变量生效。如果是多台Linux系统中组件Mycat集群，那需要在mycat Server所在的服务器配置对其他ip和主机名的映射，配置方式如下：<br>\n<img src=\"/mycat/image-20201127104159580.png\" alt=\"image-20201127104159580\"></p>\n<p>经过以上两个步骤的配置，就可以到/usr/lib/tools/mycat/bin目录下执行./mycat start启动mycat服务；使用mycat status查看mycat的运行状态；如下图<br>\n<img src=\"/mycat/image-20201128135953635.png\" alt=\"image-20201128135953635\"></p>\n</li>\n</ol>\n<h5 id=\"5221-安装遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#5221-安装遇到的问题\"></a> 5.2.2.1 安装遇到的问题</h5>\n<ol>\n<li>\n<p>schema TESTDB refered by user root is not exist!<img src=\"/mycat/image-20201215152125176.png\" alt=\"image-20201215152125176\"></p>\n<p>解决方式：</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--在conf/server.xml文件中schemas中配置schema.xml文件中的schema的name值--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--user中的name为mycat服务的用户名--&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;root&quot;</span> <span class=\"attr\">defaultAccount</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--这个是mycat服务连接的密码--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;schemas&quot;</span>&gt;</span>xiaoyuge<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"523日志分析\"><a class=\"markdownIt-Anchor\" href=\"#523日志分析\"></a> 5.2.3日志分析</h4>\n<p>mycat的日志文件配置为MYCAT_HOME/conf/log4j.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">log4j</span>:configuration <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">log4j:configuration</span> <span class=\"attr\">xmlns:log4j</span>=<span class=\"string\">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConsoleAppender&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConversionPattern&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;%d&#123;MM-dd HH:mm:ss.SSS&#125; %5p [%t] (%F:%L) -%m%n&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;FILE&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.RollingFileAppender&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--日志文件存放的目录--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;MYCAT_HOME&#125;/logs/mycat.log&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Append&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;MaxFileSize&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10000KB&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;MaxBackupIndex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;encoding&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConversionPattern&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;%d&#123;MM/dd HH:mm:ss.SSS&#125; %5p [%t] (%F:%L) -%m%n&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--level是日志级别，生产环境下加以将级别调整为info/ware，如果是研究测试，碰到异常设置为debug--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;debug&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;ConsoleAppender&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"5231-warpper日志\"><a class=\"markdownIt-Anchor\" href=\"#5231-warpper日志\"></a> 5.2.3.1 warpper日志</h5>\n<p>目前mycat的启动时经过warpper封装成启动脚本，所以日志也会有其相关的日志文件：${MYCAT_HOME}/logs/warapper.log， 在启动的时候如果系统环境配置错误或缺少配置时，导致mycat无法启动，可以通过查看wrapper.log查看具体错误原因。</p>\n<ol>\n<li>\n<p>正常启动</p>\n <figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">00</span> | --&gt; Wrapper Started as Daemon</span><br><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">00</span> | Launching a JVM...</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> | Wrapper (Version <span class=\"number\">3</span><span class=\"variable\">.2</span><span class=\"variable\">.3</span>) http:<span class=\"comment\">//wrapper.tanukisoftware.org</span></span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> | Copyright <span class=\"number\">1999</span>-<span class=\"number\">2006</span> Tanuki Software, Inc. AllRights Reserved.</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> |</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> | log4j <span class=\"number\">2015</span>-<span class=\"number\">04</span>-<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> [./conf/log4j<span class=\"variable\">.xml</span>]load completed.</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">02</span> | MyCAT Server startup successfully. see logs in logs/mycat<span class=\"variable\">.log</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>启动异常</p>\n <figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">44</span> | --&gt; Wrapper Started as Daemon</span><br><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">44</span> | Launching a JVM...</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">45</span> | Error: Exception thrown by the agent : java<span class=\"variable\">.rmi</span><span class=\"variable\">.server</span><span class=\"variable\">.ExportException</span>:</span><br><span class=\"line\">Port already in <span class=\"keyword\">use</span>: <span class=\"number\">1984</span>; nested exception is:</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">45</span> | java<span class=\"variable\">.net</span><span class=\"variable\">.BindException</span>: Address already in <span class=\"keyword\">use</span></span><br><span class=\"line\">ERROR | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">45</span> | JVM exited <span class=\"keyword\">while</span> loading the application.</span><br><span class=\"line\">    </span><br><span class=\"line\"># 日志显示异常原因为 java<span class=\"variable\">.net</span><span class=\"variable\">.BindException</span>: Address already in <span class=\"keyword\">use</span>,也就是端口占用，很有可能是原有服</span><br><span class=\"line\">务未停止，或者 Mycat 默认端口被其他程序占用，正常启动成功后会有 mycat<span class=\"variable\">.log</span> 日志，如果服务未启动成功不会有对应的日志。 也可以去修改 conf 文件夹里的 wrapper<span class=\"variable\">.conf</span> 里的 wrapper<span class=\"variable\">.java</span><span class=\"variable\">.additional</span><span class=\"variable\">.7</span>=-Dcom<span class=\"variable\">.sun</span><span class=\"variable\">.management</span><span class=\"variable\">.jmxremote</span><span class=\"variable\">.port</span>=<span class=\"number\">1984</span>，server<span class=\"variable\">.xml</span> 的&lt;<span class=\"keyword\">property</span> name=<span class=\"string\">&quot;serverPort&quot;</span>&gt;<span class=\"number\">8066</span>&lt;/<span class=\"keyword\">property</span>&gt;和</span><br><span class=\"line\">&lt;<span class=\"keyword\">property</span> name=<span class=\"string\">&quot;managerPort&quot;</span>&gt;<span class=\"number\">9066</span>&lt;/<span class=\"keyword\">property</span>&gt;，这方法适</span><br><span class=\"line\">合一台机器上两个 mycat 或者 <span class=\"number\">1984</span>,<span class=\"number\">8066</span>,<span class=\"number\">9066</span> 端口被其它应用占用的情况</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"5232-mycat日志\"><a class=\"markdownIt-Anchor\" href=\"#5232-mycat日志\"></a> 5.2.3.2 mycat日志</h5>\n<h4 id=\"524-mycat防火墙设置\"><a class=\"markdownIt-Anchor\" href=\"#524-mycat防火墙设置\"></a> 5.2.4 mycat防火墙设置</h4>\n<p>白名单和SQL黑名单说明：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--在 server.xml 中配置：--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">firewall</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--ip 白名单列表，可以配置多个--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">whitehost</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--ip 白名单 用户对应的可以访问的 ip 地址--&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">host</span> <span class=\"attr\">user</span>=<span class=\"string\">&quot;mycat&quot;</span> <span class=\"attr\">host</span>=<span class=\"string\">&quot;127.0.0.1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">whitehost</span>&gt;</span></span><br><span class=\"line\">     &lt;!-是否开启检查黑名单列表--&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">blacklist</span> <span class=\"attr\">check</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--黑名单允许的 权限 后面为默认--&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;selelctAllow&quot;</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">blacklist</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">firewall</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>黑名单配置拦截明细如下：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">配置项</th>\n<th style=\"text-align:center\">缺省值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">rollbackAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 roll back 操作,如果把 selectIntoAllow、deleteAllow、updateAllow、insertAllow、mergeAllow 都设置为 false，这就是一个只读数据源了。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否运行执行SELECT语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectAllColumnAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 SELECT * FROM T 这样的语句。如果设置为 false，不允许执行 select * from t，但 select * from (select id, name from t) a。这个选项是防御程序通过调用 select *获得数据表的结构信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectIntoAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">SELECT 查询中是否允许 INTO 字句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">deleteAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 DELETE 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updateAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 UPDATE 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">insertAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 INSERT 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">replaceAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 REPLACE 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mergeAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 MERGE 语句，这个只在 Oracle 中有用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">callAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许通过 jdbc 的 call 语法调用存储过程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许使用 SET 语法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">truncateAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">truncate 语句是危险，缺省打开，若需要自行关闭</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">createTableAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许创建表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">alterTableAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 Alter Table 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dropTableAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许修改表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">commentAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">是否允许语句中存在注释，Oracle 的用户不用担心，Wall 能够识别 hints和注释的区别</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">noneBaseStatementAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项 就能够屏蔽 DDL。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">multiStatementAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">是否允许一次执行多条语句，缺省关闭</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">useAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 mysql 的 use 语句，缺省打开</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">describeAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 mysql 的 describe 语句，缺省打开</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">showAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 mysql 的 show 语句，缺省打开</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">commitAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 commit 操作</td>\n</tr>\n</tbody>\n</table>\n<p><strong>拦截配置=-永真条件：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">配置项</th>\n<th style=\"text-align:center\">缺省值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">selectWhereAlwayTrueCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查 SELECT 语句的 WHERE 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectHavingAlwayTrueCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查 SELECT 语句的 HAVING 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">deleteWhereAlwayTrueCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查 DELETE 语句的 WHERE 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">deleteWhereNoneCheck</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">检查 DELETE 语句是否无 where 条件，这是有风险的，但不是 SQL 注入类型的风险</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updateWhereAlayTrueCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查 UPDATE 语句的 WHERE 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updateWhereNoneCheck</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">检查 UPDATE 语句是否无 where 条件，这是有风险的，但不是SQL 注入类型的风险</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionAndAlwayTrueAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionAndAlwayFalseAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永假条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionLikeTrueAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查查询条件(WHERE/HAVING 子句)中是否包含 LIKE 永真条件</td>\n</tr>\n</tbody>\n</table>\n<p><strong>其他拦截配置：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">配置项</th>\n<th style=\"text-align:left\">缺省值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">selectIntoOutfileAllow</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">SELECT … INTO OUTFILE 是否允许，这个是 mysql 注入攻击的常见手段，缺省是禁止的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectUnionCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">检测 SELECT UNION</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectMinusCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">检测 SELECT MINUS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectExceptCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">检测 SELECT EXCEPT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectIntersectCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">检测 SELECT INTERSECT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mustParameterized</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">是否必须参数化，如果为 True，则不允许类似 WHERE ID = 1 这种不参数化的 SQL</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strictSyntaxCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">是否进行严格的语法检测，Druid SQL Parser 在某些场景不能覆盖所有的，SQL 语法，出现解析 SQL 出错，可以临时把这个选项设置为 false，同时把 SQL 反馈给 Druid 的开发者</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionOpXorAllow</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">查询条件中是否允许有 XOR 条件。XOR 不常用，很难判断永真或者永假，缺省不允许。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionOpBitwseAllow</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">查询条件中是否允许有&quot;&amp;&quot;、&quot;~&quot;、&quot;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionDoubleConstAllow</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">查询条件中是否允许连续两个常量运算表达式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">minusAllow</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">是否允许 SELECT * FROM A MINUS SELECT * FROM B 这样的语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">intersectAllow</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">是否允许 SELECT * FROM A INTERSECT SELECT * FROM B 这样的语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">constArithmeticAllow</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">拦截常量运算的条件，比如说 WHERE FID = 3 - 1，其中&quot;3 - 1&quot;是常量运算表达式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">limitZeroAllow</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">是否允许 limit 0 这样的语句</td>\n</tr>\n</tbody>\n</table>\n<p><strong>禁用对象检测配置：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">配置项</th>\n<th style=\"text-align:center\">缺省值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">tableCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了禁用的表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">schemaCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了禁用的 Schema</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">functionCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了禁用的函数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">objectCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了“禁用对对象”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">variantCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了“禁用的变量”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">readOnlyTables</td>\n<td style=\"text-align:center\">空</td>\n<td style=\"text-align:center\">指定的表只读，不能够在 SELECT INTO、DELETE、UPDATE、INSERT、MERGE 中作为&quot;被修改表&quot;出现</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"525-mycat配置文件\"><a class=\"markdownIt-Anchor\" href=\"#525-mycat配置文件\"></a> 5.2.5 mycat配置文件</h4>\n<h5 id=\"5251-schemaxml配置\"><a class=\"markdownIt-Anchor\" href=\"#5251-schemaxml配置\"></a> 5.2.5.1 schema.xml配置</h5>\n<p>schema.xml作为mycat中重要的配置文件之一，管理者mycat的逻辑库、表、分片规则、DataNode以及DataSource。</p>\n<h5 id=\"5252-scheme标签\"><a class=\"markdownIt-Anchor\" href=\"#5252-scheme标签\"></a> 5.2.5.2 scheme标签</h5>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;TESTDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>schema标签用于定义mycat实例中的逻辑库，mycat可以由多个逻辑库，每个逻辑库都有自己的相关配置，可以使用schema标签来划分这些不同的逻辑库。如果不配置schema标签，所有的表配置，会属于同一个默认的逻辑库。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--逻辑库TESTDB--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;TESTDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;travelrecord&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn1,dn2,dn3&quot;</span> <span class=\"attr\">rule</span>=<span class=\"string\">&quot;auto-sharding-long&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--USERDB--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;USERDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;company&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn10,dn11,dn12&quot;</span> <span class=\"attr\">rule</span>=<span class=\"string\">&quot;auto-sharding-long&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t逻辑库的概念和MySQL数据库中的database概念相同，我们在查询这两个不同的逻辑库中表的时候需要切换到该逻辑库下才可以查询到所需要的表</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在server.xml中可以配置不同的用户能够使用的schema</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;root&quot;</span> <span class=\"attr\">defaultAccount</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultSchema&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 表级 DML 权限设置 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;privileges check=&quot;false&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                &lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                &lt;/schema&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/privileges&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>user<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;readOnly&quot;</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultSchema&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mycat/image-20201129110838590.png\" alt></p>\n<p>schema标签的相关属性：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:center\">值</th>\n<th style=\"text-align:center\">数量限制</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">dataNode</td>\n<td style=\"text-align:center\">任意string</td>\n<td style=\"text-align:center\">（0…1）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">checkSQLschema</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">（1）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sqlMaxLimit</td>\n<td style=\"text-align:center\">Integer</td>\n<td style=\"text-align:center\">（1）</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"52521-datanode\"><a class=\"markdownIt-Anchor\" href=\"#52521-datanode\"></a> 5.2.5.2.1  dataNode</h6>\n<p>该属性用于绑定逻辑库到某个具体的database上，1.3版本如果配置了dataNode,则不可以配置分片表，1.4可以配置默认分片，只需要配置需要分片的表即可，具体配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--1.3版本配置--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;USERDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn1&quot;</span>&gt;</span>&lt;!—里面不能配置任何表--&gt;<span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span><span class=\"comment\">&lt;!--1.4版本配置--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;USERDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn2&quot;</span>&gt;</span>&lt;!—配置需要分片的表--&gt;\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">name</span>=<span class=\"string\">“tuser”</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">”dn1”/</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span><span class=\"comment\">&lt;!-- \t那么现在tuser就绑定到dn1所配置的具体database上，可以直接访问这个database，没有配置的表则会走默认的节点dn2，这里注意没有配置在分片里面的表工具查看无法显示，但是可以正常使用。--&gt;</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"52522-checksqlschema\"><a class=\"markdownIt-Anchor\" href=\"#52522-checksqlschema\"></a> 5.2.5.2.2 checkSQLschema</h6>\n<p>当改制设置为true时，我们执行“SELECT * FROM TESTDB.travelrecord；”则mycat会把语句修改为“SELECT * FROM travelrecord;”即把表示schema的字符去掉，避免发送到后端数据库执行报ERROR 1146：Table ‘testdb.travelrecord’ doest’t exist.不过，即使设置该值为 true ，如果语句所带的是并非是 schema 指定的名字，例如：<strong>select * from db1.travelrecord;</strong> 那么 MyCat 并不会删除 db1 这个字段，如果没有定义该库的话则会报错，所以在提供 SQL语句的最好是不带这个字段。</p>\n<h6 id=\"52523-sqlmaxlimit\"><a class=\"markdownIt-Anchor\" href=\"#52523-sqlmaxlimit\"></a> 5.2.5.2.3 sqlMaxLimit</h6>\n<p>当该值设置为某个数值时。每条执行的 SQL 语句，如果没有加上 limit 语句，MyCat 也会自动的加上所对应的值。例如设置值为 100，执行**select * from TESTDB.travelrecord;<strong>的效果为和执行</strong>select * from TESTDB.travelrecord limit 100;**相同。</p>\n<p>设置该值的话，MyCat 默认会把查询到的信息全部都展示出来，造成过多的输出。所以，在正常使用中，还是建议加上一个值，用于减少过多的数据返回。</p>\n<p>当然 SQL 语句中也显式的指定 limit 的大小，不受该属性的约束。</p>\n<p>需要注意的是，如果运行的 schema 为非拆分库的，那么该属性不会生效。需要手动添加 limit 语句。</p>\n<h3 id=\"52-分配规则\"><a class=\"markdownIt-Anchor\" href=\"#52-分配规则\"></a> 5.2 分配规则</h3>\n<p><img src=\"/mycat/image-20201104222632963.png\" alt=\"image-20201104222632963\"><br>\n<img src=\"/mycat/image-20201104221336437.png\" alt=\"image-20201104221336437\"></p>\n<ul>\n<li>\n<p>范围分片：根据某个字设置auto-sharding-long，如果这个primaryKey超出了范围会报错</p>\n</li>\n<li>\n<p>取模分片：</p>\n</li>\n<li>\n<p>ER分片（将父子表有关联的数据放在一个data-node里面）</p>\n<p><img src=\"/mycat/image-20201104221659540.png\" alt=\"image-20201104221659540\"></p>\n</li>\n<li>\n<p>全局表：所有dataNode存储相同的数据，查询的时候是随机查询某个表 type=global，查询的时候随机从某个datanode获取</p>\n</li>\n<li>\n<p>非分片表：只在某个dataNode上存储,指定一个dataNode并且不写分片规则</p>\n</li>\n<li>\n<p>单库分表：有个bug在实际数据库中必须要创建mycat中一摸一样的数据表，而且truncat的时候要现在dataNode先删除，才能删除的掉mycat的数据</p>\n</li>\n</ul>\n<h3 id=\"53-全局id\"><a class=\"markdownIt-Anchor\" href=\"#53-全局id\"></a> 5.3 全局ID</h3>\n<p><img src=\"/mycat/image-20201104223246735.png\" alt=\"image-20201104223246735\"></p>\n<ul>\n<li>文件方式—0</li>\n<li>数据库方式—1</li>\n<li>本地时间戳----2</li>\n<li>ZK方式----3</li>\n</ul>\n<h2 id=\"6-mycat分片策略详解\"><a class=\"markdownIt-Anchor\" href=\"#6-mycat分片策略详解\"></a> 6. Mycat分片策略详解</h2>\n<p>连续分片与离散分片</p>\n<p><img src=\"/mycat/image-20201107201442912.png\" alt=\"image-20201107201442912\"></p>\n<p><strong>连续分片</strong>：</p>\n<ul>\n<li>范围分片</li>\n<li>日期/事件</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>存在数据热点的可能性</li>\n<li>并发访问能力受限于单一或少量DataNode（访问集中），并不能分摊数据库访问的压力</li>\n</ul>\n<p><strong>离散</strong>：</p>\n<ul>\n<li>\n<p>取模（partioncount 的总数必须和分片总数相同）</p>\n</li>\n<li>\n<p>枚举</p>\n</li>\n<li>\n<p>一致性哈希(qs-murmur)</p>\n</li>\n<li>\n<p>固定分片哈希</p>\n<ul>\n<li>\n<p>partitionCount: 2, 1表示有三个分片必须和节点数量一致，否则会报错，前面两个一样长</p>\n</li>\n<li>\n<p>partitionLength: 256, 512表示长度为256和512</p>\n</li>\n<li>\n<p>综合在一起就是前面2个分片长度为256， 最后一个为512，结果如下图所示（注意partitionCount和partitionLength的数量一定要一致）</p>\n</li>\n<li>\n<p><img src=\"/mycat/image-20201219103201836.png\" alt=\"image-20201219103201836\"></p>\n<p><img src=\"/mycat/image-20201219102742172.png\" alt=\"image-20201219102742172\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>取模范围(sharting-by-pattern)：先取模PartitionByPattern后分片</p>\n</li>\n<li>\n<p>范围取模: PartitionByRangeMod(partition-rane-mod.txt)</p>\n<ul>\n<li>\n<pre class=\"highlight\"><code class=\"txt\">0-2000=1\t\t#范围在2000以内的在第一个节点（取模的结果还是本身）\n2001-4000=2\t\t#范围在2001到4000以内的再模2，结果为0在第一个节点，结果为1在第三个节点\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">-   其他</span><br><span class=\"line\"></span><br><span class=\"line\">优点：</span><br><span class=\"line\"></span><br><span class=\"line\">-   并发访问能力增强（负载到不同的节点）</span><br><span class=\"line\">-   范围条件查询性能提升（并行计算）</span><br><span class=\"line\"></span><br><span class=\"line\">缺点：</span><br><span class=\"line\"></span><br><span class=\"line\">-   数据扩容比较困难，设计到数据迁移问题</span><br><span class=\"line\">-   数据库连接消耗比较多</span><br><span class=\"line\"></span><br><span class=\"line\">分片策略的选择：</span><br><span class=\"line\"></span><br><span class=\"line\">1） 确定分片表</span><br><span class=\"line\"></span><br><span class=\"line\">2） 找出分片键</span><br><span class=\"line\"></span><br><span class=\"line\">3） 考虑容量、增速、业务用户</span><br><span class=\"line\"></span><br><span class=\"line\">如果在查询语句中没有携带分片建，那么mycat会将sql发布到所有的节点上</span><br><span class=\"line\"></span><br><span class=\"line\">## 7. Mycat扩缩容</span><br><span class=\"line\"></span><br><span class=\"line\">### 7.1 在线不停机扩缩容（双写）</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20201107205855474](./mycat/image-20201107205855474.png)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 7.2 离线扩缩容</span><br><span class=\"line\"></span><br><span class=\"line\">#### 7.2.1Mysql Dump</span><br><span class=\"line\"></span><br><span class=\"line\">```shell</span><br><span class=\"line\">mysqldump -uroot -p123456 -h127.0.0.1 -p3306 -c -t --skip-extended-insert 数据库名称 &gt; mysql.11.11.sql</span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"722-mycat自带工具\"><a class=\"markdownIt-Anchor\" href=\"#722-mycat自带工具\"></a> 7.2.2 Mycat自带工具</h4>\n<ol>\n<li>mycat所在环境安装mysql客户端程序</li>\n<li>mycat的lib目录下添加mysql的jdbc驱动包（mysql-connector-java-5.7.1.jar）</li>\n<li>对扩容缩容的表所有节点数据进行备份</li>\n<li>复制schema.xml、rule.xml并重命名为newSchema.xml、newRule.xml</li>\n<li>修改newSchema.xml和newRule.xml配置文件为扩容缩容后的参数</li>\n<li>在conf/migrateTable.properties配置文件中配置分片库和分片表如：imall=table_test1</li>\n<li>dataMigrate.sh配置mysqldump路径</li>\n<li>停止mycat服务</li>\n<li>执行bin/dataMigrate.sh脚本（不能用openjdk）</li>\n<li>替换schema.xml、rule.xml</li>\n</ol>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>保证分片表迁移数据前后路由规则一致（取模–&gt;取模）</li>\n<li>保证分片表歉意数据前后分片字段一致</li>\n<li>全局表将被忽略</li>\n<li>不要将非分片表配置到migrateTables.properties文件中</li>\n<li>暂时只支持分片表使用Mysql作为数据源的扩容缩容</li>\n</ul>\n<h2 id=\"8-mycat读写分离\"><a class=\"markdownIt-Anchor\" href=\"#8-mycat读写分离\"></a> 8. Mycat读写分离</h2>\n<h3 id=\"81-主从复制\"><a class=\"markdownIt-Anchor\" href=\"#81-主从复制\"></a> 8.1 主从复制</h3>\n<ol>\n<li>数据备份回复</li>\n<li>负载均衡（读写分离）</li>\n<li>高可用HA</li>\n</ol>\n<h3 id=\"82-主从复制形式\"><a class=\"markdownIt-Anchor\" href=\"#82-主从复制形式\"></a> 8.2 主从复制形式;</h3>\n<p><img src=\"/mycat/image-20201107212552852.png\" alt=\"image-20201107212552852\"></p>\n<h4 id=\"binlogbinary-log-二进制日志\"><a class=\"markdownIt-Anchor\" href=\"#binlogbinary-log-二进制日志\"></a> binlog(Binary log 二进制日志)</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查看binglog: SHOW binlog events in &#x27;mysql-bin.000001&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">--show variables like &#x27;max_blog_max&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"binlog配置\"><a class=\"markdownIt-Anchor\" href=\"#binlog配置\"></a> binlog配置</h4>\n<ul>\n<li>STATEMENT: 记录每一天修改数据的sql语句（减少日志量，节约IO）</li>\n<li>ROW: 记录哪条数据被修改了，修改成什么样子了（5.7以后默认）</li>\n<li>MIXED: 结合两种方式，一般语句用STATEMENT,函数之类的使用ROW</li>\n</ul>\n<p><strong>binlog</strong>格式（mysql-bin.00001等）</p>\n<p><strong>查看binlog</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> binlog events <span class=\"keyword\">in</span> <span class=\"string\">&#x27;mysql-bin.00001&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"主从复制原理\"><a class=\"markdownIt-Anchor\" href=\"#主从复制原理\"></a> 主从复制原理</h3>\n<p>SQL Thread是单线程的， 这也是所有的主从复制延迟的原因，那么relay log接受master节点的sql语句主要是用于缓冲</p>\n<p><img src=\"/mycat/image-20201107213638624.png\" alt=\"image-20201107213638624\"></p>\n<h3 id=\"mycat读写分离配置\"><a class=\"markdownIt-Anchor\" href=\"#mycat读写分离配置\"></a> mycat读写分离配置</h3>\n<p><img src=\"/mycat/image-20201107213859155.png\" alt=\"image-20201107213859155\"></p>\n<h3 id=\"85-mycat注解hint\"><a class=\"markdownIt-Anchor\" href=\"#85-mycat注解hint\"></a> 8.5 Mycat注解（hint）</h3>\n<p>注解用法：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*!mycat:sql=注解sql语句*/真正执行的SQL</span><br><span class=\"line\"></span><br><span class=\"line\">比如说在mycat上创建表无法创建成功，可以使用注解</span><br><span class=\"line\">/*!mycat:sql=select * from table<span class=\"built_in\">_</span>1 where id = 1*/create table test2(id int);</span><br><span class=\"line\">主要注解sql可以确认mycat可以路由到子结点上，就可以执行后面的真正执行的sql语句</span><br></pre></td></tr></table></figure>\n<p>注解用途：</p>\n<ul>\n<li>跨库关联查询</li>\n<li>DDL或存储过程</li>\n<li>自定义分片</li>\n<li>读写分离</li>\n</ul>\n<h3 id=\"分布式事务\"><a class=\"markdownIt-Anchor\" href=\"#分布式事务\"></a> 分布式事务</h3>\n<p>基于XA协议的两阶段提交</p>\n<p><img src=\"/mycat/image-20201107215437139.png\" alt=\"image-20201107215437139\"></p>\n<h4 id=\"xa角色\"><a class=\"markdownIt-Anchor\" href=\"#xa角色\"></a> XA角色</h4>\n<p><img src=\"/mycat/image-20201107215605251.png\" alt=\"image-20201107215605251\"></p>\n<h4 id=\"xa实现\"><a class=\"markdownIt-Anchor\" href=\"#xa实现\"></a> XA实现</h4>\n<p><img src=\"/mycat/image-20201107220049532.png\" alt=\"image-20201107220049532\"></p>\n<h2 id=\"9-mycat核心流程\"><a class=\"markdownIt-Anchor\" href=\"#9-mycat核心流程\"></a> 9. Mycat核心流程</h2>\n<h3 id=\"91-架构图\"><a class=\"markdownIt-Anchor\" href=\"#91-架构图\"></a> 9.1 架构图</h3>\n<p><img src=\"/mycat/image-20201220170713526.png\" alt=\"image-20201220170713526\"></p>\n<h3 id=\"92-启动流程\"><a class=\"markdownIt-Anchor\" href=\"#92-启动流程\"></a> 9.2 启动流程</h3>\n<ol>\n<li>MycatServer启动，解析配置文件，包括服务器、分片规则等</li>\n<li>创建工作线程，建立前端连接和后端连接</li>\n</ol>\n<h3 id=\"93-执行sql流程\"><a class=\"markdownIt-Anchor\" href=\"#93-执行sql流程\"></a> 9.3 执行SQL流程</h3>\n<ol>\n<li>前端连接接收mysql命令</li>\n<li>解析MySQL，mycat用的是Druid的DruidParser</li>\n<li>获取路由</li>\n<li>改写MySQL，例如两个条件在两个节点上，则变成两条单独的sql</li>\n<li>与后端数据库建立连接</li>\n<li>发送sql语句到MySQL执行</li>\n<li>获取返回结果</li>\n<li>处理返回结果，例如排序、计算等等</li>\n<li>返回给客户端</li>\n</ol>\n<h2 id=\"mycat高可用\"><a class=\"markdownIt-Anchor\" href=\"#mycat高可用\"></a> Mycat高可用</h2>\n<p><img src=\"/mycat/image-20201220172406074.png\" alt=\"image-20201220172406074\"></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h1 id=\"mycat分库分表中间件\"><a class=\"markdownIt-Anchor\" href=\"#mycat分库分表中间件\"></a> Mycat(分库分表中间件)</h1>\n<h2 id=\"1-数据库优化策略\"><a class=\"markdownIt-Anchor\" href=\"#1-数据库优化策略\"></a> 1. 数据库优化策略</h2>\n<ol>\n<li>重启：释放资源</li>\n<li>SQL与索引</li>\n<li>表与存储引擎（字段类型选择，长度设置，是否需要分表、分区）</li>\n<li>数据库与应用架构（考虑使用缓存服务器，减轻是数据库压力；可以数据库分布式，读写分离，主从复制）</li>\n<li>数据库与操作系统配置（修改mysql配置，使用单独服务器部署数据库）</li>\n<li>硬件</li>\n</ol>\n<h2 id=\"2-数据库演化\"><a class=\"markdownIt-Anchor\" href=\"#2-数据库演化\"></a> 2. 数据库演化</h2>\n<p>根据业务需要、数据量变化，随之而来的数据库的变化</p>\n<ol>\n<li>\n<p>数据库与应用部署在同一台服务器<br>\n<img src=\"/mycat/image-20201104204430049.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>单体应用架构，单数据库（数据库服务器和应用服务器分离，但是业务系统越做越大）<br>\n<img src=\"/mycat/image-20201104204624925.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>多应用单数据库（应用解耦）<br>\n<img src=\"/mycat/image-20201104204933409.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>多应用 独立数据库<br>\n<img src=\"/mycat/image-20201104205054233.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>但应用多数据库(分表)<br>\n<img src=\"/mycat/image-20201104205319372.png\" alt=\"mycat\"></p>\n</li>\n</ol>\n<h2 id=\"3-如何分库分表\"><a class=\"markdownIt-Anchor\" href=\"#3-如何分库分表\"></a> 3. 如何分库分表</h2>\n<p><img src=\"/mycat/image-20201104205653611.png\" alt=\"mycat\"></p>\n<ul>\n<li>\n<p>垂直切分</p>\n<ul>\n<li>\n<p>单库<br>\n<img src=\"/mycat/image-20201104205756827.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>多库<br>\n<img src=\"/mycat/image-20201104210008624.png\" alt=\"mycat\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>水平切分</p>\n<ul>\n<li>\n<p>按照月分表或者分成实时、历史表等<br>\n<img src=\"/mycat/image-20201104210117373.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>分成多库<br>\n<img src=\"/mycat/image-20201104210416994.png\" alt=\"mycat\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-分库分表带来的问题\"><a class=\"markdownIt-Anchor\" href=\"#4-分库分表带来的问题\"></a> 4. 分库分表带来的问题</h2>\n<ol>\n<li>\n<p>跨库关联查询</p>\n<ul>\n<li>增加冗余字段（违反了第三范式：表中的所有数据元素不但要能唯一地被主关键字所标识,而且它们之间还必须相互独立,不存在其他的函数关系）</li>\n<li>跨数据库的同步（canal、Mq（最好）、ETL、kettle、ogg）(在某个库中同步其他数据库中表的数据，避免跨库关联查询)</li>\n<li>全局表(广播表)：比如行政区划表，所有的系统都是一样的；</li>\n<li>API</li>\n</ul>\n</li>\n<li>\n<p>分布式事务</p>\n<ul>\n<li>Local</li>\n</ul>\n</li>\n<li>\n<p>排序、翻页、函数计算</p>\n<ul>\n<li></li>\n</ul>\n</li>\n<li>\n<p>全局主键</p>\n<ul>\n<li>雪花算法leaf</li>\n<li>redis(int 类型可以设置incby)</li>\n<li>ZookKeeper</li>\n<li>uuid(数据过长， 影响索引存储)</li>\n</ul>\n</li>\n<li>\n<p>多数据源连接（动态数据源）<br>\n<img src=\"/mycat/image-20201104213343204.png\" alt=\"mycat\"></p>\n</li>\n</ol>\n<h2 id=\"5-mycat分库分表中间件\"><a class=\"markdownIt-Anchor\" href=\"#5-mycat分库分表中间件\"></a> 5. Mycat分库分表中间件</h2>\n<p><strong>官网地址</strong>：<a href=\"http://www.mycat.org.cn/\">http://www.mycat.org.cn/</a></p>\n<p>从阿里cobar升级而来，完全实现了mysql协议，可以当作一个mysql数据库来使用，通过JDBC支持其他数据库实现分库分表，解决了<strong>多表join、分布式事务、全局序列号、翻页查询、函数计算</strong>的问题</p>\n<ul>\n<li>一个彻底开源的，面向企业应用开发的大数据库集群</li>\n<li>支持事务、ACID、可以替代MySQL的加强版数据库</li>\n<li>一个可以视为MySQL集群的企业级数据库，用来替代昂贵的Oracle集群</li>\n<li>一个融合内存缓存技术、NoSQL技术、HDFS大数据的新型SQL Server</li>\n<li>结合传统数据库和新型分布式数据仓库的新一代企业级数据库产品</li>\n<li>一个新颖的数据库中间件产品</li>\n</ul>\n<p>华为云的DDM其实也是根据mycat做的</p>\n<h3 id=\"51-核心概念\"><a class=\"markdownIt-Anchor\" href=\"#51-核心概念\"></a> 5.1 核心概念</h3>\n<p><img src=\"/mycat/image-20201104215015366.png\" alt=\"image-20201104215015366\"></p>\n<h3 id=\"52-mycat安装与配置\"><a class=\"markdownIt-Anchor\" href=\"#52-mycat安装与配置\"></a> 5.2 Mycat安装与配置</h3>\n<h4 id=\"521-mycat安装\"><a class=\"markdownIt-Anchor\" href=\"#521-mycat安装\"></a> 5.2.1 Mycat安装</h4>\n<p>从官网下载安装版本，解压到文件(官网建议安装在/usr/local/Mycat)后页面如下图所示：<br>\n<img src=\"/mycat/image-20201127094703483.png\" alt=\"image-20201127094703483\"></p>\n<p>目录解释如下：</p>\n<ul>\n<li>**bin：*<em>存放window版和linux版本除了提供封装成服务的版本之外，也提供了nowrap的shell脚本命令，方便选择和修改；Linux下运行:./mycat console， 首先要chmod + x</em>;(mycat支持的命令console、start、stop、restart、status、dump)</li>\n<li>**conf：**server.xml是mycat服务器参数调整和用户授权的配置文件，schema.xml是逻辑库定义和表以及分片定义的配置文件，rule.xml是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改，需要重启mycat或者通过9066端口reload</li>\n<li>**lib:**主要存放mycat依赖的一些jar文件</li>\n<li><strong>logs:<strong>日志存放在mycat.log中，每天一个文件，日志的配置是在conf/log4j.xml中，根据自己的需要，可以调整输出级别为debug，方便排查问题；注意Linux下部署安装mysql，默认不忽略，需要手动到/etc/my.cnf下配置</strong>lower_case_table_names=1</strong>使Linux环境下MySQL忽略表明大小写，否则使用mycat的时候会提示找不到表的错误</li>\n</ul>\n<h4 id=\"522-服务启动与配置\"><a class=\"markdownIt-Anchor\" href=\"#522-服务启动与配置\"></a> 5.2.2 服务启动与配置</h4>\n<p>Mycat在Linux中部署启动时，首先需要在Linux系统的环境变量中配置MYCAT_HOE,操作方式如下：</p>\n<ol>\n<li>\n<p>vi /etc/profile，在系统环境变量文件中增加MYCAT_HOME=/usr/lib/tools/mycat<br>\n<img src=\"/mycat/image-20201127103212598.png\" alt=\"image-20201127103212598\"></p>\n</li>\n<li>\n<p>执行 source/etc/profile命令，使环境变量生效。如果是多台Linux系统中组件Mycat集群，那需要在mycat Server所在的服务器配置对其他ip和主机名的映射，配置方式如下：<br>\n<img src=\"/mycat/image-20201127104159580.png\" alt=\"image-20201127104159580\"></p>\n<p>经过以上两个步骤的配置，就可以到/usr/lib/tools/mycat/bin目录下执行./mycat start启动mycat服务；使用mycat status查看mycat的运行状态；如下图<br>\n<img src=\"/mycat/image-20201128135953635.png\" alt=\"image-20201128135953635\"></p>\n</li>\n</ol>\n<h5 id=\"5221-安装遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#5221-安装遇到的问题\"></a> 5.2.2.1 安装遇到的问题</h5>\n<ol>\n<li>\n<p>schema TESTDB refered by user root is not exist!<img src=\"/mycat/image-20201215152125176.png\" alt=\"image-20201215152125176\"></p>\n<p>解决方式：</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--在conf/server.xml文件中schemas中配置schema.xml文件中的schema的name值--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--user中的name为mycat服务的用户名--&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;root&quot;</span> <span class=\"attr\">defaultAccount</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--这个是mycat服务连接的密码--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;schemas&quot;</span>&gt;</span>xiaoyuge<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"523日志分析\"><a class=\"markdownIt-Anchor\" href=\"#523日志分析\"></a> 5.2.3日志分析</h4>\n<p>mycat的日志文件配置为MYCAT_HOME/conf/log4j.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">log4j</span>:configuration <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">log4j:configuration</span> <span class=\"attr\">xmlns:log4j</span>=<span class=\"string\">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConsoleAppender&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConversionPattern&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;%d&#123;MM-dd HH:mm:ss.SSS&#125; %5p [%t] (%F:%L) -%m%n&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;FILE&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.RollingFileAppender&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--日志文件存放的目录--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;MYCAT_HOME&#125;/logs/mycat.log&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Append&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;MaxFileSize&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10000KB&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;MaxBackupIndex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;encoding&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConversionPattern&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;%d&#123;MM/dd HH:mm:ss.SSS&#125; %5p [%t] (%F:%L) -%m%n&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--level是日志级别，生产环境下加以将级别调整为info/ware，如果是研究测试，碰到异常设置为debug--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;debug&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;ConsoleAppender&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"5231-warpper日志\"><a class=\"markdownIt-Anchor\" href=\"#5231-warpper日志\"></a> 5.2.3.1 warpper日志</h5>\n<p>目前mycat的启动时经过warpper封装成启动脚本，所以日志也会有其相关的日志文件：${MYCAT_HOME}/logs/warapper.log， 在启动的时候如果系统环境配置错误或缺少配置时，导致mycat无法启动，可以通过查看wrapper.log查看具体错误原因。</p>\n<ol>\n<li>\n<p>正常启动</p>\n <figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">00</span> | --&gt; Wrapper Started as Daemon</span><br><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">00</span> | Launching a JVM...</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> | Wrapper (Version <span class=\"number\">3</span><span class=\"variable\">.2</span><span class=\"variable\">.3</span>) http:<span class=\"comment\">//wrapper.tanukisoftware.org</span></span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> | Copyright <span class=\"number\">1999</span>-<span class=\"number\">2006</span> Tanuki Software, Inc. AllRights Reserved.</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> |</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> | log4j <span class=\"number\">2015</span>-<span class=\"number\">04</span>-<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> [./conf/log4j<span class=\"variable\">.xml</span>]load completed.</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">02</span> | MyCAT Server startup successfully. see logs in logs/mycat<span class=\"variable\">.log</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>启动异常</p>\n <figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">44</span> | --&gt; Wrapper Started as Daemon</span><br><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">44</span> | Launching a JVM...</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">45</span> | Error: Exception thrown by the agent : java<span class=\"variable\">.rmi</span><span class=\"variable\">.server</span><span class=\"variable\">.ExportException</span>:</span><br><span class=\"line\">Port already in <span class=\"keyword\">use</span>: <span class=\"number\">1984</span>; nested exception is:</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">45</span> | java<span class=\"variable\">.net</span><span class=\"variable\">.BindException</span>: Address already in <span class=\"keyword\">use</span></span><br><span class=\"line\">ERROR | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">45</span> | JVM exited <span class=\"keyword\">while</span> loading the application.</span><br><span class=\"line\">    </span><br><span class=\"line\"># 日志显示异常原因为 java<span class=\"variable\">.net</span><span class=\"variable\">.BindException</span>: Address already in <span class=\"keyword\">use</span>,也就是端口占用，很有可能是原有服</span><br><span class=\"line\">务未停止，或者 Mycat 默认端口被其他程序占用，正常启动成功后会有 mycat<span class=\"variable\">.log</span> 日志，如果服务未启动成功不会有对应的日志。 也可以去修改 conf 文件夹里的 wrapper<span class=\"variable\">.conf</span> 里的 wrapper<span class=\"variable\">.java</span><span class=\"variable\">.additional</span><span class=\"variable\">.7</span>=-Dcom<span class=\"variable\">.sun</span><span class=\"variable\">.management</span><span class=\"variable\">.jmxremote</span><span class=\"variable\">.port</span>=<span class=\"number\">1984</span>，server<span class=\"variable\">.xml</span> 的&lt;<span class=\"keyword\">property</span> name=<span class=\"string\">&quot;serverPort&quot;</span>&gt;<span class=\"number\">8066</span>&lt;/<span class=\"keyword\">property</span>&gt;和</span><br><span class=\"line\">&lt;<span class=\"keyword\">property</span> name=<span class=\"string\">&quot;managerPort&quot;</span>&gt;<span class=\"number\">9066</span>&lt;/<span class=\"keyword\">property</span>&gt;，这方法适</span><br><span class=\"line\">合一台机器上两个 mycat 或者 <span class=\"number\">1984</span>,<span class=\"number\">8066</span>,<span class=\"number\">9066</span> 端口被其它应用占用的情况</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"5232-mycat日志\"><a class=\"markdownIt-Anchor\" href=\"#5232-mycat日志\"></a> 5.2.3.2 mycat日志</h5>\n<h4 id=\"524-mycat防火墙设置\"><a class=\"markdownIt-Anchor\" href=\"#524-mycat防火墙设置\"></a> 5.2.4 mycat防火墙设置</h4>\n<p>白名单和SQL黑名单说明：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--在 server.xml 中配置：--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">firewall</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--ip 白名单列表，可以配置多个--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">whitehost</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--ip 白名单 用户对应的可以访问的 ip 地址--&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">host</span> <span class=\"attr\">user</span>=<span class=\"string\">&quot;mycat&quot;</span> <span class=\"attr\">host</span>=<span class=\"string\">&quot;127.0.0.1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">whitehost</span>&gt;</span></span><br><span class=\"line\">     &lt;!-是否开启检查黑名单列表--&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">blacklist</span> <span class=\"attr\">check</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--黑名单允许的 权限 后面为默认--&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;selelctAllow&quot;</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">blacklist</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">firewall</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>黑名单配置拦截明细如下：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">配置项</th>\n<th style=\"text-align:center\">缺省值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">rollbackAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 roll back 操作,如果把 selectIntoAllow、deleteAllow、updateAllow、insertAllow、mergeAllow 都设置为 false，这就是一个只读数据源了。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否运行执行SELECT语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectAllColumnAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 SELECT * FROM T 这样的语句。如果设置为 false，不允许执行 select * from t，但 select * from (select id, name from t) a。这个选项是防御程序通过调用 select *获得数据表的结构信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectIntoAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">SELECT 查询中是否允许 INTO 字句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">deleteAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 DELETE 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updateAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 UPDATE 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">insertAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 INSERT 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">replaceAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 REPLACE 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mergeAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 MERGE 语句，这个只在 Oracle 中有用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">callAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许通过 jdbc 的 call 语法调用存储过程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许使用 SET 语法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">truncateAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">truncate 语句是危险，缺省打开，若需要自行关闭</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">createTableAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许创建表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">alterTableAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 Alter Table 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dropTableAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许修改表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">commentAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">是否允许语句中存在注释，Oracle 的用户不用担心，Wall 能够识别 hints和注释的区别</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">noneBaseStatementAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项 就能够屏蔽 DDL。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">multiStatementAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">是否允许一次执行多条语句，缺省关闭</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">useAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 mysql 的 use 语句，缺省打开</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">describeAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 mysql 的 describe 语句，缺省打开</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">showAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 mysql 的 show 语句，缺省打开</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">commitAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 commit 操作</td>\n</tr>\n</tbody>\n</table>\n<p><strong>拦截配置=-永真条件：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">配置项</th>\n<th style=\"text-align:center\">缺省值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">selectWhereAlwayTrueCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查 SELECT 语句的 WHERE 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectHavingAlwayTrueCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查 SELECT 语句的 HAVING 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">deleteWhereAlwayTrueCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查 DELETE 语句的 WHERE 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">deleteWhereNoneCheck</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">检查 DELETE 语句是否无 where 条件，这是有风险的，但不是 SQL 注入类型的风险</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updateWhereAlayTrueCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查 UPDATE 语句的 WHERE 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updateWhereNoneCheck</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">检查 UPDATE 语句是否无 where 条件，这是有风险的，但不是SQL 注入类型的风险</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionAndAlwayTrueAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionAndAlwayFalseAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永假条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionLikeTrueAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查查询条件(WHERE/HAVING 子句)中是否包含 LIKE 永真条件</td>\n</tr>\n</tbody>\n</table>\n<p><strong>其他拦截配置：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">配置项</th>\n<th style=\"text-align:left\">缺省值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">selectIntoOutfileAllow</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">SELECT … INTO OUTFILE 是否允许，这个是 mysql 注入攻击的常见手段，缺省是禁止的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectUnionCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">检测 SELECT UNION</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectMinusCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">检测 SELECT MINUS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectExceptCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">检测 SELECT EXCEPT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectIntersectCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">检测 SELECT INTERSECT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mustParameterized</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">是否必须参数化，如果为 True，则不允许类似 WHERE ID = 1 这种不参数化的 SQL</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strictSyntaxCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">是否进行严格的语法检测，Druid SQL Parser 在某些场景不能覆盖所有的，SQL 语法，出现解析 SQL 出错，可以临时把这个选项设置为 false，同时把 SQL 反馈给 Druid 的开发者</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionOpXorAllow</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">查询条件中是否允许有 XOR 条件。XOR 不常用，很难判断永真或者永假，缺省不允许。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionOpBitwseAllow</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">查询条件中是否允许有&quot;&amp;&quot;、&quot;~&quot;、&quot;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionDoubleConstAllow</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">查询条件中是否允许连续两个常量运算表达式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">minusAllow</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">是否允许 SELECT * FROM A MINUS SELECT * FROM B 这样的语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">intersectAllow</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">是否允许 SELECT * FROM A INTERSECT SELECT * FROM B 这样的语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">constArithmeticAllow</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">拦截常量运算的条件，比如说 WHERE FID = 3 - 1，其中&quot;3 - 1&quot;是常量运算表达式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">limitZeroAllow</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">是否允许 limit 0 这样的语句</td>\n</tr>\n</tbody>\n</table>\n<p><strong>禁用对象检测配置：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">配置项</th>\n<th style=\"text-align:center\">缺省值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">tableCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了禁用的表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">schemaCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了禁用的 Schema</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">functionCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了禁用的函数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">objectCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了“禁用对对象”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">variantCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了“禁用的变量”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">readOnlyTables</td>\n<td style=\"text-align:center\">空</td>\n<td style=\"text-align:center\">指定的表只读，不能够在 SELECT INTO、DELETE、UPDATE、INSERT、MERGE 中作为&quot;被修改表&quot;出现</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"525-mycat配置文件\"><a class=\"markdownIt-Anchor\" href=\"#525-mycat配置文件\"></a> 5.2.5 mycat配置文件</h4>\n<h5 id=\"5251-schemaxml配置\"><a class=\"markdownIt-Anchor\" href=\"#5251-schemaxml配置\"></a> 5.2.5.1 schema.xml配置</h5>\n<p>schema.xml作为mycat中重要的配置文件之一，管理者mycat的逻辑库、表、分片规则、DataNode以及DataSource。</p>\n<h5 id=\"5252-scheme标签\"><a class=\"markdownIt-Anchor\" href=\"#5252-scheme标签\"></a> 5.2.5.2 scheme标签</h5>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;TESTDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>schema标签用于定义mycat实例中的逻辑库，mycat可以由多个逻辑库，每个逻辑库都有自己的相关配置，可以使用schema标签来划分这些不同的逻辑库。如果不配置schema标签，所有的表配置，会属于同一个默认的逻辑库。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--逻辑库TESTDB--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;TESTDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;travelrecord&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn1,dn2,dn3&quot;</span> <span class=\"attr\">rule</span>=<span class=\"string\">&quot;auto-sharding-long&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--USERDB--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;USERDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;company&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn10,dn11,dn12&quot;</span> <span class=\"attr\">rule</span>=<span class=\"string\">&quot;auto-sharding-long&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t逻辑库的概念和MySQL数据库中的database概念相同，我们在查询这两个不同的逻辑库中表的时候需要切换到该逻辑库下才可以查询到所需要的表</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在server.xml中可以配置不同的用户能够使用的schema</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;root&quot;</span> <span class=\"attr\">defaultAccount</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultSchema&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 表级 DML 权限设置 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;privileges check=&quot;false&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                &lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                &lt;/schema&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/privileges&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>user<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;readOnly&quot;</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultSchema&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/mycat/image-20201129110838590.png\" alt></p>\n<p>schema标签的相关属性：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:center\">值</th>\n<th style=\"text-align:center\">数量限制</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">dataNode</td>\n<td style=\"text-align:center\">任意string</td>\n<td style=\"text-align:center\">（0…1）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">checkSQLschema</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">（1）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sqlMaxLimit</td>\n<td style=\"text-align:center\">Integer</td>\n<td style=\"text-align:center\">（1）</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"52521-datanode\"><a class=\"markdownIt-Anchor\" href=\"#52521-datanode\"></a> 5.2.5.2.1  dataNode</h6>\n<p>该属性用于绑定逻辑库到某个具体的database上，1.3版本如果配置了dataNode,则不可以配置分片表，1.4可以配置默认分片，只需要配置需要分片的表即可，具体配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--1.3版本配置--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;USERDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn1&quot;</span>&gt;</span>&lt;!—里面不能配置任何表--&gt;<span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span><span class=\"comment\">&lt;!--1.4版本配置--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;USERDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn2&quot;</span>&gt;</span>&lt;!—配置需要分片的表--&gt;\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">name</span>=<span class=\"string\">“tuser”</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">”dn1”/</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span><span class=\"comment\">&lt;!-- \t那么现在tuser就绑定到dn1所配置的具体database上，可以直接访问这个database，没有配置的表则会走默认的节点dn2，这里注意没有配置在分片里面的表工具查看无法显示，但是可以正常使用。--&gt;</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"52522-checksqlschema\"><a class=\"markdownIt-Anchor\" href=\"#52522-checksqlschema\"></a> 5.2.5.2.2 checkSQLschema</h6>\n<p>当改制设置为true时，我们执行“SELECT * FROM TESTDB.travelrecord；”则mycat会把语句修改为“SELECT * FROM travelrecord;”即把表示schema的字符去掉，避免发送到后端数据库执行报ERROR 1146：Table ‘testdb.travelrecord’ doest’t exist.不过，即使设置该值为 true ，如果语句所带的是并非是 schema 指定的名字，例如：<strong>select * from db1.travelrecord;</strong> 那么 MyCat 并不会删除 db1 这个字段，如果没有定义该库的话则会报错，所以在提供 SQL语句的最好是不带这个字段。</p>\n<h6 id=\"52523-sqlmaxlimit\"><a class=\"markdownIt-Anchor\" href=\"#52523-sqlmaxlimit\"></a> 5.2.5.2.3 sqlMaxLimit</h6>\n<p>当该值设置为某个数值时。每条执行的 SQL 语句，如果没有加上 limit 语句，MyCat 也会自动的加上所对应的值。例如设置值为 100，执行**select * from TESTDB.travelrecord;<strong>的效果为和执行</strong>select * from TESTDB.travelrecord limit 100;**相同。</p>\n<p>设置该值的话，MyCat 默认会把查询到的信息全部都展示出来，造成过多的输出。所以，在正常使用中，还是建议加上一个值，用于减少过多的数据返回。</p>\n<p>当然 SQL 语句中也显式的指定 limit 的大小，不受该属性的约束。</p>\n<p>需要注意的是，如果运行的 schema 为非拆分库的，那么该属性不会生效。需要手动添加 limit 语句。</p>\n<h3 id=\"52-分配规则\"><a class=\"markdownIt-Anchor\" href=\"#52-分配规则\"></a> 5.2 分配规则</h3>\n<p><img src=\"/mycat/image-20201104222632963.png\" alt=\"image-20201104222632963\"><br>\n<img src=\"/mycat/image-20201104221336437.png\" alt=\"image-20201104221336437\"></p>\n<ul>\n<li>\n<p>范围分片：根据某个字设置auto-sharding-long，如果这个primaryKey超出了范围会报错</p>\n</li>\n<li>\n<p>取模分片：</p>\n</li>\n<li>\n<p>ER分片（将父子表有关联的数据放在一个data-node里面）</p>\n<p><img src=\"/mycat/image-20201104221659540.png\" alt=\"image-20201104221659540\"></p>\n</li>\n<li>\n<p>全局表：所有dataNode存储相同的数据，查询的时候是随机查询某个表 type=global，查询的时候随机从某个datanode获取</p>\n</li>\n<li>\n<p>非分片表：只在某个dataNode上存储,指定一个dataNode并且不写分片规则</p>\n</li>\n<li>\n<p>单库分表：有个bug在实际数据库中必须要创建mycat中一摸一样的数据表，而且truncat的时候要现在dataNode先删除，才能删除的掉mycat的数据</p>\n</li>\n</ul>\n<h3 id=\"53-全局id\"><a class=\"markdownIt-Anchor\" href=\"#53-全局id\"></a> 5.3 全局ID</h3>\n<p><img src=\"/mycat/image-20201104223246735.png\" alt=\"image-20201104223246735\"></p>\n<ul>\n<li>文件方式—0</li>\n<li>数据库方式—1</li>\n<li>本地时间戳----2</li>\n<li>ZK方式----3</li>\n</ul>\n<h2 id=\"6-mycat分片策略详解\"><a class=\"markdownIt-Anchor\" href=\"#6-mycat分片策略详解\"></a> 6. Mycat分片策略详解</h2>\n<p>连续分片与离散分片</p>\n<p><img src=\"/mycat/image-20201107201442912.png\" alt=\"image-20201107201442912\"></p>\n<p><strong>连续分片</strong>：</p>\n<ul>\n<li>范围分片</li>\n<li>日期/事件</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>存在数据热点的可能性</li>\n<li>并发访问能力受限于单一或少量DataNode（访问集中），并不能分摊数据库访问的压力</li>\n</ul>\n<p><strong>离散</strong>：</p>\n<ul>\n<li>\n<p>取模（partioncount 的总数必须和分片总数相同）</p>\n</li>\n<li>\n<p>枚举</p>\n</li>\n<li>\n<p>一致性哈希(qs-murmur)</p>\n</li>\n<li>\n<p>固定分片哈希</p>\n<ul>\n<li>\n<p>partitionCount: 2, 1表示有三个分片必须和节点数量一致，否则会报错，前面两个一样长</p>\n</li>\n<li>\n<p>partitionLength: 256, 512表示长度为256和512</p>\n</li>\n<li>\n<p>综合在一起就是前面2个分片长度为256， 最后一个为512，结果如下图所示（注意partitionCount和partitionLength的数量一定要一致）</p>\n</li>\n<li>\n<p><img src=\"/mycat/image-20201219103201836.png\" alt=\"image-20201219103201836\"></p>\n<p><img src=\"/mycat/image-20201219102742172.png\" alt=\"image-20201219102742172\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>取模范围(sharting-by-pattern)：先取模PartitionByPattern后分片</p>\n</li>\n<li>\n<p>范围取模: PartitionByRangeMod(partition-rane-mod.txt)</p>\n<ul>\n<li>\n<pre class=\"highlight\"><code class=\"txt\">0-2000=1\t\t#范围在2000以内的在第一个节点（取模的结果还是本身）\n2001-4000=2\t\t#范围在2001到4000以内的再模2，结果为0在第一个节点，结果为1在第三个节点\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">-   其他</span><br><span class=\"line\"></span><br><span class=\"line\">优点：</span><br><span class=\"line\"></span><br><span class=\"line\">-   并发访问能力增强（负载到不同的节点）</span><br><span class=\"line\">-   范围条件查询性能提升（并行计算）</span><br><span class=\"line\"></span><br><span class=\"line\">缺点：</span><br><span class=\"line\"></span><br><span class=\"line\">-   数据扩容比较困难，设计到数据迁移问题</span><br><span class=\"line\">-   数据库连接消耗比较多</span><br><span class=\"line\"></span><br><span class=\"line\">分片策略的选择：</span><br><span class=\"line\"></span><br><span class=\"line\">1） 确定分片表</span><br><span class=\"line\"></span><br><span class=\"line\">2） 找出分片键</span><br><span class=\"line\"></span><br><span class=\"line\">3） 考虑容量、增速、业务用户</span><br><span class=\"line\"></span><br><span class=\"line\">如果在查询语句中没有携带分片建，那么mycat会将sql发布到所有的节点上</span><br><span class=\"line\"></span><br><span class=\"line\">## 7. Mycat扩缩容</span><br><span class=\"line\"></span><br><span class=\"line\">### 7.1 在线不停机扩缩容（双写）</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20201107205855474](./mycat/image-20201107205855474.png)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 7.2 离线扩缩容</span><br><span class=\"line\"></span><br><span class=\"line\">#### 7.2.1Mysql Dump</span><br><span class=\"line\"></span><br><span class=\"line\">```shell</span><br><span class=\"line\">mysqldump -uroot -p123456 -h127.0.0.1 -p3306 -c -t --skip-extended-insert 数据库名称 &gt; mysql.11.11.sql</span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"722-mycat自带工具\"><a class=\"markdownIt-Anchor\" href=\"#722-mycat自带工具\"></a> 7.2.2 Mycat自带工具</h4>\n<ol>\n<li>mycat所在环境安装mysql客户端程序</li>\n<li>mycat的lib目录下添加mysql的jdbc驱动包（mysql-connector-java-5.7.1.jar）</li>\n<li>对扩容缩容的表所有节点数据进行备份</li>\n<li>复制schema.xml、rule.xml并重命名为newSchema.xml、newRule.xml</li>\n<li>修改newSchema.xml和newRule.xml配置文件为扩容缩容后的参数</li>\n<li>在conf/migrateTable.properties配置文件中配置分片库和分片表如：imall=table_test1</li>\n<li>dataMigrate.sh配置mysqldump路径</li>\n<li>停止mycat服务</li>\n<li>执行bin/dataMigrate.sh脚本（不能用openjdk）</li>\n<li>替换schema.xml、rule.xml</li>\n</ol>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>保证分片表迁移数据前后路由规则一致（取模–&gt;取模）</li>\n<li>保证分片表歉意数据前后分片字段一致</li>\n<li>全局表将被忽略</li>\n<li>不要将非分片表配置到migrateTables.properties文件中</li>\n<li>暂时只支持分片表使用Mysql作为数据源的扩容缩容</li>\n</ul>\n<h2 id=\"8-mycat读写分离\"><a class=\"markdownIt-Anchor\" href=\"#8-mycat读写分离\"></a> 8. Mycat读写分离</h2>\n<h3 id=\"81-主从复制\"><a class=\"markdownIt-Anchor\" href=\"#81-主从复制\"></a> 8.1 主从复制</h3>\n<ol>\n<li>数据备份回复</li>\n<li>负载均衡（读写分离）</li>\n<li>高可用HA</li>\n</ol>\n<h3 id=\"82-主从复制形式\"><a class=\"markdownIt-Anchor\" href=\"#82-主从复制形式\"></a> 8.2 主从复制形式;</h3>\n<p><img src=\"/mycat/image-20201107212552852.png\" alt=\"image-20201107212552852\"></p>\n<h4 id=\"binlogbinary-log-二进制日志\"><a class=\"markdownIt-Anchor\" href=\"#binlogbinary-log-二进制日志\"></a> binlog(Binary log 二进制日志)</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查看binglog: SHOW binlog events in &#x27;mysql-bin.000001&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">--show variables like &#x27;max_blog_max&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"binlog配置\"><a class=\"markdownIt-Anchor\" href=\"#binlog配置\"></a> binlog配置</h4>\n<ul>\n<li>STATEMENT: 记录每一天修改数据的sql语句（减少日志量，节约IO）</li>\n<li>ROW: 记录哪条数据被修改了，修改成什么样子了（5.7以后默认）</li>\n<li>MIXED: 结合两种方式，一般语句用STATEMENT,函数之类的使用ROW</li>\n</ul>\n<p><strong>binlog</strong>格式（mysql-bin.00001等）</p>\n<p><strong>查看binlog</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> binlog events <span class=\"keyword\">in</span> <span class=\"string\">&#x27;mysql-bin.00001&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"主从复制原理\"><a class=\"markdownIt-Anchor\" href=\"#主从复制原理\"></a> 主从复制原理</h3>\n<p>SQL Thread是单线程的， 这也是所有的主从复制延迟的原因，那么relay log接受master节点的sql语句主要是用于缓冲</p>\n<p><img src=\"/mycat/image-20201107213638624.png\" alt=\"image-20201107213638624\"></p>\n<h3 id=\"mycat读写分离配置\"><a class=\"markdownIt-Anchor\" href=\"#mycat读写分离配置\"></a> mycat读写分离配置</h3>\n<p><img src=\"/mycat/image-20201107213859155.png\" alt=\"image-20201107213859155\"></p>\n<h3 id=\"85-mycat注解hint\"><a class=\"markdownIt-Anchor\" href=\"#85-mycat注解hint\"></a> 8.5 Mycat注解（hint）</h3>\n<p>注解用法：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*!mycat:sql=注解sql语句*/真正执行的SQL</span><br><span class=\"line\"></span><br><span class=\"line\">比如说在mycat上创建表无法创建成功，可以使用注解</span><br><span class=\"line\">/*!mycat:sql=select * from table<span class=\"built_in\">_</span>1 where id = 1*/create table test2(id int);</span><br><span class=\"line\">主要注解sql可以确认mycat可以路由到子结点上，就可以执行后面的真正执行的sql语句</span><br></pre></td></tr></table></figure>\n<p>注解用途：</p>\n<ul>\n<li>跨库关联查询</li>\n<li>DDL或存储过程</li>\n<li>自定义分片</li>\n<li>读写分离</li>\n</ul>\n<h3 id=\"分布式事务\"><a class=\"markdownIt-Anchor\" href=\"#分布式事务\"></a> 分布式事务</h3>\n<p>基于XA协议的两阶段提交</p>\n<p><img src=\"/mycat/image-20201107215437139.png\" alt=\"image-20201107215437139\"></p>\n<h4 id=\"xa角色\"><a class=\"markdownIt-Anchor\" href=\"#xa角色\"></a> XA角色</h4>\n<p><img src=\"/mycat/image-20201107215605251.png\" alt=\"image-20201107215605251\"></p>\n<h4 id=\"xa实现\"><a class=\"markdownIt-Anchor\" href=\"#xa实现\"></a> XA实现</h4>\n<p><img src=\"/mycat/image-20201107220049532.png\" alt=\"image-20201107220049532\"></p>\n<h2 id=\"9-mycat核心流程\"><a class=\"markdownIt-Anchor\" href=\"#9-mycat核心流程\"></a> 9. Mycat核心流程</h2>\n<h3 id=\"91-架构图\"><a class=\"markdownIt-Anchor\" href=\"#91-架构图\"></a> 9.1 架构图</h3>\n<p><img src=\"/mycat/image-20201220170713526.png\" alt=\"image-20201220170713526\"></p>\n<h3 id=\"92-启动流程\"><a class=\"markdownIt-Anchor\" href=\"#92-启动流程\"></a> 9.2 启动流程</h3>\n<ol>\n<li>MycatServer启动，解析配置文件，包括服务器、分片规则等</li>\n<li>创建工作线程，建立前端连接和后端连接</li>\n</ol>\n<h3 id=\"93-执行sql流程\"><a class=\"markdownIt-Anchor\" href=\"#93-执行sql流程\"></a> 9.3 执行SQL流程</h3>\n<ol>\n<li>前端连接接收mysql命令</li>\n<li>解析MySQL，mycat用的是Druid的DruidParser</li>\n<li>获取路由</li>\n<li>改写MySQL，例如两个条件在两个节点上，则变成两条单独的sql</li>\n<li>与后端数据库建立连接</li>\n<li>发送sql语句到MySQL执行</li>\n<li>获取返回结果</li>\n<li>处理返回结果，例如排序、计算等等</li>\n<li>返回给客户端</li>\n</ol>\n<h2 id=\"mycat高可用\"><a class=\"markdownIt-Anchor\" href=\"#mycat高可用\"></a> Mycat高可用</h2>\n<p><img src=\"/mycat/image-20201220172406074.png\" alt=\"image-20201220172406074\"></p>\n"},{"title":"vue学习","comments":1,"abbrlink":50454,"date":"2021-07-23T03:40:44.000Z","translate_title":"vue-learning","_content":"\nObject.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。\n### 1. export\n---\n用于规定模块的对外接口，export输出变量和方法、类\n\n-   变量\n\n    ```javascript\n    // profile.js\n    export var firstName = 'Michael';\n    export var lastName = 'Jackson';\n    export var year = 1958;\n    \n    //简写--优先使用\n    export {firstName, lastName, year}\n    ```\n\n-   方法\n\n    ```javascript\n    //如果想为输入的变量重新命名， 可以使用AS 关键字重新命名\n    import { buildMenus as buildMenus} from '@/api/menu';\n    //import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同\n    ```\n\n### 2. export default\n\n为模块指定默认输出， 使用import命令的时候，用户需要知道所要加载的变量名和函数名，否则无法加载；了解模块有哪些方法和属性比较麻烦，使用export default命令，为模块指定默认输出\n\n```javascript\n// export-default.js\nexport default function () {\n  console.log('foo');\n}\n```\n\n上面代码是一个模块文件export-default.js。默认输出1个函数；\n\n与export命令的区别：其他模块加载该模块是，import命令可以为该匿名函数指定任意名字\n\n```javascript\n// import-default.js\nimport customName from './export-default';\ncustomName(); // 'foo'\n```\n\n上面代码的`import`命令，可以用任意名称指向`export-default.js`输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时`import`命令后面，不使用大括号。\n\n本质上，`export default`就是输出一个叫做`default`的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。\n\n```javascript\n// modules.js\nfunction add(x, y) {\n  return x * y;\n}\nexport {add as default};\n// 等同于\n// export default add;\n\n// app.js\nimport { default as foo } from 'modules';\n// 等同于\n// import foo from 'modules';\n```\n\n正是因为`export default`命令其实只是输出一个叫做`default`的变量，所以它后面不能跟变量声明语句。\n\n**总结：**\n\n-   export命令对外接口是有名称的且`import`命令从模块导入的变量名与被导入模块对外接口的名称相同，而export default命令对外输出的变量名可以是任意的，这时`import`命令后面，不使用大括号。\n\n-   `export default`命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此`export default`命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应`export default`命令。\n\n```javascript\n//menu.js\n//get请求获取所有的菜单信息\nexport function buildMenus() {\n  return request({\n    url: 'api/menus/build',\n    method: 'get'\n  })\n}\n//post 请求保存数据\nexport function add(data) {\n  return request({\n    url: 'api/menus',\n    method: 'post',\n    data\n  })\n}\n//delete 请求删除数据\nexport function del(id) {\n  return request({\n    url: 'api/menus/' + id,\n    method: 'delete'\n  })\n}\n//put请求修改数据\nexport function edit(data) {\n  return request({\n    url: 'api/menus',\n    method: 'put',\n    data\n  })\n}\n\n//app.vue\nimport { buildMenus } from '@/api/menu';\n```\n\n### 3. Const、var、let\n\n ES5 中作用域有：全局作用域、函数作用域。没有块作用域的概念。\n\n ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域\n\n```javascript\n{\n  var a = 1;\n  console.log(a); // 1\n}\nconsole.log(a); // 1\n// 通过var定义的变量可以跨块作用域访问到。\n\n(function A() {\n  var b = 2;\n  console.log(b); // 2\n})();\n// console.log(b); // 报错，\n// 可见，通过var定义的变量不能跨函数作用域访问到\n\nif(true) {\n  var c = 3;\n}\nconsole.log(c); // 3\nfor(var i = 0; i < 4; i ++) {\n  var d = 5;\n};\nconsole.log(i); // 4   (循环结束i已经是4，所以此处i为4)\nconsole.log(d); // 5\n// if语句和for语句中用var定义的变量可以在外面访问到，\n// 可见，if语句和for语句属于块作用域，不属于函数作用域\n```\n\n三者的区别：\n\n1.  var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。\n2.  let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。\n3.  const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。\n\n```javascript\n// 块作用域\n{\n  var a = 1;\n  let b = 2;\n  const c = 3;\n  // c = 4; // 报错\n  var aa;\n  let bb;\n  // const cc; // 报错\n  console.log(a); // 1\n  console.log(b); // 2\n  console.log(c); // 3\n  console.log(aa); // undefined\n  console.log(bb); // undefined\n}\nconsole.log(a); // 1\n// console.log(b); // 报错\n// console.log(c); // 报错\n\n// 函数作用域\n(function A() {\n  var d = 5;\n  let e = 6;\n  const f = 7;\n  console.log(d); // 5\n  console.log(e); // 6  \n  console.log(f); // 7 \n})();\n// console.log(d); // 报错\n// console.log(e); // 报错\n// console.log(f); // 报错\n\n```\n\n注意：**const定义的对象属性是否可以改变**\n\n```javascript\nconst person = {\n  name : 'jiuke',\n  sex : '男'\n}\nperson.name = 'test'\nconsole.log(person.name)//person对象的name属性确实被修改了\n```\n\n因为对象是引用类型的，person中保存的仅是对象的指针，这就意味着，const仅保证指针不发生改变，修改对象的属性不会改变对象的指针，所以是被允许的。也就是说const定义的引用类型只要指针不发生改变，其他的不论如何改变都是允许的。\n\n然后我们试着修改一下指针，让person指向一个新对象，果然报错\n\n```javascript\nconst person = {\n   name : 'jiuke',\n   sex : '男'\n}\nperson = {\n   name : 'test',\n   sex : '男'\n}\n//报错\n```\n\n### 4. promise\n\npromise用途：异步编程的一种解决方案。\n\n优点：比传统的解决方案——回调函数和事件——更合理和更强大。\n\n三种状态：`pending`（进行中）、`fulfilled`（已成功）和`rejected`（已失败）。\n\n```javascript\n//基本用法：\nconst promise = new Promise(function(resolve, reject) {\n    resolve(value);//表示异步操作成功\n    reject(error);//表示异步操作失败\n});\n\n//promise常用的几个方法\n//1. 异步状态为成功时调用第一个函数，为失败时调用第二个函数。then方法的第二个参数可选。\npromise.then(value => {},error => {});\n\n//2. 异步状态为失败时调用。\npromise.catch(error => {});\n\n//3. promise异步状态为失败时或then方法中抛出错误都会执行catch方法。\npromise.then(value => {},error => {}).catch(error => {});\n\n//4. 不管状态如何都会执行的操作。\npromise.finally(() => {});\n```\n\n### 5. 生命周期\n\n<img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n### 6. 模版语法\n\n#### v-once\n\n执行一次性插值，当数据变化的时候，该内容不会更新；可能会影响该节点其他的数据绑定\n\n```html\n<span v-once>这个将不会改变: {{ msg }}</span>\n```\n\n#### v-html\n\n双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用v-html;\n\n```html\nvar rawHtml = \"<span>这是个使用v-htmls</span>\"\n\n<p>Using mustaches: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\n#### [Attribute](https://cn.vuejs.org/v2/guide/syntax.html#Attribute)\n\nMustache ({}) 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 [`v-bind` 指令](https://cn.vuejs.org/v2/api/#v-bind)：\n\n```html\n<div v-bind:id=\"dynamicId\"></div>\n\n\n//isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 <button> 元素中\n<button v-bind:disabled=\"isButtonDisabled\">Button</button>\n```\n\n#### 三元表达式\n\n```html\n{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div v-bind:id=\"'list-' + id\"></div>\n\n//这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。\n<!-- 这是语句，不是表达式 -->\n{{ var a = 1 }}\n\n<!-- 流控制也不会生效，请使用三元表达式 -->\n{{ if (ok) { return message } }}\n```\n\n### 7. 指令Directives\n\n指令 (Directives) 是带有 `v-` 前缀的特殊 attribute。指令 attribute 的值预期是**单个 JavaScript 表达式** (`v-for` 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。\n\n```html\n//v-if 指令将根据表达式 seen 的值的真假来插入/移除 <p> 元素。\n<p v-if=\"seen\">现在你看到我了</p>\n```\n\n#### 参数\n\n一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，`v-bind` 指令可以用于响应式地更新 HTML attribute\n\n```html\n//href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定\n<a v-bind:href=\"url\">...</a>\n\n<a v-on:click=\"doSomething\">...</a>\n```\n\n#### 动态参数\n\n 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数\n\n```html\n<a v-bind:[attributeName] = \"url\"></a>\n<!--\n\t这里的attributeName会被作为一个javascript表达式进行动态赋值，求得的值会作为最终的参数来使用\n如果VUE实例有一个data. property. attributeName， 其值为href， 那么绑定将等价于v-bind:href\n--->\n```\n\n绑定处理函数：\n\n```html\n<a v-on:[eventName]=\"dosomething\"></a>\n```\n\n-   对动态参数的值的约束\n\n    动态参数预期会求出一个字符串，异常情况下值为 `null`。这个特殊的 `null` 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。\n\n-   对动态参数表达式的约束\n\n    动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：\n\n#### 修饰符\n\n修饰符（modifier）是以半角句号`.` 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定；例如` .prevent`修饰符告诉v-on指令对触发的事件调用event.preventDefault();\n\n```html\n<form v-on:submit.prevent = \"onSubmit\">\n  \n</form>\n```\n\n#### 缩写\n\n```html\n<!-- 完整语法 -->\n<a v-bind:href=\"url\">...</a>\n\n<!-- 缩写 -->\n<a :href=\"url\">...</a>\n\n<!-- 动态参数的缩写 (2.6.0+) -->\n<a :[key]=\"url\"> ... </a>\n\n\n<!-- 完整语法 -->\n<a v-on:click=\"doSomething\">...</a>\n\n<!-- 缩写 -->\n<a @click=\"doSomething\">...</a>\n\n<!-- 动态参数的缩写 (2.6.0+) -->\n<a @[event]=\"doSomething\"> ... </a>\n```\n\n`:` 与 `@` 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。\n\n### 8. 计算属性\n\n```html\n<div id=\"example\">\n  {{ message.split('').reverse().join('') }}\n</div>\n```\n\n这里是想要显示变量 `message` 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。\n\n所以，对于任何复杂逻辑，你都应当使用**计算属性**\n\n例如：\n\n```html\n<div id=\"example\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n```\n\n```javascript\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    // 计算属性的 getter\n    reversedMessage: function () {\n      // `this` 指向 vm 实例\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n\n//页面显示：\n//Original message: \"Hello\"\n//Computed reversed message: \"olleH\"\n```\n\n声明了一个计算属性`reversedMessage`；我们提供的函数将用作property `vm.reversedMessage`的getter函数\n\n```javascript\nconsole.log(vm.reversedMessage) // olleH\nvm.message = 'Goodbye'\nconsole.log(vm.reversedMessage) // => 'eybdooG'\n```\n\n你可以打开浏览器的控制台，自行修改例子中的 vm。`vm.reversedMessage` 的值始终取决于 `vm.message` 的值。\n\n你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 `vm.reversedMessage` 依赖于 `vm.message`，因此当 `vm.message` 发生改变时，所有依赖 `vm.reversedMessage` 的绑定也会更新。以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的。\n\n#### 计算属性 VS 方法\n\n使用表达式中调用方法同样可以达到上面的结果\n\n```html\n<p>Reversed message: \"{{ reversedMessage() }}\"</p>\n```\n\n```javascript\n// 在组件中\nmethods: {\n  reversedMessage: function () {\n    return this.message.split('').reverse().join('')\n  }\n}\n```\n\n我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是**计算属性是基于它们的响应式依赖进行缓存的**。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 `message` 还没有发生改变，多次访问 `reversedMessage` 计算属性会立即返回之前的计算结果，而不必再次执行函数。\n\n这也同样意味着下面的计算属性将不再更新，因为 `Date.now()` 不是响应式依赖：\n\n```\ncomputed: {\n  now: function () {\n    return Date.now()\n  }\n}\n```\n\n相比之下，每当触发重新渲染时，调用方法将**总会**再次执行函数。\n\n我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 **A**，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 **A**。如果没有缓存，我们将不可避免的多次执行 **A** 的 getter！如果你不希望有缓存，请用方法来替代。\n\n#### 计算属性 VS 侦听属性\n\n侦听属性：vue提供了一种更通用的方式来观察和响应vue实例上的数据变动；当有一些数据需要随着其他数据变动而变动时；很容易滥用watch;**通常更好的做法是使用计算属性而不是命令式的watch回调**；\n\n```html\n<div id=\"demo\">{{ fullName }}</div>\n```\n\n```javascript\nvar vm = new Vue({\n  el: '#demo',\n  data: {\n    firstName: 'Foo',\n    lastName: 'Bar',\n    fullName: 'Foo Bar'\n  },\n  //侦听属性watch \n  watch: {\n    firstName: function (val) {\n      this.fullName = val + ' ' + this.lastName\n    },\n    lastName: function (val) {\n      this.fullName = this.firstName + ' ' + val\n    }\n  },\n  //计算属性\n  computed: {\n    fullName: function () {\n      return this.firstName + ' ' + this.lastName\n    }\n  }\n})\n\n```\n\n#### 计算属性的setter\n\n计算属性默认只有getter，自己可以提供一个setter\n\n```javascript\ncomputed: {\n  fullName: {\n    // getter\n    get: function () {\n      return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n      var names = newValue.split(' ')\n      this.firstName = names[0]\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n```\n\n现在再运行 `vm.fullName = 'John Doe'` 时，setter 会被调用，`vm.firstName` 和 `vm.lastName` 也会相应地被更新。\n\n### 9. 侦听器\n\n当需要在数据变化时执行异步或开销较大的操作时，watch是最有用的；同时也可以自定义侦听器；\n\n```html\n<div id=\"watch-example\">\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\">\n  </p>\n  <p>{{ answer }}</p>\n</div>\n```\n\n```javascript\n<!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 -->\n<!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 -->\n<script src=\"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js\"></script>\n<script>\nvar watchExampleVM = new Vue({\n  el: '#watch-example',\n  data: {\n    question: '',\n    answer: 'I cannot give you an answer until you ask a question!'\n  },\n  watch: {\n    // 如果 `question` 发生改变，这个函数就会运行\n    question: function (newQuestion, oldQuestion) {\n      this.answer = 'Waiting for you to stop typing...'\n      this.debouncedGetAnswer()\n    }\n  },\n  created: function () {\n    // `_.debounce` 是一个通过 Lodash 限制操作频率的函数。\n    // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率\n    // AJAX 请求直到用户输入完毕才会发出。想要了解更多关于\n    // `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，\n    // 请参考：https://lodash.com/docs#debounce\n    this.debouncedGetAnswer = _.debounce(this.getAnswer, 500)\n  },\n  methods: {\n    getAnswer: function () {\n      if (this.question.indexOf('?') === -1) {\n        this.answer = 'Questions usually contain a question mark. ;-)'\n        return\n      }\n      this.answer = 'Thinking...'\n      var vm = this\n      axios.get('https://yesno.wtf/api')\n        .then(function (response) {\n          vm.answer = _.capitalize(response.data.answer)\n        })\n        //异常捕获\n        .catch(function (error) {\n          vm.answer = 'Error! Could not reach the API. ' + error\n        })\n    }\n  }\n})\n</script>\n```\n\n使用 `watch` 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的\n\n### 10. class与style绑定\n\n将 `v-bind` 用于 `class` 和 `style` 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组\n\n#### 10.1 绑定html class\n\n##### 10.1.1对象语法\n\n方式一：内联\n\n```html\n<div\n  class=\"static\"\n  v-bind:class=\"{ active: isActive, 'text-danger': hasError }\"\n></div>\n//data\ndata: {\n  isActive: true,\n  hasError: false\n}\n```\n\n方式二：绑定的数据对象不必内联定义在模板里\n\n```html\n<div v-bind:class=\"classObject\"></div>\n//vue data\ndata: {\n  classObject: {\n    active: true,\n    'text-danger': false\n  }\n}\n```\n\n方式三：绑定一个返回对象的计算属性（常用）\n\n```html\n<div v-bind:class=\"classObject\"></div>\n\n//vue data\ndata: {\n  isActive: true,\n  error: null\n},\ncomputed: {\n  classObject: function () {\n    return {\n      active: this.isActive && !this.error,\n      'text-danger': this.error && this.error.type === 'fatal'\n    }\n  }\n}\n```\n\n##### 10.1.2 数组语法\n\n","source":"_posts/2021/07/vue.md","raw":"---\ntitle: vue学习\ntags: vue\ncategories: 学习笔记\ncomments: true\nabbrlink: 50454\ndate: 2021-07-23 11:40:44\ntranslate_title: vue-learning\n---\n\nObject.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。\n### 1. export\n---\n用于规定模块的对外接口，export输出变量和方法、类\n\n-   变量\n\n    ```javascript\n    // profile.js\n    export var firstName = 'Michael';\n    export var lastName = 'Jackson';\n    export var year = 1958;\n    \n    //简写--优先使用\n    export {firstName, lastName, year}\n    ```\n\n-   方法\n\n    ```javascript\n    //如果想为输入的变量重新命名， 可以使用AS 关键字重新命名\n    import { buildMenus as buildMenus} from '@/api/menu';\n    //import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同\n    ```\n\n### 2. export default\n\n为模块指定默认输出， 使用import命令的时候，用户需要知道所要加载的变量名和函数名，否则无法加载；了解模块有哪些方法和属性比较麻烦，使用export default命令，为模块指定默认输出\n\n```javascript\n// export-default.js\nexport default function () {\n  console.log('foo');\n}\n```\n\n上面代码是一个模块文件export-default.js。默认输出1个函数；\n\n与export命令的区别：其他模块加载该模块是，import命令可以为该匿名函数指定任意名字\n\n```javascript\n// import-default.js\nimport customName from './export-default';\ncustomName(); // 'foo'\n```\n\n上面代码的`import`命令，可以用任意名称指向`export-default.js`输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时`import`命令后面，不使用大括号。\n\n本质上，`export default`就是输出一个叫做`default`的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。\n\n```javascript\n// modules.js\nfunction add(x, y) {\n  return x * y;\n}\nexport {add as default};\n// 等同于\n// export default add;\n\n// app.js\nimport { default as foo } from 'modules';\n// 等同于\n// import foo from 'modules';\n```\n\n正是因为`export default`命令其实只是输出一个叫做`default`的变量，所以它后面不能跟变量声明语句。\n\n**总结：**\n\n-   export命令对外接口是有名称的且`import`命令从模块导入的变量名与被导入模块对外接口的名称相同，而export default命令对外输出的变量名可以是任意的，这时`import`命令后面，不使用大括号。\n\n-   `export default`命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此`export default`命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应`export default`命令。\n\n```javascript\n//menu.js\n//get请求获取所有的菜单信息\nexport function buildMenus() {\n  return request({\n    url: 'api/menus/build',\n    method: 'get'\n  })\n}\n//post 请求保存数据\nexport function add(data) {\n  return request({\n    url: 'api/menus',\n    method: 'post',\n    data\n  })\n}\n//delete 请求删除数据\nexport function del(id) {\n  return request({\n    url: 'api/menus/' + id,\n    method: 'delete'\n  })\n}\n//put请求修改数据\nexport function edit(data) {\n  return request({\n    url: 'api/menus',\n    method: 'put',\n    data\n  })\n}\n\n//app.vue\nimport { buildMenus } from '@/api/menu';\n```\n\n### 3. Const、var、let\n\n ES5 中作用域有：全局作用域、函数作用域。没有块作用域的概念。\n\n ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域\n\n```javascript\n{\n  var a = 1;\n  console.log(a); // 1\n}\nconsole.log(a); // 1\n// 通过var定义的变量可以跨块作用域访问到。\n\n(function A() {\n  var b = 2;\n  console.log(b); // 2\n})();\n// console.log(b); // 报错，\n// 可见，通过var定义的变量不能跨函数作用域访问到\n\nif(true) {\n  var c = 3;\n}\nconsole.log(c); // 3\nfor(var i = 0; i < 4; i ++) {\n  var d = 5;\n};\nconsole.log(i); // 4   (循环结束i已经是4，所以此处i为4)\nconsole.log(d); // 5\n// if语句和for语句中用var定义的变量可以在外面访问到，\n// 可见，if语句和for语句属于块作用域，不属于函数作用域\n```\n\n三者的区别：\n\n1.  var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。\n2.  let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。\n3.  const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。\n\n```javascript\n// 块作用域\n{\n  var a = 1;\n  let b = 2;\n  const c = 3;\n  // c = 4; // 报错\n  var aa;\n  let bb;\n  // const cc; // 报错\n  console.log(a); // 1\n  console.log(b); // 2\n  console.log(c); // 3\n  console.log(aa); // undefined\n  console.log(bb); // undefined\n}\nconsole.log(a); // 1\n// console.log(b); // 报错\n// console.log(c); // 报错\n\n// 函数作用域\n(function A() {\n  var d = 5;\n  let e = 6;\n  const f = 7;\n  console.log(d); // 5\n  console.log(e); // 6  \n  console.log(f); // 7 \n})();\n// console.log(d); // 报错\n// console.log(e); // 报错\n// console.log(f); // 报错\n\n```\n\n注意：**const定义的对象属性是否可以改变**\n\n```javascript\nconst person = {\n  name : 'jiuke',\n  sex : '男'\n}\nperson.name = 'test'\nconsole.log(person.name)//person对象的name属性确实被修改了\n```\n\n因为对象是引用类型的，person中保存的仅是对象的指针，这就意味着，const仅保证指针不发生改变，修改对象的属性不会改变对象的指针，所以是被允许的。也就是说const定义的引用类型只要指针不发生改变，其他的不论如何改变都是允许的。\n\n然后我们试着修改一下指针，让person指向一个新对象，果然报错\n\n```javascript\nconst person = {\n   name : 'jiuke',\n   sex : '男'\n}\nperson = {\n   name : 'test',\n   sex : '男'\n}\n//报错\n```\n\n### 4. promise\n\npromise用途：异步编程的一种解决方案。\n\n优点：比传统的解决方案——回调函数和事件——更合理和更强大。\n\n三种状态：`pending`（进行中）、`fulfilled`（已成功）和`rejected`（已失败）。\n\n```javascript\n//基本用法：\nconst promise = new Promise(function(resolve, reject) {\n    resolve(value);//表示异步操作成功\n    reject(error);//表示异步操作失败\n});\n\n//promise常用的几个方法\n//1. 异步状态为成功时调用第一个函数，为失败时调用第二个函数。then方法的第二个参数可选。\npromise.then(value => {},error => {});\n\n//2. 异步状态为失败时调用。\npromise.catch(error => {});\n\n//3. promise异步状态为失败时或then方法中抛出错误都会执行catch方法。\npromise.then(value => {},error => {}).catch(error => {});\n\n//4. 不管状态如何都会执行的操作。\npromise.finally(() => {});\n```\n\n### 5. 生命周期\n\n<img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n### 6. 模版语法\n\n#### v-once\n\n执行一次性插值，当数据变化的时候，该内容不会更新；可能会影响该节点其他的数据绑定\n\n```html\n<span v-once>这个将不会改变: {{ msg }}</span>\n```\n\n#### v-html\n\n双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用v-html;\n\n```html\nvar rawHtml = \"<span>这是个使用v-htmls</span>\"\n\n<p>Using mustaches: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\n#### [Attribute](https://cn.vuejs.org/v2/guide/syntax.html#Attribute)\n\nMustache ({}) 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 [`v-bind` 指令](https://cn.vuejs.org/v2/api/#v-bind)：\n\n```html\n<div v-bind:id=\"dynamicId\"></div>\n\n\n//isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 <button> 元素中\n<button v-bind:disabled=\"isButtonDisabled\">Button</button>\n```\n\n#### 三元表达式\n\n```html\n{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div v-bind:id=\"'list-' + id\"></div>\n\n//这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。\n<!-- 这是语句，不是表达式 -->\n{{ var a = 1 }}\n\n<!-- 流控制也不会生效，请使用三元表达式 -->\n{{ if (ok) { return message } }}\n```\n\n### 7. 指令Directives\n\n指令 (Directives) 是带有 `v-` 前缀的特殊 attribute。指令 attribute 的值预期是**单个 JavaScript 表达式** (`v-for` 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。\n\n```html\n//v-if 指令将根据表达式 seen 的值的真假来插入/移除 <p> 元素。\n<p v-if=\"seen\">现在你看到我了</p>\n```\n\n#### 参数\n\n一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，`v-bind` 指令可以用于响应式地更新 HTML attribute\n\n```html\n//href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定\n<a v-bind:href=\"url\">...</a>\n\n<a v-on:click=\"doSomething\">...</a>\n```\n\n#### 动态参数\n\n 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数\n\n```html\n<a v-bind:[attributeName] = \"url\"></a>\n<!--\n\t这里的attributeName会被作为一个javascript表达式进行动态赋值，求得的值会作为最终的参数来使用\n如果VUE实例有一个data. property. attributeName， 其值为href， 那么绑定将等价于v-bind:href\n--->\n```\n\n绑定处理函数：\n\n```html\n<a v-on:[eventName]=\"dosomething\"></a>\n```\n\n-   对动态参数的值的约束\n\n    动态参数预期会求出一个字符串，异常情况下值为 `null`。这个特殊的 `null` 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。\n\n-   对动态参数表达式的约束\n\n    动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：\n\n#### 修饰符\n\n修饰符（modifier）是以半角句号`.` 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定；例如` .prevent`修饰符告诉v-on指令对触发的事件调用event.preventDefault();\n\n```html\n<form v-on:submit.prevent = \"onSubmit\">\n  \n</form>\n```\n\n#### 缩写\n\n```html\n<!-- 完整语法 -->\n<a v-bind:href=\"url\">...</a>\n\n<!-- 缩写 -->\n<a :href=\"url\">...</a>\n\n<!-- 动态参数的缩写 (2.6.0+) -->\n<a :[key]=\"url\"> ... </a>\n\n\n<!-- 完整语法 -->\n<a v-on:click=\"doSomething\">...</a>\n\n<!-- 缩写 -->\n<a @click=\"doSomething\">...</a>\n\n<!-- 动态参数的缩写 (2.6.0+) -->\n<a @[event]=\"doSomething\"> ... </a>\n```\n\n`:` 与 `@` 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。\n\n### 8. 计算属性\n\n```html\n<div id=\"example\">\n  {{ message.split('').reverse().join('') }}\n</div>\n```\n\n这里是想要显示变量 `message` 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。\n\n所以，对于任何复杂逻辑，你都应当使用**计算属性**\n\n例如：\n\n```html\n<div id=\"example\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n```\n\n```javascript\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    // 计算属性的 getter\n    reversedMessage: function () {\n      // `this` 指向 vm 实例\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n\n//页面显示：\n//Original message: \"Hello\"\n//Computed reversed message: \"olleH\"\n```\n\n声明了一个计算属性`reversedMessage`；我们提供的函数将用作property `vm.reversedMessage`的getter函数\n\n```javascript\nconsole.log(vm.reversedMessage) // olleH\nvm.message = 'Goodbye'\nconsole.log(vm.reversedMessage) // => 'eybdooG'\n```\n\n你可以打开浏览器的控制台，自行修改例子中的 vm。`vm.reversedMessage` 的值始终取决于 `vm.message` 的值。\n\n你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 `vm.reversedMessage` 依赖于 `vm.message`，因此当 `vm.message` 发生改变时，所有依赖 `vm.reversedMessage` 的绑定也会更新。以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的。\n\n#### 计算属性 VS 方法\n\n使用表达式中调用方法同样可以达到上面的结果\n\n```html\n<p>Reversed message: \"{{ reversedMessage() }}\"</p>\n```\n\n```javascript\n// 在组件中\nmethods: {\n  reversedMessage: function () {\n    return this.message.split('').reverse().join('')\n  }\n}\n```\n\n我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是**计算属性是基于它们的响应式依赖进行缓存的**。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 `message` 还没有发生改变，多次访问 `reversedMessage` 计算属性会立即返回之前的计算结果，而不必再次执行函数。\n\n这也同样意味着下面的计算属性将不再更新，因为 `Date.now()` 不是响应式依赖：\n\n```\ncomputed: {\n  now: function () {\n    return Date.now()\n  }\n}\n```\n\n相比之下，每当触发重新渲染时，调用方法将**总会**再次执行函数。\n\n我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 **A**，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 **A**。如果没有缓存，我们将不可避免的多次执行 **A** 的 getter！如果你不希望有缓存，请用方法来替代。\n\n#### 计算属性 VS 侦听属性\n\n侦听属性：vue提供了一种更通用的方式来观察和响应vue实例上的数据变动；当有一些数据需要随着其他数据变动而变动时；很容易滥用watch;**通常更好的做法是使用计算属性而不是命令式的watch回调**；\n\n```html\n<div id=\"demo\">{{ fullName }}</div>\n```\n\n```javascript\nvar vm = new Vue({\n  el: '#demo',\n  data: {\n    firstName: 'Foo',\n    lastName: 'Bar',\n    fullName: 'Foo Bar'\n  },\n  //侦听属性watch \n  watch: {\n    firstName: function (val) {\n      this.fullName = val + ' ' + this.lastName\n    },\n    lastName: function (val) {\n      this.fullName = this.firstName + ' ' + val\n    }\n  },\n  //计算属性\n  computed: {\n    fullName: function () {\n      return this.firstName + ' ' + this.lastName\n    }\n  }\n})\n\n```\n\n#### 计算属性的setter\n\n计算属性默认只有getter，自己可以提供一个setter\n\n```javascript\ncomputed: {\n  fullName: {\n    // getter\n    get: function () {\n      return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n      var names = newValue.split(' ')\n      this.firstName = names[0]\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n```\n\n现在再运行 `vm.fullName = 'John Doe'` 时，setter 会被调用，`vm.firstName` 和 `vm.lastName` 也会相应地被更新。\n\n### 9. 侦听器\n\n当需要在数据变化时执行异步或开销较大的操作时，watch是最有用的；同时也可以自定义侦听器；\n\n```html\n<div id=\"watch-example\">\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\">\n  </p>\n  <p>{{ answer }}</p>\n</div>\n```\n\n```javascript\n<!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 -->\n<!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 -->\n<script src=\"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js\"></script>\n<script>\nvar watchExampleVM = new Vue({\n  el: '#watch-example',\n  data: {\n    question: '',\n    answer: 'I cannot give you an answer until you ask a question!'\n  },\n  watch: {\n    // 如果 `question` 发生改变，这个函数就会运行\n    question: function (newQuestion, oldQuestion) {\n      this.answer = 'Waiting for you to stop typing...'\n      this.debouncedGetAnswer()\n    }\n  },\n  created: function () {\n    // `_.debounce` 是一个通过 Lodash 限制操作频率的函数。\n    // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率\n    // AJAX 请求直到用户输入完毕才会发出。想要了解更多关于\n    // `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，\n    // 请参考：https://lodash.com/docs#debounce\n    this.debouncedGetAnswer = _.debounce(this.getAnswer, 500)\n  },\n  methods: {\n    getAnswer: function () {\n      if (this.question.indexOf('?') === -1) {\n        this.answer = 'Questions usually contain a question mark. ;-)'\n        return\n      }\n      this.answer = 'Thinking...'\n      var vm = this\n      axios.get('https://yesno.wtf/api')\n        .then(function (response) {\n          vm.answer = _.capitalize(response.data.answer)\n        })\n        //异常捕获\n        .catch(function (error) {\n          vm.answer = 'Error! Could not reach the API. ' + error\n        })\n    }\n  }\n})\n</script>\n```\n\n使用 `watch` 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的\n\n### 10. class与style绑定\n\n将 `v-bind` 用于 `class` 和 `style` 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组\n\n#### 10.1 绑定html class\n\n##### 10.1.1对象语法\n\n方式一：内联\n\n```html\n<div\n  class=\"static\"\n  v-bind:class=\"{ active: isActive, 'text-danger': hasError }\"\n></div>\n//data\ndata: {\n  isActive: true,\n  hasError: false\n}\n```\n\n方式二：绑定的数据对象不必内联定义在模板里\n\n```html\n<div v-bind:class=\"classObject\"></div>\n//vue data\ndata: {\n  classObject: {\n    active: true,\n    'text-danger': false\n  }\n}\n```\n\n方式三：绑定一个返回对象的计算属性（常用）\n\n```html\n<div v-bind:class=\"classObject\"></div>\n\n//vue data\ndata: {\n  isActive: true,\n  error: null\n},\ncomputed: {\n  classObject: function () {\n    return {\n      active: this.isActive && !this.error,\n      'text-danger': this.error && this.error.type === 'fatal'\n    }\n  }\n}\n```\n\n##### 10.1.2 数组语法\n\n","slug":"vue","published":1,"updated":"2022-03-27T14:06:03.440Z","layout":"post","photos":[],"link":"","_id":"cl235zcxa005wwjpj4i7c775u","content":"<p>Object.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。</p>\n<h3 id=\"1-export\"><a class=\"markdownIt-Anchor\" href=\"#1-export\"></a> 1. export</h3>\n<hr>\n<p>用于规定模块的对外接口，export输出变量和方法、类</p>\n<ul>\n<li>\n<p>变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// profile.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> firstName = <span class=\"string\">&#x27;Michael&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> lastName = <span class=\"string\">&#x27;Jackson&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> year = <span class=\"number\">1958</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简写--优先使用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;firstName, lastName, year&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果想为输入的变量重新命名， 可以使用AS 关键字重新命名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; buildMenus <span class=\"keyword\">as</span> buildMenus&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/menu&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-export-default\"><a class=\"markdownIt-Anchor\" href=\"#2-export-default\"></a> 2. export default</h3>\n<p>为模块指定默认输出， 使用import命令的时候，用户需要知道所要加载的变量名和函数名，否则无法加载；了解模块有哪些方法和属性比较麻烦，使用export default命令，为模块指定默认输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码是一个模块文件export-default.js。默认输出1个函数；</p>\n<p>与export命令的区别：其他模块加载该模块是，import命令可以为该匿名函数指定任意名字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> customName <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./export-default&#x27;</span>;</span><br><span class=\"line\">customName(); <span class=\"comment\">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>上面代码的<code>import</code>命令，可以用任意名称指向<code>export-default.js</code>输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时<code>import</code>命令后面，不使用大括号。</p>\n<p>本质上，<code>export default</code>就是输出一个叫做<code>default</code>的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// modules.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;add <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"comment\">// export default add;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> foo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;modules&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"comment\">// import foo from &#x27;modules&#x27;;</span></span><br></pre></td></tr></table></figure>\n<p>正是因为<code>export default</code>命令其实只是输出一个叫做<code>default</code>的变量，所以它后面不能跟变量声明语句。</p>\n<p><strong>总结：</strong></p>\n<ul>\n<li>\n<p>export命令对外接口是有名称的且<code>import</code>命令从模块导入的变量名与被导入模块对外接口的名称相同，而export default命令对外输出的变量名可以是任意的，这时<code>import</code>命令后面，不使用大括号。</p>\n</li>\n<li>\n<p><code>export default</code>命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此<code>export default</code>命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应<code>export default</code>命令。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//menu.js</span></span><br><span class=\"line\"><span class=\"comment\">//get请求获取所有的菜单信息</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildMenus</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus/build&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;get&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//post 请求保存数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//delete 请求删除数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">del</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus/&#x27;</span> + id,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;delete&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//put请求修改数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">edit</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;put&#x27;</span>,</span><br><span class=\"line\">    data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//app.vue</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; buildMenus &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/menu&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-const-var-let\"><a class=\"markdownIt-Anchor\" href=\"#3-const-var-let\"></a> 3. Const、var、let</h3>\n<p>ES5 中作用域有：全局作用域、函数作用域。没有块作用域的概念。</p>\n<p>ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 通过var定义的变量可以跨块作用域访问到。</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// console.log(b); // 报错，</span></span><br><span class=\"line\"><span class=\"comment\">// 可见，通过var定义的变量不能跨函数作用域访问到</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i ++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 4   (循环结束i已经是4，所以此处i为4)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"comment\">// if语句和for语句中用var定义的变量可以在外面访问到，</span></span><br><span class=\"line\"><span class=\"comment\">// 可见，if语句和for语句属于块作用域，不属于函数作用域</span></span><br></pre></td></tr></table></figure>\n<p>三者的区别：</p>\n<ol>\n<li>var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。</li>\n<li>let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。</li>\n<li>const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 块作用域</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// c = 4; // 报错</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> aa;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> bb;</span><br><span class=\"line\">  <span class=\"comment\">// const cc; // 报错</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(aa); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(bb); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(b); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(c); // 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数作用域</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> e = <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f = <span class=\"number\">7</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 5</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// 6  </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f); <span class=\"comment\">// 7 </span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// console.log(d); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(e); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(f); // 报错</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意：<strong>const定义的对象属性是否可以改变</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span> : <span class=\"string\">&#x27;jiuke&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.name = <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name)<span class=\"comment\">//person对象的name属性确实被修改了</span></span><br></pre></td></tr></table></figure>\n<p>因为对象是引用类型的，person中保存的仅是对象的指针，这就意味着，const仅保证指针不发生改变，修改对象的属性不会改变对象的指针，所以是被允许的。也就是说const定义的引用类型只要指针不发生改变，其他的不论如何改变都是允许的。</p>\n<p>然后我们试着修改一下指针，让person指向一个新对象，果然报错</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">&#x27;jiuke&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">&#x27;test&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-promise\"><a class=\"markdownIt-Anchor\" href=\"#4-promise\"></a> 4. promise</h3>\n<p>promise用途：异步编程的一种解决方案。</p>\n<p>优点：比传统的解决方案——回调函数和事件——更合理和更强大。</p>\n<p>三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基本用法：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    resolve(value);<span class=\"comment\">//表示异步操作成功</span></span><br><span class=\"line\">    reject(error);<span class=\"comment\">//表示异步操作失败</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//promise常用的几个方法</span></span><br><span class=\"line\"><span class=\"comment\">//1. 异步状态为成功时调用第一个函数，为失败时调用第二个函数。then方法的第二个参数可选。</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;&#125;,<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 异步状态为失败时调用。</span></span><br><span class=\"line\">promise.catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. promise异步状态为失败时或then方法中抛出错误都会执行catch方法。</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;&#125;,<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4. 不管状态如何都会执行的操作。</span></span><br><span class=\"line\">promise.finally(<span class=\"function\">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-生命周期\"><a class=\"markdownIt-Anchor\" href=\"#5-生命周期\"></a> 5. 生命周期</h3>\n<img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"img\" style=\"zoom:50%;\">\n<h3 id=\"6-模版语法\"><a class=\"markdownIt-Anchor\" href=\"#6-模版语法\"></a> 6. 模版语法</h3>\n<h4 id=\"v-once\"><a class=\"markdownIt-Anchor\" href=\"#v-once\"></a> v-once</h4>\n<p>执行一次性插值，当数据变化的时候，该内容不会更新；可能会影响该节点其他的数据绑定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>这个将不会改变: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"v-html\"><a class=\"markdownIt-Anchor\" href=\"#v-html\"></a> v-html</h4>\n<p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用v-html;</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var rawHtml = &quot;<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是个使用v-htmls<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using v-html directive: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">&quot;rawHtml&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"attribute\"><a class=\"markdownIt-Anchor\" href=\"#attribute\"></a> <a href=\"https://cn.vuejs.org/v2/guide/syntax.html#Attribute\">Attribute</a></h4>\n<p>Mustache ({}) 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 <a href=\"https://cn.vuejs.org/v2/api/#v-bind\"><code>v-bind</code> 指令</a>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;dynamicId&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> 元素中</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:disabled</span>=<span class=\"string\">&quot;isButtonDisabled&quot;</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"三元表达式\"><a class=\"markdownIt-Anchor\" href=\"#三元表达式\"></a> 三元表达式</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; number + 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-指令directives\"><a class=\"markdownIt-Anchor\" href=\"#7-指令directives\"></a> 7. 指令Directives</h3>\n<p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊 attribute。指令 attribute 的值预期是<strong>单个 JavaScript 表达式</strong> (<code>v-for</code> 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//v-if 指令将根据表达式 seen 的值的真假来插入/移除 <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 元素。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"参数\"><a class=\"markdownIt-Anchor\" href=\"#参数\"></a> 参数</h4>\n<p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，<code>v-bind</code> 指令可以用于响应式地更新 HTML attribute</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"动态参数\"><a class=\"markdownIt-Anchor\" href=\"#动态参数\"></a> 动态参数</h4>\n<p>2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:</span>[<span class=\"attr\">attributeName</span>] = <span class=\"string\">&quot;url&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t这里的attributeName会被作为一个javascript表达式进行动态赋值，求得的值会作为最终的参数来使用</span></span><br><span class=\"line\"><span class=\"comment\">如果VUE实例有一个data. property. attributeName， 其值为href， 那么绑定将等价于v-bind:href</span></span><br><span class=\"line\"><span class=\"comment\">---&gt;</span></span><br></pre></td></tr></table></figure>\n<p>绑定处理函数：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:</span>[<span class=\"attr\">eventName</span>]=<span class=\"string\">&quot;dosomething&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>对动态参数的值的约束</p>\n<p>动态参数预期会求出一个字符串，异常情况下值为 <code>null</code>。这个特殊的 <code>null</code> 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p>\n</li>\n<li>\n<p>对动态参数表达式的约束</p>\n<p>动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：</p>\n</li>\n</ul>\n<h4 id=\"修饰符\"><a class=\"markdownIt-Anchor\" href=\"#修饰符\"></a> 修饰符</h4>\n<p>修饰符（modifier）是以半角句号<code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定；例如<code>.prevent</code>修饰符告诉v-on指令对触发的事件调用event.preventDefault();</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span> = <span class=\"string\">&quot;onSubmit&quot;</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"缩写\"><a class=\"markdownIt-Anchor\" href=\"#缩写\"></a> 缩写</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:</span>[<span class=\"attr\">key</span>]=<span class=\"string\">&quot;url&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @[<span class=\"attr\">event</span>]=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>:</code> 与 <code>@</code> 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。</p>\n<h3 id=\"8-计算属性\"><a class=\"markdownIt-Anchor\" href=\"#8-计算属性\"></a> 8. 计算属性</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里是想要显示变量 <code>message</code> 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。</p>\n<p>所以，对于任何复杂逻辑，你都应当使用<strong>计算属性</strong></p>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Original message: &quot;&#123;&#123; message &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#example&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Hello&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 计算属性的 getter</span></span><br><span class=\"line\">    <span class=\"attr\">reversedMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// `this` 指向 vm 实例</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//页面显示：</span></span><br><span class=\"line\"><span class=\"comment\">//Original message: &quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//Computed reversed message: &quot;olleH&quot;</span></span><br></pre></td></tr></table></figure>\n<p>声明了一个计算属性<code>reversedMessage</code>；我们提供的函数将用作property <code>vm.reversedMessage</code>的getter函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// olleH</span></span><br><span class=\"line\">vm.message = <span class=\"string\">&#x27;Goodbye&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// =&gt; &#x27;eybdooG&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>你可以打开浏览器的控制台，自行修改例子中的 vm。<code>vm.reversedMessage</code> 的值始终取决于 <code>vm.message</code> 的值。</p>\n<p>你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 <code>vm.reversedMessage</code> 依赖于 <code>vm.message</code>，因此当 <code>vm.message</code> 发生改变时，所有依赖 <code>vm.reversedMessage</code> 的绑定也会更新。以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的。</p>\n<h4 id=\"计算属性-vs-方法\"><a class=\"markdownIt-Anchor\" href=\"#计算属性-vs-方法\"></a> 计算属性 VS 方法</h4>\n<p>使用表达式中调用方法同样可以达到上面的结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Reversed message: &quot;&#123;&#123; reversedMessage() &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在组件中</span></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">reversedMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>\n<p>这也同样意味着下面的计算属性将不再更新，因为 <code>Date.now()</code> 不是响应式依赖：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  now: function () &#123;</span><br><span class=\"line\">    return Date.now()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比之下，每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数。</p>\n<p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <strong>A</strong>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong>。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 getter！如果你不希望有缓存，请用方法来替代。</p>\n<h4 id=\"计算属性-vs-侦听属性\"><a class=\"markdownIt-Anchor\" href=\"#计算属性-vs-侦听属性\"></a> 计算属性 VS 侦听属性</h4>\n<p>侦听属性：vue提供了一种更通用的方式来观察和响应vue实例上的数据变动；当有一些数据需要随着其他数据变动而变动时；很容易滥用watch;<strong>通常更好的做法是使用计算属性而不是命令式的watch回调</strong>；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#demo&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Bar&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"string\">&#x27;Foo Bar&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//侦听属性watch </span></span><br><span class=\"line\">  <span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.fullName = val + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.fullName = <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//计算属性</span></span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"计算属性的setter\"><a class=\"markdownIt-Anchor\" href=\"#计算属性的setter\"></a> 计算属性的setter</h4>\n<p>计算属性默认只有getter，自己可以提供一个setter</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  <span class=\"attr\">fullName</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// getter</span></span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// setter</span></span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在再运行 <code>vm.fullName = 'John Doe'</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。</p>\n<h3 id=\"9-侦听器\"><a class=\"markdownIt-Anchor\" href=\"#9-侦听器\"></a> 9. 侦听器</h3>\n<p>当需要在数据变化时执行异步或开销较大的操作时，watch是最有用的；同时也可以自定义侦听器；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;watch-example&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    Ask a yes/no question:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;question&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span><br><span class=\"line\">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">var</span> watchExampleVM = <span class=\"keyword\">new</span> Vue(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#watch-example&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">data</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">question</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">answer</span>: <span class=\"string\">&#x27;I cannot give you an answer until you ask a question!&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">watch</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 如果 `question` 发生改变，这个函数就会运行</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">question</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newQuestion, oldQuestion</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Waiting for you to stop typing...&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.debouncedGetAnswer()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 请参考：https://lodash.com/docs#debounce</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">this</span>.debouncedGetAnswer = _.debounce(<span class=\"built_in\">this</span>.getAnswer, <span class=\"number\">500</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">getAnswer</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.question.indexOf(<span class=\"string\">&#x27;?&#x27;</span>) === -<span class=\"number\">1</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Questions usually contain a question mark. ;-)&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">return</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Thinking...&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">var</span> vm = <span class=\"built_in\">this</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      axios.get(<span class=\"string\">&#x27;https://yesno.wtf/api&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          vm.answer = _.capitalize(response.data.answer)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"comment\">//异常捕获</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          vm.answer = <span class=\"string\">&#x27;Error! Could not reach the API. &#x27;</span> + error</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>使用 <code>watch</code> 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的</p>\n<h3 id=\"10-class与style绑定\"><a class=\"markdownIt-Anchor\" href=\"#10-class与style绑定\"></a> 10. class与style绑定</h3>\n<p>将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组</p>\n<h4 id=\"101-绑定html-class\"><a class=\"markdownIt-Anchor\" href=\"#101-绑定html-class\"></a> 10.1 绑定html class</h4>\n<h5 id=\"1011对象语法\"><a class=\"markdownIt-Anchor\" href=\"#1011对象语法\"></a> 10.1.1对象语法</h5>\n<p>方式一：内联</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">&quot;static&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">//data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  hasError: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方式二：绑定的数据对象不必内联定义在模板里</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">//vue data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  classObject: &#123;</span><br><span class=\"line\">    active: true,</span><br><span class=\"line\">    &#x27;text-danger&#x27;: false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方式三：绑定一个返回对象的计算属性（常用）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//vue data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  error: null</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  classObject: function () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      active: this.isActive &amp;&amp; !this.error,</span><br><span class=\"line\">      &#x27;text-danger&#x27;: this.error &amp;&amp; this.error.type === &#x27;fatal&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"1012-数组语法\"><a class=\"markdownIt-Anchor\" href=\"#1012-数组语法\"></a> 10.1.2 数组语法</h5>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>Object.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。</p>\n<h3 id=\"1-export\"><a class=\"markdownIt-Anchor\" href=\"#1-export\"></a> 1. export</h3>\n<hr>\n<p>用于规定模块的对外接口，export输出变量和方法、类</p>\n<ul>\n<li>\n<p>变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// profile.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> firstName = <span class=\"string\">&#x27;Michael&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> lastName = <span class=\"string\">&#x27;Jackson&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> year = <span class=\"number\">1958</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简写--优先使用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;firstName, lastName, year&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果想为输入的变量重新命名， 可以使用AS 关键字重新命名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; buildMenus <span class=\"keyword\">as</span> buildMenus&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/menu&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-export-default\"><a class=\"markdownIt-Anchor\" href=\"#2-export-default\"></a> 2. export default</h3>\n<p>为模块指定默认输出， 使用import命令的时候，用户需要知道所要加载的变量名和函数名，否则无法加载；了解模块有哪些方法和属性比较麻烦，使用export default命令，为模块指定默认输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码是一个模块文件export-default.js。默认输出1个函数；</p>\n<p>与export命令的区别：其他模块加载该模块是，import命令可以为该匿名函数指定任意名字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> customName <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./export-default&#x27;</span>;</span><br><span class=\"line\">customName(); <span class=\"comment\">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>上面代码的<code>import</code>命令，可以用任意名称指向<code>export-default.js</code>输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时<code>import</code>命令后面，不使用大括号。</p>\n<p>本质上，<code>export default</code>就是输出一个叫做<code>default</code>的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// modules.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;add <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"comment\">// export default add;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> foo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;modules&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"comment\">// import foo from &#x27;modules&#x27;;</span></span><br></pre></td></tr></table></figure>\n<p>正是因为<code>export default</code>命令其实只是输出一个叫做<code>default</code>的变量，所以它后面不能跟变量声明语句。</p>\n<p><strong>总结：</strong></p>\n<ul>\n<li>\n<p>export命令对外接口是有名称的且<code>import</code>命令从模块导入的变量名与被导入模块对外接口的名称相同，而export default命令对外输出的变量名可以是任意的，这时<code>import</code>命令后面，不使用大括号。</p>\n</li>\n<li>\n<p><code>export default</code>命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此<code>export default</code>命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应<code>export default</code>命令。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//menu.js</span></span><br><span class=\"line\"><span class=\"comment\">//get请求获取所有的菜单信息</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildMenus</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus/build&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;get&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//post 请求保存数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//delete 请求删除数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">del</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus/&#x27;</span> + id,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;delete&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//put请求修改数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">edit</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;put&#x27;</span>,</span><br><span class=\"line\">    data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//app.vue</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; buildMenus &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/menu&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-const-var-let\"><a class=\"markdownIt-Anchor\" href=\"#3-const-var-let\"></a> 3. Const、var、let</h3>\n<p>ES5 中作用域有：全局作用域、函数作用域。没有块作用域的概念。</p>\n<p>ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 通过var定义的变量可以跨块作用域访问到。</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// console.log(b); // 报错，</span></span><br><span class=\"line\"><span class=\"comment\">// 可见，通过var定义的变量不能跨函数作用域访问到</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i ++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 4   (循环结束i已经是4，所以此处i为4)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"comment\">// if语句和for语句中用var定义的变量可以在外面访问到，</span></span><br><span class=\"line\"><span class=\"comment\">// 可见，if语句和for语句属于块作用域，不属于函数作用域</span></span><br></pre></td></tr></table></figure>\n<p>三者的区别：</p>\n<ol>\n<li>var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。</li>\n<li>let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。</li>\n<li>const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 块作用域</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// c = 4; // 报错</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> aa;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> bb;</span><br><span class=\"line\">  <span class=\"comment\">// const cc; // 报错</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(aa); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(bb); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(b); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(c); // 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数作用域</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> e = <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f = <span class=\"number\">7</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 5</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// 6  </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f); <span class=\"comment\">// 7 </span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// console.log(d); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(e); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(f); // 报错</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意：<strong>const定义的对象属性是否可以改变</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span> : <span class=\"string\">&#x27;jiuke&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.name = <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name)<span class=\"comment\">//person对象的name属性确实被修改了</span></span><br></pre></td></tr></table></figure>\n<p>因为对象是引用类型的，person中保存的仅是对象的指针，这就意味着，const仅保证指针不发生改变，修改对象的属性不会改变对象的指针，所以是被允许的。也就是说const定义的引用类型只要指针不发生改变，其他的不论如何改变都是允许的。</p>\n<p>然后我们试着修改一下指针，让person指向一个新对象，果然报错</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">&#x27;jiuke&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">&#x27;test&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-promise\"><a class=\"markdownIt-Anchor\" href=\"#4-promise\"></a> 4. promise</h3>\n<p>promise用途：异步编程的一种解决方案。</p>\n<p>优点：比传统的解决方案——回调函数和事件——更合理和更强大。</p>\n<p>三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基本用法：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    resolve(value);<span class=\"comment\">//表示异步操作成功</span></span><br><span class=\"line\">    reject(error);<span class=\"comment\">//表示异步操作失败</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//promise常用的几个方法</span></span><br><span class=\"line\"><span class=\"comment\">//1. 异步状态为成功时调用第一个函数，为失败时调用第二个函数。then方法的第二个参数可选。</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;&#125;,<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 异步状态为失败时调用。</span></span><br><span class=\"line\">promise.catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. promise异步状态为失败时或then方法中抛出错误都会执行catch方法。</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;&#125;,<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4. 不管状态如何都会执行的操作。</span></span><br><span class=\"line\">promise.finally(<span class=\"function\">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-生命周期\"><a class=\"markdownIt-Anchor\" href=\"#5-生命周期\"></a> 5. 生命周期</h3>\n<img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"img\" style=\"zoom:50%;\">\n<h3 id=\"6-模版语法\"><a class=\"markdownIt-Anchor\" href=\"#6-模版语法\"></a> 6. 模版语法</h3>\n<h4 id=\"v-once\"><a class=\"markdownIt-Anchor\" href=\"#v-once\"></a> v-once</h4>\n<p>执行一次性插值，当数据变化的时候，该内容不会更新；可能会影响该节点其他的数据绑定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>这个将不会改变: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"v-html\"><a class=\"markdownIt-Anchor\" href=\"#v-html\"></a> v-html</h4>\n<p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用v-html;</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var rawHtml = &quot;<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是个使用v-htmls<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using v-html directive: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">&quot;rawHtml&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"attribute\"><a class=\"markdownIt-Anchor\" href=\"#attribute\"></a> <a href=\"https://cn.vuejs.org/v2/guide/syntax.html#Attribute\">Attribute</a></h4>\n<p>Mustache ({}) 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 <a href=\"https://cn.vuejs.org/v2/api/#v-bind\"><code>v-bind</code> 指令</a>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;dynamicId&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> 元素中</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:disabled</span>=<span class=\"string\">&quot;isButtonDisabled&quot;</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"三元表达式\"><a class=\"markdownIt-Anchor\" href=\"#三元表达式\"></a> 三元表达式</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; number + 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-指令directives\"><a class=\"markdownIt-Anchor\" href=\"#7-指令directives\"></a> 7. 指令Directives</h3>\n<p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊 attribute。指令 attribute 的值预期是<strong>单个 JavaScript 表达式</strong> (<code>v-for</code> 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//v-if 指令将根据表达式 seen 的值的真假来插入/移除 <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 元素。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"参数\"><a class=\"markdownIt-Anchor\" href=\"#参数\"></a> 参数</h4>\n<p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，<code>v-bind</code> 指令可以用于响应式地更新 HTML attribute</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"动态参数\"><a class=\"markdownIt-Anchor\" href=\"#动态参数\"></a> 动态参数</h4>\n<p>2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:</span>[<span class=\"attr\">attributeName</span>] = <span class=\"string\">&quot;url&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t这里的attributeName会被作为一个javascript表达式进行动态赋值，求得的值会作为最终的参数来使用</span></span><br><span class=\"line\"><span class=\"comment\">如果VUE实例有一个data. property. attributeName， 其值为href， 那么绑定将等价于v-bind:href</span></span><br><span class=\"line\"><span class=\"comment\">---&gt;</span></span><br></pre></td></tr></table></figure>\n<p>绑定处理函数：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:</span>[<span class=\"attr\">eventName</span>]=<span class=\"string\">&quot;dosomething&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>对动态参数的值的约束</p>\n<p>动态参数预期会求出一个字符串，异常情况下值为 <code>null</code>。这个特殊的 <code>null</code> 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p>\n</li>\n<li>\n<p>对动态参数表达式的约束</p>\n<p>动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：</p>\n</li>\n</ul>\n<h4 id=\"修饰符\"><a class=\"markdownIt-Anchor\" href=\"#修饰符\"></a> 修饰符</h4>\n<p>修饰符（modifier）是以半角句号<code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定；例如<code>.prevent</code>修饰符告诉v-on指令对触发的事件调用event.preventDefault();</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span> = <span class=\"string\">&quot;onSubmit&quot;</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"缩写\"><a class=\"markdownIt-Anchor\" href=\"#缩写\"></a> 缩写</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:</span>[<span class=\"attr\">key</span>]=<span class=\"string\">&quot;url&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @[<span class=\"attr\">event</span>]=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>:</code> 与 <code>@</code> 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。</p>\n<h3 id=\"8-计算属性\"><a class=\"markdownIt-Anchor\" href=\"#8-计算属性\"></a> 8. 计算属性</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里是想要显示变量 <code>message</code> 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。</p>\n<p>所以，对于任何复杂逻辑，你都应当使用<strong>计算属性</strong></p>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Original message: &quot;&#123;&#123; message &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#example&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Hello&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 计算属性的 getter</span></span><br><span class=\"line\">    <span class=\"attr\">reversedMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// `this` 指向 vm 实例</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//页面显示：</span></span><br><span class=\"line\"><span class=\"comment\">//Original message: &quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//Computed reversed message: &quot;olleH&quot;</span></span><br></pre></td></tr></table></figure>\n<p>声明了一个计算属性<code>reversedMessage</code>；我们提供的函数将用作property <code>vm.reversedMessage</code>的getter函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// olleH</span></span><br><span class=\"line\">vm.message = <span class=\"string\">&#x27;Goodbye&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// =&gt; &#x27;eybdooG&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>你可以打开浏览器的控制台，自行修改例子中的 vm。<code>vm.reversedMessage</code> 的值始终取决于 <code>vm.message</code> 的值。</p>\n<p>你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 <code>vm.reversedMessage</code> 依赖于 <code>vm.message</code>，因此当 <code>vm.message</code> 发生改变时，所有依赖 <code>vm.reversedMessage</code> 的绑定也会更新。以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的。</p>\n<h4 id=\"计算属性-vs-方法\"><a class=\"markdownIt-Anchor\" href=\"#计算属性-vs-方法\"></a> 计算属性 VS 方法</h4>\n<p>使用表达式中调用方法同样可以达到上面的结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Reversed message: &quot;&#123;&#123; reversedMessage() &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在组件中</span></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">reversedMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>\n<p>这也同样意味着下面的计算属性将不再更新，因为 <code>Date.now()</code> 不是响应式依赖：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  now: function () &#123;</span><br><span class=\"line\">    return Date.now()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比之下，每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数。</p>\n<p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <strong>A</strong>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong>。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 getter！如果你不希望有缓存，请用方法来替代。</p>\n<h4 id=\"计算属性-vs-侦听属性\"><a class=\"markdownIt-Anchor\" href=\"#计算属性-vs-侦听属性\"></a> 计算属性 VS 侦听属性</h4>\n<p>侦听属性：vue提供了一种更通用的方式来观察和响应vue实例上的数据变动；当有一些数据需要随着其他数据变动而变动时；很容易滥用watch;<strong>通常更好的做法是使用计算属性而不是命令式的watch回调</strong>；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#demo&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Bar&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"string\">&#x27;Foo Bar&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//侦听属性watch </span></span><br><span class=\"line\">  <span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.fullName = val + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.fullName = <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//计算属性</span></span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"计算属性的setter\"><a class=\"markdownIt-Anchor\" href=\"#计算属性的setter\"></a> 计算属性的setter</h4>\n<p>计算属性默认只有getter，自己可以提供一个setter</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  <span class=\"attr\">fullName</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// getter</span></span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// setter</span></span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在再运行 <code>vm.fullName = 'John Doe'</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。</p>\n<h3 id=\"9-侦听器\"><a class=\"markdownIt-Anchor\" href=\"#9-侦听器\"></a> 9. 侦听器</h3>\n<p>当需要在数据变化时执行异步或开销较大的操作时，watch是最有用的；同时也可以自定义侦听器；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;watch-example&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    Ask a yes/no question:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;question&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span><br><span class=\"line\">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">var</span> watchExampleVM = <span class=\"keyword\">new</span> Vue(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#watch-example&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">data</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">question</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">answer</span>: <span class=\"string\">&#x27;I cannot give you an answer until you ask a question!&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">watch</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 如果 `question` 发生改变，这个函数就会运行</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">question</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newQuestion, oldQuestion</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Waiting for you to stop typing...&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.debouncedGetAnswer()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 请参考：https://lodash.com/docs#debounce</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">this</span>.debouncedGetAnswer = _.debounce(<span class=\"built_in\">this</span>.getAnswer, <span class=\"number\">500</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">getAnswer</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.question.indexOf(<span class=\"string\">&#x27;?&#x27;</span>) === -<span class=\"number\">1</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Questions usually contain a question mark. ;-)&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">return</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Thinking...&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">var</span> vm = <span class=\"built_in\">this</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      axios.get(<span class=\"string\">&#x27;https://yesno.wtf/api&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          vm.answer = _.capitalize(response.data.answer)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"comment\">//异常捕获</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          vm.answer = <span class=\"string\">&#x27;Error! Could not reach the API. &#x27;</span> + error</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>使用 <code>watch</code> 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的</p>\n<h3 id=\"10-class与style绑定\"><a class=\"markdownIt-Anchor\" href=\"#10-class与style绑定\"></a> 10. class与style绑定</h3>\n<p>将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组</p>\n<h4 id=\"101-绑定html-class\"><a class=\"markdownIt-Anchor\" href=\"#101-绑定html-class\"></a> 10.1 绑定html class</h4>\n<h5 id=\"1011对象语法\"><a class=\"markdownIt-Anchor\" href=\"#1011对象语法\"></a> 10.1.1对象语法</h5>\n<p>方式一：内联</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">&quot;static&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">//data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  hasError: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方式二：绑定的数据对象不必内联定义在模板里</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">//vue data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  classObject: &#123;</span><br><span class=\"line\">    active: true,</span><br><span class=\"line\">    &#x27;text-danger&#x27;: false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方式三：绑定一个返回对象的计算属性（常用）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//vue data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  error: null</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  classObject: function () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      active: this.isActive &amp;&amp; !this.error,</span><br><span class=\"line\">      &#x27;text-danger&#x27;: this.error &amp;&amp; this.error.type === &#x27;fatal&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"1012-数组语法\"><a class=\"markdownIt-Anchor\" href=\"#1012-数组语法\"></a> 10.1.2 数组语法</h5>\n"}],"PostAsset":[{"_id":"source/_posts/2022/03/message-oriented-middleware/1.png","slug":"1.png","post":"cl235zcvn0007wjpjafeu0dk8","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/message-oriented-middleware/2.png","slug":"2.png","post":"cl235zcvn0007wjpjafeu0dk8","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/message-oriented-middleware/3.png","slug":"3.png","post":"cl235zcvn0007wjpjafeu0dk8","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/message-oriented-middleware/4.png","slug":"4.png","post":"cl235zcvn0007wjpjafeu0dk8","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/message-oriented-middleware/5.png","slug":"5.png","post":"cl235zcvn0007wjpjafeu0dk8","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/message-oriented-middleware/6.png","slug":"6.png","post":"cl235zcvn0007wjpjafeu0dk8","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-search-file/1.png","slug":"1.png","post":"cl235zcvk0003wjpjec907ow5","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-search-file/2.png","slug":"2.png","post":"cl235zcvk0003wjpjec907ow5","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-search-file/3.png","slug":"3.png","post":"cl235zcvk0003wjpjec907ow5","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-search-file/4.png","slug":"4.png","post":"cl235zcvk0003wjpjec907ow5","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-search-file/5.png","slug":"5.png","post":"cl235zcvk0003wjpjec907ow5","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-search-file/6.png","slug":"6.png","post":"cl235zcvk0003wjpjec907ow5","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-search-file/7.png","slug":"7.png","post":"cl235zcvk0003wjpjec907ow5","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/1.png","slug":"1.png","post":"cl235zcvh0001wjpj5m1g8pdx","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/10.png","slug":"10.png","post":"cl235zcvh0001wjpj5m1g8pdx","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/11.png","slug":"11.png","post":"cl235zcvh0001wjpj5m1g8pdx","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/12.png","slug":"12.png","post":"cl235zcvh0001wjpj5m1g8pdx","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/13.png","slug":"13.png","post":"cl235zcvh0001wjpj5m1g8pdx","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/14.png","slug":"14.png","post":"cl235zcvh0001wjpj5m1g8pdx","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/15.png","slug":"15.png","post":"cl235zcvh0001wjpj5m1g8pdx","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/16.png","slug":"16.png","post":"cl235zcvh0001wjpj5m1g8pdx","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/2.png","slug":"2.png","post":"cl235zcvh0001wjpj5m1g8pdx","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/3.png","slug":"3.png","post":"cl235zcvh0001wjpj5m1g8pdx","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/3_1.png","slug":"3_1.png","post":"cl235zcvh0001wjpj5m1g8pdx","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/3_2.png","slug":"3_2.png","post":"cl235zcvh0001wjpj5m1g8pdx","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/4.png","slug":"4.png","post":"cl235zcvh0001wjpj5m1g8pdx","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/5.png","slug":"5.png","post":"cl235zcvh0001wjpj5m1g8pdx","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/6.png","slug":"6.png","post":"cl235zcvh0001wjpj5m1g8pdx","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/7.png","slug":"7.png","post":"cl235zcvh0001wjpj5m1g8pdx","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/8.png","slug":"8.png","post":"cl235zcvh0001wjpj5m1g8pdx","modified":0,"renderable":0},{"_id":"source/_posts/2022/03/linux-minio/9.png","slug":"9.png","post":"cl235zcvh0001wjpj5m1g8pdx","modified":0,"renderable":0},{"_id":"source/_posts/2021/08/mysql行列转置/01.png","slug":"01.png","post":"cl235zcvs000gwjpj3vhjhr0k","modified":0,"renderable":0},{"_id":"source/_posts/2021/08/mysql行列转置/02.png","slug":"02.png","post":"cl235zcvs000gwjpj3vhjhr0k","modified":0,"renderable":0},{"_id":"source/_posts/2021/06/jdk-install/1.png","slug":"1.png","post":"cl235zcvt000iwjpj21pjcju9","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/export-database-file/1.png","slug":"1.png","post":"cl235zcvx000swjpjb7moeqls","modified":0,"renderable":0},{"_id":"source/_posts/2021/06/mysql-install/3.png","slug":"3.png","post":"cl235zcvu000nwjpj1whqdp8i","modified":0,"renderable":0},{"_id":"source/_posts/2021/06/mysql-install/4.png","slug":"4.png","post":"cl235zcvu000nwjpj1whqdp8i","modified":0,"renderable":0},{"_id":"source/_posts/2021/06/mysql-install/5.png","slug":"5.png","post":"cl235zcvu000nwjpj1whqdp8i","modified":0,"renderable":0},{"_id":"source/_posts/2021/06/mysql-install/6.png","slug":"6.png","post":"cl235zcvu000nwjpj1whqdp8i","modified":0,"renderable":0},{"_id":"source/_posts/2021/06/mysql-install/7.png","slug":"7.png","post":"cl235zcvu000nwjpj1whqdp8i","modified":0,"renderable":0},{"_id":"source/_posts/2021/06/mysql-install/q1.png","slug":"q1.png","post":"cl235zcvu000nwjpj1whqdp8i","modified":0,"renderable":0},{"_id":"source/_posts/2021/06/mysql-install/q2.png","slug":"q2.png","post":"cl235zcvu000nwjpj1whqdp8i","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/algorithm/01.png","slug":"01.png","post":"cl235zcw1000zwjpjgy1s54sr","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/algorithm/02.png","slug":"02.png","post":"cl235zcw1000zwjpjgy1s54sr","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/algorithm/03.png","slug":"03.png","post":"cl235zcw1000zwjpjgy1s54sr","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/ConcurrentHashMap/01.png","slug":"01.png","post":"cl235zcw20012wjpjdipf14s3","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/ConcurrentHashMap/02.png","slug":"02.png","post":"cl235zcw20012wjpjdipf14s3","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/bug-sprigCloud/01.png","slug":"01.png","post":"cl235zcw40019wjpjbryghqc9","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/bug-sprigCloud/02.png","slug":"02.png","post":"cl235zcw40019wjpjbryghqc9","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/ElasticSearch/image-20200806170145844.png","slug":"image-20200806170145844.png","post":"cl235zcw30017wjpj3uvqa9md","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/ElasticSearch/image-20200807093208470.png","slug":"image-20200807093208470.png","post":"cl235zcw30017wjpj3uvqa9md","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/ElasticSearch/image-20200807093309761.png","slug":"image-20200807093309761.png","post":"cl235zcw30017wjpj3uvqa9md","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/ElasticSearch/image-20201211095101816.png","slug":"image-20201211095101816.png","post":"cl235zcw30017wjpj3uvqa9md","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/ElasticSearch/image-20201211095258901.png","slug":"image-20201211095258901.png","post":"cl235zcw30017wjpj3uvqa9md","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/classLoad/01.png","slug":"01.png","post":"cl235zcw6001gwjpj2o2176u5","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/classLoad/02.png","slug":"02.png","post":"cl235zcw6001gwjpj2o2176u5","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/classLoad/03.png","slug":"03.png","post":"cl235zcw6001gwjpj2o2176u5","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/interest/3_5_8.png","slug":"3_5_8.png","post":"cl235zcw8001nwjpjekwm7f8v","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/lock01/read_writer_Lock1.png","slug":"read_writer_Lock1.png","post":"cl235zcwb001xwjpj4grk4oka","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mvcc/01.png","slug":"01.png","post":"cl235zcwc0022wjpjchbc5sl1","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mvcc/02.png","slug":"02.png","post":"cl235zcwc0022wjpjchbc5sl1","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mvcc/03.png","slug":"03.png","post":"cl235zcwc0022wjpjchbc5sl1","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mvcc/04.png","slug":"04.png","post":"cl235zcwc0022wjpjchbc5sl1","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql/image-20200727224117281.png","slug":"image-20200727224117281.png","post":"cl235zcwe002dwjpje5785mfj","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql/image-20200727231112059.png","slug":"image-20200727231112059.png","post":"cl235zcwe002dwjpje5785mfj","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20200727224117281.png","slug":"image-20200727224117281.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20200727231112059.png","slug":"image-20200727231112059.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202210235089.png","slug":"image-20201202210235089.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202210357906.png","slug":"image-20201202210357906.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202210510525.png","slug":"image-20201202210510525.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202210817094.png","slug":"image-20201202210817094.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202211406282.png","slug":"image-20201202211406282.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202211752764.png","slug":"image-20201202211752764.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202212103393.png","slug":"image-20201202212103393.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202213520136.png","slug":"image-20201202213520136.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202213757692.png","slug":"image-20201202213757692.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202214418001.png","slug":"image-20201202214418001.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202214957559.png","slug":"image-20201202214957559.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202215350319.png","slug":"image-20201202215350319.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202215717524.png","slug":"image-20201202215717524.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202222250939.png","slug":"image-20201202222250939.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202222823984.png","slug":"image-20201202222823984.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202222914087.png","slug":"image-20201202222914087.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202223655445.png","slug":"image-20201202223655445.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202224136052.png","slug":"image-20201202224136052.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-transcation/image-20201202224412832.png","slug":"image-20201202224412832.png","post":"cl235zcwd002awjpjbgfa2szg","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/outOfMemoryError/01.png","slug":"01.png","post":"cl235zcwf002lwjpjeeck5l6o","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/outOfMemoryError/02.png","slug":"02.png","post":"cl235zcwf002lwjpjeeck5l6o","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/outOfMemoryError/03.png","slug":"03.png","post":"cl235zcwf002lwjpjeeck5l6o","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/outOfMemoryError/04.png","slug":"04.png","post":"cl235zcwf002lwjpjeeck5l6o","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/outOfMemoryError/05.png","slug":"05.png","post":"cl235zcwf002lwjpjeeck5l6o","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/outOfMemoryError/06.png","slug":"06.png","post":"cl235zcwf002lwjpjeeck5l6o","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-index/01.png","slug":"01.png","post":"cl235zcwc0025wjpjadr4hwng","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-index/02.png","slug":"02.png","post":"cl235zcwc0025wjpjadr4hwng","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mysql-index/03.png","slug":"03.png","post":"cl235zcwc0025wjpjadr4hwng","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/redis-usage-scenario/01.png","slug":"01.png","post":"cl235zcwh002qwjpjb56hf3t6","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/redis-usage-scenario/02.png","slug":"02.png","post":"cl235zcwh002qwjpjb56hf3t6","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/redis-usage-scenario/03.png","slug":"03.png","post":"cl235zcwh002qwjpjb56hf3t6","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/redis-usage-scenario/04.png","slug":"04.png","post":"cl235zcwh002qwjpjb56hf3t6","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/redis-usage-scenario/05.png","slug":"05.png","post":"cl235zcwh002qwjpjb56hf3t6","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/redis-usage-scenario/06.png","slug":"06.png","post":"cl235zcwh002qwjpjb56hf3t6","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/redis_install/image-20201201155441018.png","slug":"image-20201201155441018.png","post":"cl235zcwh002twjpj103def5u","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/thread-status/01.jpg","slug":"01.jpg","post":"cl235zcwl0037wjpj8q3nbyph","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/volatile/01.png","slug":"01.png","post":"cl235zcwm003ewjpj9rnj2132","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/valine/1.png","slug":"1.png","post":"cl235zcwl003awjpjf7a2b25g","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/valine/2.png","slug":"2.png","post":"cl235zcwl003awjpjf7a2b25g","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/valine/3.png","slug":"3.png","post":"cl235zcwl003awjpjf7a2b25g","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/valine/4.png","slug":"4.png","post":"cl235zcwl003awjpjf7a2b25g","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-01/1.png","slug":"1.png","post":"cl235zcwn003lwjpj2jss8npm","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-mysql/1.png","slug":"1.png","post":"cl235zcwp003swjpj1iph2vcj","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-mysql/2.png","slug":"2.png","post":"cl235zcwp003swjpj1iph2vcj","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-mysql/3.png","slug":"3.png","post":"cl235zcwp003swjpj1iph2vcj","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-mysql/4.png","slug":"4.png","post":"cl235zcwp003swjpj1iph2vcj","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-mysql/5.png","slug":"5.png","post":"cl235zcwp003swjpj1iph2vcj","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-mysql/6.png","slug":"6.png","post":"cl235zcwp003swjpj1iph2vcj","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-nginx/1.png","slug":"1.png","post":"cl235zcwo003owjpjdgck5rk4","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-nginx/2.png","slug":"2.png","post":"cl235zcwo003owjpjdgck5rk4","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-nginx/3.png","slug":"3.png","post":"cl235zcwo003owjpjdgck5rk4","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-nginx/4.png","slug":"4.png","post":"cl235zcwo003owjpjdgck5rk4","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-nginx/5.png","slug":"5.png","post":"cl235zcwo003owjpjdgck5rk4","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-nginx/6.png","slug":"6.png","post":"cl235zcwo003owjpjdgck5rk4","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-nginx/7.png","slug":"7.png","post":"cl235zcwo003owjpjdgck5rk4","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-nginx/8.png","slug":"8.png","post":"cl235zcwo003owjpjdgck5rk4","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/docker-nginx/9.png","slug":"9.png","post":"cl235zcwo003owjpjdgck5rk4","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/nginx-02/3.png","slug":"3.png","post":"cl235zcwp003wwjpj43wte43a","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/nginx-02/image-20201210100736952.png","slug":"image-20201210100736952.png","post":"cl235zcwp003wwjpj43wte43a","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/nginx-02/image-20201210103251475.png","slug":"image-20201210103251475.png","post":"cl235zcwp003wwjpj43wte43a","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/nginx-02/image-20210606160947369.png","slug":"image-20210606160947369.png","post":"cl235zcwp003wwjpj43wte43a","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/nginx-04/1.png","slug":"1.png","post":"cl235zcwr0043wjpj0rc546do","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/nginx-04/2.png","slug":"2.png","post":"cl235zcwr0043wjpj0rc546do","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/nginx-04/3.png","slug":"3.png","post":"cl235zcwr0043wjpj0rc546do","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/nginx-md/1.png","slug":"1.png","post":"cl235zcws0046wjpj5ph70fr9","modified":0,"renderable":0},{"_id":"source/_posts/2021/12/nginx-md/2.png","slug":"2.png","post":"cl235zcws0046wjpj5ph70fr9","modified":0,"renderable":0},{"_id":"source/_posts/2021/11/sql-model/1.png","slug":"1.png","post":"cl235zcwu004iwjpj7kak2l0g","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/1.png","slug":"1.png","post":"cl235zcx6005rwjpjhthj5c4o","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/2.png","slug":"2.png","post":"cl235zcx6005rwjpjhthj5c4o","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/3-1.png","slug":"3-1.png","post":"cl235zcx6005rwjpjhthj5c4o","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/3.png","slug":"3.png","post":"cl235zcx6005rwjpjhthj5c4o","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/4-1.png","slug":"4-1.png","post":"cl235zcx6005rwjpjhthj5c4o","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/4-2.png","slug":"4-2.png","post":"cl235zcx6005rwjpjhthj5c4o","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/4-3.png","slug":"4-3.png","post":"cl235zcx6005rwjpjhthj5c4o","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/4.png","slug":"4.png","post":"cl235zcx6005rwjpjhthj5c4o","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/5.png","slug":"5.png","post":"cl235zcx6005rwjpjhthj5c4o","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/6.png","slug":"6.png","post":"cl235zcx6005rwjpjhthj5c4o","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/7.png","slug":"7.png","post":"cl235zcx6005rwjpjhthj5c4o","modified":0,"renderable":0},{"_id":"source/_posts/2021/10/Installing-CentOS-system/8.png","slug":"8.png","post":"cl235zcx6005rwjpjhthj5c4o","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/swagger/1.png","slug":"1.png","post":"cl235zcx7005swjpjheyc9mr0","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/swagger/2.png","slug":"2.png","post":"cl235zcx7005swjpjheyc9mr0","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/swagger/3.png","slug":"3.png","post":"cl235zcx7005swjpjheyc9mr0","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/swagger/4.png","slug":"4.png","post":"cl235zcx7005swjpjheyc9mr0","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/swagger/5.png","slug":"5.png","post":"cl235zcx7005swjpjheyc9mr0","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/swagger/6.png","slug":"6.png","post":"cl235zcx7005swjpjheyc9mr0","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/swagger/7.png","slug":"7.png","post":"cl235zcx7005swjpjheyc9mr0","modified":0,"renderable":0},{"_id":"source/_posts/2022/04/swagger/8.png","slug":"8.png","post":"cl235zcx7005swjpjheyc9mr0","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104204430049.png","slug":"image-20201104204430049.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104204624925.png","slug":"image-20201104204624925.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104204933409.png","slug":"image-20201104204933409.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104205054233.png","slug":"image-20201104205054233.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104205319372.png","slug":"image-20201104205319372.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104205653611.png","slug":"image-20201104205653611.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104205756827.png","slug":"image-20201104205756827.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104210008624.png","slug":"image-20201104210008624.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104210117373.png","slug":"image-20201104210117373.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104210416994.png","slug":"image-20201104210416994.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104213343204.png","slug":"image-20201104213343204.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104215015366.png","slug":"image-20201104215015366.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104221336437.png","slug":"image-20201104221336437.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104221659540.png","slug":"image-20201104221659540.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104222632963.png","slug":"image-20201104222632963.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201104223246735.png","slug":"image-20201104223246735.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201107201442912.png","slug":"image-20201107201442912.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201107205855474.png","slug":"image-20201107205855474.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201107212552852.png","slug":"image-20201107212552852.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201107213638624.png","slug":"image-20201107213638624.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201107213859155.png","slug":"image-20201107213859155.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201107215437139.png","slug":"image-20201107215437139.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201107215605251.png","slug":"image-20201107215605251.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201107220049532.png","slug":"image-20201107220049532.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201127094703483.png","slug":"image-20201127094703483.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201127103212598.png","slug":"image-20201127103212598.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201127104159580.png","slug":"image-20201127104159580.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201128135953635.png","slug":"image-20201128135953635.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201129110838590.png","slug":"image-20201129110838590.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201215152125176.png","slug":"image-20201215152125176.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201219102742172.png","slug":"image-20201219102742172.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201219103201836.png","slug":"image-20201219103201836.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201220170713526.png","slug":"image-20201220170713526.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0},{"_id":"source/_posts/2021/07/mycat/image-20201220172406074.png","slug":"image-20201220172406074.png","post":"cl235zcx9005uwjpjef8patdw","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cl235zcvh0001wjpj5m1g8pdx","category_id":"cl235zcvl0004wjpj35az8t5t","_id":"cl235zcvu000kwjpj4gya9i09"},{"post_id":"cl235zcvk0003wjpjec907ow5","category_id":"cl235zcvl0004wjpj35az8t5t","_id":"cl235zcvx000pwjpj2syu13vb"},{"post_id":"cl235zcvt000iwjpj21pjcju9","category_id":"cl235zcvl0004wjpj35az8t5t","_id":"cl235zcvy000twjpjby72caw4"},{"post_id":"cl235zcvu000nwjpj1whqdp8i","category_id":"cl235zcvl0004wjpj35az8t5t","_id":"cl235zcvz000wwjpj7akrdbra"},{"post_id":"cl235zcvn0007wjpjafeu0dk8","category_id":"cl235zcvu000jwjpj3eca2le8","_id":"cl235zcw10010wjpjczlsffur"},{"post_id":"cl235zcvo0009wjpjdrqeabve","category_id":"cl235zcvx000qwjpjas745a8m","_id":"cl235zcw20013wjpjfl7s8l30"},{"post_id":"cl235zcw1000zwjpjgy1s54sr","category_id":"cl235zcvz000xwjpj5wd4a9zy","_id":"cl235zcw4001awjpj7884akwy"},{"post_id":"cl235zcvp000bwjpjf6xnec02","category_id":"cl235zcvz000xwjpj5wd4a9zy","_id":"cl235zcw6001ewjpjgqm63n6e"},{"post_id":"cl235zcw30017wjpj3uvqa9md","category_id":"cl235zcvl0004wjpj35az8t5t","_id":"cl235zcw7001hwjpjbqb85z4v"},{"post_id":"cl235zcvs000gwjpj3vhjhr0k","category_id":"cl235zcvx000qwjpjas745a8m","_id":"cl235zcw7001jwjpj89wzhwlt"},{"post_id":"cl235zcw5001dwjpj5ym445g3","category_id":"cl235zcvu000jwjpj3eca2le8","_id":"cl235zcw8001owjpj2w77gnrl"},{"post_id":"cl235zcw6001gwjpj2o2176u5","category_id":"cl235zcw5001bwjpjf9dvbqgv","_id":"cl235zcw9001qwjpj4oou73fd"},{"post_id":"cl235zcvv000owjpj0npogqwb","category_id":"cl235zcw5001bwjpjf9dvbqgv","_id":"cl235zcwa001vwjpj12if3f46"},{"post_id":"cl235zcw8001nwjpjekwm7f8v","category_id":"cl235zcvz000xwjpj5wd4a9zy","_id":"cl235zcwb001ywjpjfrmra0if"},{"post_id":"cl235zcvx000swjpjb7moeqls","category_id":"cl235zcw5001bwjpjf9dvbqgv","_id":"cl235zcwc0023wjpj1t9w7ps7"},{"post_id":"cl235zcw9001pwjpjgvrg9pzp","category_id":"cl235zcw5001bwjpjf9dvbqgv","_id":"cl235zcwd0026wjpje7lc8n5a"},{"post_id":"cl235zcvy000vwjpjb52j3l6h","category_id":"cl235zcw5001bwjpjf9dvbqgv","_id":"cl235zcwd002bwjpj3jsm2hxc"},{"post_id":"cl235zcwb001xwjpj4grk4oka","category_id":"cl235zcw5001bwjpjf9dvbqgv","_id":"cl235zcwe002ewjpj9i6rb5c7"},{"post_id":"cl235zcwc0022wjpjchbc5sl1","category_id":"cl235zcvx000qwjpjas745a8m","_id":"cl235zcwf002jwjpjattq68n1"},{"post_id":"cl235zcw20012wjpjdipf14s3","category_id":"cl235zcwb001zwjpj01u3gas6","_id":"cl235zcwg002mwjpjcnjnbw3j"},{"post_id":"cl235zcwc0025wjpjadr4hwng","category_id":"cl235zcvx000qwjpjas745a8m","_id":"cl235zcwh002rwjpjbfft3ptg"},{"post_id":"cl235zcwd002awjpjbgfa2szg","category_id":"cl235zcvx000qwjpjas745a8m","_id":"cl235zcwi002uwjpj12q2gagp"},{"post_id":"cl235zcw40019wjpjbryghqc9","category_id":"cl235zcwd0027wjpj39cj4xm8","_id":"cl235zcwi002xwjpjg1odf2xc"},{"post_id":"cl235zcwe002dwjpje5785mfj","category_id":"cl235zcvx000qwjpjas745a8m","_id":"cl235zcwj0031wjpj0vzb91t8"},{"post_id":"cl235zcwf002iwjpj2hgydf80","category_id":"cl235zcvx000qwjpjas745a8m","_id":"cl235zcwk0034wjpj0dr4g3lk"},{"post_id":"cl235zcw7001iwjpjeygzap6w","category_id":"cl235zcwd0027wjpj39cj4xm8","_id":"cl235zcwl0038wjpj5f3627yi"},{"post_id":"cl235zcwf002lwjpjeeck5l6o","category_id":"cl235zcw5001bwjpjf9dvbqgv","_id":"cl235zcwm003bwjpj3737dyrc"},{"post_id":"cl235zcwh002qwjpjb56hf3t6","category_id":"cl235zcvu000jwjpj3eca2le8","_id":"cl235zcwm003fwjpjg6ohdoj7"},{"post_id":"cl235zcwa001uwjpj02yj91si","category_id":"cl235zcwb001zwjpj01u3gas6","_id":"cl235zcwn003iwjpj2wre2zjn"},{"post_id":"cl235zcwh002twjpj103def5u","category_id":"cl235zcvl0004wjpj35az8t5t","_id":"cl235zcwo003mwjpj986p1xzx"},{"post_id":"cl235zcwi002wwjpjbf3ucac8","category_id":"cl235zcw5001bwjpjf9dvbqgv","_id":"cl235zcwo003pwjpj6aur9wzy"},{"post_id":"cl235zcwj0030wjpjfghy39pb","category_id":"cl235zcvx000qwjpjas745a8m","_id":"cl235zcwp003twjpjdpu48cwa"},{"post_id":"cl235zcwk0033wjpj4hbg7z6r","category_id":"cl235zcw5001bwjpjf9dvbqgv","_id":"cl235zcwq003xwjpjgdq5g63e"},{"post_id":"cl235zcwl0037wjpj8q3nbyph","category_id":"cl235zcw5001bwjpjf9dvbqgv","_id":"cl235zcwq0041wjpj6op26jbp"},{"post_id":"cl235zcwl003awjpjf7a2b25g","category_id":"cl235zcwd0027wjpj39cj4xm8","_id":"cl235zcwr0044wjpj2koee5vx"},{"post_id":"cl235zcwm003ewjpj9rnj2132","category_id":"cl235zcw5001bwjpjf9dvbqgv","_id":"cl235zcws0048wjpjde1de3hi"},{"post_id":"cl235zcwn003hwjpjb8f7hry6","category_id":"cl235zcw5001bwjpjf9dvbqgv","_id":"cl235zcwt004bwjpjd5hx1k4r"},{"post_id":"cl235zcwp003wwjpj43wte43a","category_id":"cl235zcvl0004wjpj35az8t5t","_id":"cl235zcwu004fwjpjf75qdajs"},{"post_id":"cl235zcwn003lwjpj2jss8npm","category_id":"cl235zcwp003qwjpjar1k19bf","_id":"cl235zcwu004jwjpj06xe4j6k"},{"post_id":"cl235zcwo003owjpjdgck5rk4","category_id":"cl235zcwp003qwjpjar1k19bf","_id":"cl235zcww004mwjpj3tr6622t"},{"post_id":"cl235zcws004awjpj8ayg4sps","category_id":"cl235zcvz000xwjpj5wd4a9zy","_id":"cl235zcwx004rwjpj2k8820w6"},{"post_id":"cl235zcwp003swjpj1iph2vcj","category_id":"cl235zcwp003qwjpjar1k19bf","_id":"cl235zcwy004twjpjdgeye3fv"},{"post_id":"cl235zcwt004dwjpjg3p1glx2","category_id":"cl235zcvx000qwjpjas745a8m","_id":"cl235zcwy004wwjpjhbqq0zo2"},{"post_id":"cl235zcwu004iwjpj7kak2l0g","category_id":"cl235zcvx000qwjpjas745a8m","_id":"cl235zcwz004ywjpj5zja2zvy"},{"post_id":"cl235zcwq003zwjpjf1c9gc4s","category_id":"cl235zcwu004ewjpjhg8r9vbs","_id":"cl235zcwz004zwjpj3dlb21lw"},{"post_id":"cl235zcww004lwjpj4pr47nh3","category_id":"cl235zcw5001bwjpjf9dvbqgv","_id":"cl235zcwz0052wjpj2lno1xzk"},{"post_id":"cl235zcwx004qwjpj1ellcgtn","category_id":"cl235zcvl0004wjpj35az8t5t","_id":"cl235zcwz0053wjpjauh17648"},{"post_id":"cl235zcwr0043wjpj0rc546do","category_id":"cl235zcwu004ewjpjhg8r9vbs","_id":"cl235zcx00055wjpj0sxpe0rw"},{"post_id":"cl235zcws0046wjpj5ph70fr9","category_id":"cl235zcwu004ewjpjhg8r9vbs","_id":"cl235zcx00057wjpj23pm4eqj"},{"post_id":"cl235zcx6005rwjpjhthj5c4o","category_id":"cl235zcvl0004wjpj35az8t5t","_id":"cl235zcxa005xwjpj2kz19600"},{"post_id":"cl235zcx9005uwjpjef8patdw","category_id":"cl235zcvu000jwjpj3eca2le8","_id":"cl235zcxb0060wjpjb514ewxk"},{"post_id":"cl235zcx7005swjpjheyc9mr0","category_id":"cl235zcxa005vwjpje80fcjr5","_id":"cl235zcxb0063wjpja4ivehbp"},{"post_id":"cl235zcxa005wwjpj4i7c775u","category_id":"cl235zcxb0061wjpjhqwih827","_id":"cl235zcxb0066wjpj59ctdqzs"}],"PostTag":[{"post_id":"cl235zcvh0001wjpj5m1g8pdx","tag_id":"cl235zcvm0005wjpjcoh68xvt","_id":"cl235zcvr000ewjpjfwfe06zc"},{"post_id":"cl235zcvk0003wjpjec907ow5","tag_id":"cl235zcvm0005wjpjcoh68xvt","_id":"cl235zcvu000mwjpjf2b00ig3"},{"post_id":"cl235zcvn0007wjpjafeu0dk8","tag_id":"cl235zcvu000lwjpjcy9o96cd","_id":"cl235zcvy000uwjpjg26a21wy"},{"post_id":"cl235zcvo0009wjpjdrqeabve","tag_id":"cl235zcvx000rwjpj7rwsdc6a","_id":"cl235zcw10011wjpj8xdo7351"},{"post_id":"cl235zcw1000zwjpjgy1s54sr","tag_id":"cl235zcvz000ywjpjc51oebr3","_id":"cl235zcw20014wjpj9jxuakr5"},{"post_id":"cl235zcvp000bwjpjf6xnec02","tag_id":"cl235zcvz000ywjpjc51oebr3","_id":"cl235zcw40018wjpjhetf2pas"},{"post_id":"cl235zcvs000gwjpj3vhjhr0k","tag_id":"cl235zcvx000rwjpj7rwsdc6a","_id":"cl235zcw6001fwjpj1vxr51dt"},{"post_id":"cl235zcvt000iwjpj21pjcju9","tag_id":"cl235zcw5001cwjpjdven1gs4","_id":"cl235zcw8001mwjpja07y3c3v"},{"post_id":"cl235zcw8001nwjpjekwm7f8v","tag_id":"cl235zcvz000ywjpjc51oebr3","_id":"cl235zcwa001twjpj9bhmajoe"},{"post_id":"cl235zcvu000nwjpj1whqdp8i","tag_id":"cl235zcvx000rwjpj7rwsdc6a","_id":"cl235zcwb001wwjpj8mx87tth"},{"post_id":"cl235zcwa001uwjpj02yj91si","tag_id":"cl235zcw9001swjpj46ij6vbp","_id":"cl235zcwb0021wjpj3n2p19ho"},{"post_id":"cl235zcvv000owjpj0npogqwb","tag_id":"cl235zcw9001swjpj46ij6vbp","_id":"cl235zcwc0024wjpja0473ukz"},{"post_id":"cl235zcwc0022wjpjchbc5sl1","tag_id":"cl235zcvx000rwjpj7rwsdc6a","_id":"cl235zcwd0029wjpj8uv3cpf7"},{"post_id":"cl235zcvx000swjpjb7moeqls","tag_id":"cl235zcw9001swjpj46ij6vbp","_id":"cl235zcwe002cwjpjcihnetst"},{"post_id":"cl235zcwc0025wjpjadr4hwng","tag_id":"cl235zcvx000rwjpj7rwsdc6a","_id":"cl235zcwf002hwjpjetjtfg9b"},{"post_id":"cl235zcwd002awjpjbgfa2szg","tag_id":"cl235zcvx000rwjpj7rwsdc6a","_id":"cl235zcwf002kwjpj8clee2z7"},{"post_id":"cl235zcvy000vwjpjb52j3l6h","tag_id":"cl235zcwd0028wjpj3rz7hexq","_id":"cl235zcwg002owjpj8vyp96th"},{"post_id":"cl235zcwe002dwjpje5785mfj","tag_id":"cl235zcvx000rwjpj7rwsdc6a","_id":"cl235zcwh002swjpj3lx3bnpl"},{"post_id":"cl235zcwf002iwjpj2hgydf80","tag_id":"cl235zcvx000rwjpj7rwsdc6a","_id":"cl235zcwi002vwjpj8ntf58f4"},{"post_id":"cl235zcw20012wjpjdipf14s3","tag_id":"cl235zcwf002gwjpjbou5aqvl","_id":"cl235zcwj002zwjpjfwn6axea"},{"post_id":"cl235zcw30017wjpj3uvqa9md","tag_id":"cl235zcwg002pwjpj4hdy0fh4","_id":"cl235zcwk0032wjpj6johdnon"},{"post_id":"cl235zcwj0030wjpjfghy39pb","tag_id":"cl235zcvx000rwjpj7rwsdc6a","_id":"cl235zcwk0036wjpjdemngkjh"},{"post_id":"cl235zcw40019wjpjbryghqc9","tag_id":"cl235zcwi002ywjpjftyy675y","_id":"cl235zcwl0039wjpj16qgbq9c"},{"post_id":"cl235zcwl0037wjpj8q3nbyph","tag_id":"cl235zcwd0028wjpj3rz7hexq","_id":"cl235zcwm003dwjpj1myobkhw"},{"post_id":"cl235zcw5001dwjpj5ym445g3","tag_id":"cl235zcwk0035wjpj04nhbvng","_id":"cl235zcwm003gwjpj0k35ftju"},{"post_id":"cl235zcwm003ewjpj9rnj2132","tag_id":"cl235zcwd0028wjpj3rz7hexq","_id":"cl235zcwn003jwjpjcsvqgc1z"},{"post_id":"cl235zcw6001gwjpj2o2176u5","tag_id":"cl235zcwm003cwjpj294q6o36","_id":"cl235zcwo003nwjpj1bvagyu4"},{"post_id":"cl235zcwn003hwjpjb8f7hry6","tag_id":"cl235zcw9001swjpj46ij6vbp","_id":"cl235zcwp003rwjpj0ei3czo7"},{"post_id":"cl235zcw7001iwjpjeygzap6w","tag_id":"cl235zcwn003kwjpjhjgs676q","_id":"cl235zcwp003vwjpj9j8p12gp"},{"post_id":"cl235zcwp003swjpj1iph2vcj","tag_id":"cl235zcvx000rwjpj7rwsdc6a","_id":"cl235zcwq003ywjpja1tl5e03"},{"post_id":"cl235zcw9001pwjpjgvrg9pzp","tag_id":"cl235zcwp003uwjpjeakw5i46","_id":"cl235zcwr0045wjpjbeg4cszf"},{"post_id":"cl235zcwb001xwjpj4grk4oka","tag_id":"cl235zcwr0042wjpj80dca0wa","_id":"cl235zcwt004cwjpjetw3511c"},{"post_id":"cl235zcws004awjpj8ayg4sps","tag_id":"cl235zcvz000ywjpjc51oebr3","_id":"cl235zcwu004gwjpj5ayb6hs2"},{"post_id":"cl235zcwf002lwjpjeeck5l6o","tag_id":"cl235zcws0049wjpj3z942szx","_id":"cl235zcwv004kwjpjgqxidzit"},{"post_id":"cl235zcwt004dwjpjg3p1glx2","tag_id":"cl235zcvx000rwjpj7rwsdc6a","_id":"cl235zcww004owjpjewyqdpzp"},{"post_id":"cl235zcwh002qwjpjb56hf3t6","tag_id":"cl235zcwk0035wjpj04nhbvng","_id":"cl235zcwy004swjpj0n7lgbk5"},{"post_id":"cl235zcwh002twjpj103def5u","tag_id":"cl235zcwk0035wjpj04nhbvng","_id":"cl235zcwy004xwjpje1we3zwu"},{"post_id":"cl235zcwi002wwjpjbf3ucac8","tag_id":"cl235zcwy004vwjpjaftrd746","_id":"cl235zcwz0051wjpje1ji7dko"},{"post_id":"cl235zcwk0033wjpj4hbg7z6r","tag_id":"cl235zcwz0050wjpj7w727oja","_id":"cl235zcx00056wjpjehay62aj"},{"post_id":"cl235zcwl003awjpjf7a2b25g","tag_id":"cl235zcwn003kwjpjhjgs676q","_id":"cl235zcx00059wjpj2tb36ni3"},{"post_id":"cl235zcwn003lwjpj2jss8npm","tag_id":"cl235zcx00058wjpjfkj4daz5","_id":"cl235zcx1005bwjpjgb1sg9cd"},{"post_id":"cl235zcwo003owjpjdgck5rk4","tag_id":"cl235zcx0005awjpjgqq0hya0","_id":"cl235zcx1005dwjpj4648hoaw"},{"post_id":"cl235zcwp003wwjpj43wte43a","tag_id":"cl235zcx0005awjpjgqq0hya0","_id":"cl235zcx1005fwjpj88b36flw"},{"post_id":"cl235zcwq003zwjpjf1c9gc4s","tag_id":"cl235zcx0005awjpjgqq0hya0","_id":"cl235zcx2005hwjpj9he68d7h"},{"post_id":"cl235zcwr0043wjpj0rc546do","tag_id":"cl235zcx0005awjpjgqq0hya0","_id":"cl235zcx2005jwjpj4pv0hw5l"},{"post_id":"cl235zcws0046wjpj5ph70fr9","tag_id":"cl235zcx0005awjpjgqq0hya0","_id":"cl235zcx3005lwjpj9tzr9wzl"},{"post_id":"cl235zcwu004iwjpj7kak2l0g","tag_id":"cl235zcx2005kwjpje2gb7l6m","_id":"cl235zcx3005nwjpj0tj11no0"},{"post_id":"cl235zcww004lwjpj4pr47nh3","tag_id":"cl235zcx3005mwjpj1fqp992b","_id":"cl235zcx3005pwjpj3m2ahm18"},{"post_id":"cl235zcwx004qwjpj1ellcgtn","tag_id":"cl235zcx3005owjpj0cxvaef8","_id":"cl235zcx3005qwjpj3td03wuk"},{"post_id":"cl235zcx6005rwjpjhthj5c4o","tag_id":"cl235zcx9005twjpjcfts4sk3","_id":"cl235zcxb005zwjpj16btdlv6"},{"post_id":"cl235zcx7005swjpjheyc9mr0","tag_id":"cl235zcxa005ywjpjgujx1ccf","_id":"cl235zcxb0064wjpj9zhmd9d6"},{"post_id":"cl235zcx9005uwjpjef8patdw","tag_id":"cl235zcxb0062wjpj6tie0yu3","_id":"cl235zcxb0067wjpj87rl8yyj"},{"post_id":"cl235zcxa005wwjpj4i7c775u","tag_id":"cl235zcxb0065wjpj8xpldpit","_id":"cl235zcxb0068wjpjhjizech0"}],"Tag":[{"name":"Linux","_id":"cl235zcvm0005wjpjcoh68xvt"},{"name":"消息中间件","_id":"cl235zcvu000lwjpjcy9o96cd"},{"name":"mysql","_id":"cl235zcvx000rwjpj7rwsdc6a"},{"name":"algorithm","_id":"cl235zcvz000ywjpjc51oebr3"},{"name":"jdk","_id":"cl235zcw5001cwjpjdven1gs4"},{"name":"java","_id":"cl235zcw9001swjpj46ij6vbp"},{"name":"线程","_id":"cl235zcwd0028wjpj3rz7hexq"},{"name":"Java","_id":"cl235zcwf002gwjpjbou5aqvl"},{"name":"ELK","_id":"cl235zcwg002pwjpj4hdy0fh4"},{"name":"SpringCloud","_id":"cl235zcwi002ywjpjftyy675y"},{"name":"redis","_id":"cl235zcwk0035wjpj04nhbvng"},{"name":"ClassLoader","_id":"cl235zcwm003cwjpj294q6o36"},{"name":"hexo","_id":"cl235zcwn003kwjpjhjgs676q"},{"name":"内部类","_id":"cl235zcwp003uwjpjeakw5i46"},{"name":"lock","_id":"cl235zcwr0042wjpj80dca0wa"},{"name":"内存溢出","_id":"cl235zcws0049wjpj3z942szx"},{"name":"springboot","_id":"cl235zcwy004vwjpjaftrd746"},{"name":"守护线程","_id":"cl235zcwz0050wjpj7w727oja"},{"name":"docker","_id":"cl235zcx00058wjpjfkj4daz5"},{"name":"nginx","_id":"cl235zcx0005awjpjgqq0hya0"},{"name":"tidb","_id":"cl235zcx2005kwjpje2gb7l6m"},{"name":"集合","_id":"cl235zcx3005mwjpj1fqp992b"},{"name":"shutdown","_id":"cl235zcx3005owjpj0cxvaef8"},{"name":"linux","_id":"cl235zcx9005twjpjcfts4sk3"},{"name":"swagger","_id":"cl235zcxa005ywjpjgujx1ccf"},{"name":"mycat","_id":"cl235zcxb0062wjpj6tie0yu3"},{"name":"vue","_id":"cl235zcxb0065wjpj8xpldpit"}]}}