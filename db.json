{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/pure/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/pure/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/pure/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","path":"images/xingqiu-qrcode.jpg","modified":1,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":1,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","path":"images/donate/wechatpayimg.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","path":"images/favatar/SzsFox-logo.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"7da4e71a56408104abda3fb87686c3b281feeb77","modified":1629013286076},{"_id":"source/CNAME","hash":"0921dce0665fa8071633e0d0450f83a70a161c54","modified":1629013286076},{"_id":"source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1629013286077},{"_id":"source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1629013286077},{"_id":"source/_posts/algorithm.md","hash":"00321884cf77de3ff2fdb68e2514af29ce7ecc96","modified":1629384955637},{"_id":"source/_posts/ConcurrentHashMap.md","hash":"c20807784e89817d0e8a91a267006539c76455f4","modified":1629013286077},{"_id":"source/_posts/ElasticSearch.md","hash":"57765bdfb56e49e9587f065952a2cf934b2ce644","modified":1629013286078},{"_id":"source/_posts/cache-consistency.md","hash":"8cb37746ca1318926d8f211baf653b14238919cb","modified":1629013286081},{"_id":"source/_posts/bug-sprigCloud.md","hash":"4366026b7d79f3958f6663d065392afdfec50255","modified":1629298531843},{"_id":"source/_posts/classLoad.md","hash":"de2352032a006c44776a003d3feafef827a68c6a","modified":1629013286081},{"_id":"source/_posts/hexo-spawn-failed.md","hash":"8e421cd4f342a2a7cc3f622a3c9b089ad59360df","modified":1629024069384},{"_id":"source/_posts/java-inner-class-01.md","hash":"f7e9d9cda74947930316b0c95a263a97072eb5b5","modified":1629013286084},{"_id":"source/_posts/interest.md","hash":"f20f207fc0b2a3d9853b2e6b5f5a3dc7650a6d1f","modified":1629287270600},{"_id":"source/_posts/java8特性.md","hash":"d1515d65fdef79cbe6eb1ef8f9768f7602b78d61","modified":1629013286084},{"_id":"source/_posts/mysql-index.md","hash":"8fc23247ce8943e5520986023fe56211e35dfb99","modified":1629535081310},{"_id":"source/_posts/lock01.md","hash":"4b82dc8604b1aa74d191a6acff79fcbe77ec8f7b","modified":1629013286084},{"_id":"source/_posts/mvcc.md","hash":"818d4ab300214737759b5af1c35a5e2906b4e363","modified":1629013286085},{"_id":"source/_posts/mysql-transcation.md","hash":"aeb8f8b6ff631bb468093e185fcb149d6a281945","modified":1629298531844},{"_id":"source/_posts/mysql.md","hash":"b8e366b75bd007e942e7c11baa30fec5b38138d5","modified":1629013286117},{"_id":"source/_posts/mycat.md","hash":"3e30e20270d1a34e8a0ca3c93f4d3f32b3e07913","modified":1629013286087},{"_id":"source/_posts/mysql数据库锁.md","hash":"9167b387c3f37776b8921ebc7d8af002c83383fd","modified":1629013286117},{"_id":"source/_posts/springboot-yml.md","hash":"2352653eda8610745bfcd477aff54e0d50a1ce10","modified":1629334317608},{"_id":"source/_posts/redis_install.md","hash":"a499eed2381ee5a2a155091b688e95297354818c","modified":1629013286132},{"_id":"source/_posts/nginx.md","hash":"b923d11bc1c2a8948743bd4f4a9528045a14966a","modified":1629013286118},{"_id":"source/_posts/outOfMemoryError.md","hash":"da02e45a6b306b5895f1c589e666ae158e37fcb2","modified":1629013286121},{"_id":"source/_posts/redis-usage-scenario.md","hash":"07919a7739ae33ee8a0aabc1c42327bc4df63cf8","modified":1629013286127},{"_id":"source/_posts/sql-01.md","hash":"52291c0ded360c977920f387f22a4c84a680301c","modified":1629013286133},{"_id":"source/_posts/thread-status.md","hash":"7ca50957fdc5307c524c0a062a3cd0154157759d","modified":1629013286134},{"_id":"source/_posts/在线修改静态文件.md","hash":"284bc4e18d7cfbfab05239100832994084668319","modified":1629013286135},{"_id":"source/_posts/thread-01.md","hash":"48e4588966f3fae1bf654b6909f3a5203e7d1019","modified":1629013286133},{"_id":"source/_posts/vue.md","hash":"1fde97ab6dc68f1f60903eb9fdde096aee67af6f","modified":1629013286135},{"_id":"source/_posts/volatile.md","hash":"df2faf2f2495c2b385a7d02f9287cbd90e12fd0b","modified":1629013286134},{"_id":"source/about/index.md","hash":"9c0546755d25347acc8b0e0b631634fe4a0a558c","modified":1629013286135},{"_id":"source/books/index.md","hash":"017b980672646558a6f6e479c1806763455b2f99","modified":1629013286135},{"_id":"source/categories/index.md","hash":"d600eff0961c8d918b2f3dbb4d674b7cbc6f7ce8","modified":1629013286135},{"_id":"source/links/index.md","hash":"6a091d1c5c66fafef2aba5b9776b310ff02c9dba","modified":1629013286135},{"_id":"source/tags/index.md","hash":"359dffd6f867539995e975d2ec784a3feb5259f8","modified":1629013286136},{"_id":"source/repository/index.md","hash":"96d4d4ac69fa35a1a5c1131be71f459b84ceef2d","modified":1629013286136},{"_id":"source/_posts/ConcurrentHashMap/01.png","hash":"111fdc2e7e640ca6fccf8721eec0f158e32fb1c1","modified":1629013286077},{"_id":"source/_posts/ElasticSearch/image-20200806170145844.png","hash":"c98bc90ae0f0f216dd7fec89b7b712e055ed2ad1","modified":1629013286078},{"_id":"source/_posts/ConcurrentHashMap/02.png","hash":"12007c1f0661add3711542ff63a6fde24d2b2516","modified":1629013286078},{"_id":"source/_posts/ElasticSearch/image-20201211095101816.png","hash":"ab9071ebe82c1cb6b352e96b946573c234812f1a","modified":1629013286080},{"_id":"source/_posts/ElasticSearch/image-20201211095258901.png","hash":"c9b64529bc173cdb220e8ed4dc085914b91f93a4","modified":1629013286080},{"_id":"source/_posts/bug-sprigCloud/01.png","hash":"c4a711f619567903ca4594e33d852783dd9f8d8c","modified":1629013286080},{"_id":"source/_posts/classLoad/02.png","hash":"86dffdfb2c8ce61214bb849c096af41ca70bed21","modified":1629013286082},{"_id":"source/_posts/lock01/read_writer_Lock1.png","hash":"c313df303034ea20d7755e1c852508078989d8fb","modified":1629013286085},{"_id":"source/_posts/interest/3_5_8.png","hash":"193e1a023943bc5656e01ef063f42732971db16e","modified":1629013286084},{"_id":"source/_posts/mvcc/02.png","hash":"fb4b67fb5dd68379252c5ceeed223205451add33","modified":1629013286086},{"_id":"source/_posts/mvcc/03.png","hash":"f7f700d6a81adb11c2ffc01c9ad1d19b5b43e596","modified":1629013286086},{"_id":"source/_posts/mvcc/04.png","hash":"b695fa332822b8c862321b4e2499745a1b6f2ca9","modified":1629013286087},{"_id":"source/_posts/mysql/image-20200727231112059.png","hash":"ca143ba3c9308f2cf8e4cdffb51ab0cc66a60531","modified":1629013286117},{"_id":"source/_posts/mysql/image-20200727224117281.png","hash":"68e6828d09f7daebb9a859acd87756dc88da68b5","modified":1629013286117},{"_id":"source/_posts/mycat/image-20201104204933409.png","hash":"00d84f09649bd8f5af97df8c797b5be80b36189a","modified":1629013286088},{"_id":"source/_posts/mycat/image-20201104204430049.png","hash":"3b9961e1dfc06111312d7fe8afd161ec583d6289","modified":1629013286087},{"_id":"source/_posts/mycat/image-20201104205054233.png","hash":"5556b40ae89e29d25930df47fefafaafe552a240","modified":1629013286089},{"_id":"source/_posts/mycat/image-20201104205319372.png","hash":"98eb034972454a5babf583b6085f0e52f1885b6c","modified":1629013286089},{"_id":"source/_posts/mycat/image-20201104210117373.png","hash":"0f609f2a13b028a42334b5c30defcb8da3d6919c","modified":1629013286092},{"_id":"source/_posts/mycat/image-20201107213638624.png","hash":"eea90ac8885947323777c137aea5e6c4a51b5f88","modified":1629013286099},{"_id":"source/_posts/mycat/image-20201107212552852.png","hash":"8bbf68419505c255be696590e60910d5694cfaef","modified":1629013286098},{"_id":"source/_posts/mycat/image-20201127094703483.png","hash":"f857cf4391f4a15818f7d11127df23ab2e19ff64","modified":1629013286101},{"_id":"source/_posts/mycat/image-20201107215605251.png","hash":"60b33dace301869dc8470ef787949cdd5cdc7cd8","modified":1629013286100},{"_id":"source/_posts/mycat/image-20201107215437139.png","hash":"5e8b13d8e119fa6813d910dd0c85c9f1dfd89fba","modified":1629013286100},{"_id":"source/_posts/mycat/image-20201107220049532.png","hash":"a4d9a1a501b6b74bbab8f6078675cdd0d4e5d52a","modified":1629013286100},{"_id":"source/_posts/mycat/image-20201127103212598.png","hash":"e08b1661c6208ead3c24e074e382c0486d796545","modified":1629013286101},{"_id":"source/_posts/mycat/image-20201127104159580.png","hash":"a6b70b3b261e89e4d8b0d615c069d3180101da9a","modified":1629013286101},{"_id":"source/_posts/mycat/image-20201128135953635.png","hash":"18752a442d910714686f729fdd48b0f086751196","modified":1629013286101},{"_id":"source/_posts/mycat/image-20201129110838590.png","hash":"ade0139b7a7daa20e9d5369701b71c8dc7e1280d","modified":1629013286102},{"_id":"source/_posts/mycat/image-20201219102742172.png","hash":"e70acc0b0f994711194e155b1a5b61451692cbdb","modified":1629013286102},{"_id":"source/_posts/mycat/image-20201215152125176.png","hash":"451328599a4358567019ae6265cc084048daca28","modified":1629013286102},{"_id":"source/_posts/mysql-index/01.png","hash":"54cd4793929b29298555767248f44b1f867292e0","modified":1629531713580},{"_id":"source/_posts/mysql-index/02.png","hash":"bb67fbd6d341bb29c9b23aa3b1e02caf5ed5802b","modified":1629531897843},{"_id":"source/_posts/mysql-index/03.png","hash":"f85542f17ee81b68a42fa3639b7ffba74a8bd321","modified":1629535067612},{"_id":"source/_posts/mysql-transcation/image-20200727224117281.png","hash":"68e6828d09f7daebb9a859acd87756dc88da68b5","modified":1629013286104},{"_id":"source/_posts/mysql-transcation/image-20200727231112059.png","hash":"ca143ba3c9308f2cf8e4cdffb51ab0cc66a60531","modified":1629013286104},{"_id":"source/_posts/mysql-transcation/image-20201202213520136.png","hash":"6c74d02c03add5d40f7be56bdca5ef54994de67b","modified":1629013286109},{"_id":"source/_posts/mysql-transcation/image-20201202214957559.png","hash":"21b3c64e6c15ab8c367d54659254df3db4973acb","modified":1629013286111},{"_id":"source/_posts/nginx/image-20201210100736952.png","hash":"1212b42387d66bd9b65c94512385a4c182c5679f","modified":1629013286118},{"_id":"source/_posts/nginx/image-20201210103251475.png","hash":"bcc1327d5b4046748d82e10628040e1bf09c91bc","modified":1629013286118},{"_id":"source/_posts/outOfMemoryError/02.png","hash":"a898d849242743c8573b744a0c9194220661a57d","modified":1629013286122},{"_id":"source/_posts/redis-usage-scenario/03.png","hash":"ec320a53ed8e0af403d19035ff6b8f8f6575fcfa","modified":1629013286130},{"_id":"source/_posts/thread-status/01.jpg","hash":"1a0b91f489c429c2978096e68f768df0c6a1fdf0","modified":1629013286134},{"_id":"source/_posts/volatile/01.png","hash":"5fd741f1eee38e918cb00834a1315f53c1231f1c","modified":1629013286134},{"_id":"source/_posts/ElasticSearch/image-20200807093208470.png","hash":"5975509b668fef3322a88c368dfbe3a0cb22c4d5","modified":1629013286078},{"_id":"source/_posts/classLoad/01.png","hash":"adc1cf322ff0f1e91e09b350d4848fdc7f0f4e43","modified":1629013286082},{"_id":"source/_posts/bug-sprigCloud/02.png","hash":"05f5e2d3920fd5c9483258187681e6bbe23e84ae","modified":1629013286081},{"_id":"source/_posts/mvcc/01.png","hash":"8e70ad2e05ff2d94793d61c114aaf474b7927cdb","modified":1629013286085},{"_id":"source/_posts/mycat/image-20201104204624925.png","hash":"bef63295b620faf484bcd0945acc3675f888b2ce","modified":1629013286088},{"_id":"source/_posts/mycat/image-20201104205756827.png","hash":"9ab8db96a20f18e0a6be7ca82b7eeb23028d575e","modified":1629013286091},{"_id":"source/_posts/mycat/image-20201104210008624.png","hash":"794595be91b46735e45bbc76c6018cd10053e729","modified":1629013286091},{"_id":"source/_posts/mycat/image-20201104213343204.png","hash":"d5add96f96f18cc51096e6a708cd87b730b35ef8","modified":1629013286093},{"_id":"source/_posts/mycat/image-20201104221659540.png","hash":"b87e471db113a327ac9fd577d18673fd3a29b2c3","modified":1629013286096},{"_id":"source/_posts/mycat/image-20201104223246735.png","hash":"66ab19ab75bc92a4894f7f678883ff967f00722e","modified":1629013286097},{"_id":"source/_posts/mycat/image-20201107205855474.png","hash":"087671495d91dc235cfcd2071c88e12032123d97","modified":1629013286098},{"_id":"source/_posts/mycat/image-20201107201442912.png","hash":"a2f75b03bfb1d076f552403fb247bfcbdf20c259","modified":1629013286097},{"_id":"source/_posts/mycat/image-20201219103201836.png","hash":"f93d0c9392049c1139d0392a2965d0dcdd34555e","modified":1629013286102},{"_id":"source/_posts/mysql-transcation/image-20201202210235089.png","hash":"fe845f80b723d3bf3c8945f241d138dcc4406c85","modified":1629013286105},{"_id":"source/_posts/mysql-transcation/image-20201202210357906.png","hash":"d8f89873679085168d728ab2df89b1cc1939db22","modified":1629013286106},{"_id":"source/_posts/mycat/image-20201220172406074.png","hash":"d5cc2fd773afab1df221d3c8dde5d1c9eb409f8c","modified":1629013286104},{"_id":"source/_posts/mysql-transcation/image-20201202210510525.png","hash":"78df0df3cfc22065a0ab6be7333cb4c759b348e8","modified":1629013286106},{"_id":"source/_posts/mysql-transcation/image-20201202211406282.png","hash":"a579a52d0d3fb2191a448da7ac3442f48d37167b","modified":1629013286107},{"_id":"source/_posts/mysql-transcation/image-20201202214418001.png","hash":"178a89d26eef0c2ab3610e86e557b0440ddaaf0e","modified":1629013286110},{"_id":"source/_posts/mysql-transcation/image-20201202222823984.png","hash":"34f9cfe5119eb3d50e1e45c03ebf4d5bf00f3b18","modified":1629013286113},{"_id":"source/_posts/mysql-transcation/image-20201202223655445.png","hash":"67288f601f88c0c5662e4a4641f717a451d0be55","modified":1629013286115},{"_id":"source/_posts/mysql-transcation/image-20201202224412832.png","hash":"0ca867bcd26897674958c4dad0473f2f266e2cfd","modified":1629013286116},{"_id":"source/_posts/outOfMemoryError/01.png","hash":"7e36df889d5346adcb0b77af23d68afed39a6f57","modified":1629013286121},{"_id":"source/_posts/redis-usage-scenario/04.png","hash":"cd1258db49a0356c37fe297edcc5e9d7b0d83983","modified":1629013286130},{"_id":"source/_posts/redis_install/image-20201201155441018.png","hash":"baa59222dafedc944f8ab692af3dfb4d4d3e69f0","modified":1629013286133},{"_id":"source/_posts/redis-usage-scenario/02.png","hash":"6b57644ca016b2afe659711504c62fc402e412b5","modified":1629013286129},{"_id":"source/_posts/redis-usage-scenario/05.png","hash":"bd668a6a1a9aaa46de2d3b6c2d83175d6592869e","modified":1629013286130},{"_id":"source/_posts/classLoad/03.png","hash":"9bcb79b7f54a0a07c9ebf3b02ace8509cfc924ed","modified":1629013286083},{"_id":"themes/pure/.gitignore","hash":"dbb41a2f30c98cb9de173d82736c46266c901cda","modified":1629013286136},{"_id":"themes/pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1629013286137},{"_id":"themes/pure/README.cn.md","hash":"a634af4addbb57088935e060e8ec6035ea7bab76","modified":1629013286137},{"_id":"themes/pure/README.md","hash":"5861cec81712af9197a210fd5212d007aad8b0de","modified":1629013286137},{"_id":"themes/pure/_config.yml","hash":"eb2bae3cb056ff71d6568882ba582e28aebf1f7c","modified":1629013286137},{"_id":"themes/pure/_config.yml.example","hash":"106df172446c87813b7bb4ec741922f1d6d5e14c","modified":1629013286137},{"_id":"source/_posts/mycat/image-20201104215015366.png","hash":"319b52e8cd8fd7ab472a2993d860f8f3fe3f6ad1","modified":1629013286094},{"_id":"themes/pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1629013286159},{"_id":"themes/pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1629013286157},{"_id":"themes/pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1629013286157},{"_id":"themes/pure/layout/categories.ejs","hash":"22a2bc1712dd9ba1a3027e875d636132d334fb00","modified":1629013286158},{"_id":"themes/pure/layout/archive.ejs","hash":"ded5d953b35666e30f4c6e48e2d2c62af8d95ebf","modified":1629013286157},{"_id":"themes/pure/layout/layout.ejs","hash":"a29ab2e881954a252bfc0dc1a7eb5aa52768dd2a","modified":1629013286158},{"_id":"themes/pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1629013286158},{"_id":"themes/pure/layout/category.ejs","hash":"3ca5651bbce7b0c280c906468f2eb18c2e55ebcb","modified":1629013286158},{"_id":"themes/pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1629013286158},{"_id":"themes/pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1629013286158},{"_id":"themes/pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1629013286159},{"_id":"themes/pure/layout/tag.ejs","hash":"df60564c162f7ad3422f8959dfea19351857a7cd","modified":1629013286159},{"_id":"themes/pure/layout/tags.ejs","hash":"29f19a6ed10f8b1f069259a7aeaaacddcfaa2ed4","modified":1629013286159},{"_id":"themes/pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1629013286159},{"_id":"themes/pure/languages/en.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1629013286145},{"_id":"themes/pure/languages/default.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1629013286145},{"_id":"themes/pure/languages/zh-TW.yml","hash":"6d27c3114be539b8783ffce944f68b2e26a8c3b9","modified":1629013286145},{"_id":"themes/pure/languages/zh-CN.yml","hash":"057ebc043f09449af9768791c89c86dfc2938365","modified":1629013286145},{"_id":"themes/pure/_source/favicon.ico","hash":"80efb1836c542af64366401b6e79cbad51037f24","modified":1629013286139},{"_id":"themes/pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1629013286174},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/bug_report.md","hash":"83d211c67c12e8c1f6e9f796cfd0cecbf5160e15","modified":1629013286136},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/custom.md","hash":"84208538d48505ee8e49812cb336eb9882e08dc7","modified":1629013286136},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1629013286136},{"_id":"themes/pure/layout/_common/head.ejs","hash":"a48ef0fa22712b29ec044b9e5134461f3a21c10d","modified":1629013286146},{"_id":"themes/pure/source/favicon.ico","hash":"80efb1836c542af64366401b6e79cbad51037f24","modified":1629013286176},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"cdc48ec70d9202b947f2a9334234d038d7014a7d","modified":1629013286145},{"_id":"themes/pure/layout/_common/header.ejs","hash":"3d739d1e2b2991927c08ec222db123830a44a519","modified":1629013286146},{"_id":"themes/pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1629013286146},{"_id":"themes/pure/layout/_common/script.ejs","hash":"0031114d2a58f8601c2869f78ceedc75a10be90d","modified":1629013286146},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"977f97f3636947006ad738e502858c46d4cd5ec7","modified":1629013286146},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1629013286147},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"c66c86d6a6a90e00494c380603426fc0f4006311","modified":1629013286147},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1629013286146},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"4d6793f50d41fbd47dc50aa36b24d496006bba6c","modified":1629013286147},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"13039fec017332029122ef99901755fcecbfc8ea","modified":1629013286147},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"7b80319daeb63401d1745b81cd9a6d1d21a4fb60","modified":1629013286148},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"e39dc762d9fe238cede462532e40eaa3d8651122","modified":1629013286147},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1629013286147},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"0f9b71de0087d1f777d92c5a0f3873971aec5a5b","modified":1629013286148},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"41a319642da5af07d6cfb8525796aa610b721879","modified":1629013286148},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"9f755b0da1ea928dece32c2050d8a04b3a9fb13b","modified":1629013286148},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"46da1ee327b8af107335146bd8fc131eee6c9c4f","modified":1629013286151},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"152538ceceb0fdef65c46470ebf0189f7b891c5b","modified":1629013286151},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1629013286155},{"_id":"themes/pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1629013286155},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1629013286155},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1629013286151},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1629013286156},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1629013286156},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"6f951510bab9dc15474b6664e0329defccf29a30","modified":1629013286154},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"e756a81f8c20a187fb863b9689f2f1fa15e2f4e1","modified":1629013286154},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"8f1be01e70a15b2c31ae57d8c6bce54622ebf8a7","modified":1629013286154},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"ee21c4e7ccac26ff2ab6d1d178447fd11fea4d7e","modified":1629013286154},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1629013286154},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"14f2e7d4c1055ff6a5f5867dc0e9a9f6f4c28fe1","modified":1629013286155},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"fb9b5f16029f2ccef4b83cf4facfdcdd748b65b4","modified":1629013286155},{"_id":"themes/pure/layout/_script/search.ejs","hash":"7be33dc260ce788aa1a2cd3bd0386d95057533cb","modified":1629013286155},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1629013286156},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1629013286156},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"acd27451be52703e670ce0b313f2da6fa24071e4","modified":1629013286156},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1629013286157},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1629013286157},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1629013286157},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1629013286138},{"_id":"themes/pure/_source/404/index.md","hash":"8d493f624fdd29c8d0266767e56f343d549e16d8","modified":1629013286137},{"_id":"themes/pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1629013286139},{"_id":"themes/pure/_source/about/index.md","hash":"9bfd778bc72255f6a98efbb3d8abe688833e866b","modified":1629013286139},{"_id":"themes/pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1629013286144},{"_id":"themes/pure/_source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1629013286139},{"_id":"themes/pure/_source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1629013286139},{"_id":"themes/pure/_source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1629013286144},{"_id":"themes/pure/_source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1629013286145},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1629013286177},{"_id":"themes/pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1629013286176},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1629013286179},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1629013286179},{"_id":"themes/pure/source/images/avatar.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1629013286180},{"_id":"themes/pure/source/images/favicon.ico","hash":"d49cc39708a0623a83fdeaefb46de268b818f318","modified":1629013286186},{"_id":"themes/pure/source/images/logo.png","hash":"8e6dc6af4dda2ceb1eb72b3609479f3cb4aca13f","modified":1629013286186},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1629013286186},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1629013286187},{"_id":"themes/pure/source/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1629013286187},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1629013286187},{"_id":"themes/pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1629013286187},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1629013286149},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"0a99c99992fb1e97bf5a57e05179f5680d69dcc8","modified":1629013286149},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"3c0da69fcea6ccfd97b82d50e740107a88eec5c4","modified":1629013286149},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"7d4979652998abf92a64bfae8157b70d6e514057","modified":1629013286149},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1629013286150},{"_id":"themes/pure/layout/_partial/post/gitalk.ejs","hash":"353b1dafc0b9a6efb66d195e74127e3bfb73d74a","modified":1629013286150},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"a251dc34d660601a2e8b7d98b3bfe2b9023dbbce","modified":1629013286149},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"95eabc0fe4033ec61b240a16eeaf7dc62a9e3da1","modified":1629013286150},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"ec3ccf322432afc2761f860c5a3000ac34d46e4c","modified":1629013286150},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1629013286150},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1629013286151},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1629013286151},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1629013286151},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1629013286152},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1629013286152},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"77defb41a1613a758ff5a6a5128c6107fc584190","modified":1629013286152},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"fb01f1631c3ae7fe6211dc03233506cb344229be","modified":1629013286153},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"a64852076483395738a398deb4c10bdb0f3b7b71","modified":1629013286153},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"a051e3eddc75586e69131c29ab8c89d69626e0fd","modified":1629013286152},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"5ab997d5ee4475d2f89f882fab4a52648dbe0e30","modified":1629013286153},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"acf81f9a59dc45f197d723f70484de5fcd166577","modified":1629013286153},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"095649a173573d03b5845c2e331ec7be976b152a","modified":1629013286153},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1629013286153},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1629013286154},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1629013286186},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1629013286185},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1629013286186},{"_id":"source/_posts/mycat/image-20201104222632963.png","hash":"f84fe140ea2c25cc5a93e006f86729522a8a1289","modified":1629013286096},{"_id":"source/_posts/mysql-transcation/image-20201202222914087.png","hash":"91e77f0b02a413d0e9613da5eeb7e65023a2897a","modified":1629013286114},{"_id":"source/_posts/mysql-transcation/image-20201202222250939.png","hash":"f62bf3adf4e2ccebebd148f81a8e525680d18ccb","modified":1629013286113},{"_id":"source/_posts/mysql-transcation/image-20201202224136052.png","hash":"98dd9ff6c0a991a146edc81251bace4c4c4470ce","modified":1629013286116},{"_id":"source/_posts/mycat/image-20201104210416994.png","hash":"05f625952a7a96994300c52e4444d0f670c9ac4f","modified":1629013286092},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1629013286160},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1629013286163},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1629013286164},{"_id":"themes/pure/source/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1629013286191},{"_id":"themes/pure/source/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1629013286189},{"_id":"source/_posts/mycat/image-20201107213859155.png","hash":"bcd51eb3650bc7519c5ccbe20caba54237ec808e","modified":1629013286099},{"_id":"source/_posts/mysql-transcation/image-20201202211752764.png","hash":"40651944aab63eda574090e4a018a8f433be12a2","modified":1629013286108},{"_id":"source/_posts/mysql-transcation/image-20201202212103393.png","hash":"672bbb9ae12eaf223dfda421a62d3dec36406e3d","modified":1629013286109},{"_id":"source/_posts/ElasticSearch/image-20200807093309761.png","hash":"d95ac7aaea31cd9322f5f7d8c8a704d76b7e503c","modified":1629013286079},{"_id":"source/_posts/mycat/image-20201104205653611.png","hash":"df947668dea64063a150fe0a3dbcd49d696a163c","modified":1629013286090},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1629013286161},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1629013286162},{"_id":"themes/pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1629013286188},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1629013286190},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"4b5dcdc366cf96737e582094267b6f177c15bb44","modified":1629013286183},{"_id":"source/_posts/mysql-transcation/image-20201202215350319.png","hash":"2c3cef1bc3cfa005b5aa46a8ff19c0cb0667e39c","modified":1629013286111},{"_id":"source/_posts/mycat/image-20201220170713526.png","hash":"7a7f2a55b96a42ad49efa80806a9a5c9ba06a98d","modified":1629013286103},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1629013286178},{"_id":"themes/pure/source/css/style.css","hash":"3b693ce41c2e35ece4773593e94b4c17aeaee02f","modified":1629013286175},{"_id":"source/_posts/outOfMemoryError/05.png","hash":"bd8a1e8b789597121dc0ea116762c8bcf6f3e385","modified":1629013286125},{"_id":"source/_posts/outOfMemoryError/03.png","hash":"f6c5120f15f65e198b3d7f8f67f0b83c9fdca7b1","modified":1629013286123},{"_id":"source/_posts/outOfMemoryError/04.png","hash":"bbee74780760a53a2d4ece78fdd88b46d1592f4b","modified":1629013286124},{"_id":"source/_posts/redis-usage-scenario/01.png","hash":"0e23b53142149c6b75e693e8d5b6eb87148897c3","modified":1629013286129},{"_id":"themes/pure/source/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1629013286176},{"_id":"source/_posts/mysql-transcation/image-20201202210817094.png","hash":"6810630ccd02b7b68215d147c408f8769edb92c3","modified":1629013286107},{"_id":"source/_posts/mysql-transcation/image-20201202213757692.png","hash":"1187aa165415735ce8b7352d39fe3af5561e86d1","modified":1629013286110},{"_id":"source/_posts/mysql-transcation/image-20201202215717524.png","hash":"6173e68d50fed251dd9a7a908823df5b5751df4c","modified":1629013286112},{"_id":"source/_posts/mycat/image-20201104221336437.png","hash":"e8e98f07e2503e85bbcb2699b8450ffe0e108663","modified":1629013286095},{"_id":"source/_posts/redis-usage-scenario/06.png","hash":"a97a3387e2bca72ee714fd4b60201b58b2fe4ca3","modified":1629013286132},{"_id":"themes/pure/source/images/avatar.png","hash":"ebde5ecfd529edecfab55788e99ffcb22df93730","modified":1629013286182},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"e881a9e141da37ca46258e9d8fada3b51cd11046","modified":1629013286185},{"_id":"source/_posts/outOfMemoryError/06.png","hash":"c3e65cb83beb665dffdd05ab3b30ed47bd480951","modified":1629013286127},{"_id":"source/_posts/nginx/image-20210606160947369.png","hash":"f3cd662ff33c0eb8bd29eea58aeb699f5e7a8a71","modified":1629013286121},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1629013286174},{"_id":"public/baidusitemap.xml","hash":"d36dcb1719ef869ebe0043da8633bf2a1bcb5f46","modified":1629535109195},{"_id":"public/feed.xml","hash":"1ab7522c36cc2604ceb90e8df147dc98906e838b","modified":1629535109195},{"_id":"public/search.xml","hash":"87fad554644ec17f3fcf2499ce02d432de3bb3db","modified":1629535109195},{"_id":"public/content.json","hash":"e758d8617f62a49ed02c8259dee9980e910a9ebe","modified":1629535109195},{"_id":"public/sitemap.xml","hash":"4704107848637983bcd189e9800c3b59142d2482","modified":1629535109195},{"_id":"public/categories/index.html","hash":"eb8cb77645b0afde814909bd5d1e0943b8d040f6","modified":1629535109195},{"_id":"public/about/index.html","hash":"94f83ea8fc5b8533def6bf17ccf2df8a3f6408fc","modified":1629535109195},{"_id":"public/404.html","hash":"ee01fe9a041721a4e7bfa523563710c017930f45","modified":1629535109195},{"_id":"public/links/index.html","hash":"072beecafd2599392fd2675625c86fabc1ec49d8","modified":1629535109195},{"_id":"public/books/index.html","hash":"a4b8bcbb9d811534b8f61c09db36c6bda1a7a12f","modified":1629535109195},{"_id":"public/repository/index.html","hash":"d4ce178ebfedf4af0e5bd2c791545d035a264369","modified":1629535109195},{"_id":"public/tags/index.html","hash":"2005b5c0ecb39d202756322e635ab92e9ee56fed","modified":1629535109195},{"_id":"public/2021/08/20/mysql-index/index.html","hash":"e465a1e03b37543bd24cfec84bd03476851713ad","modified":1629535109195},{"_id":"public/2021/08/19/algorithm/index.html","hash":"412bfc3bac6ea6455ac48e3cb181b85244fde693","modified":1629535109195},{"_id":"public/2021/08/18/springboot-yml/index.html","hash":"27452b2c09bb634598df61fbb9d2bad621aa1b31","modified":1629535109195},{"_id":"public/2021/08/15/thread-01/index.html","hash":"5a26b46a5d516c6ba4f939c98366d45c149d6197","modified":1629535109195},{"_id":"public/2021/08/14/redis-usage-scenario/index.html","hash":"1341bceda2defa730c91400f1e58f2211109f25d","modified":1629535109195},{"_id":"public/2021/08/14/mvcc/index.html","hash":"0702b6b9affdc439150951a8a30ff1c349dde92a","modified":1629535109195},{"_id":"public/2021/08/11/cache-consistency/index.html","hash":"997b6b01e2b9646fa8981300fc801a08f5c5bc3d","modified":1629535109195},{"_id":"public/2021/08/02/volatile/index.html","hash":"11339db2658f128c657fca7759e81e0e0a379577","modified":1629535109195},{"_id":"public/2021/08/01/outOfMemoryError/index.html","hash":"1ba1b9ea8929a8b45e050decefdeaf41858a0a8c","modified":1629535109195},{"_id":"public/2021/07/31/classLoad/index.html","hash":"2b4f84f3da1ae27a187f85982e4d601c47dfac50","modified":1629535109195},{"_id":"public/2021/07/24/mysql数据库锁/index.html","hash":"ae4cd997c4aaf44bd0a10c609f1a412580ceac7d","modified":1629535109195},{"_id":"public/2021/07/23/mycat/index.html","hash":"a52c81cbdfff9bf661328a46ec1dda18f712d7e8","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/index.html","hash":"138af9585d13c8c4b290a34a29dd119e38b89bf9","modified":1629535109195},{"_id":"public/2021/07/23/mysql/index.html","hash":"ee6e3b599f4f5bc9e9bf77cabdea9a9239c40428","modified":1629535109195},{"_id":"public/2021/07/23/lock01/index.html","hash":"c54d57cde9d5fac64e4e2b1fb8359e245a4969d3","modified":1629535109195},{"_id":"public/2021/07/23/ElasticSearch/index.html","hash":"d90e0cba88198636038e3eec201623ef1027da4f","modified":1629535109195},{"_id":"public/2021/07/23/nginx/index.html","hash":"0b4d0f5e558d7b4cc01daa84afd900f2b95bbfa6","modified":1629535109195},{"_id":"public/2021/07/23/vue/index.html","hash":"656ad6b87bc342fa0d2c79baaeebfcde9d6e31e3","modified":1629535109195},{"_id":"public/2021/07/03/bug-sprigCloud/index.html","hash":"4bbe0fbc0bb0dce4f131fd4bbfda118c45b0a830","modified":1629535109195},{"_id":"public/2021/07/02/ConcurrentHashMap/index.html","hash":"f555f4f8af7d804c8d2b61eeb87cb8c603f0766d","modified":1629535109195},{"_id":"public/2021/07/01/sql-01/index.html","hash":"39e03de7b75ad7cd8337cbf7c0190084a652e912","modified":1629535109195},{"_id":"public/2021/06/14/interest/index.html","hash":"c6a2d33c283f85342b2e650d5ab8823a3acd46cd","modified":1629535109195},{"_id":"public/2021/06/01/java-inner-class-01/index.html","hash":"be3e064c435364231633750a350ff9eade4a8286","modified":1629535109195},{"_id":"public/2021/05/13/redis_install/index.html","hash":"dd607e51c608abccafbc58b6f46d7df1d230c5aa","modified":1629535109195},{"_id":"public/2020/06/02/thread-status/index.html","hash":"3d63998af573b21c713903c66a072f61e18310ae","modified":1629535109195},{"_id":"public/2021/05/13/在线修改静态文件/index.html","hash":"04f81c4d90034174ff6a8608ea91149bc8942d97","modified":1629535109195},{"_id":"public/2020/04/23/java8特性/index.html","hash":"01129178d9de054b322965ef1c323d8a1002d398","modified":1629535109195},{"_id":"public/archives/index.html","hash":"e6871ea7c89c6cb3291d1470046e81280a4d7024","modified":1629535109195},{"_id":"public/archives/page/2/index.html","hash":"f56b960ff958b2aa8e9d56281a69ca02d25abf1b","modified":1629535109195},{"_id":"public/archives/page/3/index.html","hash":"c56a30671d34f1f6629715e5a61f62857e05fba7","modified":1629535109195},{"_id":"public/archives/2020/index.html","hash":"246a6978d350682d66884a922b9764ca244971c8","modified":1629535109195},{"_id":"public/archives/2020/04/index.html","hash":"e0a0b2491852276eeb640e1d55121d20c36ab904","modified":1629535109195},{"_id":"public/archives/2020/06/index.html","hash":"4d43029e7605515086ddb6ec9f5fa3d1dfdec7ee","modified":1629535109195},{"_id":"public/archives/2021/index.html","hash":"8d6cbf7d304c2790414a4132b8354e8dbb821162","modified":1629535109195},{"_id":"public/archives/2021/page/2/index.html","hash":"03297faf638405bb7b4714e1bd10eca45f9d71ec","modified":1629535109195},{"_id":"public/archives/2021/page/3/index.html","hash":"f5e093f9e69345e1bf4d1775fb52e725107464bb","modified":1629535109195},{"_id":"public/archives/2021/05/index.html","hash":"640bb241671d685c38a01fe6dab23c63c5cccce8","modified":1629535109195},{"_id":"public/archives/2021/06/index.html","hash":"56e442832ead9524f0bcecb94a1fc4eaaf71691c","modified":1629535109195},{"_id":"public/archives/2021/07/index.html","hash":"befcff5de76ac5ffb81f0fa733d239d73a38df3b","modified":1629535109195},{"_id":"public/archives/2021/07/page/2/index.html","hash":"825cbf595455a64583d0e6c1a8bd41114277b033","modified":1629535109195},{"_id":"public/archives/2021/08/index.html","hash":"e23f29dc98e6151f7358af2e41fc7739cc8abde7","modified":1629535109195},{"_id":"public/categories/java/index.html","hash":"b90d07d3d54af636cfc7cde9887785d8858446bf","modified":1629535109195},{"_id":"public/categories/数据库/index.html","hash":"89a8d67f292b976bcf5149703dbb4230a2a5df28","modified":1629535109195},{"_id":"public/categories/问题点/index.html","hash":"4401572316d5a2ac82803e814e0fdde5972c7a91","modified":1629535109195},{"_id":"public/categories/java/面试/index.html","hash":"88972c59e1706a2940094504b7270fae62677b46","modified":1629535109195},{"_id":"public/categories/中间件/index.html","hash":"932be974eba29a6cec5c7ab67726a323ed1b0886","modified":1629535109195},{"_id":"public/categories/数据库/mysql/index.html","hash":"06da5a81807d80e0f022697dd514a48bbd504cd8","modified":1629535109195},{"_id":"public/categories/趣味/index.html","hash":"4922243712ae185cba4a74e516c6b8ae4c4e8b89","modified":1629535109195},{"_id":"public/categories/问题点/sprigCloud/index.html","hash":"f6a0841e3165ebb67f000de428bd7078f9a737da","modified":1629535109195},{"_id":"public/categories/数据库/mvcc/index.html","hash":"f76291cc5175645a571794a0b257b44946bb2d6a","modified":1629535109195},{"_id":"public/categories/中间件/redis/index.html","hash":"6858cbbedc51f198eb9925ea3b3ea072d48fc4f8","modified":1629535109195},{"_id":"public/categories/linux/index.html","hash":"1456e155f4f81df7acc4b5a41fc0df794b6d1960","modified":1629535109195},{"_id":"public/categories/微服务/index.html","hash":"4828b65fc7bd7319dce3622af15f01594d3a0f3e","modified":1629535109195},{"_id":"public/categories/java/Thread/index.html","hash":"a7806def8674d1c48f134b2f946dc1b6fbb6d954","modified":1629535109195},{"_id":"public/categories/linux/nginx/index.html","hash":"39c1a4a8b52301224f76914de3375a0df790dc04","modified":1629535109195},{"_id":"public/categories/自定义工具/index.html","hash":"24dcf25d683991a37c3e6ac5013b548911a19232","modified":1629535109195},{"_id":"public/categories/微服务/springboot/index.html","hash":"35ec408c9973d36a5a2322cd3c0cc543c1e40175","modified":1629535109195},{"_id":"public/categories/前端/index.html","hash":"7f3e5d1fabd1eba2fcb2b9073c4d4acb69dd583d","modified":1629535109195},{"_id":"public/categories/前端/Vue/index.html","hash":"d45a778c4157c6cf63c86132e77a436cbf8d124c","modified":1629535109195},{"_id":"public/index.html","hash":"30942553cf756bc01af1c51caed0c0015f34ad6f","modified":1629535109195},{"_id":"public/page/2/index.html","hash":"11ef10c6b3767d077a39fcf93cc0574250c70bc1","modified":1629535109195},{"_id":"public/page/3/index.html","hash":"7c5ffb760291316ff95e698b2811d09e1fb8b906","modified":1629535109195},{"_id":"public/tags/面试/index.html","hash":"29cbf9788145bbd055f87ecc74bd9551cbe7a230","modified":1629535109195},{"_id":"public/tags/ELK/index.html","hash":"3ae6c5ebc8f47142f708bdf3eb78004c4a989621","modified":1629535109195},{"_id":"public/tags/algorithm/index.html","hash":"1bbba8800fb664d564f349e861dfdcae989b1499","modified":1629535109195},{"_id":"public/tags/问题点/index.html","hash":"8836b275f508eab81c74cf0b858502f847551233","modified":1629535109195},{"_id":"public/tags/redis/index.html","hash":"00932da065d2656e215060d034a33b760a5950a7","modified":1629535109195},{"_id":"public/tags/ClassLoader/index.html","hash":"6479e51da4c9902a34ec62e75f109bf481a5375d","modified":1629535109195},{"_id":"public/tags/java/index.html","hash":"c0386f0ed2cc28882774dba50f7140c4f075f3d6","modified":1629535109195},{"_id":"public/tags/lock/index.html","hash":"65644ffb41060507954f89502aef66941f7f3b1b","modified":1629535109195},{"_id":"public/tags/mysql/index.html","hash":"535d664da76b8804174ce19f4ed1ed1678ba1552","modified":1629535109195},{"_id":"public/tags/nginx/index.html","hash":"d07e45c146e6c186886d5355f9eaf508fa98c536","modified":1629535109195},{"_id":"public/tags/内存溢出/index.html","hash":"c4a8e8a781dee85ec2fe6a8fb08e25a255a98770","modified":1629535109195},{"_id":"public/tags/springboot/index.html","hash":"ca65292a49c02ea4e7e34fbc2bc1ab529f7ec127","modified":1629535109195},{"_id":"public/tags/工具/index.html","hash":"bdac25cf2abd42477b4de575c46694a4b2dd3463","modified":1629535109195},{"_id":"public/tags/mycat/index.html","hash":"4fbeac5ad1a773b3b78fd5a753b5a8e0fcc9eeb6","modified":1629535109195},{"_id":"public/tags/vue/index.html","hash":"3bf828c19a7e62b4512710a350b0e405b21b439b","modified":1629535109195},{"_id":"public/CNAME","hash":"0921dce0665fa8071633e0d0450f83a70a161c54","modified":1629535109195},{"_id":"public/favicon.ico","hash":"80efb1836c542af64366401b6e79cbad51037f24","modified":1629535109195},{"_id":"public/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1629535109195},{"_id":"public/images/avatar.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1629535109195},{"_id":"public/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1629535109195},{"_id":"public/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1629535109195},{"_id":"public/images/favicon.ico","hash":"d49cc39708a0623a83fdeaefb46de268b818f318","modified":1629535109195},{"_id":"public/images/logo.png","hash":"8e6dc6af4dda2ceb1eb72b3609479f3cb4aca13f","modified":1629535109195},{"_id":"public/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1629535109195},{"_id":"public/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1629535109195},{"_id":"public/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1629535109195},{"_id":"public/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1629535109195},{"_id":"public/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1629535109195},{"_id":"public/2021/07/23/ElasticSearch/image-20200806170145844.png","hash":"c98bc90ae0f0f216dd7fec89b7b712e055ed2ad1","modified":1629535109195},{"_id":"public/2021/07/23/ElasticSearch/image-20201211095258901.png","hash":"c9b64529bc173cdb220e8ed4dc085914b91f93a4","modified":1629535109195},{"_id":"public/2021/07/23/ElasticSearch/image-20201211095101816.png","hash":"ab9071ebe82c1cb6b352e96b946573c234812f1a","modified":1629535109195},{"_id":"public/2021/07/02/ConcurrentHashMap/01.png","hash":"111fdc2e7e640ca6fccf8721eec0f158e32fb1c1","modified":1629535109195},{"_id":"public/2021/07/03/bug-sprigCloud/01.png","hash":"c4a711f619567903ca4594e33d852783dd9f8d8c","modified":1629535109195},{"_id":"public/2021/07/02/ConcurrentHashMap/02.png","hash":"12007c1f0661add3711542ff63a6fde24d2b2516","modified":1629535109195},{"_id":"public/2021/07/31/classLoad/02.png","hash":"86dffdfb2c8ce61214bb849c096af41ca70bed21","modified":1629535109195},{"_id":"public/2021/06/14/interest/3_5_8.png","hash":"193e1a023943bc5656e01ef063f42732971db16e","modified":1629535109195},{"_id":"public/2021/08/14/mvcc/02.png","hash":"fb4b67fb5dd68379252c5ceeed223205451add33","modified":1629535109195},{"_id":"public/2021/08/14/mvcc/03.png","hash":"f7f700d6a81adb11c2ffc01c9ad1d19b5b43e596","modified":1629535109195},{"_id":"public/2021/08/14/mvcc/04.png","hash":"b695fa332822b8c862321b4e2499745a1b6f2ca9","modified":1629535109195},{"_id":"public/2021/07/23/lock01/read_writer_Lock1.png","hash":"c313df303034ea20d7755e1c852508078989d8fb","modified":1629535109195},{"_id":"public/2021/08/20/mysql-index/02.png","hash":"bb67fbd6d341bb29c9b23aa3b1e02caf5ed5802b","modified":1629535109195},{"_id":"public/2021/08/20/mysql-index/01.png","hash":"54cd4793929b29298555767248f44b1f867292e0","modified":1629535109195},{"_id":"public/2021/08/20/mysql-index/03.png","hash":"f85542f17ee81b68a42fa3639b7ffba74a8bd321","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20200727231112059.png","hash":"ca143ba3c9308f2cf8e4cdffb51ab0cc66a60531","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20200727224117281.png","hash":"68e6828d09f7daebb9a859acd87756dc88da68b5","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20201202213520136.png","hash":"6c74d02c03add5d40f7be56bdca5ef54994de67b","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20201202214957559.png","hash":"21b3c64e6c15ab8c367d54659254df3db4973acb","modified":1629535109195},{"_id":"public/2021/07/23/nginx/image-20201210100736952.png","hash":"1212b42387d66bd9b65c94512385a4c182c5679f","modified":1629535109195},{"_id":"public/2021/07/23/mysql/image-20200727231112059.png","hash":"ca143ba3c9308f2cf8e4cdffb51ab0cc66a60531","modified":1629535109195},{"_id":"public/2021/07/23/nginx/image-20201210103251475.png","hash":"bcc1327d5b4046748d82e10628040e1bf09c91bc","modified":1629535109195},{"_id":"public/2021/08/14/redis-usage-scenario/03.png","hash":"ec320a53ed8e0af403d19035ff6b8f8f6575fcfa","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201104204430049.png","hash":"3b9961e1dfc06111312d7fe8afd161ec583d6289","modified":1629535109195},{"_id":"public/2020/06/02/thread-status/01.jpg","hash":"1a0b91f489c429c2978096e68f768df0c6a1fdf0","modified":1629535109195},{"_id":"public/2021/08/02/volatile/01.png","hash":"5fd741f1eee38e918cb00834a1315f53c1231f1c","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201104204933409.png","hash":"00d84f09649bd8f5af97df8c797b5be80b36189a","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201104205054233.png","hash":"5556b40ae89e29d25930df47fefafaafe552a240","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201104205319372.png","hash":"98eb034972454a5babf583b6085f0e52f1885b6c","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201104210117373.png","hash":"0f609f2a13b028a42334b5c30defcb8da3d6919c","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201107212552852.png","hash":"8bbf68419505c255be696590e60910d5694cfaef","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201107213638624.png","hash":"eea90ac8885947323777c137aea5e6c4a51b5f88","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201107220049532.png","hash":"a4d9a1a501b6b74bbab8f6078675cdd0d4e5d52a","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201107215437139.png","hash":"5e8b13d8e119fa6813d910dd0c85c9f1dfd89fba","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201127094703483.png","hash":"f857cf4391f4a15818f7d11127df23ab2e19ff64","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201107215605251.png","hash":"60b33dace301869dc8470ef787949cdd5cdc7cd8","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201127104159580.png","hash":"a6b70b3b261e89e4d8b0d615c069d3180101da9a","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201127103212598.png","hash":"e08b1661c6208ead3c24e074e382c0486d796545","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201128135953635.png","hash":"18752a442d910714686f729fdd48b0f086751196","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201219102742172.png","hash":"e70acc0b0f994711194e155b1a5b61451692cbdb","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201215152125176.png","hash":"451328599a4358567019ae6265cc084048daca28","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201129110838590.png","hash":"ade0139b7a7daa20e9d5369701b71c8dc7e1280d","modified":1629535109195},{"_id":"public/2021/07/23/ElasticSearch/image-20200807093208470.png","hash":"5975509b668fef3322a88c368dfbe3a0cb22c4d5","modified":1629535109195},{"_id":"public/2021/07/03/bug-sprigCloud/02.png","hash":"05f5e2d3920fd5c9483258187681e6bbe23e84ae","modified":1629535109195},{"_id":"public/2021/07/31/classLoad/01.png","hash":"adc1cf322ff0f1e91e09b350d4848fdc7f0f4e43","modified":1629535109195},{"_id":"public/2021/08/14/mvcc/01.png","hash":"8e70ad2e05ff2d94793d61c114aaf474b7927cdb","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20201202210510525.png","hash":"78df0df3cfc22065a0ab6be7333cb4c759b348e8","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20201202210357906.png","hash":"d8f89873679085168d728ab2df89b1cc1939db22","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20201202210235089.png","hash":"fe845f80b723d3bf3c8945f241d138dcc4406c85","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20201202211406282.png","hash":"a579a52d0d3fb2191a448da7ac3442f48d37167b","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20201202214418001.png","hash":"178a89d26eef0c2ab3610e86e557b0440ddaaf0e","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20201202222823984.png","hash":"34f9cfe5119eb3d50e1e45c03ebf4d5bf00f3b18","modified":1629535109195},{"_id":"public/2021/07/23/mysql/image-20200727224117281.png","hash":"68e6828d09f7daebb9a859acd87756dc88da68b5","modified":1629535109195},{"_id":"public/2021/08/01/outOfMemoryError/02.png","hash":"a898d849242743c8573b744a0c9194220661a57d","modified":1629535109195},{"_id":"public/2021/08/14/redis-usage-scenario/02.png","hash":"6b57644ca016b2afe659711504c62fc402e412b5","modified":1629535109195},{"_id":"public/2021/08/14/redis-usage-scenario/04.png","hash":"cd1258db49a0356c37fe297edcc5e9d7b0d83983","modified":1629535109195},{"_id":"public/2021/08/14/redis-usage-scenario/05.png","hash":"bd668a6a1a9aaa46de2d3b6c2d83175d6592869e","modified":1629535109195},{"_id":"public/2021/05/13/redis_install/image-20201201155441018.png","hash":"baa59222dafedc944f8ab692af3dfb4d4d3e69f0","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201104204624925.png","hash":"bef63295b620faf484bcd0945acc3675f888b2ce","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201104210008624.png","hash":"794595be91b46735e45bbc76c6018cd10053e729","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201104205756827.png","hash":"9ab8db96a20f18e0a6be7ca82b7eeb23028d575e","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201104213343204.png","hash":"d5add96f96f18cc51096e6a708cd87b730b35ef8","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201104221659540.png","hash":"b87e471db113a327ac9fd577d18673fd3a29b2c3","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201107205855474.png","hash":"087671495d91dc235cfcd2071c88e12032123d97","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201107201442912.png","hash":"a2f75b03bfb1d076f552403fb247bfcbdf20c259","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201104223246735.png","hash":"66ab19ab75bc92a4894f7f678883ff967f00722e","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201219103201836.png","hash":"f93d0c9392049c1139d0392a2965d0dcdd34555e","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201220172406074.png","hash":"d5cc2fd773afab1df221d3c8dde5d1c9eb409f8c","modified":1629535109195},{"_id":"public/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1629535109195},{"_id":"public/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1629535109195},{"_id":"public/2021/07/31/classLoad/03.png","hash":"9bcb79b7f54a0a07c9ebf3b02ace8509cfc924ed","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20201202223655445.png","hash":"67288f601f88c0c5662e4a4641f717a451d0be55","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20201202224412832.png","hash":"0ca867bcd26897674958c4dad0473f2f266e2cfd","modified":1629535109195},{"_id":"public/2021/08/01/outOfMemoryError/01.png","hash":"7e36df889d5346adcb0b77af23d68afed39a6f57","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201104215015366.png","hash":"319b52e8cd8fd7ab472a2993d860f8f3fe3f6ad1","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201104222632963.png","hash":"f84fe140ea2c25cc5a93e006f86729522a8a1289","modified":1629535109195},{"_id":"public/fonts/README.html","hash":"26a13286f808d3ef09314df865be3049eef3906f","modified":1629535109195},{"_id":"public/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1629535109195},{"_id":"public/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1629535109195},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1629535109195},{"_id":"public/images/donate/alipayimg.png","hash":"4b5dcdc366cf96737e582094267b6f177c15bb44","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20201202215350319.png","hash":"2c3cef1bc3cfa005b5aa46a8ff19c0cb0667e39c","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20201202222250939.png","hash":"f62bf3adf4e2ccebebd148f81a8e525680d18ccb","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20201202222914087.png","hash":"91e77f0b02a413d0e9613da5eeb7e65023a2897a","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20201202224136052.png","hash":"98dd9ff6c0a991a146edc81251bace4c4c4470ce","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201107213859155.png","hash":"bcd51eb3650bc7519c5ccbe20caba54237ec808e","modified":1629535109195},{"_id":"public/images/donate/wechatpayimg.png","hash":"e881a9e141da37ca46258e9d8fada3b51cd11046","modified":1629535109195},{"_id":"public/2021/07/23/ElasticSearch/image-20200807093309761.png","hash":"d95ac7aaea31cd9322f5f7d8c8a704d76b7e503c","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20201202212103393.png","hash":"672bbb9ae12eaf223dfda421a62d3dec36406e3d","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201104205653611.png","hash":"df947668dea64063a150fe0a3dbcd49d696a163c","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201104210416994.png","hash":"05f625952a7a96994300c52e4444d0f670c9ac4f","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20201202210817094.png","hash":"6810630ccd02b7b68215d147c408f8769edb92c3","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20201202211752764.png","hash":"40651944aab63eda574090e4a018a8f433be12a2","modified":1629535109195},{"_id":"public/2021/08/01/outOfMemoryError/04.png","hash":"bbee74780760a53a2d4ece78fdd88b46d1592f4b","modified":1629535109195},{"_id":"public/2021/08/01/outOfMemoryError/05.png","hash":"bd8a1e8b789597121dc0ea116762c8bcf6f3e385","modified":1629535109195},{"_id":"public/2021/08/14/redis-usage-scenario/01.png","hash":"0e23b53142149c6b75e693e8d5b6eb87148897c3","modified":1629535109195},{"_id":"public/2021/08/14/redis-usage-scenario/06.png","hash":"a97a3387e2bca72ee714fd4b60201b58b2fe4ca3","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201220170713526.png","hash":"7a7f2a55b96a42ad49efa80806a9a5c9ba06a98d","modified":1629535109195},{"_id":"public/images/avatar.png","hash":"ebde5ecfd529edecfab55788e99ffcb22df93730","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20201202213757692.png","hash":"1187aa165415735ce8b7352d39fe3af5561e86d1","modified":1629535109195},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1629535109195},{"_id":"public/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1629535109195},{"_id":"public/2021/07/23/mysql-transcation/image-20201202215717524.png","hash":"6173e68d50fed251dd9a7a908823df5b5751df4c","modified":1629535109195},{"_id":"public/2021/08/01/outOfMemoryError/03.png","hash":"f6c5120f15f65e198b3d7f8f67f0b83c9fdca7b1","modified":1629535109195},{"_id":"public/2021/08/01/outOfMemoryError/06.png","hash":"c3e65cb83beb665dffdd05ab3b30ed47bd480951","modified":1629535109195},{"_id":"public/2021/07/23/mycat/image-20201104221336437.png","hash":"e8e98f07e2503e85bbcb2699b8450ffe0e108663","modified":1629535109195},{"_id":"public/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1629535109195},{"_id":"public/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1629535109195},{"_id":"public/css/style.css","hash":"3b693ce41c2e35ece4773593e94b4c17aeaee02f","modified":1629535109195},{"_id":"public/2021/07/23/nginx/image-20210606160947369.png","hash":"f3cd662ff33c0eb8bd29eea58aeb699f5e7a8a71","modified":1629535109195}],"Category":[{"name":"java","_id":"ckslj4prt0004kw3qg5cb297t"},{"name":"数据库","_id":"ckslj4prz000ckw3q6glrh82e"},{"name":"问题点","_id":"ckslj4ps6000jkw3q296v5zn4"},{"name":"面试","parent":"ckslj4prt0004kw3qg5cb297t","_id":"ckslj4ps9000pkw3qfegbbrjj"},{"name":"中间件","_id":"ckslj4pse000vkw3qhtd45kw4"},{"name":"mysql","parent":"ckslj4prz000ckw3q6glrh82e","_id":"ckslj4psg0013kw3q707kf403"},{"name":"趣味","_id":"ckslj4psh0019kw3q30rq8ddl"},{"name":"sprigCloud","parent":"ckslj4ps6000jkw3q296v5zn4","_id":"ckslj4psj001fkw3q3skad0oy"},{"name":"mvcc","parent":"ckslj4prz000ckw3q6glrh82e","_id":"ckslj4psq001okw3q5n2894mr"},{"name":"redis","parent":"ckslj4pse000vkw3qhtd45kw4","_id":"ckslj4psv002akw3q94nf6d90"},{"name":"linux","_id":"ckslj4psw002nkw3qggov4g2u"},{"name":"微服务","_id":"ckslj4psy0031kw3qe5vq7maz"},{"name":"Thread","parent":"ckslj4prt0004kw3qg5cb297t","_id":"ckslj4psz0036kw3q2vlrauui"},{"name":"自定义工具","_id":"ckslj4pt0003gkw3qge9a360r"},{"name":"nginx","parent":"ckslj4psw002nkw3qggov4g2u","_id":"ckslj4pt1003lkw3q0tnlemat"},{"name":"springboot","parent":"ckslj4psy0031kw3qe5vq7maz","_id":"ckslj4pt1003okw3qceke4s2r"},{"name":"前端","_id":"ckslj4pt5003xkw3q5kfa8x8j"},{"name":"Vue","parent":"ckslj4pt5003xkw3q5kfa8x8j","_id":"ckslj4pt60041kw3q6zuug6rh"}],"Data":[{"_id":"gallery","data":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}},{"_id":"links","data":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}],"Page":[{"title":"关于","description":"个人简介","layout":"about","comments":0,"sidebar":"custom","translate_title":"about","_content":"个人详细介绍","source":"about/index.md","raw":"---\ntitle: 关于\ndescription: 个人简介\nlayout: about\ncomments: false\nsidebar: custom\ntranslate_title: about\n---\n个人详细介绍","date":"2021-08-15T07:41:26.135Z","updated":"2021-08-15T07:41:26.135Z","path":"about/index.html","_id":"ckslj4pr80000kw3q9uir7m3e","content":"<p>个人详细介绍</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>个人详细介绍</p>\n"},{"title":"分类","layout":"categories","comments":0,"translate_title":"classification","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nlayout: categories\ncomments: false\ntranslate_title: classification\n---\n","date":"2021-08-15T07:41:26.135Z","updated":"2021-08-15T07:41:26.135Z","path":"categories/index.html","_id":"ckslj4prq0002kw3q0uy8h4sz","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"translate_title":"404-not-found-the-page-cannot-be-displayed","_content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\ntranslate_title: 404-not-found-the-page-cannot-be-displayed\n---\n<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n","date":"2021-08-15T07:41:26.076Z","updated":"2021-08-15T07:41:26.076Z","path":"/404.html","layout":"page","_id":"ckslj4pru0006kw3qcolb2l9f","content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"<%- config.url %>\" homepagename=\"回到我的主页\"></script>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"<%- config.url %>\" homepagename=\"回到我的主页\"></script>\n"},{"title":"书单","layout":"books","comments":0,"sidebar":"none","translate_title":"book-list","_content":"","source":"books/index.md","raw":"---\ntitle: 书单\nlayout: books\ncomments: false\nsidebar: none\ntranslate_title: book-list\n---\n","date":"2021-08-15T07:41:26.135Z","updated":"2021-08-15T07:41:26.135Z","path":"books/index.html","_id":"ckslj4prv0008kw3q1z4ochnl","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"友情链接","layout":"links","comments":1,"sidebar":"none","translate_title":"friendship-link","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\nlayout: links\ncomments: true\nsidebar: none\ntranslate_title: links\n---\n","date":"2021-08-15T07:41:26.135Z","updated":"2021-08-15T07:41:26.135Z","path":"links/index.html","_id":"ckslj4pry000akw3q0zfz0dah","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"Repositories","layout":"repository","comments":0,"sidebar":"none","translate_title":"repositories","_content":"\n","source":"repository/index.md","raw":"---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\ntranslate_title: repositories\n---\n\n","date":"2021-08-15T07:41:26.136Z","updated":"2021-08-15T07:41:26.136Z","path":"repository/index.html","_id":"ckslj4ps0000fkw3qb0pd2six","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"标签","layout":"tags","comments":0,"translate_title":"label","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nlayout: tags\ncomments: false\ntranslate_title: label\n---\n","date":"2021-08-15T07:41:26.136Z","updated":"2021-08-15T07:41:26.136Z","path":"tags/index.html","_id":"ckslj4ps5000hkw3qfl2ba6ok","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""}],"Post":[{"title":"ConcurrentHashMap线程安全","translate_title":"concurrenthashmap-thread-safety","comments":0,"date":"2021-07-02T08:17:29.000Z","_content":"##1. jdk1.7 ConcurrentHashMap\njdk1.7 ConcurrentHashMap是由一个Segment数组和多个HashEntry数组组成\n![image-20201210103251475](./ConcurrentHashMap/01.png)\n其实就是将HashMap分为多个小HashMap,每个Segment元素维护一个小HashMap,目的是锁分离，本来实现同步，直接可以是对整个HashMap加锁，但是加锁粒度太大，影响并发性能，所以变换成此结构，仅仅对Segment元素加锁，降低锁粒度，提高并发性能\n\n###1.1 初始化过程\n由于变换成**Segment数组+HashEntry数组**，所以初始化时，需要依次对Segment数组和HashEntry数组初始化\n1. Segment数组初始化\n   \n   初始化时，使用右移一位，乘以2的计算方式，保证ssize是2的幂次方，小于指定参数concurrencyLevel的最大2的幂次方\n    ```java\n    int sshift = 0;\n    //记录Segment数组大小\n    int ssize = 1;\n    while (ssize < concurrencyLevel) {\n        ++sshift;\n        ssize <<= 1;\n    }\n    ```\n   \n2. HashEntry数组初始化\n\n   跟Segment数组初始化方式相同\n    ```java\n    int cap = 1;\n    while(cap < c){\n        cap <<=1;\n    }\n    ```\n    \n### 1.2 put操作\n对于插入操作，需要两次Hash映射去定位数据存储位置\n1. 首先通过第一次hash过程，定位Segment位置 \n2. 然后通过第二次hash过程定位HashEntry位置\n\nSegment继承ReentrantLock,在数据插入指定HashEntry过程的时候会尝试调用ReentrantLock的tryLock方法获取锁，如果获取成功就直接插入相应位置，如果有线程获取该Segment的锁，当前线程就会以自旋方式去继续调用tryLock方法去获取锁，超过指定次数就挂起，等待唤醒。\n\n### 1.3 get操作\n    \n也是两次Hash映射，相对于put操作，少了加锁过程\n\n### 1.4 size操作\nsize操作就是计算ConcurrentHashMap的大小，有两种方案\n\n- 给每个Segment都加上锁(相当于给整个Map加上锁)，然后计算size返回\n- 不加锁的模式，尝试多次计算ConcurrentHashMap的size,最多三次，比较前后计算的结果，结果一致就认为当前没有元素加入，计算结果是准确的。(查看计算出size的前后modCount的数值有没有发生变化，modCount的值用于记录元素变化的操作。如put，remove，clear)\n\n\n## 2. jdk1.8 ConcurrentHashMap\njdk1.8ConcurrentHashMap是数组+链表，或者数组+红黑树结构,并发控制使用Synchronized关键字和CAS操作\n![jdk1.8 ConcurrentHashMap](./ConcurrentHashMap/02.png)\n\n### 2.1关键概念点\n- sizeCtl变量(volatile修饰)\n   通过CAS操作+volatile, 控制数组初始化和扩容操作\n   - -1 代表正在初始化\n   - -N 前16位记录数组容量，后16位记录扩容线程大小+1，是个负数\n   - 正数0，表示未初始化\n   - 正数，0.75*当前数组大小\n- <key,value>键值对，封装为Node对象\n- table变量(volatile)：也就是所说的数组，默认为null，默认大小为16的数组，每次扩容时大小总是2的幂次方\n- nextTable(volatile):扩容时新生成的数组，大小为table的两倍\n\n### 2.2put函数\n```java\npublic V put(K key, V value) {\n    return putVal(key, value, false);\n}\n```\n**1.putValue函数**\n首先调用spread函数，计算hash值，之后进入一个自旋循环过程，直到插入或替换成功，才会返回。如果table未被初始化，则调用initTable进行初始化。之后判断hash映射的位置是否为null,如果为null,直接通过CAS自旋操作，插入元素成功，则直接返回，如果映射的位置值为MOVED(-1),则直接去协助扩容，排除以上条件后，尝试对链头Node节点f加锁，加锁成功后，链表通过尾插遍历，进行插入或替换。红黑树通过查询遍历，进行插入或替换。之后如果当前链表节点数量大于阈值，则调用treeifyBin函数，转换为红黑树最后通过调用addCount,执行CAS操作，更新数组大小，并且判断是否需要进行扩容\n```java\nfinal V putVal(K key, V value, boolean onlyIfAbsent) {\n    if (key == null || value == null) throw new NullPointerException();\n    //spread函数计算hash值\n    int hash = spread(key.hashCode());\n    int binCount = 0;\n    //自旋过程\n    for (Node<K,V>[] tab = table;;) {\n        Node<K,V> f; int n, i, fh;\n        if (tab == null || (n = tab.length) == 0)\n            tab = initTable();\n        //判断映射位置节点是否为空\n        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {\n            if (casTabAt(tab, i, null,\n                         new Node<K,V>(hash, key, value, null)))\n                break;                  \n        }\n        //如果映射位置节点value==MOVED，说明正在进行扩容操作\n        else if ((fh = f.hash) == MOVED)\n            tab = helpTransfer(tab, f);\n        else {\n            V oldVal = null;\n            synchronized (f) {\n                if (tabAt(tab, i) == f) {\n                    if (fh >= 0) {\n                        binCount = 1;\n                        for (Node<K,V> e = f;; ++binCount) {\n                            K ek;\n                            if (e.hash == hash &&\n                                ((ek = e.key) == key ||\n                                 (ek != null && key.equals(ek)))) {\n                                oldVal = e.val;\n                                if (!onlyIfAbsent)\n                                    e.val = value;\n                                break;\n                            }\n                            Node<K,V> pred = e;\n                            if ((e = e.next) == null) {\n                                pred.next = new Node<K,V>(hash, key,\n                                                          value, null);\n                                break;\n                            }\n                        }\n                    }\n                    //红黑树结构\n                    else if (f instanceof TreeBin) {\n                        Node<K,V> p;\n                        binCount = 2;\n                        if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,\n                                                       value)) != null) {\n                            oldVal = p.val;\n                            if (!onlyIfAbsent)\n                                p.val = value;\n                        }\n                    }\n                }\n            }\n            //链表节点数量超过阈值，转为红黑树\n            if (binCount != 0) {\n                if (binCount >= TREEIFY_THRESHOLD)\n                    treeifyBin(tab, i);\n                if (oldVal != null)\n                    return oldVal;\n                break;\n            }\n        }\n    }\n    addCount(1L, binCount);\n    return null;\n}\n```\n\n**2. spread函数**\nspread函数，计算hash值。key的hash值与其高16位相异或，然后与HASH_BITS将最高位置0\n```java\nstatic final int spread(int h) {\n    return (h ^ (h >>> 16)) & HASH_BITS;\n    //HASH_BITS=0x7fffffff\n}\n```\n\n**3. tableAt函数**\n获取最新的tab[i]\n\n**4. casTabAt函数**\n通过CAS操作，将值赋值进tab中对应位置\n```java\nstatic final <K,V> Node<K,V> tabAt(Node<K,V>[] tab, int i) {\n        return (Node<K,V>)U.getObjectVolatile(tab, ((long)i << ASHIFT) + ABASE);\n}\n\nstatic final <K,V> boolean casTabAt(Node<K,V>[] tab, int i,\n                                        Node<K,V> c, Node<K,V> v) {\n        return U.compareAndSwapObject(tab, ((long)i << ASHIFT) + ABASE, c, v);\n}\n```\n**5. addCount函数**\n尝试使用CAS操作，将BASECOUNT加1，操作失败，则说明有其他线程在进行加一操作,发生冲突。之后判断是否需要扩容\n```java\nprivate final void addCount(long x, int check) {\n    CounterCell[] as; long b, s;\n    //使用CAS操作，将BASECOUNT加1\n    if ((as = counterCells) != null ||\n        !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x)) {\n        CounterCell a; long v; int m;\n        //发生冲突\n        boolean uncontended = true;\n        if (as == null || (m = as.length - 1) < 0 ||\n            (a = as[ThreadLocalRandom.getProbe() & m]) == null ||\n            !(uncontended =\n              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) {\n            //多线程冲突执行\n            fullAddCount(x, uncontended);\n            return;\n        }\n        if (check <= 1)\n            return;\n        s = sumCount();\n    }\n    if (check >= 0) {\n        Node<K,V>[] tab, nt; int n, sc;\n        //判断是否需要扩容  大于0.75当前数组大小\n        while (s >= (long)(sc = sizeCtl) && (tab = table) != null &&\n               (n = tab.length) < MAXIMUM_CAPACITY) {\n            int rs = resizeStamp(n);\n            if (sc < 0) {\n                //判断是否需要帮助扩容\n                //扩容完成，或者扩容线程达到阈值不需要进行扩容，直接break\n                if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||\n                    sc == rs + MAX_RESIZERS || (nt = nextTable) == null ||\n                    transferIndex <= 0)\n                    break;\n                //帮助扩容，扩容线程数+1\n                if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1))\n                    transfer(tab, nt);\n            }\n            //进行扩容操作\n            else if (U.compareAndSwapInt(this, SIZECTL, sc,\n                                         (rs << RESIZE_STAMP_SHIFT) + 2))\n                transfer(tab, null);\n            s = sumCount();\n        }\n    }\n}\n```\n### 2.3 initTable函数\n进入一个自旋过程，一旦有线程扩容成功，才break\n- 如果sizeCtl < 0,说明已经有线程正在扩容，所以直接让出线程。\n- 如果sizeCtl>=0,说明当前没有线程扩容，尝试CAS操作，设置sizeCtl为-1\n- 设置sizeCtl为-1成功的线程，进行扩容操作，并且将sc更新为数组负载阈值0.75*n\n```java\nprivate final Node<K,V>[] initTable() {\n    Node<K,V>[] tab; int sc;\n    //自旋过程\n    while ((tab = table) == null || tab.length == 0) {\n        if ((sc = sizeCtl) < 0)\n            Thread.yield(); \n        else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) {\n            try {\n                if ((tab = table) == null || tab.length == 0) {\n                    int n = (sc > 0) ? sc : DEFAULT_CAPACITY;\n                    @SuppressWarnings(\"unchecked\")\n                    Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n];\n                    table = tab = nt;\n                    //0.75*n\n                    sc = n - (n >>> 2);\n                }\n            } finally {\n                sizeCtl = sc;\n            }\n            break;\n        }\n    }\n    return tab;\n}\n```\n\n### 2.4 统计ConCurrentHashMap中的元素个数\n**1. mappingCount函数**\n```java\n//调用sumCount,获得元素数量\npublic long mappingCount() {\nlong n = sumCount();\nreturn (n < 0L) ? 0L : n; // ignore transient negative values\n}\n```\n\n**2. sumCount函数**\n\nbaseCount+ counterCells各个元素值，就是元素数量\n其实baseCount就是记录容器数量的，直接放回baseCount不就可以了吗？为什么sumCount()方法中还要遍历counterCells数组，累加对象的值呢？\n其中：counterCells是个全局的变量，表示的是CounterCell类数组。CounterCell是ConcurrentHashmap的内部类，它就是存储一个值。\nJDK1.8中使用一个volatile类型的变量baseCount记录元素的个数，当插入新数据put()或则删除数据remove()时，会通过addCount()方法更新baseCount\n初始化时counterCells为空，在并发量很高时，如果存在两个线程同时执行CAS修改baseCount值，则失败的线程会继续执行方法体中的逻辑，执行fullAddCount(x, uncontended)方法，这个方法其实就是初始化counterCells，并将x的值插入到counterCell类中，而x值一般也就是1或-1，这可以从put()方法中得知。\n这些对象是因为在CAS更新baseCount值时，由于高并发而导致失败，最终将值保存到CounterCell中，放到counterCells里。这也就是为什么sumCount()中需要遍历counterCells数组，sum累加CounterCell.value值了。\n```java\nfinal long sumCount() {\n    CounterCell[] as = counterCells; CounterCell a;\n    long sum = baseCount;\n        if (as != null) {\n            for (int i = 0; i < as.length; ++i) {\n                if ((a = as[i]) != null)\n                sum += a.value;\n        }\n    }\n    return sum;\n}\n```\n\n**3. CounterCell类**\n只存储一个值\n```java\nstatic final class CounterCell{\n   volatile long value;\n   CountCell(long x) {value = x;}\n}\n```\n\n\n原文链接：https://blog.csdn.net/zycxnanwang/article/details/105424734","source":"_posts/ConcurrentHashMap.md","raw":"---\ntitle: ConcurrentHashMap线程安全\ntranslate_title: concurrenthashmap-thread-safety\ntags: 面试\ncategories:\n  - java\n  - 面试\ncomments: false\ndate: 2021-07-02 16:17:29\n---\n##1. jdk1.7 ConcurrentHashMap\njdk1.7 ConcurrentHashMap是由一个Segment数组和多个HashEntry数组组成\n![image-20201210103251475](./ConcurrentHashMap/01.png)\n其实就是将HashMap分为多个小HashMap,每个Segment元素维护一个小HashMap,目的是锁分离，本来实现同步，直接可以是对整个HashMap加锁，但是加锁粒度太大，影响并发性能，所以变换成此结构，仅仅对Segment元素加锁，降低锁粒度，提高并发性能\n\n###1.1 初始化过程\n由于变换成**Segment数组+HashEntry数组**，所以初始化时，需要依次对Segment数组和HashEntry数组初始化\n1. Segment数组初始化\n   \n   初始化时，使用右移一位，乘以2的计算方式，保证ssize是2的幂次方，小于指定参数concurrencyLevel的最大2的幂次方\n    ```java\n    int sshift = 0;\n    //记录Segment数组大小\n    int ssize = 1;\n    while (ssize < concurrencyLevel) {\n        ++sshift;\n        ssize <<= 1;\n    }\n    ```\n   \n2. HashEntry数组初始化\n\n   跟Segment数组初始化方式相同\n    ```java\n    int cap = 1;\n    while(cap < c){\n        cap <<=1;\n    }\n    ```\n    \n### 1.2 put操作\n对于插入操作，需要两次Hash映射去定位数据存储位置\n1. 首先通过第一次hash过程，定位Segment位置 \n2. 然后通过第二次hash过程定位HashEntry位置\n\nSegment继承ReentrantLock,在数据插入指定HashEntry过程的时候会尝试调用ReentrantLock的tryLock方法获取锁，如果获取成功就直接插入相应位置，如果有线程获取该Segment的锁，当前线程就会以自旋方式去继续调用tryLock方法去获取锁，超过指定次数就挂起，等待唤醒。\n\n### 1.3 get操作\n    \n也是两次Hash映射，相对于put操作，少了加锁过程\n\n### 1.4 size操作\nsize操作就是计算ConcurrentHashMap的大小，有两种方案\n\n- 给每个Segment都加上锁(相当于给整个Map加上锁)，然后计算size返回\n- 不加锁的模式，尝试多次计算ConcurrentHashMap的size,最多三次，比较前后计算的结果，结果一致就认为当前没有元素加入，计算结果是准确的。(查看计算出size的前后modCount的数值有没有发生变化，modCount的值用于记录元素变化的操作。如put，remove，clear)\n\n\n## 2. jdk1.8 ConcurrentHashMap\njdk1.8ConcurrentHashMap是数组+链表，或者数组+红黑树结构,并发控制使用Synchronized关键字和CAS操作\n![jdk1.8 ConcurrentHashMap](./ConcurrentHashMap/02.png)\n\n### 2.1关键概念点\n- sizeCtl变量(volatile修饰)\n   通过CAS操作+volatile, 控制数组初始化和扩容操作\n   - -1 代表正在初始化\n   - -N 前16位记录数组容量，后16位记录扩容线程大小+1，是个负数\n   - 正数0，表示未初始化\n   - 正数，0.75*当前数组大小\n- <key,value>键值对，封装为Node对象\n- table变量(volatile)：也就是所说的数组，默认为null，默认大小为16的数组，每次扩容时大小总是2的幂次方\n- nextTable(volatile):扩容时新生成的数组，大小为table的两倍\n\n### 2.2put函数\n```java\npublic V put(K key, V value) {\n    return putVal(key, value, false);\n}\n```\n**1.putValue函数**\n首先调用spread函数，计算hash值，之后进入一个自旋循环过程，直到插入或替换成功，才会返回。如果table未被初始化，则调用initTable进行初始化。之后判断hash映射的位置是否为null,如果为null,直接通过CAS自旋操作，插入元素成功，则直接返回，如果映射的位置值为MOVED(-1),则直接去协助扩容，排除以上条件后，尝试对链头Node节点f加锁，加锁成功后，链表通过尾插遍历，进行插入或替换。红黑树通过查询遍历，进行插入或替换。之后如果当前链表节点数量大于阈值，则调用treeifyBin函数，转换为红黑树最后通过调用addCount,执行CAS操作，更新数组大小，并且判断是否需要进行扩容\n```java\nfinal V putVal(K key, V value, boolean onlyIfAbsent) {\n    if (key == null || value == null) throw new NullPointerException();\n    //spread函数计算hash值\n    int hash = spread(key.hashCode());\n    int binCount = 0;\n    //自旋过程\n    for (Node<K,V>[] tab = table;;) {\n        Node<K,V> f; int n, i, fh;\n        if (tab == null || (n = tab.length) == 0)\n            tab = initTable();\n        //判断映射位置节点是否为空\n        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {\n            if (casTabAt(tab, i, null,\n                         new Node<K,V>(hash, key, value, null)))\n                break;                  \n        }\n        //如果映射位置节点value==MOVED，说明正在进行扩容操作\n        else if ((fh = f.hash) == MOVED)\n            tab = helpTransfer(tab, f);\n        else {\n            V oldVal = null;\n            synchronized (f) {\n                if (tabAt(tab, i) == f) {\n                    if (fh >= 0) {\n                        binCount = 1;\n                        for (Node<K,V> e = f;; ++binCount) {\n                            K ek;\n                            if (e.hash == hash &&\n                                ((ek = e.key) == key ||\n                                 (ek != null && key.equals(ek)))) {\n                                oldVal = e.val;\n                                if (!onlyIfAbsent)\n                                    e.val = value;\n                                break;\n                            }\n                            Node<K,V> pred = e;\n                            if ((e = e.next) == null) {\n                                pred.next = new Node<K,V>(hash, key,\n                                                          value, null);\n                                break;\n                            }\n                        }\n                    }\n                    //红黑树结构\n                    else if (f instanceof TreeBin) {\n                        Node<K,V> p;\n                        binCount = 2;\n                        if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,\n                                                       value)) != null) {\n                            oldVal = p.val;\n                            if (!onlyIfAbsent)\n                                p.val = value;\n                        }\n                    }\n                }\n            }\n            //链表节点数量超过阈值，转为红黑树\n            if (binCount != 0) {\n                if (binCount >= TREEIFY_THRESHOLD)\n                    treeifyBin(tab, i);\n                if (oldVal != null)\n                    return oldVal;\n                break;\n            }\n        }\n    }\n    addCount(1L, binCount);\n    return null;\n}\n```\n\n**2. spread函数**\nspread函数，计算hash值。key的hash值与其高16位相异或，然后与HASH_BITS将最高位置0\n```java\nstatic final int spread(int h) {\n    return (h ^ (h >>> 16)) & HASH_BITS;\n    //HASH_BITS=0x7fffffff\n}\n```\n\n**3. tableAt函数**\n获取最新的tab[i]\n\n**4. casTabAt函数**\n通过CAS操作，将值赋值进tab中对应位置\n```java\nstatic final <K,V> Node<K,V> tabAt(Node<K,V>[] tab, int i) {\n        return (Node<K,V>)U.getObjectVolatile(tab, ((long)i << ASHIFT) + ABASE);\n}\n\nstatic final <K,V> boolean casTabAt(Node<K,V>[] tab, int i,\n                                        Node<K,V> c, Node<K,V> v) {\n        return U.compareAndSwapObject(tab, ((long)i << ASHIFT) + ABASE, c, v);\n}\n```\n**5. addCount函数**\n尝试使用CAS操作，将BASECOUNT加1，操作失败，则说明有其他线程在进行加一操作,发生冲突。之后判断是否需要扩容\n```java\nprivate final void addCount(long x, int check) {\n    CounterCell[] as; long b, s;\n    //使用CAS操作，将BASECOUNT加1\n    if ((as = counterCells) != null ||\n        !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x)) {\n        CounterCell a; long v; int m;\n        //发生冲突\n        boolean uncontended = true;\n        if (as == null || (m = as.length - 1) < 0 ||\n            (a = as[ThreadLocalRandom.getProbe() & m]) == null ||\n            !(uncontended =\n              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) {\n            //多线程冲突执行\n            fullAddCount(x, uncontended);\n            return;\n        }\n        if (check <= 1)\n            return;\n        s = sumCount();\n    }\n    if (check >= 0) {\n        Node<K,V>[] tab, nt; int n, sc;\n        //判断是否需要扩容  大于0.75当前数组大小\n        while (s >= (long)(sc = sizeCtl) && (tab = table) != null &&\n               (n = tab.length) < MAXIMUM_CAPACITY) {\n            int rs = resizeStamp(n);\n            if (sc < 0) {\n                //判断是否需要帮助扩容\n                //扩容完成，或者扩容线程达到阈值不需要进行扩容，直接break\n                if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||\n                    sc == rs + MAX_RESIZERS || (nt = nextTable) == null ||\n                    transferIndex <= 0)\n                    break;\n                //帮助扩容，扩容线程数+1\n                if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1))\n                    transfer(tab, nt);\n            }\n            //进行扩容操作\n            else if (U.compareAndSwapInt(this, SIZECTL, sc,\n                                         (rs << RESIZE_STAMP_SHIFT) + 2))\n                transfer(tab, null);\n            s = sumCount();\n        }\n    }\n}\n```\n### 2.3 initTable函数\n进入一个自旋过程，一旦有线程扩容成功，才break\n- 如果sizeCtl < 0,说明已经有线程正在扩容，所以直接让出线程。\n- 如果sizeCtl>=0,说明当前没有线程扩容，尝试CAS操作，设置sizeCtl为-1\n- 设置sizeCtl为-1成功的线程，进行扩容操作，并且将sc更新为数组负载阈值0.75*n\n```java\nprivate final Node<K,V>[] initTable() {\n    Node<K,V>[] tab; int sc;\n    //自旋过程\n    while ((tab = table) == null || tab.length == 0) {\n        if ((sc = sizeCtl) < 0)\n            Thread.yield(); \n        else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) {\n            try {\n                if ((tab = table) == null || tab.length == 0) {\n                    int n = (sc > 0) ? sc : DEFAULT_CAPACITY;\n                    @SuppressWarnings(\"unchecked\")\n                    Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n];\n                    table = tab = nt;\n                    //0.75*n\n                    sc = n - (n >>> 2);\n                }\n            } finally {\n                sizeCtl = sc;\n            }\n            break;\n        }\n    }\n    return tab;\n}\n```\n\n### 2.4 统计ConCurrentHashMap中的元素个数\n**1. mappingCount函数**\n```java\n//调用sumCount,获得元素数量\npublic long mappingCount() {\nlong n = sumCount();\nreturn (n < 0L) ? 0L : n; // ignore transient negative values\n}\n```\n\n**2. sumCount函数**\n\nbaseCount+ counterCells各个元素值，就是元素数量\n其实baseCount就是记录容器数量的，直接放回baseCount不就可以了吗？为什么sumCount()方法中还要遍历counterCells数组，累加对象的值呢？\n其中：counterCells是个全局的变量，表示的是CounterCell类数组。CounterCell是ConcurrentHashmap的内部类，它就是存储一个值。\nJDK1.8中使用一个volatile类型的变量baseCount记录元素的个数，当插入新数据put()或则删除数据remove()时，会通过addCount()方法更新baseCount\n初始化时counterCells为空，在并发量很高时，如果存在两个线程同时执行CAS修改baseCount值，则失败的线程会继续执行方法体中的逻辑，执行fullAddCount(x, uncontended)方法，这个方法其实就是初始化counterCells，并将x的值插入到counterCell类中，而x值一般也就是1或-1，这可以从put()方法中得知。\n这些对象是因为在CAS更新baseCount值时，由于高并发而导致失败，最终将值保存到CounterCell中，放到counterCells里。这也就是为什么sumCount()中需要遍历counterCells数组，sum累加CounterCell.value值了。\n```java\nfinal long sumCount() {\n    CounterCell[] as = counterCells; CounterCell a;\n    long sum = baseCount;\n        if (as != null) {\n            for (int i = 0; i < as.length; ++i) {\n                if ((a = as[i]) != null)\n                sum += a.value;\n        }\n    }\n    return sum;\n}\n```\n\n**3. CounterCell类**\n只存储一个值\n```java\nstatic final class CounterCell{\n   volatile long value;\n   CountCell(long x) {value = x;}\n}\n```\n\n\n原文链接：https://blog.csdn.net/zycxnanwang/article/details/105424734","slug":"ConcurrentHashMap","published":1,"updated":"2021-08-15T07:41:26.077Z","layout":"post","photos":[],"link":"","_id":"ckslj4prg0001kw3qa9f4f3uc","content":"<p>##1. jdk1.7 ConcurrentHashMap<br>\njdk1.7 ConcurrentHashMap是由一个Segment数组和多个HashEntry数组组成<br>\n<img src=\"/2021/07/02/ConcurrentHashMap/01.png\" alt=\"image-20201210103251475\"><br>\n其实就是将HashMap分为多个小HashMap,每个Segment元素维护一个小HashMap,目的是锁分离，本来实现同步，直接可以是对整个HashMap加锁，但是加锁粒度太大，影响并发性能，所以变换成此结构，仅仅对Segment元素加锁，降低锁粒度，提高并发性能</p>\n<p>###1.1 初始化过程<br>\n由于变换成<strong>Segment数组+HashEntry数组</strong>，所以初始化时，需要依次对Segment数组和HashEntry数组初始化</p>\n<ol>\n<li>\n<p>Segment数组初始化</p>\n<p>初始化时，使用右移一位，乘以2的计算方式，保证ssize是2的幂次方，小于指定参数concurrencyLevel的最大2的幂次方</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sshift = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//记录Segment数组大小</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ssize = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (ssize &lt; concurrencyLevel) &#123;</span><br><span class=\"line\">    ++sshift;</span><br><span class=\"line\">    ssize &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>HashEntry数组初始化</p>\n<p>跟Segment数组初始化方式相同</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> cap = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(cap &lt; c)&#123;</span><br><span class=\"line\">    cap &lt;&lt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"12-put操作\"><a class=\"markdownIt-Anchor\" href=\"#12-put操作\"></a> 1.2 put操作</h3>\n<p>对于插入操作，需要两次Hash映射去定位数据存储位置</p>\n<ol>\n<li>首先通过第一次hash过程，定位Segment位置</li>\n<li>然后通过第二次hash过程定位HashEntry位置</li>\n</ol>\n<p>Segment继承ReentrantLock,在数据插入指定HashEntry过程的时候会尝试调用ReentrantLock的tryLock方法获取锁，如果获取成功就直接插入相应位置，如果有线程获取该Segment的锁，当前线程就会以自旋方式去继续调用tryLock方法去获取锁，超过指定次数就挂起，等待唤醒。</p>\n<h3 id=\"13-get操作\"><a class=\"markdownIt-Anchor\" href=\"#13-get操作\"></a> 1.3 get操作</h3>\n<p>也是两次Hash映射，相对于put操作，少了加锁过程</p>\n<h3 id=\"14-size操作\"><a class=\"markdownIt-Anchor\" href=\"#14-size操作\"></a> 1.4 size操作</h3>\n<p>size操作就是计算ConcurrentHashMap的大小，有两种方案</p>\n<ul>\n<li>给每个Segment都加上锁(相当于给整个Map加上锁)，然后计算size返回</li>\n<li>不加锁的模式，尝试多次计算ConcurrentHashMap的size,最多三次，比较前后计算的结果，结果一致就认为当前没有元素加入，计算结果是准确的。(查看计算出size的前后modCount的数值有没有发生变化，modCount的值用于记录元素变化的操作。如put，remove，clear)</li>\n</ul>\n<h2 id=\"2-jdk18-concurrenthashmap\"><a class=\"markdownIt-Anchor\" href=\"#2-jdk18-concurrenthashmap\"></a> 2. jdk1.8 ConcurrentHashMap</h2>\n<p>jdk1.8ConcurrentHashMap是数组+链表，或者数组+红黑树结构,并发控制使用Synchronized关键字和CAS操作<br>\n<img src=\"/2021/07/02/ConcurrentHashMap/02.png\" alt=\"jdk1.8 ConcurrentHashMap\"></p>\n<h3 id=\"21关键概念点\"><a class=\"markdownIt-Anchor\" href=\"#21关键概念点\"></a> 2.1关键概念点</h3>\n<ul>\n<li>sizeCtl变量(volatile修饰)<br>\n通过CAS操作+volatile, 控制数组初始化和扩容操作\n<ul>\n<li>-1 代表正在初始化</li>\n<li>-N 前16位记录数组容量，后16位记录扩容线程大小+1，是个负数</li>\n<li>正数0，表示未初始化</li>\n<li>正数，0.75*当前数组大小</li>\n</ul>\n</li>\n<li>&lt;key,value&gt;键值对，封装为Node对象</li>\n<li>table变量(volatile)：也就是所说的数组，默认为null，默认大小为16的数组，每次扩容时大小总是2的幂次方</li>\n<li>nextTable(volatile):扩容时新生成的数组，大小为table的两倍</li>\n</ul>\n<h3 id=\"22put函数\"><a class=\"markdownIt-Anchor\" href=\"#22put函数\"></a> 2.2put函数</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(key, value, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>1.putValue函数</strong><br>\n首先调用spread函数，计算hash值，之后进入一个自旋循环过程，直到插入或替换成功，才会返回。如果table未被初始化，则调用initTable进行初始化。之后判断hash映射的位置是否为null,如果为null,直接通过CAS自旋操作，插入元素成功，则直接返回，如果映射的位置值为MOVED(-1),则直接去协助扩容，排除以上条件后，尝试对链头Node节点f加锁，加锁成功后，链表通过尾插遍历，进行插入或替换。红黑树通过查询遍历，进行插入或替换。之后如果当前链表节点数量大于阈值，则调用treeifyBin函数，转换为红黑树最后通过调用addCount,执行CAS操作，更新数组大小，并且判断是否需要进行扩容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span> || value == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    <span class=\"comment\">//spread函数计算hash值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash = spread(key.hashCode());</span><br><span class=\"line\">    <span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//自旋过程</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"keyword\">int</span> n, i, fh;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tab == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            tab = initTable();</span><br><span class=\"line\">        <span class=\"comment\">//判断映射位置节点是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i = (n - <span class=\"number\">1</span>) &amp; hash)) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (casTabAt(tab, i, <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                         <span class=\"keyword\">new</span> Node&lt;K,V&gt;(hash, key, value, <span class=\"keyword\">null</span>)))</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;                  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果映射位置节点value==MOVED，说明正在进行扩容操作</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((fh = f.hash) == MOVED)</span><br><span class=\"line\">            tab = helpTransfer(tab, f);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            V oldVal = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        binCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class=\"line\">                            K ek;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                                ((ek = e.key) == key ||</span><br><span class=\"line\">                                 (ek != <span class=\"keyword\">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class=\"line\">                                oldVal = e.val;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                    e.val = value;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            Node&lt;K,V&gt; pred = e;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((e = e.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                pred.next = <span class=\"keyword\">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class=\"line\">                                                          value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//红黑树结构</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">                        Node&lt;K,V&gt; p;</span><br><span class=\"line\">                        binCount = <span class=\"number\">2</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class=\"line\">                                                       value)) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            oldVal = p.val;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                p.val = value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//链表节点数量超过阈值，转为红黑树</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (binCount != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class=\"line\">                    treeifyBin(tab, i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (oldVal != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    addCount(<span class=\"number\">1L</span>, binCount);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. spread函数</strong><br>\nspread函数，计算hash值。key的hash值与其高16位相异或，然后与HASH_BITS将最高位置0</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">spread</span><span class=\"params\">(<span class=\"keyword\">int</span> h)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (h ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>)) &amp; HASH_BITS;</span><br><span class=\"line\">    <span class=\"comment\">//HASH_BITS=0x7fffffff</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3. tableAt函数</strong><br>\n获取最新的tab[i]</p>\n<p><strong>4. casTabAt函数</strong><br>\n通过CAS操作，将值赋值进tab中对应位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> &lt;K,V&gt; <span class=\"function\">Node&lt;K,V&gt; <span class=\"title\">tabAt</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class=\"keyword\">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> &lt;K,V&gt; <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">casTabAt</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"keyword\">int</span> i,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                        Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> U.compareAndSwapObject(tab, ((<span class=\"keyword\">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>5. addCount函数</strong><br>\n尝试使用CAS操作，将BASECOUNT加1，操作失败，则说明有其他线程在进行加一操作,发生冲突。之后判断是否需要扩容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">addCount</span><span class=\"params\">(<span class=\"keyword\">long</span> x, <span class=\"keyword\">int</span> check)</span> </span>&#123;</span><br><span class=\"line\">    CounterCell[] as; <span class=\"keyword\">long</span> b, s;</span><br><span class=\"line\">    <span class=\"comment\">//使用CAS操作，将BASECOUNT加1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((as = counterCells) != <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">        !U.compareAndSwapLong(<span class=\"keyword\">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class=\"line\">        CounterCell a; <span class=\"keyword\">long</span> v; <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">        <span class=\"comment\">//发生冲突</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> uncontended = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (as == <span class=\"keyword\">null</span> || (m = as.length - <span class=\"number\">1</span>) &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">            !(uncontended =</span><br><span class=\"line\">              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//多线程冲突执行</span></span><br><span class=\"line\">            fullAddCount(x, uncontended);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        s = sumCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (check &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt;[] tab, nt; <span class=\"keyword\">int</span> n, sc;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否需要扩容  大于0.75当前数组大小</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (s &gt;= (<span class=\"keyword\">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> rs = resizeStamp(n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sc &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断是否需要帮助扩容</span></span><br><span class=\"line\">                <span class=\"comment\">//扩容完成，或者扩容线程达到阈值不需要进行扩容，直接break</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class=\"number\">1</span> ||</span><br><span class=\"line\">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">                    transferIndex &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">//帮助扩容，扩容线程数+1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, sc + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    transfer(tab, nt);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//进行扩容操作</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc,</span><br><span class=\"line\">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class=\"number\">2</span>))</span><br><span class=\"line\">                transfer(tab, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            s = sumCount();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"23-inittable函数\"><a class=\"markdownIt-Anchor\" href=\"#23-inittable函数\"></a> 2.3 initTable函数</h3>\n<p>进入一个自旋过程，一旦有线程扩容成功，才break</p>\n<ul>\n<li>如果sizeCtl &lt; 0,说明已经有线程正在扩容，所以直接让出线程。</li>\n<li>如果sizeCtl&gt;=0,说明当前没有线程扩容，尝试CAS操作，设置sizeCtl为-1</li>\n<li>设置sizeCtl为-1成功的线程，进行扩容操作，并且将sc更新为数组负载阈值0.75*n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; <span class=\"keyword\">int</span> sc;</span><br><span class=\"line\">    <span class=\"comment\">//自旋过程</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((tab = table) == <span class=\"keyword\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((sc = sizeCtl) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            Thread.yield(); </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, -<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> n = (sc &gt; <span class=\"number\">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class=\"line\">                    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node&lt;?,?&gt;[n];</span><br><span class=\"line\">                    table = tab = nt;</span><br><span class=\"line\">                    <span class=\"comment\">//0.75*n</span></span><br><span class=\"line\">                    sc = n - (n &gt;&gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                sizeCtl = sc;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"24-统计concurrenthashmap中的元素个数\"><a class=\"markdownIt-Anchor\" href=\"#24-统计concurrenthashmap中的元素个数\"></a> 2.4 统计ConCurrentHashMap中的元素个数</h3>\n<p><strong>1. mappingCount函数</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用sumCount,获得元素数量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">mappingCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">long</span> n = sumCount();</span><br><span class=\"line\"><span class=\"keyword\">return</span> (n &lt; <span class=\"number\">0L</span>) ? <span class=\"number\">0L</span> : n; <span class=\"comment\">// ignore transient negative values</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. sumCount函数</strong></p>\n<p>baseCount+ counterCells各个元素值，就是元素数量<br>\n其实baseCount就是记录容器数量的，直接放回baseCount不就可以了吗？为什么sumCount()方法中还要遍历counterCells数组，累加对象的值呢？<br>\n其中：counterCells是个全局的变量，表示的是CounterCell类数组。CounterCell是ConcurrentHashmap的内部类，它就是存储一个值。<br>\nJDK1.8中使用一个volatile类型的变量baseCount记录元素的个数，当插入新数据put()或则删除数据remove()时，会通过addCount()方法更新baseCount<br>\n初始化时counterCells为空，在并发量很高时，如果存在两个线程同时执行CAS修改baseCount值，则失败的线程会继续执行方法体中的逻辑，执行fullAddCount(x, uncontended)方法，这个方法其实就是初始化counterCells，并将x的值插入到counterCell类中，而x值一般也就是1或-1，这可以从put()方法中得知。<br>\n这些对象是因为在CAS更新baseCount值时，由于高并发而导致失败，最终将值保存到CounterCell中，放到counterCells里。这也就是为什么sumCount()中需要遍历counterCells数组，sum累加CounterCell.value值了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">long</span> <span class=\"title\">sumCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    CounterCell[] as = counterCells; CounterCell a;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> sum = baseCount;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (as != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((a = as[i]) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                sum += a.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3. CounterCell类</strong><br>\n只存储一个值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CounterCell</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> value;</span><br><span class=\"line\">   CountCell(<span class=\"keyword\">long</span> x) &#123;value = x;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原文链接：<a href=\"https://blog.csdn.net/zycxnanwang/article/details/105424734\">https://blog.csdn.net/zycxnanwang/article/details/105424734</a></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>##1. jdk1.7 ConcurrentHashMap<br>\njdk1.7 ConcurrentHashMap是由一个Segment数组和多个HashEntry数组组成<br>\n<img src=\"/2021/07/02/ConcurrentHashMap/01.png\" alt=\"image-20201210103251475\"><br>\n其实就是将HashMap分为多个小HashMap,每个Segment元素维护一个小HashMap,目的是锁分离，本来实现同步，直接可以是对整个HashMap加锁，但是加锁粒度太大，影响并发性能，所以变换成此结构，仅仅对Segment元素加锁，降低锁粒度，提高并发性能</p>\n<p>###1.1 初始化过程<br>\n由于变换成<strong>Segment数组+HashEntry数组</strong>，所以初始化时，需要依次对Segment数组和HashEntry数组初始化</p>\n<ol>\n<li>\n<p>Segment数组初始化</p>\n<p>初始化时，使用右移一位，乘以2的计算方式，保证ssize是2的幂次方，小于指定参数concurrencyLevel的最大2的幂次方</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sshift = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//记录Segment数组大小</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ssize = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (ssize &lt; concurrencyLevel) &#123;</span><br><span class=\"line\">    ++sshift;</span><br><span class=\"line\">    ssize &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>HashEntry数组初始化</p>\n<p>跟Segment数组初始化方式相同</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> cap = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(cap &lt; c)&#123;</span><br><span class=\"line\">    cap &lt;&lt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"12-put操作\"><a class=\"markdownIt-Anchor\" href=\"#12-put操作\"></a> 1.2 put操作</h3>\n<p>对于插入操作，需要两次Hash映射去定位数据存储位置</p>\n<ol>\n<li>首先通过第一次hash过程，定位Segment位置</li>\n<li>然后通过第二次hash过程定位HashEntry位置</li>\n</ol>\n<p>Segment继承ReentrantLock,在数据插入指定HashEntry过程的时候会尝试调用ReentrantLock的tryLock方法获取锁，如果获取成功就直接插入相应位置，如果有线程获取该Segment的锁，当前线程就会以自旋方式去继续调用tryLock方法去获取锁，超过指定次数就挂起，等待唤醒。</p>\n<h3 id=\"13-get操作\"><a class=\"markdownIt-Anchor\" href=\"#13-get操作\"></a> 1.3 get操作</h3>\n<p>也是两次Hash映射，相对于put操作，少了加锁过程</p>\n<h3 id=\"14-size操作\"><a class=\"markdownIt-Anchor\" href=\"#14-size操作\"></a> 1.4 size操作</h3>\n<p>size操作就是计算ConcurrentHashMap的大小，有两种方案</p>\n<ul>\n<li>给每个Segment都加上锁(相当于给整个Map加上锁)，然后计算size返回</li>\n<li>不加锁的模式，尝试多次计算ConcurrentHashMap的size,最多三次，比较前后计算的结果，结果一致就认为当前没有元素加入，计算结果是准确的。(查看计算出size的前后modCount的数值有没有发生变化，modCount的值用于记录元素变化的操作。如put，remove，clear)</li>\n</ul>\n<h2 id=\"2-jdk18-concurrenthashmap\"><a class=\"markdownIt-Anchor\" href=\"#2-jdk18-concurrenthashmap\"></a> 2. jdk1.8 ConcurrentHashMap</h2>\n<p>jdk1.8ConcurrentHashMap是数组+链表，或者数组+红黑树结构,并发控制使用Synchronized关键字和CAS操作<br>\n<img src=\"/2021/07/02/ConcurrentHashMap/02.png\" alt=\"jdk1.8 ConcurrentHashMap\"></p>\n<h3 id=\"21关键概念点\"><a class=\"markdownIt-Anchor\" href=\"#21关键概念点\"></a> 2.1关键概念点</h3>\n<ul>\n<li>sizeCtl变量(volatile修饰)<br>\n通过CAS操作+volatile, 控制数组初始化和扩容操作\n<ul>\n<li>-1 代表正在初始化</li>\n<li>-N 前16位记录数组容量，后16位记录扩容线程大小+1，是个负数</li>\n<li>正数0，表示未初始化</li>\n<li>正数，0.75*当前数组大小</li>\n</ul>\n</li>\n<li>&lt;key,value&gt;键值对，封装为Node对象</li>\n<li>table变量(volatile)：也就是所说的数组，默认为null，默认大小为16的数组，每次扩容时大小总是2的幂次方</li>\n<li>nextTable(volatile):扩容时新生成的数组，大小为table的两倍</li>\n</ul>\n<h3 id=\"22put函数\"><a class=\"markdownIt-Anchor\" href=\"#22put函数\"></a> 2.2put函数</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(key, value, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>1.putValue函数</strong><br>\n首先调用spread函数，计算hash值，之后进入一个自旋循环过程，直到插入或替换成功，才会返回。如果table未被初始化，则调用initTable进行初始化。之后判断hash映射的位置是否为null,如果为null,直接通过CAS自旋操作，插入元素成功，则直接返回，如果映射的位置值为MOVED(-1),则直接去协助扩容，排除以上条件后，尝试对链头Node节点f加锁，加锁成功后，链表通过尾插遍历，进行插入或替换。红黑树通过查询遍历，进行插入或替换。之后如果当前链表节点数量大于阈值，则调用treeifyBin函数，转换为红黑树最后通过调用addCount,执行CAS操作，更新数组大小，并且判断是否需要进行扩容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span> || value == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    <span class=\"comment\">//spread函数计算hash值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash = spread(key.hashCode());</span><br><span class=\"line\">    <span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//自旋过程</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"keyword\">int</span> n, i, fh;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tab == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            tab = initTable();</span><br><span class=\"line\">        <span class=\"comment\">//判断映射位置节点是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i = (n - <span class=\"number\">1</span>) &amp; hash)) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (casTabAt(tab, i, <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                         <span class=\"keyword\">new</span> Node&lt;K,V&gt;(hash, key, value, <span class=\"keyword\">null</span>)))</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;                  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果映射位置节点value==MOVED，说明正在进行扩容操作</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((fh = f.hash) == MOVED)</span><br><span class=\"line\">            tab = helpTransfer(tab, f);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            V oldVal = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        binCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class=\"line\">                            K ek;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                                ((ek = e.key) == key ||</span><br><span class=\"line\">                                 (ek != <span class=\"keyword\">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class=\"line\">                                oldVal = e.val;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                    e.val = value;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            Node&lt;K,V&gt; pred = e;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((e = e.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                pred.next = <span class=\"keyword\">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class=\"line\">                                                          value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//红黑树结构</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">                        Node&lt;K,V&gt; p;</span><br><span class=\"line\">                        binCount = <span class=\"number\">2</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class=\"line\">                                                       value)) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            oldVal = p.val;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                p.val = value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//链表节点数量超过阈值，转为红黑树</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (binCount != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class=\"line\">                    treeifyBin(tab, i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (oldVal != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    addCount(<span class=\"number\">1L</span>, binCount);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. spread函数</strong><br>\nspread函数，计算hash值。key的hash值与其高16位相异或，然后与HASH_BITS将最高位置0</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">spread</span><span class=\"params\">(<span class=\"keyword\">int</span> h)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (h ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>)) &amp; HASH_BITS;</span><br><span class=\"line\">    <span class=\"comment\">//HASH_BITS=0x7fffffff</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3. tableAt函数</strong><br>\n获取最新的tab[i]</p>\n<p><strong>4. casTabAt函数</strong><br>\n通过CAS操作，将值赋值进tab中对应位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> &lt;K,V&gt; <span class=\"function\">Node&lt;K,V&gt; <span class=\"title\">tabAt</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class=\"keyword\">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> &lt;K,V&gt; <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">casTabAt</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"keyword\">int</span> i,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                        Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> U.compareAndSwapObject(tab, ((<span class=\"keyword\">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>5. addCount函数</strong><br>\n尝试使用CAS操作，将BASECOUNT加1，操作失败，则说明有其他线程在进行加一操作,发生冲突。之后判断是否需要扩容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">addCount</span><span class=\"params\">(<span class=\"keyword\">long</span> x, <span class=\"keyword\">int</span> check)</span> </span>&#123;</span><br><span class=\"line\">    CounterCell[] as; <span class=\"keyword\">long</span> b, s;</span><br><span class=\"line\">    <span class=\"comment\">//使用CAS操作，将BASECOUNT加1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((as = counterCells) != <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">        !U.compareAndSwapLong(<span class=\"keyword\">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class=\"line\">        CounterCell a; <span class=\"keyword\">long</span> v; <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">        <span class=\"comment\">//发生冲突</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> uncontended = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (as == <span class=\"keyword\">null</span> || (m = as.length - <span class=\"number\">1</span>) &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">            !(uncontended =</span><br><span class=\"line\">              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//多线程冲突执行</span></span><br><span class=\"line\">            fullAddCount(x, uncontended);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        s = sumCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (check &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt;[] tab, nt; <span class=\"keyword\">int</span> n, sc;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否需要扩容  大于0.75当前数组大小</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (s &gt;= (<span class=\"keyword\">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> rs = resizeStamp(n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sc &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断是否需要帮助扩容</span></span><br><span class=\"line\">                <span class=\"comment\">//扩容完成，或者扩容线程达到阈值不需要进行扩容，直接break</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class=\"number\">1</span> ||</span><br><span class=\"line\">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">                    transferIndex &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">//帮助扩容，扩容线程数+1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, sc + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    transfer(tab, nt);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//进行扩容操作</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc,</span><br><span class=\"line\">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class=\"number\">2</span>))</span><br><span class=\"line\">                transfer(tab, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            s = sumCount();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"23-inittable函数\"><a class=\"markdownIt-Anchor\" href=\"#23-inittable函数\"></a> 2.3 initTable函数</h3>\n<p>进入一个自旋过程，一旦有线程扩容成功，才break</p>\n<ul>\n<li>如果sizeCtl &lt; 0,说明已经有线程正在扩容，所以直接让出线程。</li>\n<li>如果sizeCtl&gt;=0,说明当前没有线程扩容，尝试CAS操作，设置sizeCtl为-1</li>\n<li>设置sizeCtl为-1成功的线程，进行扩容操作，并且将sc更新为数组负载阈值0.75*n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; <span class=\"keyword\">int</span> sc;</span><br><span class=\"line\">    <span class=\"comment\">//自旋过程</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((tab = table) == <span class=\"keyword\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((sc = sizeCtl) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            Thread.yield(); </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"keyword\">this</span>, SIZECTL, sc, -<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> n = (sc &gt; <span class=\"number\">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class=\"line\">                    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node&lt;?,?&gt;[n];</span><br><span class=\"line\">                    table = tab = nt;</span><br><span class=\"line\">                    <span class=\"comment\">//0.75*n</span></span><br><span class=\"line\">                    sc = n - (n &gt;&gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                sizeCtl = sc;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"24-统计concurrenthashmap中的元素个数\"><a class=\"markdownIt-Anchor\" href=\"#24-统计concurrenthashmap中的元素个数\"></a> 2.4 统计ConCurrentHashMap中的元素个数</h3>\n<p><strong>1. mappingCount函数</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用sumCount,获得元素数量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">mappingCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">long</span> n = sumCount();</span><br><span class=\"line\"><span class=\"keyword\">return</span> (n &lt; <span class=\"number\">0L</span>) ? <span class=\"number\">0L</span> : n; <span class=\"comment\">// ignore transient negative values</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. sumCount函数</strong></p>\n<p>baseCount+ counterCells各个元素值，就是元素数量<br>\n其实baseCount就是记录容器数量的，直接放回baseCount不就可以了吗？为什么sumCount()方法中还要遍历counterCells数组，累加对象的值呢？<br>\n其中：counterCells是个全局的变量，表示的是CounterCell类数组。CounterCell是ConcurrentHashmap的内部类，它就是存储一个值。<br>\nJDK1.8中使用一个volatile类型的变量baseCount记录元素的个数，当插入新数据put()或则删除数据remove()时，会通过addCount()方法更新baseCount<br>\n初始化时counterCells为空，在并发量很高时，如果存在两个线程同时执行CAS修改baseCount值，则失败的线程会继续执行方法体中的逻辑，执行fullAddCount(x, uncontended)方法，这个方法其实就是初始化counterCells，并将x的值插入到counterCell类中，而x值一般也就是1或-1，这可以从put()方法中得知。<br>\n这些对象是因为在CAS更新baseCount值时，由于高并发而导致失败，最终将值保存到CounterCell中，放到counterCells里。这也就是为什么sumCount()中需要遍历counterCells数组，sum累加CounterCell.value值了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">long</span> <span class=\"title\">sumCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    CounterCell[] as = counterCells; CounterCell a;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> sum = baseCount;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (as != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((a = as[i]) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                sum += a.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3. CounterCell类</strong><br>\n只存储一个值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CounterCell</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> value;</span><br><span class=\"line\">   CountCell(<span class=\"keyword\">long</span> x) &#123;value = x;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原文链接：<a href=\"https://blog.csdn.net/zycxnanwang/article/details/105424734\">https://blog.csdn.net/zycxnanwang/article/details/105424734</a></p>\n"},{"title":"ElasticSearch安装","comments":0,"translate_title":"elasticsearch-installation","date":"2021-07-23T05:41:24.000Z","_content":"## 1. JDK14安装\n\n1. 下载jdk14：  https://jdk.java.net/14/\n\n2. 将文件存放在linux系统某文件夹内\n\n3. 解压\n\n    ```shell\n     tar -zxvf openjdk-14.0.2_linux-x64_bin.tar.gz\n    ```\n\n4. 配置环境变量\n\n    ```shell\n    vim /etc/profile\n    ##在文件最末尾添加，其中JAVA_HOME是jdk解压后的文件路径\n    JAVA_HOME=/usr/lib/tools/jdk-14.0.2\n    PATH=$JAVA_HOME/bin:$PATH\n    CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar\n    export PATH JAVA_HOME CLASSPATH\n    ```\n\n5. 保存后，更新配置文件\n\n    ```shell\n    source /etc/profile\n    ```\n\n6. 查看JDK是否配置完成\n\n    ```shell\n    java -version\n    ```\n\n   出现下图表示安装成功！\n\n   ![image-20200806170145844](./ElasticSearch/image-20200806170145844.png)\n\n\n\n## 2. ElasticSearch安装\n\n1. 解压tar.gz包\n\n    ```shell\n    tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz\n    ```\n\n2. 添加elasticsearch用户\n\n    ```shell\n    useradd elastic\n    ```\n\n3. 赋予elastic search操作文件夹的权限\n\n    ```shell\n    chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*\n    ```\n\n4. 查看本机的hostname\n\n    ```shell\n    hostname\n    #localhost.localdomain\n    ```\n\n5. 修改elastic search配置\n\n    ```shell\n    cd ./elasticsearch-7.8.0/config\n   vim elasticsearch.yml\n    ```\n\n   **elasticsearch.yml**\n\n    ```yml\n      # ======================== Elasticsearch Configuration =========================\n      #\n      # NOTE: Elasticsearch comes with reasonable defaults for most settings.\n      #       Before you set out to tweak and tune the configuration, make sure you\n      #       understand what are you trying to accomplish and the consequences.\n      #\n      # The primary way of configuring a node is via this file. This template lists\n      # the most important settings you may want to configure for a production cluster.\n      #\n      # Please consult the documentation for further information on configuration options:\n      # https://www.elastic.co/guide/en/elasticsearch/reference/index.html\n      #\n      # ---------------------------------- Cluster -----------------------------------\n      #\n      # Use a descriptive name for your cluster:\n      #集群名称，默认可以不修改，此处 xiaoyuge\n      cluster.name: xiaoyuge\n      # ------------------------------------ Node ------------------------------------\n      #\n      # Use a descriptive name for the node:\n      #节点名称，必须修改 ，默认修改为当前机器名称，若是多实例则需要区分\n      node.name: xiaoyuge-local1\n      #\n      # Add custom attributes to the node:\n      #\n      #node.attr.rack: r1\n      #\n      # ----------------------------------- Paths ------------------------------------\n      #\n      # Path to directory where to store the data (separate multiple locations by comma):\n      ##数据目录与日志目录，默认在当前运行程序下，生产环境需要指定\n      #path.data: /path/to/data\n      #\n      # Path to log files:\n      #\n      #path.logs: /path/to/logs\n      #\n      # ----------------------------------- Memory -----------------------------------\n      #\n      # Lock the memory on startup:\n      #内存交换锁定，此处需要操作系统设置才生效\n      #bootstrap.memory_lock: true\n      #\n      # Make sure that the heap size is set to about half the memory available\n      # on the system and that the owner of the process is allowed to use this\n      # limit.\n      #\n      # Elasticsearch performs poorly when the system is swapping the memory.\n      #\n      # ---------------------------------- Network -----------------------------------\n      #\n      # Set the bind address to a specific IP (IPv4 or IPv6):\n      #IP 地址，默认是 local，仅限本机访问，外网不可访问，设置 0.0.0.0 通用做法\n      network.host: 192.168.135.111\n      #\n      # Set a custom port for HTTP:\n      #访问端口，默认 9200，9300，建议明确指定\n      http.port: 9200\n      transport.port: 9300\n      #\n      # For more information, consult the network module documentation.\n      #\n      # --------------------------------- Discovery ----------------------------------\n      #\n      # Pass an initial list of hosts to perform discovery when this node is started:\n      # The default list of hosts is [\"127.0.0.1\", \"[::1]\"]\n      ## 集群发现配置\n      discovery.seed_hosts: [\"192.168.135.111:9300\"]\n      #\n      # Bootstrap the cluster using an initial set of master-eligible nodes:\n      #\n      cluster.initial_master_nodes: [\"192.168.135.111:9300\"]\n      #\n      # For more information, consult the discovery and cluster formation module documentation.\n      #\n      # ---------------------------------- Gateway -----------------------------------\n      #\n      # Block initial recovery after a full cluster restart until N nodes are started:\n      #\n      #gateway.recover_after_nodes: 3\n      #\n      # For more information, consult the gateway module documentation.\n      #\n      # ---------------------------------- Various -----------------------------------\n      #\n      # Require explicit names when deleting indices:\n      ##防止批量删除索引\n      action.destructive_requires_name: true\n      #设置密码\n      xpack.security.enabled: true\n      xpack.license.self_generated.type: trial\n      xpack.security.transport.ssl.enabled: true\n      http.cors.enabled: true\n      http.cors.allow-origin: \"*\"\n      http.cors.allow-headers: Authorization\n    ```\n\n6. 切换为elastic search用户，然后启动elastic search\n\n    ```shell\n    su elastic\t\t\t#切换用户\n    ./bin/elasticsearch -d      #后台启动\n    ```\n\n7. 设置密码\n\n    ```shell\n      ./bin/elasticsearch-setup-passwords interactive\n\n      #执行设置用户名和密码的命令,这里需要为4个用户分别设置密码，elastic, kibana, logstash_system,beats_system\n      Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.\n      You will be prompted to enter passwords as the process progresses.\n      Please confirm that you would like to continue [y/N]y\n      Enter password for [elastic]:\n      passwords must be at least [6] characters long\n      Try again.\n      Enter password for [elastic]:\n      Reenter password for [elastic]:\n      Passwords do not match.\n      Try again.\n      Enter password for [elastic]:\n      Reenter password for [elastic]:\n      Enter password for [kibana]:\n      Reenter password for [kibana]:\n      Enter password for [logstash_system]:\n      Reenter password for [logstash_system]:\n      Enter password for [beats_system]:\n      Reenter password for [beats_system]:\n      Changed password for user [kibana]\n      Changed password for user [logstash_system]\n      Changed password for user [beats_system]\n      Changed password for user [elastic]\n    ```\n\n\n**常见异常：**\n\n```shell\n    #java.lang.RuntimeException: can not run elasticsearch as root\n    #切换为elastic search用户，不能用root项目启动\n  \n   su elastic\n```\n\n```shell\n   #Exception in thread \"main\" java.nio.file.AccessDeniedException: /usr/lib/tools/elasticsearch-7.8.0/config/elasticsearch.keystore\n   #elastic search用户没有操作该文件夹的权限\n  \n   su root\n   chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*\n   ```\n\n```shell\n    ERROR: [2] bootstrap checks failed\n    [1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]\n    [2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\n   \n    #分配内存不够\n    #1. 修改 /etc/security/limits.conf\n    sudo vi /etc/security/limits.conf\n    #在文件末尾加上\n    * soft nofile 65536\n    * hard nofile 65536\n    * soft nproc 4096\n    * hard nproc 4096\n    #2. 修改 /etc/sysctl.conf\n    sudo vi /etc/sysctl.conf\n    #在文件末尾增加\n    vm.max_map_count=262144\n    #3. 配置重新生效\n    sysctl -p\n```\n  \n**效果如下：**\n\n![image-20200807093208470](./ElasticSearch/image-20200807093208470.png)\n\n## 3. Kibana安装\n\n1. 解压文件\n\n    ```shell\n    tar -zxvf kibana-7.8.0-linux-x86_64.tar.gz\n    ```\n\n2. 修改配置文件\n\n    ```shell\n    vim ./config/kibana.yml\n    ```\n\n   **kibana.yml:**\n\n    ```yml\n      # Kibana is served by a back end server. This setting specifies the port to use.\n      ##访问端口，默认无需修改\n      server.port: 5601\n      \n      # Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.\n      # The default is 'localhost', which usually means remote machines will not be able to connect.\n      # To allow connections from remote users, set this parameter to a non-loopback address.\n      #访问地址 IP，默认本地 ;如果需要外网访问，则配置0.0.0.0\n      server.host: \"0.0.0.0\"\n      \n      # Enables you to specify a path to mount Kibana at if you are running behind a proxy.\n      # Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath\n      # from requests it receives, and to prevent a deprecation warning at startup.\n      # This setting cannot end in a slash.\n      #server.basePath: \"\"\n      \n      # Specifies whether Kibana should rewrite requests that are prefixed with\n      # `server.basePath` or require that they are rewritten by your reverse proxy.\n      # This setting was effectively always `false` before Kibana 6.3 and will\n      # default to `true` starting in Kibana 7.0.\n      #server.rewriteBasePath: false\n      \n      # The maximum payload size in bytes for incoming server requests.\n      #server.maxPayloadBytes: 1048576\n      \n      # The Kibana server's name.  This is used for display purposes.\n      #server.name: \"your-hostname\"\n      \n      # The URLs of the Elasticsearch instances to use for all your queries.\n      # ES 服务指向，集群下配置多个\n      elasticsearch.hosts: [\"http://192.168.135.111:9200\"]\n      \n      # When this setting's value is true Kibana uses the hostname specified in the server.host\n      # setting. When the value of this setting is false, Kibana uses the hostname of the host\n      # that connects to this Kibana instance.\n      #elasticsearch.preserveHost: true\n      \n      # Kibana uses an index in Elasticsearch to store saved searches, visualizations and\n      # dashboards. Kibana creates a new index if the index doesn't already exist.\n      # Kibana 元数据存储索引名字，默认.kibana 无需修改\n      #kibana.index: \".kibana\"\n      \n      # The default application to load.\n      #kibana.defaultAppId: \"home\"\n      \n      # If your Elasticsearch is protected with basic authentication, these settings provide\n      # the username and password that the Kibana server uses to perform maintenance on the Kibana\n    ```\n\n3. 启动\n\n    ```shell\n    # 当前窗口内启动\n    ./bin/kibana# \n   #后台进程启动\n   nohup ./bin/kibana &\n    ```\n\n   **效果如下**\n\n   ![image-20200807093309761](./ElasticSearch/image-20200807093309761.png)\n\n**遇见问题：**\n\n- root启动报错![image-20201211095101816](./ElasticSearch/image-20201211095101816.png)\n\n    ```shell\n    #切换到elastic账户\n    su xiaoyuge\n    ```\n- elastic用户权限不足 **Babel could not write cache to file: /usr/share/kibana/optimize/.babel_register_cache.json**![image-20201211095258901](./ElasticSearch/image-20201211095258901.png)\n\n    ```shell\n    #切换到root用户\n    su root \n    #赋予elastic账户 xiaoyuge操作权限\n    chown -R xiaoyuge /usr/local/kibana-7.7.1-linux-x86_64\n    #切换为elastic账户\n    su xiaoyuge\n    #再次启动即可\n    ```\n\n    ","source":"_posts/ElasticSearch.md","raw":"---\ntitle: ElasticSearch安装\ntags: 'ELK'\ncomments: false\ntranslate_title: elasticsearch-installation\ndate: 2021-07-23 13:41:24\n---\n## 1. JDK14安装\n\n1. 下载jdk14：  https://jdk.java.net/14/\n\n2. 将文件存放在linux系统某文件夹内\n\n3. 解压\n\n    ```shell\n     tar -zxvf openjdk-14.0.2_linux-x64_bin.tar.gz\n    ```\n\n4. 配置环境变量\n\n    ```shell\n    vim /etc/profile\n    ##在文件最末尾添加，其中JAVA_HOME是jdk解压后的文件路径\n    JAVA_HOME=/usr/lib/tools/jdk-14.0.2\n    PATH=$JAVA_HOME/bin:$PATH\n    CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar\n    export PATH JAVA_HOME CLASSPATH\n    ```\n\n5. 保存后，更新配置文件\n\n    ```shell\n    source /etc/profile\n    ```\n\n6. 查看JDK是否配置完成\n\n    ```shell\n    java -version\n    ```\n\n   出现下图表示安装成功！\n\n   ![image-20200806170145844](./ElasticSearch/image-20200806170145844.png)\n\n\n\n## 2. ElasticSearch安装\n\n1. 解压tar.gz包\n\n    ```shell\n    tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz\n    ```\n\n2. 添加elasticsearch用户\n\n    ```shell\n    useradd elastic\n    ```\n\n3. 赋予elastic search操作文件夹的权限\n\n    ```shell\n    chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*\n    ```\n\n4. 查看本机的hostname\n\n    ```shell\n    hostname\n    #localhost.localdomain\n    ```\n\n5. 修改elastic search配置\n\n    ```shell\n    cd ./elasticsearch-7.8.0/config\n   vim elasticsearch.yml\n    ```\n\n   **elasticsearch.yml**\n\n    ```yml\n      # ======================== Elasticsearch Configuration =========================\n      #\n      # NOTE: Elasticsearch comes with reasonable defaults for most settings.\n      #       Before you set out to tweak and tune the configuration, make sure you\n      #       understand what are you trying to accomplish and the consequences.\n      #\n      # The primary way of configuring a node is via this file. This template lists\n      # the most important settings you may want to configure for a production cluster.\n      #\n      # Please consult the documentation for further information on configuration options:\n      # https://www.elastic.co/guide/en/elasticsearch/reference/index.html\n      #\n      # ---------------------------------- Cluster -----------------------------------\n      #\n      # Use a descriptive name for your cluster:\n      #集群名称，默认可以不修改，此处 xiaoyuge\n      cluster.name: xiaoyuge\n      # ------------------------------------ Node ------------------------------------\n      #\n      # Use a descriptive name for the node:\n      #节点名称，必须修改 ，默认修改为当前机器名称，若是多实例则需要区分\n      node.name: xiaoyuge-local1\n      #\n      # Add custom attributes to the node:\n      #\n      #node.attr.rack: r1\n      #\n      # ----------------------------------- Paths ------------------------------------\n      #\n      # Path to directory where to store the data (separate multiple locations by comma):\n      ##数据目录与日志目录，默认在当前运行程序下，生产环境需要指定\n      #path.data: /path/to/data\n      #\n      # Path to log files:\n      #\n      #path.logs: /path/to/logs\n      #\n      # ----------------------------------- Memory -----------------------------------\n      #\n      # Lock the memory on startup:\n      #内存交换锁定，此处需要操作系统设置才生效\n      #bootstrap.memory_lock: true\n      #\n      # Make sure that the heap size is set to about half the memory available\n      # on the system and that the owner of the process is allowed to use this\n      # limit.\n      #\n      # Elasticsearch performs poorly when the system is swapping the memory.\n      #\n      # ---------------------------------- Network -----------------------------------\n      #\n      # Set the bind address to a specific IP (IPv4 or IPv6):\n      #IP 地址，默认是 local，仅限本机访问，外网不可访问，设置 0.0.0.0 通用做法\n      network.host: 192.168.135.111\n      #\n      # Set a custom port for HTTP:\n      #访问端口，默认 9200，9300，建议明确指定\n      http.port: 9200\n      transport.port: 9300\n      #\n      # For more information, consult the network module documentation.\n      #\n      # --------------------------------- Discovery ----------------------------------\n      #\n      # Pass an initial list of hosts to perform discovery when this node is started:\n      # The default list of hosts is [\"127.0.0.1\", \"[::1]\"]\n      ## 集群发现配置\n      discovery.seed_hosts: [\"192.168.135.111:9300\"]\n      #\n      # Bootstrap the cluster using an initial set of master-eligible nodes:\n      #\n      cluster.initial_master_nodes: [\"192.168.135.111:9300\"]\n      #\n      # For more information, consult the discovery and cluster formation module documentation.\n      #\n      # ---------------------------------- Gateway -----------------------------------\n      #\n      # Block initial recovery after a full cluster restart until N nodes are started:\n      #\n      #gateway.recover_after_nodes: 3\n      #\n      # For more information, consult the gateway module documentation.\n      #\n      # ---------------------------------- Various -----------------------------------\n      #\n      # Require explicit names when deleting indices:\n      ##防止批量删除索引\n      action.destructive_requires_name: true\n      #设置密码\n      xpack.security.enabled: true\n      xpack.license.self_generated.type: trial\n      xpack.security.transport.ssl.enabled: true\n      http.cors.enabled: true\n      http.cors.allow-origin: \"*\"\n      http.cors.allow-headers: Authorization\n    ```\n\n6. 切换为elastic search用户，然后启动elastic search\n\n    ```shell\n    su elastic\t\t\t#切换用户\n    ./bin/elasticsearch -d      #后台启动\n    ```\n\n7. 设置密码\n\n    ```shell\n      ./bin/elasticsearch-setup-passwords interactive\n\n      #执行设置用户名和密码的命令,这里需要为4个用户分别设置密码，elastic, kibana, logstash_system,beats_system\n      Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.\n      You will be prompted to enter passwords as the process progresses.\n      Please confirm that you would like to continue [y/N]y\n      Enter password for [elastic]:\n      passwords must be at least [6] characters long\n      Try again.\n      Enter password for [elastic]:\n      Reenter password for [elastic]:\n      Passwords do not match.\n      Try again.\n      Enter password for [elastic]:\n      Reenter password for [elastic]:\n      Enter password for [kibana]:\n      Reenter password for [kibana]:\n      Enter password for [logstash_system]:\n      Reenter password for [logstash_system]:\n      Enter password for [beats_system]:\n      Reenter password for [beats_system]:\n      Changed password for user [kibana]\n      Changed password for user [logstash_system]\n      Changed password for user [beats_system]\n      Changed password for user [elastic]\n    ```\n\n\n**常见异常：**\n\n```shell\n    #java.lang.RuntimeException: can not run elasticsearch as root\n    #切换为elastic search用户，不能用root项目启动\n  \n   su elastic\n```\n\n```shell\n   #Exception in thread \"main\" java.nio.file.AccessDeniedException: /usr/lib/tools/elasticsearch-7.8.0/config/elasticsearch.keystore\n   #elastic search用户没有操作该文件夹的权限\n  \n   su root\n   chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*\n   ```\n\n```shell\n    ERROR: [2] bootstrap checks failed\n    [1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]\n    [2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\n   \n    #分配内存不够\n    #1. 修改 /etc/security/limits.conf\n    sudo vi /etc/security/limits.conf\n    #在文件末尾加上\n    * soft nofile 65536\n    * hard nofile 65536\n    * soft nproc 4096\n    * hard nproc 4096\n    #2. 修改 /etc/sysctl.conf\n    sudo vi /etc/sysctl.conf\n    #在文件末尾增加\n    vm.max_map_count=262144\n    #3. 配置重新生效\n    sysctl -p\n```\n  \n**效果如下：**\n\n![image-20200807093208470](./ElasticSearch/image-20200807093208470.png)\n\n## 3. Kibana安装\n\n1. 解压文件\n\n    ```shell\n    tar -zxvf kibana-7.8.0-linux-x86_64.tar.gz\n    ```\n\n2. 修改配置文件\n\n    ```shell\n    vim ./config/kibana.yml\n    ```\n\n   **kibana.yml:**\n\n    ```yml\n      # Kibana is served by a back end server. This setting specifies the port to use.\n      ##访问端口，默认无需修改\n      server.port: 5601\n      \n      # Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.\n      # The default is 'localhost', which usually means remote machines will not be able to connect.\n      # To allow connections from remote users, set this parameter to a non-loopback address.\n      #访问地址 IP，默认本地 ;如果需要外网访问，则配置0.0.0.0\n      server.host: \"0.0.0.0\"\n      \n      # Enables you to specify a path to mount Kibana at if you are running behind a proxy.\n      # Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath\n      # from requests it receives, and to prevent a deprecation warning at startup.\n      # This setting cannot end in a slash.\n      #server.basePath: \"\"\n      \n      # Specifies whether Kibana should rewrite requests that are prefixed with\n      # `server.basePath` or require that they are rewritten by your reverse proxy.\n      # This setting was effectively always `false` before Kibana 6.3 and will\n      # default to `true` starting in Kibana 7.0.\n      #server.rewriteBasePath: false\n      \n      # The maximum payload size in bytes for incoming server requests.\n      #server.maxPayloadBytes: 1048576\n      \n      # The Kibana server's name.  This is used for display purposes.\n      #server.name: \"your-hostname\"\n      \n      # The URLs of the Elasticsearch instances to use for all your queries.\n      # ES 服务指向，集群下配置多个\n      elasticsearch.hosts: [\"http://192.168.135.111:9200\"]\n      \n      # When this setting's value is true Kibana uses the hostname specified in the server.host\n      # setting. When the value of this setting is false, Kibana uses the hostname of the host\n      # that connects to this Kibana instance.\n      #elasticsearch.preserveHost: true\n      \n      # Kibana uses an index in Elasticsearch to store saved searches, visualizations and\n      # dashboards. Kibana creates a new index if the index doesn't already exist.\n      # Kibana 元数据存储索引名字，默认.kibana 无需修改\n      #kibana.index: \".kibana\"\n      \n      # The default application to load.\n      #kibana.defaultAppId: \"home\"\n      \n      # If your Elasticsearch is protected with basic authentication, these settings provide\n      # the username and password that the Kibana server uses to perform maintenance on the Kibana\n    ```\n\n3. 启动\n\n    ```shell\n    # 当前窗口内启动\n    ./bin/kibana# \n   #后台进程启动\n   nohup ./bin/kibana &\n    ```\n\n   **效果如下**\n\n   ![image-20200807093309761](./ElasticSearch/image-20200807093309761.png)\n\n**遇见问题：**\n\n- root启动报错![image-20201211095101816](./ElasticSearch/image-20201211095101816.png)\n\n    ```shell\n    #切换到elastic账户\n    su xiaoyuge\n    ```\n- elastic用户权限不足 **Babel could not write cache to file: /usr/share/kibana/optimize/.babel_register_cache.json**![image-20201211095258901](./ElasticSearch/image-20201211095258901.png)\n\n    ```shell\n    #切换到root用户\n    su root \n    #赋予elastic账户 xiaoyuge操作权限\n    chown -R xiaoyuge /usr/local/kibana-7.7.1-linux-x86_64\n    #切换为elastic账户\n    su xiaoyuge\n    #再次启动即可\n    ```\n\n    ","slug":"ElasticSearch","published":1,"updated":"2021-08-15T07:41:26.078Z","layout":"post","photos":[],"link":"","_id":"ckslj4prr0003kw3qhkd99ih9","content":"<h2 id=\"1-jdk14安装\"><a class=\"markdownIt-Anchor\" href=\"#1-jdk14安装\"></a> 1. JDK14安装</h2>\n<ol>\n<li>\n<p>下载jdk14：  <a href=\"https://jdk.java.net/14/\">https://jdk.java.net/14/</a></p>\n</li>\n<li>\n<p>将文件存放在linux系统某文件夹内</p>\n</li>\n<li>\n<p>解压</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf openjdk-14.0.2_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>配置环境变量</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#在文件最末尾添加，其中JAVA_HOME是jdk解压后的文件路径</span></span></span><br><span class=\"line\">JAVA_HOME=/usr/lib/tools/jdk-14.0.2</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>保存后，更新配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>查看JDK是否配置完成</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<p>出现下图表示安装成功！</p>\n<p><img src=\"/2021/07/23/ElasticSearch/image-20200806170145844.png\" alt=\"image-20200806170145844\"></p>\n</li>\n</ol>\n<h2 id=\"2-elasticsearch安装\"><a class=\"markdownIt-Anchor\" href=\"#2-elasticsearch安装\"></a> 2. ElasticSearch安装</h2>\n<ol>\n<li>\n<p>解压tar.gz包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>添加elasticsearch用户</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd elastic</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>赋予elastic search操作文件夹的权限</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>查看本机的hostname</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostname</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">localhost.localdomain</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改elastic search配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> cd ./elasticsearch-7.8.0/config</span><br><span class=\"line\">vim elasticsearch.yml</span><br></pre></td></tr></table></figure>\n<p><strong>elasticsearch.yml</strong></p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ======================== Elasticsearch Configuration =========================</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Elasticsearch comes with reasonable defaults for most settings.</span></span><br><span class=\"line\"><span class=\"comment\">#       Before you set out to tweak and tune the configuration, make sure you</span></span><br><span class=\"line\"><span class=\"comment\">#       understand what are you trying to accomplish and the consequences.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The primary way of configuring a node is via this file. This template lists</span></span><br><span class=\"line\"><span class=\"comment\"># the most important settings you may want to configure for a production cluster.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Please consult the documentation for further information on configuration options:</span></span><br><span class=\"line\"><span class=\"comment\"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Cluster -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Use a descriptive name for your cluster:</span></span><br><span class=\"line\"><span class=\"comment\">#集群名称，默认可以不修改，此处 xiaoyuge</span></span><br><span class=\"line\"><span class=\"attr\">cluster.name:</span> <span class=\"string\">xiaoyuge</span></span><br><span class=\"line\"><span class=\"comment\"># ------------------------------------ Node ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Use a descriptive name for the node:</span></span><br><span class=\"line\"><span class=\"comment\">#节点名称，必须修改 ，默认修改为当前机器名称，若是多实例则需要区分</span></span><br><span class=\"line\"><span class=\"attr\">node.name:</span> <span class=\"string\">xiaoyuge-local1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Add custom attributes to the node:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#node.attr.rack: r1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------------- Paths ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Path to directory where to store the data (separate multiple locations by comma):</span></span><br><span class=\"line\"><span class=\"comment\">##数据目录与日志目录，默认在当前运行程序下，生产环境需要指定</span></span><br><span class=\"line\"><span class=\"comment\">#path.data: /path/to/data</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Path to log files:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#path.logs: /path/to/logs</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------------- Memory -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Lock the memory on startup:</span></span><br><span class=\"line\"><span class=\"comment\">#内存交换锁定，此处需要操作系统设置才生效</span></span><br><span class=\"line\"><span class=\"comment\">#bootstrap.memory_lock: true</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure that the heap size is set to about half the memory available</span></span><br><span class=\"line\"><span class=\"comment\"># on the system and that the owner of the process is allowed to use this</span></span><br><span class=\"line\"><span class=\"comment\"># limit.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Elasticsearch performs poorly when the system is swapping the memory.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Network -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set the bind address to a specific IP (IPv4 or IPv6):</span></span><br><span class=\"line\"><span class=\"comment\">#IP 地址，默认是 local，仅限本机访问，外网不可访问，设置 0.0.0.0 通用做法</span></span><br><span class=\"line\"><span class=\"attr\">network.host:</span> <span class=\"number\">192.168</span><span class=\"number\">.135</span><span class=\"number\">.111</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set a custom port for HTTP:</span></span><br><span class=\"line\"><span class=\"comment\">#访问端口，默认 9200，9300，建议明确指定</span></span><br><span class=\"line\"><span class=\"attr\">http.port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"><span class=\"attr\">transport.port:</span> <span class=\"number\">9300</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the network module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># --------------------------------- Discovery ----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Pass an initial list of hosts to perform discovery when this node is started:</span></span><br><span class=\"line\"><span class=\"comment\"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">## 集群发现配置</span></span><br><span class=\"line\"><span class=\"attr\">discovery.seed_hosts:</span> [<span class=\"string\">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Bootstrap the cluster using an initial set of master-eligible nodes:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">cluster.initial_master_nodes:</span> [<span class=\"string\">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the discovery and cluster formation module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Gateway -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Block initial recovery after a full cluster restart until N nodes are started:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#gateway.recover_after_nodes: 3</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the gateway module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Various -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Require explicit names when deleting indices:</span></span><br><span class=\"line\"><span class=\"comment\">##防止批量删除索引</span></span><br><span class=\"line\"><span class=\"attr\">action.destructive_requires_name:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">#设置密码</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.license.self_generated.type:</span> <span class=\"string\">trial</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-origin:</span> <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-headers:</span> <span class=\"string\">Authorization</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>切换为elastic search用户，然后启动elastic search</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su elastic\t\t\t#切换用户</span><br><span class=\"line\">./bin/elasticsearch -d      #后台启动</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>设置密码</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/elasticsearch-setup-passwords interactive</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">执行设置用户名和密码的命令,这里需要为4个用户分别设置密码，elastic, kibana, logstash_system,beats_system</span></span><br><span class=\"line\">Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.</span><br><span class=\"line\">You will be prompted to enter passwords as the process progresses.</span><br><span class=\"line\">Please confirm that you would like to continue [y/N]y</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">passwords must be at least [6] characters long</span><br><span class=\"line\">Try again.</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">Reenter password for [elastic]:</span><br><span class=\"line\">Passwords do not match.</span><br><span class=\"line\">Try again.</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">Reenter password for [elastic]:</span><br><span class=\"line\">Enter password for [kibana]:</span><br><span class=\"line\">Reenter password for [kibana]:</span><br><span class=\"line\">Enter password for [logstash_system]:</span><br><span class=\"line\">Reenter password for [logstash_system]:</span><br><span class=\"line\">Enter password for [beats_system]:</span><br><span class=\"line\">Reenter password for [beats_system]:</span><br><span class=\"line\">Changed password for user [kibana]</span><br><span class=\"line\">Changed password for user [logstash_system]</span><br><span class=\"line\">Changed password for user [beats_system]</span><br><span class=\"line\">Changed password for user [elastic]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>常见异常：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">java.lang.RuntimeException: can not run elasticsearch as root</span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">切换为elastic search用户，不能用root项目启动</span></span><br><span class=\"line\">  </span><br><span class=\"line\">su elastic</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;main&quot;</span> java.nio.file.AccessDeniedException: /usr/lib/tools/elasticsearch-7.8.0/config/elasticsearch.keystore</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">elastic search用户没有操作该文件夹的权限</span></span><br><span class=\"line\">  </span><br><span class=\"line\">su root</span><br><span class=\"line\">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: [2] bootstrap checks failed</span><br><span class=\"line\">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</span><br><span class=\"line\">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">分配内存不够</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1. 修改 /etc/security/limits.conf</span></span><br><span class=\"line\">sudo vi /etc/security/limits.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在文件末尾加上</span></span><br><span class=\"line\">* soft nofile 65536</span><br><span class=\"line\">* hard nofile 65536</span><br><span class=\"line\">* soft nproc 4096</span><br><span class=\"line\">* hard nproc 4096</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2. 修改 /etc/sysctl.conf</span></span><br><span class=\"line\">sudo vi /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在文件末尾增加</span></span><br><span class=\"line\">vm.max_map_count=262144</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3. 配置重新生效</span></span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n<p><strong>效果如下：</strong></p>\n<p><img src=\"/2021/07/23/ElasticSearch/image-20200807093208470.png\" alt=\"image-20200807093208470\"></p>\n<h2 id=\"3-kibana安装\"><a class=\"markdownIt-Anchor\" href=\"#3-kibana安装\"></a> 3. Kibana安装</h2>\n<ol>\n<li>\n<p>解压文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf kibana-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ./config/kibana.yml</span><br></pre></td></tr></table></figure>\n<p><strong>kibana.yml:</strong></p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Kibana is served by a back end server. This setting specifies the port to use.</span></span><br><span class=\"line\"><span class=\"comment\">##访问端口，默认无需修改</span></span><br><span class=\"line\"><span class=\"attr\">server.port:</span> <span class=\"number\">5601</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span></span><br><span class=\"line\"><span class=\"comment\"># The default is &#x27;localhost&#x27;, which usually means remote machines will not be able to connect.</span></span><br><span class=\"line\"><span class=\"comment\"># To allow connections from remote users, set this parameter to a non-loopback address.</span></span><br><span class=\"line\"><span class=\"comment\">#访问地址 IP，默认本地 ;如果需要外网访问，则配置0.0.0.0</span></span><br><span class=\"line\"><span class=\"attr\">server.host:</span> <span class=\"string\">&quot;0.0.0.0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enables you to specify a path to mount Kibana at if you are running behind a proxy.</span></span><br><span class=\"line\"><span class=\"comment\"># Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath</span></span><br><span class=\"line\"><span class=\"comment\"># from requests it receives, and to prevent a deprecation warning at startup.</span></span><br><span class=\"line\"><span class=\"comment\"># This setting cannot end in a slash.</span></span><br><span class=\"line\"><span class=\"comment\">#server.basePath: &quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Specifies whether Kibana should rewrite requests that are prefixed with</span></span><br><span class=\"line\"><span class=\"comment\"># `server.basePath` or require that they are rewritten by your reverse proxy.</span></span><br><span class=\"line\"><span class=\"comment\"># This setting was effectively always `false` before Kibana 6.3 and will</span></span><br><span class=\"line\"><span class=\"comment\"># default to `true` starting in Kibana 7.0.</span></span><br><span class=\"line\"><span class=\"comment\">#server.rewriteBasePath: false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The maximum payload size in bytes for incoming server requests.</span></span><br><span class=\"line\"><span class=\"comment\">#server.maxPayloadBytes: 1048576</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Kibana server&#x27;s name.  This is used for display purposes.</span></span><br><span class=\"line\"><span class=\"comment\">#server.name: &quot;your-hostname&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The URLs of the Elasticsearch instances to use for all your queries.</span></span><br><span class=\"line\"><span class=\"comment\"># ES 服务指向，集群下配置多个</span></span><br><span class=\"line\"><span class=\"attr\">elasticsearch.hosts:</span> [<span class=\"string\">&quot;http://192.168.135.111:9200&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># When this setting&#x27;s value is true Kibana uses the hostname specified in the server.host</span></span><br><span class=\"line\"><span class=\"comment\"># setting. When the value of this setting is false, Kibana uses the hostname of the host</span></span><br><span class=\"line\"><span class=\"comment\"># that connects to this Kibana instance.</span></span><br><span class=\"line\"><span class=\"comment\">#elasticsearch.preserveHost: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Kibana uses an index in Elasticsearch to store saved searches, visualizations and</span></span><br><span class=\"line\"><span class=\"comment\"># dashboards. Kibana creates a new index if the index doesn&#x27;t already exist.</span></span><br><span class=\"line\"><span class=\"comment\"># Kibana 元数据存储索引名字，默认.kibana 无需修改</span></span><br><span class=\"line\"><span class=\"comment\">#kibana.index: &quot;.kibana&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The default application to load.</span></span><br><span class=\"line\"><span class=\"comment\">#kibana.defaultAppId: &quot;home&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If your Elasticsearch is protected with basic authentication, these settings provide</span></span><br><span class=\"line\"><span class=\"comment\"># the username and password that the Kibana server uses to perform maintenance on the Kibana</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>启动</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 当前窗口内启动</span></span><br><span class=\"line\"> ./bin/kibana# </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">后台进程启动</span></span><br><span class=\"line\">nohup ./bin/kibana &amp;</span><br></pre></td></tr></table></figure>\n<p><strong>效果如下</strong></p>\n<p><img src=\"/2021/07/23/ElasticSearch/image-20200807093309761.png\" alt=\"image-20200807093309761\"></p>\n</li>\n</ol>\n<p><strong>遇见问题：</strong></p>\n<ul>\n<li>\n<p>root启动报错<img src=\"/2021/07/23/ElasticSearch/image-20201211095101816.png\" alt=\"image-20201211095101816\"></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换到elastic账户</span></span><br><span class=\"line\">su xiaoyuge</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>elastic用户权限不足 <strong>Babel could not write cache to file: /usr/share/kibana/optimize/.babel_register_cache.json</strong><img src=\"/2021/07/23/ElasticSearch/image-20201211095258901.png\" alt=\"image-20201211095258901\"></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换到root用户</span></span><br><span class=\"line\">su root </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">赋予elastic账户 xiaoyuge操作权限</span></span><br><span class=\"line\">chown -R xiaoyuge /usr/local/kibana-7.7.1-linux-x86_64</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换为elastic账户</span></span><br><span class=\"line\">su xiaoyuge</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再次启动即可</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1-jdk14安装\"><a class=\"markdownIt-Anchor\" href=\"#1-jdk14安装\"></a> 1. JDK14安装</h2>\n<ol>\n<li>\n<p>下载jdk14：  <a href=\"https://jdk.java.net/14/\">https://jdk.java.net/14/</a></p>\n</li>\n<li>\n<p>将文件存放在linux系统某文件夹内</p>\n</li>\n<li>\n<p>解压</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf openjdk-14.0.2_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>配置环境变量</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#在文件最末尾添加，其中JAVA_HOME是jdk解压后的文件路径</span></span></span><br><span class=\"line\">JAVA_HOME=/usr/lib/tools/jdk-14.0.2</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>保存后，更新配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>查看JDK是否配置完成</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<p>出现下图表示安装成功！</p>\n<p><img src=\"/2021/07/23/ElasticSearch/image-20200806170145844.png\" alt=\"image-20200806170145844\"></p>\n</li>\n</ol>\n<h2 id=\"2-elasticsearch安装\"><a class=\"markdownIt-Anchor\" href=\"#2-elasticsearch安装\"></a> 2. ElasticSearch安装</h2>\n<ol>\n<li>\n<p>解压tar.gz包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>添加elasticsearch用户</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd elastic</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>赋予elastic search操作文件夹的权限</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>查看本机的hostname</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostname</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">localhost.localdomain</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改elastic search配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> cd ./elasticsearch-7.8.0/config</span><br><span class=\"line\">vim elasticsearch.yml</span><br></pre></td></tr></table></figure>\n<p><strong>elasticsearch.yml</strong></p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ======================== Elasticsearch Configuration =========================</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Elasticsearch comes with reasonable defaults for most settings.</span></span><br><span class=\"line\"><span class=\"comment\">#       Before you set out to tweak and tune the configuration, make sure you</span></span><br><span class=\"line\"><span class=\"comment\">#       understand what are you trying to accomplish and the consequences.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># The primary way of configuring a node is via this file. This template lists</span></span><br><span class=\"line\"><span class=\"comment\"># the most important settings you may want to configure for a production cluster.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Please consult the documentation for further information on configuration options:</span></span><br><span class=\"line\"><span class=\"comment\"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Cluster -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Use a descriptive name for your cluster:</span></span><br><span class=\"line\"><span class=\"comment\">#集群名称，默认可以不修改，此处 xiaoyuge</span></span><br><span class=\"line\"><span class=\"attr\">cluster.name:</span> <span class=\"string\">xiaoyuge</span></span><br><span class=\"line\"><span class=\"comment\"># ------------------------------------ Node ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Use a descriptive name for the node:</span></span><br><span class=\"line\"><span class=\"comment\">#节点名称，必须修改 ，默认修改为当前机器名称，若是多实例则需要区分</span></span><br><span class=\"line\"><span class=\"attr\">node.name:</span> <span class=\"string\">xiaoyuge-local1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Add custom attributes to the node:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#node.attr.rack: r1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------------- Paths ------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Path to directory where to store the data (separate multiple locations by comma):</span></span><br><span class=\"line\"><span class=\"comment\">##数据目录与日志目录，默认在当前运行程序下，生产环境需要指定</span></span><br><span class=\"line\"><span class=\"comment\">#path.data: /path/to/data</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Path to log files:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#path.logs: /path/to/logs</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------------- Memory -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Lock the memory on startup:</span></span><br><span class=\"line\"><span class=\"comment\">#内存交换锁定，此处需要操作系统设置才生效</span></span><br><span class=\"line\"><span class=\"comment\">#bootstrap.memory_lock: true</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Make sure that the heap size is set to about half the memory available</span></span><br><span class=\"line\"><span class=\"comment\"># on the system and that the owner of the process is allowed to use this</span></span><br><span class=\"line\"><span class=\"comment\"># limit.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Elasticsearch performs poorly when the system is swapping the memory.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Network -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set the bind address to a specific IP (IPv4 or IPv6):</span></span><br><span class=\"line\"><span class=\"comment\">#IP 地址，默认是 local，仅限本机访问，外网不可访问，设置 0.0.0.0 通用做法</span></span><br><span class=\"line\"><span class=\"attr\">network.host:</span> <span class=\"number\">192.168</span><span class=\"number\">.135</span><span class=\"number\">.111</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Set a custom port for HTTP:</span></span><br><span class=\"line\"><span class=\"comment\">#访问端口，默认 9200，9300，建议明确指定</span></span><br><span class=\"line\"><span class=\"attr\">http.port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\"><span class=\"attr\">transport.port:</span> <span class=\"number\">9300</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the network module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># --------------------------------- Discovery ----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Pass an initial list of hosts to perform discovery when this node is started:</span></span><br><span class=\"line\"><span class=\"comment\"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">## 集群发现配置</span></span><br><span class=\"line\"><span class=\"attr\">discovery.seed_hosts:</span> [<span class=\"string\">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Bootstrap the cluster using an initial set of master-eligible nodes:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">cluster.initial_master_nodes:</span> [<span class=\"string\">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the discovery and cluster formation module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Gateway -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Block initial recovery after a full cluster restart until N nodes are started:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#gateway.recover_after_nodes: 3</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, consult the gateway module documentation.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------- Various -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Require explicit names when deleting indices:</span></span><br><span class=\"line\"><span class=\"comment\">##防止批量删除索引</span></span><br><span class=\"line\"><span class=\"attr\">action.destructive_requires_name:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">#设置密码</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.license.self_generated.type:</span> <span class=\"string\">trial</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-origin:</span> <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-headers:</span> <span class=\"string\">Authorization</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>切换为elastic search用户，然后启动elastic search</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su elastic\t\t\t#切换用户</span><br><span class=\"line\">./bin/elasticsearch -d      #后台启动</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>设置密码</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/elasticsearch-setup-passwords interactive</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">执行设置用户名和密码的命令,这里需要为4个用户分别设置密码，elastic, kibana, logstash_system,beats_system</span></span><br><span class=\"line\">Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.</span><br><span class=\"line\">You will be prompted to enter passwords as the process progresses.</span><br><span class=\"line\">Please confirm that you would like to continue [y/N]y</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">passwords must be at least [6] characters long</span><br><span class=\"line\">Try again.</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">Reenter password for [elastic]:</span><br><span class=\"line\">Passwords do not match.</span><br><span class=\"line\">Try again.</span><br><span class=\"line\">Enter password for [elastic]:</span><br><span class=\"line\">Reenter password for [elastic]:</span><br><span class=\"line\">Enter password for [kibana]:</span><br><span class=\"line\">Reenter password for [kibana]:</span><br><span class=\"line\">Enter password for [logstash_system]:</span><br><span class=\"line\">Reenter password for [logstash_system]:</span><br><span class=\"line\">Enter password for [beats_system]:</span><br><span class=\"line\">Reenter password for [beats_system]:</span><br><span class=\"line\">Changed password for user [kibana]</span><br><span class=\"line\">Changed password for user [logstash_system]</span><br><span class=\"line\">Changed password for user [beats_system]</span><br><span class=\"line\">Changed password for user [elastic]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>常见异常：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">java.lang.RuntimeException: can not run elasticsearch as root</span></span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\">切换为elastic search用户，不能用root项目启动</span></span><br><span class=\"line\">  </span><br><span class=\"line\">su elastic</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;main&quot;</span> java.nio.file.AccessDeniedException: /usr/lib/tools/elasticsearch-7.8.0/config/elasticsearch.keystore</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">elastic search用户没有操作该文件夹的权限</span></span><br><span class=\"line\">  </span><br><span class=\"line\">su root</span><br><span class=\"line\">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: [2] bootstrap checks failed</span><br><span class=\"line\">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</span><br><span class=\"line\">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">分配内存不够</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1. 修改 /etc/security/limits.conf</span></span><br><span class=\"line\">sudo vi /etc/security/limits.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在文件末尾加上</span></span><br><span class=\"line\">* soft nofile 65536</span><br><span class=\"line\">* hard nofile 65536</span><br><span class=\"line\">* soft nproc 4096</span><br><span class=\"line\">* hard nproc 4096</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2. 修改 /etc/sysctl.conf</span></span><br><span class=\"line\">sudo vi /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在文件末尾增加</span></span><br><span class=\"line\">vm.max_map_count=262144</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3. 配置重新生效</span></span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n<p><strong>效果如下：</strong></p>\n<p><img src=\"/2021/07/23/ElasticSearch/image-20200807093208470.png\" alt=\"image-20200807093208470\"></p>\n<h2 id=\"3-kibana安装\"><a class=\"markdownIt-Anchor\" href=\"#3-kibana安装\"></a> 3. Kibana安装</h2>\n<ol>\n<li>\n<p>解压文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf kibana-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改配置文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ./config/kibana.yml</span><br></pre></td></tr></table></figure>\n<p><strong>kibana.yml:</strong></p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Kibana is served by a back end server. This setting specifies the port to use.</span></span><br><span class=\"line\"><span class=\"comment\">##访问端口，默认无需修改</span></span><br><span class=\"line\"><span class=\"attr\">server.port:</span> <span class=\"number\">5601</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span></span><br><span class=\"line\"><span class=\"comment\"># The default is &#x27;localhost&#x27;, which usually means remote machines will not be able to connect.</span></span><br><span class=\"line\"><span class=\"comment\"># To allow connections from remote users, set this parameter to a non-loopback address.</span></span><br><span class=\"line\"><span class=\"comment\">#访问地址 IP，默认本地 ;如果需要外网访问，则配置0.0.0.0</span></span><br><span class=\"line\"><span class=\"attr\">server.host:</span> <span class=\"string\">&quot;0.0.0.0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enables you to specify a path to mount Kibana at if you are running behind a proxy.</span></span><br><span class=\"line\"><span class=\"comment\"># Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath</span></span><br><span class=\"line\"><span class=\"comment\"># from requests it receives, and to prevent a deprecation warning at startup.</span></span><br><span class=\"line\"><span class=\"comment\"># This setting cannot end in a slash.</span></span><br><span class=\"line\"><span class=\"comment\">#server.basePath: &quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Specifies whether Kibana should rewrite requests that are prefixed with</span></span><br><span class=\"line\"><span class=\"comment\"># `server.basePath` or require that they are rewritten by your reverse proxy.</span></span><br><span class=\"line\"><span class=\"comment\"># This setting was effectively always `false` before Kibana 6.3 and will</span></span><br><span class=\"line\"><span class=\"comment\"># default to `true` starting in Kibana 7.0.</span></span><br><span class=\"line\"><span class=\"comment\">#server.rewriteBasePath: false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The maximum payload size in bytes for incoming server requests.</span></span><br><span class=\"line\"><span class=\"comment\">#server.maxPayloadBytes: 1048576</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The Kibana server&#x27;s name.  This is used for display purposes.</span></span><br><span class=\"line\"><span class=\"comment\">#server.name: &quot;your-hostname&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The URLs of the Elasticsearch instances to use for all your queries.</span></span><br><span class=\"line\"><span class=\"comment\"># ES 服务指向，集群下配置多个</span></span><br><span class=\"line\"><span class=\"attr\">elasticsearch.hosts:</span> [<span class=\"string\">&quot;http://192.168.135.111:9200&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># When this setting&#x27;s value is true Kibana uses the hostname specified in the server.host</span></span><br><span class=\"line\"><span class=\"comment\"># setting. When the value of this setting is false, Kibana uses the hostname of the host</span></span><br><span class=\"line\"><span class=\"comment\"># that connects to this Kibana instance.</span></span><br><span class=\"line\"><span class=\"comment\">#elasticsearch.preserveHost: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Kibana uses an index in Elasticsearch to store saved searches, visualizations and</span></span><br><span class=\"line\"><span class=\"comment\"># dashboards. Kibana creates a new index if the index doesn&#x27;t already exist.</span></span><br><span class=\"line\"><span class=\"comment\"># Kibana 元数据存储索引名字，默认.kibana 无需修改</span></span><br><span class=\"line\"><span class=\"comment\">#kibana.index: &quot;.kibana&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The default application to load.</span></span><br><span class=\"line\"><span class=\"comment\">#kibana.defaultAppId: &quot;home&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If your Elasticsearch is protected with basic authentication, these settings provide</span></span><br><span class=\"line\"><span class=\"comment\"># the username and password that the Kibana server uses to perform maintenance on the Kibana</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>启动</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 当前窗口内启动</span></span><br><span class=\"line\"> ./bin/kibana# </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">后台进程启动</span></span><br><span class=\"line\">nohup ./bin/kibana &amp;</span><br></pre></td></tr></table></figure>\n<p><strong>效果如下</strong></p>\n<p><img src=\"/2021/07/23/ElasticSearch/image-20200807093309761.png\" alt=\"image-20200807093309761\"></p>\n</li>\n</ol>\n<p><strong>遇见问题：</strong></p>\n<ul>\n<li>\n<p>root启动报错<img src=\"/2021/07/23/ElasticSearch/image-20201211095101816.png\" alt=\"image-20201211095101816\"></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换到elastic账户</span></span><br><span class=\"line\">su xiaoyuge</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>elastic用户权限不足 <strong>Babel could not write cache to file: /usr/share/kibana/optimize/.babel_register_cache.json</strong><img src=\"/2021/07/23/ElasticSearch/image-20201211095258901.png\" alt=\"image-20201211095258901\"></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换到root用户</span></span><br><span class=\"line\">su root </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">赋予elastic账户 xiaoyuge操作权限</span></span><br><span class=\"line\">chown -R xiaoyuge /usr/local/kibana-7.7.1-linux-x86_64</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换为elastic账户</span></span><br><span class=\"line\">su xiaoyuge</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再次启动即可</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"","date":"2021-08-19T14:54:43.000Z","comments":0,"translate_title":"","_content":"","source":"_posts/algorithm.md","raw":"---\ntitle:    \ndate: 2021-08-19 22:54:43\ntags: algorithm\ncategories:\n    - 数据库\n    - mysql\ncomments: false\ntranslate_title: mysql-transaction\n---\n","slug":"algorithm","published":1,"updated":"2021-08-19T14:55:55.637Z","layout":"post","photos":[],"link":"","_id":"ckslj4pru0007kw3q23lrchpy","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"springCloud之FeignClient访问微服务接口缓慢","translate_title":"feignclient-of-springcloud-is-slow-to-access-the-microservice-interface","comments":0,"date":"2021-07-03T09:08:10.000Z","_content":"### 问题描述\n逻辑是A服务调用B服务(AB在同一个局域网内)。 经过反复测试，有一个访问缓慢的现象，具体表现为：\n程序启动第一次访问初始化1.2秒左右，还可以理解。\n但后面访问还是要1.1秒左右（格式化到SSS毫秒打印日志监控的）。\n但如果连续访问几次，后面几次又是几十毫秒。过一会再访问，或者换浏览器换post工具请求，又会1.2秒左右。\n\n### 原因排查1\n查看连接查实的接口\n![请求缓慢2](./bug-sprigCloud/02.png)\n发现接口调用的是这个地址，其实是别人启动项目的时候吧自己的ip注册到了eureka注册中心，导致接口有时候走的是getway，有时候又是走的别人的接口\n\n解决方法：eureka.client.register-with-eureka 为false  这样就不会注册到eureka注册中心了\n### 原因排查2\n1. 查看日志\n    ![请求缓慢](./bug-sprigCloud/01.png)\n查看是否是hystrix 配置的时间小于了ribbon的时间\n\n\n\n","source":"_posts/bug-sprigCloud.md","raw":"---\ntitle: springCloud之FeignClient访问微服务接口缓慢\ntranslate_title: feignclient-of-springcloud-is-slow-to-access-the-microservice-interface\ntags: 问题点\ncategories:\n  - 问题点\n  - sprigCloud\ncomments: false\ndate: 2021-07-03 17:08:10\n---\n### 问题描述\n逻辑是A服务调用B服务(AB在同一个局域网内)。 经过反复测试，有一个访问缓慢的现象，具体表现为：\n程序启动第一次访问初始化1.2秒左右，还可以理解。\n但后面访问还是要1.1秒左右（格式化到SSS毫秒打印日志监控的）。\n但如果连续访问几次，后面几次又是几十毫秒。过一会再访问，或者换浏览器换post工具请求，又会1.2秒左右。\n\n### 原因排查1\n查看连接查实的接口\n![请求缓慢2](./bug-sprigCloud/02.png)\n发现接口调用的是这个地址，其实是别人启动项目的时候吧自己的ip注册到了eureka注册中心，导致接口有时候走的是getway，有时候又是走的别人的接口\n\n解决方法：eureka.client.register-with-eureka 为false  这样就不会注册到eureka注册中心了\n### 原因排查2\n1. 查看日志\n    ![请求缓慢](./bug-sprigCloud/01.png)\n查看是否是hystrix 配置的时间小于了ribbon的时间\n\n\n\n","slug":"bug-sprigCloud","published":1,"updated":"2021-08-18T14:55:31.843Z","layout":"post","photos":[],"link":"","_id":"ckslj4prw0009kw3qbnjd86hl","content":"<h3 id=\"问题描述\"><a class=\"markdownIt-Anchor\" href=\"#问题描述\"></a> 问题描述</h3>\n<p>逻辑是A服务调用B服务(AB在同一个局域网内)。 经过反复测试，有一个访问缓慢的现象，具体表现为：<br>\n程序启动第一次访问初始化1.2秒左右，还可以理解。<br>\n但后面访问还是要1.1秒左右（格式化到SSS毫秒打印日志监控的）。<br>\n但如果连续访问几次，后面几次又是几十毫秒。过一会再访问，或者换浏览器换post工具请求，又会1.2秒左右。</p>\n<h3 id=\"原因排查1\"><a class=\"markdownIt-Anchor\" href=\"#原因排查1\"></a> 原因排查1</h3>\n<p>查看连接查实的接口<br>\n<img src=\"/2021/07/03/bug-sprigCloud/02.png\" alt=\"请求缓慢2\"><br>\n发现接口调用的是这个地址，其实是别人启动项目的时候吧自己的ip注册到了eureka注册中心，导致接口有时候走的是getway，有时候又是走的别人的接口</p>\n<p>解决方法：eureka.client.register-with-eureka 为false  这样就不会注册到eureka注册中心了</p>\n<h3 id=\"原因排查2\"><a class=\"markdownIt-Anchor\" href=\"#原因排查2\"></a> 原因排查2</h3>\n<ol>\n<li>查看日志<br>\n<img src=\"/2021/07/03/bug-sprigCloud/01.png\" alt=\"请求缓慢\"><br>\n查看是否是hystrix 配置的时间小于了ribbon的时间</li>\n</ol>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"问题描述\"><a class=\"markdownIt-Anchor\" href=\"#问题描述\"></a> 问题描述</h3>\n<p>逻辑是A服务调用B服务(AB在同一个局域网内)。 经过反复测试，有一个访问缓慢的现象，具体表现为：<br>\n程序启动第一次访问初始化1.2秒左右，还可以理解。<br>\n但后面访问还是要1.1秒左右（格式化到SSS毫秒打印日志监控的）。<br>\n但如果连续访问几次，后面几次又是几十毫秒。过一会再访问，或者换浏览器换post工具请求，又会1.2秒左右。</p>\n<h3 id=\"原因排查1\"><a class=\"markdownIt-Anchor\" href=\"#原因排查1\"></a> 原因排查1</h3>\n<p>查看连接查实的接口<br>\n<img src=\"/2021/07/03/bug-sprigCloud/02.png\" alt=\"请求缓慢2\"><br>\n发现接口调用的是这个地址，其实是别人启动项目的时候吧自己的ip注册到了eureka注册中心，导致接口有时候走的是getway，有时候又是走的别人的接口</p>\n<p>解决方法：eureka.client.register-with-eureka 为false  这样就不会注册到eureka注册中心了</p>\n<h3 id=\"原因排查2\"><a class=\"markdownIt-Anchor\" href=\"#原因排查2\"></a> 原因排查2</h3>\n<ol>\n<li>查看日志<br>\n<img src=\"/2021/07/03/bug-sprigCloud/01.png\" alt=\"请求缓慢\"><br>\n查看是否是hystrix 配置的时间小于了ribbon的时间</li>\n</ol>\n"},{"title":"java缓存一致性问题","comments":0,"translate_title":"java-cache-consistency-problem","date":"2021-08-11T05:31:52.000Z","_content":"","source":"_posts/cache-consistency.md","raw":"---\ntitle: java缓存一致性问题\ntags: redis\ncategories:\n  - 中间件\n  - redis\ncomments: false\ntranslate_title: java-cache-consistency-problem\ndate: 2021-08-11 13:31:52\n---\n","slug":"cache-consistency","published":1,"updated":"2021-08-15T07:41:26.081Z","layout":"post","photos":[],"link":"","_id":"ckslj4prz000bkw3qf1g99bam","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"JAVA类加载过程","comments":0,"translate_title":"java-class-loading-process","date":"2021-07-31T03:04:02.000Z","_content":"## 1.类加载机制\nJVM将类描述数据从.class文件中加载到内存，并对数据进行解析、初始化，最终形成被JVM直接使用的Java类型；类从被加载到JVM中开始，到卸载为止，\n整个生命周期包括：**加载、验证、准备、解析、初始化、使用和卸载**7个阶段\n![完整的类加载过程](./classLoad/01.png)\n\n1. 加载\n\n    加载时jvm做了三件事\n    - 1)通过一个类的全限定名获取该类的二进制流\n    - 2)将这个字节流的静态存储结构转化为方法区运行时数据结构\n    - 3)在内存堆中生成一个代表该类的java.lang.class对象，最为该类数据的访问入口\n\n2. 验证\n   \n    验证、准备、解析这三步可以看作是一个连接的过程，将类的字节码连接到JVM的运行黄台之中;  验证是为了确保class文件的字节流中包含的信息符合当前虚拟机的要求，不会威胁到jvm的安全。\n   验证内容如下：\n    - 文件格式的验证： 验证字节流是否符合class文件袋额规范，是否能被当前版本的虚拟机处理\n    - 元数据验证： 对字节码描述的信息进行语义分析，确保符合Java语言规范\n    - 字节码验证：通过数据流和控制流分析，确定寓意是否合法，符合逻辑的\n    - 符号引用验证：这个娇艳在解析阶段发生\n    \n3. 准备\n\n    为类的静态变量分配内存，设置初始值，对于final static修饰的变量，直接赋值为用户的定义值。\n   ```java\n   //准备阶段过后的初始值为0， 而不是7\n    public static int a = 7;\n   ```\n\n4. 解析\n\n    解析是将常量池内的符号引用转化为直接引用（如物理内存地址指针）\n   \n5. 初始化\n   \n    初始化阶段，jvm才开始真正执行类中定义的Java代码\n    - 执行类构造器<clinit>()方法的过程，类构造器方法是有编译器自动手机类中所有类变量的赋值动作和静态语句块（static块）中的语句合并产生的\n    - 当初始化一个类的时候，如果发现其父类还没有进行过初始化，需有限触发其父类的初始化\n    - 虚拟机会保证一个类的<clinit>()方法在多线程环境被正确加锁和同步\n      ![完整的类加载过程2](./classLoad/02.png)\n\n---\n## 2.类加载器\n类加载器的主要任务：对类加载过程中的加载操作（根据一个类的全限定名读取该类的二进制字节流到JVM内部，然后转换为一个对应的java.lang.Class对象实例）\n\n类加载器的分类\n   \n   - 启动类加载器Bootstrap ClassLoader:\n     在HotSpot虚拟机中，Bootstrap ClassLoader用C++语言编写并嵌入JVM内部，主要负载加载JAVA_HOME/lib目录中的所有类，或者加载由选项-Xbootcalsspath指定的路径下的类\n   - 拓展类加载器/ExtClassLoader：\n     ExtClassLoader继承ClassLoader类，负载加载JAVA_HOME/lib/ext目录中的所有类型，或者由参数-Xbootclasspath指定路径中的所有类型\n   - 应用程序类加载器/AppClassLoader: \n     ExtClassLoader继承ClassLoader类，负责加载用户类路径ClassPath下的所有类型，一般情况下为程序的默认类加载器\n   - 自定义加载器: \n     Java虚拟机规范将所有继承抽象类java.lang.ClassLoader的类加载器，定义为自定义类加载器\n     \n     \n## 3. 双亲委派模型\n![双亲委派模型](./classLoad/03.png)\n如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式 。\n- 除了启动类加载器以外，每个类加载器拥有一个父类加载器，用户的自定义类加载器的父类加载器是AppClassLoader；\n- 双亲委派模型可以保证全限名指定的类，只被加载一次；\n- 双亲委派模型不具有强制性约束，是Java设计者推荐的类加载器实现方式；\n\n### 3.1 双亲委派模式优势\n1. 采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次\n2. java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改\n3. 如果我们在classpath路径下自定义一个名为java.lang.SingleInterge类(该类是胡编的)呢？该类并不存在java.lang中，经过双亲委托模式，传递到启动类加载器中，由于父类加载器路径下并没有该类，所以不会加载，将反向委托给子类加载器加载，最终会通过系统类加载器加载该类。但是这样做是不允许，因为java.lang是核心API包，需要访问权限，强制加载将会报出如下异常\n\n### 3.2 双庆委派模型实现源码\n可以打开 java.lang.ClassLoader 类，其 loadClass方法如下：\n```java\nprotected Class<?> loadClass(String name, boolean resolve)\n        throws ClassNotFoundException\n    {\n        synchronized (getClassLoadingLock(name)) {\n            // First, check if the class has already been loaded\n            Class<?> c = findLoadedClass(name);\n            if (c == null) {\n                long t0 = System.nanoTime();\n                try {\n                    if (parent != null) {\n                        c = parent.loadClass(name, false);\n                    } else {\n                        c = findBootstrapClassOrNull(name);\n                    }\n                } catch (ClassNotFoundException e) {\n                    // ClassNotFoundException thrown if class not found\n                    // from the non-null parent class loader\n                }\n\n                if (c == null) {\n                    // If still not found, then invoke findClass in order\n                    // to find the class.\n                    long t1 = System.nanoTime();\n                    c = findClass(name);\n\n                    // this is the defining class loader; record the stats\n                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                    sun.misc.PerfCounter.getFindClasses().increment();\n                }\n            }\n            if (resolve) {\n                resolveClass(c);\n            }\n            return c;\n        }\n    }\n```\n实现方式很简单，首先会检查该类是否已经被加载过了，若加载过了直接返回（默认resolve取false）；若没有被加载，则调用父类加载器的 loadClass方法，若父类加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，则在抛出 ClassNotFoundException 异常后，在调用自己的 findClass 方法进行加载\n\n## 4.自定义类加载器\n1. 加密\n   \n   我们知道Java字节码是可以进行反编译的，在某些安全性高的场景，是不允许这种情况发生的。那么我们可以将编译后的代码用某种加密算法进行加密，加密后的文件就不能再用常规的类加载器去加载类了。而我们自己可以自定义类加载器在加载的时候先解密，然后在加载\n\n2. 动态创建\n\n   比如很有名的动态代理。\n\n3. 从非标准的来源加载代码\n   我们不用非要从class文件中获取定义此类的二进制流，还可以从数据库，从网络中，或者从zip包等。\n\n\n### 4.1 自定义类加载器方法\n   类加载时根据双亲委派模型会先一层层找到父加载器，如果加载失败，则会调用当前加载器的 findClass() 方法来完成加载。因此我们自定义类加载器，有两个步骤：\n   1、继承 ClassLoader\n\n   2、覆写 findClass() 方法","source":"_posts/classLoad.md","raw":"---\ntitle: JAVA类加载过程\ntags: ClassLoader\ncategories: java\ncomments: false\ntranslate_title: java-class-loading-process\ndate: 2021-07-31 11:04:02\n---\n## 1.类加载机制\nJVM将类描述数据从.class文件中加载到内存，并对数据进行解析、初始化，最终形成被JVM直接使用的Java类型；类从被加载到JVM中开始，到卸载为止，\n整个生命周期包括：**加载、验证、准备、解析、初始化、使用和卸载**7个阶段\n![完整的类加载过程](./classLoad/01.png)\n\n1. 加载\n\n    加载时jvm做了三件事\n    - 1)通过一个类的全限定名获取该类的二进制流\n    - 2)将这个字节流的静态存储结构转化为方法区运行时数据结构\n    - 3)在内存堆中生成一个代表该类的java.lang.class对象，最为该类数据的访问入口\n\n2. 验证\n   \n    验证、准备、解析这三步可以看作是一个连接的过程，将类的字节码连接到JVM的运行黄台之中;  验证是为了确保class文件的字节流中包含的信息符合当前虚拟机的要求，不会威胁到jvm的安全。\n   验证内容如下：\n    - 文件格式的验证： 验证字节流是否符合class文件袋额规范，是否能被当前版本的虚拟机处理\n    - 元数据验证： 对字节码描述的信息进行语义分析，确保符合Java语言规范\n    - 字节码验证：通过数据流和控制流分析，确定寓意是否合法，符合逻辑的\n    - 符号引用验证：这个娇艳在解析阶段发生\n    \n3. 准备\n\n    为类的静态变量分配内存，设置初始值，对于final static修饰的变量，直接赋值为用户的定义值。\n   ```java\n   //准备阶段过后的初始值为0， 而不是7\n    public static int a = 7;\n   ```\n\n4. 解析\n\n    解析是将常量池内的符号引用转化为直接引用（如物理内存地址指针）\n   \n5. 初始化\n   \n    初始化阶段，jvm才开始真正执行类中定义的Java代码\n    - 执行类构造器<clinit>()方法的过程，类构造器方法是有编译器自动手机类中所有类变量的赋值动作和静态语句块（static块）中的语句合并产生的\n    - 当初始化一个类的时候，如果发现其父类还没有进行过初始化，需有限触发其父类的初始化\n    - 虚拟机会保证一个类的<clinit>()方法在多线程环境被正确加锁和同步\n      ![完整的类加载过程2](./classLoad/02.png)\n\n---\n## 2.类加载器\n类加载器的主要任务：对类加载过程中的加载操作（根据一个类的全限定名读取该类的二进制字节流到JVM内部，然后转换为一个对应的java.lang.Class对象实例）\n\n类加载器的分类\n   \n   - 启动类加载器Bootstrap ClassLoader:\n     在HotSpot虚拟机中，Bootstrap ClassLoader用C++语言编写并嵌入JVM内部，主要负载加载JAVA_HOME/lib目录中的所有类，或者加载由选项-Xbootcalsspath指定的路径下的类\n   - 拓展类加载器/ExtClassLoader：\n     ExtClassLoader继承ClassLoader类，负载加载JAVA_HOME/lib/ext目录中的所有类型，或者由参数-Xbootclasspath指定路径中的所有类型\n   - 应用程序类加载器/AppClassLoader: \n     ExtClassLoader继承ClassLoader类，负责加载用户类路径ClassPath下的所有类型，一般情况下为程序的默认类加载器\n   - 自定义加载器: \n     Java虚拟机规范将所有继承抽象类java.lang.ClassLoader的类加载器，定义为自定义类加载器\n     \n     \n## 3. 双亲委派模型\n![双亲委派模型](./classLoad/03.png)\n如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式 。\n- 除了启动类加载器以外，每个类加载器拥有一个父类加载器，用户的自定义类加载器的父类加载器是AppClassLoader；\n- 双亲委派模型可以保证全限名指定的类，只被加载一次；\n- 双亲委派模型不具有强制性约束，是Java设计者推荐的类加载器实现方式；\n\n### 3.1 双亲委派模式优势\n1. 采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次\n2. java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改\n3. 如果我们在classpath路径下自定义一个名为java.lang.SingleInterge类(该类是胡编的)呢？该类并不存在java.lang中，经过双亲委托模式，传递到启动类加载器中，由于父类加载器路径下并没有该类，所以不会加载，将反向委托给子类加载器加载，最终会通过系统类加载器加载该类。但是这样做是不允许，因为java.lang是核心API包，需要访问权限，强制加载将会报出如下异常\n\n### 3.2 双庆委派模型实现源码\n可以打开 java.lang.ClassLoader 类，其 loadClass方法如下：\n```java\nprotected Class<?> loadClass(String name, boolean resolve)\n        throws ClassNotFoundException\n    {\n        synchronized (getClassLoadingLock(name)) {\n            // First, check if the class has already been loaded\n            Class<?> c = findLoadedClass(name);\n            if (c == null) {\n                long t0 = System.nanoTime();\n                try {\n                    if (parent != null) {\n                        c = parent.loadClass(name, false);\n                    } else {\n                        c = findBootstrapClassOrNull(name);\n                    }\n                } catch (ClassNotFoundException e) {\n                    // ClassNotFoundException thrown if class not found\n                    // from the non-null parent class loader\n                }\n\n                if (c == null) {\n                    // If still not found, then invoke findClass in order\n                    // to find the class.\n                    long t1 = System.nanoTime();\n                    c = findClass(name);\n\n                    // this is the defining class loader; record the stats\n                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                    sun.misc.PerfCounter.getFindClasses().increment();\n                }\n            }\n            if (resolve) {\n                resolveClass(c);\n            }\n            return c;\n        }\n    }\n```\n实现方式很简单，首先会检查该类是否已经被加载过了，若加载过了直接返回（默认resolve取false）；若没有被加载，则调用父类加载器的 loadClass方法，若父类加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，则在抛出 ClassNotFoundException 异常后，在调用自己的 findClass 方法进行加载\n\n## 4.自定义类加载器\n1. 加密\n   \n   我们知道Java字节码是可以进行反编译的，在某些安全性高的场景，是不允许这种情况发生的。那么我们可以将编译后的代码用某种加密算法进行加密，加密后的文件就不能再用常规的类加载器去加载类了。而我们自己可以自定义类加载器在加载的时候先解密，然后在加载\n\n2. 动态创建\n\n   比如很有名的动态代理。\n\n3. 从非标准的来源加载代码\n   我们不用非要从class文件中获取定义此类的二进制流，还可以从数据库，从网络中，或者从zip包等。\n\n\n### 4.1 自定义类加载器方法\n   类加载时根据双亲委派模型会先一层层找到父加载器，如果加载失败，则会调用当前加载器的 findClass() 方法来完成加载。因此我们自定义类加载器，有两个步骤：\n   1、继承 ClassLoader\n\n   2、覆写 findClass() 方法","slug":"classLoad","published":1,"updated":"2021-08-15T07:41:26.081Z","layout":"post","photos":[],"link":"","_id":"ckslj4ps0000gkw3qhu5ehuff","content":"<h2 id=\"1类加载机制\"><a class=\"markdownIt-Anchor\" href=\"#1类加载机制\"></a> 1.类加载机制</h2>\n<p>JVM将类描述数据从.class文件中加载到内存，并对数据进行解析、初始化，最终形成被JVM直接使用的Java类型；类从被加载到JVM中开始，到卸载为止，<br>\n整个生命周期包括：<strong>加载、验证、准备、解析、初始化、使用和卸载</strong>7个阶段<br>\n<img src=\"/2021/07/31/classLoad/01.png\" alt=\"完整的类加载过程\"></p>\n<ol>\n<li>\n<p>加载</p>\n<p>加载时jvm做了三件事</p>\n<ul>\n<li>1)通过一个类的全限定名获取该类的二进制流</li>\n<li>2)将这个字节流的静态存储结构转化为方法区运行时数据结构</li>\n<li>3)在内存堆中生成一个代表该类的java.lang.class对象，最为该类数据的访问入口</li>\n</ul>\n</li>\n<li>\n<p>验证</p>\n<p>验证、准备、解析这三步可以看作是一个连接的过程，将类的字节码连接到JVM的运行黄台之中;  验证是为了确保class文件的字节流中包含的信息符合当前虚拟机的要求，不会威胁到jvm的安全。<br>\n验证内容如下：</p>\n<ul>\n<li>文件格式的验证： 验证字节流是否符合class文件袋额规范，是否能被当前版本的虚拟机处理</li>\n<li>元数据验证： 对字节码描述的信息进行语义分析，确保符合Java语言规范</li>\n<li>字节码验证：通过数据流和控制流分析，确定寓意是否合法，符合逻辑的</li>\n<li>符号引用验证：这个娇艳在解析阶段发生</li>\n</ul>\n</li>\n<li>\n<p>准备</p>\n<p>为类的静态变量分配内存，设置初始值，对于final static修饰的变量，直接赋值为用户的定义值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//准备阶段过后的初始值为0， 而不是7</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>解析</p>\n<p>解析是将常量池内的符号引用转化为直接引用（如物理内存地址指针）</p>\n</li>\n<li>\n<p>初始化</p>\n<p>初始化阶段，jvm才开始真正执行类中定义的Java代码</p>\n<ul>\n<li>执行类构造器<clinit>()方法的过程，类构造器方法是有编译器自动手机类中所有类变量的赋值动作和静态语句块（static块）中的语句合并产生的</clinit></li>\n<li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，需有限触发其父类的初始化</li>\n<li>虚拟机会保证一个类的<clinit>()方法在多线程环境被正确加锁和同步<br>\n<img src=\"/2021/07/31/classLoad/02.png\" alt=\"完整的类加载过程2\"></clinit></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"2类加载器\"><a class=\"markdownIt-Anchor\" href=\"#2类加载器\"></a> 2.类加载器</h2>\n<p>类加载器的主要任务：对类加载过程中的加载操作（根据一个类的全限定名读取该类的二进制字节流到JVM内部，然后转换为一个对应的java.lang.Class对象实例）</p>\n<p>类加载器的分类</p>\n<ul>\n<li>启动类加载器Bootstrap ClassLoader:<br>\n在HotSpot虚拟机中，Bootstrap ClassLoader用C++语言编写并嵌入JVM内部，主要负载加载JAVA_HOME/lib目录中的所有类，或者加载由选项-Xbootcalsspath指定的路径下的类</li>\n<li>拓展类加载器/ExtClassLoader：<br>\nExtClassLoader继承ClassLoader类，负载加载JAVA_HOME/lib/ext目录中的所有类型，或者由参数-Xbootclasspath指定路径中的所有类型</li>\n<li>应用程序类加载器/AppClassLoader:<br>\nExtClassLoader继承ClassLoader类，负责加载用户类路径ClassPath下的所有类型，一般情况下为程序的默认类加载器</li>\n<li>自定义加载器:<br>\nJava虚拟机规范将所有继承抽象类java.lang.ClassLoader的类加载器，定义为自定义类加载器</li>\n</ul>\n<h2 id=\"3-双亲委派模型\"><a class=\"markdownIt-Anchor\" href=\"#3-双亲委派模型\"></a> 3. 双亲委派模型</h2>\n<p><img src=\"/2021/07/31/classLoad/03.png\" alt=\"双亲委派模型\"><br>\n如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式 。</p>\n<ul>\n<li>除了启动类加载器以外，每个类加载器拥有一个父类加载器，用户的自定义类加载器的父类加载器是AppClassLoader；</li>\n<li>双亲委派模型可以保证全限名指定的类，只被加载一次；</li>\n<li>双亲委派模型不具有强制性约束，是Java设计者推荐的类加载器实现方式；</li>\n</ul>\n<h3 id=\"31-双亲委派模式优势\"><a class=\"markdownIt-Anchor\" href=\"#31-双亲委派模式优势\"></a> 3.1 双亲委派模式优势</h3>\n<ol>\n<li>采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次</li>\n<li>java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改</li>\n<li>如果我们在classpath路径下自定义一个名为java.lang.SingleInterge类(该类是胡编的)呢？该类并不存在java.lang中，经过双亲委托模式，传递到启动类加载器中，由于父类加载器路径下并没有该类，所以不会加载，将反向委托给子类加载器加载，最终会通过系统类加载器加载该类。但是这样做是不允许，因为java.lang是核心API包，需要访问权限，强制加载将会报出如下异常</li>\n</ol>\n<h3 id=\"32-双庆委派模型实现源码\"><a class=\"markdownIt-Anchor\" href=\"#32-双庆委派模型实现源码\"></a> 3.2 双庆委派模型实现源码</h3>\n<p>可以打开 java.lang.ClassLoader 类，其 loadClass方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"keyword\">boolean</span> resolve)</span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> t0 = System.nanoTime();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        c = parent.loadClass(name, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></span><br><span class=\"line\">                    <span class=\"comment\">// from the non-null parent class loader</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If still not found, then invoke findClass in order</span></span><br><span class=\"line\">                    <span class=\"comment\">// to find the class.</span></span><br><span class=\"line\">                    <span class=\"keyword\">long</span> t1 = System.nanoTime();</span><br><span class=\"line\">                    c = findClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// this is the defining class loader; record the stats</span></span><br><span class=\"line\">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">                resolveClass(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>实现方式很简单，首先会检查该类是否已经被加载过了，若加载过了直接返回（默认resolve取false）；若没有被加载，则调用父类加载器的 loadClass方法，若父类加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，则在抛出 ClassNotFoundException 异常后，在调用自己的 findClass 方法进行加载</p>\n<h2 id=\"4自定义类加载器\"><a class=\"markdownIt-Anchor\" href=\"#4自定义类加载器\"></a> 4.自定义类加载器</h2>\n<ol>\n<li>\n<p>加密</p>\n<p>我们知道Java字节码是可以进行反编译的，在某些安全性高的场景，是不允许这种情况发生的。那么我们可以将编译后的代码用某种加密算法进行加密，加密后的文件就不能再用常规的类加载器去加载类了。而我们自己可以自定义类加载器在加载的时候先解密，然后在加载</p>\n</li>\n<li>\n<p>动态创建</p>\n<p>比如很有名的动态代理。</p>\n</li>\n<li>\n<p>从非标准的来源加载代码<br>\n我们不用非要从class文件中获取定义此类的二进制流，还可以从数据库，从网络中，或者从zip包等。</p>\n</li>\n</ol>\n<h3 id=\"41-自定义类加载器方法\"><a class=\"markdownIt-Anchor\" href=\"#41-自定义类加载器方法\"></a> 4.1 自定义类加载器方法</h3>\n<p>类加载时根据双亲委派模型会先一层层找到父加载器，如果加载失败，则会调用当前加载器的 findClass() 方法来完成加载。因此我们自定义类加载器，有两个步骤：<br>\n1、继承 ClassLoader</p>\n<p>2、覆写 findClass() 方法</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1类加载机制\"><a class=\"markdownIt-Anchor\" href=\"#1类加载机制\"></a> 1.类加载机制</h2>\n<p>JVM将类描述数据从.class文件中加载到内存，并对数据进行解析、初始化，最终形成被JVM直接使用的Java类型；类从被加载到JVM中开始，到卸载为止，<br>\n整个生命周期包括：<strong>加载、验证、准备、解析、初始化、使用和卸载</strong>7个阶段<br>\n<img src=\"/2021/07/31/classLoad/01.png\" alt=\"完整的类加载过程\"></p>\n<ol>\n<li>\n<p>加载</p>\n<p>加载时jvm做了三件事</p>\n<ul>\n<li>1)通过一个类的全限定名获取该类的二进制流</li>\n<li>2)将这个字节流的静态存储结构转化为方法区运行时数据结构</li>\n<li>3)在内存堆中生成一个代表该类的java.lang.class对象，最为该类数据的访问入口</li>\n</ul>\n</li>\n<li>\n<p>验证</p>\n<p>验证、准备、解析这三步可以看作是一个连接的过程，将类的字节码连接到JVM的运行黄台之中;  验证是为了确保class文件的字节流中包含的信息符合当前虚拟机的要求，不会威胁到jvm的安全。<br>\n验证内容如下：</p>\n<ul>\n<li>文件格式的验证： 验证字节流是否符合class文件袋额规范，是否能被当前版本的虚拟机处理</li>\n<li>元数据验证： 对字节码描述的信息进行语义分析，确保符合Java语言规范</li>\n<li>字节码验证：通过数据流和控制流分析，确定寓意是否合法，符合逻辑的</li>\n<li>符号引用验证：这个娇艳在解析阶段发生</li>\n</ul>\n</li>\n<li>\n<p>准备</p>\n<p>为类的静态变量分配内存，设置初始值，对于final static修饰的变量，直接赋值为用户的定义值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//准备阶段过后的初始值为0， 而不是7</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>解析</p>\n<p>解析是将常量池内的符号引用转化为直接引用（如物理内存地址指针）</p>\n</li>\n<li>\n<p>初始化</p>\n<p>初始化阶段，jvm才开始真正执行类中定义的Java代码</p>\n<ul>\n<li>执行类构造器<clinit>()方法的过程，类构造器方法是有编译器自动手机类中所有类变量的赋值动作和静态语句块（static块）中的语句合并产生的</clinit></li>\n<li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，需有限触发其父类的初始化</li>\n<li>虚拟机会保证一个类的<clinit>()方法在多线程环境被正确加锁和同步<br>\n<img src=\"/2021/07/31/classLoad/02.png\" alt=\"完整的类加载过程2\"></clinit></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"2类加载器\"><a class=\"markdownIt-Anchor\" href=\"#2类加载器\"></a> 2.类加载器</h2>\n<p>类加载器的主要任务：对类加载过程中的加载操作（根据一个类的全限定名读取该类的二进制字节流到JVM内部，然后转换为一个对应的java.lang.Class对象实例）</p>\n<p>类加载器的分类</p>\n<ul>\n<li>启动类加载器Bootstrap ClassLoader:<br>\n在HotSpot虚拟机中，Bootstrap ClassLoader用C++语言编写并嵌入JVM内部，主要负载加载JAVA_HOME/lib目录中的所有类，或者加载由选项-Xbootcalsspath指定的路径下的类</li>\n<li>拓展类加载器/ExtClassLoader：<br>\nExtClassLoader继承ClassLoader类，负载加载JAVA_HOME/lib/ext目录中的所有类型，或者由参数-Xbootclasspath指定路径中的所有类型</li>\n<li>应用程序类加载器/AppClassLoader:<br>\nExtClassLoader继承ClassLoader类，负责加载用户类路径ClassPath下的所有类型，一般情况下为程序的默认类加载器</li>\n<li>自定义加载器:<br>\nJava虚拟机规范将所有继承抽象类java.lang.ClassLoader的类加载器，定义为自定义类加载器</li>\n</ul>\n<h2 id=\"3-双亲委派模型\"><a class=\"markdownIt-Anchor\" href=\"#3-双亲委派模型\"></a> 3. 双亲委派模型</h2>\n<p><img src=\"/2021/07/31/classLoad/03.png\" alt=\"双亲委派模型\"><br>\n如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式 。</p>\n<ul>\n<li>除了启动类加载器以外，每个类加载器拥有一个父类加载器，用户的自定义类加载器的父类加载器是AppClassLoader；</li>\n<li>双亲委派模型可以保证全限名指定的类，只被加载一次；</li>\n<li>双亲委派模型不具有强制性约束，是Java设计者推荐的类加载器实现方式；</li>\n</ul>\n<h3 id=\"31-双亲委派模式优势\"><a class=\"markdownIt-Anchor\" href=\"#31-双亲委派模式优势\"></a> 3.1 双亲委派模式优势</h3>\n<ol>\n<li>采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次</li>\n<li>java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改</li>\n<li>如果我们在classpath路径下自定义一个名为java.lang.SingleInterge类(该类是胡编的)呢？该类并不存在java.lang中，经过双亲委托模式，传递到启动类加载器中，由于父类加载器路径下并没有该类，所以不会加载，将反向委托给子类加载器加载，最终会通过系统类加载器加载该类。但是这样做是不允许，因为java.lang是核心API包，需要访问权限，强制加载将会报出如下异常</li>\n</ol>\n<h3 id=\"32-双庆委派模型实现源码\"><a class=\"markdownIt-Anchor\" href=\"#32-双庆委派模型实现源码\"></a> 3.2 双庆委派模型实现源码</h3>\n<p>可以打开 java.lang.ClassLoader 类，其 loadClass方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"keyword\">boolean</span> resolve)</span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> t0 = System.nanoTime();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        c = parent.loadClass(name, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></span><br><span class=\"line\">                    <span class=\"comment\">// from the non-null parent class loader</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If still not found, then invoke findClass in order</span></span><br><span class=\"line\">                    <span class=\"comment\">// to find the class.</span></span><br><span class=\"line\">                    <span class=\"keyword\">long</span> t1 = System.nanoTime();</span><br><span class=\"line\">                    c = findClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// this is the defining class loader; record the stats</span></span><br><span class=\"line\">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">                resolveClass(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>实现方式很简单，首先会检查该类是否已经被加载过了，若加载过了直接返回（默认resolve取false）；若没有被加载，则调用父类加载器的 loadClass方法，若父类加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，则在抛出 ClassNotFoundException 异常后，在调用自己的 findClass 方法进行加载</p>\n<h2 id=\"4自定义类加载器\"><a class=\"markdownIt-Anchor\" href=\"#4自定义类加载器\"></a> 4.自定义类加载器</h2>\n<ol>\n<li>\n<p>加密</p>\n<p>我们知道Java字节码是可以进行反编译的，在某些安全性高的场景，是不允许这种情况发生的。那么我们可以将编译后的代码用某种加密算法进行加密，加密后的文件就不能再用常规的类加载器去加载类了。而我们自己可以自定义类加载器在加载的时候先解密，然后在加载</p>\n</li>\n<li>\n<p>动态创建</p>\n<p>比如很有名的动态代理。</p>\n</li>\n<li>\n<p>从非标准的来源加载代码<br>\n我们不用非要从class文件中获取定义此类的二进制流，还可以从数据库，从网络中，或者从zip包等。</p>\n</li>\n</ol>\n<h3 id=\"41-自定义类加载器方法\"><a class=\"markdownIt-Anchor\" href=\"#41-自定义类加载器方法\"></a> 4.1 自定义类加载器方法</h3>\n<p>类加载时根据双亲委派模型会先一层层找到父加载器，如果加载失败，则会调用当前加载器的 findClass() 方法来完成加载。因此我们自定义类加载器，有两个步骤：<br>\n1、继承 ClassLoader</p>\n<p>2、覆写 findClass() 方法</p>\n"},{"title":"面试常见的趣味题","comments":0,"translate_title":"common-interesting-questions-in-interviews","date":"2021-06-14T02:09:15.000Z","_content":"### 8升、5升、3升水桶各一个,如何分成两个4升\n![分成两个4升](./interest/3_5_8.png)\n\n### 以面向对象的思想设计长方形和正方形\n- 方式1：设计接口，然后长方形和正方形各自实现这个接口\n```java\n//形状类：结算面积和周长\npublic interface Shape {\n\tpublic double area();\n\tpublic double perimeter();\n}\n```\n```java\n//长方形：实现接口并实现方法\npublic class Rectangle implements Shape {\n\tprivate double width;\n\tprivate double height;\n\tpublic Rectangle(double width,double height){\n\t\tthis.width=width;\n\t\tthis.height=height;\n\t}\t\n\t@Override\n\tpublic double area() {\n\t\treturn this.width*this.height;\n\t}\n\t@Override\n\tpublic double perimeter() {\n\t\treturn 2*(this.width+this.height);\n\t}\n}\n```\n```java\n//正方形：实现接口并实现方法\npublic class Square implements Shape {\n\tprivate double side;\n\tpublic Square(double side){\n\t\tthis.side=side;\n\t}\n\t@Override\n\tpublic double area() {\n\t\treturn side*side;\n\t}\n \n\t@Override\n\tpublic double perimeter() {\n\t\treturn 4*side;\n\t}\n}\n```\n- 方式2：使用extents\n因为正方形 **is a** 长方形，所以可以使用继承来设计正方形，然后在构造函数中使用super函数；\n  \n```java\npublic class Square extends Rectangle{\n\tprivate double side;\n\tpublic Square(double side){\n\t\tsuper(side,side);\n\t\tthis.side=side;\n\t}\n\tpublic static void main(String[] args) {\n\t\tSquare s=new Square(2.5);\n\t\tSystem.out.println(s.perimeter());\n\t\tSystem.out.println(s.area());\n\t}\n}\n```\n\n### java使用递归计算1+2+3+...+n之间的和\n```java\npublic class SumNumber {\n\n    public static void main(String[] args) {\n        System.out.println(sumN(10));\n    }\n\n    //使用递归的方法计算1+2+3+4+....n的和; 切记注意n不能小于1\n    public static int sumN(int n) {\n        if (n == 1){\n            return 1;\n        }\n        return n+ sumN(n-1);\n    }\n}\n```\n\n### java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数\n文件文章中存在,.以及空格\n- 读取文件内容\n- 对文件进行内容匹配\n- 使用map 保存单词、次数\n- map排序\n- 输出\n```java\npublic class WordCount {\n\n    public static void main(String[] args) {\n        try {\n            //1. 使用流读取文件\n            BufferedReader reader = new BufferedReader(new FileReader(\"d:/n.txt\"));\n            StringBuffer sb = new StringBuffer();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n            reader.close();\n            //替换所有的英文逗号和句号\n            String temp = sb.toString().replaceAll(\"/[\\\\w\\\\,\\\\.]+/\", \"\");\n            //2.使用正则表达式匹配\n            Pattern pattern = Pattern.compile(\"/[a-zA-Z\\\\w\\\\,\\\\.]+/\");\n            Matcher matcher = pattern.matcher(temp);\n            Map<String, Integer> map = new HashMap<>(16);\n            String word;\n            int count;\n            while (matcher.find()) {\n                word = matcher.group();\n                if (map.containsKey(word)) {\n                    count = map.get(word);\n                    map.put(word, count + 1);\n                } else {\n                    map.put(word, 1);\n                }\n            }\n            //将map的数据根据count排序；\n            List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());\n            Collections.sort(list, Comparator.comparing(Map.Entry::getValue));\n            int last = list.size() - 1;\n            for (int i = last; i > last - 5; i--) {\n                System.out.println(\"key=\" + list.get(i).getKey() + \" value=\" + list.get(i).getValue());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### java 获取字符串第一次出现重复的字符\n```java\npublic static int findDuplicate(String str){\n    char[] chars = str.toCharArray();\n    Set<Character> uniqueChars = new HashSet(chars.length,1);\n    for (int i = 0; i < chars.length; i++) {\n        if (!uniqueChars.add(chars[i])){\n            return i;\n        }\n    }\n    return -1;\n}\n```\n\n\n","source":"_posts/interest.md","raw":"---\ntitle: 面试常见的趣味题\ncategories: 趣味\ncomments: false\ntranslate_title: common-interesting-questions-in-interviews\ndate: 2021-06-14 10:09:15\n---\n### 8升、5升、3升水桶各一个,如何分成两个4升\n![分成两个4升](./interest/3_5_8.png)\n\n### 以面向对象的思想设计长方形和正方形\n- 方式1：设计接口，然后长方形和正方形各自实现这个接口\n```java\n//形状类：结算面积和周长\npublic interface Shape {\n\tpublic double area();\n\tpublic double perimeter();\n}\n```\n```java\n//长方形：实现接口并实现方法\npublic class Rectangle implements Shape {\n\tprivate double width;\n\tprivate double height;\n\tpublic Rectangle(double width,double height){\n\t\tthis.width=width;\n\t\tthis.height=height;\n\t}\t\n\t@Override\n\tpublic double area() {\n\t\treturn this.width*this.height;\n\t}\n\t@Override\n\tpublic double perimeter() {\n\t\treturn 2*(this.width+this.height);\n\t}\n}\n```\n```java\n//正方形：实现接口并实现方法\npublic class Square implements Shape {\n\tprivate double side;\n\tpublic Square(double side){\n\t\tthis.side=side;\n\t}\n\t@Override\n\tpublic double area() {\n\t\treturn side*side;\n\t}\n \n\t@Override\n\tpublic double perimeter() {\n\t\treturn 4*side;\n\t}\n}\n```\n- 方式2：使用extents\n因为正方形 **is a** 长方形，所以可以使用继承来设计正方形，然后在构造函数中使用super函数；\n  \n```java\npublic class Square extends Rectangle{\n\tprivate double side;\n\tpublic Square(double side){\n\t\tsuper(side,side);\n\t\tthis.side=side;\n\t}\n\tpublic static void main(String[] args) {\n\t\tSquare s=new Square(2.5);\n\t\tSystem.out.println(s.perimeter());\n\t\tSystem.out.println(s.area());\n\t}\n}\n```\n\n### java使用递归计算1+2+3+...+n之间的和\n```java\npublic class SumNumber {\n\n    public static void main(String[] args) {\n        System.out.println(sumN(10));\n    }\n\n    //使用递归的方法计算1+2+3+4+....n的和; 切记注意n不能小于1\n    public static int sumN(int n) {\n        if (n == 1){\n            return 1;\n        }\n        return n+ sumN(n-1);\n    }\n}\n```\n\n### java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数\n文件文章中存在,.以及空格\n- 读取文件内容\n- 对文件进行内容匹配\n- 使用map 保存单词、次数\n- map排序\n- 输出\n```java\npublic class WordCount {\n\n    public static void main(String[] args) {\n        try {\n            //1. 使用流读取文件\n            BufferedReader reader = new BufferedReader(new FileReader(\"d:/n.txt\"));\n            StringBuffer sb = new StringBuffer();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n            reader.close();\n            //替换所有的英文逗号和句号\n            String temp = sb.toString().replaceAll(\"/[\\\\w\\\\,\\\\.]+/\", \"\");\n            //2.使用正则表达式匹配\n            Pattern pattern = Pattern.compile(\"/[a-zA-Z\\\\w\\\\,\\\\.]+/\");\n            Matcher matcher = pattern.matcher(temp);\n            Map<String, Integer> map = new HashMap<>(16);\n            String word;\n            int count;\n            while (matcher.find()) {\n                word = matcher.group();\n                if (map.containsKey(word)) {\n                    count = map.get(word);\n                    map.put(word, count + 1);\n                } else {\n                    map.put(word, 1);\n                }\n            }\n            //将map的数据根据count排序；\n            List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());\n            Collections.sort(list, Comparator.comparing(Map.Entry::getValue));\n            int last = list.size() - 1;\n            for (int i = last; i > last - 5; i--) {\n                System.out.println(\"key=\" + list.get(i).getKey() + \" value=\" + list.get(i).getValue());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### java 获取字符串第一次出现重复的字符\n```java\npublic static int findDuplicate(String str){\n    char[] chars = str.toCharArray();\n    Set<Character> uniqueChars = new HashSet(chars.length,1);\n    for (int i = 0; i < chars.length; i++) {\n        if (!uniqueChars.add(chars[i])){\n            return i;\n        }\n    }\n    return -1;\n}\n```\n\n\n","slug":"interest","published":1,"updated":"2021-08-18T11:47:50.600Z","layout":"post","photos":[],"link":"","_id":"ckslj4ps5000ikw3qbid0h0hm","content":"<h3 id=\"8升-5升-3升水桶各一个如何分成两个4升\"><a class=\"markdownIt-Anchor\" href=\"#8升-5升-3升水桶各一个如何分成两个4升\"></a> 8升、5升、3升水桶各一个,如何分成两个4升</h3>\n<p><img src=\"/2021/06/14/interest/3_5_8.png\" alt=\"分成两个4升\"></p>\n<h3 id=\"以面向对象的思想设计长方形和正方形\"><a class=\"markdownIt-Anchor\" href=\"#以面向对象的思想设计长方形和正方形\"></a> 以面向对象的思想设计长方形和正方形</h3>\n<ul>\n<li>方式1：设计接口，然后长方形和正方形各自实现这个接口</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//形状类：结算面积和周长</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">perimeter</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//长方形：实现接口并实现方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> width;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> height;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Rectangle</span><span class=\"params\">(<span class=\"keyword\">double</span> width,<span class=\"keyword\">double</span> height)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.width=width;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.height=height;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width*<span class=\"keyword\">this</span>.height;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">perimeter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">2</span>*(<span class=\"keyword\">this</span>.width+<span class=\"keyword\">this</span>.height);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正方形：实现接口并实现方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> side;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> side)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.side=side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> side*side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">perimeter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">4</span>*side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方式2：使用extents<br>\n因为正方形 <strong>is a</strong> 长方形，所以可以使用继承来设计正方形，然后在构造函数中使用super函数；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Rectangle</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> side;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> side)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(side,side);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.side=side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSquare s=<span class=\"keyword\">new</span> Square(<span class=\"number\">2.5</span>);</span><br><span class=\"line\">\t\tSystem.out.println(s.perimeter());</span><br><span class=\"line\">\t\tSystem.out.println(s.area());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"java使用递归计算123n之间的和\"><a class=\"markdownIt-Anchor\" href=\"#java使用递归计算123n之间的和\"></a> java使用递归计算1+2+3+…+n之间的和</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SumNumber</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(sumN(<span class=\"number\">10</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用递归的方法计算1+2+3+4+....n的和; 切记注意n不能小于1</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sumN</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n+ sumN(n-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"java读取一篇英文文章并输出其中出现单词次数最多的3个单词以及次数\"><a class=\"markdownIt-Anchor\" href=\"#java读取一篇英文文章并输出其中出现单词次数最多的3个单词以及次数\"></a> java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数</h3>\n<p>文件文章中存在,.以及空格</p>\n<ul>\n<li>读取文件内容</li>\n<li>对文件进行内容匹配</li>\n<li>使用map 保存单词、次数</li>\n<li>map排序</li>\n<li>输出</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordCount</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//1. 使用流读取文件</span></span><br><span class=\"line\">            BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">&quot;d:/n.txt&quot;</span>));</span><br><span class=\"line\">            StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((line = reader.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                sb.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            reader.close();</span><br><span class=\"line\">            <span class=\"comment\">//替换所有的英文逗号和句号</span></span><br><span class=\"line\">            String temp = sb.toString().replaceAll(<span class=\"string\">&quot;/[\\\\w\\\\,\\\\.]+/&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//2.使用正则表达式匹配</span></span><br><span class=\"line\">            Pattern pattern = Pattern.compile(<span class=\"string\">&quot;/[a-zA-Z\\\\w\\\\,\\\\.]+/&quot;</span>);</span><br><span class=\"line\">            Matcher matcher = pattern.matcher(temp);</span><br><span class=\"line\">            Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">            String word;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (matcher.find()) &#123;</span><br><span class=\"line\">                word = matcher.group();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (map.containsKey(word)) &#123;</span><br><span class=\"line\">                    count = map.get(word);</span><br><span class=\"line\">                    map.put(word, count + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    map.put(word, <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//将map的数据根据count排序；</span></span><br><span class=\"line\">            List&lt;Map.Entry&lt;String, Integer&gt;&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(map.entrySet());</span><br><span class=\"line\">            Collections.sort(list, Comparator.comparing(Map.Entry::getValue));</span><br><span class=\"line\">            <span class=\"keyword\">int</span> last = list.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = last; i &gt; last - <span class=\"number\">5</span>; i--) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;key=&quot;</span> + list.get(i).getKey() + <span class=\"string\">&quot; value=&quot;</span> + list.get(i).getValue());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"java-获取字符串第一次出现重复的字符\"><a class=\"markdownIt-Anchor\" href=\"#java-获取字符串第一次出现重复的字符\"></a> java 获取字符串第一次出现重复的字符</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">findDuplicate</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] chars = str.toCharArray();</span><br><span class=\"line\">    Set&lt;Character&gt; uniqueChars = <span class=\"keyword\">new</span> HashSet(chars.length,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!uniqueChars.add(chars[i]))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"8升-5升-3升水桶各一个如何分成两个4升\"><a class=\"markdownIt-Anchor\" href=\"#8升-5升-3升水桶各一个如何分成两个4升\"></a> 8升、5升、3升水桶各一个,如何分成两个4升</h3>\n<p><img src=\"/2021/06/14/interest/3_5_8.png\" alt=\"分成两个4升\"></p>\n<h3 id=\"以面向对象的思想设计长方形和正方形\"><a class=\"markdownIt-Anchor\" href=\"#以面向对象的思想设计长方形和正方形\"></a> 以面向对象的思想设计长方形和正方形</h3>\n<ul>\n<li>方式1：设计接口，然后长方形和正方形各自实现这个接口</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//形状类：结算面积和周长</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">perimeter</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//长方形：实现接口并实现方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> width;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> height;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Rectangle</span><span class=\"params\">(<span class=\"keyword\">double</span> width,<span class=\"keyword\">double</span> height)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.width=width;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.height=height;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width*<span class=\"keyword\">this</span>.height;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">perimeter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">2</span>*(<span class=\"keyword\">this</span>.width+<span class=\"keyword\">this</span>.height);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正方形：实现接口并实现方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> side;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> side)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.side=side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> side*side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">perimeter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">4</span>*side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方式2：使用extents<br>\n因为正方形 <strong>is a</strong> 长方形，所以可以使用继承来设计正方形，然后在构造函数中使用super函数；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Rectangle</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">double</span> side;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">(<span class=\"keyword\">double</span> side)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(side,side);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.side=side;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSquare s=<span class=\"keyword\">new</span> Square(<span class=\"number\">2.5</span>);</span><br><span class=\"line\">\t\tSystem.out.println(s.perimeter());</span><br><span class=\"line\">\t\tSystem.out.println(s.area());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"java使用递归计算123n之间的和\"><a class=\"markdownIt-Anchor\" href=\"#java使用递归计算123n之间的和\"></a> java使用递归计算1+2+3+…+n之间的和</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SumNumber</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(sumN(<span class=\"number\">10</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用递归的方法计算1+2+3+4+....n的和; 切记注意n不能小于1</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sumN</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n+ sumN(n-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"java读取一篇英文文章并输出其中出现单词次数最多的3个单词以及次数\"><a class=\"markdownIt-Anchor\" href=\"#java读取一篇英文文章并输出其中出现单词次数最多的3个单词以及次数\"></a> java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数</h3>\n<p>文件文章中存在,.以及空格</p>\n<ul>\n<li>读取文件内容</li>\n<li>对文件进行内容匹配</li>\n<li>使用map 保存单词、次数</li>\n<li>map排序</li>\n<li>输出</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordCount</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//1. 使用流读取文件</span></span><br><span class=\"line\">            BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">&quot;d:/n.txt&quot;</span>));</span><br><span class=\"line\">            StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((line = reader.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                sb.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            reader.close();</span><br><span class=\"line\">            <span class=\"comment\">//替换所有的英文逗号和句号</span></span><br><span class=\"line\">            String temp = sb.toString().replaceAll(<span class=\"string\">&quot;/[\\\\w\\\\,\\\\.]+/&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//2.使用正则表达式匹配</span></span><br><span class=\"line\">            Pattern pattern = Pattern.compile(<span class=\"string\">&quot;/[a-zA-Z\\\\w\\\\,\\\\.]+/&quot;</span>);</span><br><span class=\"line\">            Matcher matcher = pattern.matcher(temp);</span><br><span class=\"line\">            Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">            String word;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (matcher.find()) &#123;</span><br><span class=\"line\">                word = matcher.group();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (map.containsKey(word)) &#123;</span><br><span class=\"line\">                    count = map.get(word);</span><br><span class=\"line\">                    map.put(word, count + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    map.put(word, <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//将map的数据根据count排序；</span></span><br><span class=\"line\">            List&lt;Map.Entry&lt;String, Integer&gt;&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(map.entrySet());</span><br><span class=\"line\">            Collections.sort(list, Comparator.comparing(Map.Entry::getValue));</span><br><span class=\"line\">            <span class=\"keyword\">int</span> last = list.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = last; i &gt; last - <span class=\"number\">5</span>; i--) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;key=&quot;</span> + list.get(i).getKey() + <span class=\"string\">&quot; value=&quot;</span> + list.get(i).getValue());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"java-获取字符串第一次出现重复的字符\"><a class=\"markdownIt-Anchor\" href=\"#java-获取字符串第一次出现重复的字符\"></a> java 获取字符串第一次出现重复的字符</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">findDuplicate</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] chars = str.toCharArray();</span><br><span class=\"line\">    Set&lt;Character&gt; uniqueChars = <span class=\"keyword\">new</span> HashSet(chars.length,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!uniqueChars.add(chars[i]))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Java内部类初始化","translate_title":"java-internal-class-initialization","comments":0,"date":"2021-05-31T16:00:00.000Z","_content":"### 1. 在同个java文件中，但不是内部类\n```java\npublic class C {\n}\n//在同一个Java文件中只能存在一个public类，除内部类外\n//只允许使用“public”、“abstract”和“final”。\nclass D{\n    \n}\n```\n```java\n//实例化\npublic static void main(String[] args) {\n    D d = new D();\n}\n```\n\n### 2. 常规内部类\n要实例化内部类对象，必须先有外部类对象，通过外部类对象.new 内部类();来实例化内部类对象，在其他文件或者其他包内都是这样，只是要能在其他包实例化的话，内部类Inner还得加上修饰符public。\n```java\npublic class Outter {\n    class Inner { }\n\n    public static void main(String[] args) {\n        Outter out = new Outter();\n        Outter.Inner in = out.new Inner();\n    }\n}\n\n//第二种情况：通过提供方法来获取实例对象\npublic class A {\n    public class B{\n        public void test(){\n            System.out.println(111);\n        }\n    }\n\n    public B getInstance(){\n        return new B();\n    }\n    public static void main(String[] args) {\n        A a = new A();\n        B b = a.getInstance();\n        b.test();\n    }\n}\n```\n### 3. 静态内部类\n实例化静态内部类和实例化常规内部类有类似的地方，而不同之处在与静态内部类由于是静态的，所以不需要外部类对象就可以实例化，如上例Outter.Inner in = new Outter.Inner();\n在其他Java文件也是这么实例化的\n```java\nclass Outter {\n    \n    static class Inner {}\n}\n\npublic class TestDemo {\n    public static void main(String[] args) {\n        Outter.Inner in = new Outter.Inner();\n    }\n}\n```\n\n### 4. 局部内部类\n局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内，所以只能在方法或者该作用域内实例化,局部内部类不能有访问说明符,因为它不是外围类的一部分,但是可以访问当前代码块的常量,以及此外围类的所有成员\n```java\npublic class A {\n    class B {\n\n    }\n\n    public void pint() {\n        class C {\n        }\n        new C();\n    }\n\n    public void pint(boolean b) {\n        if (b) {\n            class D {\n            }\n            new D();\n        }\n    }\n}\n```\n\n### 5. 匿名内部类\n匿名内部类可以继承一个类或实现一个接口，这里的ClassOrInterfaceName是匿名内部类所继承的类名或实现的接口名。但匿名内部类不能同时实现一个接口和继承一个类，也不能实现多个接口。如果实现了一个接口，该类是Object类的直接子类，匿名类继承一个类或实现一个接口，不需要extends和implements关键字\n```java\nArrayList<String> list = new ArrayList<String>() {{\n        add(\"A\");\n        add(\"B\");\n        add(\"C\");\n}};\n\nnew Thread(\n        new Runnable() {\n            public void run() { ... }\n        }\n).start();\n```\n\n\n","source":"_posts/java-inner-class-01.md","raw":"---\ntitle: Java内部类初始化\ntranslate_title: java-internal-class-initialization\ntags: java\ncategories: java\ncomments: false\ndate: 2021-06-01 00:00:00\n---\n### 1. 在同个java文件中，但不是内部类\n```java\npublic class C {\n}\n//在同一个Java文件中只能存在一个public类，除内部类外\n//只允许使用“public”、“abstract”和“final”。\nclass D{\n    \n}\n```\n```java\n//实例化\npublic static void main(String[] args) {\n    D d = new D();\n}\n```\n\n### 2. 常规内部类\n要实例化内部类对象，必须先有外部类对象，通过外部类对象.new 内部类();来实例化内部类对象，在其他文件或者其他包内都是这样，只是要能在其他包实例化的话，内部类Inner还得加上修饰符public。\n```java\npublic class Outter {\n    class Inner { }\n\n    public static void main(String[] args) {\n        Outter out = new Outter();\n        Outter.Inner in = out.new Inner();\n    }\n}\n\n//第二种情况：通过提供方法来获取实例对象\npublic class A {\n    public class B{\n        public void test(){\n            System.out.println(111);\n        }\n    }\n\n    public B getInstance(){\n        return new B();\n    }\n    public static void main(String[] args) {\n        A a = new A();\n        B b = a.getInstance();\n        b.test();\n    }\n}\n```\n### 3. 静态内部类\n实例化静态内部类和实例化常规内部类有类似的地方，而不同之处在与静态内部类由于是静态的，所以不需要外部类对象就可以实例化，如上例Outter.Inner in = new Outter.Inner();\n在其他Java文件也是这么实例化的\n```java\nclass Outter {\n    \n    static class Inner {}\n}\n\npublic class TestDemo {\n    public static void main(String[] args) {\n        Outter.Inner in = new Outter.Inner();\n    }\n}\n```\n\n### 4. 局部内部类\n局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内，所以只能在方法或者该作用域内实例化,局部内部类不能有访问说明符,因为它不是外围类的一部分,但是可以访问当前代码块的常量,以及此外围类的所有成员\n```java\npublic class A {\n    class B {\n\n    }\n\n    public void pint() {\n        class C {\n        }\n        new C();\n    }\n\n    public void pint(boolean b) {\n        if (b) {\n            class D {\n            }\n            new D();\n        }\n    }\n}\n```\n\n### 5. 匿名内部类\n匿名内部类可以继承一个类或实现一个接口，这里的ClassOrInterfaceName是匿名内部类所继承的类名或实现的接口名。但匿名内部类不能同时实现一个接口和继承一个类，也不能实现多个接口。如果实现了一个接口，该类是Object类的直接子类，匿名类继承一个类或实现一个接口，不需要extends和implements关键字\n```java\nArrayList<String> list = new ArrayList<String>() {{\n        add(\"A\");\n        add(\"B\");\n        add(\"C\");\n}};\n\nnew Thread(\n        new Runnable() {\n            public void run() { ... }\n        }\n).start();\n```\n\n\n","slug":"java-inner-class-01","published":1,"updated":"2021-08-15T07:41:26.084Z","layout":"post","photos":[],"link":"","_id":"ckslj4ps7000lkw3qhua99mxz","content":"<h3 id=\"1-在同个java文件中但不是内部类\"><a class=\"markdownIt-Anchor\" href=\"#1-在同个java文件中但不是内部类\"></a> 1. 在同个java文件中，但不是内部类</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在同一个Java文件中只能存在一个public类，除内部类外</span></span><br><span class=\"line\"><span class=\"comment\">//只允许使用“public”、“abstract”和“final”。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    D d = <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-常规内部类\"><a class=\"markdownIt-Anchor\" href=\"#2-常规内部类\"></a> 2. 常规内部类</h3>\n<p>要实例化内部类对象，必须先有外部类对象，通过外部类对象.new 内部类();来实例化内部类对象，在其他文件或者其他包内都是这样，只是要能在其他包实例化的话，内部类Inner还得加上修饰符public。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Outter out = <span class=\"keyword\">new</span> Outter();</span><br><span class=\"line\">        Outter.Inner in = out.<span class=\"function\">new <span class=\"title\">Inner</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二种情况：通过提供方法来获取实例对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"number\">111</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> B <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        A a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">        B b = a.getInstance();</span><br><span class=\"line\">        b.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-静态内部类\"><a class=\"markdownIt-Anchor\" href=\"#3-静态内部类\"></a> 3. 静态内部类</h3>\n<p>实例化静态内部类和实例化常规内部类有类似的地方，而不同之处在与静态内部类由于是静态的，所以不需要外部类对象就可以实例化，如上例Outter.Inner in = new Outter.Inner();<br>\n在其他Java文件也是这么实例化的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outter</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Outter.Inner in = <span class=\"keyword\">new</span> Outter.Inner();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-局部内部类\"><a class=\"markdownIt-Anchor\" href=\"#4-局部内部类\"></a> 4. 局部内部类</h3>\n<p>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内，所以只能在方法或者该作用域内实例化,局部内部类不能有访问说明符,因为它不是外围类的一部分,但是可以访问当前代码块的常量,以及此外围类的所有成员</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pint</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pint</span><span class=\"params\">(<span class=\"keyword\">boolean</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b) &#123;</span><br><span class=\"line\">            <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-匿名内部类\"><a class=\"markdownIt-Anchor\" href=\"#5-匿名内部类\"></a> 5. 匿名内部类</h3>\n<p>匿名内部类可以继承一个类或实现一个接口，这里的ClassOrInterfaceName是匿名内部类所继承的类名或实现的接口名。但匿名内部类不能同时实现一个接口和继承一个类，也不能实现多个接口。如果实现了一个接口，该类是Object类的直接子类，匿名类继承一个类或实现一个接口，不需要extends和implements关键字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;() &#123;&#123;</span><br><span class=\"line\">        add(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">        add(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">        add(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123; ... &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">).start();</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"1-在同个java文件中但不是内部类\"><a class=\"markdownIt-Anchor\" href=\"#1-在同个java文件中但不是内部类\"></a> 1. 在同个java文件中，但不是内部类</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在同一个Java文件中只能存在一个public类，除内部类外</span></span><br><span class=\"line\"><span class=\"comment\">//只允许使用“public”、“abstract”和“final”。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    D d = <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-常规内部类\"><a class=\"markdownIt-Anchor\" href=\"#2-常规内部类\"></a> 2. 常规内部类</h3>\n<p>要实例化内部类对象，必须先有外部类对象，通过外部类对象.new 内部类();来实例化内部类对象，在其他文件或者其他包内都是这样，只是要能在其他包实例化的话，内部类Inner还得加上修饰符public。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Outter out = <span class=\"keyword\">new</span> Outter();</span><br><span class=\"line\">        Outter.Inner in = out.<span class=\"function\">new <span class=\"title\">Inner</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二种情况：通过提供方法来获取实例对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"number\">111</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> B <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        A a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">        B b = a.getInstance();</span><br><span class=\"line\">        b.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-静态内部类\"><a class=\"markdownIt-Anchor\" href=\"#3-静态内部类\"></a> 3. 静态内部类</h3>\n<p>实例化静态内部类和实例化常规内部类有类似的地方，而不同之处在与静态内部类由于是静态的，所以不需要外部类对象就可以实例化，如上例Outter.Inner in = new Outter.Inner();<br>\n在其他Java文件也是这么实例化的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outter</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Outter.Inner in = <span class=\"keyword\">new</span> Outter.Inner();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-局部内部类\"><a class=\"markdownIt-Anchor\" href=\"#4-局部内部类\"></a> 4. 局部内部类</h3>\n<p>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内，所以只能在方法或者该作用域内实例化,局部内部类不能有访问说明符,因为它不是外围类的一部分,但是可以访问当前代码块的常量,以及此外围类的所有成员</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pint</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pint</span><span class=\"params\">(<span class=\"keyword\">boolean</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b) &#123;</span><br><span class=\"line\">            <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> D();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-匿名内部类\"><a class=\"markdownIt-Anchor\" href=\"#5-匿名内部类\"></a> 5. 匿名内部类</h3>\n<p>匿名内部类可以继承一个类或实现一个接口，这里的ClassOrInterfaceName是匿名内部类所继承的类名或实现的接口名。但匿名内部类不能同时实现一个接口和继承一个类，也不能实现多个接口。如果实现了一个接口，该类是Object类的直接子类，匿名类继承一个类或实现一个接口，不需要extends和implements关键字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;() &#123;&#123;</span><br><span class=\"line\">        add(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">        add(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">        add(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123; ... &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">).start();</span><br></pre></td></tr></table></figure>\n"},{"title":"Java 8学习","comments":0,"translate_title":"java-8-learning","date":"2020-04-23T06:04:02.000Z","_content":"\n## 1. Optional\nOptional 类主要解决的问题是臭名昭著的空指针异常（NullPointerException)。\n本质上，这是一个包含有可选值的包装类，这意味着 Optional 类既可以含有对象也可以为空\n### 1.1. optional构造方式\n\n- Optional.of(T)\n\n    该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。\n\n- Optional.ofNullable(T)\n\n    该方式的入参可以为null，当入参不确定为非null时使用。\n\n- Optional.empty()\n\n    这种方式是返回一个空Optional，等效Optional.ofNullable(null)\n\n### 1.2. 如何正确的使用Optional\n\n- 尽量避免使用的地方\n\n    1. 避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null != obj没有区别，这样用就没什么意义了。\n\n    2. 避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。\n\n    3. 避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。\n\n    4. 避免使用Optional作为方法的参数，原因同3。\n\n- 正确使用方式\n\n    1. 实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse/orElseGet方式：\n\n        ```java\n        //存在则返回\n        User king = new User(1, \"king\");\n        Optional<User> userOpt = Optional.of(king);\n        User user =  userOpt.orElse(null);\n        System.out.println(user.getName());\n        \n        //不存在提供默认值\n        User user2 = null;\n        Optional<User> userOpt2 = Optional.ofNullable(user2);\n        User user3 = userOpt2.orElse(unknown);\n        System.out.println(user3.getName());\n        \n        //通过方法提供值\n        User user4 = userOpt2.orElseGet(() -> new User(0, \"DEFAULT\")); \n        System.out.println(user4.getName())\n            \n         //不建议下面这种使用\n        if(userOpt.isPresent()) {\n            System.out.println(userOpt.get().getName());\n        } else {\n            //。。。\n        }\n        ```\n\n    2. 使用ifPresent()来进行对象操作，存在则操作，否则不操作。\n\n        ```java\n        //实例存在则操作，否则不操作\n        userOpt.ifPresent(u -> System.out.println(u.getName()));\n        userOpt2.ifPresent(u -> System.out.println(u.getName()));\n        ```\n\n    3. 使用map/flatMap来获取关联数据\n\n        ```java\n        //使用map方法获取关联数据\n        System.out.println(userOpt.map(u -> u.getName()).orElse(\"Unknown\"));\n        System.out.println(userOpt2.map(u -> u.getName()).orElse(\"Default\"));\n        //使用flatMap方法获取关联数据\n        List<String> interests = new ArrayList<String>();\n        interests.add(\"a\");interests.add(\"b\");interests.add(\"c\");\n        user.setInterests(interests);\n        List<String> interests2 = Optional.of(user)\n            .flatMap(u -> Optional.ofNullable(u.getInterests()))\n            .orElse(Collections.emptyList());\n        System.out.println(interests2.isEmpty());\n        ```\n\n        \n\n### 1.3.Optional判断第三方接口\n\n使用java8的optional可以减少很多的NPE，再也不用当心别人的接口返回值问题了，也不用满屏的if（a != null）这种判断，下面是使用过程中遇到的问题以及如何使用Optional解决。\n\n#### 1.3.1. 接口返回参数问题\n\n1. 在微服务中使用feign调用其他接口，总担心别人返回的参数是否符合标准\n2. 参数符合标准后，然后再进行数据判断，先判断是否code为200，然后判断数据存不存在，这样冗余的代码就很多\n\n这是我们期望的返回格式\n\n```json\n{\n\t\"code\": \"200\",\n\t\"msg\": \"调用成功!\",\n\t\"data\": []\n}\n```\n\n```java\n//模拟接口调用方法\nMap<String,Object> map = serviceImpl.queryList();\n//即使map为空也能正常返回，配合map直接映射数据值\nreturn Optional.ofNullable(map).map(r-> r.get(\"data\")).orElseGet(ArrayList:: new)\n    \n //JSONObject 判断是否返回成功，如果成功返回200， 不成功返回400   \nJSONObject jsonObject = service.updateDate();\nOptional.ofNullable(jsonObject).map(r->r.getInteger(\"code\")).orElse(400)\n```\n\n#### 1.3.2. 避免判断风暴\n\n对象层层嵌套，为了逻辑严谨必须要进行空判断\n\n```java\n//对于一个对象里面嵌套对象，那么需要层层去判断非空\nSchool school = null;\nif(school != null){\n    Clazz clazz = school.getClazz();\n    if(clazz != null){\n        Student student = clazz.getStudent();\n        if(student != null){\n            String name = student.getName();\n            if(name == null || \"\".equals(name)){\n                name = \"学生的姓名为空\";\n            }\n        }\n    }\n}\n//使用Optional后\n String name = Optional.ofNullable(school)\n                .map(School::getClazz)\n                .map(Clazz::getStudent)\n                .map(Student::getName)\n                .orElse(\"学生的姓名为空\");\n```\n\n## 2. Stream\n\n```java\n//找出某一个字段等于某个值的那一条数据\nJaponicaRiceCheck1 streamCheck = listItemRice.stream()\n.filter(o -> o.getSYS_PARENTID().equals(check.getSYS_ID())).findAny().orElse(null);\n```\n\n","source":"_posts/java8特性.md","raw":"---\ntitle: Java 8学习\ntags: java\ncategories: java\ncomments: false\ntranslate_title: java-8-learning\ndate: 2020-04-23 14:04:02\n---\n\n## 1. Optional\nOptional 类主要解决的问题是臭名昭著的空指针异常（NullPointerException)。\n本质上，这是一个包含有可选值的包装类，这意味着 Optional 类既可以含有对象也可以为空\n### 1.1. optional构造方式\n\n- Optional.of(T)\n\n    该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。\n\n- Optional.ofNullable(T)\n\n    该方式的入参可以为null，当入参不确定为非null时使用。\n\n- Optional.empty()\n\n    这种方式是返回一个空Optional，等效Optional.ofNullable(null)\n\n### 1.2. 如何正确的使用Optional\n\n- 尽量避免使用的地方\n\n    1. 避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null != obj没有区别，这样用就没什么意义了。\n\n    2. 避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。\n\n    3. 避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。\n\n    4. 避免使用Optional作为方法的参数，原因同3。\n\n- 正确使用方式\n\n    1. 实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse/orElseGet方式：\n\n        ```java\n        //存在则返回\n        User king = new User(1, \"king\");\n        Optional<User> userOpt = Optional.of(king);\n        User user =  userOpt.orElse(null);\n        System.out.println(user.getName());\n        \n        //不存在提供默认值\n        User user2 = null;\n        Optional<User> userOpt2 = Optional.ofNullable(user2);\n        User user3 = userOpt2.orElse(unknown);\n        System.out.println(user3.getName());\n        \n        //通过方法提供值\n        User user4 = userOpt2.orElseGet(() -> new User(0, \"DEFAULT\")); \n        System.out.println(user4.getName())\n            \n         //不建议下面这种使用\n        if(userOpt.isPresent()) {\n            System.out.println(userOpt.get().getName());\n        } else {\n            //。。。\n        }\n        ```\n\n    2. 使用ifPresent()来进行对象操作，存在则操作，否则不操作。\n\n        ```java\n        //实例存在则操作，否则不操作\n        userOpt.ifPresent(u -> System.out.println(u.getName()));\n        userOpt2.ifPresent(u -> System.out.println(u.getName()));\n        ```\n\n    3. 使用map/flatMap来获取关联数据\n\n        ```java\n        //使用map方法获取关联数据\n        System.out.println(userOpt.map(u -> u.getName()).orElse(\"Unknown\"));\n        System.out.println(userOpt2.map(u -> u.getName()).orElse(\"Default\"));\n        //使用flatMap方法获取关联数据\n        List<String> interests = new ArrayList<String>();\n        interests.add(\"a\");interests.add(\"b\");interests.add(\"c\");\n        user.setInterests(interests);\n        List<String> interests2 = Optional.of(user)\n            .flatMap(u -> Optional.ofNullable(u.getInterests()))\n            .orElse(Collections.emptyList());\n        System.out.println(interests2.isEmpty());\n        ```\n\n        \n\n### 1.3.Optional判断第三方接口\n\n使用java8的optional可以减少很多的NPE，再也不用当心别人的接口返回值问题了，也不用满屏的if（a != null）这种判断，下面是使用过程中遇到的问题以及如何使用Optional解决。\n\n#### 1.3.1. 接口返回参数问题\n\n1. 在微服务中使用feign调用其他接口，总担心别人返回的参数是否符合标准\n2. 参数符合标准后，然后再进行数据判断，先判断是否code为200，然后判断数据存不存在，这样冗余的代码就很多\n\n这是我们期望的返回格式\n\n```json\n{\n\t\"code\": \"200\",\n\t\"msg\": \"调用成功!\",\n\t\"data\": []\n}\n```\n\n```java\n//模拟接口调用方法\nMap<String,Object> map = serviceImpl.queryList();\n//即使map为空也能正常返回，配合map直接映射数据值\nreturn Optional.ofNullable(map).map(r-> r.get(\"data\")).orElseGet(ArrayList:: new)\n    \n //JSONObject 判断是否返回成功，如果成功返回200， 不成功返回400   \nJSONObject jsonObject = service.updateDate();\nOptional.ofNullable(jsonObject).map(r->r.getInteger(\"code\")).orElse(400)\n```\n\n#### 1.3.2. 避免判断风暴\n\n对象层层嵌套，为了逻辑严谨必须要进行空判断\n\n```java\n//对于一个对象里面嵌套对象，那么需要层层去判断非空\nSchool school = null;\nif(school != null){\n    Clazz clazz = school.getClazz();\n    if(clazz != null){\n        Student student = clazz.getStudent();\n        if(student != null){\n            String name = student.getName();\n            if(name == null || \"\".equals(name)){\n                name = \"学生的姓名为空\";\n            }\n        }\n    }\n}\n//使用Optional后\n String name = Optional.ofNullable(school)\n                .map(School::getClazz)\n                .map(Clazz::getStudent)\n                .map(Student::getName)\n                .orElse(\"学生的姓名为空\");\n```\n\n## 2. Stream\n\n```java\n//找出某一个字段等于某个值的那一条数据\nJaponicaRiceCheck1 streamCheck = listItemRice.stream()\n.filter(o -> o.getSYS_PARENTID().equals(check.getSYS_ID())).findAny().orElse(null);\n```\n\n","slug":"java8特性","published":1,"updated":"2021-08-15T07:41:26.084Z","layout":"post","photos":[],"link":"","_id":"ckslj4ps8000nkw3q61d0gfnh","content":"<h2 id=\"1-optional\"><a class=\"markdownIt-Anchor\" href=\"#1-optional\"></a> 1. Optional</h2>\n<p>Optional 类主要解决的问题是臭名昭著的空指针异常（NullPointerException)。<br>\n本质上，这是一个包含有可选值的包装类，这意味着 Optional 类既可以含有对象也可以为空</p>\n<h3 id=\"11-optional构造方式\"><a class=\"markdownIt-Anchor\" href=\"#11-optional构造方式\"></a> 1.1. optional构造方式</h3>\n<ul>\n<li>\n<p>Optional.of(T)</p>\n<p>该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。</p>\n</li>\n<li>\n<p>Optional.ofNullable(T)</p>\n<p>该方式的入参可以为null，当入参不确定为非null时使用。</p>\n</li>\n<li>\n<p>Optional.empty()</p>\n<p>这种方式是返回一个空Optional，等效Optional.ofNullable(null)</p>\n</li>\n</ul>\n<h3 id=\"12-如何正确的使用optional\"><a class=\"markdownIt-Anchor\" href=\"#12-如何正确的使用optional\"></a> 1.2. 如何正确的使用Optional</h3>\n<ul>\n<li>\n<p>尽量避免使用的地方</p>\n<ol>\n<li>\n<p>避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null != obj没有区别，这样用就没什么意义了。</p>\n</li>\n<li>\n<p>避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。</p>\n</li>\n<li>\n<p>避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。</p>\n</li>\n<li>\n<p>避免使用Optional作为方法的参数，原因同3。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>正确使用方式</p>\n<ol>\n<li>\n<p>实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse/orElseGet方式：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//存在则返回</span></span><br><span class=\"line\">User king = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">&quot;king&quot;</span>);</span><br><span class=\"line\">Optional&lt;User&gt; userOpt = Optional.of(king);</span><br><span class=\"line\">User user =  userOpt.orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">System.out.println(user.getName());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不存在提供默认值</span></span><br><span class=\"line\">User user2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">Optional&lt;User&gt; userOpt2 = Optional.ofNullable(user2);</span><br><span class=\"line\">User user3 = userOpt2.orElse(unknown);</span><br><span class=\"line\">System.out.println(user3.getName());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过方法提供值</span></span><br><span class=\"line\">User user4 = userOpt2.orElseGet(() -&gt; <span class=\"keyword\">new</span> User(<span class=\"number\">0</span>, <span class=\"string\">&quot;DEFAULT&quot;</span>)); </span><br><span class=\"line\">System.out.println(user4.getName())</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\">//不建议下面这种使用</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(userOpt.isPresent()) &#123;</span><br><span class=\"line\">    System.out.println(userOpt.get().getName());</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//。。。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用ifPresent()来进行对象操作，存在则操作，否则不操作。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例存在则操作，否则不操作</span></span><br><span class=\"line\">userOpt.ifPresent(u -&gt; System.out.println(u.getName()));</span><br><span class=\"line\">userOpt2.ifPresent(u -&gt; System.out.println(u.getName()));</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用map/flatMap来获取关联数据</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用map方法获取关联数据</span></span><br><span class=\"line\">System.out.println(userOpt.map(u -&gt; u.getName()).orElse(<span class=\"string\">&quot;Unknown&quot;</span>));</span><br><span class=\"line\">System.out.println(userOpt2.map(u -&gt; u.getName()).orElse(<span class=\"string\">&quot;Default&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">//使用flatMap方法获取关联数据</span></span><br><span class=\"line\">List&lt;String&gt; interests = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">interests.add(<span class=\"string\">&quot;a&quot;</span>);interests.add(<span class=\"string\">&quot;b&quot;</span>);interests.add(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">user.setInterests(interests);</span><br><span class=\"line\">List&lt;String&gt; interests2 = Optional.of(user)</span><br><span class=\"line\">    .flatMap(u -&gt; Optional.ofNullable(u.getInterests()))</span><br><span class=\"line\">    .orElse(Collections.emptyList());</span><br><span class=\"line\">System.out.println(interests2.isEmpty());</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"13optional判断第三方接口\"><a class=\"markdownIt-Anchor\" href=\"#13optional判断第三方接口\"></a> 1.3.Optional判断第三方接口</h3>\n<p>使用java8的optional可以减少很多的NPE，再也不用当心别人的接口返回值问题了，也不用满屏的if（a != null）这种判断，下面是使用过程中遇到的问题以及如何使用Optional解决。</p>\n<h4 id=\"131-接口返回参数问题\"><a class=\"markdownIt-Anchor\" href=\"#131-接口返回参数问题\"></a> 1.3.1. 接口返回参数问题</h4>\n<ol>\n<li>在微服务中使用feign调用其他接口，总担心别人返回的参数是否符合标准</li>\n<li>参数符合标准后，然后再进行数据判断，先判断是否code为200，然后判断数据存不存在，这样冗余的代码就很多</li>\n</ol>\n<p>这是我们期望的返回格式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;code&quot;</span>: <span class=\"string\">&quot;200&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;msg&quot;</span>: <span class=\"string\">&quot;调用成功!&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;data&quot;</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟接口调用方法</span></span><br><span class=\"line\">Map&lt;String,Object&gt; map = serviceImpl.queryList();</span><br><span class=\"line\"><span class=\"comment\">//即使map为空也能正常返回，配合map直接映射数据值</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> Optional.ofNullable(map).map(r-&gt; r.get(<span class=\"string\">&quot;data&quot;</span>)).orElseGet(ArrayList:: <span class=\"keyword\">new</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\">//JSONObject 判断是否返回成功，如果成功返回200， 不成功返回400   </span></span><br><span class=\"line\">JSONObject jsonObject = service.updateDate();</span><br><span class=\"line\">Optional.ofNullable(jsonObject).map(r-&gt;r.getInteger(<span class=\"string\">&quot;code&quot;</span>)).orElse(<span class=\"number\">400</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"132-避免判断风暴\"><a class=\"markdownIt-Anchor\" href=\"#132-避免判断风暴\"></a> 1.3.2. 避免判断风暴</h4>\n<p>对象层层嵌套，为了逻辑严谨必须要进行空判断</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对于一个对象里面嵌套对象，那么需要层层去判断非空</span></span><br><span class=\"line\">School school = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(school != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    Clazz clazz = school.getClazz();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(clazz != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Student student = clazz.getStudent();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(student != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            String name = student.getName();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(name == <span class=\"keyword\">null</span> || <span class=\"string\">&quot;&quot;</span>.equals(name))&#123;</span><br><span class=\"line\">                name = <span class=\"string\">&quot;学生的姓名为空&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用Optional后</span></span><br><span class=\"line\"> String name = Optional.ofNullable(school)</span><br><span class=\"line\">                .map(School::getClazz)</span><br><span class=\"line\">                .map(Clazz::getStudent)</span><br><span class=\"line\">                .map(Student::getName)</span><br><span class=\"line\">                .orElse(<span class=\"string\">&quot;学生的姓名为空&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-stream\"><a class=\"markdownIt-Anchor\" href=\"#2-stream\"></a> 2. Stream</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//找出某一个字段等于某个值的那一条数据</span></span><br><span class=\"line\">JaponicaRiceCheck1 streamCheck = listItemRice.stream()</span><br><span class=\"line\">.filter(o -&gt; o.getSYS_PARENTID().equals(check.getSYS_ID())).findAny().orElse(<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1-optional\"><a class=\"markdownIt-Anchor\" href=\"#1-optional\"></a> 1. Optional</h2>\n<p>Optional 类主要解决的问题是臭名昭著的空指针异常（NullPointerException)。<br>\n本质上，这是一个包含有可选值的包装类，这意味着 Optional 类既可以含有对象也可以为空</p>\n<h3 id=\"11-optional构造方式\"><a class=\"markdownIt-Anchor\" href=\"#11-optional构造方式\"></a> 1.1. optional构造方式</h3>\n<ul>\n<li>\n<p>Optional.of(T)</p>\n<p>该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。</p>\n</li>\n<li>\n<p>Optional.ofNullable(T)</p>\n<p>该方式的入参可以为null，当入参不确定为非null时使用。</p>\n</li>\n<li>\n<p>Optional.empty()</p>\n<p>这种方式是返回一个空Optional，等效Optional.ofNullable(null)</p>\n</li>\n</ul>\n<h3 id=\"12-如何正确的使用optional\"><a class=\"markdownIt-Anchor\" href=\"#12-如何正确的使用optional\"></a> 1.2. 如何正确的使用Optional</h3>\n<ul>\n<li>\n<p>尽量避免使用的地方</p>\n<ol>\n<li>\n<p>避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null != obj没有区别，这样用就没什么意义了。</p>\n</li>\n<li>\n<p>避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。</p>\n</li>\n<li>\n<p>避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。</p>\n</li>\n<li>\n<p>避免使用Optional作为方法的参数，原因同3。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>正确使用方式</p>\n<ol>\n<li>\n<p>实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse/orElseGet方式：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//存在则返回</span></span><br><span class=\"line\">User king = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">&quot;king&quot;</span>);</span><br><span class=\"line\">Optional&lt;User&gt; userOpt = Optional.of(king);</span><br><span class=\"line\">User user =  userOpt.orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">System.out.println(user.getName());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不存在提供默认值</span></span><br><span class=\"line\">User user2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">Optional&lt;User&gt; userOpt2 = Optional.ofNullable(user2);</span><br><span class=\"line\">User user3 = userOpt2.orElse(unknown);</span><br><span class=\"line\">System.out.println(user3.getName());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过方法提供值</span></span><br><span class=\"line\">User user4 = userOpt2.orElseGet(() -&gt; <span class=\"keyword\">new</span> User(<span class=\"number\">0</span>, <span class=\"string\">&quot;DEFAULT&quot;</span>)); </span><br><span class=\"line\">System.out.println(user4.getName())</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\">//不建议下面这种使用</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(userOpt.isPresent()) &#123;</span><br><span class=\"line\">    System.out.println(userOpt.get().getName());</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//。。。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用ifPresent()来进行对象操作，存在则操作，否则不操作。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例存在则操作，否则不操作</span></span><br><span class=\"line\">userOpt.ifPresent(u -&gt; System.out.println(u.getName()));</span><br><span class=\"line\">userOpt2.ifPresent(u -&gt; System.out.println(u.getName()));</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用map/flatMap来获取关联数据</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用map方法获取关联数据</span></span><br><span class=\"line\">System.out.println(userOpt.map(u -&gt; u.getName()).orElse(<span class=\"string\">&quot;Unknown&quot;</span>));</span><br><span class=\"line\">System.out.println(userOpt2.map(u -&gt; u.getName()).orElse(<span class=\"string\">&quot;Default&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">//使用flatMap方法获取关联数据</span></span><br><span class=\"line\">List&lt;String&gt; interests = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">interests.add(<span class=\"string\">&quot;a&quot;</span>);interests.add(<span class=\"string\">&quot;b&quot;</span>);interests.add(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">user.setInterests(interests);</span><br><span class=\"line\">List&lt;String&gt; interests2 = Optional.of(user)</span><br><span class=\"line\">    .flatMap(u -&gt; Optional.ofNullable(u.getInterests()))</span><br><span class=\"line\">    .orElse(Collections.emptyList());</span><br><span class=\"line\">System.out.println(interests2.isEmpty());</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"13optional判断第三方接口\"><a class=\"markdownIt-Anchor\" href=\"#13optional判断第三方接口\"></a> 1.3.Optional判断第三方接口</h3>\n<p>使用java8的optional可以减少很多的NPE，再也不用当心别人的接口返回值问题了，也不用满屏的if（a != null）这种判断，下面是使用过程中遇到的问题以及如何使用Optional解决。</p>\n<h4 id=\"131-接口返回参数问题\"><a class=\"markdownIt-Anchor\" href=\"#131-接口返回参数问题\"></a> 1.3.1. 接口返回参数问题</h4>\n<ol>\n<li>在微服务中使用feign调用其他接口，总担心别人返回的参数是否符合标准</li>\n<li>参数符合标准后，然后再进行数据判断，先判断是否code为200，然后判断数据存不存在，这样冗余的代码就很多</li>\n</ol>\n<p>这是我们期望的返回格式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">&quot;code&quot;</span>: <span class=\"string\">&quot;200&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;msg&quot;</span>: <span class=\"string\">&quot;调用成功!&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">&quot;data&quot;</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟接口调用方法</span></span><br><span class=\"line\">Map&lt;String,Object&gt; map = serviceImpl.queryList();</span><br><span class=\"line\"><span class=\"comment\">//即使map为空也能正常返回，配合map直接映射数据值</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> Optional.ofNullable(map).map(r-&gt; r.get(<span class=\"string\">&quot;data&quot;</span>)).orElseGet(ArrayList:: <span class=\"keyword\">new</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"comment\">//JSONObject 判断是否返回成功，如果成功返回200， 不成功返回400   </span></span><br><span class=\"line\">JSONObject jsonObject = service.updateDate();</span><br><span class=\"line\">Optional.ofNullable(jsonObject).map(r-&gt;r.getInteger(<span class=\"string\">&quot;code&quot;</span>)).orElse(<span class=\"number\">400</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"132-避免判断风暴\"><a class=\"markdownIt-Anchor\" href=\"#132-避免判断风暴\"></a> 1.3.2. 避免判断风暴</h4>\n<p>对象层层嵌套，为了逻辑严谨必须要进行空判断</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对于一个对象里面嵌套对象，那么需要层层去判断非空</span></span><br><span class=\"line\">School school = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(school != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    Clazz clazz = school.getClazz();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(clazz != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Student student = clazz.getStudent();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(student != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            String name = student.getName();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(name == <span class=\"keyword\">null</span> || <span class=\"string\">&quot;&quot;</span>.equals(name))&#123;</span><br><span class=\"line\">                name = <span class=\"string\">&quot;学生的姓名为空&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用Optional后</span></span><br><span class=\"line\"> String name = Optional.ofNullable(school)</span><br><span class=\"line\">                .map(School::getClazz)</span><br><span class=\"line\">                .map(Clazz::getStudent)</span><br><span class=\"line\">                .map(Student::getName)</span><br><span class=\"line\">                .orElse(<span class=\"string\">&quot;学生的姓名为空&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-stream\"><a class=\"markdownIt-Anchor\" href=\"#2-stream\"></a> 2. Stream</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//找出某一个字段等于某个值的那一条数据</span></span><br><span class=\"line\">JaponicaRiceCheck1 streamCheck = listItemRice.stream()</span><br><span class=\"line\">.filter(o -&gt; o.getSYS_PARENTID().equals(check.getSYS_ID())).findAny().orElse(<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n"},{"title":"锁优化","comments":0,"translate_title":"lock-optimization","date":"2021-07-23T06:04:02.000Z","_content":" \n\n## 1. 优化思路以及方法\n\n- 减少锁持有时间\n- 减小锁粒度\n- 锁分离\n- 锁粗化\n- 锁消除\n\n### 1.1 减少锁持有时间\n\n```java\npublic synchronized void syncMethod(){\n    othercode1();\n    mutextMethod();\n    othercode2();\n}\n```\n\n像上述代码，在进入方法前就要得到锁，其他线程就要在外面等待。\n\n分析：锁里面的资源在同一时间只允许一个线程执行，我们不仅要减少其他线程等待的时间，也要尽力减少线程在锁里面的执行时间，所以，尽量只有在有线程安全要求的程序代码上加锁。\n\n```java\npublic void syncMethod(){\n    othercode1();\n    synchronized(this){\n        metextMethod();\n    }\n    othercode2();\n}\n```\n\n### 1.2 减小锁粒度\n\n将大对象（这个对象可能会被很多线程访问）拆成小对象，大大增加并行度。\n\n降低锁竞争，那么偏向锁、轻量级锁成功率才会提高。\n\n最最典型的减小锁粒度的案例就是ConcurrentHashMap。在HashMap的基础上进行优化，使用了cas与synchronized来确保安全性，在保证安全性的基础上为了充分利用线程资源，更是巧妙的设计了多线程同扩容的模式。\n\n\n\n### 1.3 锁分离\n\n最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁。这样读读不互斥，读写互斥，写写互斥。既保证了线程安全，又提高了性能。\n\n分析：读写分离这种思想可以延伸到我们其他的设计中，只要操作上互不影响，那锁就可以进行分离，比如：LinkedBlockingQueue\n\n<img src=\"..\\images/read_writer_Lock1.png\" alt=\"read_writer_Lock1\" style=\"zoom: 67%;\" />\n\n从头部获取数据，从尾部放入数据，使用两把锁。\n\n\n\n### 1.4 锁粗化\n\n通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁，只有这样，等待在这个锁上的其他线程才能尽早的获取资源执行任务；但是凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化。\n\n```java\npublic void demoMethod(){\n    synchronized{\n    \t//dow sth.\n\t}\n    //....做其他不需要同步的工作，但能很快执行完毕\n    synchronized{\n        //do sth.\n    }\n}\n```\n\n这种情况，根据锁粗化的思想，应该合并：\n\n```java\npublic void demoMethod(){\n    //整合成一次锁请求,前提时中间哪些不需要同步的工作很快就执行完成\n    synchronized(lock){\n        //do sth.\n        //....做其他不需要同步的工作，但能很快执行完毕\n    }\n}\n```\n\n再举一个极端的例子：\n\n```java\nfor(int i =0; i < circle; i++){\n    synchronized(lock){\n        //.....\n    }\n}\n```\n\n在一个循环内不同得获得锁。虽然JDK内部会对这个代码做些优化，但是还不如直接写成：\n\n```java\nsynchronized(lock){\n    for(int i =0; i < circle; i++){\n    }\n}\n```\n\n当然如果有需求说，这样的循环太久，需要给其他线程不要等待太久，那只能写成上面那种。如果没有这样类似的需求，还是直接写成后者那种比较好。\n**分析**: 锁粗化是JVM默认启动的一种机制，锁粗化针对的是对连续的区域进行分段加锁这种场景，JVM会自发进行优化。但作为开发者而言在满足业务的情况下，应该减少锁的使用。\n\n### 1.5 锁消除\n\n锁消除是在编译器级别的事情。在即时编译器(JIT)时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。也许你会觉得奇怪，既然有些对象不可能被多线程访问，那为什么要加锁呢？写代码时直接不加锁不就好了。\n但是有时，这些锁并不是程序员所写的，有的是JDK实现中就有锁的，比如Vector和StringBuffer这样的类，它们中的很多方法都是有锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。\n\n```java\npublic static void main(String args[]) throws InterrruptedException{\n    long start = System.currentTimeTimeMillis();\n    for(int i = 0;i < 20000; i++){\n        createStringBuffer(\"JVM\",\"asdfasdfasdf\");\n    }\n    long bufferCost = System.currentTimeTimeMillis() - start;\n    System.out.println(\"createStringBuffer:\"+bufferCost+\"ms\");\n}\npublic static String createStringBuffer(String s1, String s2){\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb.toString();\n}\n```\n\n上述代码中的StringBuffer.append是一个同步操作，但是StringBuffer却是一个局部变量，并且方法也并没有把StringBuffer返回，所以不可能会有多线程去访问它。那么此时StringBuffer中的同步操作就是没有意义的。\n开启锁消除是在JVM参数上设置的，当然需要在server模式下：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks\n```\n\n并且要开启逃逸分析。 逃逸分析的作用呢，就是看看变量是否有可能逃出作用域的范围。\n比如上述的StringBuffer，上述代码中craeteStringBuffer的返回是一个String，所以这个局部变量StringBuffer在其他地方都不会被使用。如果将craeteStringBuffer改成\n\n```java\npublic static StringBuffer createStringBuffer(String s1, String s2){\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb;\n}\n```\n\n那么这个 StringBuffer被返回后，是有可能被任何其他地方所使用的（譬如被主函数将返回结果put进map啊等等）。那么JVM的逃逸分析可以分析出，这个局部变量 StringBuffer逃出了它的作用域。\n所以基于逃逸分析，JVM可以判断，如果这个局部变量StringBuffer并没有逃出它的作用域，那么可以确定这个StringBuffer并不会被多线程所访问，那么就可以把这些多余的锁给去掉来提高性能。\n当JVM参数为：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks\n```\n\n输出：\n\n```tex\ncreateStringBuffer: 302ms\n```\n\nJVM参数为：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:-EliminateLocks\n```\n\n输出：\n\n```tex\ncreateStringBuffer: 660ms\n```\n\n显然，锁消除的效果还是很明显的。","source":"_posts/lock01.md","raw":"---\ntitle: 锁优化\ntags: lock\ncomments: false\ntranslate_title: lock-optimization\ndate: 2021-07-23 14:04:02\n---\n \n\n## 1. 优化思路以及方法\n\n- 减少锁持有时间\n- 减小锁粒度\n- 锁分离\n- 锁粗化\n- 锁消除\n\n### 1.1 减少锁持有时间\n\n```java\npublic synchronized void syncMethod(){\n    othercode1();\n    mutextMethod();\n    othercode2();\n}\n```\n\n像上述代码，在进入方法前就要得到锁，其他线程就要在外面等待。\n\n分析：锁里面的资源在同一时间只允许一个线程执行，我们不仅要减少其他线程等待的时间，也要尽力减少线程在锁里面的执行时间，所以，尽量只有在有线程安全要求的程序代码上加锁。\n\n```java\npublic void syncMethod(){\n    othercode1();\n    synchronized(this){\n        metextMethod();\n    }\n    othercode2();\n}\n```\n\n### 1.2 减小锁粒度\n\n将大对象（这个对象可能会被很多线程访问）拆成小对象，大大增加并行度。\n\n降低锁竞争，那么偏向锁、轻量级锁成功率才会提高。\n\n最最典型的减小锁粒度的案例就是ConcurrentHashMap。在HashMap的基础上进行优化，使用了cas与synchronized来确保安全性，在保证安全性的基础上为了充分利用线程资源，更是巧妙的设计了多线程同扩容的模式。\n\n\n\n### 1.3 锁分离\n\n最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁。这样读读不互斥，读写互斥，写写互斥。既保证了线程安全，又提高了性能。\n\n分析：读写分离这种思想可以延伸到我们其他的设计中，只要操作上互不影响，那锁就可以进行分离，比如：LinkedBlockingQueue\n\n<img src=\"..\\images/read_writer_Lock1.png\" alt=\"read_writer_Lock1\" style=\"zoom: 67%;\" />\n\n从头部获取数据，从尾部放入数据，使用两把锁。\n\n\n\n### 1.4 锁粗化\n\n通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁，只有这样，等待在这个锁上的其他线程才能尽早的获取资源执行任务；但是凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化。\n\n```java\npublic void demoMethod(){\n    synchronized{\n    \t//dow sth.\n\t}\n    //....做其他不需要同步的工作，但能很快执行完毕\n    synchronized{\n        //do sth.\n    }\n}\n```\n\n这种情况，根据锁粗化的思想，应该合并：\n\n```java\npublic void demoMethod(){\n    //整合成一次锁请求,前提时中间哪些不需要同步的工作很快就执行完成\n    synchronized(lock){\n        //do sth.\n        //....做其他不需要同步的工作，但能很快执行完毕\n    }\n}\n```\n\n再举一个极端的例子：\n\n```java\nfor(int i =0; i < circle; i++){\n    synchronized(lock){\n        //.....\n    }\n}\n```\n\n在一个循环内不同得获得锁。虽然JDK内部会对这个代码做些优化，但是还不如直接写成：\n\n```java\nsynchronized(lock){\n    for(int i =0; i < circle; i++){\n    }\n}\n```\n\n当然如果有需求说，这样的循环太久，需要给其他线程不要等待太久，那只能写成上面那种。如果没有这样类似的需求，还是直接写成后者那种比较好。\n**分析**: 锁粗化是JVM默认启动的一种机制，锁粗化针对的是对连续的区域进行分段加锁这种场景，JVM会自发进行优化。但作为开发者而言在满足业务的情况下，应该减少锁的使用。\n\n### 1.5 锁消除\n\n锁消除是在编译器级别的事情。在即时编译器(JIT)时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。也许你会觉得奇怪，既然有些对象不可能被多线程访问，那为什么要加锁呢？写代码时直接不加锁不就好了。\n但是有时，这些锁并不是程序员所写的，有的是JDK实现中就有锁的，比如Vector和StringBuffer这样的类，它们中的很多方法都是有锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。\n\n```java\npublic static void main(String args[]) throws InterrruptedException{\n    long start = System.currentTimeTimeMillis();\n    for(int i = 0;i < 20000; i++){\n        createStringBuffer(\"JVM\",\"asdfasdfasdf\");\n    }\n    long bufferCost = System.currentTimeTimeMillis() - start;\n    System.out.println(\"createStringBuffer:\"+bufferCost+\"ms\");\n}\npublic static String createStringBuffer(String s1, String s2){\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb.toString();\n}\n```\n\n上述代码中的StringBuffer.append是一个同步操作，但是StringBuffer却是一个局部变量，并且方法也并没有把StringBuffer返回，所以不可能会有多线程去访问它。那么此时StringBuffer中的同步操作就是没有意义的。\n开启锁消除是在JVM参数上设置的，当然需要在server模式下：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks\n```\n\n并且要开启逃逸分析。 逃逸分析的作用呢，就是看看变量是否有可能逃出作用域的范围。\n比如上述的StringBuffer，上述代码中craeteStringBuffer的返回是一个String，所以这个局部变量StringBuffer在其他地方都不会被使用。如果将craeteStringBuffer改成\n\n```java\npublic static StringBuffer createStringBuffer(String s1, String s2){\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb;\n}\n```\n\n那么这个 StringBuffer被返回后，是有可能被任何其他地方所使用的（譬如被主函数将返回结果put进map啊等等）。那么JVM的逃逸分析可以分析出，这个局部变量 StringBuffer逃出了它的作用域。\n所以基于逃逸分析，JVM可以判断，如果这个局部变量StringBuffer并没有逃出它的作用域，那么可以确定这个StringBuffer并不会被多线程所访问，那么就可以把这些多余的锁给去掉来提高性能。\n当JVM参数为：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks\n```\n\n输出：\n\n```tex\ncreateStringBuffer: 302ms\n```\n\nJVM参数为：\n\n```tex\n-server -XX:+DoEscapeAnalysis -XX:-EliminateLocks\n```\n\n输出：\n\n```tex\ncreateStringBuffer: 660ms\n```\n\n显然，锁消除的效果还是很明显的。","slug":"lock01","published":1,"updated":"2021-08-15T07:41:26.084Z","layout":"post","photos":[],"link":"","_id":"ckslj4ps9000rkw3q1em865f8","content":"<h2 id=\"1-优化思路以及方法\"><a class=\"markdownIt-Anchor\" href=\"#1-优化思路以及方法\"></a> 1. 优化思路以及方法</h2>\n<ul>\n<li>减少锁持有时间</li>\n<li>减小锁粒度</li>\n<li>锁分离</li>\n<li>锁粗化</li>\n<li>锁消除</li>\n</ul>\n<h3 id=\"11-减少锁持有时间\"><a class=\"markdownIt-Anchor\" href=\"#11-减少锁持有时间\"></a> 1.1 减少锁持有时间</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">syncMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    othercode1();</span><br><span class=\"line\">    mutextMethod();</span><br><span class=\"line\">    othercode2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>像上述代码，在进入方法前就要得到锁，其他线程就要在外面等待。</p>\n<p>分析：锁里面的资源在同一时间只允许一个线程执行，我们不仅要减少其他线程等待的时间，也要尽力减少线程在锁里面的执行时间，所以，尽量只有在有线程安全要求的程序代码上加锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">syncMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    othercode1();</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">        metextMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    othercode2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-减小锁粒度\"><a class=\"markdownIt-Anchor\" href=\"#12-减小锁粒度\"></a> 1.2 减小锁粒度</h3>\n<p>将大对象（这个对象可能会被很多线程访问）拆成小对象，大大增加并行度。</p>\n<p>降低锁竞争，那么偏向锁、轻量级锁成功率才会提高。</p>\n<p>最最典型的减小锁粒度的案例就是ConcurrentHashMap。在HashMap的基础上进行优化，使用了cas与synchronized来确保安全性，在保证安全性的基础上为了充分利用线程资源，更是巧妙的设计了多线程同扩容的模式。</p>\n<h3 id=\"13-锁分离\"><a class=\"markdownIt-Anchor\" href=\"#13-锁分离\"></a> 1.3 锁分离</h3>\n<p>最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁。这样读读不互斥，读写互斥，写写互斥。既保证了线程安全，又提高了性能。</p>\n<p>分析：读写分离这种思想可以延伸到我们其他的设计中，只要操作上互不影响，那锁就可以进行分离，比如：LinkedBlockingQueue</p>\n<img src=\"..\\images/read_writer_Lock1.png\" alt=\"read_writer_Lock1\" style=\"zoom: 67%;\">\n<p>从头部获取数据，从尾部放入数据，使用两把锁。</p>\n<h3 id=\"14-锁粗化\"><a class=\"markdownIt-Anchor\" href=\"#14-锁粗化\"></a> 1.4 锁粗化</h3>\n<p>通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁，只有这样，等待在这个锁上的其他线程才能尽早的获取资源执行任务；但是凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//dow sth.</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种情况，根据锁粗化的思想，应该合并：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//整合成一次锁请求,前提时中间哪些不需要同步的工作很快就执行完成</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">        <span class=\"comment\">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再举一个极端的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; circle; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//.....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在一个循环内不同得获得锁。虽然JDK内部会对这个代码做些优化，但是还不如直接写成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; circle; i++)&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然如果有需求说，这样的循环太久，需要给其他线程不要等待太久，那只能写成上面那种。如果没有这样类似的需求，还是直接写成后者那种比较好。<br>\n<strong>分析</strong>: 锁粗化是JVM默认启动的一种机制，锁粗化针对的是对连续的区域进行分段加锁这种场景，JVM会自发进行优化。但作为开发者而言在满足业务的情况下，应该减少锁的使用。</p>\n<h3 id=\"15-锁消除\"><a class=\"markdownIt-Anchor\" href=\"#15-锁消除\"></a> 1.5 锁消除</h3>\n<p>锁消除是在编译器级别的事情。在即时编译器(JIT)时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。也许你会觉得奇怪，既然有些对象不可能被多线程访问，那为什么要加锁呢？写代码时直接不加锁不就好了。<br>\n但是有时，这些锁并不是程序员所写的，有的是JDK实现中就有锁的，比如Vector和StringBuffer这样的类，它们中的很多方法都是有锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> InterrruptedException</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> start = System.currentTimeTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">20000</span>; i++)&#123;</span><br><span class=\"line\">        createStringBuffer(<span class=\"string\">&quot;JVM&quot;</span>,<span class=\"string\">&quot;asdfasdfasdf&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> bufferCost = System.currentTimeTimeMillis() - start;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;createStringBuffer:&quot;</span>+bufferCost+<span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span></span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    sb.append(s1);</span><br><span class=\"line\">    sb.append(s2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码中的StringBuffer.append是一个同步操作，但是StringBuffer却是一个局部变量，并且方法也并没有把StringBuffer返回，所以不可能会有多线程去访问它。那么此时StringBuffer中的同步操作就是没有意义的。<br>\n开启锁消除是在JVM参数上设置的，当然需要在server模式下：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>\n<p>并且要开启逃逸分析。 逃逸分析的作用呢，就是看看变量是否有可能逃出作用域的范围。<br>\n比如上述的StringBuffer，上述代码中craeteStringBuffer的返回是一个String，所以这个局部变量StringBuffer在其他地方都不会被使用。如果将craeteStringBuffer改成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> StringBuffer <span class=\"title\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span></span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    sb.append(s1);</span><br><span class=\"line\">    sb.append(s2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么这个 StringBuffer被返回后，是有可能被任何其他地方所使用的（譬如被主函数将返回结果put进map啊等等）。那么JVM的逃逸分析可以分析出，这个局部变量 StringBuffer逃出了它的作用域。<br>\n所以基于逃逸分析，JVM可以判断，如果这个局部变量StringBuffer并没有逃出它的作用域，那么可以确定这个StringBuffer并不会被多线程所访问，那么就可以把这些多余的锁给去掉来提高性能。<br>\n当JVM参数为：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createStringBuffer: 302ms</span><br></pre></td></tr></table></figure>\n<p>JVM参数为：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:-EliminateLocks</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createStringBuffer: 660ms</span><br></pre></td></tr></table></figure>\n<p>显然，锁消除的效果还是很明显的。</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1-优化思路以及方法\"><a class=\"markdownIt-Anchor\" href=\"#1-优化思路以及方法\"></a> 1. 优化思路以及方法</h2>\n<ul>\n<li>减少锁持有时间</li>\n<li>减小锁粒度</li>\n<li>锁分离</li>\n<li>锁粗化</li>\n<li>锁消除</li>\n</ul>\n<h3 id=\"11-减少锁持有时间\"><a class=\"markdownIt-Anchor\" href=\"#11-减少锁持有时间\"></a> 1.1 减少锁持有时间</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">syncMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    othercode1();</span><br><span class=\"line\">    mutextMethod();</span><br><span class=\"line\">    othercode2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>像上述代码，在进入方法前就要得到锁，其他线程就要在外面等待。</p>\n<p>分析：锁里面的资源在同一时间只允许一个线程执行，我们不仅要减少其他线程等待的时间，也要尽力减少线程在锁里面的执行时间，所以，尽量只有在有线程安全要求的程序代码上加锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">syncMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    othercode1();</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">        metextMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    othercode2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-减小锁粒度\"><a class=\"markdownIt-Anchor\" href=\"#12-减小锁粒度\"></a> 1.2 减小锁粒度</h3>\n<p>将大对象（这个对象可能会被很多线程访问）拆成小对象，大大增加并行度。</p>\n<p>降低锁竞争，那么偏向锁、轻量级锁成功率才会提高。</p>\n<p>最最典型的减小锁粒度的案例就是ConcurrentHashMap。在HashMap的基础上进行优化，使用了cas与synchronized来确保安全性，在保证安全性的基础上为了充分利用线程资源，更是巧妙的设计了多线程同扩容的模式。</p>\n<h3 id=\"13-锁分离\"><a class=\"markdownIt-Anchor\" href=\"#13-锁分离\"></a> 1.3 锁分离</h3>\n<p>最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁。这样读读不互斥，读写互斥，写写互斥。既保证了线程安全，又提高了性能。</p>\n<p>分析：读写分离这种思想可以延伸到我们其他的设计中，只要操作上互不影响，那锁就可以进行分离，比如：LinkedBlockingQueue</p>\n<img src=\"..\\images/read_writer_Lock1.png\" alt=\"read_writer_Lock1\" style=\"zoom: 67%;\">\n<p>从头部获取数据，从尾部放入数据，使用两把锁。</p>\n<h3 id=\"14-锁粗化\"><a class=\"markdownIt-Anchor\" href=\"#14-锁粗化\"></a> 1.4 锁粗化</h3>\n<p>通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁，只有这样，等待在这个锁上的其他线程才能尽早的获取资源执行任务；但是凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//dow sth.</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种情况，根据锁粗化的思想，应该合并：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//整合成一次锁请求,前提时中间哪些不需要同步的工作很快就执行完成</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">        <span class=\"comment\">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再举一个极端的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; circle; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//.....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在一个循环内不同得获得锁。虽然JDK内部会对这个代码做些优化，但是还不如直接写成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; circle; i++)&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然如果有需求说，这样的循环太久，需要给其他线程不要等待太久，那只能写成上面那种。如果没有这样类似的需求，还是直接写成后者那种比较好。<br>\n<strong>分析</strong>: 锁粗化是JVM默认启动的一种机制，锁粗化针对的是对连续的区域进行分段加锁这种场景，JVM会自发进行优化。但作为开发者而言在满足业务的情况下，应该减少锁的使用。</p>\n<h3 id=\"15-锁消除\"><a class=\"markdownIt-Anchor\" href=\"#15-锁消除\"></a> 1.5 锁消除</h3>\n<p>锁消除是在编译器级别的事情。在即时编译器(JIT)时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。也许你会觉得奇怪，既然有些对象不可能被多线程访问，那为什么要加锁呢？写代码时直接不加锁不就好了。<br>\n但是有时，这些锁并不是程序员所写的，有的是JDK实现中就有锁的，比如Vector和StringBuffer这样的类，它们中的很多方法都是有锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> InterrruptedException</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> start = System.currentTimeTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">20000</span>; i++)&#123;</span><br><span class=\"line\">        createStringBuffer(<span class=\"string\">&quot;JVM&quot;</span>,<span class=\"string\">&quot;asdfasdfasdf&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> bufferCost = System.currentTimeTimeMillis() - start;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;createStringBuffer:&quot;</span>+bufferCost+<span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span></span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    sb.append(s1);</span><br><span class=\"line\">    sb.append(s2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码中的StringBuffer.append是一个同步操作，但是StringBuffer却是一个局部变量，并且方法也并没有把StringBuffer返回，所以不可能会有多线程去访问它。那么此时StringBuffer中的同步操作就是没有意义的。<br>\n开启锁消除是在JVM参数上设置的，当然需要在server模式下：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>\n<p>并且要开启逃逸分析。 逃逸分析的作用呢，就是看看变量是否有可能逃出作用域的范围。<br>\n比如上述的StringBuffer，上述代码中craeteStringBuffer的返回是一个String，所以这个局部变量StringBuffer在其他地方都不会被使用。如果将craeteStringBuffer改成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> StringBuffer <span class=\"title\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span></span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    sb.append(s1);</span><br><span class=\"line\">    sb.append(s2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么这个 StringBuffer被返回后，是有可能被任何其他地方所使用的（譬如被主函数将返回结果put进map啊等等）。那么JVM的逃逸分析可以分析出，这个局部变量 StringBuffer逃出了它的作用域。<br>\n所以基于逃逸分析，JVM可以判断，如果这个局部变量StringBuffer并没有逃出它的作用域，那么可以确定这个StringBuffer并不会被多线程所访问，那么就可以把这些多余的锁给去掉来提高性能。<br>\n当JVM参数为：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createStringBuffer: 302ms</span><br></pre></td></tr></table></figure>\n<p>JVM参数为：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-server -XX:+DoEscapeAnalysis -XX:-EliminateLocks</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createStringBuffer: 660ms</span><br></pre></td></tr></table></figure>\n<p>显然，锁消除的效果还是很明显的。</p>\n"},{"title":"MVCC多版本并发控制","comments":0,"translate_title":"mvcc-multiversion-concurrency-control","date":"2021-08-14T03:03:40.000Z","_content":"### 1. MVCC\n全称Multi-Version Concurrency Control即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中是心啊事务内存。\nMVCC在mysql Innodb中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使读写冲突时，也能做到不加锁，非阻塞并发读\n\n### 2. 当前读和快照读\n- 当前读\n    \n    像select lock in share mode（共享锁），select for update， update, insert,delete(排他锁)这些操作都是一种当前读；**当前读就是读取记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁**。\n\n- 快照读\n\n    像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别（串行级别快照读会变成当前读）；快照读的实现是基于多版本并发控制（即MVCC）；可以任务MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；\n    既然是基于多版本，即快照读可能读到的并不一定是最新版本的数据，有可能是之前的历史版本\n  \n**MVCC就是为了实现读（快照读）-写冲突不加锁，当前读实际上是一种加锁的操作，是悲观锁的实现。**\n\n---\n\n### 3. 当前读、快照读和MVCC的关系\nMVCC多版本并发控制指的是\"维持一个数据的多个版本，使得读写操作没有冲突\"；\nMysql通过快照读的方式去实现MVCC理想模型的其中一个具体非阻塞读功能，相对而言，当前读就是悲观锁的具体功能实现\n\nMVCC模型在Mysql中具体实现有3个隐式字段：undo日志、Read View等去完成的\n\n### 4. MVCC的作用与好处\n\n数据库并发场景分为以下三种：\n- 读-读：没有问题，也不需要并发控制\n- 读-写：有线程安全问题，可能会造成事务隔离性问题，（脏读、幻读、不可重复读）\n- 写-写：有线程安全问题，可能会存在更新丢失问题\n\n**MVCC带来的好处：**\n\nMVCC是一种用来解决读-写冲突的无所并发控制（在MVCC提出之前采用的是采用**悲观锁**），也就是事务分配增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务前的数据库快照，主要解决以下问题：\n- 在并发读写数据库时，可以做到在读操作是不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能；\n- 解决脏读、幻读、不可重复读等事务隔离性问题，但不能解决更新丢失问题\n\n**MVCC组合方法**\n- MVCC + 悲观锁： MVCC解决读写冲突，悲观锁解决写写冲突\n- MVCC + 乐观锁： MVCC解决读写冲突，乐观锁解决写写冲突，这种方式可能最大程度的提高数据库并发性能，并解决读写冲突和写写冲突导致的问题\n\n### 5. MVCC的实现原理\n实现原理主要是依赖记录中的 3个隐式字段、undo日志 、ReadView 来实现的\n\n\n在Mysql的InnoDB引擎中就是指在已提交读(READ COMMITTD)和可重复读(REPEATABLE READ)这两种隔离级别下的事务对于SELECT操作会访问版本链中的记录的过程\n这就使得别的事务可以修改这条记录，反正每次修改都会在版本链中记录。SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，提升了系统的性能。\n\n#### 5.1 版本链\n```sql\nbegin;\n#触发分配TRX_ID\nselect * from t_role;\n#指定TRX_MYSQL_THREAD_ID=当前CONNECTION_ID,表示查询当前连接\nselect TRX_ID, ROLL_PTR, ROW_ID  from INFORMATION_SCHEMA.INNODB_TRX where TRX_MYSQL_THREAD_ID = CONNECTION_ID();\ncommit;\n```\n在InnoDB引擎表中，它的聚簇索引记录中有两个必要的隐藏列：\n- TRX_ID\n\n  6byte，这个id用来存储的每次对某条聚簇索引记录进行修改的时候的事务id\n\n- roll_pointer\n\n  每次对哪条聚簇索引记录有修改的时候，都会把老版本写入undo日志中。这个roll_pointer就是存了一个指针，它指向这条聚簇索引记录的上一个版本的位置，通过它来获得上一个版本的记录信息。(注意插入操作的undo日志没有这个属性，因为它没有老版本)\n\n- ROW_ID\n\n  6byte，隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引\n\n- 实际还有一个删除flag隐藏字段, 既记录被更新或删除并不代表真的删除，而是删除flag变了\n![](./mvcc/02.png)\n\n比如现在有个事务id是60的执行的这条记录的修改语句\n\n![](./mvcc/03.png)\n\n此时在undo日志中就存在版本链\n![](./mvcc/04.png)\n\n#### 5.2 ReadView\n已提交读和可重复读的区别就在于它们生成ReadView的策略不同\nReadView中主要就是有个列表来存储我们系统中当前活跃着的读写事务，也就是begin了还未提交的事务。通过这个列表来判断记录的某个版本是否对当前事务可见。假设当前列表里的事务id为[80,100]。\n\n- 如果你要访问的记录版本的事务id为50，比当前列表最小的id80小，那说明这个事务在之前就提交了，所以对当前活动的事务来说是可访问的。\n- 如果你要访问的记录版本的事务id为90,发现此事务在列表id最大值和最小值之间，那就再判断一下是否在列表内，如果在那就说明此事务还未提交，所以版本不能被访问。如果不在那说明事务已经提交，所以版本可以被访问。\n- 如果你要访问的记录版本的事务id为110，那比事务列表最大id100都大，那说明这个版本是在ReadView生成之后才发生的，所以不能被访问。\n这些记录都是去版本链里面找的，先找最近记录，如果最近这一条记录事务id不符合条件，不可见的话，再去找上一个版本再比较当前事务的id和这个版本事务id看能不能访问，以此类推直到返回可见的版本或者结束。\n\n","source":"_posts/mvcc.md","raw":"---\ntitle: MVCC多版本并发控制\ntags: mysql\ncategories:\n  - 数据库\n  - mvcc\ncomments: false\ntranslate_title: mvcc-multiversion-concurrency-control\ndate: 2021-08-14 11:03:40\n---\n### 1. MVCC\n全称Multi-Version Concurrency Control即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中是心啊事务内存。\nMVCC在mysql Innodb中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使读写冲突时，也能做到不加锁，非阻塞并发读\n\n### 2. 当前读和快照读\n- 当前读\n    \n    像select lock in share mode（共享锁），select for update， update, insert,delete(排他锁)这些操作都是一种当前读；**当前读就是读取记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁**。\n\n- 快照读\n\n    像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别（串行级别快照读会变成当前读）；快照读的实现是基于多版本并发控制（即MVCC）；可以任务MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；\n    既然是基于多版本，即快照读可能读到的并不一定是最新版本的数据，有可能是之前的历史版本\n  \n**MVCC就是为了实现读（快照读）-写冲突不加锁，当前读实际上是一种加锁的操作，是悲观锁的实现。**\n\n---\n\n### 3. 当前读、快照读和MVCC的关系\nMVCC多版本并发控制指的是\"维持一个数据的多个版本，使得读写操作没有冲突\"；\nMysql通过快照读的方式去实现MVCC理想模型的其中一个具体非阻塞读功能，相对而言，当前读就是悲观锁的具体功能实现\n\nMVCC模型在Mysql中具体实现有3个隐式字段：undo日志、Read View等去完成的\n\n### 4. MVCC的作用与好处\n\n数据库并发场景分为以下三种：\n- 读-读：没有问题，也不需要并发控制\n- 读-写：有线程安全问题，可能会造成事务隔离性问题，（脏读、幻读、不可重复读）\n- 写-写：有线程安全问题，可能会存在更新丢失问题\n\n**MVCC带来的好处：**\n\nMVCC是一种用来解决读-写冲突的无所并发控制（在MVCC提出之前采用的是采用**悲观锁**），也就是事务分配增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务前的数据库快照，主要解决以下问题：\n- 在并发读写数据库时，可以做到在读操作是不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能；\n- 解决脏读、幻读、不可重复读等事务隔离性问题，但不能解决更新丢失问题\n\n**MVCC组合方法**\n- MVCC + 悲观锁： MVCC解决读写冲突，悲观锁解决写写冲突\n- MVCC + 乐观锁： MVCC解决读写冲突，乐观锁解决写写冲突，这种方式可能最大程度的提高数据库并发性能，并解决读写冲突和写写冲突导致的问题\n\n### 5. MVCC的实现原理\n实现原理主要是依赖记录中的 3个隐式字段、undo日志 、ReadView 来实现的\n\n\n在Mysql的InnoDB引擎中就是指在已提交读(READ COMMITTD)和可重复读(REPEATABLE READ)这两种隔离级别下的事务对于SELECT操作会访问版本链中的记录的过程\n这就使得别的事务可以修改这条记录，反正每次修改都会在版本链中记录。SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，提升了系统的性能。\n\n#### 5.1 版本链\n```sql\nbegin;\n#触发分配TRX_ID\nselect * from t_role;\n#指定TRX_MYSQL_THREAD_ID=当前CONNECTION_ID,表示查询当前连接\nselect TRX_ID, ROLL_PTR, ROW_ID  from INFORMATION_SCHEMA.INNODB_TRX where TRX_MYSQL_THREAD_ID = CONNECTION_ID();\ncommit;\n```\n在InnoDB引擎表中，它的聚簇索引记录中有两个必要的隐藏列：\n- TRX_ID\n\n  6byte，这个id用来存储的每次对某条聚簇索引记录进行修改的时候的事务id\n\n- roll_pointer\n\n  每次对哪条聚簇索引记录有修改的时候，都会把老版本写入undo日志中。这个roll_pointer就是存了一个指针，它指向这条聚簇索引记录的上一个版本的位置，通过它来获得上一个版本的记录信息。(注意插入操作的undo日志没有这个属性，因为它没有老版本)\n\n- ROW_ID\n\n  6byte，隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引\n\n- 实际还有一个删除flag隐藏字段, 既记录被更新或删除并不代表真的删除，而是删除flag变了\n![](./mvcc/02.png)\n\n比如现在有个事务id是60的执行的这条记录的修改语句\n\n![](./mvcc/03.png)\n\n此时在undo日志中就存在版本链\n![](./mvcc/04.png)\n\n#### 5.2 ReadView\n已提交读和可重复读的区别就在于它们生成ReadView的策略不同\nReadView中主要就是有个列表来存储我们系统中当前活跃着的读写事务，也就是begin了还未提交的事务。通过这个列表来判断记录的某个版本是否对当前事务可见。假设当前列表里的事务id为[80,100]。\n\n- 如果你要访问的记录版本的事务id为50，比当前列表最小的id80小，那说明这个事务在之前就提交了，所以对当前活动的事务来说是可访问的。\n- 如果你要访问的记录版本的事务id为90,发现此事务在列表id最大值和最小值之间，那就再判断一下是否在列表内，如果在那就说明此事务还未提交，所以版本不能被访问。如果不在那说明事务已经提交，所以版本可以被访问。\n- 如果你要访问的记录版本的事务id为110，那比事务列表最大id100都大，那说明这个版本是在ReadView生成之后才发生的，所以不能被访问。\n这些记录都是去版本链里面找的，先找最近记录，如果最近这一条记录事务id不符合条件，不可见的话，再去找上一个版本再比较当前事务的id和这个版本事务id看能不能访问，以此类推直到返回可见的版本或者结束。\n\n","slug":"mvcc","published":1,"updated":"2021-08-15T07:41:26.085Z","layout":"post","photos":[],"link":"","_id":"ckslj4psd000tkw3q9l0641d6","content":"<h3 id=\"1-mvcc\"><a class=\"markdownIt-Anchor\" href=\"#1-mvcc\"></a> 1. MVCC</h3>\n<p>全称Multi-Version Concurrency Control即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中是心啊事务内存。<br>\nMVCC在mysql Innodb中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使读写冲突时，也能做到不加锁，非阻塞并发读</p>\n<h3 id=\"2-当前读和快照读\"><a class=\"markdownIt-Anchor\" href=\"#2-当前读和快照读\"></a> 2. 当前读和快照读</h3>\n<ul>\n<li>\n<p>当前读</p>\n<p>像select lock in share mode（共享锁），select for update， update, insert,delete(排他锁)这些操作都是一种当前读；<strong>当前读就是读取记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁</strong>。</p>\n</li>\n<li>\n<p>快照读</p>\n<p>像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别（串行级别快照读会变成当前读）；快照读的实现是基于多版本并发控制（即MVCC）；可以任务MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；<br>\n既然是基于多版本，即快照读可能读到的并不一定是最新版本的数据，有可能是之前的历史版本</p>\n</li>\n</ul>\n<p><strong>MVCC就是为了实现读（快照读）-写冲突不加锁，当前读实际上是一种加锁的操作，是悲观锁的实现。</strong></p>\n<hr>\n<h3 id=\"3-当前读-快照读和mvcc的关系\"><a class=\"markdownIt-Anchor\" href=\"#3-当前读-快照读和mvcc的关系\"></a> 3. 当前读、快照读和MVCC的关系</h3>\n<p>MVCC多版本并发控制指的是&quot;维持一个数据的多个版本，使得读写操作没有冲突&quot;；<br>\nMysql通过快照读的方式去实现MVCC理想模型的其中一个具体非阻塞读功能，相对而言，当前读就是悲观锁的具体功能实现</p>\n<p>MVCC模型在Mysql中具体实现有3个隐式字段：undo日志、Read View等去完成的</p>\n<h3 id=\"4-mvcc的作用与好处\"><a class=\"markdownIt-Anchor\" href=\"#4-mvcc的作用与好处\"></a> 4. MVCC的作用与好处</h3>\n<p>数据库并发场景分为以下三种：</p>\n<ul>\n<li>读-读：没有问题，也不需要并发控制</li>\n<li>读-写：有线程安全问题，可能会造成事务隔离性问题，（脏读、幻读、不可重复读）</li>\n<li>写-写：有线程安全问题，可能会存在更新丢失问题</li>\n</ul>\n<p><strong>MVCC带来的好处：</strong></p>\n<p>MVCC是一种用来解决读-写冲突的无所并发控制（在MVCC提出之前采用的是采用<strong>悲观锁</strong>），也就是事务分配增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务前的数据库快照，主要解决以下问题：</p>\n<ul>\n<li>在并发读写数据库时，可以做到在读操作是不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能；</li>\n<li>解决脏读、幻读、不可重复读等事务隔离性问题，但不能解决更新丢失问题</li>\n</ul>\n<p><strong>MVCC组合方法</strong></p>\n<ul>\n<li>MVCC + 悲观锁： MVCC解决读写冲突，悲观锁解决写写冲突</li>\n<li>MVCC + 乐观锁： MVCC解决读写冲突，乐观锁解决写写冲突，这种方式可能最大程度的提高数据库并发性能，并解决读写冲突和写写冲突导致的问题</li>\n</ul>\n<h3 id=\"5-mvcc的实现原理\"><a class=\"markdownIt-Anchor\" href=\"#5-mvcc的实现原理\"></a> 5. MVCC的实现原理</h3>\n<p>实现原理主要是依赖记录中的 3个隐式字段、undo日志 、ReadView 来实现的</p>\n<p>在Mysql的InnoDB引擎中就是指在已提交读(READ COMMITTD)和可重复读(REPEATABLE READ)这两种隔离级别下的事务对于SELECT操作会访问版本链中的记录的过程<br>\n这就使得别的事务可以修改这条记录，反正每次修改都会在版本链中记录。SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，提升了系统的性能。</p>\n<h4 id=\"51-版本链\"><a class=\"markdownIt-Anchor\" href=\"#51-版本链\"></a> 5.1 版本链</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span>;</span><br><span class=\"line\">#触发分配TRX_ID</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t_role;</span><br><span class=\"line\">#指定TRX_MYSQL_THREAD_ID<span class=\"operator\">=</span>当前CONNECTION_ID,表示查询当前连接</span><br><span class=\"line\"><span class=\"keyword\">select</span> TRX_ID, ROLL_PTR, ROW_ID  <span class=\"keyword\">from</span> INFORMATION_SCHEMA.INNODB_TRX <span class=\"keyword\">where</span> TRX_MYSQL_THREAD_ID <span class=\"operator\">=</span> CONNECTION_ID();</span><br><span class=\"line\"><span class=\"keyword\">commit</span>;</span><br></pre></td></tr></table></figure>\n<p>在InnoDB引擎表中，它的聚簇索引记录中有两个必要的隐藏列：</p>\n<ul>\n<li>\n<p>TRX_ID</p>\n<p>6byte，这个id用来存储的每次对某条聚簇索引记录进行修改的时候的事务id</p>\n</li>\n<li>\n<p>roll_pointer</p>\n<p>每次对哪条聚簇索引记录有修改的时候，都会把老版本写入undo日志中。这个roll_pointer就是存了一个指针，它指向这条聚簇索引记录的上一个版本的位置，通过它来获得上一个版本的记录信息。(注意插入操作的undo日志没有这个属性，因为它没有老版本)</p>\n</li>\n<li>\n<p>ROW_ID</p>\n<p>6byte，隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引</p>\n</li>\n<li>\n<p>实际还有一个删除flag隐藏字段, 既记录被更新或删除并不代表真的删除，而是删除flag变了<br>\n<img src=\"/2021/08/14/mvcc/02.png\" alt></p>\n</li>\n</ul>\n<p>比如现在有个事务id是60的执行的这条记录的修改语句</p>\n<p><img src=\"/2021/08/14/mvcc/03.png\" alt></p>\n<p>此时在undo日志中就存在版本链<br>\n<img src=\"/2021/08/14/mvcc/04.png\" alt></p>\n<h4 id=\"52-readview\"><a class=\"markdownIt-Anchor\" href=\"#52-readview\"></a> 5.2 ReadView</h4>\n<p>已提交读和可重复读的区别就在于它们生成ReadView的策略不同<br>\nReadView中主要就是有个列表来存储我们系统中当前活跃着的读写事务，也就是begin了还未提交的事务。通过这个列表来判断记录的某个版本是否对当前事务可见。假设当前列表里的事务id为[80,100]。</p>\n<ul>\n<li>如果你要访问的记录版本的事务id为50，比当前列表最小的id80小，那说明这个事务在之前就提交了，所以对当前活动的事务来说是可访问的。</li>\n<li>如果你要访问的记录版本的事务id为90,发现此事务在列表id最大值和最小值之间，那就再判断一下是否在列表内，如果在那就说明此事务还未提交，所以版本不能被访问。如果不在那说明事务已经提交，所以版本可以被访问。</li>\n<li>如果你要访问的记录版本的事务id为110，那比事务列表最大id100都大，那说明这个版本是在ReadView生成之后才发生的，所以不能被访问。<br>\n这些记录都是去版本链里面找的，先找最近记录，如果最近这一条记录事务id不符合条件，不可见的话，再去找上一个版本再比较当前事务的id和这个版本事务id看能不能访问，以此类推直到返回可见的版本或者结束。</li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"1-mvcc\"><a class=\"markdownIt-Anchor\" href=\"#1-mvcc\"></a> 1. MVCC</h3>\n<p>全称Multi-Version Concurrency Control即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中是心啊事务内存。<br>\nMVCC在mysql Innodb中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使读写冲突时，也能做到不加锁，非阻塞并发读</p>\n<h3 id=\"2-当前读和快照读\"><a class=\"markdownIt-Anchor\" href=\"#2-当前读和快照读\"></a> 2. 当前读和快照读</h3>\n<ul>\n<li>\n<p>当前读</p>\n<p>像select lock in share mode（共享锁），select for update， update, insert,delete(排他锁)这些操作都是一种当前读；<strong>当前读就是读取记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁</strong>。</p>\n</li>\n<li>\n<p>快照读</p>\n<p>像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别（串行级别快照读会变成当前读）；快照读的实现是基于多版本并发控制（即MVCC）；可以任务MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；<br>\n既然是基于多版本，即快照读可能读到的并不一定是最新版本的数据，有可能是之前的历史版本</p>\n</li>\n</ul>\n<p><strong>MVCC就是为了实现读（快照读）-写冲突不加锁，当前读实际上是一种加锁的操作，是悲观锁的实现。</strong></p>\n<hr>\n<h3 id=\"3-当前读-快照读和mvcc的关系\"><a class=\"markdownIt-Anchor\" href=\"#3-当前读-快照读和mvcc的关系\"></a> 3. 当前读、快照读和MVCC的关系</h3>\n<p>MVCC多版本并发控制指的是&quot;维持一个数据的多个版本，使得读写操作没有冲突&quot;；<br>\nMysql通过快照读的方式去实现MVCC理想模型的其中一个具体非阻塞读功能，相对而言，当前读就是悲观锁的具体功能实现</p>\n<p>MVCC模型在Mysql中具体实现有3个隐式字段：undo日志、Read View等去完成的</p>\n<h3 id=\"4-mvcc的作用与好处\"><a class=\"markdownIt-Anchor\" href=\"#4-mvcc的作用与好处\"></a> 4. MVCC的作用与好处</h3>\n<p>数据库并发场景分为以下三种：</p>\n<ul>\n<li>读-读：没有问题，也不需要并发控制</li>\n<li>读-写：有线程安全问题，可能会造成事务隔离性问题，（脏读、幻读、不可重复读）</li>\n<li>写-写：有线程安全问题，可能会存在更新丢失问题</li>\n</ul>\n<p><strong>MVCC带来的好处：</strong></p>\n<p>MVCC是一种用来解决读-写冲突的无所并发控制（在MVCC提出之前采用的是采用<strong>悲观锁</strong>），也就是事务分配增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务前的数据库快照，主要解决以下问题：</p>\n<ul>\n<li>在并发读写数据库时，可以做到在读操作是不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能；</li>\n<li>解决脏读、幻读、不可重复读等事务隔离性问题，但不能解决更新丢失问题</li>\n</ul>\n<p><strong>MVCC组合方法</strong></p>\n<ul>\n<li>MVCC + 悲观锁： MVCC解决读写冲突，悲观锁解决写写冲突</li>\n<li>MVCC + 乐观锁： MVCC解决读写冲突，乐观锁解决写写冲突，这种方式可能最大程度的提高数据库并发性能，并解决读写冲突和写写冲突导致的问题</li>\n</ul>\n<h3 id=\"5-mvcc的实现原理\"><a class=\"markdownIt-Anchor\" href=\"#5-mvcc的实现原理\"></a> 5. MVCC的实现原理</h3>\n<p>实现原理主要是依赖记录中的 3个隐式字段、undo日志 、ReadView 来实现的</p>\n<p>在Mysql的InnoDB引擎中就是指在已提交读(READ COMMITTD)和可重复读(REPEATABLE READ)这两种隔离级别下的事务对于SELECT操作会访问版本链中的记录的过程<br>\n这就使得别的事务可以修改这条记录，反正每次修改都会在版本链中记录。SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，提升了系统的性能。</p>\n<h4 id=\"51-版本链\"><a class=\"markdownIt-Anchor\" href=\"#51-版本链\"></a> 5.1 版本链</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span>;</span><br><span class=\"line\">#触发分配TRX_ID</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t_role;</span><br><span class=\"line\">#指定TRX_MYSQL_THREAD_ID<span class=\"operator\">=</span>当前CONNECTION_ID,表示查询当前连接</span><br><span class=\"line\"><span class=\"keyword\">select</span> TRX_ID, ROLL_PTR, ROW_ID  <span class=\"keyword\">from</span> INFORMATION_SCHEMA.INNODB_TRX <span class=\"keyword\">where</span> TRX_MYSQL_THREAD_ID <span class=\"operator\">=</span> CONNECTION_ID();</span><br><span class=\"line\"><span class=\"keyword\">commit</span>;</span><br></pre></td></tr></table></figure>\n<p>在InnoDB引擎表中，它的聚簇索引记录中有两个必要的隐藏列：</p>\n<ul>\n<li>\n<p>TRX_ID</p>\n<p>6byte，这个id用来存储的每次对某条聚簇索引记录进行修改的时候的事务id</p>\n</li>\n<li>\n<p>roll_pointer</p>\n<p>每次对哪条聚簇索引记录有修改的时候，都会把老版本写入undo日志中。这个roll_pointer就是存了一个指针，它指向这条聚簇索引记录的上一个版本的位置，通过它来获得上一个版本的记录信息。(注意插入操作的undo日志没有这个属性，因为它没有老版本)</p>\n</li>\n<li>\n<p>ROW_ID</p>\n<p>6byte，隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引</p>\n</li>\n<li>\n<p>实际还有一个删除flag隐藏字段, 既记录被更新或删除并不代表真的删除，而是删除flag变了<br>\n<img src=\"/2021/08/14/mvcc/02.png\" alt></p>\n</li>\n</ul>\n<p>比如现在有个事务id是60的执行的这条记录的修改语句</p>\n<p><img src=\"/2021/08/14/mvcc/03.png\" alt></p>\n<p>此时在undo日志中就存在版本链<br>\n<img src=\"/2021/08/14/mvcc/04.png\" alt></p>\n<h4 id=\"52-readview\"><a class=\"markdownIt-Anchor\" href=\"#52-readview\"></a> 5.2 ReadView</h4>\n<p>已提交读和可重复读的区别就在于它们生成ReadView的策略不同<br>\nReadView中主要就是有个列表来存储我们系统中当前活跃着的读写事务，也就是begin了还未提交的事务。通过这个列表来判断记录的某个版本是否对当前事务可见。假设当前列表里的事务id为[80,100]。</p>\n<ul>\n<li>如果你要访问的记录版本的事务id为50，比当前列表最小的id80小，那说明这个事务在之前就提交了，所以对当前活动的事务来说是可访问的。</li>\n<li>如果你要访问的记录版本的事务id为90,发现此事务在列表id最大值和最小值之间，那就再判断一下是否在列表内，如果在那就说明此事务还未提交，所以版本不能被访问。如果不在那说明事务已经提交，所以版本可以被访问。</li>\n<li>如果你要访问的记录版本的事务id为110，那比事务列表最大id100都大，那说明这个版本是在ReadView生成之后才发生的，所以不能被访问。<br>\n这些记录都是去版本链里面找的，先找最近记录，如果最近这一条记录事务id不符合条件，不可见的话，再去找上一个版本再比较当前事务的id和这个版本事务id看能不能访问，以此类推直到返回可见的版本或者结束。</li>\n</ul>\n"},{"title":"mysql索引","date":"2021-08-20T07:12:00.000Z","comments":0,"translate_title":"mysql-index","_content":"拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。\n索引分单列索引和组合索引。\n- 单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。 \n- 组合索引，即一个索引包含多个列。\n\n创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。\n实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。\n上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：\n虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。\n建立索引会占用磁盘空间的索引文件。\n\n## 1.普通索引\n- 创建索引\n    ```sql\n    -- 如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。\n    CREATE INDEX indexName on table_name (column_name )\n    ```\n- 添加索引（修改表结构）\n    ```sql\n    -- 表结构已经存在了，然后使用alter修改表结构添加索引\n    alter table table_name  add INDEX indexName(column_name )\n    ```\n- 创建表指定\n    ```sql\n    CREATE TABLE mytable(  \n        ID INT NOT NULL,   \n        username VARCHAR(16) NOT NULL,  \n        INDEX [indexName] (username(length))  \n    ); \n    ```\n- 删除索引\n    ```sql\n    drop index [indexName] on  table_name \n    ```\n  \n## 2. 唯一索引\n他和普通索引类似，不同的是：索引列的值必须唯一，但允许有控制。如果是组合索引，则列值的组合必须唯一。\n- 创建索引\n    ```sql\n    CREATE UNIQUE INDEX indexName ON table_name (column_name (length ))\n    ```\n  \n- 修改表结构\n    ```sql\n    ALTER table mytable ADD UNIQUE [indexName] (column_name(length))\n    ```\n  \n- 创建表的时候指定\n    ```sql\n    CREATE TABLE mytable(  \n        ID INT NOT NULL,   \n        username VARCHAR(16) NOT NULL,  \n        UNIQUE [indexName] (username(length))  \n    );\n    ```\n## 3.组合索引\n- 修改表结构指定索引\n    ```sql\n    ALTER TABLE table_name ADD INDEX indexName (column_name1 , column_name2,...)\n    ```\n- 创建表的时候指定\n    ```sql\n    CREATE TABLE mytable(  \n        ID INT NOT NULL,   \n        username VARCHAR(16) NOT NULL,  \n        KEY [indexName] (column_name1 , column_name2,...)  \n    );\n    ```\n### 3.1 组合索引查询问题\n**问题描述：**在mysql中有张表test_a，有3个字段id,name,num；对这三个字段建立组合索引，那么查询时使用其中某两个或者一个作为查询条件，是否还会走索引\n![表结构](./mysql-index/01.png)\n根据查询字段的位置不同来决定，如查询**id**、**id,num**、**id,num,name**、 **id, name** 都可以走索引的，其他条件的查询不能走索引。\n\n**组合索引 有“最左前缀”原则。就是只从最左面的开始组合，并不是所有只要含有这三列存在的字段的查询都会用到该组合索引**\n```sql\n-- 添加组合索引\nALTER TABLE test_a ADD INDEX 'lianhe'(id, num, name)\n```\n1. 使用三个字段id, num, name查询\n```sql\n-- 只要三个条件都有，可以随意变换位置，结果都会走索引\n-- 优化器会将条件顺序优化成上面三种情况后执行\nEXPLAIN SELECT * FROM test_a WHERE id=1 AND num='001' AND name = '1#'\n```\n![使用三个字段id, num, name查询](./mysql-index/02.png)\n从执行结果上可以看到是从走索引进行查询的\n\n2. 使用num, name 查询\n```sql\nEXPLAIN SELECT * FROM test_a WHERE name = '1#'\n\nEXPLAIN SELECT * FROM test_a WHERE num='001' \n```\n![使用id, name 查询](./mysql-index/03.png)\n3. 使用id, name或者id, num 查询\n```sql\n-- 只要包括id，可以随意变换位置，结果都会走索引\n-- 优化器会将条件顺序优化成上面三种情况后执行\n--如果只有两个字段，只有id条件命中，num或者name 条件不走联合索引。\nEXPLAIN SELECT * FROM test_a WHERE id=1 AND name = '1#'\n```\n![使用id, name 查询](./mysql-index/02.png)\n\n\n需要避免索引失效的情况，如：LIKE %xxx，或者条件中使用函数等。\n4. 使用id查询\n```sql\nEXPLAIN SELECT * FROM test_a WHERE id=1\n```\n![使用id查询](./mysql-index/02.png)\n\n5. 使用name或者num查询\n```sql\nEXPLAIN SELECT * FROM test_a WHERE name = '1#'\n\nEXPLAIN SELECT * FROM test_a WHERE num = '001'\n```\n\n### 3.2 创建联合索引选择规则\n- 经常用的列优先（最左匹配原则）\n- 离散度高的列优先（离散度高原则）\n- 宽度小的列优先（最少空间原则）\n\n## 4.使用alter命令添加索引\n```sql\n-- 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。\nALTER TABLE tbl_name ADD PRIMARY KEY (column_list): \n    \n--  这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。\nALTER TABLE tbl_name ADD UNIQUE index_name (column_list):\n\n-- 添加普通索引，索引值可出现多次。\nALTER TABLE tbl_name ADD INDEX index_name (column_list):\n\n--该语句指定了索引为 FULLTEXT ，用于全文索引。\nALTER TABLE tbl_name ADD FULLTEXT index_name (column_list):\n```\n  \n\n\n\n","source":"_posts/mysql-index.md","raw":"---\ntitle: mysql索引\ndate: 2021-08-20 15:12:00\ntags: mysql\ncategories:\n- 数据库\n- mysql\ncomments: false\ntranslate_title: mysql-transaction\n---\n拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。\n索引分单列索引和组合索引。\n- 单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。 \n- 组合索引，即一个索引包含多个列。\n\n创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。\n实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。\n上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：\n虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。\n建立索引会占用磁盘空间的索引文件。\n\n## 1.普通索引\n- 创建索引\n    ```sql\n    -- 如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。\n    CREATE INDEX indexName on table_name (column_name )\n    ```\n- 添加索引（修改表结构）\n    ```sql\n    -- 表结构已经存在了，然后使用alter修改表结构添加索引\n    alter table table_name  add INDEX indexName(column_name )\n    ```\n- 创建表指定\n    ```sql\n    CREATE TABLE mytable(  \n        ID INT NOT NULL,   \n        username VARCHAR(16) NOT NULL,  \n        INDEX [indexName] (username(length))  \n    ); \n    ```\n- 删除索引\n    ```sql\n    drop index [indexName] on  table_name \n    ```\n  \n## 2. 唯一索引\n他和普通索引类似，不同的是：索引列的值必须唯一，但允许有控制。如果是组合索引，则列值的组合必须唯一。\n- 创建索引\n    ```sql\n    CREATE UNIQUE INDEX indexName ON table_name (column_name (length ))\n    ```\n  \n- 修改表结构\n    ```sql\n    ALTER table mytable ADD UNIQUE [indexName] (column_name(length))\n    ```\n  \n- 创建表的时候指定\n    ```sql\n    CREATE TABLE mytable(  \n        ID INT NOT NULL,   \n        username VARCHAR(16) NOT NULL,  \n        UNIQUE [indexName] (username(length))  \n    );\n    ```\n## 3.组合索引\n- 修改表结构指定索引\n    ```sql\n    ALTER TABLE table_name ADD INDEX indexName (column_name1 , column_name2,...)\n    ```\n- 创建表的时候指定\n    ```sql\n    CREATE TABLE mytable(  \n        ID INT NOT NULL,   \n        username VARCHAR(16) NOT NULL,  \n        KEY [indexName] (column_name1 , column_name2,...)  \n    );\n    ```\n### 3.1 组合索引查询问题\n**问题描述：**在mysql中有张表test_a，有3个字段id,name,num；对这三个字段建立组合索引，那么查询时使用其中某两个或者一个作为查询条件，是否还会走索引\n![表结构](./mysql-index/01.png)\n根据查询字段的位置不同来决定，如查询**id**、**id,num**、**id,num,name**、 **id, name** 都可以走索引的，其他条件的查询不能走索引。\n\n**组合索引 有“最左前缀”原则。就是只从最左面的开始组合，并不是所有只要含有这三列存在的字段的查询都会用到该组合索引**\n```sql\n-- 添加组合索引\nALTER TABLE test_a ADD INDEX 'lianhe'(id, num, name)\n```\n1. 使用三个字段id, num, name查询\n```sql\n-- 只要三个条件都有，可以随意变换位置，结果都会走索引\n-- 优化器会将条件顺序优化成上面三种情况后执行\nEXPLAIN SELECT * FROM test_a WHERE id=1 AND num='001' AND name = '1#'\n```\n![使用三个字段id, num, name查询](./mysql-index/02.png)\n从执行结果上可以看到是从走索引进行查询的\n\n2. 使用num, name 查询\n```sql\nEXPLAIN SELECT * FROM test_a WHERE name = '1#'\n\nEXPLAIN SELECT * FROM test_a WHERE num='001' \n```\n![使用id, name 查询](./mysql-index/03.png)\n3. 使用id, name或者id, num 查询\n```sql\n-- 只要包括id，可以随意变换位置，结果都会走索引\n-- 优化器会将条件顺序优化成上面三种情况后执行\n--如果只有两个字段，只有id条件命中，num或者name 条件不走联合索引。\nEXPLAIN SELECT * FROM test_a WHERE id=1 AND name = '1#'\n```\n![使用id, name 查询](./mysql-index/02.png)\n\n\n需要避免索引失效的情况，如：LIKE %xxx，或者条件中使用函数等。\n4. 使用id查询\n```sql\nEXPLAIN SELECT * FROM test_a WHERE id=1\n```\n![使用id查询](./mysql-index/02.png)\n\n5. 使用name或者num查询\n```sql\nEXPLAIN SELECT * FROM test_a WHERE name = '1#'\n\nEXPLAIN SELECT * FROM test_a WHERE num = '001'\n```\n\n### 3.2 创建联合索引选择规则\n- 经常用的列优先（最左匹配原则）\n- 离散度高的列优先（离散度高原则）\n- 宽度小的列优先（最少空间原则）\n\n## 4.使用alter命令添加索引\n```sql\n-- 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。\nALTER TABLE tbl_name ADD PRIMARY KEY (column_list): \n    \n--  这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。\nALTER TABLE tbl_name ADD UNIQUE index_name (column_list):\n\n-- 添加普通索引，索引值可出现多次。\nALTER TABLE tbl_name ADD INDEX index_name (column_list):\n\n--该语句指定了索引为 FULLTEXT ，用于全文索引。\nALTER TABLE tbl_name ADD FULLTEXT index_name (column_list):\n```\n  \n\n\n\n","slug":"mysql-index","published":1,"updated":"2021-08-21T08:38:01.310Z","layout":"post","photos":[],"link":"","_id":"ckslj4pse000xkw3qhjthetjp","content":"<p>拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。<br>\n索引分单列索引和组合索引。</p>\n<ul>\n<li>单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。</li>\n<li>组合索引，即一个索引包含多个列。</li>\n</ul>\n<p>创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。<br>\n实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。<br>\n上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：<br>\n虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。<br>\n建立索引会占用磁盘空间的索引文件。</p>\n<h2 id=\"1普通索引\"><a class=\"markdownIt-Anchor\" href=\"#1普通索引\"></a> 1.普通索引</h2>\n<ul>\n<li>创建索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX indexName <span class=\"keyword\">on</span> table_name (column_name )</span><br></pre></td></tr></table></figure>\n</li>\n<li>添加索引（修改表结构）  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 表结构已经存在了，然后使用alter修改表结构添加索引</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name  <span class=\"keyword\">add</span> INDEX indexName(column_name )</span><br></pre></td></tr></table></figure>\n</li>\n<li>创建表指定  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mytable(  </span><br><span class=\"line\">    ID <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,   </span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,  </span><br><span class=\"line\">    INDEX [indexName] (username(length))  </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n</li>\n<li>删除索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> index [indexName] <span class=\"keyword\">on</span>  table_name </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"2-唯一索引\"><a class=\"markdownIt-Anchor\" href=\"#2-唯一索引\"></a> 2. 唯一索引</h2>\n<p>他和普通索引类似，不同的是：索引列的值必须唯一，但允许有控制。如果是组合索引，则列值的组合必须唯一。</p>\n<ul>\n<li>\n<p>创建索引</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX indexName <span class=\"keyword\">ON</span> table_name (column_name (length ))</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改表结构</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">table</span> mytable <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> [indexName] (column_name(length))</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>创建表的时候指定</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mytable(  </span><br><span class=\"line\">    ID <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,   </span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,  </span><br><span class=\"line\">    <span class=\"keyword\">UNIQUE</span> [indexName] (username(length))  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3组合索引\"><a class=\"markdownIt-Anchor\" href=\"#3组合索引\"></a> 3.组合索引</h2>\n<ul>\n<li>修改表结构指定索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> INDEX indexName (column_name1 , column_name2,...)</span><br></pre></td></tr></table></figure>\n</li>\n<li>创建表的时候指定  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mytable(  </span><br><span class=\"line\">    ID <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,   </span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,  </span><br><span class=\"line\">    KEY [indexName] (column_name1 , column_name2,...)  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"31-组合索引查询问题\"><a class=\"markdownIt-Anchor\" href=\"#31-组合索引查询问题\"></a> 3.1 组合索引查询问题</h3>\n<p><strong>问题描述：<strong>在mysql中有张表test_a，有3个字段id,name,num；对这三个字段建立组合索引，那么查询时使用其中某两个或者一个作为查询条件，是否还会走索引<br>\n<img src=\"/2021/08/20/mysql-index/01.png\" alt=\"表结构\"><br>\n根据查询字段的位置不同来决定，如查询</strong>id</strong>、<strong>id,num</strong>、<strong>id,num,name</strong>、 <strong>id, name</strong> 都可以走索引的，其他条件的查询不能走索引。</p>\n<p><strong>组合索引 有“最左前缀”原则。就是只从最左面的开始组合，并不是所有只要含有这三列存在的字段的查询都会用到该组合索引</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加组合索引</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> test_a <span class=\"keyword\">ADD</span> INDEX <span class=\"string\">&#x27;lianhe&#x27;</span>(id, num, name)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>使用三个字段id, num, name查询</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 只要三个条件都有，可以随意变换位置，结果都会走索引</span></span><br><span class=\"line\"><span class=\"comment\">-- 优化器会将条件顺序优化成上面三种情况后执行</span></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">AND</span> num<span class=\"operator\">=</span><span class=\"string\">&#x27;001&#x27;</span> <span class=\"keyword\">AND</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/20/mysql-index/02.png\" alt=\"使用三个字段id, num, name查询\"><br>\n从执行结果上可以看到是从走索引进行查询的</p>\n<ol start=\"2\">\n<li>使用num, name 查询</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> num<span class=\"operator\">=</span><span class=\"string\">&#x27;001&#x27;</span> </span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/20/mysql-index/03.png\" alt=\"使用id, name 查询\"><br>\n3. 使用id, name或者id, num 查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 只要包括id，可以随意变换位置，结果都会走索引</span></span><br><span class=\"line\"><span class=\"comment\">-- 优化器会将条件顺序优化成上面三种情况后执行</span></span><br><span class=\"line\"><span class=\"comment\">--如果只有两个字段，只有id条件命中，num或者name 条件不走联合索引。</span></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">AND</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/20/mysql-index/02.png\" alt=\"使用id, name 查询\"></p>\n<p>需要避免索引失效的情况，如：LIKE %xxx，或者条件中使用函数等。<br>\n4. 使用id查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/20/mysql-index/02.png\" alt=\"使用id查询\"></p>\n<ol start=\"5\">\n<li>使用name或者num查询</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> num <span class=\"operator\">=</span> <span class=\"string\">&#x27;001&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"32-创建联合索引选择规则\"><a class=\"markdownIt-Anchor\" href=\"#32-创建联合索引选择规则\"></a> 3.2 创建联合索引选择规则</h3>\n<ul>\n<li>经常用的列优先（最左匹配原则）</li>\n<li>离散度高的列优先（离散度高原则）</li>\n<li>宽度小的列优先（最少空间原则）</li>\n</ul>\n<h2 id=\"4使用alter命令添加索引\"><a class=\"markdownIt-Anchor\" href=\"#4使用alter命令添加索引\"></a> 4.使用alter命令添加索引</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">PRIMARY</span> KEY (column_list): </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">--  这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> index_name (column_list):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 添加普通索引，索引值可出现多次。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> INDEX index_name (column_list):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--该语句指定了索引为 FULLTEXT ，用于全文索引。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> FULLTEXT index_name (column_list):</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。<br>\n索引分单列索引和组合索引。</p>\n<ul>\n<li>单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。</li>\n<li>组合索引，即一个索引包含多个列。</li>\n</ul>\n<p>创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。<br>\n实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。<br>\n上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：<br>\n虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。<br>\n建立索引会占用磁盘空间的索引文件。</p>\n<h2 id=\"1普通索引\"><a class=\"markdownIt-Anchor\" href=\"#1普通索引\"></a> 1.普通索引</h2>\n<ul>\n<li>创建索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX indexName <span class=\"keyword\">on</span> table_name (column_name )</span><br></pre></td></tr></table></figure>\n</li>\n<li>添加索引（修改表结构）  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 表结构已经存在了，然后使用alter修改表结构添加索引</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name  <span class=\"keyword\">add</span> INDEX indexName(column_name )</span><br></pre></td></tr></table></figure>\n</li>\n<li>创建表指定  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mytable(  </span><br><span class=\"line\">    ID <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,   </span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,  </span><br><span class=\"line\">    INDEX [indexName] (username(length))  </span><br><span class=\"line\">); </span><br></pre></td></tr></table></figure>\n</li>\n<li>删除索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> index [indexName] <span class=\"keyword\">on</span>  table_name </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"2-唯一索引\"><a class=\"markdownIt-Anchor\" href=\"#2-唯一索引\"></a> 2. 唯一索引</h2>\n<p>他和普通索引类似，不同的是：索引列的值必须唯一，但允许有控制。如果是组合索引，则列值的组合必须唯一。</p>\n<ul>\n<li>\n<p>创建索引</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX indexName <span class=\"keyword\">ON</span> table_name (column_name (length ))</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改表结构</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">table</span> mytable <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> [indexName] (column_name(length))</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>创建表的时候指定</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mytable(  </span><br><span class=\"line\">    ID <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,   </span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,  </span><br><span class=\"line\">    <span class=\"keyword\">UNIQUE</span> [indexName] (username(length))  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3组合索引\"><a class=\"markdownIt-Anchor\" href=\"#3组合索引\"></a> 3.组合索引</h2>\n<ul>\n<li>修改表结构指定索引  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> INDEX indexName (column_name1 , column_name2,...)</span><br></pre></td></tr></table></figure>\n</li>\n<li>创建表的时候指定  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mytable(  </span><br><span class=\"line\">    ID <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,   </span><br><span class=\"line\">    username <span class=\"type\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,  </span><br><span class=\"line\">    KEY [indexName] (column_name1 , column_name2,...)  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"31-组合索引查询问题\"><a class=\"markdownIt-Anchor\" href=\"#31-组合索引查询问题\"></a> 3.1 组合索引查询问题</h3>\n<p><strong>问题描述：<strong>在mysql中有张表test_a，有3个字段id,name,num；对这三个字段建立组合索引，那么查询时使用其中某两个或者一个作为查询条件，是否还会走索引<br>\n<img src=\"/2021/08/20/mysql-index/01.png\" alt=\"表结构\"><br>\n根据查询字段的位置不同来决定，如查询</strong>id</strong>、<strong>id,num</strong>、<strong>id,num,name</strong>、 <strong>id, name</strong> 都可以走索引的，其他条件的查询不能走索引。</p>\n<p><strong>组合索引 有“最左前缀”原则。就是只从最左面的开始组合，并不是所有只要含有这三列存在的字段的查询都会用到该组合索引</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加组合索引</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> test_a <span class=\"keyword\">ADD</span> INDEX <span class=\"string\">&#x27;lianhe&#x27;</span>(id, num, name)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>使用三个字段id, num, name查询</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 只要三个条件都有，可以随意变换位置，结果都会走索引</span></span><br><span class=\"line\"><span class=\"comment\">-- 优化器会将条件顺序优化成上面三种情况后执行</span></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">AND</span> num<span class=\"operator\">=</span><span class=\"string\">&#x27;001&#x27;</span> <span class=\"keyword\">AND</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/20/mysql-index/02.png\" alt=\"使用三个字段id, num, name查询\"><br>\n从执行结果上可以看到是从走索引进行查询的</p>\n<ol start=\"2\">\n<li>使用num, name 查询</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> num<span class=\"operator\">=</span><span class=\"string\">&#x27;001&#x27;</span> </span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/20/mysql-index/03.png\" alt=\"使用id, name 查询\"><br>\n3. 使用id, name或者id, num 查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 只要包括id，可以随意变换位置，结果都会走索引</span></span><br><span class=\"line\"><span class=\"comment\">-- 优化器会将条件顺序优化成上面三种情况后执行</span></span><br><span class=\"line\"><span class=\"comment\">--如果只有两个字段，只有id条件命中，num或者name 条件不走联合索引。</span></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">AND</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/20/mysql-index/02.png\" alt=\"使用id, name 查询\"></p>\n<p>需要避免索引失效的情况，如：LIKE %xxx，或者条件中使用函数等。<br>\n4. 使用id查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/20/mysql-index/02.png\" alt=\"使用id查询\"></p>\n<ol start=\"5\">\n<li>使用name或者num查询</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> name <span class=\"operator\">=</span> <span class=\"string\">&#x27;1#&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test_a <span class=\"keyword\">WHERE</span> num <span class=\"operator\">=</span> <span class=\"string\">&#x27;001&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"32-创建联合索引选择规则\"><a class=\"markdownIt-Anchor\" href=\"#32-创建联合索引选择规则\"></a> 3.2 创建联合索引选择规则</h3>\n<ul>\n<li>经常用的列优先（最左匹配原则）</li>\n<li>离散度高的列优先（离散度高原则）</li>\n<li>宽度小的列优先（最少空间原则）</li>\n</ul>\n<h2 id=\"4使用alter命令添加索引\"><a class=\"markdownIt-Anchor\" href=\"#4使用alter命令添加索引\"></a> 4.使用alter命令添加索引</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">PRIMARY</span> KEY (column_list): </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">--  这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> index_name (column_list):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 添加普通索引，索引值可出现多次。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> INDEX index_name (column_list):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--该语句指定了索引为 FULLTEXT ，用于全文索引。</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tbl_name <span class=\"keyword\">ADD</span> FULLTEXT index_name (column_list):</span><br></pre></td></tr></table></figure>\n"},{"title":"mysql事务","comments":0,"translate_title":"mysql-transaction","date":"2021-07-23T08:00:57.000Z","_content":"## 事务的定义\n\n事务是数据管理系统DBMS执行过程中的一个**逻辑单位**，有一个有限的数据库**操作序列**构成\n\n## 事务四大特性\n\n1.  原子性atomicity：依赖undo log做到全部失败\n2.  隔离性isolation：实现方式LBCC 和 MVCC\n3.  持久性durability ：实现方式redo log和double write\n4.  一致性consistency：通过上面的三种方式实现\n\n数据恢复：\n\n-   redo log 崩溃恢复\n-   双写缓冲（double write）\n\n\n\nMysql中insert、delete、update 自带事务\n\n```sql\nshow veriables like ‘autocommit’;\nset session autocommit = on;\nupdate xxx where set xx =1 ;\ncommit;\n```\n\n结束事务两种方式：rollback     commit\n\n## 事务并发的三大问题\n\n数据并发的三大问题其实都是数据库读一致性问题，必须有数据库提供一定的事务隔离机制来解决。\n\n### 脏读\n![image-20200727224117281](./mysql-transcation/image-20201202210510525.png)\n\n### 不可重复读\n![image-20200727224117281](./mysql-transcation/image-20201202210235089.png)\n\n\n\n### 幻读\n![image-20200727224117281](./mysql-transcation/image-20201202210357906.png)\n\n\n## 事务隔离级别\n\nhttp://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt\n![image-20200727224117281](./mysql-transcation/image-20201202210817094.png)\n![image-20200727224117281](./mysql-transcation/image-20201202211406282.png)\n\n![image-20201202211752764](./mysql-transcation/image-20201202211752764.png)\n\n### MVCC思想\n\n![image-20201202212103393](./mysql-transcation/image-20201202212103393.png)\n\n#### Read View（一致性试图）\n\n存储内容\n\n![image-20201202213520136](./mysql-transcation/image-20201202213520136.png)\n\n\n\n#### Read View判断规则\n\n![image-20201202213757692](./mysql-transcation/image-20201202213757692.png)\n\n#### RC与RR read View 的区别\n\n![image-20201202214418001](./mysql-transcation/image-20201202214418001.png)\n\n所以RC解决不了脏读的问题\n\n# Mysql InnoDb所得基本类型\n\nInnoDB支持行锁\n\nMyiSAM支持行锁\n\n表锁和行锁的区别\n\n-   锁力度：表锁 > 行锁\n-   加锁效率：表锁 > 行锁\n-   冲突概率：表锁 > 行锁\n-   并发性能：表锁 < 行锁\n\n## 表锁\n\n![image-20201202214957559](./mysql-transcation/image-20201202214957559.png)\n\n一个事务能够给一张表加上锁的前提是：没有其他任何一个事务锁定了这张表的任意一行数据。如果没有意向锁的话，那么加表锁需要扫描表中的每行数据，大大的浪费时间；\n\n如果在添加行锁的时候，会在表上添加意向锁，那么在添加表锁的时候就不需要去扫描所有表数据了，只需要看下表上是否由意向锁就可；\n\n## 行锁\n\n### 共享锁shared locks\n\n![image-20201202215350319](./mysql-transcation/image-20201202215350319.png)\n\n\n\n### 排它锁Exclusive locks\n\n![image-20201202215717524](./mysql-transcation/image-20201202215717524.png)\n\n\n\n\n\n### Innodb行锁锁定的是什么\n\n锁定的是index索引，如果表中没有索引，那么Innodb会把隐藏列DB_ROW_ID当作聚集索引\n\n加锁一定要加上条件，不然会锁表\n\n![image-20201202222250939](./mysql-transcation/image-20201202222250939.png)\n\n### 记录锁Rcord Lock 锁定记录\n\n![image-20201202222823984](./mysql-transcation/image-20201202222823984.png)\n\n### 间隙锁Gap Lock 锁定范围\n\n专门用于阻塞插入，间隙锁如果没有命中的话，会锁定最后一个值到正无穷，那么在最后一个值和正无穷之间的插入都不能成功。\n\n![image-20201202222914087](./mysql-transcation/image-20201202222914087.png)\n\n### 临健锁Next-key Lock ：锁定范围加记录\n\n![image-20201202223655445](./mysql-transcation/image-20201202223655445.png)\n\n**为了解决幻读的问题**\n\n### 事务隔离级别的实现\n\n![image-20201202224136052](./mysql-transcation/image-20201202224136052.png)\n\n### 事务隔离级别的选择\n\n![image-20201202224412832](./mysql-transcation/image-20201202224412832.png)\n\n\n","source":"_posts/mysql-transcation.md","raw":"---\ntitle: mysql事务\ntags: mysql\ncategories:\n  - 数据库\n  - mysql\ncomments: false\ntranslate_title: mysql-transaction\ndate: 2021-07-23 16:00:57\n---\n## 事务的定义\n\n事务是数据管理系统DBMS执行过程中的一个**逻辑单位**，有一个有限的数据库**操作序列**构成\n\n## 事务四大特性\n\n1.  原子性atomicity：依赖undo log做到全部失败\n2.  隔离性isolation：实现方式LBCC 和 MVCC\n3.  持久性durability ：实现方式redo log和double write\n4.  一致性consistency：通过上面的三种方式实现\n\n数据恢复：\n\n-   redo log 崩溃恢复\n-   双写缓冲（double write）\n\n\n\nMysql中insert、delete、update 自带事务\n\n```sql\nshow veriables like ‘autocommit’;\nset session autocommit = on;\nupdate xxx where set xx =1 ;\ncommit;\n```\n\n结束事务两种方式：rollback     commit\n\n## 事务并发的三大问题\n\n数据并发的三大问题其实都是数据库读一致性问题，必须有数据库提供一定的事务隔离机制来解决。\n\n### 脏读\n![image-20200727224117281](./mysql-transcation/image-20201202210510525.png)\n\n### 不可重复读\n![image-20200727224117281](./mysql-transcation/image-20201202210235089.png)\n\n\n\n### 幻读\n![image-20200727224117281](./mysql-transcation/image-20201202210357906.png)\n\n\n## 事务隔离级别\n\nhttp://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt\n![image-20200727224117281](./mysql-transcation/image-20201202210817094.png)\n![image-20200727224117281](./mysql-transcation/image-20201202211406282.png)\n\n![image-20201202211752764](./mysql-transcation/image-20201202211752764.png)\n\n### MVCC思想\n\n![image-20201202212103393](./mysql-transcation/image-20201202212103393.png)\n\n#### Read View（一致性试图）\n\n存储内容\n\n![image-20201202213520136](./mysql-transcation/image-20201202213520136.png)\n\n\n\n#### Read View判断规则\n\n![image-20201202213757692](./mysql-transcation/image-20201202213757692.png)\n\n#### RC与RR read View 的区别\n\n![image-20201202214418001](./mysql-transcation/image-20201202214418001.png)\n\n所以RC解决不了脏读的问题\n\n# Mysql InnoDb所得基本类型\n\nInnoDB支持行锁\n\nMyiSAM支持行锁\n\n表锁和行锁的区别\n\n-   锁力度：表锁 > 行锁\n-   加锁效率：表锁 > 行锁\n-   冲突概率：表锁 > 行锁\n-   并发性能：表锁 < 行锁\n\n## 表锁\n\n![image-20201202214957559](./mysql-transcation/image-20201202214957559.png)\n\n一个事务能够给一张表加上锁的前提是：没有其他任何一个事务锁定了这张表的任意一行数据。如果没有意向锁的话，那么加表锁需要扫描表中的每行数据，大大的浪费时间；\n\n如果在添加行锁的时候，会在表上添加意向锁，那么在添加表锁的时候就不需要去扫描所有表数据了，只需要看下表上是否由意向锁就可；\n\n## 行锁\n\n### 共享锁shared locks\n\n![image-20201202215350319](./mysql-transcation/image-20201202215350319.png)\n\n\n\n### 排它锁Exclusive locks\n\n![image-20201202215717524](./mysql-transcation/image-20201202215717524.png)\n\n\n\n\n\n### Innodb行锁锁定的是什么\n\n锁定的是index索引，如果表中没有索引，那么Innodb会把隐藏列DB_ROW_ID当作聚集索引\n\n加锁一定要加上条件，不然会锁表\n\n![image-20201202222250939](./mysql-transcation/image-20201202222250939.png)\n\n### 记录锁Rcord Lock 锁定记录\n\n![image-20201202222823984](./mysql-transcation/image-20201202222823984.png)\n\n### 间隙锁Gap Lock 锁定范围\n\n专门用于阻塞插入，间隙锁如果没有命中的话，会锁定最后一个值到正无穷，那么在最后一个值和正无穷之间的插入都不能成功。\n\n![image-20201202222914087](./mysql-transcation/image-20201202222914087.png)\n\n### 临健锁Next-key Lock ：锁定范围加记录\n\n![image-20201202223655445](./mysql-transcation/image-20201202223655445.png)\n\n**为了解决幻读的问题**\n\n### 事务隔离级别的实现\n\n![image-20201202224136052](./mysql-transcation/image-20201202224136052.png)\n\n### 事务隔离级别的选择\n\n![image-20201202224412832](./mysql-transcation/image-20201202224412832.png)\n\n\n","slug":"mysql-transcation","published":1,"updated":"2021-08-18T14:55:31.844Z","layout":"post","photos":[],"link":"","_id":"ckslj4psf0010kw3qaibx2oze","content":"<h2 id=\"事务的定义\"><a class=\"markdownIt-Anchor\" href=\"#事务的定义\"></a> 事务的定义</h2>\n<p>事务是数据管理系统DBMS执行过程中的一个<strong>逻辑单位</strong>，有一个有限的数据库<strong>操作序列</strong>构成</p>\n<h2 id=\"事务四大特性\"><a class=\"markdownIt-Anchor\" href=\"#事务四大特性\"></a> 事务四大特性</h2>\n<ol>\n<li>原子性atomicity：依赖undo log做到全部失败</li>\n<li>隔离性isolation：实现方式LBCC 和 MVCC</li>\n<li>持久性durability ：实现方式redo log和double write</li>\n<li>一致性consistency：通过上面的三种方式实现</li>\n</ol>\n<p>数据恢复：</p>\n<ul>\n<li>redo log 崩溃恢复</li>\n<li>双写缓冲（double write）</li>\n</ul>\n<p>Mysql中insert、delete、update 自带事务</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> veriables <span class=\"keyword\">like</span> ‘autocommit’;</span><br><span class=\"line\"><span class=\"keyword\">set</span> session autocommit <span class=\"operator\">=</span> <span class=\"keyword\">on</span>;</span><br><span class=\"line\">update xxx <span class=\"keyword\">where</span> <span class=\"keyword\">set</span> xx <span class=\"operator\">=</span><span class=\"number\">1</span> ;</span><br><span class=\"line\"><span class=\"keyword\">commit</span>;</span><br></pre></td></tr></table></figure>\n<p>结束事务两种方式：rollback     commit</p>\n<h2 id=\"事务并发的三大问题\"><a class=\"markdownIt-Anchor\" href=\"#事务并发的三大问题\"></a> 事务并发的三大问题</h2>\n<p>数据并发的三大问题其实都是数据库读一致性问题，必须有数据库提供一定的事务隔离机制来解决。</p>\n<h3 id=\"脏读\"><a class=\"markdownIt-Anchor\" href=\"#脏读\"></a> 脏读</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202210510525.png\" alt=\"image-20200727224117281\"></p>\n<h3 id=\"不可重复读\"><a class=\"markdownIt-Anchor\" href=\"#不可重复读\"></a> 不可重复读</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202210235089.png\" alt=\"image-20200727224117281\"></p>\n<h3 id=\"幻读\"><a class=\"markdownIt-Anchor\" href=\"#幻读\"></a> 幻读</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202210357906.png\" alt=\"image-20200727224117281\"></p>\n<h2 id=\"事务隔离级别\"><a class=\"markdownIt-Anchor\" href=\"#事务隔离级别\"></a> 事务隔离级别</h2>\n<p><a href=\"http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt\">http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt</a><br>\n<img src=\"/2021/07/23/mysql-transcation/image-20201202210817094.png\" alt=\"image-20200727224117281\"><br>\n<img src=\"/2021/07/23/mysql-transcation/image-20201202211406282.png\" alt=\"image-20200727224117281\"></p>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202211752764.png\" alt=\"image-20201202211752764\"></p>\n<h3 id=\"mvcc思想\"><a class=\"markdownIt-Anchor\" href=\"#mvcc思想\"></a> MVCC思想</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202212103393.png\" alt=\"image-20201202212103393\"></p>\n<h4 id=\"read-view一致性试图\"><a class=\"markdownIt-Anchor\" href=\"#read-view一致性试图\"></a> Read View（一致性试图）</h4>\n<p>存储内容</p>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202213520136.png\" alt=\"image-20201202213520136\"></p>\n<h4 id=\"read-view判断规则\"><a class=\"markdownIt-Anchor\" href=\"#read-view判断规则\"></a> Read View判断规则</h4>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202213757692.png\" alt=\"image-20201202213757692\"></p>\n<h4 id=\"rc与rr-read-view-的区别\"><a class=\"markdownIt-Anchor\" href=\"#rc与rr-read-view-的区别\"></a> RC与RR read View 的区别</h4>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202214418001.png\" alt=\"image-20201202214418001\"></p>\n<p>所以RC解决不了脏读的问题</p>\n<h1 id=\"mysql-innodb所得基本类型\"><a class=\"markdownIt-Anchor\" href=\"#mysql-innodb所得基本类型\"></a> Mysql InnoDb所得基本类型</h1>\n<p>InnoDB支持行锁</p>\n<p>MyiSAM支持行锁</p>\n<p>表锁和行锁的区别</p>\n<ul>\n<li>锁力度：表锁 &gt; 行锁</li>\n<li>加锁效率：表锁 &gt; 行锁</li>\n<li>冲突概率：表锁 &gt; 行锁</li>\n<li>并发性能：表锁 &lt; 行锁</li>\n</ul>\n<h2 id=\"表锁\"><a class=\"markdownIt-Anchor\" href=\"#表锁\"></a> 表锁</h2>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202214957559.png\" alt=\"image-20201202214957559\"></p>\n<p>一个事务能够给一张表加上锁的前提是：没有其他任何一个事务锁定了这张表的任意一行数据。如果没有意向锁的话，那么加表锁需要扫描表中的每行数据，大大的浪费时间；</p>\n<p>如果在添加行锁的时候，会在表上添加意向锁，那么在添加表锁的时候就不需要去扫描所有表数据了，只需要看下表上是否由意向锁就可；</p>\n<h2 id=\"行锁\"><a class=\"markdownIt-Anchor\" href=\"#行锁\"></a> 行锁</h2>\n<h3 id=\"共享锁shared-locks\"><a class=\"markdownIt-Anchor\" href=\"#共享锁shared-locks\"></a> 共享锁shared locks</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202215350319.png\" alt=\"image-20201202215350319\"></p>\n<h3 id=\"排它锁exclusive-locks\"><a class=\"markdownIt-Anchor\" href=\"#排它锁exclusive-locks\"></a> 排它锁Exclusive locks</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202215717524.png\" alt=\"image-20201202215717524\"></p>\n<h3 id=\"innodb行锁锁定的是什么\"><a class=\"markdownIt-Anchor\" href=\"#innodb行锁锁定的是什么\"></a> Innodb行锁锁定的是什么</h3>\n<p>锁定的是index索引，如果表中没有索引，那么Innodb会把隐藏列DB_ROW_ID当作聚集索引</p>\n<p>加锁一定要加上条件，不然会锁表</p>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202222250939.png\" alt=\"image-20201202222250939\"></p>\n<h3 id=\"记录锁rcord-lock-锁定记录\"><a class=\"markdownIt-Anchor\" href=\"#记录锁rcord-lock-锁定记录\"></a> 记录锁Rcord Lock 锁定记录</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202222823984.png\" alt=\"image-20201202222823984\"></p>\n<h3 id=\"间隙锁gap-lock-锁定范围\"><a class=\"markdownIt-Anchor\" href=\"#间隙锁gap-lock-锁定范围\"></a> 间隙锁Gap Lock 锁定范围</h3>\n<p>专门用于阻塞插入，间隙锁如果没有命中的话，会锁定最后一个值到正无穷，那么在最后一个值和正无穷之间的插入都不能成功。</p>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202222914087.png\" alt=\"image-20201202222914087\"></p>\n<h3 id=\"临健锁next-key-lock-锁定范围加记录\"><a class=\"markdownIt-Anchor\" href=\"#临健锁next-key-lock-锁定范围加记录\"></a> 临健锁Next-key Lock ：锁定范围加记录</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202223655445.png\" alt=\"image-20201202223655445\"></p>\n<p><strong>为了解决幻读的问题</strong></p>\n<h3 id=\"事务隔离级别的实现\"><a class=\"markdownIt-Anchor\" href=\"#事务隔离级别的实现\"></a> 事务隔离级别的实现</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202224136052.png\" alt=\"image-20201202224136052\"></p>\n<h3 id=\"事务隔离级别的选择\"><a class=\"markdownIt-Anchor\" href=\"#事务隔离级别的选择\"></a> 事务隔离级别的选择</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202224412832.png\" alt=\"image-20201202224412832\"></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"事务的定义\"><a class=\"markdownIt-Anchor\" href=\"#事务的定义\"></a> 事务的定义</h2>\n<p>事务是数据管理系统DBMS执行过程中的一个<strong>逻辑单位</strong>，有一个有限的数据库<strong>操作序列</strong>构成</p>\n<h2 id=\"事务四大特性\"><a class=\"markdownIt-Anchor\" href=\"#事务四大特性\"></a> 事务四大特性</h2>\n<ol>\n<li>原子性atomicity：依赖undo log做到全部失败</li>\n<li>隔离性isolation：实现方式LBCC 和 MVCC</li>\n<li>持久性durability ：实现方式redo log和double write</li>\n<li>一致性consistency：通过上面的三种方式实现</li>\n</ol>\n<p>数据恢复：</p>\n<ul>\n<li>redo log 崩溃恢复</li>\n<li>双写缓冲（double write）</li>\n</ul>\n<p>Mysql中insert、delete、update 自带事务</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> veriables <span class=\"keyword\">like</span> ‘autocommit’;</span><br><span class=\"line\"><span class=\"keyword\">set</span> session autocommit <span class=\"operator\">=</span> <span class=\"keyword\">on</span>;</span><br><span class=\"line\">update xxx <span class=\"keyword\">where</span> <span class=\"keyword\">set</span> xx <span class=\"operator\">=</span><span class=\"number\">1</span> ;</span><br><span class=\"line\"><span class=\"keyword\">commit</span>;</span><br></pre></td></tr></table></figure>\n<p>结束事务两种方式：rollback     commit</p>\n<h2 id=\"事务并发的三大问题\"><a class=\"markdownIt-Anchor\" href=\"#事务并发的三大问题\"></a> 事务并发的三大问题</h2>\n<p>数据并发的三大问题其实都是数据库读一致性问题，必须有数据库提供一定的事务隔离机制来解决。</p>\n<h3 id=\"脏读\"><a class=\"markdownIt-Anchor\" href=\"#脏读\"></a> 脏读</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202210510525.png\" alt=\"image-20200727224117281\"></p>\n<h3 id=\"不可重复读\"><a class=\"markdownIt-Anchor\" href=\"#不可重复读\"></a> 不可重复读</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202210235089.png\" alt=\"image-20200727224117281\"></p>\n<h3 id=\"幻读\"><a class=\"markdownIt-Anchor\" href=\"#幻读\"></a> 幻读</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202210357906.png\" alt=\"image-20200727224117281\"></p>\n<h2 id=\"事务隔离级别\"><a class=\"markdownIt-Anchor\" href=\"#事务隔离级别\"></a> 事务隔离级别</h2>\n<p><a href=\"http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt\">http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt</a><br>\n<img src=\"/2021/07/23/mysql-transcation/image-20201202210817094.png\" alt=\"image-20200727224117281\"><br>\n<img src=\"/2021/07/23/mysql-transcation/image-20201202211406282.png\" alt=\"image-20200727224117281\"></p>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202211752764.png\" alt=\"image-20201202211752764\"></p>\n<h3 id=\"mvcc思想\"><a class=\"markdownIt-Anchor\" href=\"#mvcc思想\"></a> MVCC思想</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202212103393.png\" alt=\"image-20201202212103393\"></p>\n<h4 id=\"read-view一致性试图\"><a class=\"markdownIt-Anchor\" href=\"#read-view一致性试图\"></a> Read View（一致性试图）</h4>\n<p>存储内容</p>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202213520136.png\" alt=\"image-20201202213520136\"></p>\n<h4 id=\"read-view判断规则\"><a class=\"markdownIt-Anchor\" href=\"#read-view判断规则\"></a> Read View判断规则</h4>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202213757692.png\" alt=\"image-20201202213757692\"></p>\n<h4 id=\"rc与rr-read-view-的区别\"><a class=\"markdownIt-Anchor\" href=\"#rc与rr-read-view-的区别\"></a> RC与RR read View 的区别</h4>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202214418001.png\" alt=\"image-20201202214418001\"></p>\n<p>所以RC解决不了脏读的问题</p>\n<h1 id=\"mysql-innodb所得基本类型\"><a class=\"markdownIt-Anchor\" href=\"#mysql-innodb所得基本类型\"></a> Mysql InnoDb所得基本类型</h1>\n<p>InnoDB支持行锁</p>\n<p>MyiSAM支持行锁</p>\n<p>表锁和行锁的区别</p>\n<ul>\n<li>锁力度：表锁 &gt; 行锁</li>\n<li>加锁效率：表锁 &gt; 行锁</li>\n<li>冲突概率：表锁 &gt; 行锁</li>\n<li>并发性能：表锁 &lt; 行锁</li>\n</ul>\n<h2 id=\"表锁\"><a class=\"markdownIt-Anchor\" href=\"#表锁\"></a> 表锁</h2>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202214957559.png\" alt=\"image-20201202214957559\"></p>\n<p>一个事务能够给一张表加上锁的前提是：没有其他任何一个事务锁定了这张表的任意一行数据。如果没有意向锁的话，那么加表锁需要扫描表中的每行数据，大大的浪费时间；</p>\n<p>如果在添加行锁的时候，会在表上添加意向锁，那么在添加表锁的时候就不需要去扫描所有表数据了，只需要看下表上是否由意向锁就可；</p>\n<h2 id=\"行锁\"><a class=\"markdownIt-Anchor\" href=\"#行锁\"></a> 行锁</h2>\n<h3 id=\"共享锁shared-locks\"><a class=\"markdownIt-Anchor\" href=\"#共享锁shared-locks\"></a> 共享锁shared locks</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202215350319.png\" alt=\"image-20201202215350319\"></p>\n<h3 id=\"排它锁exclusive-locks\"><a class=\"markdownIt-Anchor\" href=\"#排它锁exclusive-locks\"></a> 排它锁Exclusive locks</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202215717524.png\" alt=\"image-20201202215717524\"></p>\n<h3 id=\"innodb行锁锁定的是什么\"><a class=\"markdownIt-Anchor\" href=\"#innodb行锁锁定的是什么\"></a> Innodb行锁锁定的是什么</h3>\n<p>锁定的是index索引，如果表中没有索引，那么Innodb会把隐藏列DB_ROW_ID当作聚集索引</p>\n<p>加锁一定要加上条件，不然会锁表</p>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202222250939.png\" alt=\"image-20201202222250939\"></p>\n<h3 id=\"记录锁rcord-lock-锁定记录\"><a class=\"markdownIt-Anchor\" href=\"#记录锁rcord-lock-锁定记录\"></a> 记录锁Rcord Lock 锁定记录</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202222823984.png\" alt=\"image-20201202222823984\"></p>\n<h3 id=\"间隙锁gap-lock-锁定范围\"><a class=\"markdownIt-Anchor\" href=\"#间隙锁gap-lock-锁定范围\"></a> 间隙锁Gap Lock 锁定范围</h3>\n<p>专门用于阻塞插入，间隙锁如果没有命中的话，会锁定最后一个值到正无穷，那么在最后一个值和正无穷之间的插入都不能成功。</p>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202222914087.png\" alt=\"image-20201202222914087\"></p>\n<h3 id=\"临健锁next-key-lock-锁定范围加记录\"><a class=\"markdownIt-Anchor\" href=\"#临健锁next-key-lock-锁定范围加记录\"></a> 临健锁Next-key Lock ：锁定范围加记录</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202223655445.png\" alt=\"image-20201202223655445\"></p>\n<p><strong>为了解决幻读的问题</strong></p>\n<h3 id=\"事务隔离级别的实现\"><a class=\"markdownIt-Anchor\" href=\"#事务隔离级别的实现\"></a> 事务隔离级别的实现</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202224136052.png\" alt=\"image-20201202224136052\"></p>\n<h3 id=\"事务隔离级别的选择\"><a class=\"markdownIt-Anchor\" href=\"#事务隔离级别的选择\"></a> 事务隔离级别的选择</h3>\n<p><img src=\"/2021/07/23/mysql-transcation/image-20201202224412832.png\" alt=\"image-20201202224412832\"></p>\n"},{"title":"mysql知识总结","comments":0,"translate_title":"mysql-knowledge-summary","date":"2021-07-23T08:00:57.000Z","_content":"# mysql 初识\n## 1. 版本历史\n\n-   1996年 mysql.10发布\n-   1996年10月3.11.1发布\n-   2000年ISAM升级成MyISAM引擎，mysql开源\n-   2003年 Mysql4.0发布集成InnoDB存储引擎\n-   2005年 MySQL 5.0版本发布，提供了试图，存储过程等功能\n-   2010年MySQL5.5发布，InnoDB成为默认的存储引擎\n-   2016年发布8.0.0版本\n\n## 2. 流行分支\n-   Maria DB\n-   Percona Server\n\n## 3. SQL 执行流程\n### 通信类型\n-   同步\n-   异步\n\n### 连接方式\n-   长连接\n-   短连接\n\n### 超时时间\n\n-   非交互式超时时间，如JDBC程序，单位s\n\n    ```sql\n    SHOW GLOBAL VARIABLES LIKE 'wait_timeout'\n    ```\n\n-   交互式超时间，如数据库工具\n\n    ```sql\n    SHOW GLOBAL variables LIKE 'interactive_timeout'\n    ```\n\n### 查看连接\n\n```sql\nshow GLOBAL STATUS LIKE 'Thread%'\n```\n|     连接名称      |      描述      |\n| :---------------: | :------------: |\n|  Threads_cached   |  缓存中的线程  |\n| Threads_connected |   连接中线程   |\n|  Threads_created  |  创建过的线程  |\n|  Threads_running  | 正在执行的线程 |\n\n#### 查看所有的线程\n\n如果是root权限，可以看到所有用户发起的线程，否则只能看到自己的线程\n\n```sql\nshow processlist\n```\n\n![image-20200727224117281](./mysql/image-20200727224117281.png)\n\n-   id ：一个表示，kill一个语句的时候可以使用\n-   user：显示当前用户，如果不是root，这个命令就只显示你权限范围内的sql语句\n-   host：显示这个语句是从哪个ip的端口上发出的，可以用来追踪出问题语句的用户\n-   db：显示这个进程目前连接的是哪个数据库\n-   commmand：显示当年连接的执行命令，一般分为休眠slee、查询query、连接connect\n-   time：此状态持续的时间，单位是秒\n-   state： 显示使用当年连接的sql语句状态，state只是语句执行中的某一个状态，如查询：需要经过copying to tmp table、sorting result、sending data等转台才可以完成\n-   info：显示这个sql语句，因为长度有限，所以长的sql语句就显示不全\n\n#### 查看最大连接数\n\n```sql\nshow variables LIKE 'max_connections'; //一般默认是151，最大可以是2的14次方\n```\n#### mysql变量级别\n-   global全局\n    ```tex\n    在mysql中修改全局变量global有两种方法：\n    1. 修改my.ini配置文件（永久有效）\n    2. 在不修改配置文件的基础上，使用关键字global设置全局变量\n       set global autocommit = 1;将autocommit变量的值设置为ON，需要注意的是此方法对global全局变量的设计进对于新开启的会话有效，对已开启的会话无效，同理，如果修改回哈session变量，可以使用session关键字，如set session autocommit = 1；这个仅对本session的变量配置有效，对其他的session无效；（在MySQL服务重启之后，数据库的配置重新按照my.ini文件 初始化，global和session 的配置都会失效）\n    ```\n\n-   session当前会话\n\n### 通信协议\n\n-   Unix Socket\n-   TCP/IP\n-   Named Pipes命名管道\n-   Share Memory共享内存\n\n### 通信方式\n\n-   单工\n-   半双工\n-   全双工\n\n![image-20200727231112059](./mysql/image-20200727231112059.png)\n\n### MySQL 缓存\n\n```sql\nSHOW VARIABLES LIKE 'query_cache%'\n#默认关闭，是因为mysql要保证两次执行的sql完全一致，连空格，大小写都一致，而且当数据表中的任何一条数据发生变化，整个缓存会失效；\n```\n\n#2. 删除数据\n## 1. 数据删除方式\n\n- DELETE\n- Truncate\n- Drop\n\n## 2. 执行速度\n\ndrop > truncate > delete\n\n### 2.1 DELETE\n\n```SQL\nDELETE FROM table_name WHERE XXX\n```\n\n- DELETE 数据数据库DML操作语言，只删除数据不删除表的结构，会走事务，执行时会触发trigger\n\n- 在InnoDB中，delete其实并不会真的把数据删除，mysqL实际上只是给删除的数据打个标记为删除，因此delete删除表中的数据，表文件在磁盘所占的控件不会变小，存储控件不会被释放，只是把删除的数据设置为不可见。虽然未释放磁盘控件，但是下次插入数据的时候，仍然可以重用这部分空间（重用->覆盖）\n\n- delete执行时，会先把所删除数据缓存到rollback segement中，事务commit之后生效\n\n- **delete from  table_name** 删除表的全部数据对于MyISAM会释放磁盘控件，Innodb不会释放磁盘空间\n\n- 对于**DELETE from table_name where xxx**带条件的删除，不管是Innodb还是MyISAM都不会释放磁盘控件\n\n- delete 操作以后使用**optimize table  table_name**会里级释放磁盘空间（不管是Innodb还是MyISAM）\n\n    ```sql\n    --查看表占用磁盘空间大小\n    select concat(round(sum(DATA_LENGTH/1024/1024),2),'M') as table_size\n    from information_schema.tables where table_schema='demo_db' AND table_name='demo_table';\n    \n    -- 执行空间优化语句，以及执行后的表size变化\n    optimize table demo_table\n    ```\n\n\n\n- **delete 操作时一行一行执行删除的，并且同时将该行的删除操作日志记录在redo和undo表空间中以便进行回滚（rollback）和重做操作**，生成大量日志也会占用磁盘空间\n\n### 2.2 Truncate\n\n```sql\n--删除表数据， 不带where条件\n--与不带where的delete ：只删除数据，而不删除表的结构\t\nTruncate table table_name\n```\n\n- **Truncate数据数据库DDL定义语言，不走事务，原数据不放到rollback segement中，操作不触发trigger**，执行后里级生效，无法找回；\n\n- **truncate table table_name里级释放磁盘空间不管是Innodb 和MyISAM**；truncate table其实有点类似余drop table然后create，只不过这个crate table的过程做了优化，比如表结构文件之前已经有了等，所以速度上应该是接近drop table的速度\n\n- truncate 能快速清空一个表，并且重置auto_increment的值\n\n  ​\t但是对于不同的类型存储引擎需要注意的地方是：\n\n    - **对于MyISAM**：truncate会重置auto_increment（自增序列）的值为1，而delete后表仍然保持auto_increment。\n    - **对于Innodb**：truncate会重置auto_increment（自增序列）的值为1， 而delete后表仍然保持auto_increment。但是在做delete整个表之后重启mysql的话，而重启后的auto_increment会被置为1\n\n  也就是说，Innodb的表本身是无法持久保存auto_increment。delete表之后auto_increment仍然保存在内存，但是重启后就丢失了，只能从1开始，实质上重启后的auto_increment会从SELETE 1+MAX(ai_col) FROM t开始\n\n- 小心使用 truncate，尤其没有备份的时候，如果误删除线上的表，记得及时联系中国民航，订票电话：400-806-9553\n\n### 2.3 Drop\n\n```sql\n-- 删除表结构以及表数据\nDrop table table_name\n```\n\n- **drop：属于数据库DDL定义语言，同Truncate；**\n\n  **执行后立即生效，无法找回！ 执行后立即生效，无法找回！ 执行后立即生效，无法找回！**\n\n- **drop table table_name 立刻释放磁盘空间 ，不管是 InnoDB 和 MyISAM; **drop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index); 依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。\n\n- 小心使用 drop ，要删表跑路的兄弟，请在订票成功后在执行操作！订票电话：400-806-9553\n\n## 3. 总结\n\n**可以这么理解，一本书，delete是把目录撕了，truncate是把书的内容撕下来烧了，drop是把书烧了**\n\n\n","source":"_posts/mysql.md","raw":"---\ntitle: mysql知识总结\ntags: mysql\ncategories:\n- 数据库\n- mysql\ncomments: false\ntranslate_title: mysql-knowledge-summary\ndate: 2021-07-23 16:00:57\n---\n# mysql 初识\n## 1. 版本历史\n\n-   1996年 mysql.10发布\n-   1996年10月3.11.1发布\n-   2000年ISAM升级成MyISAM引擎，mysql开源\n-   2003年 Mysql4.0发布集成InnoDB存储引擎\n-   2005年 MySQL 5.0版本发布，提供了试图，存储过程等功能\n-   2010年MySQL5.5发布，InnoDB成为默认的存储引擎\n-   2016年发布8.0.0版本\n\n## 2. 流行分支\n-   Maria DB\n-   Percona Server\n\n## 3. SQL 执行流程\n### 通信类型\n-   同步\n-   异步\n\n### 连接方式\n-   长连接\n-   短连接\n\n### 超时时间\n\n-   非交互式超时时间，如JDBC程序，单位s\n\n    ```sql\n    SHOW GLOBAL VARIABLES LIKE 'wait_timeout'\n    ```\n\n-   交互式超时间，如数据库工具\n\n    ```sql\n    SHOW GLOBAL variables LIKE 'interactive_timeout'\n    ```\n\n### 查看连接\n\n```sql\nshow GLOBAL STATUS LIKE 'Thread%'\n```\n|     连接名称      |      描述      |\n| :---------------: | :------------: |\n|  Threads_cached   |  缓存中的线程  |\n| Threads_connected |   连接中线程   |\n|  Threads_created  |  创建过的线程  |\n|  Threads_running  | 正在执行的线程 |\n\n#### 查看所有的线程\n\n如果是root权限，可以看到所有用户发起的线程，否则只能看到自己的线程\n\n```sql\nshow processlist\n```\n\n![image-20200727224117281](./mysql/image-20200727224117281.png)\n\n-   id ：一个表示，kill一个语句的时候可以使用\n-   user：显示当前用户，如果不是root，这个命令就只显示你权限范围内的sql语句\n-   host：显示这个语句是从哪个ip的端口上发出的，可以用来追踪出问题语句的用户\n-   db：显示这个进程目前连接的是哪个数据库\n-   commmand：显示当年连接的执行命令，一般分为休眠slee、查询query、连接connect\n-   time：此状态持续的时间，单位是秒\n-   state： 显示使用当年连接的sql语句状态，state只是语句执行中的某一个状态，如查询：需要经过copying to tmp table、sorting result、sending data等转台才可以完成\n-   info：显示这个sql语句，因为长度有限，所以长的sql语句就显示不全\n\n#### 查看最大连接数\n\n```sql\nshow variables LIKE 'max_connections'; //一般默认是151，最大可以是2的14次方\n```\n#### mysql变量级别\n-   global全局\n    ```tex\n    在mysql中修改全局变量global有两种方法：\n    1. 修改my.ini配置文件（永久有效）\n    2. 在不修改配置文件的基础上，使用关键字global设置全局变量\n       set global autocommit = 1;将autocommit变量的值设置为ON，需要注意的是此方法对global全局变量的设计进对于新开启的会话有效，对已开启的会话无效，同理，如果修改回哈session变量，可以使用session关键字，如set session autocommit = 1；这个仅对本session的变量配置有效，对其他的session无效；（在MySQL服务重启之后，数据库的配置重新按照my.ini文件 初始化，global和session 的配置都会失效）\n    ```\n\n-   session当前会话\n\n### 通信协议\n\n-   Unix Socket\n-   TCP/IP\n-   Named Pipes命名管道\n-   Share Memory共享内存\n\n### 通信方式\n\n-   单工\n-   半双工\n-   全双工\n\n![image-20200727231112059](./mysql/image-20200727231112059.png)\n\n### MySQL 缓存\n\n```sql\nSHOW VARIABLES LIKE 'query_cache%'\n#默认关闭，是因为mysql要保证两次执行的sql完全一致，连空格，大小写都一致，而且当数据表中的任何一条数据发生变化，整个缓存会失效；\n```\n\n#2. 删除数据\n## 1. 数据删除方式\n\n- DELETE\n- Truncate\n- Drop\n\n## 2. 执行速度\n\ndrop > truncate > delete\n\n### 2.1 DELETE\n\n```SQL\nDELETE FROM table_name WHERE XXX\n```\n\n- DELETE 数据数据库DML操作语言，只删除数据不删除表的结构，会走事务，执行时会触发trigger\n\n- 在InnoDB中，delete其实并不会真的把数据删除，mysqL实际上只是给删除的数据打个标记为删除，因此delete删除表中的数据，表文件在磁盘所占的控件不会变小，存储控件不会被释放，只是把删除的数据设置为不可见。虽然未释放磁盘控件，但是下次插入数据的时候，仍然可以重用这部分空间（重用->覆盖）\n\n- delete执行时，会先把所删除数据缓存到rollback segement中，事务commit之后生效\n\n- **delete from  table_name** 删除表的全部数据对于MyISAM会释放磁盘控件，Innodb不会释放磁盘空间\n\n- 对于**DELETE from table_name where xxx**带条件的删除，不管是Innodb还是MyISAM都不会释放磁盘控件\n\n- delete 操作以后使用**optimize table  table_name**会里级释放磁盘空间（不管是Innodb还是MyISAM）\n\n    ```sql\n    --查看表占用磁盘空间大小\n    select concat(round(sum(DATA_LENGTH/1024/1024),2),'M') as table_size\n    from information_schema.tables where table_schema='demo_db' AND table_name='demo_table';\n    \n    -- 执行空间优化语句，以及执行后的表size变化\n    optimize table demo_table\n    ```\n\n\n\n- **delete 操作时一行一行执行删除的，并且同时将该行的删除操作日志记录在redo和undo表空间中以便进行回滚（rollback）和重做操作**，生成大量日志也会占用磁盘空间\n\n### 2.2 Truncate\n\n```sql\n--删除表数据， 不带where条件\n--与不带where的delete ：只删除数据，而不删除表的结构\t\nTruncate table table_name\n```\n\n- **Truncate数据数据库DDL定义语言，不走事务，原数据不放到rollback segement中，操作不触发trigger**，执行后里级生效，无法找回；\n\n- **truncate table table_name里级释放磁盘空间不管是Innodb 和MyISAM**；truncate table其实有点类似余drop table然后create，只不过这个crate table的过程做了优化，比如表结构文件之前已经有了等，所以速度上应该是接近drop table的速度\n\n- truncate 能快速清空一个表，并且重置auto_increment的值\n\n  ​\t但是对于不同的类型存储引擎需要注意的地方是：\n\n    - **对于MyISAM**：truncate会重置auto_increment（自增序列）的值为1，而delete后表仍然保持auto_increment。\n    - **对于Innodb**：truncate会重置auto_increment（自增序列）的值为1， 而delete后表仍然保持auto_increment。但是在做delete整个表之后重启mysql的话，而重启后的auto_increment会被置为1\n\n  也就是说，Innodb的表本身是无法持久保存auto_increment。delete表之后auto_increment仍然保存在内存，但是重启后就丢失了，只能从1开始，实质上重启后的auto_increment会从SELETE 1+MAX(ai_col) FROM t开始\n\n- 小心使用 truncate，尤其没有备份的时候，如果误删除线上的表，记得及时联系中国民航，订票电话：400-806-9553\n\n### 2.3 Drop\n\n```sql\n-- 删除表结构以及表数据\nDrop table table_name\n```\n\n- **drop：属于数据库DDL定义语言，同Truncate；**\n\n  **执行后立即生效，无法找回！ 执行后立即生效，无法找回！ 执行后立即生效，无法找回！**\n\n- **drop table table_name 立刻释放磁盘空间 ，不管是 InnoDB 和 MyISAM; **drop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index); 依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。\n\n- 小心使用 drop ，要删表跑路的兄弟，请在订票成功后在执行操作！订票电话：400-806-9553\n\n## 3. 总结\n\n**可以这么理解，一本书，delete是把目录撕了，truncate是把书的内容撕下来烧了，drop是把书烧了**\n\n\n","slug":"mysql","published":1,"updated":"2021-08-15T07:41:26.117Z","layout":"post","photos":[],"link":"","_id":"ckslj4psf0012kw3q7ql6fyr8","content":"<h1 id=\"mysql-初识\"><a class=\"markdownIt-Anchor\" href=\"#mysql-初识\"></a> mysql 初识</h1>\n<h2 id=\"1-版本历史\"><a class=\"markdownIt-Anchor\" href=\"#1-版本历史\"></a> 1. 版本历史</h2>\n<ul>\n<li>1996年 mysql.10发布</li>\n<li>1996年10月3.11.1发布</li>\n<li>2000年ISAM升级成MyISAM引擎，mysql开源</li>\n<li>2003年 Mysql4.0发布集成InnoDB存储引擎</li>\n<li>2005年 MySQL 5.0版本发布，提供了试图，存储过程等功能</li>\n<li>2010年MySQL5.5发布，InnoDB成为默认的存储引擎</li>\n<li>2016年发布8.0.0版本</li>\n</ul>\n<h2 id=\"2-流行分支\"><a class=\"markdownIt-Anchor\" href=\"#2-流行分支\"></a> 2. 流行分支</h2>\n<ul>\n<li>Maria DB</li>\n<li>Percona Server</li>\n</ul>\n<h2 id=\"3-sql-执行流程\"><a class=\"markdownIt-Anchor\" href=\"#3-sql-执行流程\"></a> 3. SQL 执行流程</h2>\n<h3 id=\"通信类型\"><a class=\"markdownIt-Anchor\" href=\"#通信类型\"></a> 通信类型</h3>\n<ul>\n<li>同步</li>\n<li>异步</li>\n</ul>\n<h3 id=\"连接方式\"><a class=\"markdownIt-Anchor\" href=\"#连接方式\"></a> 连接方式</h3>\n<ul>\n<li>长连接</li>\n<li>短连接</li>\n</ul>\n<h3 id=\"超时时间\"><a class=\"markdownIt-Anchor\" href=\"#超时时间\"></a> 超时时间</h3>\n<ul>\n<li>\n<p>非交互式超时时间，如JDBC程序，单位s</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">GLOBAL</span> VARIABLES <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;wait_timeout&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>交互式超时间，如数据库工具</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">GLOBAL</span> variables <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;interactive_timeout&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"查看连接\"><a class=\"markdownIt-Anchor\" href=\"#查看连接\"></a> 查看连接</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">GLOBAL</span> STATUS <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;Thread%&#x27;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">连接名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Threads_cached</td>\n<td style=\"text-align:center\">缓存中的线程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Threads_connected</td>\n<td style=\"text-align:center\">连接中线程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Threads_created</td>\n<td style=\"text-align:center\">创建过的线程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Threads_running</td>\n<td style=\"text-align:center\">正在执行的线程</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"查看所有的线程\"><a class=\"markdownIt-Anchor\" href=\"#查看所有的线程\"></a> 查看所有的线程</h4>\n<p>如果是root权限，可以看到所有用户发起的线程，否则只能看到自己的线程</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> processlist</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/07/23/mysql/image-20200727224117281.png\" alt=\"image-20200727224117281\"></p>\n<ul>\n<li>id ：一个表示，kill一个语句的时候可以使用</li>\n<li>user：显示当前用户，如果不是root，这个命令就只显示你权限范围内的sql语句</li>\n<li>host：显示这个语句是从哪个ip的端口上发出的，可以用来追踪出问题语句的用户</li>\n<li>db：显示这个进程目前连接的是哪个数据库</li>\n<li>commmand：显示当年连接的执行命令，一般分为休眠slee、查询query、连接connect</li>\n<li>time：此状态持续的时间，单位是秒</li>\n<li>state： 显示使用当年连接的sql语句状态，state只是语句执行中的某一个状态，如查询：需要经过copying to tmp table、sorting result、sending data等转台才可以完成</li>\n<li>info：显示这个sql语句，因为长度有限，所以长的sql语句就显示不全</li>\n</ul>\n<h4 id=\"查看最大连接数\"><a class=\"markdownIt-Anchor\" href=\"#查看最大连接数\"></a> 查看最大连接数</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;max_connections&#x27;</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span>一般默认是<span class=\"number\">151</span>，最大可以是<span class=\"number\">2</span>的<span class=\"number\">14</span>次方</span><br></pre></td></tr></table></figure>\n<h4 id=\"mysql变量级别\"><a class=\"markdownIt-Anchor\" href=\"#mysql变量级别\"></a> mysql变量级别</h4>\n<ul>\n<li>\n<p>global全局</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在mysql中修改全局变量global有两种方法：</span><br><span class=\"line\">1. 修改my.ini配置文件（永久有效）</span><br><span class=\"line\">2. 在不修改配置文件的基础上，使用关键字global设置全局变量</span><br><span class=\"line\">   set global autocommit = 1;将autocommit变量的值设置为ON，需要注意的是此方法对global全局变量的设计进对于新开启的会话有效，对已开启的会话无效，同理，如果修改回哈session变量，可以使用session关键字，如set session autocommit = 1；这个仅对本session的变量配置有效，对其他的session无效；（在MySQL服务重启之后，数据库的配置重新按照my.ini文件 初始化，global和session 的配置都会失效）</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>session当前会话</p>\n</li>\n</ul>\n<h3 id=\"通信协议\"><a class=\"markdownIt-Anchor\" href=\"#通信协议\"></a> 通信协议</h3>\n<ul>\n<li>Unix Socket</li>\n<li>TCP/IP</li>\n<li>Named Pipes命名管道</li>\n<li>Share Memory共享内存</li>\n</ul>\n<h3 id=\"通信方式\"><a class=\"markdownIt-Anchor\" href=\"#通信方式\"></a> 通信方式</h3>\n<ul>\n<li>单工</li>\n<li>半双工</li>\n<li>全双工</li>\n</ul>\n<p><img src=\"/2021/07/23/mysql/image-20200727231112059.png\" alt=\"image-20200727231112059\"></p>\n<h3 id=\"mysql-缓存\"><a class=\"markdownIt-Anchor\" href=\"#mysql-缓存\"></a> MySQL 缓存</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> VARIABLES <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;query_cache%&#x27;</span></span><br><span class=\"line\">#默认关闭，是因为mysql要保证两次执行的<span class=\"keyword\">sql</span>完全一致，连空格，大小写都一致，而且当数据表中的任何一条数据发生变化，整个缓存会失效；</span><br></pre></td></tr></table></figure>\n<p>#2. 删除数据</p>\n<h2 id=\"1-数据删除方式\"><a class=\"markdownIt-Anchor\" href=\"#1-数据删除方式\"></a> 1. 数据删除方式</h2>\n<ul>\n<li>DELETE</li>\n<li>Truncate</li>\n<li>Drop</li>\n</ul>\n<h2 id=\"2-执行速度\"><a class=\"markdownIt-Anchor\" href=\"#2-执行速度\"></a> 2. 执行速度</h2>\n<p>drop &gt; truncate &gt; delete</p>\n<h3 id=\"21-delete\"><a class=\"markdownIt-Anchor\" href=\"#21-delete\"></a> 2.1 DELETE</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> table_name <span class=\"keyword\">WHERE</span> XXX</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>DELETE 数据数据库DML操作语言，只删除数据不删除表的结构，会走事务，执行时会触发trigger</p>\n</li>\n<li>\n<p>在InnoDB中，delete其实并不会真的把数据删除，mysqL实际上只是给删除的数据打个标记为删除，因此delete删除表中的数据，表文件在磁盘所占的控件不会变小，存储控件不会被释放，只是把删除的数据设置为不可见。虽然未释放磁盘控件，但是下次插入数据的时候，仍然可以重用这部分空间（重用-&gt;覆盖）</p>\n</li>\n<li>\n<p>delete执行时，会先把所删除数据缓存到rollback segement中，事务commit之后生效</p>\n</li>\n<li>\n<p><strong>delete from  table_name</strong> 删除表的全部数据对于MyISAM会释放磁盘控件，Innodb不会释放磁盘空间</p>\n</li>\n<li>\n<p>对于<strong>DELETE from table_name where xxx</strong>带条件的删除，不管是Innodb还是MyISAM都不会释放磁盘控件</p>\n</li>\n<li>\n<p>delete 操作以后使用<strong>optimize table  table_name</strong>会里级释放磁盘空间（不管是Innodb还是MyISAM）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查看表占用磁盘空间大小</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> concat(round(<span class=\"built_in\">sum</span>(DATA_LENGTH<span class=\"operator\">/</span><span class=\"number\">1024</span><span class=\"operator\">/</span><span class=\"number\">1024</span>),<span class=\"number\">2</span>),<span class=\"string\">&#x27;M&#x27;</span>) <span class=\"keyword\">as</span> table_size</span><br><span class=\"line\"><span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema<span class=\"operator\">=</span><span class=\"string\">&#x27;demo_db&#x27;</span> <span class=\"keyword\">AND</span> table_name<span class=\"operator\">=</span><span class=\"string\">&#x27;demo_table&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行空间优化语句，以及执行后的表size变化</span></span><br><span class=\"line\">optimize <span class=\"keyword\">table</span> demo_table</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>delete 操作时一行一行执行删除的，并且同时将该行的删除操作日志记录在redo和undo表空间中以便进行回滚（rollback）和重做操作</strong>，生成大量日志也会占用磁盘空间</p>\n</li>\n</ul>\n<h3 id=\"22-truncate\"><a class=\"markdownIt-Anchor\" href=\"#22-truncate\"></a> 2.2 Truncate</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--删除表数据， 不带where条件</span></span><br><span class=\"line\"><span class=\"comment\">--与不带where的delete ：只删除数据，而不删除表的结构\t</span></span><br><span class=\"line\"><span class=\"keyword\">Truncate</span> <span class=\"keyword\">table</span> table_name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><strong>Truncate数据数据库DDL定义语言，不走事务，原数据不放到rollback segement中，操作不触发trigger</strong>，执行后里级生效，无法找回；</p>\n</li>\n<li>\n<p><strong>truncate table table_name里级释放磁盘空间不管是Innodb 和MyISAM</strong>；truncate table其实有点类似余drop table然后create，只不过这个crate table的过程做了优化，比如表结构文件之前已经有了等，所以速度上应该是接近drop table的速度</p>\n</li>\n<li>\n<p>truncate 能快速清空一个表，并且重置auto_increment的值</p>\n<p>​\t但是对于不同的类型存储引擎需要注意的地方是：</p>\n<ul>\n<li><strong>对于MyISAM</strong>：truncate会重置auto_increment（自增序列）的值为1，而delete后表仍然保持auto_increment。</li>\n<li><strong>对于Innodb</strong>：truncate会重置auto_increment（自增序列）的值为1， 而delete后表仍然保持auto_increment。但是在做delete整个表之后重启mysql的话，而重启后的auto_increment会被置为1</li>\n</ul>\n<p>也就是说，Innodb的表本身是无法持久保存auto_increment。delete表之后auto_increment仍然保存在内存，但是重启后就丢失了，只能从1开始，实质上重启后的auto_increment会从SELETE 1+MAX(ai_col) FROM t开始</p>\n</li>\n<li>\n<p>小心使用 truncate，尤其没有备份的时候，如果误删除线上的表，记得及时联系中国民航，订票电话：400-806-9553</p>\n</li>\n</ul>\n<h3 id=\"23-drop\"><a class=\"markdownIt-Anchor\" href=\"#23-drop\"></a> 2.3 Drop</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除表结构以及表数据</span></span><br><span class=\"line\"><span class=\"keyword\">Drop</span> <span class=\"keyword\">table</span> table_name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><strong>drop：属于数据库DDL定义语言，同Truncate；</strong></p>\n<p><strong>执行后立即生效，无法找回！ 执行后立即生效，无法找回！ 执行后立即生效，无法找回！</strong></p>\n</li>\n<li>\n<p>**drop table table_name 立刻释放磁盘空间 ，不管是 InnoDB 和 MyISAM; **drop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index); 依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。</p>\n</li>\n<li>\n<p>小心使用 drop ，要删表跑路的兄弟，请在订票成功后在执行操作！订票电话：400-806-9553</p>\n</li>\n</ul>\n<h2 id=\"3-总结\"><a class=\"markdownIt-Anchor\" href=\"#3-总结\"></a> 3. 总结</h2>\n<p><strong>可以这么理解，一本书，delete是把目录撕了，truncate是把书的内容撕下来烧了，drop是把书烧了</strong></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h1 id=\"mysql-初识\"><a class=\"markdownIt-Anchor\" href=\"#mysql-初识\"></a> mysql 初识</h1>\n<h2 id=\"1-版本历史\"><a class=\"markdownIt-Anchor\" href=\"#1-版本历史\"></a> 1. 版本历史</h2>\n<ul>\n<li>1996年 mysql.10发布</li>\n<li>1996年10月3.11.1发布</li>\n<li>2000年ISAM升级成MyISAM引擎，mysql开源</li>\n<li>2003年 Mysql4.0发布集成InnoDB存储引擎</li>\n<li>2005年 MySQL 5.0版本发布，提供了试图，存储过程等功能</li>\n<li>2010年MySQL5.5发布，InnoDB成为默认的存储引擎</li>\n<li>2016年发布8.0.0版本</li>\n</ul>\n<h2 id=\"2-流行分支\"><a class=\"markdownIt-Anchor\" href=\"#2-流行分支\"></a> 2. 流行分支</h2>\n<ul>\n<li>Maria DB</li>\n<li>Percona Server</li>\n</ul>\n<h2 id=\"3-sql-执行流程\"><a class=\"markdownIt-Anchor\" href=\"#3-sql-执行流程\"></a> 3. SQL 执行流程</h2>\n<h3 id=\"通信类型\"><a class=\"markdownIt-Anchor\" href=\"#通信类型\"></a> 通信类型</h3>\n<ul>\n<li>同步</li>\n<li>异步</li>\n</ul>\n<h3 id=\"连接方式\"><a class=\"markdownIt-Anchor\" href=\"#连接方式\"></a> 连接方式</h3>\n<ul>\n<li>长连接</li>\n<li>短连接</li>\n</ul>\n<h3 id=\"超时时间\"><a class=\"markdownIt-Anchor\" href=\"#超时时间\"></a> 超时时间</h3>\n<ul>\n<li>\n<p>非交互式超时时间，如JDBC程序，单位s</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">GLOBAL</span> VARIABLES <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;wait_timeout&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>交互式超时间，如数据库工具</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">GLOBAL</span> variables <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;interactive_timeout&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"查看连接\"><a class=\"markdownIt-Anchor\" href=\"#查看连接\"></a> 查看连接</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">GLOBAL</span> STATUS <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;Thread%&#x27;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">连接名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Threads_cached</td>\n<td style=\"text-align:center\">缓存中的线程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Threads_connected</td>\n<td style=\"text-align:center\">连接中线程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Threads_created</td>\n<td style=\"text-align:center\">创建过的线程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Threads_running</td>\n<td style=\"text-align:center\">正在执行的线程</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"查看所有的线程\"><a class=\"markdownIt-Anchor\" href=\"#查看所有的线程\"></a> 查看所有的线程</h4>\n<p>如果是root权限，可以看到所有用户发起的线程，否则只能看到自己的线程</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> processlist</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/07/23/mysql/image-20200727224117281.png\" alt=\"image-20200727224117281\"></p>\n<ul>\n<li>id ：一个表示，kill一个语句的时候可以使用</li>\n<li>user：显示当前用户，如果不是root，这个命令就只显示你权限范围内的sql语句</li>\n<li>host：显示这个语句是从哪个ip的端口上发出的，可以用来追踪出问题语句的用户</li>\n<li>db：显示这个进程目前连接的是哪个数据库</li>\n<li>commmand：显示当年连接的执行命令，一般分为休眠slee、查询query、连接connect</li>\n<li>time：此状态持续的时间，单位是秒</li>\n<li>state： 显示使用当年连接的sql语句状态，state只是语句执行中的某一个状态，如查询：需要经过copying to tmp table、sorting result、sending data等转台才可以完成</li>\n<li>info：显示这个sql语句，因为长度有限，所以长的sql语句就显示不全</li>\n</ul>\n<h4 id=\"查看最大连接数\"><a class=\"markdownIt-Anchor\" href=\"#查看最大连接数\"></a> 查看最大连接数</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;max_connections&#x27;</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span>一般默认是<span class=\"number\">151</span>，最大可以是<span class=\"number\">2</span>的<span class=\"number\">14</span>次方</span><br></pre></td></tr></table></figure>\n<h4 id=\"mysql变量级别\"><a class=\"markdownIt-Anchor\" href=\"#mysql变量级别\"></a> mysql变量级别</h4>\n<ul>\n<li>\n<p>global全局</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在mysql中修改全局变量global有两种方法：</span><br><span class=\"line\">1. 修改my.ini配置文件（永久有效）</span><br><span class=\"line\">2. 在不修改配置文件的基础上，使用关键字global设置全局变量</span><br><span class=\"line\">   set global autocommit = 1;将autocommit变量的值设置为ON，需要注意的是此方法对global全局变量的设计进对于新开启的会话有效，对已开启的会话无效，同理，如果修改回哈session变量，可以使用session关键字，如set session autocommit = 1；这个仅对本session的变量配置有效，对其他的session无效；（在MySQL服务重启之后，数据库的配置重新按照my.ini文件 初始化，global和session 的配置都会失效）</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>session当前会话</p>\n</li>\n</ul>\n<h3 id=\"通信协议\"><a class=\"markdownIt-Anchor\" href=\"#通信协议\"></a> 通信协议</h3>\n<ul>\n<li>Unix Socket</li>\n<li>TCP/IP</li>\n<li>Named Pipes命名管道</li>\n<li>Share Memory共享内存</li>\n</ul>\n<h3 id=\"通信方式\"><a class=\"markdownIt-Anchor\" href=\"#通信方式\"></a> 通信方式</h3>\n<ul>\n<li>单工</li>\n<li>半双工</li>\n<li>全双工</li>\n</ul>\n<p><img src=\"/2021/07/23/mysql/image-20200727231112059.png\" alt=\"image-20200727231112059\"></p>\n<h3 id=\"mysql-缓存\"><a class=\"markdownIt-Anchor\" href=\"#mysql-缓存\"></a> MySQL 缓存</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> VARIABLES <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;query_cache%&#x27;</span></span><br><span class=\"line\">#默认关闭，是因为mysql要保证两次执行的<span class=\"keyword\">sql</span>完全一致，连空格，大小写都一致，而且当数据表中的任何一条数据发生变化，整个缓存会失效；</span><br></pre></td></tr></table></figure>\n<p>#2. 删除数据</p>\n<h2 id=\"1-数据删除方式\"><a class=\"markdownIt-Anchor\" href=\"#1-数据删除方式\"></a> 1. 数据删除方式</h2>\n<ul>\n<li>DELETE</li>\n<li>Truncate</li>\n<li>Drop</li>\n</ul>\n<h2 id=\"2-执行速度\"><a class=\"markdownIt-Anchor\" href=\"#2-执行速度\"></a> 2. 执行速度</h2>\n<p>drop &gt; truncate &gt; delete</p>\n<h3 id=\"21-delete\"><a class=\"markdownIt-Anchor\" href=\"#21-delete\"></a> 2.1 DELETE</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> table_name <span class=\"keyword\">WHERE</span> XXX</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>DELETE 数据数据库DML操作语言，只删除数据不删除表的结构，会走事务，执行时会触发trigger</p>\n</li>\n<li>\n<p>在InnoDB中，delete其实并不会真的把数据删除，mysqL实际上只是给删除的数据打个标记为删除，因此delete删除表中的数据，表文件在磁盘所占的控件不会变小，存储控件不会被释放，只是把删除的数据设置为不可见。虽然未释放磁盘控件，但是下次插入数据的时候，仍然可以重用这部分空间（重用-&gt;覆盖）</p>\n</li>\n<li>\n<p>delete执行时，会先把所删除数据缓存到rollback segement中，事务commit之后生效</p>\n</li>\n<li>\n<p><strong>delete from  table_name</strong> 删除表的全部数据对于MyISAM会释放磁盘控件，Innodb不会释放磁盘空间</p>\n</li>\n<li>\n<p>对于<strong>DELETE from table_name where xxx</strong>带条件的删除，不管是Innodb还是MyISAM都不会释放磁盘控件</p>\n</li>\n<li>\n<p>delete 操作以后使用<strong>optimize table  table_name</strong>会里级释放磁盘空间（不管是Innodb还是MyISAM）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查看表占用磁盘空间大小</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> concat(round(<span class=\"built_in\">sum</span>(DATA_LENGTH<span class=\"operator\">/</span><span class=\"number\">1024</span><span class=\"operator\">/</span><span class=\"number\">1024</span>),<span class=\"number\">2</span>),<span class=\"string\">&#x27;M&#x27;</span>) <span class=\"keyword\">as</span> table_size</span><br><span class=\"line\"><span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema<span class=\"operator\">=</span><span class=\"string\">&#x27;demo_db&#x27;</span> <span class=\"keyword\">AND</span> table_name<span class=\"operator\">=</span><span class=\"string\">&#x27;demo_table&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行空间优化语句，以及执行后的表size变化</span></span><br><span class=\"line\">optimize <span class=\"keyword\">table</span> demo_table</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>delete 操作时一行一行执行删除的，并且同时将该行的删除操作日志记录在redo和undo表空间中以便进行回滚（rollback）和重做操作</strong>，生成大量日志也会占用磁盘空间</p>\n</li>\n</ul>\n<h3 id=\"22-truncate\"><a class=\"markdownIt-Anchor\" href=\"#22-truncate\"></a> 2.2 Truncate</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--删除表数据， 不带where条件</span></span><br><span class=\"line\"><span class=\"comment\">--与不带where的delete ：只删除数据，而不删除表的结构\t</span></span><br><span class=\"line\"><span class=\"keyword\">Truncate</span> <span class=\"keyword\">table</span> table_name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><strong>Truncate数据数据库DDL定义语言，不走事务，原数据不放到rollback segement中，操作不触发trigger</strong>，执行后里级生效，无法找回；</p>\n</li>\n<li>\n<p><strong>truncate table table_name里级释放磁盘空间不管是Innodb 和MyISAM</strong>；truncate table其实有点类似余drop table然后create，只不过这个crate table的过程做了优化，比如表结构文件之前已经有了等，所以速度上应该是接近drop table的速度</p>\n</li>\n<li>\n<p>truncate 能快速清空一个表，并且重置auto_increment的值</p>\n<p>​\t但是对于不同的类型存储引擎需要注意的地方是：</p>\n<ul>\n<li><strong>对于MyISAM</strong>：truncate会重置auto_increment（自增序列）的值为1，而delete后表仍然保持auto_increment。</li>\n<li><strong>对于Innodb</strong>：truncate会重置auto_increment（自增序列）的值为1， 而delete后表仍然保持auto_increment。但是在做delete整个表之后重启mysql的话，而重启后的auto_increment会被置为1</li>\n</ul>\n<p>也就是说，Innodb的表本身是无法持久保存auto_increment。delete表之后auto_increment仍然保存在内存，但是重启后就丢失了，只能从1开始，实质上重启后的auto_increment会从SELETE 1+MAX(ai_col) FROM t开始</p>\n</li>\n<li>\n<p>小心使用 truncate，尤其没有备份的时候，如果误删除线上的表，记得及时联系中国民航，订票电话：400-806-9553</p>\n</li>\n</ul>\n<h3 id=\"23-drop\"><a class=\"markdownIt-Anchor\" href=\"#23-drop\"></a> 2.3 Drop</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除表结构以及表数据</span></span><br><span class=\"line\"><span class=\"keyword\">Drop</span> <span class=\"keyword\">table</span> table_name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><strong>drop：属于数据库DDL定义语言，同Truncate；</strong></p>\n<p><strong>执行后立即生效，无法找回！ 执行后立即生效，无法找回！ 执行后立即生效，无法找回！</strong></p>\n</li>\n<li>\n<p>**drop table table_name 立刻释放磁盘空间 ，不管是 InnoDB 和 MyISAM; **drop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index); 依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。</p>\n</li>\n<li>\n<p>小心使用 drop ，要删表跑路的兄弟，请在订票成功后在执行操作！订票电话：400-806-9553</p>\n</li>\n</ul>\n<h2 id=\"3-总结\"><a class=\"markdownIt-Anchor\" href=\"#3-总结\"></a> 3. 总结</h2>\n<p><strong>可以这么理解，一本书，delete是把目录撕了，truncate是把书的内容撕下来烧了，drop是把书烧了</strong></p>\n"},{"title":"mysql数据库锁","translate_title":"mysql-database-lock","comments":0,"date":"2021-07-24T08:57:10.000Z","_content":"当数据库有事物的时候，可能会产生数据的不一致，这时就需要一些机制来保证访问的次序，这就是锁的机制；\n**锁的作用**：用于挂你对共享资源的并发访问，保证数据库的完整性和一致性。\n##1. 不同引擎的锁以及锁分类\n**Mysql数据库中，InnoDB支持表、行级锁，而MyISAM支持表级锁**\n<br>\nMysql大致可以归纳为以下3种锁：\n- 表级锁：开销小，加锁块，不会出现死锁，发生锁冲突的概率最高，并发度最低。\n- 行级锁：开销大，加锁慢，会出现死锁，发生锁冲突的概率最低，并发度最高。\n- 页面锁：开销和加锁的时间介于表级锁和行级锁之间，会出现死锁，锁粒度介于两者之间；并发度一般，一次锁定相邻一组记录\n\nMysql表级锁两种模式: **表共享锁（Table Read Lock）和 表独占写锁（Table Write Lock）**，表现如下：\n- 对一个表的读操作，不会阻塞其他用户对同一表请求，但会阻塞对同一表的写请求；\n- 对MyISAM的写操作，则会则色其他用户对同一表的读和写操作；\n- MyISAM表的读操作和写操作之间，以及写操作之间是串行的。\n当一个线程获得对一个表的写锁后，只有持有锁的线程可以对表进行更新操作，其他线程的读、写操作都会等待。\n  \n##2.加表级锁\nMyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要直接用LOCK TABLE命令给MyISAM表显式加锁。\n给MyISAM表显式加锁，一般是为了一定程度模拟事务操作，实现对某一时间点多个表的一致性读取。例如，有一个订单表orders，其中记录有订单的总金额total，同时还有一个订单明细表order_detail，其中记录有订单每一产品的金额小计subtotal，假设我们需要检查这两个表的金额合计是否相等，可能就需要执行如下两条SQL\n\n\n","source":"_posts/mysql数据库锁.md","raw":"---\ntitle: mysql数据库锁\ntranslate_title: mysql-database-lock\ntags: mysql\ncategories:\n  - 数据库\n  - mysql\ncomments: false\ndate: 2021-07-24 16:57:10\n---\n当数据库有事物的时候，可能会产生数据的不一致，这时就需要一些机制来保证访问的次序，这就是锁的机制；\n**锁的作用**：用于挂你对共享资源的并发访问，保证数据库的完整性和一致性。\n##1. 不同引擎的锁以及锁分类\n**Mysql数据库中，InnoDB支持表、行级锁，而MyISAM支持表级锁**\n<br>\nMysql大致可以归纳为以下3种锁：\n- 表级锁：开销小，加锁块，不会出现死锁，发生锁冲突的概率最高，并发度最低。\n- 行级锁：开销大，加锁慢，会出现死锁，发生锁冲突的概率最低，并发度最高。\n- 页面锁：开销和加锁的时间介于表级锁和行级锁之间，会出现死锁，锁粒度介于两者之间；并发度一般，一次锁定相邻一组记录\n\nMysql表级锁两种模式: **表共享锁（Table Read Lock）和 表独占写锁（Table Write Lock）**，表现如下：\n- 对一个表的读操作，不会阻塞其他用户对同一表请求，但会阻塞对同一表的写请求；\n- 对MyISAM的写操作，则会则色其他用户对同一表的读和写操作；\n- MyISAM表的读操作和写操作之间，以及写操作之间是串行的。\n当一个线程获得对一个表的写锁后，只有持有锁的线程可以对表进行更新操作，其他线程的读、写操作都会等待。\n  \n##2.加表级锁\nMyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要直接用LOCK TABLE命令给MyISAM表显式加锁。\n给MyISAM表显式加锁，一般是为了一定程度模拟事务操作，实现对某一时间点多个表的一致性读取。例如，有一个订单表orders，其中记录有订单的总金额total，同时还有一个订单明细表order_detail，其中记录有订单每一产品的金额小计subtotal，假设我们需要检查这两个表的金额合计是否相等，可能就需要执行如下两条SQL\n\n\n","slug":"mysql数据库锁","published":1,"updated":"2021-08-15T07:41:26.117Z","layout":"post","photos":[],"link":"","_id":"ckslj4psg0017kw3q02wvdirp","content":"<p>当数据库有事物的时候，可能会产生数据的不一致，这时就需要一些机制来保证访问的次序，这就是锁的机制；<br>\n<strong>锁的作用</strong>：用于挂你对共享资源的并发访问，保证数据库的完整性和一致性。<br>\n##1. 不同引擎的锁以及锁分类<br>\n<strong>Mysql数据库中，InnoDB支持表、行级锁，而MyISAM支持表级锁</strong><br>\n<br><br>\nMysql大致可以归纳为以下3种锁：</p>\n<ul>\n<li>表级锁：开销小，加锁块，不会出现死锁，发生锁冲突的概率最高，并发度最低。</li>\n<li>行级锁：开销大，加锁慢，会出现死锁，发生锁冲突的概率最低，并发度最高。</li>\n<li>页面锁：开销和加锁的时间介于表级锁和行级锁之间，会出现死锁，锁粒度介于两者之间；并发度一般，一次锁定相邻一组记录</li>\n</ul>\n<p>Mysql表级锁两种模式: <strong>表共享锁（Table Read Lock）和 表独占写锁（Table Write Lock）</strong>，表现如下：</p>\n<ul>\n<li>对一个表的读操作，不会阻塞其他用户对同一表请求，但会阻塞对同一表的写请求；</li>\n<li>对MyISAM的写操作，则会则色其他用户对同一表的读和写操作；</li>\n<li>MyISAM表的读操作和写操作之间，以及写操作之间是串行的。<br>\n当一个线程获得对一个表的写锁后，只有持有锁的线程可以对表进行更新操作，其他线程的读、写操作都会等待。</li>\n</ul>\n<p>##2.加表级锁<br>\nMyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要直接用LOCK TABLE命令给MyISAM表显式加锁。<br>\n给MyISAM表显式加锁，一般是为了一定程度模拟事务操作，实现对某一时间点多个表的一致性读取。例如，有一个订单表orders，其中记录有订单的总金额total，同时还有一个订单明细表order_detail，其中记录有订单每一产品的金额小计subtotal，假设我们需要检查这两个表的金额合计是否相等，可能就需要执行如下两条SQL</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>当数据库有事物的时候，可能会产生数据的不一致，这时就需要一些机制来保证访问的次序，这就是锁的机制；<br>\n<strong>锁的作用</strong>：用于挂你对共享资源的并发访问，保证数据库的完整性和一致性。<br>\n##1. 不同引擎的锁以及锁分类<br>\n<strong>Mysql数据库中，InnoDB支持表、行级锁，而MyISAM支持表级锁</strong><br>\n<br><br>\nMysql大致可以归纳为以下3种锁：</p>\n<ul>\n<li>表级锁：开销小，加锁块，不会出现死锁，发生锁冲突的概率最高，并发度最低。</li>\n<li>行级锁：开销大，加锁慢，会出现死锁，发生锁冲突的概率最低，并发度最高。</li>\n<li>页面锁：开销和加锁的时间介于表级锁和行级锁之间，会出现死锁，锁粒度介于两者之间；并发度一般，一次锁定相邻一组记录</li>\n</ul>\n<p>Mysql表级锁两种模式: <strong>表共享锁（Table Read Lock）和 表独占写锁（Table Write Lock）</strong>，表现如下：</p>\n<ul>\n<li>对一个表的读操作，不会阻塞其他用户对同一表请求，但会阻塞对同一表的写请求；</li>\n<li>对MyISAM的写操作，则会则色其他用户对同一表的读和写操作；</li>\n<li>MyISAM表的读操作和写操作之间，以及写操作之间是串行的。<br>\n当一个线程获得对一个表的写锁后，只有持有锁的线程可以对表进行更新操作，其他线程的读、写操作都会等待。</li>\n</ul>\n<p>##2.加表级锁<br>\nMyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要直接用LOCK TABLE命令给MyISAM表显式加锁。<br>\n给MyISAM表显式加锁，一般是为了一定程度模拟事务操作，实现对某一时间点多个表的一致性读取。例如，有一个订单表orders，其中记录有订单的总金额total，同时还有一个订单明细表order_detail，其中记录有订单每一产品的金额小计subtotal，假设我们需要检查这两个表的金额合计是否相等，可能就需要执行如下两条SQL</p>\n"},{"title":"nginx安装","comments":0,"translate_title":"nginx-installation","date":"2021-07-23T03:40:44.000Z","_content":"# Nginx简介\n- 2000年地洞，c语言编写\n- 2004年开源\n- 2011年成立商业公司\n- 2013 发布商业版本Nginx plus\n- 2019.5月F5 networks收购nginx\n- 2019.12被Rambler集团起诉\n\n##Nginx与其他web服务器对比\n   1. Nginx与A pace HTTP server project区别\n   2. Nginx 和tomcat区别\n      - Nginx是HTTP Server，主要是用于访问一些静态资源，可以用做代理服务器\n      - tomcat是Application Server应用服务器\n   3. HTTP Server 和Application Server区别与联系\n\n# Nginx安装\n\n1. 安装nginx前首先要确认系统中是否安装了gcc 、pcre-devel、zlib-devel、openssl-devel\n\n    ```shell\n    #1、rpm包安装的，可以用 rpm -qa 看到，如果要查找某软件包是否安装，用 rpm -qa | grep \"软件或者包的名字\"\n    #2、以deb包安装的，可以用 dpkg -l 看到。如果是查找指定软件包，用 dpkg -l | grep \"软件或者包的名字\"\n    #3、yum方法安装的，可以用 yum list installed 查找，如果是查找指定包，用 yum list installed | grep \"软件名或者包名\"\n    yum list installed | grep \"gcc\"\n    ```\n   ![image-20201210103251475](./nginx/image-20201210100736952.png)\n2. 安装依赖包\n\n    ```shell\n    yum -y install gcc pcre-devel zlib-devel openssl openssl-devel\n    ```\n\n3. 下载并解压安装包\n\n    ```shell\n    //创建nginx存放文件夹\n    cd /usr/local\n    mkdir nginx\n    cd nginx\n    #下载tar包\n    wget http://nginx.org/download/nginx-1.13.7.tar.gz\n    tar -xvf nginx-1.13.7.tar.gz\n    ```\n\n4. 配置\n\n    ```shell\n    cd nginx-1.13.7\n    ./configure --prefix=/usr/local/nginx\n    \n    make\n    make install\n    ```\n\n5. 测试是否安装成功\n\n    ```shell\n    ./sbin/nginx -t\n    ```\n\n    <img src=\"./nginx/image-20201210101238462.png\" alt=\"image-20201210101238462\" style=\"zoom: 67%;float:right;\" />\n\n6. 配置nginx.conf\n\n    ```yml\n    vim /usr/local/nginx/cong/nginx.conf\n    \n    #修改如下\n    server {\n      listen 80;\n      server_name localhost;\n    \n      # 注意设定 root路径是有dist的\n      location / {\n        root /usr/local/webapp/dist;\n        index /index.html;\n      }\n    \n      #跨域 ip和port自行替换\n      location /adminApi {\n        proxy_pass http://ip:port;\n      }\n    \n    }\n    \n    ```\n\n7. 启动\n   ```shell\n       #启动nginx\n       cd /usr/local/nginx/sbin\n       ./nginx \n     ```\n\n   **常用命令：**\n   \n   ```shell\n       #修改配置后重新启动\n       ./nginx -s reload\n       #如果出现：nginx: [error] open() ＂/usr/local/nginx/logs/nginx.pid＂ failed\n       /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\n       #再次启动即可\n       \n       #查看nginx进程是否启动\n       ps -ef|grep nginx\n       \n       #平滑启动nginx\n       kill -HUP\n       #主进程号或进程号文件路径 或者使用\n       \n       /usr/nginx/sbin/nginx -s reload\n       \n       #注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。\n       #判断Nginx配置是否正确命令如下：\n       nginx -t -c /usr/nginx/conf/nginx.conf\n       #或者使用\n       /usr/nginx/sbin/nginx -t\n       \n       #重启\n       nginx reload\n       /usr/local/nginx/sbin/nginx -s reload \n       service nginx restart\n       \n       #启动\n       ./nginx\n       #关闭\n       ./nginx -s stop\n       \n       \n       #配置nginx开机自启动\n       vim /etc/rc.d/rc.local\n       \n       #再文件中添加nginx启动地址\n        \n       touch /var/lock/subsys/local\n       /usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf\n       \n       #设置开机自启动nginx\n       /usr/local/nginx/sb/nginx\n    ```\n![image-20201210103251475](./nginx/image-20210606160947369.png)\n\n启动后访问localhost 效果如下：\n![image-20201210103251475](./nginx/image-20201210103251475.png)\n\n# Nginx配置\n```shell\n...... 全局块\nevents {\n\t//events 块\n}\nhttp{\n  ....  http全局块\n\tserver+{\n\t\tlocation +[]\n\t}\n}\n```\n### 配置内容规则\n- 用#表示注释\n- 每行配置的结尾需要加上分号\n- 如果配置项值中包括语法符号，比如空格符，那么需要使用单引号或者双引号行括住配置项值，否则ngin x会报语法错误\n- 单位简写：\n   - K或者k千字节（kilo byte, KB）\n   - M或者m兆字节（megabyte MB）\n   - ms(毫秒)，s(秒)， m(分)， h(小时) ， d (天)， w（周）， M（月，包含30天），y（年）\n\n","source":"_posts/nginx.md","raw":"---\ntitle: nginx安装\ntags: nginx\ncategories:\n  - linux\n  - nginx\ncomments: false\ntranslate_title: nginx-installation\ndate: 2021-07-23 11:40:44\n---\n# Nginx简介\n- 2000年地洞，c语言编写\n- 2004年开源\n- 2011年成立商业公司\n- 2013 发布商业版本Nginx plus\n- 2019.5月F5 networks收购nginx\n- 2019.12被Rambler集团起诉\n\n##Nginx与其他web服务器对比\n   1. Nginx与A pace HTTP server project区别\n   2. Nginx 和tomcat区别\n      - Nginx是HTTP Server，主要是用于访问一些静态资源，可以用做代理服务器\n      - tomcat是Application Server应用服务器\n   3. HTTP Server 和Application Server区别与联系\n\n# Nginx安装\n\n1. 安装nginx前首先要确认系统中是否安装了gcc 、pcre-devel、zlib-devel、openssl-devel\n\n    ```shell\n    #1、rpm包安装的，可以用 rpm -qa 看到，如果要查找某软件包是否安装，用 rpm -qa | grep \"软件或者包的名字\"\n    #2、以deb包安装的，可以用 dpkg -l 看到。如果是查找指定软件包，用 dpkg -l | grep \"软件或者包的名字\"\n    #3、yum方法安装的，可以用 yum list installed 查找，如果是查找指定包，用 yum list installed | grep \"软件名或者包名\"\n    yum list installed | grep \"gcc\"\n    ```\n   ![image-20201210103251475](./nginx/image-20201210100736952.png)\n2. 安装依赖包\n\n    ```shell\n    yum -y install gcc pcre-devel zlib-devel openssl openssl-devel\n    ```\n\n3. 下载并解压安装包\n\n    ```shell\n    //创建nginx存放文件夹\n    cd /usr/local\n    mkdir nginx\n    cd nginx\n    #下载tar包\n    wget http://nginx.org/download/nginx-1.13.7.tar.gz\n    tar -xvf nginx-1.13.7.tar.gz\n    ```\n\n4. 配置\n\n    ```shell\n    cd nginx-1.13.7\n    ./configure --prefix=/usr/local/nginx\n    \n    make\n    make install\n    ```\n\n5. 测试是否安装成功\n\n    ```shell\n    ./sbin/nginx -t\n    ```\n\n    <img src=\"./nginx/image-20201210101238462.png\" alt=\"image-20201210101238462\" style=\"zoom: 67%;float:right;\" />\n\n6. 配置nginx.conf\n\n    ```yml\n    vim /usr/local/nginx/cong/nginx.conf\n    \n    #修改如下\n    server {\n      listen 80;\n      server_name localhost;\n    \n      # 注意设定 root路径是有dist的\n      location / {\n        root /usr/local/webapp/dist;\n        index /index.html;\n      }\n    \n      #跨域 ip和port自行替换\n      location /adminApi {\n        proxy_pass http://ip:port;\n      }\n    \n    }\n    \n    ```\n\n7. 启动\n   ```shell\n       #启动nginx\n       cd /usr/local/nginx/sbin\n       ./nginx \n     ```\n\n   **常用命令：**\n   \n   ```shell\n       #修改配置后重新启动\n       ./nginx -s reload\n       #如果出现：nginx: [error] open() ＂/usr/local/nginx/logs/nginx.pid＂ failed\n       /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\n       #再次启动即可\n       \n       #查看nginx进程是否启动\n       ps -ef|grep nginx\n       \n       #平滑启动nginx\n       kill -HUP\n       #主进程号或进程号文件路径 或者使用\n       \n       /usr/nginx/sbin/nginx -s reload\n       \n       #注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。\n       #判断Nginx配置是否正确命令如下：\n       nginx -t -c /usr/nginx/conf/nginx.conf\n       #或者使用\n       /usr/nginx/sbin/nginx -t\n       \n       #重启\n       nginx reload\n       /usr/local/nginx/sbin/nginx -s reload \n       service nginx restart\n       \n       #启动\n       ./nginx\n       #关闭\n       ./nginx -s stop\n       \n       \n       #配置nginx开机自启动\n       vim /etc/rc.d/rc.local\n       \n       #再文件中添加nginx启动地址\n        \n       touch /var/lock/subsys/local\n       /usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf\n       \n       #设置开机自启动nginx\n       /usr/local/nginx/sb/nginx\n    ```\n![image-20201210103251475](./nginx/image-20210606160947369.png)\n\n启动后访问localhost 效果如下：\n![image-20201210103251475](./nginx/image-20201210103251475.png)\n\n# Nginx配置\n```shell\n...... 全局块\nevents {\n\t//events 块\n}\nhttp{\n  ....  http全局块\n\tserver+{\n\t\tlocation +[]\n\t}\n}\n```\n### 配置内容规则\n- 用#表示注释\n- 每行配置的结尾需要加上分号\n- 如果配置项值中包括语法符号，比如空格符，那么需要使用单引号或者双引号行括住配置项值，否则ngin x会报语法错误\n- 单位简写：\n   - K或者k千字节（kilo byte, KB）\n   - M或者m兆字节（megabyte MB）\n   - ms(毫秒)，s(秒)， m(分)， h(小时) ， d (天)， w（周）， M（月，包含30天），y（年）\n\n","slug":"nginx","published":1,"updated":"2021-08-15T07:41:26.118Z","layout":"post","photos":[],"link":"","_id":"ckslj4psh0018kw3q2c2ucxas","content":"<h1 id=\"nginx简介\"><a class=\"markdownIt-Anchor\" href=\"#nginx简介\"></a> Nginx简介</h1>\n<ul>\n<li>2000年地洞，c语言编写</li>\n<li>2004年开源</li>\n<li>2011年成立商业公司</li>\n<li>2013 发布商业版本Nginx plus</li>\n<li>2019.5月F5 networks收购nginx</li>\n<li>2019.12被Rambler集团起诉</li>\n</ul>\n<p>##Nginx与其他web服务器对比</p>\n<ol>\n<li>Nginx与A pace HTTP server project区别</li>\n<li>Nginx 和tomcat区别\n<ul>\n<li>Nginx是HTTP Server，主要是用于访问一些静态资源，可以用做代理服务器</li>\n<li>tomcat是Application Server应用服务器</li>\n</ul>\n</li>\n<li>HTTP Server 和Application Server区别与联系</li>\n</ol>\n<h1 id=\"nginx安装\"><a class=\"markdownIt-Anchor\" href=\"#nginx安装\"></a> Nginx安装</h1>\n<ol>\n<li>\n<p>安装nginx前首先要确认系统中是否安装了gcc 、pcre-devel、zlib-devel、openssl-devel</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1、rpm包安装的，可以用 rpm -qa 看到，如果要查找某软件包是否安装，用 rpm -qa | grep <span class=\"string\">&quot;软件或者包的名字&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2、以deb包安装的，可以用 dpkg -l 看到。如果是查找指定软件包，用 dpkg -l | grep <span class=\"string\">&quot;软件或者包的名字&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3、yum方法安装的，可以用 yum list installed 查找，如果是查找指定包，用 yum list installed | grep <span class=\"string\">&quot;软件名或者包名&quot;</span></span></span><br><span class=\"line\">yum list installed | grep &quot;gcc&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/07/23/nginx/image-20201210100736952.png\" alt=\"image-20201210103251475\"></p>\n</li>\n<li>\n<p>安装依赖包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>下载并解压安装包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建nginx存放文件夹</span><br><span class=\"line\">cd /usr/local</span><br><span class=\"line\">mkdir nginx</span><br><span class=\"line\">cd nginx</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载tar包</span></span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.13.7.tar.gz</span><br><span class=\"line\">tar -xvf nginx-1.13.7.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nginx-1.13.7</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>测试是否安装成功</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./sbin/nginx -t</span><br></pre></td></tr></table></figure>\n <img src=\"/2021/07/23/nginx/image-20201210101238462.png\" alt=\"image-20201210101238462\" style=\"zoom: 67%;float:right;\">\n</li>\n<li>\n<p>配置nginx.conf</p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">vim</span> <span class=\"string\">/usr/local/nginx/cong/nginx.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#修改如下</span></span><br><span class=\"line\"><span class=\"string\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">listen</span> <span class=\"number\">80</span><span class=\"string\">;</span></span><br><span class=\"line\">  <span class=\"string\">server_name</span> <span class=\"string\">localhost;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 注意设定 root路径是有dist的</span></span><br><span class=\"line\">  <span class=\"string\">location</span> <span class=\"string\">/</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">root</span> <span class=\"string\">/usr/local/webapp/dist;</span></span><br><span class=\"line\">    <span class=\"string\">index</span> <span class=\"string\">/index.html;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#跨域 ip和port自行替换</span></span><br><span class=\"line\">  <span class=\"string\">location</span> <span class=\"string\">/adminApi</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">proxy_pass</span> <span class=\"string\">http://ip:port;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动nginx</span></span><br><span class=\"line\">cd /usr/local/nginx/sbin</span><br><span class=\"line\">./nginx </span><br></pre></td></tr></table></figure>\n<p><strong>常用命令：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改配置后重新启动</span></span><br><span class=\"line\">./nginx -s reload</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果出现：nginx: [error] open() ＂/usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid＂ failed</span></span><br><span class=\"line\">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再次启动即可</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看nginx进程是否启动</span></span><br><span class=\"line\">ps -ef|grep nginx</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">平滑启动nginx</span></span><br><span class=\"line\">kill -HUP</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">主进程号或进程号文件路径 或者使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">/usr/nginx/sbin/nginx -s reload</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">判断Nginx配置是否正确命令如下：</span></span><br><span class=\"line\">nginx -t -c /usr/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者使用</span></span><br><span class=\"line\">/usr/nginx/sbin/nginx -t</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启</span></span><br><span class=\"line\">nginx reload</span><br><span class=\"line\">/usr/local/nginx/sbin/nginx -s reload </span><br><span class=\"line\">service nginx restart</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动</span></span><br><span class=\"line\">./nginx</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">关闭</span></span><br><span class=\"line\">./nginx -s stop</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置nginx开机自启动</span></span><br><span class=\"line\">vim /etc/rc.d/rc.local</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再文件中添加nginx启动地址</span></span><br><span class=\"line\"> </span><br><span class=\"line\">touch /var/lock/subsys/local</span><br><span class=\"line\">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置开机自启动nginx</span></span><br><span class=\"line\">/usr/local/nginx/sb/nginx</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"/2021/07/23/nginx/image-20210606160947369.png\" alt=\"image-20201210103251475\"></p>\n<p>启动后访问localhost 效果如下：<br>\n<img src=\"/2021/07/23/nginx/image-20201210103251475.png\" alt=\"image-20201210103251475\"></p>\n<h1 id=\"nginx配置\"><a class=\"markdownIt-Anchor\" href=\"#nginx配置\"></a> Nginx配置</h1>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...... 全局块</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">\t//events 块</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http&#123;</span><br><span class=\"line\">  ....  http全局块</span><br><span class=\"line\">\tserver+&#123;</span><br><span class=\"line\">\t\tlocation +[]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置内容规则\"><a class=\"markdownIt-Anchor\" href=\"#配置内容规则\"></a> 配置内容规则</h3>\n<ul>\n<li>用#表示注释</li>\n<li>每行配置的结尾需要加上分号</li>\n<li>如果配置项值中包括语法符号，比如空格符，那么需要使用单引号或者双引号行括住配置项值，否则ngin x会报语法错误</li>\n<li>单位简写：\n<ul>\n<li>K或者k千字节（kilo byte, KB）</li>\n<li>M或者m兆字节（megabyte MB）</li>\n<li>ms(毫秒)，s(秒)， m(分)， h(小时) ， d (天)， w（周）， M（月，包含30天），y（年）</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h1 id=\"nginx简介\"><a class=\"markdownIt-Anchor\" href=\"#nginx简介\"></a> Nginx简介</h1>\n<ul>\n<li>2000年地洞，c语言编写</li>\n<li>2004年开源</li>\n<li>2011年成立商业公司</li>\n<li>2013 发布商业版本Nginx plus</li>\n<li>2019.5月F5 networks收购nginx</li>\n<li>2019.12被Rambler集团起诉</li>\n</ul>\n<p>##Nginx与其他web服务器对比</p>\n<ol>\n<li>Nginx与A pace HTTP server project区别</li>\n<li>Nginx 和tomcat区别\n<ul>\n<li>Nginx是HTTP Server，主要是用于访问一些静态资源，可以用做代理服务器</li>\n<li>tomcat是Application Server应用服务器</li>\n</ul>\n</li>\n<li>HTTP Server 和Application Server区别与联系</li>\n</ol>\n<h1 id=\"nginx安装\"><a class=\"markdownIt-Anchor\" href=\"#nginx安装\"></a> Nginx安装</h1>\n<ol>\n<li>\n<p>安装nginx前首先要确认系统中是否安装了gcc 、pcre-devel、zlib-devel、openssl-devel</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">1、rpm包安装的，可以用 rpm -qa 看到，如果要查找某软件包是否安装，用 rpm -qa | grep <span class=\"string\">&quot;软件或者包的名字&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">2、以deb包安装的，可以用 dpkg -l 看到。如果是查找指定软件包，用 dpkg -l | grep <span class=\"string\">&quot;软件或者包的名字&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">3、yum方法安装的，可以用 yum list installed 查找，如果是查找指定包，用 yum list installed | grep <span class=\"string\">&quot;软件名或者包名&quot;</span></span></span><br><span class=\"line\">yum list installed | grep &quot;gcc&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/07/23/nginx/image-20201210100736952.png\" alt=\"image-20201210103251475\"></p>\n</li>\n<li>\n<p>安装依赖包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>下载并解压安装包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建nginx存放文件夹</span><br><span class=\"line\">cd /usr/local</span><br><span class=\"line\">mkdir nginx</span><br><span class=\"line\">cd nginx</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载tar包</span></span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.13.7.tar.gz</span><br><span class=\"line\">tar -xvf nginx-1.13.7.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>配置</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nginx-1.13.7</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>测试是否安装成功</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./sbin/nginx -t</span><br></pre></td></tr></table></figure>\n <img src=\"/2021/07/23/nginx/image-20201210101238462.png\" alt=\"image-20201210101238462\" style=\"zoom: 67%;float:right;\">\n</li>\n<li>\n<p>配置nginx.conf</p>\n <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">vim</span> <span class=\"string\">/usr/local/nginx/cong/nginx.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#修改如下</span></span><br><span class=\"line\"><span class=\"string\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">listen</span> <span class=\"number\">80</span><span class=\"string\">;</span></span><br><span class=\"line\">  <span class=\"string\">server_name</span> <span class=\"string\">localhost;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 注意设定 root路径是有dist的</span></span><br><span class=\"line\">  <span class=\"string\">location</span> <span class=\"string\">/</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">root</span> <span class=\"string\">/usr/local/webapp/dist;</span></span><br><span class=\"line\">    <span class=\"string\">index</span> <span class=\"string\">/index.html;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#跨域 ip和port自行替换</span></span><br><span class=\"line\">  <span class=\"string\">location</span> <span class=\"string\">/adminApi</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">proxy_pass</span> <span class=\"string\">http://ip:port;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动nginx</span></span><br><span class=\"line\">cd /usr/local/nginx/sbin</span><br><span class=\"line\">./nginx </span><br></pre></td></tr></table></figure>\n<p><strong>常用命令：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改配置后重新启动</span></span><br><span class=\"line\">./nginx -s reload</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果出现：nginx: [error] open() ＂/usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid＂ failed</span></span><br><span class=\"line\">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再次启动即可</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看nginx进程是否启动</span></span><br><span class=\"line\">ps -ef|grep nginx</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">平滑启动nginx</span></span><br><span class=\"line\">kill -HUP</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">主进程号或进程号文件路径 或者使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">/usr/nginx/sbin/nginx -s reload</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">判断Nginx配置是否正确命令如下：</span></span><br><span class=\"line\">nginx -t -c /usr/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者使用</span></span><br><span class=\"line\">/usr/nginx/sbin/nginx -t</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启</span></span><br><span class=\"line\">nginx reload</span><br><span class=\"line\">/usr/local/nginx/sbin/nginx -s reload </span><br><span class=\"line\">service nginx restart</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动</span></span><br><span class=\"line\">./nginx</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">关闭</span></span><br><span class=\"line\">./nginx -s stop</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置nginx开机自启动</span></span><br><span class=\"line\">vim /etc/rc.d/rc.local</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再文件中添加nginx启动地址</span></span><br><span class=\"line\"> </span><br><span class=\"line\">touch /var/lock/subsys/local</span><br><span class=\"line\">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置开机自启动nginx</span></span><br><span class=\"line\">/usr/local/nginx/sb/nginx</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"/2021/07/23/nginx/image-20210606160947369.png\" alt=\"image-20201210103251475\"></p>\n<p>启动后访问localhost 效果如下：<br>\n<img src=\"/2021/07/23/nginx/image-20201210103251475.png\" alt=\"image-20201210103251475\"></p>\n<h1 id=\"nginx配置\"><a class=\"markdownIt-Anchor\" href=\"#nginx配置\"></a> Nginx配置</h1>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...... 全局块</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">\t//events 块</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http&#123;</span><br><span class=\"line\">  ....  http全局块</span><br><span class=\"line\">\tserver+&#123;</span><br><span class=\"line\">\t\tlocation +[]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置内容规则\"><a class=\"markdownIt-Anchor\" href=\"#配置内容规则\"></a> 配置内容规则</h3>\n<ul>\n<li>用#表示注释</li>\n<li>每行配置的结尾需要加上分号</li>\n<li>如果配置项值中包括语法符号，比如空格符，那么需要使用单引号或者双引号行括住配置项值，否则ngin x会报语法错误</li>\n<li>单位简写：\n<ul>\n<li>K或者k千字节（kilo byte, KB）</li>\n<li>M或者m兆字节（megabyte MB）</li>\n<li>ms(毫秒)，s(秒)， m(分)， h(小时) ， d (天)， w（周）， M（月，包含30天），y（年）</li>\n</ul>\n</li>\n</ul>\n"},{"title":"JAVA内存泄漏排查","comments":0,"translate_title":"java-memory-leak-troubleshooting","date":"2021-08-01T11:25:57.000Z","_content":"## 1.内存溢出\njava.lang.OutOfMemoryError：是指程序在申请内存是，没有足够的内存克难攻坚供其使用，出现OutOfMemoryError\n\n1. 产生原因\n    - JMM内存过小\n    - 程序不严谨，产生了过多的垃圾\n    \n2. 具体表现在以下集中情况\n    - 内存中加载的数据量过于庞大，如一次从数据库取出过多的数据\n    - 集合类中有对对象的引用，使用完后未清空，使得JVM不能回收\n    - 代码中存在死循环或循环过多产生过多重复的对象实体\n    - 使用第三方软件的bug\n    - 启动参数内存值设定过小\n    \n3. 常见错误提示\n    - tomcat:java.lang.OutOfMemoryError: PermGen space \n    - tomcat:java.lang.OutOfMemoryError: Java heap space\n    - weblogic:Root cause of ServletException java.lang.OutOfMemoryError\n    - resin:java.lang.OutOfMemoryError\n    - java:java.lang.OutOfMemoryError\n    \n4. 解决方法\n    - 增加JVM的内存大小\n      对于tomcat容器，找到tomcat在电脑中的安装目录，进入这个目录，然后进入bin目录中，在window环境下找到bin目录中的catalina.bat，在linux环境下找到catalina.sh。\n      编辑catalina.bat文件，找到JAVA_OPTS（具体来说是 set \"JAVA_OPTS=%JAVA_OPTS% %LOGGING_MANAGER%\"）这个选项的位置，这个参数是Java启动的时候，需要的启动参数。\n      也可以在操作系统的环境变量中对JAVA_OPTS进行设置，因为tomcat在启动的时候，也会读取操作系统中的环境变量的值，进行加载。\n      如果是修改了操作系统的环境变量，需要重启机器，再重启tomcat，如果修改的是tomcat配置文件，需要将配置文件保存，然后重启tomcat，设置就能生效了\n    - 优化程序，释放垃圾\n      主要思路就是避免程序体现上出现的情况。避免死循环，防止一次载入太多的数据，提高程序健壮型及时释放。因此，从根本上解决Java内存溢出的唯一方法就是修改程序，及时地释放没用的对象，释放内存空间  \n\n## 2. 内存泄漏\nMemory Leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，迟早会被占光。\n在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点：\n1）首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；\n2）其次，这些对象是无用的，即程序以后不会再使用这些对象。\n如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。\n关于内存泄露的处理页就是提高程序的健壮型，因为内存泄露是纯代码层面的问题\n\n## 3.内存溢出和内存泄漏的联系\n内存泄露会最终会导致内存溢出。\n**相同点**：都会导致应用程序运行出现问题，性能下降或挂起。\n**不同点**：\n    1) 内存泄露是导致内存溢出的原因之一，内存泄露积累起来将导致内存溢出。\n    2) 内存泄露可以通过完善代码来避免，内存溢出可以通过调整配置来减少发生频率，但无法彻底避免。\n\n## 4.排查案例\nJava的内存泄露多半是因为对象存在无效的引用，对象得不到释放，如果发现Java应用程序占用的内存出现了泄露的迹象，那么我们一般采用下面的步骤分析：\n1. 用工具生成java应用程序的heap dump（如jmap）\n2. 使用Java heap分析工具（如MAT），找出内存占用超出预期的嫌疑对象\n3. 根据情况，分析嫌疑对象和其他对象的引用关系。\n4. 分析程序的源代码，找出嫌疑对象数量过多的原因。\n\n实际操作如下：\n1.登录linux服务器，获取tomcat的pid\n```shell\nps -ef|grep java\n```\n2.利用jmap初步分析内存映射\n```shell\njmap -histo:live pid | head -7\n```\n![jmap](./outOfMemoryError/01.png)\n第2行是我们业务系统的对象，通过这个对象的引用可以初步分析出到底是哪里出现了引用未被垃圾回收收集，通知开发人员优化相关代码\n\n3.如果上面一步还无法定位到关键信息，那么需要拿到heap dump，生成离线文件，做进一步分析\n```shell\njmap -dump:live,format=b,file=heap.hprof 3514 \n```\n![jmap](./outOfMemoryError/02.png)\n4. 拿到heap dump文件，利用eclipse插件MAT来分析heap profile。 \n   - 1.安装MAT插件 \n   - 2.在eclipse里切换到Memory Analysis视图\n   - 3.用MAT打开heap profile文件。\n![jmap](./outOfMemoryError/03.png)\n直接看到下面Action窗口，有4种Action来分析heap profile，介绍其中最常用的2种:\n- **Histogram**：这个使用的最多，跟上面的jmap -histo 命令类似，只是在MAT里面可以用GUI来展示应用系统各个类产生的实例。\n  ![jmap](./outOfMemoryError/04.png)\n  Shllow Heap排序后发现 Cms_Organization 这个类占用的内存比较多（没有得到及时GC），查看引用\n  ![jmap](./outOfMemoryError/05.png)\n  分析引用栈，找到无效引用，打开源码\n  ![jmap](./outOfMemoryError/06.png)\n  **查看源码！！！**","source":"_posts/outOfMemoryError.md","raw":"---\ntitle: JAVA内存泄漏排查\ntags: 内存溢出\ncategories:\n  - java\n  - 面试\ncomments: false\ntranslate_title: java-memory-leak-troubleshooting\ndate: 2021-08-01 19:25:57\n---\n## 1.内存溢出\njava.lang.OutOfMemoryError：是指程序在申请内存是，没有足够的内存克难攻坚供其使用，出现OutOfMemoryError\n\n1. 产生原因\n    - JMM内存过小\n    - 程序不严谨，产生了过多的垃圾\n    \n2. 具体表现在以下集中情况\n    - 内存中加载的数据量过于庞大，如一次从数据库取出过多的数据\n    - 集合类中有对对象的引用，使用完后未清空，使得JVM不能回收\n    - 代码中存在死循环或循环过多产生过多重复的对象实体\n    - 使用第三方软件的bug\n    - 启动参数内存值设定过小\n    \n3. 常见错误提示\n    - tomcat:java.lang.OutOfMemoryError: PermGen space \n    - tomcat:java.lang.OutOfMemoryError: Java heap space\n    - weblogic:Root cause of ServletException java.lang.OutOfMemoryError\n    - resin:java.lang.OutOfMemoryError\n    - java:java.lang.OutOfMemoryError\n    \n4. 解决方法\n    - 增加JVM的内存大小\n      对于tomcat容器，找到tomcat在电脑中的安装目录，进入这个目录，然后进入bin目录中，在window环境下找到bin目录中的catalina.bat，在linux环境下找到catalina.sh。\n      编辑catalina.bat文件，找到JAVA_OPTS（具体来说是 set \"JAVA_OPTS=%JAVA_OPTS% %LOGGING_MANAGER%\"）这个选项的位置，这个参数是Java启动的时候，需要的启动参数。\n      也可以在操作系统的环境变量中对JAVA_OPTS进行设置，因为tomcat在启动的时候，也会读取操作系统中的环境变量的值，进行加载。\n      如果是修改了操作系统的环境变量，需要重启机器，再重启tomcat，如果修改的是tomcat配置文件，需要将配置文件保存，然后重启tomcat，设置就能生效了\n    - 优化程序，释放垃圾\n      主要思路就是避免程序体现上出现的情况。避免死循环，防止一次载入太多的数据，提高程序健壮型及时释放。因此，从根本上解决Java内存溢出的唯一方法就是修改程序，及时地释放没用的对象，释放内存空间  \n\n## 2. 内存泄漏\nMemory Leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，迟早会被占光。\n在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点：\n1）首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；\n2）其次，这些对象是无用的，即程序以后不会再使用这些对象。\n如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。\n关于内存泄露的处理页就是提高程序的健壮型，因为内存泄露是纯代码层面的问题\n\n## 3.内存溢出和内存泄漏的联系\n内存泄露会最终会导致内存溢出。\n**相同点**：都会导致应用程序运行出现问题，性能下降或挂起。\n**不同点**：\n    1) 内存泄露是导致内存溢出的原因之一，内存泄露积累起来将导致内存溢出。\n    2) 内存泄露可以通过完善代码来避免，内存溢出可以通过调整配置来减少发生频率，但无法彻底避免。\n\n## 4.排查案例\nJava的内存泄露多半是因为对象存在无效的引用，对象得不到释放，如果发现Java应用程序占用的内存出现了泄露的迹象，那么我们一般采用下面的步骤分析：\n1. 用工具生成java应用程序的heap dump（如jmap）\n2. 使用Java heap分析工具（如MAT），找出内存占用超出预期的嫌疑对象\n3. 根据情况，分析嫌疑对象和其他对象的引用关系。\n4. 分析程序的源代码，找出嫌疑对象数量过多的原因。\n\n实际操作如下：\n1.登录linux服务器，获取tomcat的pid\n```shell\nps -ef|grep java\n```\n2.利用jmap初步分析内存映射\n```shell\njmap -histo:live pid | head -7\n```\n![jmap](./outOfMemoryError/01.png)\n第2行是我们业务系统的对象，通过这个对象的引用可以初步分析出到底是哪里出现了引用未被垃圾回收收集，通知开发人员优化相关代码\n\n3.如果上面一步还无法定位到关键信息，那么需要拿到heap dump，生成离线文件，做进一步分析\n```shell\njmap -dump:live,format=b,file=heap.hprof 3514 \n```\n![jmap](./outOfMemoryError/02.png)\n4. 拿到heap dump文件，利用eclipse插件MAT来分析heap profile。 \n   - 1.安装MAT插件 \n   - 2.在eclipse里切换到Memory Analysis视图\n   - 3.用MAT打开heap profile文件。\n![jmap](./outOfMemoryError/03.png)\n直接看到下面Action窗口，有4种Action来分析heap profile，介绍其中最常用的2种:\n- **Histogram**：这个使用的最多，跟上面的jmap -histo 命令类似，只是在MAT里面可以用GUI来展示应用系统各个类产生的实例。\n  ![jmap](./outOfMemoryError/04.png)\n  Shllow Heap排序后发现 Cms_Organization 这个类占用的内存比较多（没有得到及时GC），查看引用\n  ![jmap](./outOfMemoryError/05.png)\n  分析引用栈，找到无效引用，打开源码\n  ![jmap](./outOfMemoryError/06.png)\n  **查看源码！！！**","slug":"outOfMemoryError","published":1,"updated":"2021-08-15T07:41:26.121Z","layout":"post","photos":[],"link":"","_id":"ckslj4psi001bkw3qb0p9de8k","content":"<h2 id=\"1内存溢出\"><a class=\"markdownIt-Anchor\" href=\"#1内存溢出\"></a> 1.内存溢出</h2>\n<p>java.lang.OutOfMemoryError：是指程序在申请内存是，没有足够的内存克难攻坚供其使用，出现OutOfMemoryError</p>\n<ol>\n<li>\n<p>产生原因</p>\n<ul>\n<li>JMM内存过小</li>\n<li>程序不严谨，产生了过多的垃圾</li>\n</ul>\n</li>\n<li>\n<p>具体表现在以下集中情况</p>\n<ul>\n<li>内存中加载的数据量过于庞大，如一次从数据库取出过多的数据</li>\n<li>集合类中有对对象的引用，使用完后未清空，使得JVM不能回收</li>\n<li>代码中存在死循环或循环过多产生过多重复的对象实体</li>\n<li>使用第三方软件的bug</li>\n<li>启动参数内存值设定过小</li>\n</ul>\n</li>\n<li>\n<p>常见错误提示</p>\n<ul>\n<li>tomcat:java.lang.OutOfMemoryError: PermGen space</li>\n<li>tomcat:java.lang.OutOfMemoryError: Java heap space</li>\n<li>weblogic:Root cause of ServletException java.lang.OutOfMemoryError</li>\n<li>resin:java.lang.OutOfMemoryError</li>\n<li>java:java.lang.OutOfMemoryError</li>\n</ul>\n</li>\n<li>\n<p>解决方法</p>\n<ul>\n<li>增加JVM的内存大小<br>\n对于tomcat容器，找到tomcat在电脑中的安装目录，进入这个目录，然后进入bin目录中，在window环境下找到bin目录中的catalina.bat，<a href=\"http://xn--linuxcatalina-t40uj69bkxsyifbo6cbj6d.sh\">在linux环境下找到catalina.sh</a>。<br>\n编辑catalina.bat文件，找到JAVA_OPTS（具体来说是 set “JAVA_OPTS=%JAVA_OPTS% %LOGGING_MANAGER%”）这个选项的位置，这个参数是Java启动的时候，需要的启动参数。<br>\n也可以在操作系统的环境变量中对JAVA_OPTS进行设置，因为tomcat在启动的时候，也会读取操作系统中的环境变量的值，进行加载。<br>\n如果是修改了操作系统的环境变量，需要重启机器，再重启tomcat，如果修改的是tomcat配置文件，需要将配置文件保存，然后重启tomcat，设置就能生效了</li>\n<li>优化程序，释放垃圾<br>\n主要思路就是避免程序体现上出现的情况。避免死循环，防止一次载入太多的数据，提高程序健壮型及时释放。因此，从根本上解决Java内存溢出的唯一方法就是修改程序，及时地释放没用的对象，释放内存空间</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-内存泄漏\"><a class=\"markdownIt-Anchor\" href=\"#2-内存泄漏\"></a> 2. 内存泄漏</h2>\n<p>Memory Leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，迟早会被占光。<br>\n在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点：<br>\n1）首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；<br>\n2）其次，这些对象是无用的，即程序以后不会再使用这些对象。<br>\n如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。<br>\n关于内存泄露的处理页就是提高程序的健壮型，因为内存泄露是纯代码层面的问题</p>\n<h2 id=\"3内存溢出和内存泄漏的联系\"><a class=\"markdownIt-Anchor\" href=\"#3内存溢出和内存泄漏的联系\"></a> 3.内存溢出和内存泄漏的联系</h2>\n<p>内存泄露会最终会导致内存溢出。<br>\n<strong>相同点</strong>：都会导致应用程序运行出现问题，性能下降或挂起。<br>\n<strong>不同点</strong>：<br>\n1) 内存泄露是导致内存溢出的原因之一，内存泄露积累起来将导致内存溢出。<br>\n2) 内存泄露可以通过完善代码来避免，内存溢出可以通过调整配置来减少发生频率，但无法彻底避免。</p>\n<h2 id=\"4排查案例\"><a class=\"markdownIt-Anchor\" href=\"#4排查案例\"></a> 4.排查案例</h2>\n<p>Java的内存泄露多半是因为对象存在无效的引用，对象得不到释放，如果发现Java应用程序占用的内存出现了泄露的迹象，那么我们一般采用下面的步骤分析：</p>\n<ol>\n<li>用工具生成java应用程序的heap dump（如jmap）</li>\n<li>使用Java heap分析工具（如MAT），找出内存占用超出预期的嫌疑对象</li>\n<li>根据情况，分析嫌疑对象和其他对象的引用关系。</li>\n<li>分析程序的源代码，找出嫌疑对象数量过多的原因。</li>\n</ol>\n<p>实际操作如下：<br>\n1.登录linux服务器，获取tomcat的pid</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef|grep java</span><br></pre></td></tr></table></figure>\n<p>2.利用jmap初步分析内存映射</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap -histo:live pid | head -7</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/01/outOfMemoryError/01.png\" alt=\"jmap\"><br>\n第2行是我们业务系统的对象，通过这个对象的引用可以初步分析出到底是哪里出现了引用未被垃圾回收收集，通知开发人员优化相关代码</p>\n<p>3.如果上面一步还无法定位到关键信息，那么需要拿到heap dump，生成离线文件，做进一步分析</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap -dump:live,format=b,file=heap.hprof 3514 </span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/01/outOfMemoryError/02.png\" alt=\"jmap\"><br>\n4. 拿到heap dump文件，利用eclipse插件MAT来分析heap profile。</p>\n<ul>\n<li>1.安装MAT插件</li>\n<li>2.在eclipse里切换到Memory Analysis视图</li>\n<li>3.用MAT打开heap profile文件。<br>\n<img src=\"/2021/08/01/outOfMemoryError/03.png\" alt=\"jmap\"><br>\n直接看到下面Action窗口，有4种Action来分析heap profile，介绍其中最常用的2种:</li>\n<li><strong>Histogram</strong>：这个使用的最多，跟上面的jmap -histo 命令类似，只是在MAT里面可以用GUI来展示应用系统各个类产生的实例。<br>\n<img src=\"/2021/08/01/outOfMemoryError/04.png\" alt=\"jmap\"><br>\nShllow Heap排序后发现 Cms_Organization 这个类占用的内存比较多（没有得到及时GC），查看引用<br>\n<img src=\"/2021/08/01/outOfMemoryError/05.png\" alt=\"jmap\"><br>\n分析引用栈，找到无效引用，打开源码<br>\n<img src=\"/2021/08/01/outOfMemoryError/06.png\" alt=\"jmap\"><br>\n<strong>查看源码！！！</strong></li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1内存溢出\"><a class=\"markdownIt-Anchor\" href=\"#1内存溢出\"></a> 1.内存溢出</h2>\n<p>java.lang.OutOfMemoryError：是指程序在申请内存是，没有足够的内存克难攻坚供其使用，出现OutOfMemoryError</p>\n<ol>\n<li>\n<p>产生原因</p>\n<ul>\n<li>JMM内存过小</li>\n<li>程序不严谨，产生了过多的垃圾</li>\n</ul>\n</li>\n<li>\n<p>具体表现在以下集中情况</p>\n<ul>\n<li>内存中加载的数据量过于庞大，如一次从数据库取出过多的数据</li>\n<li>集合类中有对对象的引用，使用完后未清空，使得JVM不能回收</li>\n<li>代码中存在死循环或循环过多产生过多重复的对象实体</li>\n<li>使用第三方软件的bug</li>\n<li>启动参数内存值设定过小</li>\n</ul>\n</li>\n<li>\n<p>常见错误提示</p>\n<ul>\n<li>tomcat:java.lang.OutOfMemoryError: PermGen space</li>\n<li>tomcat:java.lang.OutOfMemoryError: Java heap space</li>\n<li>weblogic:Root cause of ServletException java.lang.OutOfMemoryError</li>\n<li>resin:java.lang.OutOfMemoryError</li>\n<li>java:java.lang.OutOfMemoryError</li>\n</ul>\n</li>\n<li>\n<p>解决方法</p>\n<ul>\n<li>增加JVM的内存大小<br>\n对于tomcat容器，找到tomcat在电脑中的安装目录，进入这个目录，然后进入bin目录中，在window环境下找到bin目录中的catalina.bat，<a href=\"http://xn--linuxcatalina-t40uj69bkxsyifbo6cbj6d.sh\">在linux环境下找到catalina.sh</a>。<br>\n编辑catalina.bat文件，找到JAVA_OPTS（具体来说是 set “JAVA_OPTS=%JAVA_OPTS% %LOGGING_MANAGER%”）这个选项的位置，这个参数是Java启动的时候，需要的启动参数。<br>\n也可以在操作系统的环境变量中对JAVA_OPTS进行设置，因为tomcat在启动的时候，也会读取操作系统中的环境变量的值，进行加载。<br>\n如果是修改了操作系统的环境变量，需要重启机器，再重启tomcat，如果修改的是tomcat配置文件，需要将配置文件保存，然后重启tomcat，设置就能生效了</li>\n<li>优化程序，释放垃圾<br>\n主要思路就是避免程序体现上出现的情况。避免死循环，防止一次载入太多的数据，提高程序健壮型及时释放。因此，从根本上解决Java内存溢出的唯一方法就是修改程序，及时地释放没用的对象，释放内存空间</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-内存泄漏\"><a class=\"markdownIt-Anchor\" href=\"#2-内存泄漏\"></a> 2. 内存泄漏</h2>\n<p>Memory Leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，迟早会被占光。<br>\n在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点：<br>\n1）首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；<br>\n2）其次，这些对象是无用的，即程序以后不会再使用这些对象。<br>\n如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。<br>\n关于内存泄露的处理页就是提高程序的健壮型，因为内存泄露是纯代码层面的问题</p>\n<h2 id=\"3内存溢出和内存泄漏的联系\"><a class=\"markdownIt-Anchor\" href=\"#3内存溢出和内存泄漏的联系\"></a> 3.内存溢出和内存泄漏的联系</h2>\n<p>内存泄露会最终会导致内存溢出。<br>\n<strong>相同点</strong>：都会导致应用程序运行出现问题，性能下降或挂起。<br>\n<strong>不同点</strong>：<br>\n1) 内存泄露是导致内存溢出的原因之一，内存泄露积累起来将导致内存溢出。<br>\n2) 内存泄露可以通过完善代码来避免，内存溢出可以通过调整配置来减少发生频率，但无法彻底避免。</p>\n<h2 id=\"4排查案例\"><a class=\"markdownIt-Anchor\" href=\"#4排查案例\"></a> 4.排查案例</h2>\n<p>Java的内存泄露多半是因为对象存在无效的引用，对象得不到释放，如果发现Java应用程序占用的内存出现了泄露的迹象，那么我们一般采用下面的步骤分析：</p>\n<ol>\n<li>用工具生成java应用程序的heap dump（如jmap）</li>\n<li>使用Java heap分析工具（如MAT），找出内存占用超出预期的嫌疑对象</li>\n<li>根据情况，分析嫌疑对象和其他对象的引用关系。</li>\n<li>分析程序的源代码，找出嫌疑对象数量过多的原因。</li>\n</ol>\n<p>实际操作如下：<br>\n1.登录linux服务器，获取tomcat的pid</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef|grep java</span><br></pre></td></tr></table></figure>\n<p>2.利用jmap初步分析内存映射</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap -histo:live pid | head -7</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/01/outOfMemoryError/01.png\" alt=\"jmap\"><br>\n第2行是我们业务系统的对象，通过这个对象的引用可以初步分析出到底是哪里出现了引用未被垃圾回收收集，通知开发人员优化相关代码</p>\n<p>3.如果上面一步还无法定位到关键信息，那么需要拿到heap dump，生成离线文件，做进一步分析</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap -dump:live,format=b,file=heap.hprof 3514 </span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/01/outOfMemoryError/02.png\" alt=\"jmap\"><br>\n4. 拿到heap dump文件，利用eclipse插件MAT来分析heap profile。</p>\n<ul>\n<li>1.安装MAT插件</li>\n<li>2.在eclipse里切换到Memory Analysis视图</li>\n<li>3.用MAT打开heap profile文件。<br>\n<img src=\"/2021/08/01/outOfMemoryError/03.png\" alt=\"jmap\"><br>\n直接看到下面Action窗口，有4种Action来分析heap profile，介绍其中最常用的2种:</li>\n<li><strong>Histogram</strong>：这个使用的最多，跟上面的jmap -histo 命令类似，只是在MAT里面可以用GUI来展示应用系统各个类产生的实例。<br>\n<img src=\"/2021/08/01/outOfMemoryError/04.png\" alt=\"jmap\"><br>\nShllow Heap排序后发现 Cms_Organization 这个类占用的内存比较多（没有得到及时GC），查看引用<br>\n<img src=\"/2021/08/01/outOfMemoryError/05.png\" alt=\"jmap\"><br>\n分析引用栈，找到无效引用，打开源码<br>\n<img src=\"/2021/08/01/outOfMemoryError/06.png\" alt=\"jmap\"><br>\n<strong>查看源码！！！</strong></li>\n</ul>\n"},{"title":"redis常见使用场景","comments":0,"translate_title":"common-usage-scenarios-of-redis","date":"2021-08-14T09:51:30.000Z","_content":"##  1. 缓存\nString类型\n例如：热点数据缓存、对象缓存、全页缓存可以提升热点数据的访问效率\n\n##  2. 数据共享分布式\nString类型，因为redis是分布式的独立服务，可以在多个应用服务之间共享，例如分布式session\n```xml\n<dependency> \n    <groupId>org.springframework.session</groupId> \n    <artifactId>spring-session-data-redis</artifactId> \n</dependency>\n```\n\n## 3. 分布式锁\nString类型 setnx方法，只有不存在时才能添加成功返回true\n```java\npublic static boolean getLock(String key) {\n    Long flag = jedis.setnx(key, \"1\");\n    if (flag == 1) {\n        jedis.expire(key, 10);\n    }\n    return flag == 1;\n}\n\npublic static void releaseLock(String key) {\n    jedis.del(key);\n}\n```\n\n## 4. 全局ID\nint 类型， incrby, 利用原子性\n```shell\nincrby userid 1000\n```\n分库分表的场景，一次性拿一段。\n\n## 5. 计数器\nint 类型，incr方法\n例如：文章的阅读量、微博点赞数；允许一定的延迟，先写入redis在定时同步到数据库\n1. 第一种方法\n```java\n@Service\npublic class TestService {\n    \n    @Resource\n    RedisTemplate<String,Object> redisTemplate;\n    \n    @Resource(name=\"redisTemplate\")\n    private ValueOperations<String,Object> ops;\n    \n    public int testRedis() {\n        try {\n            //此方法会先检查key是否存在，存在+1，不存在先初始化，再+1\n            ops.increment(\"success\", 1);\n            \n            //return (int) ops.get(\"success\"); //使用这个会出现错误，报错信息 Caused by: org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is java.io.EOFException。\n            return Integer.valueOf(redisTemplate.boundValueOps(\"success\").get(0, -1));\n        } catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        }\n        \n        return 0 ;\n    }\n    \n}\n```\n\n2. 第二种方法\n```java\n@Service\npublic class TestService {\n    \n    @Resource\n    RedisTemplate<String,Object> redisTemplate;\n    \n    @Resource(name=\"redisTemplate\")\n    private ValueOperations<String,Object> ops;\n    \n    public int testRedis() {\n        try {\n            //此方法会先检查key是否存在，存在+1，不存在先初始化，再+1\n            ops.increment(\"success\", 1);\n            \n            //return (int) ops.get(\"success\");\n            //return Integer.valueOf(redisTemplate.boundValueOps(\"success\").get(0, -1));\n            return (int) getKey(\"success\");\n        } catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        }\n        \n        return 0 ;\n    }\n    \n    public long getKey(final String key) {\n        \n        return redisTemplate.execute(new RedisCallback<Long>() {\n            @Override\n            public Long doInRedis(RedisConnection connection) throws DataAccessException {\n                \n                RedisSerializer<String> redisSerializer = redisTemplate.getStringSerializer();\n                \n                byte[] rowkey = redisSerializer.serialize(key);\n                byte[] rowval = connection.get(rowkey);\n                \n                try {\n                    String val = redisSerializer.deserialize(rowval);\n                    return Long.parseLong(val);\n                } catch (Exception e) {\n                    return 0L;\n                }\n            }\n        });\n    }\n    \n}\n```\n设置每天零点过期，重新计数\n```java\n//当天时间\nDate date = new Date();\n//当天零点\ndate = DateUtils.truncate(date, Calendar.DAY_OF_MONTH);\n//第二天零点\ndate = DateUtils.addDays(date, +1);\nredisTemplate.expireAt(\"success\", date);\n```\n## 6. 限流\nint类型，incr方法\n以访问者的IP和其他信息作为key,访问一次增加一次次数，超过次数 则返回false\n\n## 7. 位统计\nString类型的bitcount\n字符是以8位二进制存储的\n```shell\nset k1 a\nsetbit k1 6 1\nsetbit k1 7 0\nget k1 \n/* 6 7 代表的a的二进制位的修改\n\na 对应的ASCII码是97，转换为二进制数据是01100001\nb 对应的ASCII码是98，转换为二进制数据是01100010\n\n因为bit非常节省空间（1 MB=8388608 bit），可以用来做大数据量的统计。\n*/\n```\n例如：在线用户统计，留存用户统计\n```shell\nsetbit onlineusers 01 \nsetbit onlineusers 11 \nsetbit onlineusers 20\n```\n支持按位与、按位或等等操作\n```shell\nBITOPANDdestkeykey[key...] ，对一个或多个 key 求逻辑并，并将结果保存到 destkey 。       \nBITOPORdestkeykey[key...] ，对一个或多个 key 求逻辑或，并将结果保存到 destkey 。 \nBITOPXORdestkeykey[key...] ，对一个或多个 key 求逻辑异或，并将结果保存到 destkey 。 \nBITOPNOTdestkeykey ，对给定 key 求逻辑非，并将结果保存到 destkey 。\n```\n计算出7天都在线的用户\n```shell\nBITOP \"AND\" \"7_days_both_online_users\" \"day_1_online_users\" \"day_2_online_users\" ...  \"day_7_online_users\"\n```\n\n##  8. 购物车\nString 或hash。所有String可以做的hash都可以\nhash类型是一个String类型的field和value的映射表，每个hash都可以存储2^32 -1键值对\n**使用hash做购物车：以用户id为key, 商品id为field，商品数量为value。**\n![](./redis-usage-scenario/01.png)\n## 9. 用户消息时间线timeline\nlist，双向链表，直接作为timeline就好了。插入有序\n\n## 10. 消息队列\nList提供了两个阻塞的弹出操作：blpop/brpop，可以设置超时时间\n\n- blpop：blpop key1 timeout 移除并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\n- brpop：brpop key1 timeout 移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\n上面的操作。其实就是java的阻塞队列。学习的东西越多。学习成本越低\n\n- 队列：先进先除：rpush blpop，左头右尾，右边进入队列，左边出队列\n- 栈：先进后出：rpush brpop\n\n## 11. 抽奖\n自带一个随机获得值\n```shell\nspop myset\n```\n\n## 12. 点赞、签到、打卡\n![点赞、签到、打卡](./redis-usage-scenario/02.png)\n假如上面的微博ID是t1001，用户ID是u3001\n\n用 like:t1001 来维护 t1001 这条微博的所有点赞用户\n\n- 点赞了这条微博：sadd like:t1001 u3001\n- 取消点赞：srem like:t1001 u3001\n- 是否点赞：sismember like:t1001 u3001\n- 点赞的所有用户：smembers like:t1001\n- 点赞数：scard like:t1001\n\n## 13. 商品标签\n![商品标签](./redis-usage-scenario/03.png)\n用 tags:i5001 来维护商品所有的标签。\n- sadd tags:i5001 画面清晰细腻\n- sadd tags:i5001 真彩清晰显示屏\n- sadd tags:i5001 流程至极\n\n## 14.商品筛选\n```shell\n// 获取差集\nsdiff set1 set2\n// 获取交集（intersection ）\nsinter set1 set2\n// 获取并集\nsunion set1 set2\n```\n![商品筛选](./redis-usage-scenario/04.png)\n```shell\nsadd brand:apple iPhone11\n\nsadd brand:ios iPhone11\n\nsad screensize:6.0-6.24 iPhone11\n\nsad screentype:lcd iPhone 11\n```\n筛选商品，苹果的、ios的、屏幕在6.0-6.24之间的，屏幕材质是LCD屏幕\n```shell\nsinter brand:apple brand:ios screensize:6.0-6.24 screentype:lcd\n```\n## 15. 用户关注、推荐模型\n```shell\n## follow 关注 fans 粉丝\nsadd 1:follow 2\nsadd 2:fans 1\nsadd 1:fans 2\nsadd 2:follow 1\n```\n我关注的人也关注了他(取交集)：\n```shell\nsinter 1:follow 2:fans\n```\n可能认识的人：\n```shell\n## 用户1可能认识的人(差集)：\nsdiff 2:follow 1:follow\n\n## 用户2可能认识的人：\nsdiff 1:follow 2:follow\n```\n\n## 16. 排行榜\nid 为6001 的新闻点击数加1：zincrby hotNews:20190926 1 n6001\n获取今天点击最多的15条：zrevrange hotNews:20190926 0 15 withscores\n![排行榜](./redis-usage-scenario/05.png)\n\n---\n\n![](./redis-usage-scenario/06.png)","source":"_posts/redis-usage-scenario.md","raw":"---\ntitle: redis常见使用场景\ntags: redis\ncategories:\n  - 中间件\n  - redis\ncomments: false\ntranslate_title: common-usage-scenarios-of-redis\ndate: 2021-08-14 17:51:30\n---\n##  1. 缓存\nString类型\n例如：热点数据缓存、对象缓存、全页缓存可以提升热点数据的访问效率\n\n##  2. 数据共享分布式\nString类型，因为redis是分布式的独立服务，可以在多个应用服务之间共享，例如分布式session\n```xml\n<dependency> \n    <groupId>org.springframework.session</groupId> \n    <artifactId>spring-session-data-redis</artifactId> \n</dependency>\n```\n\n## 3. 分布式锁\nString类型 setnx方法，只有不存在时才能添加成功返回true\n```java\npublic static boolean getLock(String key) {\n    Long flag = jedis.setnx(key, \"1\");\n    if (flag == 1) {\n        jedis.expire(key, 10);\n    }\n    return flag == 1;\n}\n\npublic static void releaseLock(String key) {\n    jedis.del(key);\n}\n```\n\n## 4. 全局ID\nint 类型， incrby, 利用原子性\n```shell\nincrby userid 1000\n```\n分库分表的场景，一次性拿一段。\n\n## 5. 计数器\nint 类型，incr方法\n例如：文章的阅读量、微博点赞数；允许一定的延迟，先写入redis在定时同步到数据库\n1. 第一种方法\n```java\n@Service\npublic class TestService {\n    \n    @Resource\n    RedisTemplate<String,Object> redisTemplate;\n    \n    @Resource(name=\"redisTemplate\")\n    private ValueOperations<String,Object> ops;\n    \n    public int testRedis() {\n        try {\n            //此方法会先检查key是否存在，存在+1，不存在先初始化，再+1\n            ops.increment(\"success\", 1);\n            \n            //return (int) ops.get(\"success\"); //使用这个会出现错误，报错信息 Caused by: org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is java.io.EOFException。\n            return Integer.valueOf(redisTemplate.boundValueOps(\"success\").get(0, -1));\n        } catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        }\n        \n        return 0 ;\n    }\n    \n}\n```\n\n2. 第二种方法\n```java\n@Service\npublic class TestService {\n    \n    @Resource\n    RedisTemplate<String,Object> redisTemplate;\n    \n    @Resource(name=\"redisTemplate\")\n    private ValueOperations<String,Object> ops;\n    \n    public int testRedis() {\n        try {\n            //此方法会先检查key是否存在，存在+1，不存在先初始化，再+1\n            ops.increment(\"success\", 1);\n            \n            //return (int) ops.get(\"success\");\n            //return Integer.valueOf(redisTemplate.boundValueOps(\"success\").get(0, -1));\n            return (int) getKey(\"success\");\n        } catch (Exception e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        }\n        \n        return 0 ;\n    }\n    \n    public long getKey(final String key) {\n        \n        return redisTemplate.execute(new RedisCallback<Long>() {\n            @Override\n            public Long doInRedis(RedisConnection connection) throws DataAccessException {\n                \n                RedisSerializer<String> redisSerializer = redisTemplate.getStringSerializer();\n                \n                byte[] rowkey = redisSerializer.serialize(key);\n                byte[] rowval = connection.get(rowkey);\n                \n                try {\n                    String val = redisSerializer.deserialize(rowval);\n                    return Long.parseLong(val);\n                } catch (Exception e) {\n                    return 0L;\n                }\n            }\n        });\n    }\n    \n}\n```\n设置每天零点过期，重新计数\n```java\n//当天时间\nDate date = new Date();\n//当天零点\ndate = DateUtils.truncate(date, Calendar.DAY_OF_MONTH);\n//第二天零点\ndate = DateUtils.addDays(date, +1);\nredisTemplate.expireAt(\"success\", date);\n```\n## 6. 限流\nint类型，incr方法\n以访问者的IP和其他信息作为key,访问一次增加一次次数，超过次数 则返回false\n\n## 7. 位统计\nString类型的bitcount\n字符是以8位二进制存储的\n```shell\nset k1 a\nsetbit k1 6 1\nsetbit k1 7 0\nget k1 \n/* 6 7 代表的a的二进制位的修改\n\na 对应的ASCII码是97，转换为二进制数据是01100001\nb 对应的ASCII码是98，转换为二进制数据是01100010\n\n因为bit非常节省空间（1 MB=8388608 bit），可以用来做大数据量的统计。\n*/\n```\n例如：在线用户统计，留存用户统计\n```shell\nsetbit onlineusers 01 \nsetbit onlineusers 11 \nsetbit onlineusers 20\n```\n支持按位与、按位或等等操作\n```shell\nBITOPANDdestkeykey[key...] ，对一个或多个 key 求逻辑并，并将结果保存到 destkey 。       \nBITOPORdestkeykey[key...] ，对一个或多个 key 求逻辑或，并将结果保存到 destkey 。 \nBITOPXORdestkeykey[key...] ，对一个或多个 key 求逻辑异或，并将结果保存到 destkey 。 \nBITOPNOTdestkeykey ，对给定 key 求逻辑非，并将结果保存到 destkey 。\n```\n计算出7天都在线的用户\n```shell\nBITOP \"AND\" \"7_days_both_online_users\" \"day_1_online_users\" \"day_2_online_users\" ...  \"day_7_online_users\"\n```\n\n##  8. 购物车\nString 或hash。所有String可以做的hash都可以\nhash类型是一个String类型的field和value的映射表，每个hash都可以存储2^32 -1键值对\n**使用hash做购物车：以用户id为key, 商品id为field，商品数量为value。**\n![](./redis-usage-scenario/01.png)\n## 9. 用户消息时间线timeline\nlist，双向链表，直接作为timeline就好了。插入有序\n\n## 10. 消息队列\nList提供了两个阻塞的弹出操作：blpop/brpop，可以设置超时时间\n\n- blpop：blpop key1 timeout 移除并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\n- brpop：brpop key1 timeout 移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\n上面的操作。其实就是java的阻塞队列。学习的东西越多。学习成本越低\n\n- 队列：先进先除：rpush blpop，左头右尾，右边进入队列，左边出队列\n- 栈：先进后出：rpush brpop\n\n## 11. 抽奖\n自带一个随机获得值\n```shell\nspop myset\n```\n\n## 12. 点赞、签到、打卡\n![点赞、签到、打卡](./redis-usage-scenario/02.png)\n假如上面的微博ID是t1001，用户ID是u3001\n\n用 like:t1001 来维护 t1001 这条微博的所有点赞用户\n\n- 点赞了这条微博：sadd like:t1001 u3001\n- 取消点赞：srem like:t1001 u3001\n- 是否点赞：sismember like:t1001 u3001\n- 点赞的所有用户：smembers like:t1001\n- 点赞数：scard like:t1001\n\n## 13. 商品标签\n![商品标签](./redis-usage-scenario/03.png)\n用 tags:i5001 来维护商品所有的标签。\n- sadd tags:i5001 画面清晰细腻\n- sadd tags:i5001 真彩清晰显示屏\n- sadd tags:i5001 流程至极\n\n## 14.商品筛选\n```shell\n// 获取差集\nsdiff set1 set2\n// 获取交集（intersection ）\nsinter set1 set2\n// 获取并集\nsunion set1 set2\n```\n![商品筛选](./redis-usage-scenario/04.png)\n```shell\nsadd brand:apple iPhone11\n\nsadd brand:ios iPhone11\n\nsad screensize:6.0-6.24 iPhone11\n\nsad screentype:lcd iPhone 11\n```\n筛选商品，苹果的、ios的、屏幕在6.0-6.24之间的，屏幕材质是LCD屏幕\n```shell\nsinter brand:apple brand:ios screensize:6.0-6.24 screentype:lcd\n```\n## 15. 用户关注、推荐模型\n```shell\n## follow 关注 fans 粉丝\nsadd 1:follow 2\nsadd 2:fans 1\nsadd 1:fans 2\nsadd 2:follow 1\n```\n我关注的人也关注了他(取交集)：\n```shell\nsinter 1:follow 2:fans\n```\n可能认识的人：\n```shell\n## 用户1可能认识的人(差集)：\nsdiff 2:follow 1:follow\n\n## 用户2可能认识的人：\nsdiff 1:follow 2:follow\n```\n\n## 16. 排行榜\nid 为6001 的新闻点击数加1：zincrby hotNews:20190926 1 n6001\n获取今天点击最多的15条：zrevrange hotNews:20190926 0 15 withscores\n![排行榜](./redis-usage-scenario/05.png)\n\n---\n\n![](./redis-usage-scenario/06.png)","slug":"redis-usage-scenario","published":1,"updated":"2021-08-15T07:41:26.127Z","layout":"post","photos":[],"link":"","_id":"ckslj4psi001dkw3qd67uc7de","content":"<h2 id=\"1-缓存\"><a class=\"markdownIt-Anchor\" href=\"#1-缓存\"></a> 1. 缓存</h2>\n<p>String类型<br>\n例如：热点数据缓存、对象缓存、全页缓存可以提升热点数据的访问效率</p>\n<h2 id=\"2-数据共享分布式\"><a class=\"markdownIt-Anchor\" href=\"#2-数据共享分布式\"></a> 2. 数据共享分布式</h2>\n<p>String类型，因为redis是分布式的独立服务，可以在多个应用服务之间共享，例如分布式session</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.session<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-session-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-分布式锁\"><a class=\"markdownIt-Anchor\" href=\"#3-分布式锁\"></a> 3. 分布式锁</h2>\n<p>String类型 setnx方法，只有不存在时才能添加成功返回true</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">getLock</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    Long flag = jedis.setnx(key, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        jedis.expire(key, <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">releaseLock</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    jedis.del(key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-全局id\"><a class=\"markdownIt-Anchor\" href=\"#4-全局id\"></a> 4. 全局ID</h2>\n<p>int 类型， incrby, 利用原子性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incrby userid 1000</span><br></pre></td></tr></table></figure>\n<p>分库分表的场景，一次性拿一段。</p>\n<h2 id=\"5-计数器\"><a class=\"markdownIt-Anchor\" href=\"#5-计数器\"></a> 5. 计数器</h2>\n<p>int 类型，incr方法<br>\n例如：文章的阅读量、微博点赞数；允许一定的延迟，先写入redis在定时同步到数据库</p>\n<ol>\n<li>第一种方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource(name=&quot;redisTemplate&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ValueOperations&lt;String,Object&gt; ops;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testRedis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//此方法会先检查key是否存在，存在+1，不存在先初始化，再+1</span></span><br><span class=\"line\">            ops.increment(<span class=\"string\">&quot;success&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//return (int) ops.get(&quot;success&quot;); //使用这个会出现错误，报错信息 Caused by: org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is java.io.EOFException。</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Integer.valueOf(redisTemplate.boundValueOps(<span class=\"string\">&quot;success&quot;</span>).get(<span class=\"number\">0</span>, -<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>第二种方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource(name=&quot;redisTemplate&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ValueOperations&lt;String,Object&gt; ops;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testRedis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//此方法会先检查key是否存在，存在+1，不存在先初始化，再+1</span></span><br><span class=\"line\">            ops.increment(<span class=\"string\">&quot;success&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//return (int) ops.get(&quot;success&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">//return Integer.valueOf(redisTemplate.boundValueOps(&quot;success&quot;).get(0, -1));</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) getKey(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getKey</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.execute(<span class=\"keyword\">new</span> RedisCallback&lt;Long&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">doInRedis</span><span class=\"params\">(RedisConnection connection)</span> <span class=\"keyword\">throws</span> DataAccessException </span>&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                RedisSerializer&lt;String&gt; redisSerializer = redisTemplate.getStringSerializer();</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] rowkey = redisSerializer.serialize(key);</span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] rowval = connection.get(rowkey);</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    String val = redisSerializer.deserialize(rowval);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Long.parseLong(val);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0L</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置每天零点过期，重新计数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当天时间</span></span><br><span class=\"line\">Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\"><span class=\"comment\">//当天零点</span></span><br><span class=\"line\">date = DateUtils.truncate(date, Calendar.DAY_OF_MONTH);</span><br><span class=\"line\"><span class=\"comment\">//第二天零点</span></span><br><span class=\"line\">date = DateUtils.addDays(date, +<span class=\"number\">1</span>);</span><br><span class=\"line\">redisTemplate.expireAt(<span class=\"string\">&quot;success&quot;</span>, date);</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-限流\"><a class=\"markdownIt-Anchor\" href=\"#6-限流\"></a> 6. 限流</h2>\n<p>int类型，incr方法<br>\n以访问者的IP和其他信息作为key,访问一次增加一次次数，超过次数 则返回false</p>\n<h2 id=\"7-位统计\"><a class=\"markdownIt-Anchor\" href=\"#7-位统计\"></a> 7. 位统计</h2>\n<p>String类型的bitcount<br>\n字符是以8位二进制存储的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set k1 a</span><br><span class=\"line\">setbit k1 6 1</span><br><span class=\"line\">setbit k1 7 0</span><br><span class=\"line\">get k1 </span><br><span class=\"line\">/* 6 7 代表的a的二进制位的修改</span><br><span class=\"line\"></span><br><span class=\"line\">a 对应的ASCII码是97，转换为二进制数据是01100001</span><br><span class=\"line\">b 对应的ASCII码是98，转换为二进制数据是01100010</span><br><span class=\"line\"></span><br><span class=\"line\">因为bit非常节省空间（1 MB=8388608 bit），可以用来做大数据量的统计。</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>例如：在线用户统计，留存用户统计</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setbit onlineusers 01 </span><br><span class=\"line\">setbit onlineusers 11 </span><br><span class=\"line\">setbit onlineusers 20</span><br></pre></td></tr></table></figure>\n<p>支持按位与、按位或等等操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BITOPANDdestkeykey[key...] ，对一个或多个 key 求逻辑并，并将结果保存到 destkey 。       </span><br><span class=\"line\">BITOPORdestkeykey[key...] ，对一个或多个 key 求逻辑或，并将结果保存到 destkey 。 </span><br><span class=\"line\">BITOPXORdestkeykey[key...] ，对一个或多个 key 求逻辑异或，并将结果保存到 destkey 。 </span><br><span class=\"line\">BITOPNOTdestkeykey ，对给定 key 求逻辑非，并将结果保存到 destkey 。</span><br></pre></td></tr></table></figure>\n<p>计算出7天都在线的用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BITOP &quot;AND&quot; &quot;7_days_both_online_users&quot; &quot;day_1_online_users&quot; &quot;day_2_online_users&quot; ...  &quot;day_7_online_users&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-购物车\"><a class=\"markdownIt-Anchor\" href=\"#8-购物车\"></a> 8. 购物车</h2>\n<p>String 或hash。所有String可以做的hash都可以<br>\nhash类型是一个String类型的field和value的映射表，每个hash都可以存储2^32 -1键值对<br>\n<strong>使用hash做购物车：以用户id为key, 商品id为field，商品数量为value。</strong><br>\n<img src=\"/2021/08/14/redis-usage-scenario/01.png\" alt></p>\n<h2 id=\"9-用户消息时间线timeline\"><a class=\"markdownIt-Anchor\" href=\"#9-用户消息时间线timeline\"></a> 9. 用户消息时间线timeline</h2>\n<p>list，双向链表，直接作为timeline就好了。插入有序</p>\n<h2 id=\"10-消息队列\"><a class=\"markdownIt-Anchor\" href=\"#10-消息队列\"></a> 10. 消息队列</h2>\n<p>List提供了两个阻塞的弹出操作：blpop/brpop，可以设置超时时间</p>\n<ul>\n<li>\n<p>blpop：blpop key1 timeout 移除并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p>\n</li>\n<li>\n<p>brpop：brpop key1 timeout 移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。<br>\n上面的操作。其实就是java的阻塞队列。学习的东西越多。学习成本越低</p>\n</li>\n<li>\n<p>队列：先进先除：rpush blpop，左头右尾，右边进入队列，左边出队列</p>\n</li>\n<li>\n<p>栈：先进后出：rpush brpop</p>\n</li>\n</ul>\n<h2 id=\"11-抽奖\"><a class=\"markdownIt-Anchor\" href=\"#11-抽奖\"></a> 11. 抽奖</h2>\n<p>自带一个随机获得值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spop myset</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-点赞-签到-打卡\"><a class=\"markdownIt-Anchor\" href=\"#12-点赞-签到-打卡\"></a> 12. 点赞、签到、打卡</h2>\n<p><img src=\"/2021/08/14/redis-usage-scenario/02.png\" alt=\"点赞、签到、打卡\"><br>\n假如上面的微博ID是t1001，用户ID是u3001</p>\n<p>用 like:t1001 来维护 t1001 这条微博的所有点赞用户</p>\n<ul>\n<li>点赞了这条微博：sadd like:t1001 u3001</li>\n<li>取消点赞：srem like:t1001 u3001</li>\n<li>是否点赞：sismember like:t1001 u3001</li>\n<li>点赞的所有用户：smembers like:t1001</li>\n<li>点赞数：scard like:t1001</li>\n</ul>\n<h2 id=\"13-商品标签\"><a class=\"markdownIt-Anchor\" href=\"#13-商品标签\"></a> 13. 商品标签</h2>\n<p><img src=\"/2021/08/14/redis-usage-scenario/03.png\" alt=\"商品标签\"><br>\n用 tags:i5001 来维护商品所有的标签。</p>\n<ul>\n<li>sadd tags:i5001 画面清晰细腻</li>\n<li>sadd tags:i5001 真彩清晰显示屏</li>\n<li>sadd tags:i5001 流程至极</li>\n</ul>\n<h2 id=\"14商品筛选\"><a class=\"markdownIt-Anchor\" href=\"#14商品筛选\"></a> 14.商品筛选</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取差集</span><br><span class=\"line\">sdiff set1 set2</span><br><span class=\"line\">// 获取交集（intersection ）</span><br><span class=\"line\">sinter set1 set2</span><br><span class=\"line\">// 获取并集</span><br><span class=\"line\">sunion set1 set2</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/14/redis-usage-scenario/04.png\" alt=\"商品筛选\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sadd brand:apple iPhone11</span><br><span class=\"line\"></span><br><span class=\"line\">sadd brand:ios iPhone11</span><br><span class=\"line\"></span><br><span class=\"line\">sad screensize:6.0-6.24 iPhone11</span><br><span class=\"line\"></span><br><span class=\"line\">sad screentype:lcd iPhone 11</span><br></pre></td></tr></table></figure>\n<p>筛选商品，苹果的、ios的、屏幕在6.0-6.24之间的，屏幕材质是LCD屏幕</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinter brand:apple brand:ios screensize:6.0-6.24 screentype:lcd</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-用户关注-推荐模型\"><a class=\"markdownIt-Anchor\" href=\"#15-用户关注-推荐模型\"></a> 15. 用户关注、推荐模型</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># follow 关注 fans 粉丝</span></span></span><br><span class=\"line\">sadd 1:follow 2</span><br><span class=\"line\">sadd 2:fans 1</span><br><span class=\"line\">sadd 1:fans 2</span><br><span class=\"line\">sadd 2:follow 1</span><br></pre></td></tr></table></figure>\n<p>我关注的人也关注了他(取交集)：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinter 1:follow 2:fans</span><br></pre></td></tr></table></figure>\n<p>可能认识的人：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 用户1可能认识的人(差集)：</span></span></span><br><span class=\"line\">sdiff 2:follow 1:follow</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 用户2可能认识的人：</span></span></span><br><span class=\"line\">sdiff 1:follow 2:follow</span><br></pre></td></tr></table></figure>\n<h2 id=\"16-排行榜\"><a class=\"markdownIt-Anchor\" href=\"#16-排行榜\"></a> 16. 排行榜</h2>\n<p>id 为6001 的新闻点击数加1：zincrby hotNews:20190926 1 n6001<br>\n获取今天点击最多的15条：zrevrange hotNews:20190926 0 15 withscores<br>\n<img src=\"/2021/08/14/redis-usage-scenario/05.png\" alt=\"排行榜\"></p>\n<hr>\n<p><img src=\"/2021/08/14/redis-usage-scenario/06.png\" alt></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1-缓存\"><a class=\"markdownIt-Anchor\" href=\"#1-缓存\"></a> 1. 缓存</h2>\n<p>String类型<br>\n例如：热点数据缓存、对象缓存、全页缓存可以提升热点数据的访问效率</p>\n<h2 id=\"2-数据共享分布式\"><a class=\"markdownIt-Anchor\" href=\"#2-数据共享分布式\"></a> 2. 数据共享分布式</h2>\n<p>String类型，因为redis是分布式的独立服务，可以在多个应用服务之间共享，例如分布式session</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.session<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-session-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-分布式锁\"><a class=\"markdownIt-Anchor\" href=\"#3-分布式锁\"></a> 3. 分布式锁</h2>\n<p>String类型 setnx方法，只有不存在时才能添加成功返回true</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">getLock</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    Long flag = jedis.setnx(key, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        jedis.expire(key, <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">releaseLock</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    jedis.del(key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-全局id\"><a class=\"markdownIt-Anchor\" href=\"#4-全局id\"></a> 4. 全局ID</h2>\n<p>int 类型， incrby, 利用原子性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incrby userid 1000</span><br></pre></td></tr></table></figure>\n<p>分库分表的场景，一次性拿一段。</p>\n<h2 id=\"5-计数器\"><a class=\"markdownIt-Anchor\" href=\"#5-计数器\"></a> 5. 计数器</h2>\n<p>int 类型，incr方法<br>\n例如：文章的阅读量、微博点赞数；允许一定的延迟，先写入redis在定时同步到数据库</p>\n<ol>\n<li>第一种方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource(name=&quot;redisTemplate&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ValueOperations&lt;String,Object&gt; ops;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testRedis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//此方法会先检查key是否存在，存在+1，不存在先初始化，再+1</span></span><br><span class=\"line\">            ops.increment(<span class=\"string\">&quot;success&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//return (int) ops.get(&quot;success&quot;); //使用这个会出现错误，报错信息 Caused by: org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is java.io.EOFException。</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Integer.valueOf(redisTemplate.boundValueOps(<span class=\"string\">&quot;success&quot;</span>).get(<span class=\"number\">0</span>, -<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>第二种方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Resource(name=&quot;redisTemplate&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ValueOperations&lt;String,Object&gt; ops;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testRedis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//此方法会先检查key是否存在，存在+1，不存在先初始化，再+1</span></span><br><span class=\"line\">            ops.increment(<span class=\"string\">&quot;success&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//return (int) ops.get(&quot;success&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">//return Integer.valueOf(redisTemplate.boundValueOps(&quot;success&quot;).get(0, -1));</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) getKey(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getKey</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.execute(<span class=\"keyword\">new</span> RedisCallback&lt;Long&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">doInRedis</span><span class=\"params\">(RedisConnection connection)</span> <span class=\"keyword\">throws</span> DataAccessException </span>&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                RedisSerializer&lt;String&gt; redisSerializer = redisTemplate.getStringSerializer();</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] rowkey = redisSerializer.serialize(key);</span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] rowval = connection.get(rowkey);</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    String val = redisSerializer.deserialize(rowval);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Long.parseLong(val);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0L</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置每天零点过期，重新计数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当天时间</span></span><br><span class=\"line\">Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\"><span class=\"comment\">//当天零点</span></span><br><span class=\"line\">date = DateUtils.truncate(date, Calendar.DAY_OF_MONTH);</span><br><span class=\"line\"><span class=\"comment\">//第二天零点</span></span><br><span class=\"line\">date = DateUtils.addDays(date, +<span class=\"number\">1</span>);</span><br><span class=\"line\">redisTemplate.expireAt(<span class=\"string\">&quot;success&quot;</span>, date);</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-限流\"><a class=\"markdownIt-Anchor\" href=\"#6-限流\"></a> 6. 限流</h2>\n<p>int类型，incr方法<br>\n以访问者的IP和其他信息作为key,访问一次增加一次次数，超过次数 则返回false</p>\n<h2 id=\"7-位统计\"><a class=\"markdownIt-Anchor\" href=\"#7-位统计\"></a> 7. 位统计</h2>\n<p>String类型的bitcount<br>\n字符是以8位二进制存储的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set k1 a</span><br><span class=\"line\">setbit k1 6 1</span><br><span class=\"line\">setbit k1 7 0</span><br><span class=\"line\">get k1 </span><br><span class=\"line\">/* 6 7 代表的a的二进制位的修改</span><br><span class=\"line\"></span><br><span class=\"line\">a 对应的ASCII码是97，转换为二进制数据是01100001</span><br><span class=\"line\">b 对应的ASCII码是98，转换为二进制数据是01100010</span><br><span class=\"line\"></span><br><span class=\"line\">因为bit非常节省空间（1 MB=8388608 bit），可以用来做大数据量的统计。</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>例如：在线用户统计，留存用户统计</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setbit onlineusers 01 </span><br><span class=\"line\">setbit onlineusers 11 </span><br><span class=\"line\">setbit onlineusers 20</span><br></pre></td></tr></table></figure>\n<p>支持按位与、按位或等等操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BITOPANDdestkeykey[key...] ，对一个或多个 key 求逻辑并，并将结果保存到 destkey 。       </span><br><span class=\"line\">BITOPORdestkeykey[key...] ，对一个或多个 key 求逻辑或，并将结果保存到 destkey 。 </span><br><span class=\"line\">BITOPXORdestkeykey[key...] ，对一个或多个 key 求逻辑异或，并将结果保存到 destkey 。 </span><br><span class=\"line\">BITOPNOTdestkeykey ，对给定 key 求逻辑非，并将结果保存到 destkey 。</span><br></pre></td></tr></table></figure>\n<p>计算出7天都在线的用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BITOP &quot;AND&quot; &quot;7_days_both_online_users&quot; &quot;day_1_online_users&quot; &quot;day_2_online_users&quot; ...  &quot;day_7_online_users&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-购物车\"><a class=\"markdownIt-Anchor\" href=\"#8-购物车\"></a> 8. 购物车</h2>\n<p>String 或hash。所有String可以做的hash都可以<br>\nhash类型是一个String类型的field和value的映射表，每个hash都可以存储2^32 -1键值对<br>\n<strong>使用hash做购物车：以用户id为key, 商品id为field，商品数量为value。</strong><br>\n<img src=\"/2021/08/14/redis-usage-scenario/01.png\" alt></p>\n<h2 id=\"9-用户消息时间线timeline\"><a class=\"markdownIt-Anchor\" href=\"#9-用户消息时间线timeline\"></a> 9. 用户消息时间线timeline</h2>\n<p>list，双向链表，直接作为timeline就好了。插入有序</p>\n<h2 id=\"10-消息队列\"><a class=\"markdownIt-Anchor\" href=\"#10-消息队列\"></a> 10. 消息队列</h2>\n<p>List提供了两个阻塞的弹出操作：blpop/brpop，可以设置超时时间</p>\n<ul>\n<li>\n<p>blpop：blpop key1 timeout 移除并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p>\n</li>\n<li>\n<p>brpop：brpop key1 timeout 移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。<br>\n上面的操作。其实就是java的阻塞队列。学习的东西越多。学习成本越低</p>\n</li>\n<li>\n<p>队列：先进先除：rpush blpop，左头右尾，右边进入队列，左边出队列</p>\n</li>\n<li>\n<p>栈：先进后出：rpush brpop</p>\n</li>\n</ul>\n<h2 id=\"11-抽奖\"><a class=\"markdownIt-Anchor\" href=\"#11-抽奖\"></a> 11. 抽奖</h2>\n<p>自带一个随机获得值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spop myset</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-点赞-签到-打卡\"><a class=\"markdownIt-Anchor\" href=\"#12-点赞-签到-打卡\"></a> 12. 点赞、签到、打卡</h2>\n<p><img src=\"/2021/08/14/redis-usage-scenario/02.png\" alt=\"点赞、签到、打卡\"><br>\n假如上面的微博ID是t1001，用户ID是u3001</p>\n<p>用 like:t1001 来维护 t1001 这条微博的所有点赞用户</p>\n<ul>\n<li>点赞了这条微博：sadd like:t1001 u3001</li>\n<li>取消点赞：srem like:t1001 u3001</li>\n<li>是否点赞：sismember like:t1001 u3001</li>\n<li>点赞的所有用户：smembers like:t1001</li>\n<li>点赞数：scard like:t1001</li>\n</ul>\n<h2 id=\"13-商品标签\"><a class=\"markdownIt-Anchor\" href=\"#13-商品标签\"></a> 13. 商品标签</h2>\n<p><img src=\"/2021/08/14/redis-usage-scenario/03.png\" alt=\"商品标签\"><br>\n用 tags:i5001 来维护商品所有的标签。</p>\n<ul>\n<li>sadd tags:i5001 画面清晰细腻</li>\n<li>sadd tags:i5001 真彩清晰显示屏</li>\n<li>sadd tags:i5001 流程至极</li>\n</ul>\n<h2 id=\"14商品筛选\"><a class=\"markdownIt-Anchor\" href=\"#14商品筛选\"></a> 14.商品筛选</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取差集</span><br><span class=\"line\">sdiff set1 set2</span><br><span class=\"line\">// 获取交集（intersection ）</span><br><span class=\"line\">sinter set1 set2</span><br><span class=\"line\">// 获取并集</span><br><span class=\"line\">sunion set1 set2</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/14/redis-usage-scenario/04.png\" alt=\"商品筛选\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sadd brand:apple iPhone11</span><br><span class=\"line\"></span><br><span class=\"line\">sadd brand:ios iPhone11</span><br><span class=\"line\"></span><br><span class=\"line\">sad screensize:6.0-6.24 iPhone11</span><br><span class=\"line\"></span><br><span class=\"line\">sad screentype:lcd iPhone 11</span><br></pre></td></tr></table></figure>\n<p>筛选商品，苹果的、ios的、屏幕在6.0-6.24之间的，屏幕材质是LCD屏幕</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinter brand:apple brand:ios screensize:6.0-6.24 screentype:lcd</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-用户关注-推荐模型\"><a class=\"markdownIt-Anchor\" href=\"#15-用户关注-推荐模型\"></a> 15. 用户关注、推荐模型</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># follow 关注 fans 粉丝</span></span></span><br><span class=\"line\">sadd 1:follow 2</span><br><span class=\"line\">sadd 2:fans 1</span><br><span class=\"line\">sadd 1:fans 2</span><br><span class=\"line\">sadd 2:follow 1</span><br></pre></td></tr></table></figure>\n<p>我关注的人也关注了他(取交集)：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinter 1:follow 2:fans</span><br></pre></td></tr></table></figure>\n<p>可能认识的人：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 用户1可能认识的人(差集)：</span></span></span><br><span class=\"line\">sdiff 2:follow 1:follow</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 用户2可能认识的人：</span></span></span><br><span class=\"line\">sdiff 1:follow 2:follow</span><br></pre></td></tr></table></figure>\n<h2 id=\"16-排行榜\"><a class=\"markdownIt-Anchor\" href=\"#16-排行榜\"></a> 16. 排行榜</h2>\n<p>id 为6001 的新闻点击数加1：zincrby hotNews:20190926 1 n6001<br>\n获取今天点击最多的15条：zrevrange hotNews:20190926 0 15 withscores<br>\n<img src=\"/2021/08/14/redis-usage-scenario/05.png\" alt=\"排行榜\"></p>\n<hr>\n<p><img src=\"/2021/08/14/redis-usage-scenario/06.png\" alt></p>\n"},{"title":"Linux环境下安装Redis","comments":0,"translate_title":"install-redis-in-linux","date":"2021-05-13T05:40:44.000Z","_content":"#####  1. 安装gcc\n   ```shell\n   yum -y install gcc gcc-c++\n   ```\n##### 2. 下载安装包\n   ```shell\n   wget http://download.redis.io/redis-stable.tar.gz \n   ```\n##### 3. 解压\n\n   ```shell\n   tar xvzf redis-stable.tar.gz\n   ```\n#####    4. 编译\n\n   ```shell\n   //如果使用make失败，那么就加上参数，因为jemalloc重载了Linux下的ANSI C的malloc和free函数\n   make MALLOC=libc\n   //make之后如果出现Hint: To run 'make test' is a good idea ;\n   //运行make test, 会提示需要安装tcl,执行yum install tcl\n   ```\n\n##### 5. 配置密码以及允许外网ip访问\n\n   ```properties\n   #在redis.conf中配置requirepass 密码以及port端口号（非必须）\n   requirepass xxx\n   port 6379 \n   \n   #开启redis允许外网ip访问，在 Linux 中安装了redis 服务，当在客户端通过远程连接的方式连接时，报could not connect错误。错误的原因为：redis采用的安全策略，默认会只准许本地访问。\n   #将所有的bing信息全部屏蔽\n   #bind 192.168.1.100 10.0.0.1\n   \n   #配置redis后台启动，如果不配置的话可以使用hohup启动\n   daemonize yes\n   ```\n##### 6. 启动redis服务\n   ```shell\n   cd ./src\n   nohup ./redis-server ../redis.conf &\n   ```\n##### 7. 查看redis进程\n   ```shell\n   [root@localhost redis]# pstree\n   ```\n   ![image-20201210103251475](./redis_install/image-20201201155441018.png)","source":"_posts/redis_install.md","raw":"---\ntitle: Linux环境下安装Redis\ntags: redis\ncategories:\n  - 中间件\n  - redis\ncomments: false\ntranslate_title: install-redis-in-linux\ndate: 2021-05-13 13:40:44\n---\n#####  1. 安装gcc\n   ```shell\n   yum -y install gcc gcc-c++\n   ```\n##### 2. 下载安装包\n   ```shell\n   wget http://download.redis.io/redis-stable.tar.gz \n   ```\n##### 3. 解压\n\n   ```shell\n   tar xvzf redis-stable.tar.gz\n   ```\n#####    4. 编译\n\n   ```shell\n   //如果使用make失败，那么就加上参数，因为jemalloc重载了Linux下的ANSI C的malloc和free函数\n   make MALLOC=libc\n   //make之后如果出现Hint: To run 'make test' is a good idea ;\n   //运行make test, 会提示需要安装tcl,执行yum install tcl\n   ```\n\n##### 5. 配置密码以及允许外网ip访问\n\n   ```properties\n   #在redis.conf中配置requirepass 密码以及port端口号（非必须）\n   requirepass xxx\n   port 6379 \n   \n   #开启redis允许外网ip访问，在 Linux 中安装了redis 服务，当在客户端通过远程连接的方式连接时，报could not connect错误。错误的原因为：redis采用的安全策略，默认会只准许本地访问。\n   #将所有的bing信息全部屏蔽\n   #bind 192.168.1.100 10.0.0.1\n   \n   #配置redis后台启动，如果不配置的话可以使用hohup启动\n   daemonize yes\n   ```\n##### 6. 启动redis服务\n   ```shell\n   cd ./src\n   nohup ./redis-server ../redis.conf &\n   ```\n##### 7. 查看redis进程\n   ```shell\n   [root@localhost redis]# pstree\n   ```\n   ![image-20201210103251475](./redis_install/image-20201201155441018.png)","slug":"redis_install","published":1,"updated":"2021-08-15T07:41:26.132Z","layout":"post","photos":[],"link":"","_id":"ckslj4pso001hkw3q54vt3o7s","content":"<h5 id=\"1-安装gcc\"><a class=\"markdownIt-Anchor\" href=\"#1-安装gcc\"></a> 1. 安装gcc</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-下载安装包\"><a class=\"markdownIt-Anchor\" href=\"#2-下载安装包\"></a> 2. 下载安装包</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/redis-stable.tar.gz </span><br></pre></td></tr></table></figure>\n<h5 id=\"3-解压\"><a class=\"markdownIt-Anchor\" href=\"#3-解压\"></a> 3. 解压</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvzf redis-stable.tar.gz</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-编译\"><a class=\"markdownIt-Anchor\" href=\"#4-编译\"></a> 4. 编译</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如果使用make失败，那么就加上参数，因为jemalloc重载了Linux下的ANSI C的malloc和free函数</span><br><span class=\"line\">make MALLOC=libc</span><br><span class=\"line\">//make之后如果出现Hint: To run &#x27;make test&#x27; is a good idea ;</span><br><span class=\"line\">//运行make test, 会提示需要安装tcl,执行yum install tcl</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-配置密码以及允许外网ip访问\"><a class=\"markdownIt-Anchor\" href=\"#5-配置密码以及允许外网ip访问\"></a> 5. 配置密码以及允许外网ip访问</h5>\n   <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在redis.conf中配置requirepass 密码以及port端口号（非必须）</span></span><br><span class=\"line\"><span class=\"attr\">requirepass</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"attr\">port</span> <span class=\"string\">6379 </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#开启redis允许外网ip访问，在 Linux 中安装了redis 服务，当在客户端通过远程连接的方式连接时，报could not connect错误。错误的原因为：redis采用的安全策略，默认会只准许本地访问。</span></span><br><span class=\"line\"><span class=\"comment\">#将所有的bing信息全部屏蔽</span></span><br><span class=\"line\"><span class=\"comment\">#bind 192.168.1.100 10.0.0.1</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#配置redis后台启动，如果不配置的话可以使用hohup启动</span></span><br><span class=\"line\"><span class=\"attr\">daemonize</span> <span class=\"string\">yes</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"6-启动redis服务\"><a class=\"markdownIt-Anchor\" href=\"#6-启动redis服务\"></a> 6. 启动redis服务</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ./src</span><br><span class=\"line\">nohup ./redis-server ../redis.conf &amp;</span><br></pre></td></tr></table></figure>\n<h5 id=\"7-查看redis进程\"><a class=\"markdownIt-Anchor\" href=\"#7-查看redis进程\"></a> 7. 查看redis进程</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost redis]# pstree</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/05/13/redis_install/image-20201201155441018.png\" alt=\"image-20201210103251475\"></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h5 id=\"1-安装gcc\"><a class=\"markdownIt-Anchor\" href=\"#1-安装gcc\"></a> 1. 安装gcc</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-下载安装包\"><a class=\"markdownIt-Anchor\" href=\"#2-下载安装包\"></a> 2. 下载安装包</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/redis-stable.tar.gz </span><br></pre></td></tr></table></figure>\n<h5 id=\"3-解压\"><a class=\"markdownIt-Anchor\" href=\"#3-解压\"></a> 3. 解压</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvzf redis-stable.tar.gz</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-编译\"><a class=\"markdownIt-Anchor\" href=\"#4-编译\"></a> 4. 编译</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如果使用make失败，那么就加上参数，因为jemalloc重载了Linux下的ANSI C的malloc和free函数</span><br><span class=\"line\">make MALLOC=libc</span><br><span class=\"line\">//make之后如果出现Hint: To run &#x27;make test&#x27; is a good idea ;</span><br><span class=\"line\">//运行make test, 会提示需要安装tcl,执行yum install tcl</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-配置密码以及允许外网ip访问\"><a class=\"markdownIt-Anchor\" href=\"#5-配置密码以及允许外网ip访问\"></a> 5. 配置密码以及允许外网ip访问</h5>\n   <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在redis.conf中配置requirepass 密码以及port端口号（非必须）</span></span><br><span class=\"line\"><span class=\"attr\">requirepass</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"attr\">port</span> <span class=\"string\">6379 </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#开启redis允许外网ip访问，在 Linux 中安装了redis 服务，当在客户端通过远程连接的方式连接时，报could not connect错误。错误的原因为：redis采用的安全策略，默认会只准许本地访问。</span></span><br><span class=\"line\"><span class=\"comment\">#将所有的bing信息全部屏蔽</span></span><br><span class=\"line\"><span class=\"comment\">#bind 192.168.1.100 10.0.0.1</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#配置redis后台启动，如果不配置的话可以使用hohup启动</span></span><br><span class=\"line\"><span class=\"attr\">daemonize</span> <span class=\"string\">yes</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"6-启动redis服务\"><a class=\"markdownIt-Anchor\" href=\"#6-启动redis服务\"></a> 6. 启动redis服务</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ./src</span><br><span class=\"line\">nohup ./redis-server ../redis.conf &amp;</span><br></pre></td></tr></table></figure>\n<h5 id=\"7-查看redis进程\"><a class=\"markdownIt-Anchor\" href=\"#7-查看redis进程\"></a> 7. 查看redis进程</h5>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost redis]# pstree</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/05/13/redis_install/image-20201201155441018.png\" alt=\"image-20201210103251475\"></p>\n"},{"title":"springboot读取yml配置的方式","comments":0,"translate_title":"how-springboot-reads-yml-configuration","date":"2021-08-18T13:41:24.000Z","_content":"springboot项目中默认的配置文件是application.properties；\n### 1.yml文件规则\n- 树状结构，结构清晰\n- 不支持tab缩进\n- 可以使用\"_\"或\"-\"消协字母代替大写字母；如userName 与user-name， user_name含义是一样的（宽松绑定原则 relaxed binding）; key: value格式书写，value前面有个空格\n\n### 2. 数据格式\n- 普通的值（数字，字符串，布尔）如：\n    ```yaml\n    port: 123      \n    name: abc      \n    flag: true\n    ```\n    字符串默认不用加上单引号或者双引号；\n  \n    \"\"：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思,name: \"zhangsan \\n lisi\"：输出；zhangsan 换行 lisi\n  \n    ''：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据,name: ‘zhangsan \\n lisi’：输出；zhangsan \\n lisi\n- 对象、Map(属性和值)如：\n    ```yaml\n    #k: v：在下一行来写对象的属性和值的关系；注意缩进(不支持tab,使用空格)\n    server:\n      port: 8123\n      tomcat:\n        uri-encoding: utf-8\n      servlet:\n        context-path: /app\n    ```\n  \n- 数组（list， set）\n    ```yaml\n    #用- 值表示数组中的一个元素\n    hands:\n        - left\n        - right\n    ```\n  \n### 3. 读取方式\n1. @Value注解\n    ```yaml\n    server:\n      port: 8081\n    ```\n    ```text\n    @Value(\"${server.port}\")\n    public String port;\n    ```\n    此处的port所在的类需要是一个组件,如果是实体类需要加上@Component\n   \n\n2. @ConfigurationProperties\n   \n   需要一个JavaBean 来专门映射配置的话,我们一般会使用@ConfigurationProperties来读取.\n   \n   使用的使用需要@EnableConfigurationProperties注解让类被springboot扫描到；\n    ```yaml\n    spring:\n      datasource:\n        druid:\n          url: jdbc:mysql://localhost:3307/app?useUnicode=yes&characterEncoding=UTF-8&useSSL=false&serverTimezone=GMT%2B8&useLegacyDatetimeCode=false\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: root\n    ```\n    ```java\n    //prefix 指定前缀\n    @ConfigurationProperties(prefix = \"spring.datasource\")\n    public class MyDataSourceProperties {\n    \n        private String type;\n        private String driverClassName;\n        private String url;\n        private String username;\n        private String password;\n        //省略getter setter方法\n    }\n    ```\n   - 前缀定义了哪些外部属性将绑定到类的字段上\n   - 根据 Spring Boot 宽松的绑定规则，类的属性名称必须与外部属性的名称匹配\n   - 我们可以简单地用一个值初始化一个字段来定义一个默认值\n   - 类本身可以是包私有的\n   - 类的字段必须有公共 setter 方法\n    \n\n   \n3. Environment\n   \n   Spring Environment bean\n    ```yaml\n    @RestController\n    @RequestMapping(\"/test\")\n    public class TestC {\n    \n        @Autowired\n        private Environment env;\n    \n        @RequestMapping(value = \"index\", method = RequestMethod.GET)\n        public String index() {\n            return \"environment : \"+ env.getProperty(\"spring.datasource.druid.url\");\n        }\n    }\n    ```","source":"_posts/springboot-yml.md","raw":"---\ntitle: springboot读取yml配置的方式\ntags: springboot\ncategories:\n  - 微服务\n  - springboot\ncomments: false\ntranslate_title: how-springboot-reads-yml-configuration\ndate: 2021-08-18 21:41:24\n---\nspringboot项目中默认的配置文件是application.properties；\n### 1.yml文件规则\n- 树状结构，结构清晰\n- 不支持tab缩进\n- 可以使用\"_\"或\"-\"消协字母代替大写字母；如userName 与user-name， user_name含义是一样的（宽松绑定原则 relaxed binding）; key: value格式书写，value前面有个空格\n\n### 2. 数据格式\n- 普通的值（数字，字符串，布尔）如：\n    ```yaml\n    port: 123      \n    name: abc      \n    flag: true\n    ```\n    字符串默认不用加上单引号或者双引号；\n  \n    \"\"：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思,name: \"zhangsan \\n lisi\"：输出；zhangsan 换行 lisi\n  \n    ''：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据,name: ‘zhangsan \\n lisi’：输出；zhangsan \\n lisi\n- 对象、Map(属性和值)如：\n    ```yaml\n    #k: v：在下一行来写对象的属性和值的关系；注意缩进(不支持tab,使用空格)\n    server:\n      port: 8123\n      tomcat:\n        uri-encoding: utf-8\n      servlet:\n        context-path: /app\n    ```\n  \n- 数组（list， set）\n    ```yaml\n    #用- 值表示数组中的一个元素\n    hands:\n        - left\n        - right\n    ```\n  \n### 3. 读取方式\n1. @Value注解\n    ```yaml\n    server:\n      port: 8081\n    ```\n    ```text\n    @Value(\"${server.port}\")\n    public String port;\n    ```\n    此处的port所在的类需要是一个组件,如果是实体类需要加上@Component\n   \n\n2. @ConfigurationProperties\n   \n   需要一个JavaBean 来专门映射配置的话,我们一般会使用@ConfigurationProperties来读取.\n   \n   使用的使用需要@EnableConfigurationProperties注解让类被springboot扫描到；\n    ```yaml\n    spring:\n      datasource:\n        druid:\n          url: jdbc:mysql://localhost:3307/app?useUnicode=yes&characterEncoding=UTF-8&useSSL=false&serverTimezone=GMT%2B8&useLegacyDatetimeCode=false\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: root\n    ```\n    ```java\n    //prefix 指定前缀\n    @ConfigurationProperties(prefix = \"spring.datasource\")\n    public class MyDataSourceProperties {\n    \n        private String type;\n        private String driverClassName;\n        private String url;\n        private String username;\n        private String password;\n        //省略getter setter方法\n    }\n    ```\n   - 前缀定义了哪些外部属性将绑定到类的字段上\n   - 根据 Spring Boot 宽松的绑定规则，类的属性名称必须与外部属性的名称匹配\n   - 我们可以简单地用一个值初始化一个字段来定义一个默认值\n   - 类本身可以是包私有的\n   - 类的字段必须有公共 setter 方法\n    \n\n   \n3. Environment\n   \n   Spring Environment bean\n    ```yaml\n    @RestController\n    @RequestMapping(\"/test\")\n    public class TestC {\n    \n        @Autowired\n        private Environment env;\n    \n        @RequestMapping(value = \"index\", method = RequestMethod.GET)\n        public String index() {\n            return \"environment : \"+ env.getProperty(\"spring.datasource.druid.url\");\n        }\n    }\n    ```","slug":"springboot-yml","published":1,"updated":"2021-08-19T00:51:57.608Z","layout":"post","photos":[],"link":"","_id":"ckslj4psp001kkw3qerdngvwf","content":"<p>springboot项目中默认的配置文件是application.properties；</p>\n<h3 id=\"1yml文件规则\"><a class=\"markdownIt-Anchor\" href=\"#1yml文件规则\"></a> 1.yml文件规则</h3>\n<ul>\n<li>树状结构，结构清晰</li>\n<li>不支持tab缩进</li>\n<li>可以使用&quot;_“或”-&quot;消协字母代替大写字母；如userName 与user-name， user_name含义是一样的（宽松绑定原则 relaxed binding）; key: value格式书写，value前面有个空格</li>\n</ul>\n<h3 id=\"2-数据格式\"><a class=\"markdownIt-Anchor\" href=\"#2-数据格式\"></a> 2. 数据格式</h3>\n<ul>\n<li>\n<p>普通的值（数字，字符串，布尔）如：</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">port:</span> <span class=\"number\">123</span>      </span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">abc</span>      </span><br><span class=\"line\"><span class=\"attr\">flag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>字符串默认不用加上单引号或者双引号；</p>\n<p>“”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思,name: “zhangsan \\n lisi”：输出；zhangsan 换行 lisi</p>\n<p>‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据,name: ‘zhangsan \\n lisi’：输出；zhangsan \\n lisi</p>\n</li>\n<li>\n<p>对象、Map(属性和值)如：</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#k: v：在下一行来写对象的属性和值的关系；注意缩进(不支持tab,使用空格)</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8123</span></span><br><span class=\"line\">  <span class=\"attr\">tomcat:</span></span><br><span class=\"line\">    <span class=\"attr\">uri-encoding:</span> <span class=\"string\">utf-8</span></span><br><span class=\"line\">  <span class=\"attr\">servlet:</span></span><br><span class=\"line\">    <span class=\"attr\">context-path:</span> <span class=\"string\">/app</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>数组（list， set）</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#用- 值表示数组中的一个元素</span></span><br><span class=\"line\"><span class=\"attr\">hands:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">left</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">right</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-读取方式\"><a class=\"markdownIt-Anchor\" href=\"#3-读取方式\"></a> 3. 读取方式</h3>\n<ol>\n<li>\n<p>@Value注解</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class=\"line\">public String port;</span><br></pre></td></tr></table></figure>\n<p>此处的port所在的类需要是一个组件,如果是实体类需要加上@Component</p>\n</li>\n<li>\n<p>@ConfigurationProperties</p>\n<p>需要一个JavaBean 来专门映射配置的话,我们一般会使用@ConfigurationProperties来读取.</p>\n<p>使用的使用需要@EnableConfigurationProperties注解让类被springboot扫描到；</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">druid:</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3307/app?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8&amp;useLegacyDatetimeCode=false</span></span><br><span class=\"line\">      <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//prefix 指定前缀</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDataSourceProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String type;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String driverClassName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"comment\">//省略getter setter方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>前缀定义了哪些外部属性将绑定到类的字段上</li>\n<li>根据 Spring Boot 宽松的绑定规则，类的属性名称必须与外部属性的名称匹配</li>\n<li>我们可以简单地用一个值初始化一个字段来定义一个默认值</li>\n<li>类本身可以是包私有的</li>\n<li>类的字段必须有公共 setter 方法</li>\n</ul>\n</li>\n<li>\n<p>Environment</p>\n<p>Spring Environment bean</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">@RestController</span></span><br><span class=\"line\"><span class=\"string\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"string\">public</span> <span class=\"string\">class</span> <span class=\"string\">TestC</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@Autowired</span></span><br><span class=\"line\">    <span class=\"string\">private</span> <span class=\"string\">Environment</span> <span class=\"string\">env;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@RequestMapping(value</span> <span class=\"string\">=</span> <span class=\"string\">&quot;index&quot;</span>, <span class=\"string\">method</span> <span class=\"string\">=</span> <span class=\"string\">RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"string\">public</span> <span class=\"string\">String</span> <span class=\"string\">index()</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">&quot;environment : &quot;</span><span class=\"string\">+</span> <span class=\"string\">env.getProperty(&quot;spring.datasource.druid.url&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>springboot项目中默认的配置文件是application.properties；</p>\n<h3 id=\"1yml文件规则\"><a class=\"markdownIt-Anchor\" href=\"#1yml文件规则\"></a> 1.yml文件规则</h3>\n<ul>\n<li>树状结构，结构清晰</li>\n<li>不支持tab缩进</li>\n<li>可以使用&quot;_“或”-&quot;消协字母代替大写字母；如userName 与user-name， user_name含义是一样的（宽松绑定原则 relaxed binding）; key: value格式书写，value前面有个空格</li>\n</ul>\n<h3 id=\"2-数据格式\"><a class=\"markdownIt-Anchor\" href=\"#2-数据格式\"></a> 2. 数据格式</h3>\n<ul>\n<li>\n<p>普通的值（数字，字符串，布尔）如：</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">port:</span> <span class=\"number\">123</span>      </span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">abc</span>      </span><br><span class=\"line\"><span class=\"attr\">flag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>字符串默认不用加上单引号或者双引号；</p>\n<p>“”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思,name: “zhangsan \\n lisi”：输出；zhangsan 换行 lisi</p>\n<p>‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据,name: ‘zhangsan \\n lisi’：输出；zhangsan \\n lisi</p>\n</li>\n<li>\n<p>对象、Map(属性和值)如：</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#k: v：在下一行来写对象的属性和值的关系；注意缩进(不支持tab,使用空格)</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8123</span></span><br><span class=\"line\">  <span class=\"attr\">tomcat:</span></span><br><span class=\"line\">    <span class=\"attr\">uri-encoding:</span> <span class=\"string\">utf-8</span></span><br><span class=\"line\">  <span class=\"attr\">servlet:</span></span><br><span class=\"line\">    <span class=\"attr\">context-path:</span> <span class=\"string\">/app</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>数组（list， set）</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#用- 值表示数组中的一个元素</span></span><br><span class=\"line\"><span class=\"attr\">hands:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">left</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">right</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-读取方式\"><a class=\"markdownIt-Anchor\" href=\"#3-读取方式\"></a> 3. 读取方式</h3>\n<ol>\n<li>\n<p>@Value注解</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class=\"line\">public String port;</span><br></pre></td></tr></table></figure>\n<p>此处的port所在的类需要是一个组件,如果是实体类需要加上@Component</p>\n</li>\n<li>\n<p>@ConfigurationProperties</p>\n<p>需要一个JavaBean 来专门映射配置的话,我们一般会使用@ConfigurationProperties来读取.</p>\n<p>使用的使用需要@EnableConfigurationProperties注解让类被springboot扫描到；</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">druid:</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3307/app?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8&amp;useLegacyDatetimeCode=false</span></span><br><span class=\"line\">      <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//prefix 指定前缀</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDataSourceProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String type;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String driverClassName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"comment\">//省略getter setter方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>前缀定义了哪些外部属性将绑定到类的字段上</li>\n<li>根据 Spring Boot 宽松的绑定规则，类的属性名称必须与外部属性的名称匹配</li>\n<li>我们可以简单地用一个值初始化一个字段来定义一个默认值</li>\n<li>类本身可以是包私有的</li>\n<li>类的字段必须有公共 setter 方法</li>\n</ul>\n</li>\n<li>\n<p>Environment</p>\n<p>Spring Environment bean</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">@RestController</span></span><br><span class=\"line\"><span class=\"string\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"string\">public</span> <span class=\"string\">class</span> <span class=\"string\">TestC</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@Autowired</span></span><br><span class=\"line\">    <span class=\"string\">private</span> <span class=\"string\">Environment</span> <span class=\"string\">env;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">@RequestMapping(value</span> <span class=\"string\">=</span> <span class=\"string\">&quot;index&quot;</span>, <span class=\"string\">method</span> <span class=\"string\">=</span> <span class=\"string\">RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"string\">public</span> <span class=\"string\">String</span> <span class=\"string\">index()</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">&quot;environment : &quot;</span><span class=\"string\">+</span> <span class=\"string\">env.getProperty(&quot;spring.datasource.druid.url&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Java守护线程和非守护线程","translate_title":"java-daemon-and-nondaemon-threads","comments":0,"date":"2021-08-15T06:14:56.000Z","_content":"用户线程：我们平常创建的普通线程。\n\n守护线程：用来服务于用户线程；不需要上层逻辑介入\n\njava线程分为守护线程和非守护线程，当java jvm检测主线程或其他子线程执行完之后，守护线程也会马上停止执行，我们可以使用Thread.setDaemon(ture或false)来设置一个线程是守护线程还是非守护线程，默认为false，可以通过Thread.isDaemon()方法查询该线程是否是守护线程\n\n守护线程是所有的用户线程结束生命周期，守护线程才会结束生命周期，只要有一个用户线程存在，那么守护线程就不会结束，例如Java中的垃圾 回收器就是一个守护线程，只有应用程序中所有的线程结束，它才会结束。\n```java\npublic class DaemonThread {\n    public static void main(String[] args) {\n        Thread thread = new Thread(DaemonThread::print);\n        thread.setDaemon(true);\n        thread.start();\n        System.out.println(\"主线程main 结束\");\n    }\n\n    public static void print() {\n        int counter = 1;\n        //写一个死循环的方法来测试\n        while (true) {\n            try {\n                System.out.println(\"Counter:\" + counter++);\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n输出：\n```text\n主线程main 结束\nCounter:1\n```\n如果我们将daemon设置为非守护线程，代码如下:\n```java\nthread.setDaemon(false);\n```\n这个时候就不会退出while(true)循环了，会一直执行下去，结果如下：\n```text\n主线程main 结束\nCounter:1\nCounter:2\nCounter:3\nCounter:4\nCounter:5\n....\n```\n\n**总结：守护线程是为用户线程服务的，当用户线程全部结束，守护线程会自动结束。**\n\n**注意事项：**\n1. thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。\n2. 在Daemon线程中产生的新线程也是Daemon的。\n3. 守护线程不能用于去访问固有资源，比如读写操作或者计算逻辑。因为它会在任何时候甚至在一个操作的中间发生中断。\n4. Java自带的多线程框架，比如ExecutorService，会将守护线程转换为用户线程，所以如果要使用后台线程就不能用Java的线程池。\n\n**意义以及应用场景:**\n\n当主线程结束时，结束其余的子线程（守护线程）自动关闭，就免去了还要继续关闭子线程的麻烦。如：Java垃圾回收线程就是一个典型的守护线程；内存资源或者线程的管理，但是非守护线程也可以。","source":"_posts/thread-01.md","raw":"---\ntitle: Java守护线程和非守护线程\ntranslate_title: java-daemon-and-nondaemon-threads\ntags: java\ncategories:\n  - java\n  - Thread\ncomments: false\ndate: 2021-08-15 14:14:56\n---\n用户线程：我们平常创建的普通线程。\n\n守护线程：用来服务于用户线程；不需要上层逻辑介入\n\njava线程分为守护线程和非守护线程，当java jvm检测主线程或其他子线程执行完之后，守护线程也会马上停止执行，我们可以使用Thread.setDaemon(ture或false)来设置一个线程是守护线程还是非守护线程，默认为false，可以通过Thread.isDaemon()方法查询该线程是否是守护线程\n\n守护线程是所有的用户线程结束生命周期，守护线程才会结束生命周期，只要有一个用户线程存在，那么守护线程就不会结束，例如Java中的垃圾 回收器就是一个守护线程，只有应用程序中所有的线程结束，它才会结束。\n```java\npublic class DaemonThread {\n    public static void main(String[] args) {\n        Thread thread = new Thread(DaemonThread::print);\n        thread.setDaemon(true);\n        thread.start();\n        System.out.println(\"主线程main 结束\");\n    }\n\n    public static void print() {\n        int counter = 1;\n        //写一个死循环的方法来测试\n        while (true) {\n            try {\n                System.out.println(\"Counter:\" + counter++);\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n输出：\n```text\n主线程main 结束\nCounter:1\n```\n如果我们将daemon设置为非守护线程，代码如下:\n```java\nthread.setDaemon(false);\n```\n这个时候就不会退出while(true)循环了，会一直执行下去，结果如下：\n```text\n主线程main 结束\nCounter:1\nCounter:2\nCounter:3\nCounter:4\nCounter:5\n....\n```\n\n**总结：守护线程是为用户线程服务的，当用户线程全部结束，守护线程会自动结束。**\n\n**注意事项：**\n1. thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。\n2. 在Daemon线程中产生的新线程也是Daemon的。\n3. 守护线程不能用于去访问固有资源，比如读写操作或者计算逻辑。因为它会在任何时候甚至在一个操作的中间发生中断。\n4. Java自带的多线程框架，比如ExecutorService，会将守护线程转换为用户线程，所以如果要使用后台线程就不能用Java的线程池。\n\n**意义以及应用场景:**\n\n当主线程结束时，结束其余的子线程（守护线程）自动关闭，就免去了还要继续关闭子线程的麻烦。如：Java垃圾回收线程就是一个典型的守护线程；内存资源或者线程的管理，但是非守护线程也可以。","slug":"thread-01","published":1,"updated":"2021-08-15T07:41:26.133Z","layout":"post","photos":[],"link":"","_id":"ckslj4psq001pkw3qdon07th5","content":"<p>用户线程：我们平常创建的普通线程。</p>\n<p>守护线程：用来服务于用户线程；不需要上层逻辑介入</p>\n<p>java线程分为守护线程和非守护线程，当java jvm检测主线程或其他子线程执行完之后，守护线程也会马上停止执行，我们可以使用Thread.setDaemon(ture或false)来设置一个线程是守护线程还是非守护线程，默认为false，可以通过Thread.isDaemon()方法查询该线程是否是守护线程</p>\n<p>守护线程是所有的用户线程结束生命周期，守护线程才会结束生命周期，只要有一个用户线程存在，那么守护线程就不会结束，例如Java中的垃圾 回收器就是一个守护线程，只有应用程序中所有的线程结束，它才会结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaemonThread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(DaemonThread::print);</span><br><span class=\"line\">        thread.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;主线程main 结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> counter = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//写一个死循环的方法来测试</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Counter:&quot;</span> + counter++);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主线程main 结束</span><br><span class=\"line\">Counter:1</span><br></pre></td></tr></table></figure>\n<p>如果我们将daemon设置为非守护线程，代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread.setDaemon(<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>这个时候就不会退出while(true)循环了，会一直执行下去，结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主线程main 结束</span><br><span class=\"line\">Counter:1</span><br><span class=\"line\">Counter:2</span><br><span class=\"line\">Counter:3</span><br><span class=\"line\">Counter:4</span><br><span class=\"line\">Counter:5</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<p><strong>总结：守护线程是为用户线程服务的，当用户线程全部结束，守护线程会自动结束。</strong></p>\n<p><strong>注意事项：</strong></p>\n<ol>\n<li>thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。</li>\n<li>在Daemon线程中产生的新线程也是Daemon的。</li>\n<li>守护线程不能用于去访问固有资源，比如读写操作或者计算逻辑。因为它会在任何时候甚至在一个操作的中间发生中断。</li>\n<li>Java自带的多线程框架，比如ExecutorService，会将守护线程转换为用户线程，所以如果要使用后台线程就不能用Java的线程池。</li>\n</ol>\n<p><strong>意义以及应用场景:</strong></p>\n<p>当主线程结束时，结束其余的子线程（守护线程）自动关闭，就免去了还要继续关闭子线程的麻烦。如：Java垃圾回收线程就是一个典型的守护线程；内存资源或者线程的管理，但是非守护线程也可以。</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>用户线程：我们平常创建的普通线程。</p>\n<p>守护线程：用来服务于用户线程；不需要上层逻辑介入</p>\n<p>java线程分为守护线程和非守护线程，当java jvm检测主线程或其他子线程执行完之后，守护线程也会马上停止执行，我们可以使用Thread.setDaemon(ture或false)来设置一个线程是守护线程还是非守护线程，默认为false，可以通过Thread.isDaemon()方法查询该线程是否是守护线程</p>\n<p>守护线程是所有的用户线程结束生命周期，守护线程才会结束生命周期，只要有一个用户线程存在，那么守护线程就不会结束，例如Java中的垃圾 回收器就是一个守护线程，只有应用程序中所有的线程结束，它才会结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaemonThread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(DaemonThread::print);</span><br><span class=\"line\">        thread.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;主线程main 结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> counter = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//写一个死循环的方法来测试</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Counter:&quot;</span> + counter++);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主线程main 结束</span><br><span class=\"line\">Counter:1</span><br></pre></td></tr></table></figure>\n<p>如果我们将daemon设置为非守护线程，代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread.setDaemon(<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>这个时候就不会退出while(true)循环了，会一直执行下去，结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主线程main 结束</span><br><span class=\"line\">Counter:1</span><br><span class=\"line\">Counter:2</span><br><span class=\"line\">Counter:3</span><br><span class=\"line\">Counter:4</span><br><span class=\"line\">Counter:5</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<p><strong>总结：守护线程是为用户线程服务的，当用户线程全部结束，守护线程会自动结束。</strong></p>\n<p><strong>注意事项：</strong></p>\n<ol>\n<li>thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。</li>\n<li>在Daemon线程中产生的新线程也是Daemon的。</li>\n<li>守护线程不能用于去访问固有资源，比如读写操作或者计算逻辑。因为它会在任何时候甚至在一个操作的中间发生中断。</li>\n<li>Java自带的多线程框架，比如ExecutorService，会将守护线程转换为用户线程，所以如果要使用后台线程就不能用Java的线程池。</li>\n</ol>\n<p><strong>意义以及应用场景:</strong></p>\n<p>当主线程结束时，结束其余的子线程（守护线程）自动关闭，就免去了还要继续关闭子线程的麻烦。如：Java垃圾回收线程就是一个典型的守护线程；内存资源或者线程的管理，但是非守护线程也可以。</p>\n"},{"title":"常见sql优化方式","comments":0,"translate_title":"common-sql-optimization-methods","date":"2021-07-01T08:00:57.000Z","_content":"1. 对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。\n\n2. 应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：    \n    ```sql\n    select id from t where num is null    \n    -- 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：    \n    select id from t where num=0\n    ```\n\n3. 应尽量避免在 where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。\n\n4. 应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：    \n    ```sql\n    select id from t where num=10 or num=20    \n    --可以这样查询：    \n    select id from t where num=10    \n    union all    \n    select id from t where num=20\n    ```\n\n5. in 和 not in 也要慎用，否则会导致全表扫描，如：    \n    ```sql\n    select id from t where num in(1,2,3)    \n    --对于连续的数值，能用 between 就不要用 in 了：    \n    select id from t where num between 1 and 3\n    ```\n\n6. 下面的查询也将导致全表扫描：\n    ```sql\n    select id from t where name like '%abc%'\n    ```\n7. 应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：    \n    ```sql\n    select id from t where num/2=100    \n    ---应改为:    \n    select id from t where num=100*2\n    ```\n\n8. 应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：    \n    ```sql\n    select id from t where substring(name,1,3)='abc'--name以abc开头的id    \n    ---应改为:    \n    select id from t where name like 'abc%'\n    ```\n\n9. 不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。\n\n10. 在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。\n\n11. 不要写一些没有意义的查询，如需要生成一个空表结构：    \n    ```sql\n    select col1,col2 into #t from t where 1=0    \n    --这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：    \n    create table #t(...)\n    ```\n\n12. 很多时候用 exists 代替 in 是一个好的选择：    \n    ```sql\n    select num from a where num in(select num from b)    \n    --用下面的语句替换：    \n    select num from a where exists(select 1 from b where num=a.num)\n    ```\n\n13. 并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。\n\n14. 索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。    \n一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。\n\n15. 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。    \n这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。\n\n16. 尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。\n\n17. 任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。\n\n18. 避免频繁创建和删除临时表，以减少系统表资源的消耗。\n\n19. 临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。\n\n20. 在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。\n\n21. 如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。\n\n22. 尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。\n\n23. 使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。\n\n24. 与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。\n在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。\n\n25. 尽量避免大事务操作，提高系统并发能力。\n\n26. 尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。","source":"_posts/sql-01.md","raw":"---\ntitle: 常见sql优化方式\ntags: mysql\ncategories:\n  - 数据库\n  - mysql\ncomments: false\ntranslate_title: common-sql-optimization-methods\ndate: 2021-07-01 16:00:57\n---\n1. 对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。\n\n2. 应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：    \n    ```sql\n    select id from t where num is null    \n    -- 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：    \n    select id from t where num=0\n    ```\n\n3. 应尽量避免在 where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。\n\n4. 应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：    \n    ```sql\n    select id from t where num=10 or num=20    \n    --可以这样查询：    \n    select id from t where num=10    \n    union all    \n    select id from t where num=20\n    ```\n\n5. in 和 not in 也要慎用，否则会导致全表扫描，如：    \n    ```sql\n    select id from t where num in(1,2,3)    \n    --对于连续的数值，能用 between 就不要用 in 了：    \n    select id from t where num between 1 and 3\n    ```\n\n6. 下面的查询也将导致全表扫描：\n    ```sql\n    select id from t where name like '%abc%'\n    ```\n7. 应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：    \n    ```sql\n    select id from t where num/2=100    \n    ---应改为:    \n    select id from t where num=100*2\n    ```\n\n8. 应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：    \n    ```sql\n    select id from t where substring(name,1,3)='abc'--name以abc开头的id    \n    ---应改为:    \n    select id from t where name like 'abc%'\n    ```\n\n9. 不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。\n\n10. 在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。\n\n11. 不要写一些没有意义的查询，如需要生成一个空表结构：    \n    ```sql\n    select col1,col2 into #t from t where 1=0    \n    --这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：    \n    create table #t(...)\n    ```\n\n12. 很多时候用 exists 代替 in 是一个好的选择：    \n    ```sql\n    select num from a where num in(select num from b)    \n    --用下面的语句替换：    \n    select num from a where exists(select 1 from b where num=a.num)\n    ```\n\n13. 并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。\n\n14. 索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。    \n一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。\n\n15. 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。    \n这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。\n\n16. 尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。\n\n17. 任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。\n\n18. 避免频繁创建和删除临时表，以减少系统表资源的消耗。\n\n19. 临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。\n\n20. 在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。\n\n21. 如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。\n\n22. 尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。\n\n23. 使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。\n\n24. 与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。\n在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。\n\n25. 尽量避免大事务操作，提高系统并发能力。\n\n26. 尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。","slug":"sql-01","published":1,"updated":"2021-08-15T07:41:26.133Z","layout":"post","photos":[],"link":"","_id":"ckslj4psr001skw3q2li17hqp","content":"<ol>\n<li>\n<p>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>\n</li>\n<li>\n<p>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">is</span> <span class=\"keyword\">null</span>    </span><br><span class=\"line\"><span class=\"comment\">-- 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p>\n</li>\n<li>\n<p>应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">or</span> num<span class=\"operator\">=</span><span class=\"number\">20</span>    </span><br><span class=\"line\"><span class=\"comment\">--可以这样查询：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">10</span>    </span><br><span class=\"line\"><span class=\"keyword\">union</span> <span class=\"keyword\">all</span>    </span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>in 和 not in 也要慎用，否则会导致全表扫描，如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">in</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)    </span><br><span class=\"line\"><span class=\"comment\">--对于连续的数值，能用 between 就不要用 in 了：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">between</span> <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>下面的查询也将导致全表扫描：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%abc%&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">/</span><span class=\"number\">2</span><span class=\"operator\">=</span><span class=\"number\">100</span>    </span><br><span class=\"line\"><span class=\"comment\">---应改为:    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">100</span><span class=\"operator\">*</span><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> <span class=\"built_in\">substring</span>(name,<span class=\"number\">1</span>,<span class=\"number\">3</span>)<span class=\"operator\">=</span><span class=\"string\">&#x27;abc&#x27;</span><span class=\"comment\">--name以abc开头的id    </span></span><br><span class=\"line\"><span class=\"comment\">---应改为:    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;abc%&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p>\n</li>\n<li>\n<p>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p>\n</li>\n<li>\n<p>不要写一些没有意义的查询，如需要生成一个空表结构：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> col1,col2 <span class=\"keyword\">into</span> #t <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">0</span>    </span><br><span class=\"line\"><span class=\"comment\">--这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：    </span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> #t(...)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>很多时候用 exists 代替 in 是一个好的选择：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> a <span class=\"keyword\">where</span> num <span class=\"keyword\">in</span>(<span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> b)    </span><br><span class=\"line\"><span class=\"comment\">--用下面的语句替换：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> a <span class=\"keyword\">where</span> <span class=\"keyword\">exists</span>(<span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> b <span class=\"keyword\">where</span> num<span class=\"operator\">=</span>a.num)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p>\n</li>\n<li>\n<p>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。<br>\n一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p>\n</li>\n<li>\n<p>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。<br>\n这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p>\n</li>\n<li>\n<p>尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>\n</li>\n<li>\n<p>任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</p>\n</li>\n<li>\n<p>避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>\n</li>\n<li>\n<p>临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p>\n</li>\n<li>\n<p>在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>\n</li>\n<li>\n<p>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p>\n</li>\n<li>\n<p>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p>\n</li>\n<li>\n<p>使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>\n</li>\n<li>\n<p>与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。<br>\n在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p>\n</li>\n<li>\n<p>尽量避免大事务操作，提高系统并发能力。</p>\n</li>\n<li>\n<p>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>\n</li>\n</ol>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<ol>\n<li>\n<p>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>\n</li>\n<li>\n<p>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">is</span> <span class=\"keyword\">null</span>    </span><br><span class=\"line\"><span class=\"comment\">-- 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p>\n</li>\n<li>\n<p>应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">10</span> <span class=\"keyword\">or</span> num<span class=\"operator\">=</span><span class=\"number\">20</span>    </span><br><span class=\"line\"><span class=\"comment\">--可以这样查询：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">10</span>    </span><br><span class=\"line\"><span class=\"keyword\">union</span> <span class=\"keyword\">all</span>    </span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>in 和 not in 也要慎用，否则会导致全表扫描，如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">in</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)    </span><br><span class=\"line\"><span class=\"comment\">--对于连续的数值，能用 between 就不要用 in 了：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num <span class=\"keyword\">between</span> <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>下面的查询也将导致全表扫描：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%abc%&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">/</span><span class=\"number\">2</span><span class=\"operator\">=</span><span class=\"number\">100</span>    </span><br><span class=\"line\"><span class=\"comment\">---应改为:    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> num<span class=\"operator\">=</span><span class=\"number\">100</span><span class=\"operator\">*</span><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> <span class=\"built_in\">substring</span>(name,<span class=\"number\">1</span>,<span class=\"number\">3</span>)<span class=\"operator\">=</span><span class=\"string\">&#x27;abc&#x27;</span><span class=\"comment\">--name以abc开头的id    </span></span><br><span class=\"line\"><span class=\"comment\">---应改为:    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> name <span class=\"keyword\">like</span> <span class=\"string\">&#x27;abc%&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p>\n</li>\n<li>\n<p>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p>\n</li>\n<li>\n<p>不要写一些没有意义的查询，如需要生成一个空表结构：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> col1,col2 <span class=\"keyword\">into</span> #t <span class=\"keyword\">from</span> t <span class=\"keyword\">where</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">0</span>    </span><br><span class=\"line\"><span class=\"comment\">--这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：    </span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> #t(...)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>很多时候用 exists 代替 in 是一个好的选择：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> a <span class=\"keyword\">where</span> num <span class=\"keyword\">in</span>(<span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> b)    </span><br><span class=\"line\"><span class=\"comment\">--用下面的语句替换：    </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> num <span class=\"keyword\">from</span> a <span class=\"keyword\">where</span> <span class=\"keyword\">exists</span>(<span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> b <span class=\"keyword\">where</span> num<span class=\"operator\">=</span>a.num)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p>\n</li>\n<li>\n<p>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。<br>\n一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p>\n</li>\n<li>\n<p>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。<br>\n这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p>\n</li>\n<li>\n<p>尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>\n</li>\n<li>\n<p>任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</p>\n</li>\n<li>\n<p>避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>\n</li>\n<li>\n<p>临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p>\n</li>\n<li>\n<p>在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>\n</li>\n<li>\n<p>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p>\n</li>\n<li>\n<p>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p>\n</li>\n<li>\n<p>使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>\n</li>\n<li>\n<p>与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。<br>\n在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p>\n</li>\n<li>\n<p>尽量避免大事务操作，提高系统并发能力。</p>\n</li>\n<li>\n<p>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>\n</li>\n</ol>\n"},{"title":"Java线程的声明周期状态","comments":0,"translate_title":"the-life-cycle-status-of-a-java-thread","date":"2020-06-02T08:04:02.000Z","_content":"![线程的状态](./thread-status/01.jpg)\n1. **新建(NEW)**：新创建了一个线程对象。\n\n2. **可运行(RUNNABLE)**：线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu 的使用权 。\n\n3. **运行(RUNNING)**：可运行状态(runnable)的线程获得了cpu 时间片（timeslice） ，执行程序代码。\n4. **阻塞(BLOCKED)**：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种： \n   - **等待阻塞**：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。\n   - **同步阻塞**：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。\n   - **其他阻塞**：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。\n5. **死亡(DEAD)**：线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生。\n\n","source":"_posts/thread-status.md","raw":"---\ntitle: Java线程的声明周期状态\ntags: java\ncategories:\n  - java\n  - Thread\ncomments: false\ntranslate_title: the-life-cycle-status-of-a-java-thread\ndate: 2020-06-02 16:04:02\n---\n![线程的状态](./thread-status/01.jpg)\n1. **新建(NEW)**：新创建了一个线程对象。\n\n2. **可运行(RUNNABLE)**：线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu 的使用权 。\n\n3. **运行(RUNNING)**：可运行状态(runnable)的线程获得了cpu 时间片（timeslice） ，执行程序代码。\n4. **阻塞(BLOCKED)**：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种： \n   - **等待阻塞**：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。\n   - **同步阻塞**：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。\n   - **其他阻塞**：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。\n5. **死亡(DEAD)**：线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生。\n\n","slug":"thread-status","published":1,"updated":"2021-08-15T07:41:26.134Z","layout":"post","photos":[],"link":"","_id":"ckslj4pss001wkw3qdzp395va","content":"<p><img src=\"/2020/06/02/thread-status/01.jpg\" alt=\"线程的状态\"></p>\n<ol>\n<li>\n<p><strong>新建(NEW)</strong>：新创建了一个线程对象。</p>\n</li>\n<li>\n<p><strong>可运行(RUNNABLE)</strong>：线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu 的使用权 。</p>\n</li>\n<li>\n<p><strong>运行(RUNNING)</strong>：可运行状态(runnable)的线程获得了cpu 时间片（timeslice） ，执行程序代码。</p>\n</li>\n<li>\n<p><strong>阻塞(BLOCKED)</strong>：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种：</p>\n<ul>\n<li><strong>等待阻塞</strong>：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。</li>\n<li><strong>同步阻塞</strong>：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。</li>\n<li><strong>其他阻塞</strong>：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。</li>\n</ul>\n</li>\n<li>\n<p><strong>死亡(DEAD)</strong>：线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生。</p>\n</li>\n</ol>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p><img src=\"/2020/06/02/thread-status/01.jpg\" alt=\"线程的状态\"></p>\n<ol>\n<li>\n<p><strong>新建(NEW)</strong>：新创建了一个线程对象。</p>\n</li>\n<li>\n<p><strong>可运行(RUNNABLE)</strong>：线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu 的使用权 。</p>\n</li>\n<li>\n<p><strong>运行(RUNNING)</strong>：可运行状态(runnable)的线程获得了cpu 时间片（timeslice） ，执行程序代码。</p>\n</li>\n<li>\n<p><strong>阻塞(BLOCKED)</strong>：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种：</p>\n<ul>\n<li><strong>等待阻塞</strong>：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。</li>\n<li><strong>同步阻塞</strong>：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。</li>\n<li><strong>其他阻塞</strong>：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。</li>\n</ul>\n</li>\n<li>\n<p><strong>死亡(DEAD)</strong>：线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生。</p>\n</li>\n</ol>\n"},{"title":"volatile关键字","comments":0,"translate_title":"volatile-keyword","date":"2021-08-02T10:20:38.000Z","_content":"## 1.volatile作用\n  volatile保证有序性，可见性，不能保证原子性\n  \n1. 禁止指令重排\n2. 保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量值，这个新值对其他线程立即可见的\n3. 不能保证原子性(线程不安全)\n\n## 2. 实现原理\n1. 通过插入内存屏障指令禁止编译器和CPU对程序进行重排序。\n2. 当对声明了volatile的变量进行写操作时，JVM就会向处理器发送一条Lock前缀的指令，这条Lock前缀指令产生如下两个作用：\n    - Lock前缀指令会引起处理器缓存回写到系统内存，并使用缓存一致性机制来确保回写的原子性。\n    - 一个处理器的缓存回写到系统内存会导致其他处理器的缓存无效。处理器使用MESI控制协议去维护内部缓存和其他处理器缓存的一致性。处理器能嗅探其他处理器访问系统内存和它们的内部缓存。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。例如，在Pentium和P6 family处理器中，如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充\n## 3.synchronized与volatile比较\n1. volatile关键字是线程同步的轻量级实现，性能较synchronized好；但是volatile关键字只能用于变量，而synchronized关键字可以修饰方法以及代码块\n2. synchronized关键字在java1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其他各种优化之后执行效率有了显著的提升；\n3. 多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞\n4. volatile关键字保证数据的可见性，但是不能保证数据的原子性；synchronized关键字两者都能保证（synchronized保证原子性，有序性，可见性）\n5. volatile关键字主要用于解决变量在多个线程之间的可见性，而synchronized关键字解决的是多个线程之间访问资源的同步性。\n6. synchronized是同步锁，同步快内的代码相当于同一时刻单线程执行\n   \n## 4. 可见性问题\nJava虚拟机规范中定义了一种Java内存 模型（Java Memory Model，即JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的并发效果。Java内存模型的主要目标就是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的细节。\n\nJMM中规定所有的变量都存储在主内存（Main Memory）中，每条线程都有自己的工作内存（Work Memory），线程的工作内存中保存了该线程所使用的变量的从主内存中拷贝的副本。线程对于变量的读、写都必须在工作内存中进行，而不能直接读、写主内存中的变量。同时，本线程的工作内存的变量也无法被其他线程直接访问，必须通过主内存完成\n整体内存模型如下：\n![image-20201210103251475](./volatile/01.png)\n\n### 4.1 synchronized\nsynchronized关键字的语义JMM（Java Main Memory）有两个规定，保证其实现内存可见性：\n    - **线程解锁前，必须把共享变量的最新值刷新到主内存中**\n    - **线程加锁前，将清空工作内存中共享变量的值，从主内存中重新取值**\n    \n### 4.2 volatile\n- 当对volatile变量执行写操作后，JMM会把工作内存中的最新变量值强制刷新到主内存\n- 写操作会导致其他线程中的缓存无效\n这样，其他线程使用缓存时，发现本地工作内存中此变量无效，便从主内存中获取，这样获取到的变量便是最新的值，实现了线程的可见性。","source":"_posts/volatile.md","raw":"---\ntitle: volatile关键字\ntags: 面试\ncategories:\n  - java\n  - 面试\ncomments: false\ntranslate_title: volatile-keyword\ndate: 2021-08-02 18:20:38\n---\n## 1.volatile作用\n  volatile保证有序性，可见性，不能保证原子性\n  \n1. 禁止指令重排\n2. 保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量值，这个新值对其他线程立即可见的\n3. 不能保证原子性(线程不安全)\n\n## 2. 实现原理\n1. 通过插入内存屏障指令禁止编译器和CPU对程序进行重排序。\n2. 当对声明了volatile的变量进行写操作时，JVM就会向处理器发送一条Lock前缀的指令，这条Lock前缀指令产生如下两个作用：\n    - Lock前缀指令会引起处理器缓存回写到系统内存，并使用缓存一致性机制来确保回写的原子性。\n    - 一个处理器的缓存回写到系统内存会导致其他处理器的缓存无效。处理器使用MESI控制协议去维护内部缓存和其他处理器缓存的一致性。处理器能嗅探其他处理器访问系统内存和它们的内部缓存。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。例如，在Pentium和P6 family处理器中，如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充\n## 3.synchronized与volatile比较\n1. volatile关键字是线程同步的轻量级实现，性能较synchronized好；但是volatile关键字只能用于变量，而synchronized关键字可以修饰方法以及代码块\n2. synchronized关键字在java1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其他各种优化之后执行效率有了显著的提升；\n3. 多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞\n4. volatile关键字保证数据的可见性，但是不能保证数据的原子性；synchronized关键字两者都能保证（synchronized保证原子性，有序性，可见性）\n5. volatile关键字主要用于解决变量在多个线程之间的可见性，而synchronized关键字解决的是多个线程之间访问资源的同步性。\n6. synchronized是同步锁，同步快内的代码相当于同一时刻单线程执行\n   \n## 4. 可见性问题\nJava虚拟机规范中定义了一种Java内存 模型（Java Memory Model，即JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的并发效果。Java内存模型的主要目标就是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的细节。\n\nJMM中规定所有的变量都存储在主内存（Main Memory）中，每条线程都有自己的工作内存（Work Memory），线程的工作内存中保存了该线程所使用的变量的从主内存中拷贝的副本。线程对于变量的读、写都必须在工作内存中进行，而不能直接读、写主内存中的变量。同时，本线程的工作内存的变量也无法被其他线程直接访问，必须通过主内存完成\n整体内存模型如下：\n![image-20201210103251475](./volatile/01.png)\n\n### 4.1 synchronized\nsynchronized关键字的语义JMM（Java Main Memory）有两个规定，保证其实现内存可见性：\n    - **线程解锁前，必须把共享变量的最新值刷新到主内存中**\n    - **线程加锁前，将清空工作内存中共享变量的值，从主内存中重新取值**\n    \n### 4.2 volatile\n- 当对volatile变量执行写操作后，JMM会把工作内存中的最新变量值强制刷新到主内存\n- 写操作会导致其他线程中的缓存无效\n这样，其他线程使用缓存时，发现本地工作内存中此变量无效，便从主内存中获取，这样获取到的变量便是最新的值，实现了线程的可见性。","slug":"volatile","published":1,"updated":"2021-08-15T07:41:26.134Z","layout":"post","photos":[],"link":"","_id":"ckslj4pss0020kw3qchro7d6w","content":"<h2 id=\"1volatile作用\"><a class=\"markdownIt-Anchor\" href=\"#1volatile作用\"></a> 1.volatile作用</h2>\n<p>volatile保证有序性，可见性，不能保证原子性</p>\n<ol>\n<li>禁止指令重排</li>\n<li>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量值，这个新值对其他线程立即可见的</li>\n<li>不能保证原子性(线程不安全)</li>\n</ol>\n<h2 id=\"2-实现原理\"><a class=\"markdownIt-Anchor\" href=\"#2-实现原理\"></a> 2. 实现原理</h2>\n<ol>\n<li>通过插入内存屏障指令禁止编译器和CPU对程序进行重排序。</li>\n<li>当对声明了volatile的变量进行写操作时，JVM就会向处理器发送一条Lock前缀的指令，这条Lock前缀指令产生如下两个作用：\n<ul>\n<li>Lock前缀指令会引起处理器缓存回写到系统内存，并使用缓存一致性机制来确保回写的原子性。</li>\n<li>一个处理器的缓存回写到系统内存会导致其他处理器的缓存无效。处理器使用MESI控制协议去维护内部缓存和其他处理器缓存的一致性。处理器能嗅探其他处理器访问系统内存和它们的内部缓存。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。例如，在Pentium和P6 family处理器中，如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"3synchronized与volatile比较\"><a class=\"markdownIt-Anchor\" href=\"#3synchronized与volatile比较\"></a> 3.synchronized与volatile比较</h2>\n<ol>\n<li>volatile关键字是线程同步的轻量级实现，性能较synchronized好；但是volatile关键字只能用于变量，而synchronized关键字可以修饰方法以及代码块</li>\n<li>synchronized关键字在java1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其他各种优化之后执行效率有了显著的提升；</li>\n<li>多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞</li>\n<li>volatile关键字保证数据的可见性，但是不能保证数据的原子性；synchronized关键字两者都能保证（synchronized保证原子性，有序性，可见性）</li>\n<li>volatile关键字主要用于解决变量在多个线程之间的可见性，而synchronized关键字解决的是多个线程之间访问资源的同步性。</li>\n<li>synchronized是同步锁，同步快内的代码相当于同一时刻单线程执行</li>\n</ol>\n<h2 id=\"4-可见性问题\"><a class=\"markdownIt-Anchor\" href=\"#4-可见性问题\"></a> 4. 可见性问题</h2>\n<p>Java虚拟机规范中定义了一种Java内存 模型（Java Memory Model，即JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的并发效果。Java内存模型的主要目标就是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的细节。</p>\n<p>JMM中规定所有的变量都存储在主内存（Main Memory）中，每条线程都有自己的工作内存（Work Memory），线程的工作内存中保存了该线程所使用的变量的从主内存中拷贝的副本。线程对于变量的读、写都必须在工作内存中进行，而不能直接读、写主内存中的变量。同时，本线程的工作内存的变量也无法被其他线程直接访问，必须通过主内存完成<br>\n整体内存模型如下：<br>\n<img src=\"/2021/08/02/volatile/01.png\" alt=\"image-20201210103251475\"></p>\n<h3 id=\"41-synchronized\"><a class=\"markdownIt-Anchor\" href=\"#41-synchronized\"></a> 4.1 synchronized</h3>\n<p>synchronized关键字的语义JMM（Java Main Memory）有两个规定，保证其实现内存可见性：<br>\n- <strong>线程解锁前，必须把共享变量的最新值刷新到主内存中</strong><br>\n- <strong>线程加锁前，将清空工作内存中共享变量的值，从主内存中重新取值</strong></p>\n<h3 id=\"42-volatile\"><a class=\"markdownIt-Anchor\" href=\"#42-volatile\"></a> 4.2 volatile</h3>\n<ul>\n<li>当对volatile变量执行写操作后，JMM会把工作内存中的最新变量值强制刷新到主内存</li>\n<li>写操作会导致其他线程中的缓存无效<br>\n这样，其他线程使用缓存时，发现本地工作内存中此变量无效，便从主内存中获取，这样获取到的变量便是最新的值，实现了线程的可见性。</li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"1volatile作用\"><a class=\"markdownIt-Anchor\" href=\"#1volatile作用\"></a> 1.volatile作用</h2>\n<p>volatile保证有序性，可见性，不能保证原子性</p>\n<ol>\n<li>禁止指令重排</li>\n<li>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量值，这个新值对其他线程立即可见的</li>\n<li>不能保证原子性(线程不安全)</li>\n</ol>\n<h2 id=\"2-实现原理\"><a class=\"markdownIt-Anchor\" href=\"#2-实现原理\"></a> 2. 实现原理</h2>\n<ol>\n<li>通过插入内存屏障指令禁止编译器和CPU对程序进行重排序。</li>\n<li>当对声明了volatile的变量进行写操作时，JVM就会向处理器发送一条Lock前缀的指令，这条Lock前缀指令产生如下两个作用：\n<ul>\n<li>Lock前缀指令会引起处理器缓存回写到系统内存，并使用缓存一致性机制来确保回写的原子性。</li>\n<li>一个处理器的缓存回写到系统内存会导致其他处理器的缓存无效。处理器使用MESI控制协议去维护内部缓存和其他处理器缓存的一致性。处理器能嗅探其他处理器访问系统内存和它们的内部缓存。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。例如，在Pentium和P6 family处理器中，如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"3synchronized与volatile比较\"><a class=\"markdownIt-Anchor\" href=\"#3synchronized与volatile比较\"></a> 3.synchronized与volatile比较</h2>\n<ol>\n<li>volatile关键字是线程同步的轻量级实现，性能较synchronized好；但是volatile关键字只能用于变量，而synchronized关键字可以修饰方法以及代码块</li>\n<li>synchronized关键字在java1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其他各种优化之后执行效率有了显著的提升；</li>\n<li>多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞</li>\n<li>volatile关键字保证数据的可见性，但是不能保证数据的原子性；synchronized关键字两者都能保证（synchronized保证原子性，有序性，可见性）</li>\n<li>volatile关键字主要用于解决变量在多个线程之间的可见性，而synchronized关键字解决的是多个线程之间访问资源的同步性。</li>\n<li>synchronized是同步锁，同步快内的代码相当于同一时刻单线程执行</li>\n</ol>\n<h2 id=\"4-可见性问题\"><a class=\"markdownIt-Anchor\" href=\"#4-可见性问题\"></a> 4. 可见性问题</h2>\n<p>Java虚拟机规范中定义了一种Java内存 模型（Java Memory Model，即JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的并发效果。Java内存模型的主要目标就是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的细节。</p>\n<p>JMM中规定所有的变量都存储在主内存（Main Memory）中，每条线程都有自己的工作内存（Work Memory），线程的工作内存中保存了该线程所使用的变量的从主内存中拷贝的副本。线程对于变量的读、写都必须在工作内存中进行，而不能直接读、写主内存中的变量。同时，本线程的工作内存的变量也无法被其他线程直接访问，必须通过主内存完成<br>\n整体内存模型如下：<br>\n<img src=\"/2021/08/02/volatile/01.png\" alt=\"image-20201210103251475\"></p>\n<h3 id=\"41-synchronized\"><a class=\"markdownIt-Anchor\" href=\"#41-synchronized\"></a> 4.1 synchronized</h3>\n<p>synchronized关键字的语义JMM（Java Main Memory）有两个规定，保证其实现内存可见性：<br>\n- <strong>线程解锁前，必须把共享变量的最新值刷新到主内存中</strong><br>\n- <strong>线程加锁前，将清空工作内存中共享变量的值，从主内存中重新取值</strong></p>\n<h3 id=\"42-volatile\"><a class=\"markdownIt-Anchor\" href=\"#42-volatile\"></a> 4.2 volatile</h3>\n<ul>\n<li>当对volatile变量执行写操作后，JMM会把工作内存中的最新变量值强制刷新到主内存</li>\n<li>写操作会导致其他线程中的缓存无效<br>\n这样，其他线程使用缓存时，发现本地工作内存中此变量无效，便从主内存中获取，这样获取到的变量便是最新的值，实现了线程的可见性。</li>\n</ul>\n"},{"title":"在线修改静态文件","comments":0,"translate_title":"modify-static-files-online","date":"2021-05-13T05:40:44.000Z","_content":"项目运行时，如果需要修改某个css、js、html等文件的时候，需要自己连接到服务器然后修改，更有甚者需要连接vpn、堡垒机等等，特别烦！！！！于是弄了一个在线修改静态文件的工具，在此记录一下。\n#### 1. 引入pom\n\n```xml\n<dependency>\n  \t<groupId>com.github.xiaoyuge5201</groupId>\n  \t<artifactId>static-file-modify-online</artifactId>\n  \t<version>1.2.1</version>\n</dependency>\n```\n#### 2. 添加前后台代码\n前台使用的是thymeleaf，根据自己项目的实际情况修改！\n```txt\n链接: https://pan.baidu.com/s/1oW38vpj74yKOOtbu5xGCOQ  \n密码: tcmg\n```","source":"_posts/在线修改静态文件.md","raw":"---\ntitle: 在线修改静态文件\ntags: 工具\ncategories: 自定义工具\ncomments: false\ntranslate_title: modify-static-files-online\ndate: 2021-05-13 13:40:44\n---\n项目运行时，如果需要修改某个css、js、html等文件的时候，需要自己连接到服务器然后修改，更有甚者需要连接vpn、堡垒机等等，特别烦！！！！于是弄了一个在线修改静态文件的工具，在此记录一下。\n#### 1. 引入pom\n\n```xml\n<dependency>\n  \t<groupId>com.github.xiaoyuge5201</groupId>\n  \t<artifactId>static-file-modify-online</artifactId>\n  \t<version>1.2.1</version>\n</dependency>\n```\n#### 2. 添加前后台代码\n前台使用的是thymeleaf，根据自己项目的实际情况修改！\n```txt\n链接: https://pan.baidu.com/s/1oW38vpj74yKOOtbu5xGCOQ  \n密码: tcmg\n```","slug":"在线修改静态文件","published":1,"updated":"2021-08-15T07:41:26.135Z","layout":"post","photos":[],"link":"","_id":"ckslj4pst0023kw3q2zycauzk","content":"<p>项目运行时，如果需要修改某个css、js、html等文件的时候，需要自己连接到服务器然后修改，更有甚者需要连接vpn、堡垒机等等，特别烦！！！！于是弄了一个在线修改静态文件的工具，在此记录一下。</p>\n<h4 id=\"1-引入pom\"><a class=\"markdownIt-Anchor\" href=\"#1-引入pom\"></a> 1. 引入pom</h4>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.xiaoyuge5201<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>static-file-modify-online<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-添加前后台代码\"><a class=\"markdownIt-Anchor\" href=\"#2-添加前后台代码\"></a> 2. 添加前后台代码</h4>\n<p>前台使用的是thymeleaf，根据自己项目的实际情况修改！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">链接: https://pan.baidu.com/s/1oW38vpj74yKOOtbu5xGCOQ  </span><br><span class=\"line\">密码: tcmg</span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>项目运行时，如果需要修改某个css、js、html等文件的时候，需要自己连接到服务器然后修改，更有甚者需要连接vpn、堡垒机等等，特别烦！！！！于是弄了一个在线修改静态文件的工具，在此记录一下。</p>\n<h4 id=\"1-引入pom\"><a class=\"markdownIt-Anchor\" href=\"#1-引入pom\"></a> 1. 引入pom</h4>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.xiaoyuge5201<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>static-file-modify-online<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-添加前后台代码\"><a class=\"markdownIt-Anchor\" href=\"#2-添加前后台代码\"></a> 2. 添加前后台代码</h4>\n<p>前台使用的是thymeleaf，根据自己项目的实际情况修改！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">链接: https://pan.baidu.com/s/1oW38vpj74yKOOtbu5xGCOQ  </span><br><span class=\"line\">密码: tcmg</span><br></pre></td></tr></table></figure>"},{"title":"mycat学习","comments":0,"translate_title":"mycat-learning","date":"2021-07-23T08:16:49.000Z","_content":"# Mycat(分库分表中间件)\n\n## 1. 数据库优化策略\n\n1.  重启：释放资源\n2.  SQL与索引\n3.  表与存储引擎（字段类型选择，长度设置，是否需要分表、分区）\n4.  数据库与应用架构（考虑使用缓存服务器，减轻是数据库压力；可以数据库分布式，读写分离，主从复制）\n5.  数据库与操作系统配置（修改mysql配置，使用单独服务器部署数据库）\n6.  硬件\n\n## 2. 数据库演化\n\n根据业务需要、数据量变化，随之而来的数据库的变化\n\n1.  数据库与应用部署在同一台服务器\n![mycat](./mycat/image-20201104204430049.png)\n2.  单体应用架构，单数据库（数据库服务器和应用服务器分离，但是业务系统越做越大）\n    ![mycat](./mycat/image-20201104204624925.png)\n\n3.  多应用单数据库（应用解耦）\n    ![mycat](./mycat/image-20201104204933409.png)\n\n4.  多应用 独立数据库\n    ![mycat](./mycat/image-20201104205054233.png)\n\n5.  但应用多数据库(分表)\n    ![mycat](./mycat/image-20201104205319372.png)\n\n## 3. 如何分库分表\n![mycat](./mycat/image-20201104205653611.png)\n\n-   垂直切分\n\n    -   单库\n        ![mycat](./mycat/image-20201104205756827.png)\n\n    -   多库\n        ![mycat](./mycat/image-20201104210008624.png)\n\n-   水平切分\n\n    -   按照月分表或者分成实时、历史表等\n        ![mycat](./mycat/image-20201104210117373.png)\n\n    -   分成多库\n        ![mycat](./mycat/image-20201104210416994.png)\n\n## 4. 分库分表带来的问题\n\n1.  跨库关联查询\n\n    -   增加冗余字段（违反了第三范式：表中的所有数据元素不但要能唯一地被主关键字所标识,而且它们之间还必须相互独立,不存在其他的函数关系）\n    -   跨数据库的同步（canal、Mq（最好）、ETL、kettle、ogg）(在某个库中同步其他数据库中表的数据，避免跨库关联查询)\n    -   全局表(广播表)：比如行政区划表，所有的系统都是一样的；\n    -   API\n\n2.  分布式事务\n\n    -   Local\n\n3.  排序、翻页、函数计算\n\n    -\n\n4.  全局主键\n\n    -   雪花算法leaf\n    -   redis(int 类型可以设置incby)\n    -   ZookKeeper\n    -   uuid(数据过长， 影响索引存储)\n\n5.  多数据源连接（动态数据源）\n    ![mycat](./mycat/image-20201104213343204.png)\n\n## 5. Mycat分库分表中间件\n\n**官网地址**：http://www.mycat.org.cn/\n\n从阿里cobar升级而来，完全实现了mysql协议，可以当作一个mysql数据库来使用，通过JDBC支持其他数据库实现分库分表，解决了**多表join、分布式事务、全局序列号、翻页查询、函数计算**的问题\n\n*   一个彻底开源的，面向企业应用开发的大数据库集群\n*   支持事务、ACID、可以替代MySQL的加强版数据库\n*   一个可以视为MySQL集群的企业级数据库，用来替代昂贵的Oracle集群\n*   一个融合内存缓存技术、NoSQL技术、HDFS大数据的新型SQL Server\n*   结合传统数据库和新型分布式数据仓库的新一代企业级数据库产品\n*   一个新颖的数据库中间件产品\n\n华为云的DDM其实也是根据mycat做的\n\n### 5.1 核心概念\n\n![image-20201104215015366](./mycat/image-20201104215015366.png)\n\n### 5.2 Mycat安装与配置\n\n#### 5.2.1 Mycat安装\n\n从官网下载安装版本，解压到文件(官网建议安装在/usr/local/Mycat)后页面如下图所示：\n![image-20201127094703483](./mycat/image-20201127094703483.png)\n\n目录解释如下：\n\n- **bin：**存放window版和linux版本除了提供封装成服务的版本之外，也提供了nowrap的shell脚本命令，方便选择和修改；Linux下运行:./mycat console， 首先要chmod + x*;(mycat支持的命令console、start、stop、restart、status、dump)\n- **conf：**server.xml是mycat服务器参数调整和用户授权的配置文件，schema.xml是逻辑库定义和表以及分片定义的配置文件，rule.xml是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改，需要重启mycat或者通过9066端口reload\n- **lib:**主要存放mycat依赖的一些jar文件\n- **logs:**日志存放在mycat.log中，每天一个文件，日志的配置是在conf/log4j.xml中，根据自己的需要，可以调整输出级别为debug，方便排查问题；注意Linux下部署安装mysql，默认不忽略，需要手动到/etc/my.cnf下配置**lower_case_table_names=1**使Linux环境下MySQL忽略表明大小写，否则使用mycat的时候会提示找不到表的错误\n\n#### 5.2.2 服务启动与配置\n\nMycat在Linux中部署启动时，首先需要在Linux系统的环境变量中配置MYCAT_HOE,操作方式如下：\n\n1. vi /etc/profile，在系统环境变量文件中增加MYCAT_HOME=/usr/lib/tools/mycat\n   ![image-20201127103212598](./mycat/image-20201127103212598.png)\n\n2. 执行 source/etc/profile命令，使环境变量生效。如果是多台Linux系统中组件Mycat集群，那需要在mycat Server所在的服务器配置对其他ip和主机名的映射，配置方式如下：\n   ![image-20201127104159580](./mycat/image-20201127104159580.png)\n\n   经过以上两个步骤的配置，就可以到/usr/lib/tools/mycat/bin目录下执行./mycat start启动mycat服务；使用mycat status查看mycat的运行状态；如下图\n   ![image-20201128135953635](./mycat/image-20201128135953635.png)\n\n##### 5.2.2.1 安装遇到的问题\n\n1. schema TESTDB refered by user root is not exist!![image-20201215152125176](./mycat/image-20201215152125176.png)\n\n   解决方式：\n\n    ```xml\n    <!--在conf/server.xml文件中schemas中配置schema.xml文件中的schema的name值-->\n    \n    <!--user中的name为mycat服务的用户名-->\n     <user name=\"root\" defaultAccount=\"true\">\n         <!--这个是mycat服务连接的密码-->\n          <property name=\"password\">123456</property>\n          <property name=\"schemas\">xiaoyuge</property>\n    </user>\n    ```\n\n\n\n#### 5.2.3日志分析\n\nmycat的日志文件配置为MYCAT_HOME/conf/log4j.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n    <log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\n    <appender name=\"ConsoleAppender\" class=\"org.apache.log4j.ConsoleAppender\">\n    <layout class=\"org.apache.log4j.PatternLayout\">\n    <param name=\"ConversionPattern\" value=\"%d{MM-dd HH:mm:ss.SSS} %5p [%t] (%F:%L) -%m%n\" />\n\t</layout>\n\t</appender>\n\t<appender name=\"FILE\" class=\"org.apache.log4j.RollingFileAppender\">\n        <!--日志文件存放的目录-->\n        <param name=\"file\" value=\"${MYCAT_HOME}/logs/mycat.log\" />\n        <param name=\"Append\" value=\"false\"/>\n        <param name=\"MaxFileSize\" value=\"10000KB\"/>\n        <param name=\"MaxBackupIndex\" value=\"10\"/>\n        <param name=\"encoding\" value=\"UTF-8\" />\n        <layout class=\"org.apache.log4j.PatternLayout\">\n        <param name=\"ConversionPattern\" value=\"%d{MM/dd HH:mm:ss.SSS} %5p [%t] (%F:%L) -%m%n\" />\n\t</layout>\n\t</appender>\n\t<root>\n        <!--level是日志级别，生产环境下加以将级别调整为info/ware，如果是研究测试，碰到异常设置为debug-->\n\t\t<level value=\"debug\" />\n\t\t<appender-ref ref=\"ConsoleAppender\" />\n\t</root>\n</log4j:configuration>\n```\n\n##### 5.2.3.1 warpper日志\n\n目前mycat的启动时经过warpper封装成启动脚本，所以日志也会有其相关的日志文件：${MYCAT_HOME}/logs/warapper.log， 在启动的时候如果系统环境配置错误或缺少配置时，导致mycat无法启动，可以通过查看wrapper.log查看具体错误原因。\n\n1. 正常启动\n\n    ```verilog\n    STATUS | wrapper | 2015/04/12 15:05:00 | --> Wrapper Started as Daemon\n    STATUS | wrapper | 2015/04/12 15:05:00 | Launching a JVM...\n    INFO | jvm 1 | 2015/04/12 15:05:01 | Wrapper (Version 3.2.3) http://wrapper.tanukisoftware.org\n    INFO | jvm 1 | 2015/04/12 15:05:01 | Copyright 1999-2006 Tanuki Software, Inc. AllRights Reserved.\n    INFO | jvm 1 | 2015/04/12 15:05:01 |\n    INFO | jvm 1 | 2015/04/12 15:05:01 | log4j 2015-04-12 15:05:01 [./conf/log4j.xml]load completed.\n    INFO | jvm 1 | 2015/04/12 15:05:02 | MyCAT Server startup successfully. see logs in logs/mycat.log\n    ```\n\n2. 启动异常\n\n    ```verilog\n    STATUS | wrapper | 2015/02/14 01:43:44 | --> Wrapper Started as Daemon\n    STATUS | wrapper | 2015/02/14 01:43:44 | Launching a JVM...\n    INFO | jvm 1 | 2015/02/14 01:43:45 | Error: Exception thrown by the agent : java.rmi.server.ExportException:\n    Port already in use: 1984; nested exception is:\n    INFO | jvm 1 | 2015/02/14 01:43:45 | java.net.BindException: Address already in use\n    ERROR | wrapper | 2015/02/14 01:43:45 | JVM exited while loading the application.\n        \n    # 日志显示异常原因为 java.net.BindException: Address already in use,也就是端口占用，很有可能是原有服\n    务未停止，或者 Mycat 默认端口被其他程序占用，正常启动成功后会有 mycat.log 日志，如果服务未启动成功不会有对应的日志。 也可以去修改 conf 文件夹里的 wrapper.conf 里的 wrapper.java.additional.7=-Dcom.sun.management.jmxremote.port=1984，server.xml 的<property name=\"serverPort\">8066</property>和\n    <property name=\"managerPort\">9066</property>，这方法适\n    合一台机器上两个 mycat 或者 1984,8066,9066 端口被其它应用占用的情况\n    ```\n\n\n\n##### 5.2.3.2 mycat日志\n\n\n\n#### 5.2.4 mycat防火墙设置\n\n白名单和SQL黑名单说明：\n\n```xml\n<!--在 server.xml 中配置：-->\n<firewall>\n     <!--ip 白名单列表，可以配置多个-->\n    <whitehost>\n        <!--ip 白名单 用户对应的可以访问的 ip 地址-->\n    \t<host user=\"mycat\" host=\"127.0.0.1\"></host> \n    </whitehost>\n     <!-是否开启检查黑名单列表-->\n    <blacklist check=\"true\">\n        <!--黑名单允许的 权限 后面为默认-->\n    \t<property name=\"selelctAllow\">false</property>\n    </blacklist>\n</firewall>\n```\n\n**黑名单配置拦截明细如下：**\n\n|         配置项         | 缺省值 |                             描述                             |\n| :--------------------: | :----: | :----------------------------------------------------------: |\n|     rollbackAllow      |  true  | 是否允许执行 roll back 操作,如果把 selectIntoAllow、deleteAllow、updateAllow、insertAllow、mergeAllow 都设置为 false，这就是一个只读数据源了。 |\n|      selectAllow       |  true  |                    是否运行执行SELECT语句                    |\n|  selectAllColumnAllow  |  true  | 是否允许执行 SELECT * FROM T 这样的语句。如果设置为 false，不允许执行 select * from t，但 select * from (select id, name from t) a。这个选项是防御程序通过调用 select *获得数据表的结构信息 |\n|    selectIntoAllow     |  true  |               SELECT 查询中是否允许 INTO 字句                |\n|      deleteAllow       |  true  |                   是否允许执行 DELETE 语句                   |\n|      updateAllow       |  true  |                   是否允许执行 UPDATE 语句                   |\n|      insertAllow       |  true  |                   是否允许执行 INSERT 语句                   |\n|      replaceAllow      |  true  |                  是否允许执行 REPLACE 语句                   |\n|       mergeAllow       |  true  |       是否允许执行 MERGE 语句，这个只在 Oracle 中有用        |\n|       callAllow        |  true  |          是否允许通过 jdbc 的 call 语法调用存储过程          |\n|        setAllow        |  true  |                    是否允许使用 SET 语法                     |\n|     truncateAllow      |  true  |        truncate 语句是危险，缺省打开，若需要自行关闭         |\n|    createTableAllow    |  true  |                        是否允许创建表                        |\n|    alterTableAllow     |  true  |                是否允许执行 Alter Table 语句                 |\n|     dropTableAllow     |  true  |                        是否允许修改表                        |\n|      commentAllow      | false  | 是否允许语句中存在注释，Oracle 的用户不用担心，Wall 能够识别 hints和注释的区别 |\n| noneBaseStatementAllow | false  | 是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项 就能够屏蔽 DDL。 |\n|  multiStatementAllow   | false  |              是否允许一次执行多条语句，缺省关闭              |\n|        useAllow        |  true  |           是否允许执行 mysql 的 use 语句，缺省打开           |\n|     describeAllow      |  true  |        是否允许执行 mysql 的 describe 语句，缺省打开         |\n|       showAllow        |  true  |          是否允许执行 mysql 的 show 语句，缺省打开           |\n|      commitAllow       |  true  |                   是否允许执行 commit 操作                   |\n\n**拦截配置=-永真条件：**\n\n|           配置项            | 缺省值 |                             描述                             |\n| :-------------------------: | :----: | :----------------------------------------------------------: |\n|  selectWhereAlwayTrueCheck  |  true  |       检查 SELECT 语句的 WHERE 子句是否是一个永真条件        |\n| selectHavingAlwayTrueCheck  |  true  |       检查 SELECT 语句的 HAVING 子句是否是一个永真条件       |\n|  deleteWhereAlwayTrueCheck  |  true  |       检查 DELETE 语句的 WHERE 子句是否是一个永真条件        |\n|    deleteWhereNoneCheck     | false  | 检查 DELETE 语句是否无 where 条件，这是有风险的，但不是 SQL 注入类型的风险 |\n|  updateWhereAlayTrueCheck   |  true  |       检查 UPDATE 语句的 WHERE 子句是否是一个永真条件        |\n|    updateWhereNoneCheck     | false  | 检查 UPDATE 语句是否无 where 条件，这是有风险的，但不是SQL 注入类型的风险 |\n| conditionAndAlwayTrueAllow  | false  |    检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永真条件    |\n| conditionAndAlwayFalseAllow | false  |    检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永假条件    |\n|   conditionLikeTrueAllow    |  true  |   检查查询条件(WHERE/HAVING 子句)中是否包含 LIKE 永真条件    |\n\n**其他拦截配置：**\n\n|          配置项           | 缺省值 |                             描述                             |\n| :-----------------------: | :----- | :----------------------------------------------------------: |\n|  selectIntoOutfileAllow   | false  | SELECT ... INTO OUTFILE 是否允许，这个是 mysql 注入攻击的常见手段，缺省是禁止的 |\n|     selectUnionCheck      | true   |                      检测 SELECT UNION                       |\n|     selectMinusCheck      | true   |                      检测 SELECT MINUS                       |\n|     selectExceptCheck     | true   |                      检测 SELECT EXCEPT                      |\n|   selectIntersectCheck    | true   |                    检测 SELECT INTERSECT                     |\n|     mustParameterized     | false  | 是否必须参数化，如果为 True，则不允许类似 WHERE ID = 1 这种不参数化的 SQL |\n|     strictSyntaxCheck     | true   | 是否进行严格的语法检测，Druid SQL Parser 在某些场景不能覆盖所有的，SQL 语法，出现解析 SQL 出错，可以临时把这个选项设置为 false，同时把 SQL 反馈给 Druid 的开发者 |\n|    conditionOpXorAllow    | false  | 查询条件中是否允许有 XOR 条件。XOR 不常用，很难判断永真或者永假，缺省不允许。 |\n|  conditionOpBitwseAllow   | true   |               查询条件中是否允许有\"&\"、\"~\"、\"                |\n| conditionDoubleConstAllow | false  |           查询条件中是否允许连续两个常量运算表达式           |\n|        minusAllow         | true   |  是否允许 SELECT * FROM A MINUS SELECT * FROM B 这样的语句   |\n|      intersectAllow       | true   | 是否允许 SELECT * FROM A INTERSECT SELECT * FROM B 这样的语句 |\n|   constArithmeticAllow    | true   | 拦截常量运算的条件，比如说 WHERE FID = 3 - 1，其中\"3 - 1\"是常量运算表达式。 |\n|      limitZeroAllow       | false  |                 是否允许 limit 0 这样的语句                  |\n\n**禁用对象检测配置：**\n\n|     配置项     | 缺省值 |                             描述                             |\n| :------------: | :----: | :----------------------------------------------------------: |\n|   tableCheck   |  true  |                    检测是否使用了禁用的表                    |\n|  schemaCheck   |  true  |                 检测是否使用了禁用的 Schema                  |\n| functionCheck  |  true  |                   检测是否使用了禁用的函数                   |\n|  objectCheck   |  true  |                  检测是否使用了“禁用对对象”                  |\n|  variantCheck  |  true  |                  检测是否使用了“禁用的变量”                  |\n| readOnlyTables |   空   | 指定的表只读，不能够在 SELECT INTO、DELETE、UPDATE、INSERT、MERGE 中作为\"被修改表\"出现 |\n\n#### 5.2.5 mycat配置文件\n\n##### 5.2.5.1 schema.xml配置\n\nschema.xml作为mycat中重要的配置文件之一，管理者mycat的逻辑库、表、分片规则、DataNode以及DataSource。\n\n##### 5.2.5.2 scheme标签\n\n```xml\n<schema name=\"TESTDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\"></schema>\n```\n\nschema标签用于定义mycat实例中的逻辑库，mycat可以由多个逻辑库，每个逻辑库都有自己的相关配置，可以使用schema标签来划分这些不同的逻辑库。如果不配置schema标签，所有的表配置，会属于同一个默认的逻辑库。\n\n```xml\n<!--逻辑库TESTDB-->\n<schema name=\"TESTDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\">\n\t<table name=\"travelrecord\" dataNode=\"dn1,dn2,dn3\" rule=\"auto-sharding-long\" ></table>\n</schema>\n<!--USERDB-->\n<schema name=\"USERDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\">\n\t<table name=\"company\" dataNode=\"dn10,dn11,dn12\" rule=\"auto-sharding-long\" ></table>\n</schema>\n<!--\n\t逻辑库的概念和MySQL数据库中的database概念相同，我们在查询这两个不同的逻辑库中表的时候需要切换到该逻辑库下才可以查询到所需要的表\n-->\n```\n\n在server.xml中可以配置不同的用户能够使用的schema\n\n```xml\n        <user name=\"root\" defaultAccount=\"true\">\n                <property name=\"password\">root</property>\n                <property name=\"schemas\">TESTDB</property>\n                <property name=\"defaultSchema\">TESTDB</property>\n                <!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 -->\n\n                <!-- 表级 DML 权限设置 -->\n                <!--\n                <privileges check=\"false\">\n                        <schema name=\"TESTDB\" dml=\"0110\" >\n                                <table name=\"tb01\" dml=\"0000\"></table>\n                                <table name=\"tb02\" dml=\"1111\"></table>\n                        </schema>\n                </privileges>\n                 -->\n        </user>\n\n        <user name=\"user\">\n                <property name=\"password\">user</property>\n                <property name=\"schemas\">TESTDB</property>\n                <property name=\"readOnly\">true</property>\n                <property name=\"defaultSchema\">TESTDB</property>\n        </user>\n\n```\n![](./mycat/image-20201129110838590.png)\n\nschema标签的相关属性：\n\n|     属性名     |     值     | 数量限制 |\n| :------------: | :--------: | :------: |\n|    dataNode    | 任意string | （0..1） |\n| checkSQLschema |  Boolean   |  （1）   |\n|  sqlMaxLimit   |  Integer   |  （1）   |\n\n###### 5.2.5.2.1  dataNode\n\n该属性用于绑定逻辑库到某个具体的database上，1.3版本如果配置了dataNode,则不可以配置分片表，1.4可以配置默认分片，只需要配置需要分片的表即可，具体配置如下：\n\n```xml\n<!--1.3版本配置--><schema name=\"USERDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\" dataNode=\"dn1\"><!—里面不能配置任何表--></schema><!--1.4版本配置--><schema name=\"USERDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\" dataNode=\"dn2\"><!—配置需要分片的表-->\t<table name=“tuser” dataNode=”dn1”/></schema><!-- \t那么现在tuser就绑定到dn1所配置的具体database上，可以直接访问这个database，没有配置的表则会走默认的节点dn2，这里注意没有配置在分片里面的表工具查看无法显示，但是可以正常使用。-->\n```\n\n###### 5.2.5.2.2 checkSQLschema\n\n当改制设置为true时，我们执行“SELECT * FROM TESTDB.travelrecord；”则mycat会把语句修改为“SELECT * FROM travelrecord;”即把表示schema的字符去掉，避免发送到后端数据库执行报ERROR 1146：Table 'testdb.travelrecord' doest't exist.不过，即使设置该值为 true ，如果语句所带的是并非是 schema 指定的名字，例如：**select * from db1.travelrecord;** 那么 MyCat 并不会删除 db1 这个字段，如果没有定义该库的话则会报错，所以在提供 SQL语句的最好是不带这个字段。\n\n###### 5.2.5.2.3 sqlMaxLimit\n\n当该值设置为某个数值时。每条执行的 SQL 语句，如果没有加上 limit 语句，MyCat 也会自动的加上所对应的值。例如设置值为 100，执行**select * from TESTDB.travelrecord;**的效果为和执行**select * from TESTDB.travelrecord limit 100;**相同。\n\n设置该值的话，MyCat 默认会把查询到的信息全部都展示出来，造成过多的输出。所以，在正常使用中，还是建议加上一个值，用于减少过多的数据返回。\n\n当然 SQL 语句中也显式的指定 limit 的大小，不受该属性的约束。\n\n需要注意的是，如果运行的 schema 为非拆分库的，那么该属性不会生效。需要手动添加 limit 语句。\n\n### 5.2 分配规则\n\n![image-20201104222632963](./mycat/image-20201104222632963.png)\n![image-20201104221336437](./mycat/image-20201104221336437.png)\n\n-   范围分片：根据某个字设置auto-sharding-long，如果这个primaryKey超出了范围会报错\n\n-   取模分片：\n\n-   ER分片（将父子表有关联的数据放在一个data-node里面）\n\n    ![image-20201104221659540](./mycat/image-20201104221659540.png)\n\n-   全局表：所有dataNode存储相同的数据，查询的时候是随机查询某个表 type=global，查询的时候随机从某个datanode获取\n\n-   非分片表：只在某个dataNode上存储,指定一个dataNode并且不写分片规则\n\n-   单库分表：有个bug在实际数据库中必须要创建mycat中一摸一样的数据表，而且truncat的时候要现在dataNode先删除，才能删除的掉mycat的数据\n\n\n\n### 5.3 全局ID\n\n![image-20201104223246735](./mycat/image-20201104223246735.png)\n\n-   文件方式---0\n-   数据库方式---1\n-   本地时间戳----2\n-   ZK方式----3\n\n## 6. Mycat分片策略详解\n\n连续分片与离散分片\n\n![image-20201107201442912](./mycat/image-20201107201442912.png)\n\n**连续分片**：\n\n-   范围分片\n-   日期/事件\n\n\n\n缺点：\n\n-   存在数据热点的可能性\n-   并发访问能力受限于单一或少量DataNode（访问集中），并不能分摊数据库访问的压力\n\n**离散**：\n\n-   取模（partioncount 的总数必须和分片总数相同）\n\n-   枚举\n\n-   一致性哈希(qs-murmur)\n\n-   固定分片哈希\n\n    -   partitionCount: 2, 1表示有三个分片必须和节点数量一致，否则会报错，前面两个一样长\n\n    -   partitionLength: 256, 512表示长度为256和512\n\n    -   综合在一起就是前面2个分片长度为256， 最后一个为512，结果如下图所示（注意partitionCount和partitionLength的数量一定要一致）\n\n    -   ![image-20201219103201836](./mycat/image-20201219103201836.png)\n\n        ![image-20201219102742172](./mycat/image-20201219102742172.png)\n\n-   取模范围(sharting-by-pattern)：先取模PartitionByPattern后分片\n\n-   范围取模: PartitionByRangeMod(partition-rane-mod.txt)\n\n    -   ```txt\n        0-2000=1\t\t#范围在2000以内的在第一个节点（取模的结果还是本身）\n        2001-4000=2\t\t#范围在2001到4000以内的再模2，结果为0在第一个节点，结果为1在第三个节点\n        ```\n\n-   其他\n\n优点：\n\n-   并发访问能力增强（负载到不同的节点）\n-   范围条件查询性能提升（并行计算）\n\n缺点：\n\n-   数据扩容比较困难，设计到数据迁移问题\n-   数据库连接消耗比较多\n\n分片策略的选择：\n\n1） 确定分片表\n\n2） 找出分片键\n\n3） 考虑容量、增速、业务用户\n\n如果在查询语句中没有携带分片建，那么mycat会将sql发布到所有的节点上\n\n## 7. Mycat扩缩容\n\n### 7.1 在线不停机扩缩容（双写）\n\n![image-20201107205855474](./mycat/image-20201107205855474.png)\n\n\n\n### 7.2 离线扩缩容\n\n#### 7.2.1Mysql Dump\n\n```shell\nmysqldump -uroot -p123456 -h127.0.0.1 -p3306 -c -t --skip-extended-insert 数据库名称 > mysql.11.11.sql\n```\n\n#### 7.2.2 Mycat自带工具\n\n1.  mycat所在环境安装mysql客户端程序\n2.  mycat的lib目录下添加mysql的jdbc驱动包（mysql-connector-java-5.7.1.jar）\n3.  对扩容缩容的表所有节点数据进行备份\n4.  复制schema.xml、rule.xml并重命名为newSchema.xml、newRule.xml\n5.  修改newSchema.xml和newRule.xml配置文件为扩容缩容后的参数\n6.  在conf/migrateTable.properties配置文件中配置分片库和分片表如：imall=table_test1\n7.  dataMigrate.sh配置mysqldump路径\n8.  停止mycat服务\n9.  执行bin/dataMigrate.sh脚本（不能用openjdk）\n10.  替换schema.xml、rule.xml\n\n\n\n**注意事项：**\n\n-   保证分片表迁移数据前后路由规则一致（取模-->取模）\n-   保证分片表歉意数据前后分片字段一致\n-   全局表将被忽略\n-   不要将非分片表配置到migrateTables.properties文件中\n-   暂时只支持分片表使用Mysql作为数据源的扩容缩容\n\n## 8. Mycat读写分离\n\n### 8.1 主从复制\n\n1.  数据备份回复\n2.  负载均衡（读写分离）\n3.  高可用HA\n\n### 8.2 主从复制形式;\n\n![image-20201107212552852](./mycat/image-20201107212552852.png)\n\n#### binlog(Binary log 二进制日志)\n\n```sql\n--查看binglog: SHOW binlog events in 'mysql-bin.000001'\n--show variables like 'max_blog_max'\n```\n\n#### binlog配置\n\n-   STATEMENT: 记录每一天修改数据的sql语句（减少日志量，节约IO）\n-   ROW: 记录哪条数据被修改了，修改成什么样子了（5.7以后默认）\n-   MIXED: 结合两种方式，一般语句用STATEMENT,函数之类的使用ROW\n\n**binlog**格式（mysql-bin.00001等）\n\n**查看binlog**\n\n```sql\nshow binlog events in 'mysql-bin.00001';\n```\n\n### 主从复制原理\n\nSQL Thread是单线程的， 这也是所有的主从复制延迟的原因，那么relay log接受master节点的sql语句主要是用于缓冲\n\n![image-20201107213638624](./mycat/image-20201107213638624.png)\n\n### mycat读写分离配置\n\n![image-20201107213859155](./mycat/image-20201107213859155.png)\n\n### 8.5 Mycat注解（hint）\n\n注解用法：\n\n```tex\n\t/*!mycat:sql=注解sql语句*/真正执行的SQL\n\t\n\t比如说在mycat上创建表无法创建成功，可以使用注解\n\t/*!mycat:sql=select * from table_1 where id = 1*/create table test2(id int);\n\t主要注解sql可以确认mycat可以路由到子结点上，就可以执行后面的真正执行的sql语句\n```\n\n注解用途：\n\n-   跨库关联查询\n-   DDL或存储过程\n-   自定义分片\n-   读写分离\n\n### 分布式事务\n\n基于XA协议的两阶段提交\n\n![image-20201107215437139](./mycat/image-20201107215437139.png)\n\n#### XA角色\n\n![image-20201107215605251](./mycat/image-20201107215605251.png)\n\n#### XA实现\n\n![image-20201107220049532](./mycat/image-20201107220049532.png)\n\n\n\n## 9. Mycat核心流程\n\n### 9.1 架构图\n\n![image-20201220170713526](./mycat/image-20201220170713526.png)\n\n### 9.2 启动流程\n\n1.  MycatServer启动，解析配置文件，包括服务器、分片规则等\n2.  创建工作线程，建立前端连接和后端连接\n\n### 9.3 执行SQL流程\n\n1.  前端连接接收mysql命令\n2.  解析MySQL，mycat用的是Druid的DruidParser\n3.  获取路由\n4.  改写MySQL，例如两个条件在两个节点上，则变成两条单独的sql\n5.  与后端数据库建立连接\n6.  发送sql语句到MySQL执行\n7.  获取返回结果\n8.  处理返回结果，例如排序、计算等等\n9.  返回给客户端\n\n\n\n## Mycat高可用\n\n![image-20201220172406074](./mycat/image-20201220172406074.png)\n\n","source":"_posts/mycat.md","raw":"---\ntitle: mycat学习\ntags: mycat\ncategories: 中间件\ncomments: false\ntranslate_title: mycat-learning\ndate: 2021-07-23 16:16:49\n---\n# Mycat(分库分表中间件)\n\n## 1. 数据库优化策略\n\n1.  重启：释放资源\n2.  SQL与索引\n3.  表与存储引擎（字段类型选择，长度设置，是否需要分表、分区）\n4.  数据库与应用架构（考虑使用缓存服务器，减轻是数据库压力；可以数据库分布式，读写分离，主从复制）\n5.  数据库与操作系统配置（修改mysql配置，使用单独服务器部署数据库）\n6.  硬件\n\n## 2. 数据库演化\n\n根据业务需要、数据量变化，随之而来的数据库的变化\n\n1.  数据库与应用部署在同一台服务器\n![mycat](./mycat/image-20201104204430049.png)\n2.  单体应用架构，单数据库（数据库服务器和应用服务器分离，但是业务系统越做越大）\n    ![mycat](./mycat/image-20201104204624925.png)\n\n3.  多应用单数据库（应用解耦）\n    ![mycat](./mycat/image-20201104204933409.png)\n\n4.  多应用 独立数据库\n    ![mycat](./mycat/image-20201104205054233.png)\n\n5.  但应用多数据库(分表)\n    ![mycat](./mycat/image-20201104205319372.png)\n\n## 3. 如何分库分表\n![mycat](./mycat/image-20201104205653611.png)\n\n-   垂直切分\n\n    -   单库\n        ![mycat](./mycat/image-20201104205756827.png)\n\n    -   多库\n        ![mycat](./mycat/image-20201104210008624.png)\n\n-   水平切分\n\n    -   按照月分表或者分成实时、历史表等\n        ![mycat](./mycat/image-20201104210117373.png)\n\n    -   分成多库\n        ![mycat](./mycat/image-20201104210416994.png)\n\n## 4. 分库分表带来的问题\n\n1.  跨库关联查询\n\n    -   增加冗余字段（违反了第三范式：表中的所有数据元素不但要能唯一地被主关键字所标识,而且它们之间还必须相互独立,不存在其他的函数关系）\n    -   跨数据库的同步（canal、Mq（最好）、ETL、kettle、ogg）(在某个库中同步其他数据库中表的数据，避免跨库关联查询)\n    -   全局表(广播表)：比如行政区划表，所有的系统都是一样的；\n    -   API\n\n2.  分布式事务\n\n    -   Local\n\n3.  排序、翻页、函数计算\n\n    -\n\n4.  全局主键\n\n    -   雪花算法leaf\n    -   redis(int 类型可以设置incby)\n    -   ZookKeeper\n    -   uuid(数据过长， 影响索引存储)\n\n5.  多数据源连接（动态数据源）\n    ![mycat](./mycat/image-20201104213343204.png)\n\n## 5. Mycat分库分表中间件\n\n**官网地址**：http://www.mycat.org.cn/\n\n从阿里cobar升级而来，完全实现了mysql协议，可以当作一个mysql数据库来使用，通过JDBC支持其他数据库实现分库分表，解决了**多表join、分布式事务、全局序列号、翻页查询、函数计算**的问题\n\n*   一个彻底开源的，面向企业应用开发的大数据库集群\n*   支持事务、ACID、可以替代MySQL的加强版数据库\n*   一个可以视为MySQL集群的企业级数据库，用来替代昂贵的Oracle集群\n*   一个融合内存缓存技术、NoSQL技术、HDFS大数据的新型SQL Server\n*   结合传统数据库和新型分布式数据仓库的新一代企业级数据库产品\n*   一个新颖的数据库中间件产品\n\n华为云的DDM其实也是根据mycat做的\n\n### 5.1 核心概念\n\n![image-20201104215015366](./mycat/image-20201104215015366.png)\n\n### 5.2 Mycat安装与配置\n\n#### 5.2.1 Mycat安装\n\n从官网下载安装版本，解压到文件(官网建议安装在/usr/local/Mycat)后页面如下图所示：\n![image-20201127094703483](./mycat/image-20201127094703483.png)\n\n目录解释如下：\n\n- **bin：**存放window版和linux版本除了提供封装成服务的版本之外，也提供了nowrap的shell脚本命令，方便选择和修改；Linux下运行:./mycat console， 首先要chmod + x*;(mycat支持的命令console、start、stop、restart、status、dump)\n- **conf：**server.xml是mycat服务器参数调整和用户授权的配置文件，schema.xml是逻辑库定义和表以及分片定义的配置文件，rule.xml是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改，需要重启mycat或者通过9066端口reload\n- **lib:**主要存放mycat依赖的一些jar文件\n- **logs:**日志存放在mycat.log中，每天一个文件，日志的配置是在conf/log4j.xml中，根据自己的需要，可以调整输出级别为debug，方便排查问题；注意Linux下部署安装mysql，默认不忽略，需要手动到/etc/my.cnf下配置**lower_case_table_names=1**使Linux环境下MySQL忽略表明大小写，否则使用mycat的时候会提示找不到表的错误\n\n#### 5.2.2 服务启动与配置\n\nMycat在Linux中部署启动时，首先需要在Linux系统的环境变量中配置MYCAT_HOE,操作方式如下：\n\n1. vi /etc/profile，在系统环境变量文件中增加MYCAT_HOME=/usr/lib/tools/mycat\n   ![image-20201127103212598](./mycat/image-20201127103212598.png)\n\n2. 执行 source/etc/profile命令，使环境变量生效。如果是多台Linux系统中组件Mycat集群，那需要在mycat Server所在的服务器配置对其他ip和主机名的映射，配置方式如下：\n   ![image-20201127104159580](./mycat/image-20201127104159580.png)\n\n   经过以上两个步骤的配置，就可以到/usr/lib/tools/mycat/bin目录下执行./mycat start启动mycat服务；使用mycat status查看mycat的运行状态；如下图\n   ![image-20201128135953635](./mycat/image-20201128135953635.png)\n\n##### 5.2.2.1 安装遇到的问题\n\n1. schema TESTDB refered by user root is not exist!![image-20201215152125176](./mycat/image-20201215152125176.png)\n\n   解决方式：\n\n    ```xml\n    <!--在conf/server.xml文件中schemas中配置schema.xml文件中的schema的name值-->\n    \n    <!--user中的name为mycat服务的用户名-->\n     <user name=\"root\" defaultAccount=\"true\">\n         <!--这个是mycat服务连接的密码-->\n          <property name=\"password\">123456</property>\n          <property name=\"schemas\">xiaoyuge</property>\n    </user>\n    ```\n\n\n\n#### 5.2.3日志分析\n\nmycat的日志文件配置为MYCAT_HOME/conf/log4j.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n    <log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\n    <appender name=\"ConsoleAppender\" class=\"org.apache.log4j.ConsoleAppender\">\n    <layout class=\"org.apache.log4j.PatternLayout\">\n    <param name=\"ConversionPattern\" value=\"%d{MM-dd HH:mm:ss.SSS} %5p [%t] (%F:%L) -%m%n\" />\n\t</layout>\n\t</appender>\n\t<appender name=\"FILE\" class=\"org.apache.log4j.RollingFileAppender\">\n        <!--日志文件存放的目录-->\n        <param name=\"file\" value=\"${MYCAT_HOME}/logs/mycat.log\" />\n        <param name=\"Append\" value=\"false\"/>\n        <param name=\"MaxFileSize\" value=\"10000KB\"/>\n        <param name=\"MaxBackupIndex\" value=\"10\"/>\n        <param name=\"encoding\" value=\"UTF-8\" />\n        <layout class=\"org.apache.log4j.PatternLayout\">\n        <param name=\"ConversionPattern\" value=\"%d{MM/dd HH:mm:ss.SSS} %5p [%t] (%F:%L) -%m%n\" />\n\t</layout>\n\t</appender>\n\t<root>\n        <!--level是日志级别，生产环境下加以将级别调整为info/ware，如果是研究测试，碰到异常设置为debug-->\n\t\t<level value=\"debug\" />\n\t\t<appender-ref ref=\"ConsoleAppender\" />\n\t</root>\n</log4j:configuration>\n```\n\n##### 5.2.3.1 warpper日志\n\n目前mycat的启动时经过warpper封装成启动脚本，所以日志也会有其相关的日志文件：${MYCAT_HOME}/logs/warapper.log， 在启动的时候如果系统环境配置错误或缺少配置时，导致mycat无法启动，可以通过查看wrapper.log查看具体错误原因。\n\n1. 正常启动\n\n    ```verilog\n    STATUS | wrapper | 2015/04/12 15:05:00 | --> Wrapper Started as Daemon\n    STATUS | wrapper | 2015/04/12 15:05:00 | Launching a JVM...\n    INFO | jvm 1 | 2015/04/12 15:05:01 | Wrapper (Version 3.2.3) http://wrapper.tanukisoftware.org\n    INFO | jvm 1 | 2015/04/12 15:05:01 | Copyright 1999-2006 Tanuki Software, Inc. AllRights Reserved.\n    INFO | jvm 1 | 2015/04/12 15:05:01 |\n    INFO | jvm 1 | 2015/04/12 15:05:01 | log4j 2015-04-12 15:05:01 [./conf/log4j.xml]load completed.\n    INFO | jvm 1 | 2015/04/12 15:05:02 | MyCAT Server startup successfully. see logs in logs/mycat.log\n    ```\n\n2. 启动异常\n\n    ```verilog\n    STATUS | wrapper | 2015/02/14 01:43:44 | --> Wrapper Started as Daemon\n    STATUS | wrapper | 2015/02/14 01:43:44 | Launching a JVM...\n    INFO | jvm 1 | 2015/02/14 01:43:45 | Error: Exception thrown by the agent : java.rmi.server.ExportException:\n    Port already in use: 1984; nested exception is:\n    INFO | jvm 1 | 2015/02/14 01:43:45 | java.net.BindException: Address already in use\n    ERROR | wrapper | 2015/02/14 01:43:45 | JVM exited while loading the application.\n        \n    # 日志显示异常原因为 java.net.BindException: Address already in use,也就是端口占用，很有可能是原有服\n    务未停止，或者 Mycat 默认端口被其他程序占用，正常启动成功后会有 mycat.log 日志，如果服务未启动成功不会有对应的日志。 也可以去修改 conf 文件夹里的 wrapper.conf 里的 wrapper.java.additional.7=-Dcom.sun.management.jmxremote.port=1984，server.xml 的<property name=\"serverPort\">8066</property>和\n    <property name=\"managerPort\">9066</property>，这方法适\n    合一台机器上两个 mycat 或者 1984,8066,9066 端口被其它应用占用的情况\n    ```\n\n\n\n##### 5.2.3.2 mycat日志\n\n\n\n#### 5.2.4 mycat防火墙设置\n\n白名单和SQL黑名单说明：\n\n```xml\n<!--在 server.xml 中配置：-->\n<firewall>\n     <!--ip 白名单列表，可以配置多个-->\n    <whitehost>\n        <!--ip 白名单 用户对应的可以访问的 ip 地址-->\n    \t<host user=\"mycat\" host=\"127.0.0.1\"></host> \n    </whitehost>\n     <!-是否开启检查黑名单列表-->\n    <blacklist check=\"true\">\n        <!--黑名单允许的 权限 后面为默认-->\n    \t<property name=\"selelctAllow\">false</property>\n    </blacklist>\n</firewall>\n```\n\n**黑名单配置拦截明细如下：**\n\n|         配置项         | 缺省值 |                             描述                             |\n| :--------------------: | :----: | :----------------------------------------------------------: |\n|     rollbackAllow      |  true  | 是否允许执行 roll back 操作,如果把 selectIntoAllow、deleteAllow、updateAllow、insertAllow、mergeAllow 都设置为 false，这就是一个只读数据源了。 |\n|      selectAllow       |  true  |                    是否运行执行SELECT语句                    |\n|  selectAllColumnAllow  |  true  | 是否允许执行 SELECT * FROM T 这样的语句。如果设置为 false，不允许执行 select * from t，但 select * from (select id, name from t) a。这个选项是防御程序通过调用 select *获得数据表的结构信息 |\n|    selectIntoAllow     |  true  |               SELECT 查询中是否允许 INTO 字句                |\n|      deleteAllow       |  true  |                   是否允许执行 DELETE 语句                   |\n|      updateAllow       |  true  |                   是否允许执行 UPDATE 语句                   |\n|      insertAllow       |  true  |                   是否允许执行 INSERT 语句                   |\n|      replaceAllow      |  true  |                  是否允许执行 REPLACE 语句                   |\n|       mergeAllow       |  true  |       是否允许执行 MERGE 语句，这个只在 Oracle 中有用        |\n|       callAllow        |  true  |          是否允许通过 jdbc 的 call 语法调用存储过程          |\n|        setAllow        |  true  |                    是否允许使用 SET 语法                     |\n|     truncateAllow      |  true  |        truncate 语句是危险，缺省打开，若需要自行关闭         |\n|    createTableAllow    |  true  |                        是否允许创建表                        |\n|    alterTableAllow     |  true  |                是否允许执行 Alter Table 语句                 |\n|     dropTableAllow     |  true  |                        是否允许修改表                        |\n|      commentAllow      | false  | 是否允许语句中存在注释，Oracle 的用户不用担心，Wall 能够识别 hints和注释的区别 |\n| noneBaseStatementAllow | false  | 是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项 就能够屏蔽 DDL。 |\n|  multiStatementAllow   | false  |              是否允许一次执行多条语句，缺省关闭              |\n|        useAllow        |  true  |           是否允许执行 mysql 的 use 语句，缺省打开           |\n|     describeAllow      |  true  |        是否允许执行 mysql 的 describe 语句，缺省打开         |\n|       showAllow        |  true  |          是否允许执行 mysql 的 show 语句，缺省打开           |\n|      commitAllow       |  true  |                   是否允许执行 commit 操作                   |\n\n**拦截配置=-永真条件：**\n\n|           配置项            | 缺省值 |                             描述                             |\n| :-------------------------: | :----: | :----------------------------------------------------------: |\n|  selectWhereAlwayTrueCheck  |  true  |       检查 SELECT 语句的 WHERE 子句是否是一个永真条件        |\n| selectHavingAlwayTrueCheck  |  true  |       检查 SELECT 语句的 HAVING 子句是否是一个永真条件       |\n|  deleteWhereAlwayTrueCheck  |  true  |       检查 DELETE 语句的 WHERE 子句是否是一个永真条件        |\n|    deleteWhereNoneCheck     | false  | 检查 DELETE 语句是否无 where 条件，这是有风险的，但不是 SQL 注入类型的风险 |\n|  updateWhereAlayTrueCheck   |  true  |       检查 UPDATE 语句的 WHERE 子句是否是一个永真条件        |\n|    updateWhereNoneCheck     | false  | 检查 UPDATE 语句是否无 where 条件，这是有风险的，但不是SQL 注入类型的风险 |\n| conditionAndAlwayTrueAllow  | false  |    检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永真条件    |\n| conditionAndAlwayFalseAllow | false  |    检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永假条件    |\n|   conditionLikeTrueAllow    |  true  |   检查查询条件(WHERE/HAVING 子句)中是否包含 LIKE 永真条件    |\n\n**其他拦截配置：**\n\n|          配置项           | 缺省值 |                             描述                             |\n| :-----------------------: | :----- | :----------------------------------------------------------: |\n|  selectIntoOutfileAllow   | false  | SELECT ... INTO OUTFILE 是否允许，这个是 mysql 注入攻击的常见手段，缺省是禁止的 |\n|     selectUnionCheck      | true   |                      检测 SELECT UNION                       |\n|     selectMinusCheck      | true   |                      检测 SELECT MINUS                       |\n|     selectExceptCheck     | true   |                      检测 SELECT EXCEPT                      |\n|   selectIntersectCheck    | true   |                    检测 SELECT INTERSECT                     |\n|     mustParameterized     | false  | 是否必须参数化，如果为 True，则不允许类似 WHERE ID = 1 这种不参数化的 SQL |\n|     strictSyntaxCheck     | true   | 是否进行严格的语法检测，Druid SQL Parser 在某些场景不能覆盖所有的，SQL 语法，出现解析 SQL 出错，可以临时把这个选项设置为 false，同时把 SQL 反馈给 Druid 的开发者 |\n|    conditionOpXorAllow    | false  | 查询条件中是否允许有 XOR 条件。XOR 不常用，很难判断永真或者永假，缺省不允许。 |\n|  conditionOpBitwseAllow   | true   |               查询条件中是否允许有\"&\"、\"~\"、\"                |\n| conditionDoubleConstAllow | false  |           查询条件中是否允许连续两个常量运算表达式           |\n|        minusAllow         | true   |  是否允许 SELECT * FROM A MINUS SELECT * FROM B 这样的语句   |\n|      intersectAllow       | true   | 是否允许 SELECT * FROM A INTERSECT SELECT * FROM B 这样的语句 |\n|   constArithmeticAllow    | true   | 拦截常量运算的条件，比如说 WHERE FID = 3 - 1，其中\"3 - 1\"是常量运算表达式。 |\n|      limitZeroAllow       | false  |                 是否允许 limit 0 这样的语句                  |\n\n**禁用对象检测配置：**\n\n|     配置项     | 缺省值 |                             描述                             |\n| :------------: | :----: | :----------------------------------------------------------: |\n|   tableCheck   |  true  |                    检测是否使用了禁用的表                    |\n|  schemaCheck   |  true  |                 检测是否使用了禁用的 Schema                  |\n| functionCheck  |  true  |                   检测是否使用了禁用的函数                   |\n|  objectCheck   |  true  |                  检测是否使用了“禁用对对象”                  |\n|  variantCheck  |  true  |                  检测是否使用了“禁用的变量”                  |\n| readOnlyTables |   空   | 指定的表只读，不能够在 SELECT INTO、DELETE、UPDATE、INSERT、MERGE 中作为\"被修改表\"出现 |\n\n#### 5.2.5 mycat配置文件\n\n##### 5.2.5.1 schema.xml配置\n\nschema.xml作为mycat中重要的配置文件之一，管理者mycat的逻辑库、表、分片规则、DataNode以及DataSource。\n\n##### 5.2.5.2 scheme标签\n\n```xml\n<schema name=\"TESTDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\"></schema>\n```\n\nschema标签用于定义mycat实例中的逻辑库，mycat可以由多个逻辑库，每个逻辑库都有自己的相关配置，可以使用schema标签来划分这些不同的逻辑库。如果不配置schema标签，所有的表配置，会属于同一个默认的逻辑库。\n\n```xml\n<!--逻辑库TESTDB-->\n<schema name=\"TESTDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\">\n\t<table name=\"travelrecord\" dataNode=\"dn1,dn2,dn3\" rule=\"auto-sharding-long\" ></table>\n</schema>\n<!--USERDB-->\n<schema name=\"USERDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\">\n\t<table name=\"company\" dataNode=\"dn10,dn11,dn12\" rule=\"auto-sharding-long\" ></table>\n</schema>\n<!--\n\t逻辑库的概念和MySQL数据库中的database概念相同，我们在查询这两个不同的逻辑库中表的时候需要切换到该逻辑库下才可以查询到所需要的表\n-->\n```\n\n在server.xml中可以配置不同的用户能够使用的schema\n\n```xml\n        <user name=\"root\" defaultAccount=\"true\">\n                <property name=\"password\">root</property>\n                <property name=\"schemas\">TESTDB</property>\n                <property name=\"defaultSchema\">TESTDB</property>\n                <!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 -->\n\n                <!-- 表级 DML 权限设置 -->\n                <!--\n                <privileges check=\"false\">\n                        <schema name=\"TESTDB\" dml=\"0110\" >\n                                <table name=\"tb01\" dml=\"0000\"></table>\n                                <table name=\"tb02\" dml=\"1111\"></table>\n                        </schema>\n                </privileges>\n                 -->\n        </user>\n\n        <user name=\"user\">\n                <property name=\"password\">user</property>\n                <property name=\"schemas\">TESTDB</property>\n                <property name=\"readOnly\">true</property>\n                <property name=\"defaultSchema\">TESTDB</property>\n        </user>\n\n```\n![](./mycat/image-20201129110838590.png)\n\nschema标签的相关属性：\n\n|     属性名     |     值     | 数量限制 |\n| :------------: | :--------: | :------: |\n|    dataNode    | 任意string | （0..1） |\n| checkSQLschema |  Boolean   |  （1）   |\n|  sqlMaxLimit   |  Integer   |  （1）   |\n\n###### 5.2.5.2.1  dataNode\n\n该属性用于绑定逻辑库到某个具体的database上，1.3版本如果配置了dataNode,则不可以配置分片表，1.4可以配置默认分片，只需要配置需要分片的表即可，具体配置如下：\n\n```xml\n<!--1.3版本配置--><schema name=\"USERDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\" dataNode=\"dn1\"><!—里面不能配置任何表--></schema><!--1.4版本配置--><schema name=\"USERDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\" dataNode=\"dn2\"><!—配置需要分片的表-->\t<table name=“tuser” dataNode=”dn1”/></schema><!-- \t那么现在tuser就绑定到dn1所配置的具体database上，可以直接访问这个database，没有配置的表则会走默认的节点dn2，这里注意没有配置在分片里面的表工具查看无法显示，但是可以正常使用。-->\n```\n\n###### 5.2.5.2.2 checkSQLschema\n\n当改制设置为true时，我们执行“SELECT * FROM TESTDB.travelrecord；”则mycat会把语句修改为“SELECT * FROM travelrecord;”即把表示schema的字符去掉，避免发送到后端数据库执行报ERROR 1146：Table 'testdb.travelrecord' doest't exist.不过，即使设置该值为 true ，如果语句所带的是并非是 schema 指定的名字，例如：**select * from db1.travelrecord;** 那么 MyCat 并不会删除 db1 这个字段，如果没有定义该库的话则会报错，所以在提供 SQL语句的最好是不带这个字段。\n\n###### 5.2.5.2.3 sqlMaxLimit\n\n当该值设置为某个数值时。每条执行的 SQL 语句，如果没有加上 limit 语句，MyCat 也会自动的加上所对应的值。例如设置值为 100，执行**select * from TESTDB.travelrecord;**的效果为和执行**select * from TESTDB.travelrecord limit 100;**相同。\n\n设置该值的话，MyCat 默认会把查询到的信息全部都展示出来，造成过多的输出。所以，在正常使用中，还是建议加上一个值，用于减少过多的数据返回。\n\n当然 SQL 语句中也显式的指定 limit 的大小，不受该属性的约束。\n\n需要注意的是，如果运行的 schema 为非拆分库的，那么该属性不会生效。需要手动添加 limit 语句。\n\n### 5.2 分配规则\n\n![image-20201104222632963](./mycat/image-20201104222632963.png)\n![image-20201104221336437](./mycat/image-20201104221336437.png)\n\n-   范围分片：根据某个字设置auto-sharding-long，如果这个primaryKey超出了范围会报错\n\n-   取模分片：\n\n-   ER分片（将父子表有关联的数据放在一个data-node里面）\n\n    ![image-20201104221659540](./mycat/image-20201104221659540.png)\n\n-   全局表：所有dataNode存储相同的数据，查询的时候是随机查询某个表 type=global，查询的时候随机从某个datanode获取\n\n-   非分片表：只在某个dataNode上存储,指定一个dataNode并且不写分片规则\n\n-   单库分表：有个bug在实际数据库中必须要创建mycat中一摸一样的数据表，而且truncat的时候要现在dataNode先删除，才能删除的掉mycat的数据\n\n\n\n### 5.3 全局ID\n\n![image-20201104223246735](./mycat/image-20201104223246735.png)\n\n-   文件方式---0\n-   数据库方式---1\n-   本地时间戳----2\n-   ZK方式----3\n\n## 6. Mycat分片策略详解\n\n连续分片与离散分片\n\n![image-20201107201442912](./mycat/image-20201107201442912.png)\n\n**连续分片**：\n\n-   范围分片\n-   日期/事件\n\n\n\n缺点：\n\n-   存在数据热点的可能性\n-   并发访问能力受限于单一或少量DataNode（访问集中），并不能分摊数据库访问的压力\n\n**离散**：\n\n-   取模（partioncount 的总数必须和分片总数相同）\n\n-   枚举\n\n-   一致性哈希(qs-murmur)\n\n-   固定分片哈希\n\n    -   partitionCount: 2, 1表示有三个分片必须和节点数量一致，否则会报错，前面两个一样长\n\n    -   partitionLength: 256, 512表示长度为256和512\n\n    -   综合在一起就是前面2个分片长度为256， 最后一个为512，结果如下图所示（注意partitionCount和partitionLength的数量一定要一致）\n\n    -   ![image-20201219103201836](./mycat/image-20201219103201836.png)\n\n        ![image-20201219102742172](./mycat/image-20201219102742172.png)\n\n-   取模范围(sharting-by-pattern)：先取模PartitionByPattern后分片\n\n-   范围取模: PartitionByRangeMod(partition-rane-mod.txt)\n\n    -   ```txt\n        0-2000=1\t\t#范围在2000以内的在第一个节点（取模的结果还是本身）\n        2001-4000=2\t\t#范围在2001到4000以内的再模2，结果为0在第一个节点，结果为1在第三个节点\n        ```\n\n-   其他\n\n优点：\n\n-   并发访问能力增强（负载到不同的节点）\n-   范围条件查询性能提升（并行计算）\n\n缺点：\n\n-   数据扩容比较困难，设计到数据迁移问题\n-   数据库连接消耗比较多\n\n分片策略的选择：\n\n1） 确定分片表\n\n2） 找出分片键\n\n3） 考虑容量、增速、业务用户\n\n如果在查询语句中没有携带分片建，那么mycat会将sql发布到所有的节点上\n\n## 7. Mycat扩缩容\n\n### 7.1 在线不停机扩缩容（双写）\n\n![image-20201107205855474](./mycat/image-20201107205855474.png)\n\n\n\n### 7.2 离线扩缩容\n\n#### 7.2.1Mysql Dump\n\n```shell\nmysqldump -uroot -p123456 -h127.0.0.1 -p3306 -c -t --skip-extended-insert 数据库名称 > mysql.11.11.sql\n```\n\n#### 7.2.2 Mycat自带工具\n\n1.  mycat所在环境安装mysql客户端程序\n2.  mycat的lib目录下添加mysql的jdbc驱动包（mysql-connector-java-5.7.1.jar）\n3.  对扩容缩容的表所有节点数据进行备份\n4.  复制schema.xml、rule.xml并重命名为newSchema.xml、newRule.xml\n5.  修改newSchema.xml和newRule.xml配置文件为扩容缩容后的参数\n6.  在conf/migrateTable.properties配置文件中配置分片库和分片表如：imall=table_test1\n7.  dataMigrate.sh配置mysqldump路径\n8.  停止mycat服务\n9.  执行bin/dataMigrate.sh脚本（不能用openjdk）\n10.  替换schema.xml、rule.xml\n\n\n\n**注意事项：**\n\n-   保证分片表迁移数据前后路由规则一致（取模-->取模）\n-   保证分片表歉意数据前后分片字段一致\n-   全局表将被忽略\n-   不要将非分片表配置到migrateTables.properties文件中\n-   暂时只支持分片表使用Mysql作为数据源的扩容缩容\n\n## 8. Mycat读写分离\n\n### 8.1 主从复制\n\n1.  数据备份回复\n2.  负载均衡（读写分离）\n3.  高可用HA\n\n### 8.2 主从复制形式;\n\n![image-20201107212552852](./mycat/image-20201107212552852.png)\n\n#### binlog(Binary log 二进制日志)\n\n```sql\n--查看binglog: SHOW binlog events in 'mysql-bin.000001'\n--show variables like 'max_blog_max'\n```\n\n#### binlog配置\n\n-   STATEMENT: 记录每一天修改数据的sql语句（减少日志量，节约IO）\n-   ROW: 记录哪条数据被修改了，修改成什么样子了（5.7以后默认）\n-   MIXED: 结合两种方式，一般语句用STATEMENT,函数之类的使用ROW\n\n**binlog**格式（mysql-bin.00001等）\n\n**查看binlog**\n\n```sql\nshow binlog events in 'mysql-bin.00001';\n```\n\n### 主从复制原理\n\nSQL Thread是单线程的， 这也是所有的主从复制延迟的原因，那么relay log接受master节点的sql语句主要是用于缓冲\n\n![image-20201107213638624](./mycat/image-20201107213638624.png)\n\n### mycat读写分离配置\n\n![image-20201107213859155](./mycat/image-20201107213859155.png)\n\n### 8.5 Mycat注解（hint）\n\n注解用法：\n\n```tex\n\t/*!mycat:sql=注解sql语句*/真正执行的SQL\n\t\n\t比如说在mycat上创建表无法创建成功，可以使用注解\n\t/*!mycat:sql=select * from table_1 where id = 1*/create table test2(id int);\n\t主要注解sql可以确认mycat可以路由到子结点上，就可以执行后面的真正执行的sql语句\n```\n\n注解用途：\n\n-   跨库关联查询\n-   DDL或存储过程\n-   自定义分片\n-   读写分离\n\n### 分布式事务\n\n基于XA协议的两阶段提交\n\n![image-20201107215437139](./mycat/image-20201107215437139.png)\n\n#### XA角色\n\n![image-20201107215605251](./mycat/image-20201107215605251.png)\n\n#### XA实现\n\n![image-20201107220049532](./mycat/image-20201107220049532.png)\n\n\n\n## 9. Mycat核心流程\n\n### 9.1 架构图\n\n![image-20201220170713526](./mycat/image-20201220170713526.png)\n\n### 9.2 启动流程\n\n1.  MycatServer启动，解析配置文件，包括服务器、分片规则等\n2.  创建工作线程，建立前端连接和后端连接\n\n### 9.3 执行SQL流程\n\n1.  前端连接接收mysql命令\n2.  解析MySQL，mycat用的是Druid的DruidParser\n3.  获取路由\n4.  改写MySQL，例如两个条件在两个节点上，则变成两条单独的sql\n5.  与后端数据库建立连接\n6.  发送sql语句到MySQL执行\n7.  获取返回结果\n8.  处理返回结果，例如排序、计算等等\n9.  返回给客户端\n\n\n\n## Mycat高可用\n\n![image-20201220172406074](./mycat/image-20201220172406074.png)\n\n","slug":"mycat","published":1,"updated":"2021-08-15T07:41:26.087Z","layout":"post","photos":[],"link":"","_id":"ckslj4pt4003ukw3q04a633v9","content":"<h1 id=\"mycat分库分表中间件\"><a class=\"markdownIt-Anchor\" href=\"#mycat分库分表中间件\"></a> Mycat(分库分表中间件)</h1>\n<h2 id=\"1-数据库优化策略\"><a class=\"markdownIt-Anchor\" href=\"#1-数据库优化策略\"></a> 1. 数据库优化策略</h2>\n<ol>\n<li>重启：释放资源</li>\n<li>SQL与索引</li>\n<li>表与存储引擎（字段类型选择，长度设置，是否需要分表、分区）</li>\n<li>数据库与应用架构（考虑使用缓存服务器，减轻是数据库压力；可以数据库分布式，读写分离，主从复制）</li>\n<li>数据库与操作系统配置（修改mysql配置，使用单独服务器部署数据库）</li>\n<li>硬件</li>\n</ol>\n<h2 id=\"2-数据库演化\"><a class=\"markdownIt-Anchor\" href=\"#2-数据库演化\"></a> 2. 数据库演化</h2>\n<p>根据业务需要、数据量变化，随之而来的数据库的变化</p>\n<ol>\n<li>\n<p>数据库与应用部署在同一台服务器<br>\n<img src=\"/2021/07/23/mycat/image-20201104204430049.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>单体应用架构，单数据库（数据库服务器和应用服务器分离，但是业务系统越做越大）<br>\n<img src=\"/2021/07/23/mycat/image-20201104204624925.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>多应用单数据库（应用解耦）<br>\n<img src=\"/2021/07/23/mycat/image-20201104204933409.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>多应用 独立数据库<br>\n<img src=\"/2021/07/23/mycat/image-20201104205054233.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>但应用多数据库(分表)<br>\n<img src=\"/2021/07/23/mycat/image-20201104205319372.png\" alt=\"mycat\"></p>\n</li>\n</ol>\n<h2 id=\"3-如何分库分表\"><a class=\"markdownIt-Anchor\" href=\"#3-如何分库分表\"></a> 3. 如何分库分表</h2>\n<p><img src=\"/2021/07/23/mycat/image-20201104205653611.png\" alt=\"mycat\"></p>\n<ul>\n<li>\n<p>垂直切分</p>\n<ul>\n<li>\n<p>单库<br>\n<img src=\"/2021/07/23/mycat/image-20201104205756827.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>多库<br>\n<img src=\"/2021/07/23/mycat/image-20201104210008624.png\" alt=\"mycat\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>水平切分</p>\n<ul>\n<li>\n<p>按照月分表或者分成实时、历史表等<br>\n<img src=\"/2021/07/23/mycat/image-20201104210117373.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>分成多库<br>\n<img src=\"/2021/07/23/mycat/image-20201104210416994.png\" alt=\"mycat\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-分库分表带来的问题\"><a class=\"markdownIt-Anchor\" href=\"#4-分库分表带来的问题\"></a> 4. 分库分表带来的问题</h2>\n<ol>\n<li>\n<p>跨库关联查询</p>\n<ul>\n<li>增加冗余字段（违反了第三范式：表中的所有数据元素不但要能唯一地被主关键字所标识,而且它们之间还必须相互独立,不存在其他的函数关系）</li>\n<li>跨数据库的同步（canal、Mq（最好）、ETL、kettle、ogg）(在某个库中同步其他数据库中表的数据，避免跨库关联查询)</li>\n<li>全局表(广播表)：比如行政区划表，所有的系统都是一样的；</li>\n<li>API</li>\n</ul>\n</li>\n<li>\n<p>分布式事务</p>\n<ul>\n<li>Local</li>\n</ul>\n</li>\n<li>\n<p>排序、翻页、函数计算</p>\n<ul>\n<li></li>\n</ul>\n</li>\n<li>\n<p>全局主键</p>\n<ul>\n<li>雪花算法leaf</li>\n<li>redis(int 类型可以设置incby)</li>\n<li>ZookKeeper</li>\n<li>uuid(数据过长， 影响索引存储)</li>\n</ul>\n</li>\n<li>\n<p>多数据源连接（动态数据源）<br>\n<img src=\"/2021/07/23/mycat/image-20201104213343204.png\" alt=\"mycat\"></p>\n</li>\n</ol>\n<h2 id=\"5-mycat分库分表中间件\"><a class=\"markdownIt-Anchor\" href=\"#5-mycat分库分表中间件\"></a> 5. Mycat分库分表中间件</h2>\n<p><strong>官网地址</strong>：<a href=\"http://www.mycat.org.cn/\">http://www.mycat.org.cn/</a></p>\n<p>从阿里cobar升级而来，完全实现了mysql协议，可以当作一个mysql数据库来使用，通过JDBC支持其他数据库实现分库分表，解决了<strong>多表join、分布式事务、全局序列号、翻页查询、函数计算</strong>的问题</p>\n<ul>\n<li>一个彻底开源的，面向企业应用开发的大数据库集群</li>\n<li>支持事务、ACID、可以替代MySQL的加强版数据库</li>\n<li>一个可以视为MySQL集群的企业级数据库，用来替代昂贵的Oracle集群</li>\n<li>一个融合内存缓存技术、NoSQL技术、HDFS大数据的新型SQL Server</li>\n<li>结合传统数据库和新型分布式数据仓库的新一代企业级数据库产品</li>\n<li>一个新颖的数据库中间件产品</li>\n</ul>\n<p>华为云的DDM其实也是根据mycat做的</p>\n<h3 id=\"51-核心概念\"><a class=\"markdownIt-Anchor\" href=\"#51-核心概念\"></a> 5.1 核心概念</h3>\n<p><img src=\"/2021/07/23/mycat/image-20201104215015366.png\" alt=\"image-20201104215015366\"></p>\n<h3 id=\"52-mycat安装与配置\"><a class=\"markdownIt-Anchor\" href=\"#52-mycat安装与配置\"></a> 5.2 Mycat安装与配置</h3>\n<h4 id=\"521-mycat安装\"><a class=\"markdownIt-Anchor\" href=\"#521-mycat安装\"></a> 5.2.1 Mycat安装</h4>\n<p>从官网下载安装版本，解压到文件(官网建议安装在/usr/local/Mycat)后页面如下图所示：<br>\n<img src=\"/2021/07/23/mycat/image-20201127094703483.png\" alt=\"image-20201127094703483\"></p>\n<p>目录解释如下：</p>\n<ul>\n<li>**bin：*<em>存放window版和linux版本除了提供封装成服务的版本之外，也提供了nowrap的shell脚本命令，方便选择和修改；Linux下运行:./mycat console， 首先要chmod + x</em>;(mycat支持的命令console、start、stop、restart、status、dump)</li>\n<li>**conf：**server.xml是mycat服务器参数调整和用户授权的配置文件，schema.xml是逻辑库定义和表以及分片定义的配置文件，rule.xml是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改，需要重启mycat或者通过9066端口reload</li>\n<li>**lib:**主要存放mycat依赖的一些jar文件</li>\n<li><strong>logs:<strong>日志存放在mycat.log中，每天一个文件，日志的配置是在conf/log4j.xml中，根据自己的需要，可以调整输出级别为debug，方便排查问题；注意Linux下部署安装mysql，默认不忽略，需要手动到/etc/my.cnf下配置</strong>lower_case_table_names=1</strong>使Linux环境下MySQL忽略表明大小写，否则使用mycat的时候会提示找不到表的错误</li>\n</ul>\n<h4 id=\"522-服务启动与配置\"><a class=\"markdownIt-Anchor\" href=\"#522-服务启动与配置\"></a> 5.2.2 服务启动与配置</h4>\n<p>Mycat在Linux中部署启动时，首先需要在Linux系统的环境变量中配置MYCAT_HOE,操作方式如下：</p>\n<ol>\n<li>\n<p>vi /etc/profile，在系统环境变量文件中增加MYCAT_HOME=/usr/lib/tools/mycat<br>\n<img src=\"/2021/07/23/mycat/image-20201127103212598.png\" alt=\"image-20201127103212598\"></p>\n</li>\n<li>\n<p>执行 source/etc/profile命令，使环境变量生效。如果是多台Linux系统中组件Mycat集群，那需要在mycat Server所在的服务器配置对其他ip和主机名的映射，配置方式如下：<br>\n<img src=\"/2021/07/23/mycat/image-20201127104159580.png\" alt=\"image-20201127104159580\"></p>\n<p>经过以上两个步骤的配置，就可以到/usr/lib/tools/mycat/bin目录下执行./mycat start启动mycat服务；使用mycat status查看mycat的运行状态；如下图<br>\n<img src=\"/2021/07/23/mycat/image-20201128135953635.png\" alt=\"image-20201128135953635\"></p>\n</li>\n</ol>\n<h5 id=\"5221-安装遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#5221-安装遇到的问题\"></a> 5.2.2.1 安装遇到的问题</h5>\n<ol>\n<li>\n<p>schema TESTDB refered by user root is not exist!<img src=\"/2021/07/23/mycat/image-20201215152125176.png\" alt=\"image-20201215152125176\"></p>\n<p>解决方式：</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--在conf/server.xml文件中schemas中配置schema.xml文件中的schema的name值--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--user中的name为mycat服务的用户名--&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;root&quot;</span> <span class=\"attr\">defaultAccount</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--这个是mycat服务连接的密码--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;schemas&quot;</span>&gt;</span>xiaoyuge<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"523日志分析\"><a class=\"markdownIt-Anchor\" href=\"#523日志分析\"></a> 5.2.3日志分析</h4>\n<p>mycat的日志文件配置为MYCAT_HOME/conf/log4j.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">log4j</span>:configuration <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">log4j:configuration</span> <span class=\"attr\">xmlns:log4j</span>=<span class=\"string\">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConsoleAppender&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConversionPattern&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;%d&#123;MM-dd HH:mm:ss.SSS&#125; %5p [%t] (%F:%L) -%m%n&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;FILE&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.RollingFileAppender&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--日志文件存放的目录--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;MYCAT_HOME&#125;/logs/mycat.log&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Append&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;MaxFileSize&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10000KB&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;MaxBackupIndex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;encoding&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConversionPattern&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;%d&#123;MM/dd HH:mm:ss.SSS&#125; %5p [%t] (%F:%L) -%m%n&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--level是日志级别，生产环境下加以将级别调整为info/ware，如果是研究测试，碰到异常设置为debug--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;debug&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;ConsoleAppender&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"5231-warpper日志\"><a class=\"markdownIt-Anchor\" href=\"#5231-warpper日志\"></a> 5.2.3.1 warpper日志</h5>\n<p>目前mycat的启动时经过warpper封装成启动脚本，所以日志也会有其相关的日志文件：${MYCAT_HOME}/logs/warapper.log， 在启动的时候如果系统环境配置错误或缺少配置时，导致mycat无法启动，可以通过查看wrapper.log查看具体错误原因。</p>\n<ol>\n<li>\n<p>正常启动</p>\n <figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">00</span> | --&gt; Wrapper Started as Daemon</span><br><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">00</span> | Launching a JVM...</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> | Wrapper (Version <span class=\"number\">3</span><span class=\"variable\">.2</span><span class=\"variable\">.3</span>) http:<span class=\"comment\">//wrapper.tanukisoftware.org</span></span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> | Copyright <span class=\"number\">1999</span>-<span class=\"number\">2006</span> Tanuki Software, Inc. AllRights Reserved.</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> |</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> | log4j <span class=\"number\">2015</span>-<span class=\"number\">04</span>-<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> [./conf/log4j<span class=\"variable\">.xml</span>]load completed.</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">02</span> | MyCAT Server startup successfully. see logs in logs/mycat<span class=\"variable\">.log</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>启动异常</p>\n <figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">44</span> | --&gt; Wrapper Started as Daemon</span><br><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">44</span> | Launching a JVM...</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">45</span> | Error: Exception thrown by the agent : java<span class=\"variable\">.rmi</span><span class=\"variable\">.server</span><span class=\"variable\">.ExportException</span>:</span><br><span class=\"line\">Port already in <span class=\"keyword\">use</span>: <span class=\"number\">1984</span>; nested exception is:</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">45</span> | java<span class=\"variable\">.net</span><span class=\"variable\">.BindException</span>: Address already in <span class=\"keyword\">use</span></span><br><span class=\"line\">ERROR | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">45</span> | JVM exited <span class=\"keyword\">while</span> loading the application.</span><br><span class=\"line\">    </span><br><span class=\"line\"># 日志显示异常原因为 java<span class=\"variable\">.net</span><span class=\"variable\">.BindException</span>: Address already in <span class=\"keyword\">use</span>,也就是端口占用，很有可能是原有服</span><br><span class=\"line\">务未停止，或者 Mycat 默认端口被其他程序占用，正常启动成功后会有 mycat<span class=\"variable\">.log</span> 日志，如果服务未启动成功不会有对应的日志。 也可以去修改 conf 文件夹里的 wrapper<span class=\"variable\">.conf</span> 里的 wrapper<span class=\"variable\">.java</span><span class=\"variable\">.additional</span><span class=\"variable\">.7</span>=-Dcom<span class=\"variable\">.sun</span><span class=\"variable\">.management</span><span class=\"variable\">.jmxremote</span><span class=\"variable\">.port</span>=<span class=\"number\">1984</span>，server<span class=\"variable\">.xml</span> 的&lt;<span class=\"keyword\">property</span> name=<span class=\"string\">&quot;serverPort&quot;</span>&gt;<span class=\"number\">8066</span>&lt;/<span class=\"keyword\">property</span>&gt;和</span><br><span class=\"line\">&lt;<span class=\"keyword\">property</span> name=<span class=\"string\">&quot;managerPort&quot;</span>&gt;<span class=\"number\">9066</span>&lt;/<span class=\"keyword\">property</span>&gt;，这方法适</span><br><span class=\"line\">合一台机器上两个 mycat 或者 <span class=\"number\">1984</span>,<span class=\"number\">8066</span>,<span class=\"number\">9066</span> 端口被其它应用占用的情况</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"5232-mycat日志\"><a class=\"markdownIt-Anchor\" href=\"#5232-mycat日志\"></a> 5.2.3.2 mycat日志</h5>\n<h4 id=\"524-mycat防火墙设置\"><a class=\"markdownIt-Anchor\" href=\"#524-mycat防火墙设置\"></a> 5.2.4 mycat防火墙设置</h4>\n<p>白名单和SQL黑名单说明：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--在 server.xml 中配置：--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">firewall</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--ip 白名单列表，可以配置多个--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">whitehost</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--ip 白名单 用户对应的可以访问的 ip 地址--&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">host</span> <span class=\"attr\">user</span>=<span class=\"string\">&quot;mycat&quot;</span> <span class=\"attr\">host</span>=<span class=\"string\">&quot;127.0.0.1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">whitehost</span>&gt;</span></span><br><span class=\"line\">     &lt;!-是否开启检查黑名单列表--&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">blacklist</span> <span class=\"attr\">check</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--黑名单允许的 权限 后面为默认--&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;selelctAllow&quot;</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">blacklist</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">firewall</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>黑名单配置拦截明细如下：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">配置项</th>\n<th style=\"text-align:center\">缺省值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">rollbackAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 roll back 操作,如果把 selectIntoAllow、deleteAllow、updateAllow、insertAllow、mergeAllow 都设置为 false，这就是一个只读数据源了。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否运行执行SELECT语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectAllColumnAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 SELECT * FROM T 这样的语句。如果设置为 false，不允许执行 select * from t，但 select * from (select id, name from t) a。这个选项是防御程序通过调用 select *获得数据表的结构信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectIntoAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">SELECT 查询中是否允许 INTO 字句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">deleteAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 DELETE 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updateAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 UPDATE 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">insertAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 INSERT 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">replaceAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 REPLACE 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mergeAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 MERGE 语句，这个只在 Oracle 中有用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">callAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许通过 jdbc 的 call 语法调用存储过程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许使用 SET 语法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">truncateAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">truncate 语句是危险，缺省打开，若需要自行关闭</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">createTableAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许创建表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">alterTableAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 Alter Table 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dropTableAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许修改表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">commentAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">是否允许语句中存在注释，Oracle 的用户不用担心，Wall 能够识别 hints和注释的区别</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">noneBaseStatementAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项 就能够屏蔽 DDL。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">multiStatementAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">是否允许一次执行多条语句，缺省关闭</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">useAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 mysql 的 use 语句，缺省打开</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">describeAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 mysql 的 describe 语句，缺省打开</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">showAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 mysql 的 show 语句，缺省打开</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">commitAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 commit 操作</td>\n</tr>\n</tbody>\n</table>\n<p><strong>拦截配置=-永真条件：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">配置项</th>\n<th style=\"text-align:center\">缺省值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">selectWhereAlwayTrueCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查 SELECT 语句的 WHERE 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectHavingAlwayTrueCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查 SELECT 语句的 HAVING 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">deleteWhereAlwayTrueCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查 DELETE 语句的 WHERE 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">deleteWhereNoneCheck</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">检查 DELETE 语句是否无 where 条件，这是有风险的，但不是 SQL 注入类型的风险</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updateWhereAlayTrueCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查 UPDATE 语句的 WHERE 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updateWhereNoneCheck</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">检查 UPDATE 语句是否无 where 条件，这是有风险的，但不是SQL 注入类型的风险</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionAndAlwayTrueAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionAndAlwayFalseAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永假条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionLikeTrueAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查查询条件(WHERE/HAVING 子句)中是否包含 LIKE 永真条件</td>\n</tr>\n</tbody>\n</table>\n<p><strong>其他拦截配置：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">配置项</th>\n<th style=\"text-align:left\">缺省值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">selectIntoOutfileAllow</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">SELECT … INTO OUTFILE 是否允许，这个是 mysql 注入攻击的常见手段，缺省是禁止的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectUnionCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">检测 SELECT UNION</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectMinusCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">检测 SELECT MINUS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectExceptCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">检测 SELECT EXCEPT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectIntersectCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">检测 SELECT INTERSECT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mustParameterized</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">是否必须参数化，如果为 True，则不允许类似 WHERE ID = 1 这种不参数化的 SQL</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strictSyntaxCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">是否进行严格的语法检测，Druid SQL Parser 在某些场景不能覆盖所有的，SQL 语法，出现解析 SQL 出错，可以临时把这个选项设置为 false，同时把 SQL 反馈给 Druid 的开发者</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionOpXorAllow</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">查询条件中是否允许有 XOR 条件。XOR 不常用，很难判断永真或者永假，缺省不允许。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionOpBitwseAllow</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">查询条件中是否允许有&quot;&amp;&quot;、&quot;~&quot;、&quot;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionDoubleConstAllow</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">查询条件中是否允许连续两个常量运算表达式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">minusAllow</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">是否允许 SELECT * FROM A MINUS SELECT * FROM B 这样的语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">intersectAllow</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">是否允许 SELECT * FROM A INTERSECT SELECT * FROM B 这样的语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">constArithmeticAllow</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">拦截常量运算的条件，比如说 WHERE FID = 3 - 1，其中&quot;3 - 1&quot;是常量运算表达式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">limitZeroAllow</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">是否允许 limit 0 这样的语句</td>\n</tr>\n</tbody>\n</table>\n<p><strong>禁用对象检测配置：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">配置项</th>\n<th style=\"text-align:center\">缺省值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">tableCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了禁用的表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">schemaCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了禁用的 Schema</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">functionCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了禁用的函数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">objectCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了“禁用对对象”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">variantCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了“禁用的变量”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">readOnlyTables</td>\n<td style=\"text-align:center\">空</td>\n<td style=\"text-align:center\">指定的表只读，不能够在 SELECT INTO、DELETE、UPDATE、INSERT、MERGE 中作为&quot;被修改表&quot;出现</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"525-mycat配置文件\"><a class=\"markdownIt-Anchor\" href=\"#525-mycat配置文件\"></a> 5.2.5 mycat配置文件</h4>\n<h5 id=\"5251-schemaxml配置\"><a class=\"markdownIt-Anchor\" href=\"#5251-schemaxml配置\"></a> 5.2.5.1 schema.xml配置</h5>\n<p>schema.xml作为mycat中重要的配置文件之一，管理者mycat的逻辑库、表、分片规则、DataNode以及DataSource。</p>\n<h5 id=\"5252-scheme标签\"><a class=\"markdownIt-Anchor\" href=\"#5252-scheme标签\"></a> 5.2.5.2 scheme标签</h5>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;TESTDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>schema标签用于定义mycat实例中的逻辑库，mycat可以由多个逻辑库，每个逻辑库都有自己的相关配置，可以使用schema标签来划分这些不同的逻辑库。如果不配置schema标签，所有的表配置，会属于同一个默认的逻辑库。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--逻辑库TESTDB--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;TESTDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;travelrecord&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn1,dn2,dn3&quot;</span> <span class=\"attr\">rule</span>=<span class=\"string\">&quot;auto-sharding-long&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--USERDB--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;USERDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;company&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn10,dn11,dn12&quot;</span> <span class=\"attr\">rule</span>=<span class=\"string\">&quot;auto-sharding-long&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t逻辑库的概念和MySQL数据库中的database概念相同，我们在查询这两个不同的逻辑库中表的时候需要切换到该逻辑库下才可以查询到所需要的表</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在server.xml中可以配置不同的用户能够使用的schema</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;root&quot;</span> <span class=\"attr\">defaultAccount</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultSchema&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 表级 DML 权限设置 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;privileges check=&quot;false&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                &lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                &lt;/schema&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/privileges&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>user<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;readOnly&quot;</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultSchema&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/07/23/mycat/image-20201129110838590.png\" alt></p>\n<p>schema标签的相关属性：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:center\">值</th>\n<th style=\"text-align:center\">数量限制</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">dataNode</td>\n<td style=\"text-align:center\">任意string</td>\n<td style=\"text-align:center\">（0…1）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">checkSQLschema</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">（1）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sqlMaxLimit</td>\n<td style=\"text-align:center\">Integer</td>\n<td style=\"text-align:center\">（1）</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"52521-datanode\"><a class=\"markdownIt-Anchor\" href=\"#52521-datanode\"></a> 5.2.5.2.1  dataNode</h6>\n<p>该属性用于绑定逻辑库到某个具体的database上，1.3版本如果配置了dataNode,则不可以配置分片表，1.4可以配置默认分片，只需要配置需要分片的表即可，具体配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--1.3版本配置--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;USERDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn1&quot;</span>&gt;</span>&lt;!—里面不能配置任何表--&gt;<span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span><span class=\"comment\">&lt;!--1.4版本配置--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;USERDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn2&quot;</span>&gt;</span>&lt;!—配置需要分片的表--&gt;\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">name</span>=<span class=\"string\">“tuser”</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">”dn1”/</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span><span class=\"comment\">&lt;!-- \t那么现在tuser就绑定到dn1所配置的具体database上，可以直接访问这个database，没有配置的表则会走默认的节点dn2，这里注意没有配置在分片里面的表工具查看无法显示，但是可以正常使用。--&gt;</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"52522-checksqlschema\"><a class=\"markdownIt-Anchor\" href=\"#52522-checksqlschema\"></a> 5.2.5.2.2 checkSQLschema</h6>\n<p>当改制设置为true时，我们执行“SELECT * FROM TESTDB.travelrecord；”则mycat会把语句修改为“SELECT * FROM travelrecord;”即把表示schema的字符去掉，避免发送到后端数据库执行报ERROR 1146：Table ‘testdb.travelrecord’ doest’t exist.不过，即使设置该值为 true ，如果语句所带的是并非是 schema 指定的名字，例如：<strong>select * from db1.travelrecord;</strong> 那么 MyCat 并不会删除 db1 这个字段，如果没有定义该库的话则会报错，所以在提供 SQL语句的最好是不带这个字段。</p>\n<h6 id=\"52523-sqlmaxlimit\"><a class=\"markdownIt-Anchor\" href=\"#52523-sqlmaxlimit\"></a> 5.2.5.2.3 sqlMaxLimit</h6>\n<p>当该值设置为某个数值时。每条执行的 SQL 语句，如果没有加上 limit 语句，MyCat 也会自动的加上所对应的值。例如设置值为 100，执行**select * from TESTDB.travelrecord;<strong>的效果为和执行</strong>select * from TESTDB.travelrecord limit 100;**相同。</p>\n<p>设置该值的话，MyCat 默认会把查询到的信息全部都展示出来，造成过多的输出。所以，在正常使用中，还是建议加上一个值，用于减少过多的数据返回。</p>\n<p>当然 SQL 语句中也显式的指定 limit 的大小，不受该属性的约束。</p>\n<p>需要注意的是，如果运行的 schema 为非拆分库的，那么该属性不会生效。需要手动添加 limit 语句。</p>\n<h3 id=\"52-分配规则\"><a class=\"markdownIt-Anchor\" href=\"#52-分配规则\"></a> 5.2 分配规则</h3>\n<p><img src=\"/2021/07/23/mycat/image-20201104222632963.png\" alt=\"image-20201104222632963\"><br>\n<img src=\"/2021/07/23/mycat/image-20201104221336437.png\" alt=\"image-20201104221336437\"></p>\n<ul>\n<li>\n<p>范围分片：根据某个字设置auto-sharding-long，如果这个primaryKey超出了范围会报错</p>\n</li>\n<li>\n<p>取模分片：</p>\n</li>\n<li>\n<p>ER分片（将父子表有关联的数据放在一个data-node里面）</p>\n<p><img src=\"/2021/07/23/mycat/image-20201104221659540.png\" alt=\"image-20201104221659540\"></p>\n</li>\n<li>\n<p>全局表：所有dataNode存储相同的数据，查询的时候是随机查询某个表 type=global，查询的时候随机从某个datanode获取</p>\n</li>\n<li>\n<p>非分片表：只在某个dataNode上存储,指定一个dataNode并且不写分片规则</p>\n</li>\n<li>\n<p>单库分表：有个bug在实际数据库中必须要创建mycat中一摸一样的数据表，而且truncat的时候要现在dataNode先删除，才能删除的掉mycat的数据</p>\n</li>\n</ul>\n<h3 id=\"53-全局id\"><a class=\"markdownIt-Anchor\" href=\"#53-全局id\"></a> 5.3 全局ID</h3>\n<p><img src=\"/2021/07/23/mycat/image-20201104223246735.png\" alt=\"image-20201104223246735\"></p>\n<ul>\n<li>文件方式—0</li>\n<li>数据库方式—1</li>\n<li>本地时间戳----2</li>\n<li>ZK方式----3</li>\n</ul>\n<h2 id=\"6-mycat分片策略详解\"><a class=\"markdownIt-Anchor\" href=\"#6-mycat分片策略详解\"></a> 6. Mycat分片策略详解</h2>\n<p>连续分片与离散分片</p>\n<p><img src=\"/2021/07/23/mycat/image-20201107201442912.png\" alt=\"image-20201107201442912\"></p>\n<p><strong>连续分片</strong>：</p>\n<ul>\n<li>范围分片</li>\n<li>日期/事件</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>存在数据热点的可能性</li>\n<li>并发访问能力受限于单一或少量DataNode（访问集中），并不能分摊数据库访问的压力</li>\n</ul>\n<p><strong>离散</strong>：</p>\n<ul>\n<li>\n<p>取模（partioncount 的总数必须和分片总数相同）</p>\n</li>\n<li>\n<p>枚举</p>\n</li>\n<li>\n<p>一致性哈希(qs-murmur)</p>\n</li>\n<li>\n<p>固定分片哈希</p>\n<ul>\n<li>\n<p>partitionCount: 2, 1表示有三个分片必须和节点数量一致，否则会报错，前面两个一样长</p>\n</li>\n<li>\n<p>partitionLength: 256, 512表示长度为256和512</p>\n</li>\n<li>\n<p>综合在一起就是前面2个分片长度为256， 最后一个为512，结果如下图所示（注意partitionCount和partitionLength的数量一定要一致）</p>\n</li>\n<li>\n<p><img src=\"/2021/07/23/mycat/image-20201219103201836.png\" alt=\"image-20201219103201836\"></p>\n<p><img src=\"/2021/07/23/mycat/image-20201219102742172.png\" alt=\"image-20201219102742172\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>取模范围(sharting-by-pattern)：先取模PartitionByPattern后分片</p>\n</li>\n<li>\n<p>范围取模: PartitionByRangeMod(partition-rane-mod.txt)</p>\n<ul>\n<li>\n<pre class=\"highlight\"><code class=\"txt\">0-2000=1\t\t#范围在2000以内的在第一个节点（取模的结果还是本身）\n2001-4000=2\t\t#范围在2001到4000以内的再模2，结果为0在第一个节点，结果为1在第三个节点\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">-   其他</span><br><span class=\"line\"></span><br><span class=\"line\">优点：</span><br><span class=\"line\"></span><br><span class=\"line\">-   并发访问能力增强（负载到不同的节点）</span><br><span class=\"line\">-   范围条件查询性能提升（并行计算）</span><br><span class=\"line\"></span><br><span class=\"line\">缺点：</span><br><span class=\"line\"></span><br><span class=\"line\">-   数据扩容比较困难，设计到数据迁移问题</span><br><span class=\"line\">-   数据库连接消耗比较多</span><br><span class=\"line\"></span><br><span class=\"line\">分片策略的选择：</span><br><span class=\"line\"></span><br><span class=\"line\">1） 确定分片表</span><br><span class=\"line\"></span><br><span class=\"line\">2） 找出分片键</span><br><span class=\"line\"></span><br><span class=\"line\">3） 考虑容量、增速、业务用户</span><br><span class=\"line\"></span><br><span class=\"line\">如果在查询语句中没有携带分片建，那么mycat会将sql发布到所有的节点上</span><br><span class=\"line\"></span><br><span class=\"line\">## 7. Mycat扩缩容</span><br><span class=\"line\"></span><br><span class=\"line\">### 7.1 在线不停机扩缩容（双写）</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20201107205855474](./mycat/image-20201107205855474.png)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 7.2 离线扩缩容</span><br><span class=\"line\"></span><br><span class=\"line\">#### 7.2.1Mysql Dump</span><br><span class=\"line\"></span><br><span class=\"line\">```shell</span><br><span class=\"line\">mysqldump -uroot -p123456 -h127.0.0.1 -p3306 -c -t --skip-extended-insert 数据库名称 &gt; mysql.11.11.sql</span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"722-mycat自带工具\"><a class=\"markdownIt-Anchor\" href=\"#722-mycat自带工具\"></a> 7.2.2 Mycat自带工具</h4>\n<ol>\n<li>mycat所在环境安装mysql客户端程序</li>\n<li>mycat的lib目录下添加mysql的jdbc驱动包（mysql-connector-java-5.7.1.jar）</li>\n<li>对扩容缩容的表所有节点数据进行备份</li>\n<li>复制schema.xml、rule.xml并重命名为newSchema.xml、newRule.xml</li>\n<li>修改newSchema.xml和newRule.xml配置文件为扩容缩容后的参数</li>\n<li>在conf/migrateTable.properties配置文件中配置分片库和分片表如：imall=table_test1</li>\n<li>dataMigrate.sh配置mysqldump路径</li>\n<li>停止mycat服务</li>\n<li>执行bin/dataMigrate.sh脚本（不能用openjdk）</li>\n<li>替换schema.xml、rule.xml</li>\n</ol>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>保证分片表迁移数据前后路由规则一致（取模–&gt;取模）</li>\n<li>保证分片表歉意数据前后分片字段一致</li>\n<li>全局表将被忽略</li>\n<li>不要将非分片表配置到migrateTables.properties文件中</li>\n<li>暂时只支持分片表使用Mysql作为数据源的扩容缩容</li>\n</ul>\n<h2 id=\"8-mycat读写分离\"><a class=\"markdownIt-Anchor\" href=\"#8-mycat读写分离\"></a> 8. Mycat读写分离</h2>\n<h3 id=\"81-主从复制\"><a class=\"markdownIt-Anchor\" href=\"#81-主从复制\"></a> 8.1 主从复制</h3>\n<ol>\n<li>数据备份回复</li>\n<li>负载均衡（读写分离）</li>\n<li>高可用HA</li>\n</ol>\n<h3 id=\"82-主从复制形式\"><a class=\"markdownIt-Anchor\" href=\"#82-主从复制形式\"></a> 8.2 主从复制形式;</h3>\n<p><img src=\"/2021/07/23/mycat/image-20201107212552852.png\" alt=\"image-20201107212552852\"></p>\n<h4 id=\"binlogbinary-log-二进制日志\"><a class=\"markdownIt-Anchor\" href=\"#binlogbinary-log-二进制日志\"></a> binlog(Binary log 二进制日志)</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查看binglog: SHOW binlog events in &#x27;mysql-bin.000001&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">--show variables like &#x27;max_blog_max&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"binlog配置\"><a class=\"markdownIt-Anchor\" href=\"#binlog配置\"></a> binlog配置</h4>\n<ul>\n<li>STATEMENT: 记录每一天修改数据的sql语句（减少日志量，节约IO）</li>\n<li>ROW: 记录哪条数据被修改了，修改成什么样子了（5.7以后默认）</li>\n<li>MIXED: 结合两种方式，一般语句用STATEMENT,函数之类的使用ROW</li>\n</ul>\n<p><strong>binlog</strong>格式（mysql-bin.00001等）</p>\n<p><strong>查看binlog</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> binlog events <span class=\"keyword\">in</span> <span class=\"string\">&#x27;mysql-bin.00001&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"主从复制原理\"><a class=\"markdownIt-Anchor\" href=\"#主从复制原理\"></a> 主从复制原理</h3>\n<p>SQL Thread是单线程的， 这也是所有的主从复制延迟的原因，那么relay log接受master节点的sql语句主要是用于缓冲</p>\n<p><img src=\"/2021/07/23/mycat/image-20201107213638624.png\" alt=\"image-20201107213638624\"></p>\n<h3 id=\"mycat读写分离配置\"><a class=\"markdownIt-Anchor\" href=\"#mycat读写分离配置\"></a> mycat读写分离配置</h3>\n<p><img src=\"/2021/07/23/mycat/image-20201107213859155.png\" alt=\"image-20201107213859155\"></p>\n<h3 id=\"85-mycat注解hint\"><a class=\"markdownIt-Anchor\" href=\"#85-mycat注解hint\"></a> 8.5 Mycat注解（hint）</h3>\n<p>注解用法：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*!mycat:sql=注解sql语句*/真正执行的SQL</span><br><span class=\"line\"></span><br><span class=\"line\">比如说在mycat上创建表无法创建成功，可以使用注解</span><br><span class=\"line\">/*!mycat:sql=select * from table<span class=\"built_in\">_</span>1 where id = 1*/create table test2(id int);</span><br><span class=\"line\">主要注解sql可以确认mycat可以路由到子结点上，就可以执行后面的真正执行的sql语句</span><br></pre></td></tr></table></figure>\n<p>注解用途：</p>\n<ul>\n<li>跨库关联查询</li>\n<li>DDL或存储过程</li>\n<li>自定义分片</li>\n<li>读写分离</li>\n</ul>\n<h3 id=\"分布式事务\"><a class=\"markdownIt-Anchor\" href=\"#分布式事务\"></a> 分布式事务</h3>\n<p>基于XA协议的两阶段提交</p>\n<p><img src=\"/2021/07/23/mycat/image-20201107215437139.png\" alt=\"image-20201107215437139\"></p>\n<h4 id=\"xa角色\"><a class=\"markdownIt-Anchor\" href=\"#xa角色\"></a> XA角色</h4>\n<p><img src=\"/2021/07/23/mycat/image-20201107215605251.png\" alt=\"image-20201107215605251\"></p>\n<h4 id=\"xa实现\"><a class=\"markdownIt-Anchor\" href=\"#xa实现\"></a> XA实现</h4>\n<p><img src=\"/2021/07/23/mycat/image-20201107220049532.png\" alt=\"image-20201107220049532\"></p>\n<h2 id=\"9-mycat核心流程\"><a class=\"markdownIt-Anchor\" href=\"#9-mycat核心流程\"></a> 9. Mycat核心流程</h2>\n<h3 id=\"91-架构图\"><a class=\"markdownIt-Anchor\" href=\"#91-架构图\"></a> 9.1 架构图</h3>\n<p><img src=\"/2021/07/23/mycat/image-20201220170713526.png\" alt=\"image-20201220170713526\"></p>\n<h3 id=\"92-启动流程\"><a class=\"markdownIt-Anchor\" href=\"#92-启动流程\"></a> 9.2 启动流程</h3>\n<ol>\n<li>MycatServer启动，解析配置文件，包括服务器、分片规则等</li>\n<li>创建工作线程，建立前端连接和后端连接</li>\n</ol>\n<h3 id=\"93-执行sql流程\"><a class=\"markdownIt-Anchor\" href=\"#93-执行sql流程\"></a> 9.3 执行SQL流程</h3>\n<ol>\n<li>前端连接接收mysql命令</li>\n<li>解析MySQL，mycat用的是Druid的DruidParser</li>\n<li>获取路由</li>\n<li>改写MySQL，例如两个条件在两个节点上，则变成两条单独的sql</li>\n<li>与后端数据库建立连接</li>\n<li>发送sql语句到MySQL执行</li>\n<li>获取返回结果</li>\n<li>处理返回结果，例如排序、计算等等</li>\n<li>返回给客户端</li>\n</ol>\n<h2 id=\"mycat高可用\"><a class=\"markdownIt-Anchor\" href=\"#mycat高可用\"></a> Mycat高可用</h2>\n<p><img src=\"/2021/07/23/mycat/image-20201220172406074.png\" alt=\"image-20201220172406074\"></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h1 id=\"mycat分库分表中间件\"><a class=\"markdownIt-Anchor\" href=\"#mycat分库分表中间件\"></a> Mycat(分库分表中间件)</h1>\n<h2 id=\"1-数据库优化策略\"><a class=\"markdownIt-Anchor\" href=\"#1-数据库优化策略\"></a> 1. 数据库优化策略</h2>\n<ol>\n<li>重启：释放资源</li>\n<li>SQL与索引</li>\n<li>表与存储引擎（字段类型选择，长度设置，是否需要分表、分区）</li>\n<li>数据库与应用架构（考虑使用缓存服务器，减轻是数据库压力；可以数据库分布式，读写分离，主从复制）</li>\n<li>数据库与操作系统配置（修改mysql配置，使用单独服务器部署数据库）</li>\n<li>硬件</li>\n</ol>\n<h2 id=\"2-数据库演化\"><a class=\"markdownIt-Anchor\" href=\"#2-数据库演化\"></a> 2. 数据库演化</h2>\n<p>根据业务需要、数据量变化，随之而来的数据库的变化</p>\n<ol>\n<li>\n<p>数据库与应用部署在同一台服务器<br>\n<img src=\"/2021/07/23/mycat/image-20201104204430049.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>单体应用架构，单数据库（数据库服务器和应用服务器分离，但是业务系统越做越大）<br>\n<img src=\"/2021/07/23/mycat/image-20201104204624925.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>多应用单数据库（应用解耦）<br>\n<img src=\"/2021/07/23/mycat/image-20201104204933409.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>多应用 独立数据库<br>\n<img src=\"/2021/07/23/mycat/image-20201104205054233.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>但应用多数据库(分表)<br>\n<img src=\"/2021/07/23/mycat/image-20201104205319372.png\" alt=\"mycat\"></p>\n</li>\n</ol>\n<h2 id=\"3-如何分库分表\"><a class=\"markdownIt-Anchor\" href=\"#3-如何分库分表\"></a> 3. 如何分库分表</h2>\n<p><img src=\"/2021/07/23/mycat/image-20201104205653611.png\" alt=\"mycat\"></p>\n<ul>\n<li>\n<p>垂直切分</p>\n<ul>\n<li>\n<p>单库<br>\n<img src=\"/2021/07/23/mycat/image-20201104205756827.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>多库<br>\n<img src=\"/2021/07/23/mycat/image-20201104210008624.png\" alt=\"mycat\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>水平切分</p>\n<ul>\n<li>\n<p>按照月分表或者分成实时、历史表等<br>\n<img src=\"/2021/07/23/mycat/image-20201104210117373.png\" alt=\"mycat\"></p>\n</li>\n<li>\n<p>分成多库<br>\n<img src=\"/2021/07/23/mycat/image-20201104210416994.png\" alt=\"mycat\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-分库分表带来的问题\"><a class=\"markdownIt-Anchor\" href=\"#4-分库分表带来的问题\"></a> 4. 分库分表带来的问题</h2>\n<ol>\n<li>\n<p>跨库关联查询</p>\n<ul>\n<li>增加冗余字段（违反了第三范式：表中的所有数据元素不但要能唯一地被主关键字所标识,而且它们之间还必须相互独立,不存在其他的函数关系）</li>\n<li>跨数据库的同步（canal、Mq（最好）、ETL、kettle、ogg）(在某个库中同步其他数据库中表的数据，避免跨库关联查询)</li>\n<li>全局表(广播表)：比如行政区划表，所有的系统都是一样的；</li>\n<li>API</li>\n</ul>\n</li>\n<li>\n<p>分布式事务</p>\n<ul>\n<li>Local</li>\n</ul>\n</li>\n<li>\n<p>排序、翻页、函数计算</p>\n<ul>\n<li></li>\n</ul>\n</li>\n<li>\n<p>全局主键</p>\n<ul>\n<li>雪花算法leaf</li>\n<li>redis(int 类型可以设置incby)</li>\n<li>ZookKeeper</li>\n<li>uuid(数据过长， 影响索引存储)</li>\n</ul>\n</li>\n<li>\n<p>多数据源连接（动态数据源）<br>\n<img src=\"/2021/07/23/mycat/image-20201104213343204.png\" alt=\"mycat\"></p>\n</li>\n</ol>\n<h2 id=\"5-mycat分库分表中间件\"><a class=\"markdownIt-Anchor\" href=\"#5-mycat分库分表中间件\"></a> 5. Mycat分库分表中间件</h2>\n<p><strong>官网地址</strong>：<a href=\"http://www.mycat.org.cn/\">http://www.mycat.org.cn/</a></p>\n<p>从阿里cobar升级而来，完全实现了mysql协议，可以当作一个mysql数据库来使用，通过JDBC支持其他数据库实现分库分表，解决了<strong>多表join、分布式事务、全局序列号、翻页查询、函数计算</strong>的问题</p>\n<ul>\n<li>一个彻底开源的，面向企业应用开发的大数据库集群</li>\n<li>支持事务、ACID、可以替代MySQL的加强版数据库</li>\n<li>一个可以视为MySQL集群的企业级数据库，用来替代昂贵的Oracle集群</li>\n<li>一个融合内存缓存技术、NoSQL技术、HDFS大数据的新型SQL Server</li>\n<li>结合传统数据库和新型分布式数据仓库的新一代企业级数据库产品</li>\n<li>一个新颖的数据库中间件产品</li>\n</ul>\n<p>华为云的DDM其实也是根据mycat做的</p>\n<h3 id=\"51-核心概念\"><a class=\"markdownIt-Anchor\" href=\"#51-核心概念\"></a> 5.1 核心概念</h3>\n<p><img src=\"/2021/07/23/mycat/image-20201104215015366.png\" alt=\"image-20201104215015366\"></p>\n<h3 id=\"52-mycat安装与配置\"><a class=\"markdownIt-Anchor\" href=\"#52-mycat安装与配置\"></a> 5.2 Mycat安装与配置</h3>\n<h4 id=\"521-mycat安装\"><a class=\"markdownIt-Anchor\" href=\"#521-mycat安装\"></a> 5.2.1 Mycat安装</h4>\n<p>从官网下载安装版本，解压到文件(官网建议安装在/usr/local/Mycat)后页面如下图所示：<br>\n<img src=\"/2021/07/23/mycat/image-20201127094703483.png\" alt=\"image-20201127094703483\"></p>\n<p>目录解释如下：</p>\n<ul>\n<li>**bin：*<em>存放window版和linux版本除了提供封装成服务的版本之外，也提供了nowrap的shell脚本命令，方便选择和修改；Linux下运行:./mycat console， 首先要chmod + x</em>;(mycat支持的命令console、start、stop、restart、status、dump)</li>\n<li>**conf：**server.xml是mycat服务器参数调整和用户授权的配置文件，schema.xml是逻辑库定义和表以及分片定义的配置文件，rule.xml是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改，需要重启mycat或者通过9066端口reload</li>\n<li>**lib:**主要存放mycat依赖的一些jar文件</li>\n<li><strong>logs:<strong>日志存放在mycat.log中，每天一个文件，日志的配置是在conf/log4j.xml中，根据自己的需要，可以调整输出级别为debug，方便排查问题；注意Linux下部署安装mysql，默认不忽略，需要手动到/etc/my.cnf下配置</strong>lower_case_table_names=1</strong>使Linux环境下MySQL忽略表明大小写，否则使用mycat的时候会提示找不到表的错误</li>\n</ul>\n<h4 id=\"522-服务启动与配置\"><a class=\"markdownIt-Anchor\" href=\"#522-服务启动与配置\"></a> 5.2.2 服务启动与配置</h4>\n<p>Mycat在Linux中部署启动时，首先需要在Linux系统的环境变量中配置MYCAT_HOE,操作方式如下：</p>\n<ol>\n<li>\n<p>vi /etc/profile，在系统环境变量文件中增加MYCAT_HOME=/usr/lib/tools/mycat<br>\n<img src=\"/2021/07/23/mycat/image-20201127103212598.png\" alt=\"image-20201127103212598\"></p>\n</li>\n<li>\n<p>执行 source/etc/profile命令，使环境变量生效。如果是多台Linux系统中组件Mycat集群，那需要在mycat Server所在的服务器配置对其他ip和主机名的映射，配置方式如下：<br>\n<img src=\"/2021/07/23/mycat/image-20201127104159580.png\" alt=\"image-20201127104159580\"></p>\n<p>经过以上两个步骤的配置，就可以到/usr/lib/tools/mycat/bin目录下执行./mycat start启动mycat服务；使用mycat status查看mycat的运行状态；如下图<br>\n<img src=\"/2021/07/23/mycat/image-20201128135953635.png\" alt=\"image-20201128135953635\"></p>\n</li>\n</ol>\n<h5 id=\"5221-安装遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#5221-安装遇到的问题\"></a> 5.2.2.1 安装遇到的问题</h5>\n<ol>\n<li>\n<p>schema TESTDB refered by user root is not exist!<img src=\"/2021/07/23/mycat/image-20201215152125176.png\" alt=\"image-20201215152125176\"></p>\n<p>解决方式：</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--在conf/server.xml文件中schemas中配置schema.xml文件中的schema的name值--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--user中的name为mycat服务的用户名--&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;root&quot;</span> <span class=\"attr\">defaultAccount</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--这个是mycat服务连接的密码--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;schemas&quot;</span>&gt;</span>xiaoyuge<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"523日志分析\"><a class=\"markdownIt-Anchor\" href=\"#523日志分析\"></a> 5.2.3日志分析</h4>\n<p>mycat的日志文件配置为MYCAT_HOME/conf/log4j.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">log4j</span>:configuration <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">log4j:configuration</span> <span class=\"attr\">xmlns:log4j</span>=<span class=\"string\">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConsoleAppender&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConversionPattern&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;%d&#123;MM-dd HH:mm:ss.SSS&#125; %5p [%t] (%F:%L) -%m%n&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;FILE&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.RollingFileAppender&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--日志文件存放的目录--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;MYCAT_HOME&#125;/logs/mycat.log&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Append&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;MaxFileSize&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10000KB&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;MaxBackupIndex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;encoding&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ConversionPattern&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;%d&#123;MM/dd HH:mm:ss.SSS&#125; %5p [%t] (%F:%L) -%m%n&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--level是日志级别，生产环境下加以将级别调整为info/ware，如果是研究测试，碰到异常设置为debug--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;debug&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;ConsoleAppender&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"5231-warpper日志\"><a class=\"markdownIt-Anchor\" href=\"#5231-warpper日志\"></a> 5.2.3.1 warpper日志</h5>\n<p>目前mycat的启动时经过warpper封装成启动脚本，所以日志也会有其相关的日志文件：${MYCAT_HOME}/logs/warapper.log， 在启动的时候如果系统环境配置错误或缺少配置时，导致mycat无法启动，可以通过查看wrapper.log查看具体错误原因。</p>\n<ol>\n<li>\n<p>正常启动</p>\n <figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">00</span> | --&gt; Wrapper Started as Daemon</span><br><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">00</span> | Launching a JVM...</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> | Wrapper (Version <span class=\"number\">3</span><span class=\"variable\">.2</span><span class=\"variable\">.3</span>) http:<span class=\"comment\">//wrapper.tanukisoftware.org</span></span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> | Copyright <span class=\"number\">1999</span>-<span class=\"number\">2006</span> Tanuki Software, Inc. AllRights Reserved.</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> |</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> | log4j <span class=\"number\">2015</span>-<span class=\"number\">04</span>-<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">01</span> [./conf/log4j<span class=\"variable\">.xml</span>]load completed.</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">04</span>/<span class=\"number\">12</span> <span class=\"number\">15</span>:<span class=\"number\">05</span>:<span class=\"number\">02</span> | MyCAT Server startup successfully. see logs in logs/mycat<span class=\"variable\">.log</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>启动异常</p>\n <figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">44</span> | --&gt; Wrapper Started as Daemon</span><br><span class=\"line\">STATUS | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">44</span> | Launching a JVM...</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">45</span> | Error: Exception thrown by the agent : java<span class=\"variable\">.rmi</span><span class=\"variable\">.server</span><span class=\"variable\">.ExportException</span>:</span><br><span class=\"line\">Port already in <span class=\"keyword\">use</span>: <span class=\"number\">1984</span>; nested exception is:</span><br><span class=\"line\">INFO | jvm <span class=\"number\">1</span> | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">45</span> | java<span class=\"variable\">.net</span><span class=\"variable\">.BindException</span>: Address already in <span class=\"keyword\">use</span></span><br><span class=\"line\">ERROR | wrapper | <span class=\"number\">2015</span>/<span class=\"number\">02</span>/<span class=\"number\">14</span> <span class=\"number\">01</span>:<span class=\"number\">43</span>:<span class=\"number\">45</span> | JVM exited <span class=\"keyword\">while</span> loading the application.</span><br><span class=\"line\">    </span><br><span class=\"line\"># 日志显示异常原因为 java<span class=\"variable\">.net</span><span class=\"variable\">.BindException</span>: Address already in <span class=\"keyword\">use</span>,也就是端口占用，很有可能是原有服</span><br><span class=\"line\">务未停止，或者 Mycat 默认端口被其他程序占用，正常启动成功后会有 mycat<span class=\"variable\">.log</span> 日志，如果服务未启动成功不会有对应的日志。 也可以去修改 conf 文件夹里的 wrapper<span class=\"variable\">.conf</span> 里的 wrapper<span class=\"variable\">.java</span><span class=\"variable\">.additional</span><span class=\"variable\">.7</span>=-Dcom<span class=\"variable\">.sun</span><span class=\"variable\">.management</span><span class=\"variable\">.jmxremote</span><span class=\"variable\">.port</span>=<span class=\"number\">1984</span>，server<span class=\"variable\">.xml</span> 的&lt;<span class=\"keyword\">property</span> name=<span class=\"string\">&quot;serverPort&quot;</span>&gt;<span class=\"number\">8066</span>&lt;/<span class=\"keyword\">property</span>&gt;和</span><br><span class=\"line\">&lt;<span class=\"keyword\">property</span> name=<span class=\"string\">&quot;managerPort&quot;</span>&gt;<span class=\"number\">9066</span>&lt;/<span class=\"keyword\">property</span>&gt;，这方法适</span><br><span class=\"line\">合一台机器上两个 mycat 或者 <span class=\"number\">1984</span>,<span class=\"number\">8066</span>,<span class=\"number\">9066</span> 端口被其它应用占用的情况</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"5232-mycat日志\"><a class=\"markdownIt-Anchor\" href=\"#5232-mycat日志\"></a> 5.2.3.2 mycat日志</h5>\n<h4 id=\"524-mycat防火墙设置\"><a class=\"markdownIt-Anchor\" href=\"#524-mycat防火墙设置\"></a> 5.2.4 mycat防火墙设置</h4>\n<p>白名单和SQL黑名单说明：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--在 server.xml 中配置：--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">firewall</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!--ip 白名单列表，可以配置多个--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">whitehost</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--ip 白名单 用户对应的可以访问的 ip 地址--&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">host</span> <span class=\"attr\">user</span>=<span class=\"string\">&quot;mycat&quot;</span> <span class=\"attr\">host</span>=<span class=\"string\">&quot;127.0.0.1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">whitehost</span>&gt;</span></span><br><span class=\"line\">     &lt;!-是否开启检查黑名单列表--&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">blacklist</span> <span class=\"attr\">check</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--黑名单允许的 权限 后面为默认--&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;selelctAllow&quot;</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">blacklist</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">firewall</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>黑名单配置拦截明细如下：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">配置项</th>\n<th style=\"text-align:center\">缺省值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">rollbackAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 roll back 操作,如果把 selectIntoAllow、deleteAllow、updateAllow、insertAllow、mergeAllow 都设置为 false，这就是一个只读数据源了。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否运行执行SELECT语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectAllColumnAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 SELECT * FROM T 这样的语句。如果设置为 false，不允许执行 select * from t，但 select * from (select id, name from t) a。这个选项是防御程序通过调用 select *获得数据表的结构信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectIntoAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">SELECT 查询中是否允许 INTO 字句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">deleteAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 DELETE 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updateAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 UPDATE 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">insertAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 INSERT 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">replaceAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 REPLACE 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mergeAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 MERGE 语句，这个只在 Oracle 中有用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">callAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许通过 jdbc 的 call 语法调用存储过程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许使用 SET 语法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">truncateAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">truncate 语句是危险，缺省打开，若需要自行关闭</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">createTableAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许创建表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">alterTableAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 Alter Table 语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dropTableAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许修改表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">commentAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">是否允许语句中存在注释，Oracle 的用户不用担心，Wall 能够识别 hints和注释的区别</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">noneBaseStatementAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项 就能够屏蔽 DDL。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">multiStatementAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">是否允许一次执行多条语句，缺省关闭</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">useAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 mysql 的 use 语句，缺省打开</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">describeAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 mysql 的 describe 语句，缺省打开</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">showAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 mysql 的 show 语句，缺省打开</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">commitAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否允许执行 commit 操作</td>\n</tr>\n</tbody>\n</table>\n<p><strong>拦截配置=-永真条件：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">配置项</th>\n<th style=\"text-align:center\">缺省值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">selectWhereAlwayTrueCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查 SELECT 语句的 WHERE 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectHavingAlwayTrueCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查 SELECT 语句的 HAVING 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">deleteWhereAlwayTrueCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查 DELETE 语句的 WHERE 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">deleteWhereNoneCheck</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">检查 DELETE 语句是否无 where 条件，这是有风险的，但不是 SQL 注入类型的风险</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updateWhereAlayTrueCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查 UPDATE 语句的 WHERE 子句是否是一个永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updateWhereNoneCheck</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">检查 UPDATE 语句是否无 where 条件，这是有风险的，但不是SQL 注入类型的风险</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionAndAlwayTrueAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永真条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionAndAlwayFalseAllow</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永假条件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionLikeTrueAllow</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检查查询条件(WHERE/HAVING 子句)中是否包含 LIKE 永真条件</td>\n</tr>\n</tbody>\n</table>\n<p><strong>其他拦截配置：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">配置项</th>\n<th style=\"text-align:left\">缺省值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">selectIntoOutfileAllow</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">SELECT … INTO OUTFILE 是否允许，这个是 mysql 注入攻击的常见手段，缺省是禁止的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectUnionCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">检测 SELECT UNION</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectMinusCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">检测 SELECT MINUS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectExceptCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">检测 SELECT EXCEPT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">selectIntersectCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">检测 SELECT INTERSECT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mustParameterized</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">是否必须参数化，如果为 True，则不允许类似 WHERE ID = 1 这种不参数化的 SQL</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strictSyntaxCheck</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">是否进行严格的语法检测，Druid SQL Parser 在某些场景不能覆盖所有的，SQL 语法，出现解析 SQL 出错，可以临时把这个选项设置为 false，同时把 SQL 反馈给 Druid 的开发者</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionOpXorAllow</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">查询条件中是否允许有 XOR 条件。XOR 不常用，很难判断永真或者永假，缺省不允许。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionOpBitwseAllow</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">查询条件中是否允许有&quot;&amp;&quot;、&quot;~&quot;、&quot;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">conditionDoubleConstAllow</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">查询条件中是否允许连续两个常量运算表达式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">minusAllow</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">是否允许 SELECT * FROM A MINUS SELECT * FROM B 这样的语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">intersectAllow</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">是否允许 SELECT * FROM A INTERSECT SELECT * FROM B 这样的语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">constArithmeticAllow</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:center\">拦截常量运算的条件，比如说 WHERE FID = 3 - 1，其中&quot;3 - 1&quot;是常量运算表达式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">limitZeroAllow</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:center\">是否允许 limit 0 这样的语句</td>\n</tr>\n</tbody>\n</table>\n<p><strong>禁用对象检测配置：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">配置项</th>\n<th style=\"text-align:center\">缺省值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">tableCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了禁用的表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">schemaCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了禁用的 Schema</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">functionCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了禁用的函数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">objectCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了“禁用对对象”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">variantCheck</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">检测是否使用了“禁用的变量”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">readOnlyTables</td>\n<td style=\"text-align:center\">空</td>\n<td style=\"text-align:center\">指定的表只读，不能够在 SELECT INTO、DELETE、UPDATE、INSERT、MERGE 中作为&quot;被修改表&quot;出现</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"525-mycat配置文件\"><a class=\"markdownIt-Anchor\" href=\"#525-mycat配置文件\"></a> 5.2.5 mycat配置文件</h4>\n<h5 id=\"5251-schemaxml配置\"><a class=\"markdownIt-Anchor\" href=\"#5251-schemaxml配置\"></a> 5.2.5.1 schema.xml配置</h5>\n<p>schema.xml作为mycat中重要的配置文件之一，管理者mycat的逻辑库、表、分片规则、DataNode以及DataSource。</p>\n<h5 id=\"5252-scheme标签\"><a class=\"markdownIt-Anchor\" href=\"#5252-scheme标签\"></a> 5.2.5.2 scheme标签</h5>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;TESTDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>schema标签用于定义mycat实例中的逻辑库，mycat可以由多个逻辑库，每个逻辑库都有自己的相关配置，可以使用schema标签来划分这些不同的逻辑库。如果不配置schema标签，所有的表配置，会属于同一个默认的逻辑库。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--逻辑库TESTDB--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;TESTDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;travelrecord&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn1,dn2,dn3&quot;</span> <span class=\"attr\">rule</span>=<span class=\"string\">&quot;auto-sharding-long&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--USERDB--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;USERDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;company&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn10,dn11,dn12&quot;</span> <span class=\"attr\">rule</span>=<span class=\"string\">&quot;auto-sharding-long&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t逻辑库的概念和MySQL数据库中的database概念相同，我们在查询这两个不同的逻辑库中表的时候需要切换到该逻辑库下才可以查询到所需要的表</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在server.xml中可以配置不同的用户能够使用的schema</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;root&quot;</span> <span class=\"attr\">defaultAccount</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultSchema&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 表级 DML 权限设置 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;privileges check=&quot;false&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                &lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                        &lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                &lt;/schema&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/privileges&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>user<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;readOnly&quot;</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultSchema&quot;</span>&gt;</span>TESTDB<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/07/23/mycat/image-20201129110838590.png\" alt></p>\n<p>schema标签的相关属性：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:center\">值</th>\n<th style=\"text-align:center\">数量限制</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">dataNode</td>\n<td style=\"text-align:center\">任意string</td>\n<td style=\"text-align:center\">（0…1）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">checkSQLschema</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">（1）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sqlMaxLimit</td>\n<td style=\"text-align:center\">Integer</td>\n<td style=\"text-align:center\">（1）</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"52521-datanode\"><a class=\"markdownIt-Anchor\" href=\"#52521-datanode\"></a> 5.2.5.2.1  dataNode</h6>\n<p>该属性用于绑定逻辑库到某个具体的database上，1.3版本如果配置了dataNode,则不可以配置分片表，1.4可以配置默认分片，只需要配置需要分片的表即可，具体配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--1.3版本配置--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;USERDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn1&quot;</span>&gt;</span>&lt;!—里面不能配置任何表--&gt;<span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span><span class=\"comment\">&lt;!--1.4版本配置--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;USERDB&quot;</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">&quot;dn2&quot;</span>&gt;</span>&lt;!—配置需要分片的表--&gt;\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">name</span>=<span class=\"string\">“tuser”</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">”dn1”/</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">schema</span>&gt;</span><span class=\"comment\">&lt;!-- \t那么现在tuser就绑定到dn1所配置的具体database上，可以直接访问这个database，没有配置的表则会走默认的节点dn2，这里注意没有配置在分片里面的表工具查看无法显示，但是可以正常使用。--&gt;</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"52522-checksqlschema\"><a class=\"markdownIt-Anchor\" href=\"#52522-checksqlschema\"></a> 5.2.5.2.2 checkSQLschema</h6>\n<p>当改制设置为true时，我们执行“SELECT * FROM TESTDB.travelrecord；”则mycat会把语句修改为“SELECT * FROM travelrecord;”即把表示schema的字符去掉，避免发送到后端数据库执行报ERROR 1146：Table ‘testdb.travelrecord’ doest’t exist.不过，即使设置该值为 true ，如果语句所带的是并非是 schema 指定的名字，例如：<strong>select * from db1.travelrecord;</strong> 那么 MyCat 并不会删除 db1 这个字段，如果没有定义该库的话则会报错，所以在提供 SQL语句的最好是不带这个字段。</p>\n<h6 id=\"52523-sqlmaxlimit\"><a class=\"markdownIt-Anchor\" href=\"#52523-sqlmaxlimit\"></a> 5.2.5.2.3 sqlMaxLimit</h6>\n<p>当该值设置为某个数值时。每条执行的 SQL 语句，如果没有加上 limit 语句，MyCat 也会自动的加上所对应的值。例如设置值为 100，执行**select * from TESTDB.travelrecord;<strong>的效果为和执行</strong>select * from TESTDB.travelrecord limit 100;**相同。</p>\n<p>设置该值的话，MyCat 默认会把查询到的信息全部都展示出来，造成过多的输出。所以，在正常使用中，还是建议加上一个值，用于减少过多的数据返回。</p>\n<p>当然 SQL 语句中也显式的指定 limit 的大小，不受该属性的约束。</p>\n<p>需要注意的是，如果运行的 schema 为非拆分库的，那么该属性不会生效。需要手动添加 limit 语句。</p>\n<h3 id=\"52-分配规则\"><a class=\"markdownIt-Anchor\" href=\"#52-分配规则\"></a> 5.2 分配规则</h3>\n<p><img src=\"/2021/07/23/mycat/image-20201104222632963.png\" alt=\"image-20201104222632963\"><br>\n<img src=\"/2021/07/23/mycat/image-20201104221336437.png\" alt=\"image-20201104221336437\"></p>\n<ul>\n<li>\n<p>范围分片：根据某个字设置auto-sharding-long，如果这个primaryKey超出了范围会报错</p>\n</li>\n<li>\n<p>取模分片：</p>\n</li>\n<li>\n<p>ER分片（将父子表有关联的数据放在一个data-node里面）</p>\n<p><img src=\"/2021/07/23/mycat/image-20201104221659540.png\" alt=\"image-20201104221659540\"></p>\n</li>\n<li>\n<p>全局表：所有dataNode存储相同的数据，查询的时候是随机查询某个表 type=global，查询的时候随机从某个datanode获取</p>\n</li>\n<li>\n<p>非分片表：只在某个dataNode上存储,指定一个dataNode并且不写分片规则</p>\n</li>\n<li>\n<p>单库分表：有个bug在实际数据库中必须要创建mycat中一摸一样的数据表，而且truncat的时候要现在dataNode先删除，才能删除的掉mycat的数据</p>\n</li>\n</ul>\n<h3 id=\"53-全局id\"><a class=\"markdownIt-Anchor\" href=\"#53-全局id\"></a> 5.3 全局ID</h3>\n<p><img src=\"/2021/07/23/mycat/image-20201104223246735.png\" alt=\"image-20201104223246735\"></p>\n<ul>\n<li>文件方式—0</li>\n<li>数据库方式—1</li>\n<li>本地时间戳----2</li>\n<li>ZK方式----3</li>\n</ul>\n<h2 id=\"6-mycat分片策略详解\"><a class=\"markdownIt-Anchor\" href=\"#6-mycat分片策略详解\"></a> 6. Mycat分片策略详解</h2>\n<p>连续分片与离散分片</p>\n<p><img src=\"/2021/07/23/mycat/image-20201107201442912.png\" alt=\"image-20201107201442912\"></p>\n<p><strong>连续分片</strong>：</p>\n<ul>\n<li>范围分片</li>\n<li>日期/事件</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>存在数据热点的可能性</li>\n<li>并发访问能力受限于单一或少量DataNode（访问集中），并不能分摊数据库访问的压力</li>\n</ul>\n<p><strong>离散</strong>：</p>\n<ul>\n<li>\n<p>取模（partioncount 的总数必须和分片总数相同）</p>\n</li>\n<li>\n<p>枚举</p>\n</li>\n<li>\n<p>一致性哈希(qs-murmur)</p>\n</li>\n<li>\n<p>固定分片哈希</p>\n<ul>\n<li>\n<p>partitionCount: 2, 1表示有三个分片必须和节点数量一致，否则会报错，前面两个一样长</p>\n</li>\n<li>\n<p>partitionLength: 256, 512表示长度为256和512</p>\n</li>\n<li>\n<p>综合在一起就是前面2个分片长度为256， 最后一个为512，结果如下图所示（注意partitionCount和partitionLength的数量一定要一致）</p>\n</li>\n<li>\n<p><img src=\"/2021/07/23/mycat/image-20201219103201836.png\" alt=\"image-20201219103201836\"></p>\n<p><img src=\"/2021/07/23/mycat/image-20201219102742172.png\" alt=\"image-20201219102742172\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>取模范围(sharting-by-pattern)：先取模PartitionByPattern后分片</p>\n</li>\n<li>\n<p>范围取模: PartitionByRangeMod(partition-rane-mod.txt)</p>\n<ul>\n<li>\n<pre class=\"highlight\"><code class=\"txt\">0-2000=1\t\t#范围在2000以内的在第一个节点（取模的结果还是本身）\n2001-4000=2\t\t#范围在2001到4000以内的再模2，结果为0在第一个节点，结果为1在第三个节点\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">-   其他</span><br><span class=\"line\"></span><br><span class=\"line\">优点：</span><br><span class=\"line\"></span><br><span class=\"line\">-   并发访问能力增强（负载到不同的节点）</span><br><span class=\"line\">-   范围条件查询性能提升（并行计算）</span><br><span class=\"line\"></span><br><span class=\"line\">缺点：</span><br><span class=\"line\"></span><br><span class=\"line\">-   数据扩容比较困难，设计到数据迁移问题</span><br><span class=\"line\">-   数据库连接消耗比较多</span><br><span class=\"line\"></span><br><span class=\"line\">分片策略的选择：</span><br><span class=\"line\"></span><br><span class=\"line\">1） 确定分片表</span><br><span class=\"line\"></span><br><span class=\"line\">2） 找出分片键</span><br><span class=\"line\"></span><br><span class=\"line\">3） 考虑容量、增速、业务用户</span><br><span class=\"line\"></span><br><span class=\"line\">如果在查询语句中没有携带分片建，那么mycat会将sql发布到所有的节点上</span><br><span class=\"line\"></span><br><span class=\"line\">## 7. Mycat扩缩容</span><br><span class=\"line\"></span><br><span class=\"line\">### 7.1 在线不停机扩缩容（双写）</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20201107205855474](./mycat/image-20201107205855474.png)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 7.2 离线扩缩容</span><br><span class=\"line\"></span><br><span class=\"line\">#### 7.2.1Mysql Dump</span><br><span class=\"line\"></span><br><span class=\"line\">```shell</span><br><span class=\"line\">mysqldump -uroot -p123456 -h127.0.0.1 -p3306 -c -t --skip-extended-insert 数据库名称 &gt; mysql.11.11.sql</span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"722-mycat自带工具\"><a class=\"markdownIt-Anchor\" href=\"#722-mycat自带工具\"></a> 7.2.2 Mycat自带工具</h4>\n<ol>\n<li>mycat所在环境安装mysql客户端程序</li>\n<li>mycat的lib目录下添加mysql的jdbc驱动包（mysql-connector-java-5.7.1.jar）</li>\n<li>对扩容缩容的表所有节点数据进行备份</li>\n<li>复制schema.xml、rule.xml并重命名为newSchema.xml、newRule.xml</li>\n<li>修改newSchema.xml和newRule.xml配置文件为扩容缩容后的参数</li>\n<li>在conf/migrateTable.properties配置文件中配置分片库和分片表如：imall=table_test1</li>\n<li>dataMigrate.sh配置mysqldump路径</li>\n<li>停止mycat服务</li>\n<li>执行bin/dataMigrate.sh脚本（不能用openjdk）</li>\n<li>替换schema.xml、rule.xml</li>\n</ol>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>保证分片表迁移数据前后路由规则一致（取模–&gt;取模）</li>\n<li>保证分片表歉意数据前后分片字段一致</li>\n<li>全局表将被忽略</li>\n<li>不要将非分片表配置到migrateTables.properties文件中</li>\n<li>暂时只支持分片表使用Mysql作为数据源的扩容缩容</li>\n</ul>\n<h2 id=\"8-mycat读写分离\"><a class=\"markdownIt-Anchor\" href=\"#8-mycat读写分离\"></a> 8. Mycat读写分离</h2>\n<h3 id=\"81-主从复制\"><a class=\"markdownIt-Anchor\" href=\"#81-主从复制\"></a> 8.1 主从复制</h3>\n<ol>\n<li>数据备份回复</li>\n<li>负载均衡（读写分离）</li>\n<li>高可用HA</li>\n</ol>\n<h3 id=\"82-主从复制形式\"><a class=\"markdownIt-Anchor\" href=\"#82-主从复制形式\"></a> 8.2 主从复制形式;</h3>\n<p><img src=\"/2021/07/23/mycat/image-20201107212552852.png\" alt=\"image-20201107212552852\"></p>\n<h4 id=\"binlogbinary-log-二进制日志\"><a class=\"markdownIt-Anchor\" href=\"#binlogbinary-log-二进制日志\"></a> binlog(Binary log 二进制日志)</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查看binglog: SHOW binlog events in &#x27;mysql-bin.000001&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">--show variables like &#x27;max_blog_max&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"binlog配置\"><a class=\"markdownIt-Anchor\" href=\"#binlog配置\"></a> binlog配置</h4>\n<ul>\n<li>STATEMENT: 记录每一天修改数据的sql语句（减少日志量，节约IO）</li>\n<li>ROW: 记录哪条数据被修改了，修改成什么样子了（5.7以后默认）</li>\n<li>MIXED: 结合两种方式，一般语句用STATEMENT,函数之类的使用ROW</li>\n</ul>\n<p><strong>binlog</strong>格式（mysql-bin.00001等）</p>\n<p><strong>查看binlog</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> binlog events <span class=\"keyword\">in</span> <span class=\"string\">&#x27;mysql-bin.00001&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"主从复制原理\"><a class=\"markdownIt-Anchor\" href=\"#主从复制原理\"></a> 主从复制原理</h3>\n<p>SQL Thread是单线程的， 这也是所有的主从复制延迟的原因，那么relay log接受master节点的sql语句主要是用于缓冲</p>\n<p><img src=\"/2021/07/23/mycat/image-20201107213638624.png\" alt=\"image-20201107213638624\"></p>\n<h3 id=\"mycat读写分离配置\"><a class=\"markdownIt-Anchor\" href=\"#mycat读写分离配置\"></a> mycat读写分离配置</h3>\n<p><img src=\"/2021/07/23/mycat/image-20201107213859155.png\" alt=\"image-20201107213859155\"></p>\n<h3 id=\"85-mycat注解hint\"><a class=\"markdownIt-Anchor\" href=\"#85-mycat注解hint\"></a> 8.5 Mycat注解（hint）</h3>\n<p>注解用法：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*!mycat:sql=注解sql语句*/真正执行的SQL</span><br><span class=\"line\"></span><br><span class=\"line\">比如说在mycat上创建表无法创建成功，可以使用注解</span><br><span class=\"line\">/*!mycat:sql=select * from table<span class=\"built_in\">_</span>1 where id = 1*/create table test2(id int);</span><br><span class=\"line\">主要注解sql可以确认mycat可以路由到子结点上，就可以执行后面的真正执行的sql语句</span><br></pre></td></tr></table></figure>\n<p>注解用途：</p>\n<ul>\n<li>跨库关联查询</li>\n<li>DDL或存储过程</li>\n<li>自定义分片</li>\n<li>读写分离</li>\n</ul>\n<h3 id=\"分布式事务\"><a class=\"markdownIt-Anchor\" href=\"#分布式事务\"></a> 分布式事务</h3>\n<p>基于XA协议的两阶段提交</p>\n<p><img src=\"/2021/07/23/mycat/image-20201107215437139.png\" alt=\"image-20201107215437139\"></p>\n<h4 id=\"xa角色\"><a class=\"markdownIt-Anchor\" href=\"#xa角色\"></a> XA角色</h4>\n<p><img src=\"/2021/07/23/mycat/image-20201107215605251.png\" alt=\"image-20201107215605251\"></p>\n<h4 id=\"xa实现\"><a class=\"markdownIt-Anchor\" href=\"#xa实现\"></a> XA实现</h4>\n<p><img src=\"/2021/07/23/mycat/image-20201107220049532.png\" alt=\"image-20201107220049532\"></p>\n<h2 id=\"9-mycat核心流程\"><a class=\"markdownIt-Anchor\" href=\"#9-mycat核心流程\"></a> 9. Mycat核心流程</h2>\n<h3 id=\"91-架构图\"><a class=\"markdownIt-Anchor\" href=\"#91-架构图\"></a> 9.1 架构图</h3>\n<p><img src=\"/2021/07/23/mycat/image-20201220170713526.png\" alt=\"image-20201220170713526\"></p>\n<h3 id=\"92-启动流程\"><a class=\"markdownIt-Anchor\" href=\"#92-启动流程\"></a> 9.2 启动流程</h3>\n<ol>\n<li>MycatServer启动，解析配置文件，包括服务器、分片规则等</li>\n<li>创建工作线程，建立前端连接和后端连接</li>\n</ol>\n<h3 id=\"93-执行sql流程\"><a class=\"markdownIt-Anchor\" href=\"#93-执行sql流程\"></a> 9.3 执行SQL流程</h3>\n<ol>\n<li>前端连接接收mysql命令</li>\n<li>解析MySQL，mycat用的是Druid的DruidParser</li>\n<li>获取路由</li>\n<li>改写MySQL，例如两个条件在两个节点上，则变成两条单独的sql</li>\n<li>与后端数据库建立连接</li>\n<li>发送sql语句到MySQL执行</li>\n<li>获取返回结果</li>\n<li>处理返回结果，例如排序、计算等等</li>\n<li>返回给客户端</li>\n</ol>\n<h2 id=\"mycat高可用\"><a class=\"markdownIt-Anchor\" href=\"#mycat高可用\"></a> Mycat高可用</h2>\n<p><img src=\"/2021/07/23/mycat/image-20201220172406074.png\" alt=\"image-20201220172406074\"></p>\n"},{"title":"vue学习","comments":0,"translate_title":"vue-learning","date":"2021-07-23T03:40:44.000Z","_content":"Object.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。\n### 1. export\n---\n用于规定模块的对外接口，export输出变量和方法、类\n\n-   变量\n\n    ```javascript\n    // profile.js\n    export var firstName = 'Michael';\n    export var lastName = 'Jackson';\n    export var year = 1958;\n    \n    //简写--优先使用\n    export {firstName, lastName, year}\n    ```\n\n-   方法\n\n    ```javascript\n    //如果想为输入的变量重新命名， 可以使用AS 关键字重新命名\n    import { buildMenus as buildMenus} from '@/api/menu';\n    //import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同\n    ```\n\n### 2. export default\n\n为模块指定默认输出， 使用import命令的时候，用户需要知道所要加载的变量名和函数名，否则无法加载；了解模块有哪些方法和属性比较麻烦，使用export default命令，为模块指定默认输出\n\n```javascript\n// export-default.js\nexport default function () {\n  console.log('foo');\n}\n```\n\n上面代码是一个模块文件export-default.js。默认输出1个函数；\n\n与export命令的区别：其他模块加载该模块是，import命令可以为该匿名函数指定任意名字\n\n```javascript\n// import-default.js\nimport customName from './export-default';\ncustomName(); // 'foo'\n```\n\n上面代码的`import`命令，可以用任意名称指向`export-default.js`输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时`import`命令后面，不使用大括号。\n\n本质上，`export default`就是输出一个叫做`default`的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。\n\n```javascript\n// modules.js\nfunction add(x, y) {\n  return x * y;\n}\nexport {add as default};\n// 等同于\n// export default add;\n\n// app.js\nimport { default as foo } from 'modules';\n// 等同于\n// import foo from 'modules';\n```\n\n正是因为`export default`命令其实只是输出一个叫做`default`的变量，所以它后面不能跟变量声明语句。\n\n**总结：**\n\n-   export命令对外接口是有名称的且`import`命令从模块导入的变量名与被导入模块对外接口的名称相同，而export default命令对外输出的变量名可以是任意的，这时`import`命令后面，不使用大括号。\n\n-   `export default`命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此`export default`命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应`export default`命令。\n\n```javascript\n//menu.js\n//get请求获取所有的菜单信息\nexport function buildMenus() {\n  return request({\n    url: 'api/menus/build',\n    method: 'get'\n  })\n}\n//post 请求保存数据\nexport function add(data) {\n  return request({\n    url: 'api/menus',\n    method: 'post',\n    data\n  })\n}\n//delete 请求删除数据\nexport function del(id) {\n  return request({\n    url: 'api/menus/' + id,\n    method: 'delete'\n  })\n}\n//put请求修改数据\nexport function edit(data) {\n  return request({\n    url: 'api/menus',\n    method: 'put',\n    data\n  })\n}\n\n//app.vue\nimport { buildMenus } from '@/api/menu';\n```\n\n### 3. Const、var、let\n\n ES5 中作用域有：全局作用域、函数作用域。没有块作用域的概念。\n\n ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域\n\n```javascript\n{\n  var a = 1;\n  console.log(a); // 1\n}\nconsole.log(a); // 1\n// 通过var定义的变量可以跨块作用域访问到。\n\n(function A() {\n  var b = 2;\n  console.log(b); // 2\n})();\n// console.log(b); // 报错，\n// 可见，通过var定义的变量不能跨函数作用域访问到\n\nif(true) {\n  var c = 3;\n}\nconsole.log(c); // 3\nfor(var i = 0; i < 4; i ++) {\n  var d = 5;\n};\nconsole.log(i); // 4   (循环结束i已经是4，所以此处i为4)\nconsole.log(d); // 5\n// if语句和for语句中用var定义的变量可以在外面访问到，\n// 可见，if语句和for语句属于块作用域，不属于函数作用域\n```\n\n三者的区别：\n\n1.  var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。\n2.  let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。\n3.  const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。\n\n```javascript\n// 块作用域\n{\n  var a = 1;\n  let b = 2;\n  const c = 3;\n  // c = 4; // 报错\n  var aa;\n  let bb;\n  // const cc; // 报错\n  console.log(a); // 1\n  console.log(b); // 2\n  console.log(c); // 3\n  console.log(aa); // undefined\n  console.log(bb); // undefined\n}\nconsole.log(a); // 1\n// console.log(b); // 报错\n// console.log(c); // 报错\n\n// 函数作用域\n(function A() {\n  var d = 5;\n  let e = 6;\n  const f = 7;\n  console.log(d); // 5\n  console.log(e); // 6  \n  console.log(f); // 7 \n})();\n// console.log(d); // 报错\n// console.log(e); // 报错\n// console.log(f); // 报错\n\n```\n\n注意：**const定义的对象属性是否可以改变**\n\n```javascript\nconst person = {\n  name : 'jiuke',\n  sex : '男'\n}\nperson.name = 'test'\nconsole.log(person.name)//person对象的name属性确实被修改了\n```\n\n因为对象是引用类型的，person中保存的仅是对象的指针，这就意味着，const仅保证指针不发生改变，修改对象的属性不会改变对象的指针，所以是被允许的。也就是说const定义的引用类型只要指针不发生改变，其他的不论如何改变都是允许的。\n\n然后我们试着修改一下指针，让person指向一个新对象，果然报错\n\n```javascript\nconst person = {\n   name : 'jiuke',\n   sex : '男'\n}\nperson = {\n   name : 'test',\n   sex : '男'\n}\n//报错\n```\n\n### 4. promise\n\npromise用途：异步编程的一种解决方案。\n\n优点：比传统的解决方案——回调函数和事件——更合理和更强大。\n\n三种状态：`pending`（进行中）、`fulfilled`（已成功）和`rejected`（已失败）。\n\n```javascript\n//基本用法：\nconst promise = new Promise(function(resolve, reject) {\n    resolve(value);//表示异步操作成功\n    reject(error);//表示异步操作失败\n});\n\n//promise常用的几个方法\n//1. 异步状态为成功时调用第一个函数，为失败时调用第二个函数。then方法的第二个参数可选。\npromise.then(value => {},error => {});\n\n//2. 异步状态为失败时调用。\npromise.catch(error => {});\n\n//3. promise异步状态为失败时或then方法中抛出错误都会执行catch方法。\npromise.then(value => {},error => {}).catch(error => {});\n\n//4. 不管状态如何都会执行的操作。\npromise.finally(() => {});\n```\n\n### 5. 生命周期\n\n<img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n### 6. 模版语法\n\n#### v-once\n\n执行一次性插值，当数据变化的时候，该内容不会更新；可能会影响该节点其他的数据绑定\n\n```html\n<span v-once>这个将不会改变: {{ msg }}</span>\n```\n\n#### v-html\n\n双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用v-html;\n\n```html\nvar rawHtml = \"<span>这是个使用v-htmls</span>\"\n\n<p>Using mustaches: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\n#### [Attribute](https://cn.vuejs.org/v2/guide/syntax.html#Attribute)\n\nMustache ({}) 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 [`v-bind` 指令](https://cn.vuejs.org/v2/api/#v-bind)：\n\n```html\n<div v-bind:id=\"dynamicId\"></div>\n\n\n//isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 <button> 元素中\n<button v-bind:disabled=\"isButtonDisabled\">Button</button>\n```\n\n#### 三元表达式\n\n```html\n{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div v-bind:id=\"'list-' + id\"></div>\n\n//这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。\n<!-- 这是语句，不是表达式 -->\n{{ var a = 1 }}\n\n<!-- 流控制也不会生效，请使用三元表达式 -->\n{{ if (ok) { return message } }}\n```\n\n### 7. 指令Directives\n\n指令 (Directives) 是带有 `v-` 前缀的特殊 attribute。指令 attribute 的值预期是**单个 JavaScript 表达式** (`v-for` 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。\n\n```html\n//v-if 指令将根据表达式 seen 的值的真假来插入/移除 <p> 元素。\n<p v-if=\"seen\">现在你看到我了</p>\n```\n\n#### 参数\n\n一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，`v-bind` 指令可以用于响应式地更新 HTML attribute\n\n```html\n//href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定\n<a v-bind:href=\"url\">...</a>\n\n<a v-on:click=\"doSomething\">...</a>\n```\n\n#### 动态参数\n\n 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数\n\n```html\n<a v-bind:[attributeName] = \"url\"></a>\n<!--\n\t这里的attributeName会被作为一个javascript表达式进行动态赋值，求得的值会作为最终的参数来使用\n如果VUE实例有一个data. property. attributeName， 其值为href， 那么绑定将等价于v-bind:href\n--->\n```\n\n绑定处理函数：\n\n```html\n<a v-on:[eventName]=\"dosomething\"></a>\n```\n\n-   对动态参数的值的约束\n\n    动态参数预期会求出一个字符串，异常情况下值为 `null`。这个特殊的 `null` 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。\n\n-   对动态参数表达式的约束\n\n    动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：\n\n#### 修饰符\n\n修饰符（modifier）是以半角句号`.` 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定；例如` .prevent`修饰符告诉v-on指令对触发的事件调用event.preventDefault();\n\n```html\n<form v-on:submit.prevent = \"onSubmit\">\n  \n</form>\n```\n\n#### 缩写\n\n```html\n<!-- 完整语法 -->\n<a v-bind:href=\"url\">...</a>\n\n<!-- 缩写 -->\n<a :href=\"url\">...</a>\n\n<!-- 动态参数的缩写 (2.6.0+) -->\n<a :[key]=\"url\"> ... </a>\n\n\n<!-- 完整语法 -->\n<a v-on:click=\"doSomething\">...</a>\n\n<!-- 缩写 -->\n<a @click=\"doSomething\">...</a>\n\n<!-- 动态参数的缩写 (2.6.0+) -->\n<a @[event]=\"doSomething\"> ... </a>\n```\n\n`:` 与 `@` 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。\n\n### 8. 计算属性\n\n```html\n<div id=\"example\">\n  {{ message.split('').reverse().join('') }}\n</div>\n```\n\n这里是想要显示变量 `message` 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。\n\n所以，对于任何复杂逻辑，你都应当使用**计算属性**\n\n例如：\n\n```html\n<div id=\"example\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n```\n\n```javascript\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    // 计算属性的 getter\n    reversedMessage: function () {\n      // `this` 指向 vm 实例\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n\n//页面显示：\n//Original message: \"Hello\"\n//Computed reversed message: \"olleH\"\n```\n\n声明了一个计算属性`reversedMessage`；我们提供的函数将用作property `vm.reversedMessage`的getter函数\n\n```javascript\nconsole.log(vm.reversedMessage) // olleH\nvm.message = 'Goodbye'\nconsole.log(vm.reversedMessage) // => 'eybdooG'\n```\n\n你可以打开浏览器的控制台，自行修改例子中的 vm。`vm.reversedMessage` 的值始终取决于 `vm.message` 的值。\n\n你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 `vm.reversedMessage` 依赖于 `vm.message`，因此当 `vm.message` 发生改变时，所有依赖 `vm.reversedMessage` 的绑定也会更新。以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的。\n\n#### 计算属性 VS 方法\n\n使用表达式中调用方法同样可以达到上面的结果\n\n```html\n<p>Reversed message: \"{{ reversedMessage() }}\"</p>\n```\n\n```javascript\n// 在组件中\nmethods: {\n  reversedMessage: function () {\n    return this.message.split('').reverse().join('')\n  }\n}\n```\n\n我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是**计算属性是基于它们的响应式依赖进行缓存的**。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 `message` 还没有发生改变，多次访问 `reversedMessage` 计算属性会立即返回之前的计算结果，而不必再次执行函数。\n\n这也同样意味着下面的计算属性将不再更新，因为 `Date.now()` 不是响应式依赖：\n\n```\ncomputed: {\n  now: function () {\n    return Date.now()\n  }\n}\n```\n\n相比之下，每当触发重新渲染时，调用方法将**总会**再次执行函数。\n\n我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 **A**，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 **A**。如果没有缓存，我们将不可避免的多次执行 **A** 的 getter！如果你不希望有缓存，请用方法来替代。\n\n#### 计算属性 VS 侦听属性\n\n侦听属性：vue提供了一种更通用的方式来观察和响应vue实例上的数据变动；当有一些数据需要随着其他数据变动而变动时；很容易滥用watch;**通常更好的做法是使用计算属性而不是命令式的watch回调**；\n\n```html\n<div id=\"demo\">{{ fullName }}</div>\n```\n\n```javascript\nvar vm = new Vue({\n  el: '#demo',\n  data: {\n    firstName: 'Foo',\n    lastName: 'Bar',\n    fullName: 'Foo Bar'\n  },\n  //侦听属性watch \n  watch: {\n    firstName: function (val) {\n      this.fullName = val + ' ' + this.lastName\n    },\n    lastName: function (val) {\n      this.fullName = this.firstName + ' ' + val\n    }\n  },\n  //计算属性\n  computed: {\n    fullName: function () {\n      return this.firstName + ' ' + this.lastName\n    }\n  }\n})\n\n```\n\n#### 计算属性的setter\n\n计算属性默认只有getter，自己可以提供一个setter\n\n```javascript\ncomputed: {\n  fullName: {\n    // getter\n    get: function () {\n      return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n      var names = newValue.split(' ')\n      this.firstName = names[0]\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n```\n\n现在再运行 `vm.fullName = 'John Doe'` 时，setter 会被调用，`vm.firstName` 和 `vm.lastName` 也会相应地被更新。\n\n### 9. 侦听器\n\n当需要在数据变化时执行异步或开销较大的操作时，watch是最有用的；同时也可以自定义侦听器；\n\n```html\n<div id=\"watch-example\">\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\">\n  </p>\n  <p>{{ answer }}</p>\n</div>\n```\n\n```javascript\n<!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 -->\n<!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 -->\n<script src=\"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js\"></script>\n<script>\nvar watchExampleVM = new Vue({\n  el: '#watch-example',\n  data: {\n    question: '',\n    answer: 'I cannot give you an answer until you ask a question!'\n  },\n  watch: {\n    // 如果 `question` 发生改变，这个函数就会运行\n    question: function (newQuestion, oldQuestion) {\n      this.answer = 'Waiting for you to stop typing...'\n      this.debouncedGetAnswer()\n    }\n  },\n  created: function () {\n    // `_.debounce` 是一个通过 Lodash 限制操作频率的函数。\n    // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率\n    // AJAX 请求直到用户输入完毕才会发出。想要了解更多关于\n    // `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，\n    // 请参考：https://lodash.com/docs#debounce\n    this.debouncedGetAnswer = _.debounce(this.getAnswer, 500)\n  },\n  methods: {\n    getAnswer: function () {\n      if (this.question.indexOf('?') === -1) {\n        this.answer = 'Questions usually contain a question mark. ;-)'\n        return\n      }\n      this.answer = 'Thinking...'\n      var vm = this\n      axios.get('https://yesno.wtf/api')\n        .then(function (response) {\n          vm.answer = _.capitalize(response.data.answer)\n        })\n        //异常捕获\n        .catch(function (error) {\n          vm.answer = 'Error! Could not reach the API. ' + error\n        })\n    }\n  }\n})\n</script>\n```\n\n使用 `watch` 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的\n\n### 10. class与style绑定\n\n将 `v-bind` 用于 `class` 和 `style` 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组\n\n#### 10.1 绑定html class\n\n##### 10.1.1对象语法\n\n方式一：内联\n\n```html\n<div\n  class=\"static\"\n  v-bind:class=\"{ active: isActive, 'text-danger': hasError }\"\n></div>\n//data\ndata: {\n  isActive: true,\n  hasError: false\n}\n```\n\n方式二：绑定的数据对象不必内联定义在模板里\n\n```html\n<div v-bind:class=\"classObject\"></div>\n//vue data\ndata: {\n  classObject: {\n    active: true,\n    'text-danger': false\n  }\n}\n```\n\n方式三：绑定一个返回对象的计算属性（常用）\n\n```html\n<div v-bind:class=\"classObject\"></div>\n\n//vue data\ndata: {\n  isActive: true,\n  error: null\n},\ncomputed: {\n  classObject: function () {\n    return {\n      active: this.isActive && !this.error,\n      'text-danger': this.error && this.error.type === 'fatal'\n    }\n  }\n}\n```\n\n##### 10.1.2 数组语法\n\n","source":"_posts/vue.md","raw":"---\ntitle: vue学习\ntags: vue\ncategories:\n- 前端\n- Vue\ncomments: false\ntranslate_title: vue-learning\ndate: 2021-07-23 11:40:44\n---\nObject.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。\n### 1. export\n---\n用于规定模块的对外接口，export输出变量和方法、类\n\n-   变量\n\n    ```javascript\n    // profile.js\n    export var firstName = 'Michael';\n    export var lastName = 'Jackson';\n    export var year = 1958;\n    \n    //简写--优先使用\n    export {firstName, lastName, year}\n    ```\n\n-   方法\n\n    ```javascript\n    //如果想为输入的变量重新命名， 可以使用AS 关键字重新命名\n    import { buildMenus as buildMenus} from '@/api/menu';\n    //import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同\n    ```\n\n### 2. export default\n\n为模块指定默认输出， 使用import命令的时候，用户需要知道所要加载的变量名和函数名，否则无法加载；了解模块有哪些方法和属性比较麻烦，使用export default命令，为模块指定默认输出\n\n```javascript\n// export-default.js\nexport default function () {\n  console.log('foo');\n}\n```\n\n上面代码是一个模块文件export-default.js。默认输出1个函数；\n\n与export命令的区别：其他模块加载该模块是，import命令可以为该匿名函数指定任意名字\n\n```javascript\n// import-default.js\nimport customName from './export-default';\ncustomName(); // 'foo'\n```\n\n上面代码的`import`命令，可以用任意名称指向`export-default.js`输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时`import`命令后面，不使用大括号。\n\n本质上，`export default`就是输出一个叫做`default`的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。\n\n```javascript\n// modules.js\nfunction add(x, y) {\n  return x * y;\n}\nexport {add as default};\n// 等同于\n// export default add;\n\n// app.js\nimport { default as foo } from 'modules';\n// 等同于\n// import foo from 'modules';\n```\n\n正是因为`export default`命令其实只是输出一个叫做`default`的变量，所以它后面不能跟变量声明语句。\n\n**总结：**\n\n-   export命令对外接口是有名称的且`import`命令从模块导入的变量名与被导入模块对外接口的名称相同，而export default命令对外输出的变量名可以是任意的，这时`import`命令后面，不使用大括号。\n\n-   `export default`命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此`export default`命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应`export default`命令。\n\n```javascript\n//menu.js\n//get请求获取所有的菜单信息\nexport function buildMenus() {\n  return request({\n    url: 'api/menus/build',\n    method: 'get'\n  })\n}\n//post 请求保存数据\nexport function add(data) {\n  return request({\n    url: 'api/menus',\n    method: 'post',\n    data\n  })\n}\n//delete 请求删除数据\nexport function del(id) {\n  return request({\n    url: 'api/menus/' + id,\n    method: 'delete'\n  })\n}\n//put请求修改数据\nexport function edit(data) {\n  return request({\n    url: 'api/menus',\n    method: 'put',\n    data\n  })\n}\n\n//app.vue\nimport { buildMenus } from '@/api/menu';\n```\n\n### 3. Const、var、let\n\n ES5 中作用域有：全局作用域、函数作用域。没有块作用域的概念。\n\n ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域\n\n```javascript\n{\n  var a = 1;\n  console.log(a); // 1\n}\nconsole.log(a); // 1\n// 通过var定义的变量可以跨块作用域访问到。\n\n(function A() {\n  var b = 2;\n  console.log(b); // 2\n})();\n// console.log(b); // 报错，\n// 可见，通过var定义的变量不能跨函数作用域访问到\n\nif(true) {\n  var c = 3;\n}\nconsole.log(c); // 3\nfor(var i = 0; i < 4; i ++) {\n  var d = 5;\n};\nconsole.log(i); // 4   (循环结束i已经是4，所以此处i为4)\nconsole.log(d); // 5\n// if语句和for语句中用var定义的变量可以在外面访问到，\n// 可见，if语句和for语句属于块作用域，不属于函数作用域\n```\n\n三者的区别：\n\n1.  var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。\n2.  let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。\n3.  const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。\n\n```javascript\n// 块作用域\n{\n  var a = 1;\n  let b = 2;\n  const c = 3;\n  // c = 4; // 报错\n  var aa;\n  let bb;\n  // const cc; // 报错\n  console.log(a); // 1\n  console.log(b); // 2\n  console.log(c); // 3\n  console.log(aa); // undefined\n  console.log(bb); // undefined\n}\nconsole.log(a); // 1\n// console.log(b); // 报错\n// console.log(c); // 报错\n\n// 函数作用域\n(function A() {\n  var d = 5;\n  let e = 6;\n  const f = 7;\n  console.log(d); // 5\n  console.log(e); // 6  \n  console.log(f); // 7 \n})();\n// console.log(d); // 报错\n// console.log(e); // 报错\n// console.log(f); // 报错\n\n```\n\n注意：**const定义的对象属性是否可以改变**\n\n```javascript\nconst person = {\n  name : 'jiuke',\n  sex : '男'\n}\nperson.name = 'test'\nconsole.log(person.name)//person对象的name属性确实被修改了\n```\n\n因为对象是引用类型的，person中保存的仅是对象的指针，这就意味着，const仅保证指针不发生改变，修改对象的属性不会改变对象的指针，所以是被允许的。也就是说const定义的引用类型只要指针不发生改变，其他的不论如何改变都是允许的。\n\n然后我们试着修改一下指针，让person指向一个新对象，果然报错\n\n```javascript\nconst person = {\n   name : 'jiuke',\n   sex : '男'\n}\nperson = {\n   name : 'test',\n   sex : '男'\n}\n//报错\n```\n\n### 4. promise\n\npromise用途：异步编程的一种解决方案。\n\n优点：比传统的解决方案——回调函数和事件——更合理和更强大。\n\n三种状态：`pending`（进行中）、`fulfilled`（已成功）和`rejected`（已失败）。\n\n```javascript\n//基本用法：\nconst promise = new Promise(function(resolve, reject) {\n    resolve(value);//表示异步操作成功\n    reject(error);//表示异步操作失败\n});\n\n//promise常用的几个方法\n//1. 异步状态为成功时调用第一个函数，为失败时调用第二个函数。then方法的第二个参数可选。\npromise.then(value => {},error => {});\n\n//2. 异步状态为失败时调用。\npromise.catch(error => {});\n\n//3. promise异步状态为失败时或then方法中抛出错误都会执行catch方法。\npromise.then(value => {},error => {}).catch(error => {});\n\n//4. 不管状态如何都会执行的操作。\npromise.finally(() => {});\n```\n\n### 5. 生命周期\n\n<img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n### 6. 模版语法\n\n#### v-once\n\n执行一次性插值，当数据变化的时候，该内容不会更新；可能会影响该节点其他的数据绑定\n\n```html\n<span v-once>这个将不会改变: {{ msg }}</span>\n```\n\n#### v-html\n\n双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用v-html;\n\n```html\nvar rawHtml = \"<span>这是个使用v-htmls</span>\"\n\n<p>Using mustaches: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\n#### [Attribute](https://cn.vuejs.org/v2/guide/syntax.html#Attribute)\n\nMustache ({}) 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 [`v-bind` 指令](https://cn.vuejs.org/v2/api/#v-bind)：\n\n```html\n<div v-bind:id=\"dynamicId\"></div>\n\n\n//isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 <button> 元素中\n<button v-bind:disabled=\"isButtonDisabled\">Button</button>\n```\n\n#### 三元表达式\n\n```html\n{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div v-bind:id=\"'list-' + id\"></div>\n\n//这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。\n<!-- 这是语句，不是表达式 -->\n{{ var a = 1 }}\n\n<!-- 流控制也不会生效，请使用三元表达式 -->\n{{ if (ok) { return message } }}\n```\n\n### 7. 指令Directives\n\n指令 (Directives) 是带有 `v-` 前缀的特殊 attribute。指令 attribute 的值预期是**单个 JavaScript 表达式** (`v-for` 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。\n\n```html\n//v-if 指令将根据表达式 seen 的值的真假来插入/移除 <p> 元素。\n<p v-if=\"seen\">现在你看到我了</p>\n```\n\n#### 参数\n\n一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，`v-bind` 指令可以用于响应式地更新 HTML attribute\n\n```html\n//href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定\n<a v-bind:href=\"url\">...</a>\n\n<a v-on:click=\"doSomething\">...</a>\n```\n\n#### 动态参数\n\n 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数\n\n```html\n<a v-bind:[attributeName] = \"url\"></a>\n<!--\n\t这里的attributeName会被作为一个javascript表达式进行动态赋值，求得的值会作为最终的参数来使用\n如果VUE实例有一个data. property. attributeName， 其值为href， 那么绑定将等价于v-bind:href\n--->\n```\n\n绑定处理函数：\n\n```html\n<a v-on:[eventName]=\"dosomething\"></a>\n```\n\n-   对动态参数的值的约束\n\n    动态参数预期会求出一个字符串，异常情况下值为 `null`。这个特殊的 `null` 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。\n\n-   对动态参数表达式的约束\n\n    动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：\n\n#### 修饰符\n\n修饰符（modifier）是以半角句号`.` 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定；例如` .prevent`修饰符告诉v-on指令对触发的事件调用event.preventDefault();\n\n```html\n<form v-on:submit.prevent = \"onSubmit\">\n  \n</form>\n```\n\n#### 缩写\n\n```html\n<!-- 完整语法 -->\n<a v-bind:href=\"url\">...</a>\n\n<!-- 缩写 -->\n<a :href=\"url\">...</a>\n\n<!-- 动态参数的缩写 (2.6.0+) -->\n<a :[key]=\"url\"> ... </a>\n\n\n<!-- 完整语法 -->\n<a v-on:click=\"doSomething\">...</a>\n\n<!-- 缩写 -->\n<a @click=\"doSomething\">...</a>\n\n<!-- 动态参数的缩写 (2.6.0+) -->\n<a @[event]=\"doSomething\"> ... </a>\n```\n\n`:` 与 `@` 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。\n\n### 8. 计算属性\n\n```html\n<div id=\"example\">\n  {{ message.split('').reverse().join('') }}\n</div>\n```\n\n这里是想要显示变量 `message` 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。\n\n所以，对于任何复杂逻辑，你都应当使用**计算属性**\n\n例如：\n\n```html\n<div id=\"example\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n```\n\n```javascript\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    // 计算属性的 getter\n    reversedMessage: function () {\n      // `this` 指向 vm 实例\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n\n//页面显示：\n//Original message: \"Hello\"\n//Computed reversed message: \"olleH\"\n```\n\n声明了一个计算属性`reversedMessage`；我们提供的函数将用作property `vm.reversedMessage`的getter函数\n\n```javascript\nconsole.log(vm.reversedMessage) // olleH\nvm.message = 'Goodbye'\nconsole.log(vm.reversedMessage) // => 'eybdooG'\n```\n\n你可以打开浏览器的控制台，自行修改例子中的 vm。`vm.reversedMessage` 的值始终取决于 `vm.message` 的值。\n\n你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 `vm.reversedMessage` 依赖于 `vm.message`，因此当 `vm.message` 发生改变时，所有依赖 `vm.reversedMessage` 的绑定也会更新。以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的。\n\n#### 计算属性 VS 方法\n\n使用表达式中调用方法同样可以达到上面的结果\n\n```html\n<p>Reversed message: \"{{ reversedMessage() }}\"</p>\n```\n\n```javascript\n// 在组件中\nmethods: {\n  reversedMessage: function () {\n    return this.message.split('').reverse().join('')\n  }\n}\n```\n\n我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是**计算属性是基于它们的响应式依赖进行缓存的**。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 `message` 还没有发生改变，多次访问 `reversedMessage` 计算属性会立即返回之前的计算结果，而不必再次执行函数。\n\n这也同样意味着下面的计算属性将不再更新，因为 `Date.now()` 不是响应式依赖：\n\n```\ncomputed: {\n  now: function () {\n    return Date.now()\n  }\n}\n```\n\n相比之下，每当触发重新渲染时，调用方法将**总会**再次执行函数。\n\n我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 **A**，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 **A**。如果没有缓存，我们将不可避免的多次执行 **A** 的 getter！如果你不希望有缓存，请用方法来替代。\n\n#### 计算属性 VS 侦听属性\n\n侦听属性：vue提供了一种更通用的方式来观察和响应vue实例上的数据变动；当有一些数据需要随着其他数据变动而变动时；很容易滥用watch;**通常更好的做法是使用计算属性而不是命令式的watch回调**；\n\n```html\n<div id=\"demo\">{{ fullName }}</div>\n```\n\n```javascript\nvar vm = new Vue({\n  el: '#demo',\n  data: {\n    firstName: 'Foo',\n    lastName: 'Bar',\n    fullName: 'Foo Bar'\n  },\n  //侦听属性watch \n  watch: {\n    firstName: function (val) {\n      this.fullName = val + ' ' + this.lastName\n    },\n    lastName: function (val) {\n      this.fullName = this.firstName + ' ' + val\n    }\n  },\n  //计算属性\n  computed: {\n    fullName: function () {\n      return this.firstName + ' ' + this.lastName\n    }\n  }\n})\n\n```\n\n#### 计算属性的setter\n\n计算属性默认只有getter，自己可以提供一个setter\n\n```javascript\ncomputed: {\n  fullName: {\n    // getter\n    get: function () {\n      return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n      var names = newValue.split(' ')\n      this.firstName = names[0]\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n```\n\n现在再运行 `vm.fullName = 'John Doe'` 时，setter 会被调用，`vm.firstName` 和 `vm.lastName` 也会相应地被更新。\n\n### 9. 侦听器\n\n当需要在数据变化时执行异步或开销较大的操作时，watch是最有用的；同时也可以自定义侦听器；\n\n```html\n<div id=\"watch-example\">\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\">\n  </p>\n  <p>{{ answer }}</p>\n</div>\n```\n\n```javascript\n<!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 -->\n<!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 -->\n<script src=\"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js\"></script>\n<script>\nvar watchExampleVM = new Vue({\n  el: '#watch-example',\n  data: {\n    question: '',\n    answer: 'I cannot give you an answer until you ask a question!'\n  },\n  watch: {\n    // 如果 `question` 发生改变，这个函数就会运行\n    question: function (newQuestion, oldQuestion) {\n      this.answer = 'Waiting for you to stop typing...'\n      this.debouncedGetAnswer()\n    }\n  },\n  created: function () {\n    // `_.debounce` 是一个通过 Lodash 限制操作频率的函数。\n    // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率\n    // AJAX 请求直到用户输入完毕才会发出。想要了解更多关于\n    // `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，\n    // 请参考：https://lodash.com/docs#debounce\n    this.debouncedGetAnswer = _.debounce(this.getAnswer, 500)\n  },\n  methods: {\n    getAnswer: function () {\n      if (this.question.indexOf('?') === -1) {\n        this.answer = 'Questions usually contain a question mark. ;-)'\n        return\n      }\n      this.answer = 'Thinking...'\n      var vm = this\n      axios.get('https://yesno.wtf/api')\n        .then(function (response) {\n          vm.answer = _.capitalize(response.data.answer)\n        })\n        //异常捕获\n        .catch(function (error) {\n          vm.answer = 'Error! Could not reach the API. ' + error\n        })\n    }\n  }\n})\n</script>\n```\n\n使用 `watch` 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的\n\n### 10. class与style绑定\n\n将 `v-bind` 用于 `class` 和 `style` 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组\n\n#### 10.1 绑定html class\n\n##### 10.1.1对象语法\n\n方式一：内联\n\n```html\n<div\n  class=\"static\"\n  v-bind:class=\"{ active: isActive, 'text-danger': hasError }\"\n></div>\n//data\ndata: {\n  isActive: true,\n  hasError: false\n}\n```\n\n方式二：绑定的数据对象不必内联定义在模板里\n\n```html\n<div v-bind:class=\"classObject\"></div>\n//vue data\ndata: {\n  classObject: {\n    active: true,\n    'text-danger': false\n  }\n}\n```\n\n方式三：绑定一个返回对象的计算属性（常用）\n\n```html\n<div v-bind:class=\"classObject\"></div>\n\n//vue data\ndata: {\n  isActive: true,\n  error: null\n},\ncomputed: {\n  classObject: function () {\n    return {\n      active: this.isActive && !this.error,\n      'text-danger': this.error && this.error.type === 'fatal'\n    }\n  }\n}\n```\n\n##### 10.1.2 数组语法\n\n","slug":"vue","published":1,"updated":"2021-08-15T07:41:26.135Z","layout":"post","photos":[],"link":"","_id":"ckslj4pt4003vkw3qe8oihr1b","content":"<p>Object.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。</p>\n<h3 id=\"1-export\"><a class=\"markdownIt-Anchor\" href=\"#1-export\"></a> 1. export</h3>\n<hr>\n<p>用于规定模块的对外接口，export输出变量和方法、类</p>\n<ul>\n<li>\n<p>变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// profile.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> firstName = <span class=\"string\">&#x27;Michael&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> lastName = <span class=\"string\">&#x27;Jackson&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> year = <span class=\"number\">1958</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简写--优先使用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;firstName, lastName, year&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果想为输入的变量重新命名， 可以使用AS 关键字重新命名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; buildMenus <span class=\"keyword\">as</span> buildMenus&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/menu&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-export-default\"><a class=\"markdownIt-Anchor\" href=\"#2-export-default\"></a> 2. export default</h3>\n<p>为模块指定默认输出， 使用import命令的时候，用户需要知道所要加载的变量名和函数名，否则无法加载；了解模块有哪些方法和属性比较麻烦，使用export default命令，为模块指定默认输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码是一个模块文件export-default.js。默认输出1个函数；</p>\n<p>与export命令的区别：其他模块加载该模块是，import命令可以为该匿名函数指定任意名字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> customName <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./export-default&#x27;</span>;</span><br><span class=\"line\">customName(); <span class=\"comment\">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>上面代码的<code>import</code>命令，可以用任意名称指向<code>export-default.js</code>输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时<code>import</code>命令后面，不使用大括号。</p>\n<p>本质上，<code>export default</code>就是输出一个叫做<code>default</code>的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// modules.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;add <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"comment\">// export default add;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> foo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;modules&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"comment\">// import foo from &#x27;modules&#x27;;</span></span><br></pre></td></tr></table></figure>\n<p>正是因为<code>export default</code>命令其实只是输出一个叫做<code>default</code>的变量，所以它后面不能跟变量声明语句。</p>\n<p><strong>总结：</strong></p>\n<ul>\n<li>\n<p>export命令对外接口是有名称的且<code>import</code>命令从模块导入的变量名与被导入模块对外接口的名称相同，而export default命令对外输出的变量名可以是任意的，这时<code>import</code>命令后面，不使用大括号。</p>\n</li>\n<li>\n<p><code>export default</code>命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此<code>export default</code>命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应<code>export default</code>命令。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//menu.js</span></span><br><span class=\"line\"><span class=\"comment\">//get请求获取所有的菜单信息</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildMenus</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus/build&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;get&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//post 请求保存数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//delete 请求删除数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">del</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus/&#x27;</span> + id,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;delete&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//put请求修改数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">edit</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;put&#x27;</span>,</span><br><span class=\"line\">    data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//app.vue</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; buildMenus &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/menu&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-const-var-let\"><a class=\"markdownIt-Anchor\" href=\"#3-const-var-let\"></a> 3. Const、var、let</h3>\n<p>ES5 中作用域有：全局作用域、函数作用域。没有块作用域的概念。</p>\n<p>ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 通过var定义的变量可以跨块作用域访问到。</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// console.log(b); // 报错，</span></span><br><span class=\"line\"><span class=\"comment\">// 可见，通过var定义的变量不能跨函数作用域访问到</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i ++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 4   (循环结束i已经是4，所以此处i为4)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"comment\">// if语句和for语句中用var定义的变量可以在外面访问到，</span></span><br><span class=\"line\"><span class=\"comment\">// 可见，if语句和for语句属于块作用域，不属于函数作用域</span></span><br></pre></td></tr></table></figure>\n<p>三者的区别：</p>\n<ol>\n<li>var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。</li>\n<li>let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。</li>\n<li>const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 块作用域</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// c = 4; // 报错</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> aa;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> bb;</span><br><span class=\"line\">  <span class=\"comment\">// const cc; // 报错</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(aa); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(bb); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(b); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(c); // 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数作用域</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> e = <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f = <span class=\"number\">7</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 5</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// 6  </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f); <span class=\"comment\">// 7 </span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// console.log(d); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(e); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(f); // 报错</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意：<strong>const定义的对象属性是否可以改变</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span> : <span class=\"string\">&#x27;jiuke&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.name = <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name)<span class=\"comment\">//person对象的name属性确实被修改了</span></span><br></pre></td></tr></table></figure>\n<p>因为对象是引用类型的，person中保存的仅是对象的指针，这就意味着，const仅保证指针不发生改变，修改对象的属性不会改变对象的指针，所以是被允许的。也就是说const定义的引用类型只要指针不发生改变，其他的不论如何改变都是允许的。</p>\n<p>然后我们试着修改一下指针，让person指向一个新对象，果然报错</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">&#x27;jiuke&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">&#x27;test&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-promise\"><a class=\"markdownIt-Anchor\" href=\"#4-promise\"></a> 4. promise</h3>\n<p>promise用途：异步编程的一种解决方案。</p>\n<p>优点：比传统的解决方案——回调函数和事件——更合理和更强大。</p>\n<p>三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基本用法：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    resolve(value);<span class=\"comment\">//表示异步操作成功</span></span><br><span class=\"line\">    reject(error);<span class=\"comment\">//表示异步操作失败</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//promise常用的几个方法</span></span><br><span class=\"line\"><span class=\"comment\">//1. 异步状态为成功时调用第一个函数，为失败时调用第二个函数。then方法的第二个参数可选。</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;&#125;,<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 异步状态为失败时调用。</span></span><br><span class=\"line\">promise.catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. promise异步状态为失败时或then方法中抛出错误都会执行catch方法。</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;&#125;,<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4. 不管状态如何都会执行的操作。</span></span><br><span class=\"line\">promise.finally(<span class=\"function\">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-生命周期\"><a class=\"markdownIt-Anchor\" href=\"#5-生命周期\"></a> 5. 生命周期</h3>\n<img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"img\" style=\"zoom:50%;\">\n<h3 id=\"6-模版语法\"><a class=\"markdownIt-Anchor\" href=\"#6-模版语法\"></a> 6. 模版语法</h3>\n<h4 id=\"v-once\"><a class=\"markdownIt-Anchor\" href=\"#v-once\"></a> v-once</h4>\n<p>执行一次性插值，当数据变化的时候，该内容不会更新；可能会影响该节点其他的数据绑定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>这个将不会改变: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"v-html\"><a class=\"markdownIt-Anchor\" href=\"#v-html\"></a> v-html</h4>\n<p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用v-html;</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var rawHtml = &quot;<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是个使用v-htmls<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using v-html directive: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">&quot;rawHtml&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"attribute\"><a class=\"markdownIt-Anchor\" href=\"#attribute\"></a> <a href=\"https://cn.vuejs.org/v2/guide/syntax.html#Attribute\">Attribute</a></h4>\n<p>Mustache ({}) 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 <a href=\"https://cn.vuejs.org/v2/api/#v-bind\"><code>v-bind</code> 指令</a>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;dynamicId&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> 元素中</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:disabled</span>=<span class=\"string\">&quot;isButtonDisabled&quot;</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"三元表达式\"><a class=\"markdownIt-Anchor\" href=\"#三元表达式\"></a> 三元表达式</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; number + 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-指令directives\"><a class=\"markdownIt-Anchor\" href=\"#7-指令directives\"></a> 7. 指令Directives</h3>\n<p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊 attribute。指令 attribute 的值预期是<strong>单个 JavaScript 表达式</strong> (<code>v-for</code> 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//v-if 指令将根据表达式 seen 的值的真假来插入/移除 <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 元素。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"参数\"><a class=\"markdownIt-Anchor\" href=\"#参数\"></a> 参数</h4>\n<p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，<code>v-bind</code> 指令可以用于响应式地更新 HTML attribute</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"动态参数\"><a class=\"markdownIt-Anchor\" href=\"#动态参数\"></a> 动态参数</h4>\n<p>2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:</span>[<span class=\"attr\">attributeName</span>] = <span class=\"string\">&quot;url&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t这里的attributeName会被作为一个javascript表达式进行动态赋值，求得的值会作为最终的参数来使用</span></span><br><span class=\"line\"><span class=\"comment\">如果VUE实例有一个data. property. attributeName， 其值为href， 那么绑定将等价于v-bind:href</span></span><br><span class=\"line\"><span class=\"comment\">---&gt;</span></span><br></pre></td></tr></table></figure>\n<p>绑定处理函数：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:</span>[<span class=\"attr\">eventName</span>]=<span class=\"string\">&quot;dosomething&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>对动态参数的值的约束</p>\n<p>动态参数预期会求出一个字符串，异常情况下值为 <code>null</code>。这个特殊的 <code>null</code> 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p>\n</li>\n<li>\n<p>对动态参数表达式的约束</p>\n<p>动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：</p>\n</li>\n</ul>\n<h4 id=\"修饰符\"><a class=\"markdownIt-Anchor\" href=\"#修饰符\"></a> 修饰符</h4>\n<p>修饰符（modifier）是以半角句号<code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定；例如<code>.prevent</code>修饰符告诉v-on指令对触发的事件调用event.preventDefault();</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span> = <span class=\"string\">&quot;onSubmit&quot;</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"缩写\"><a class=\"markdownIt-Anchor\" href=\"#缩写\"></a> 缩写</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:</span>[<span class=\"attr\">key</span>]=<span class=\"string\">&quot;url&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @[<span class=\"attr\">event</span>]=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>:</code> 与 <code>@</code> 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。</p>\n<h3 id=\"8-计算属性\"><a class=\"markdownIt-Anchor\" href=\"#8-计算属性\"></a> 8. 计算属性</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里是想要显示变量 <code>message</code> 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。</p>\n<p>所以，对于任何复杂逻辑，你都应当使用<strong>计算属性</strong></p>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Original message: &quot;&#123;&#123; message &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#example&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Hello&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 计算属性的 getter</span></span><br><span class=\"line\">    <span class=\"attr\">reversedMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// `this` 指向 vm 实例</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//页面显示：</span></span><br><span class=\"line\"><span class=\"comment\">//Original message: &quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//Computed reversed message: &quot;olleH&quot;</span></span><br></pre></td></tr></table></figure>\n<p>声明了一个计算属性<code>reversedMessage</code>；我们提供的函数将用作property <code>vm.reversedMessage</code>的getter函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// olleH</span></span><br><span class=\"line\">vm.message = <span class=\"string\">&#x27;Goodbye&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// =&gt; &#x27;eybdooG&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>你可以打开浏览器的控制台，自行修改例子中的 vm。<code>vm.reversedMessage</code> 的值始终取决于 <code>vm.message</code> 的值。</p>\n<p>你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 <code>vm.reversedMessage</code> 依赖于 <code>vm.message</code>，因此当 <code>vm.message</code> 发生改变时，所有依赖 <code>vm.reversedMessage</code> 的绑定也会更新。以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的。</p>\n<h4 id=\"计算属性-vs-方法\"><a class=\"markdownIt-Anchor\" href=\"#计算属性-vs-方法\"></a> 计算属性 VS 方法</h4>\n<p>使用表达式中调用方法同样可以达到上面的结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Reversed message: &quot;&#123;&#123; reversedMessage() &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在组件中</span></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">reversedMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>\n<p>这也同样意味着下面的计算属性将不再更新，因为 <code>Date.now()</code> 不是响应式依赖：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  now: function () &#123;</span><br><span class=\"line\">    return Date.now()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比之下，每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数。</p>\n<p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <strong>A</strong>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong>。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 getter！如果你不希望有缓存，请用方法来替代。</p>\n<h4 id=\"计算属性-vs-侦听属性\"><a class=\"markdownIt-Anchor\" href=\"#计算属性-vs-侦听属性\"></a> 计算属性 VS 侦听属性</h4>\n<p>侦听属性：vue提供了一种更通用的方式来观察和响应vue实例上的数据变动；当有一些数据需要随着其他数据变动而变动时；很容易滥用watch;<strong>通常更好的做法是使用计算属性而不是命令式的watch回调</strong>；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#demo&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Bar&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"string\">&#x27;Foo Bar&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//侦听属性watch </span></span><br><span class=\"line\">  <span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.fullName = val + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.fullName = <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//计算属性</span></span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"计算属性的setter\"><a class=\"markdownIt-Anchor\" href=\"#计算属性的setter\"></a> 计算属性的setter</h4>\n<p>计算属性默认只有getter，自己可以提供一个setter</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  <span class=\"attr\">fullName</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// getter</span></span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// setter</span></span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在再运行 <code>vm.fullName = 'John Doe'</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。</p>\n<h3 id=\"9-侦听器\"><a class=\"markdownIt-Anchor\" href=\"#9-侦听器\"></a> 9. 侦听器</h3>\n<p>当需要在数据变化时执行异步或开销较大的操作时，watch是最有用的；同时也可以自定义侦听器；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;watch-example&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    Ask a yes/no question:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;question&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span><br><span class=\"line\">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">var</span> watchExampleVM = <span class=\"keyword\">new</span> Vue(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#watch-example&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">data</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">question</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">answer</span>: <span class=\"string\">&#x27;I cannot give you an answer until you ask a question!&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">watch</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 如果 `question` 发生改变，这个函数就会运行</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">question</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newQuestion, oldQuestion</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Waiting for you to stop typing...&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.debouncedGetAnswer()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 请参考：https://lodash.com/docs#debounce</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">this</span>.debouncedGetAnswer = _.debounce(<span class=\"built_in\">this</span>.getAnswer, <span class=\"number\">500</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">getAnswer</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.question.indexOf(<span class=\"string\">&#x27;?&#x27;</span>) === -<span class=\"number\">1</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Questions usually contain a question mark. ;-)&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">return</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Thinking...&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">var</span> vm = <span class=\"built_in\">this</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      axios.get(<span class=\"string\">&#x27;https://yesno.wtf/api&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          vm.answer = _.capitalize(response.data.answer)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"comment\">//异常捕获</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          vm.answer = <span class=\"string\">&#x27;Error! Could not reach the API. &#x27;</span> + error</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>使用 <code>watch</code> 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的</p>\n<h3 id=\"10-class与style绑定\"><a class=\"markdownIt-Anchor\" href=\"#10-class与style绑定\"></a> 10. class与style绑定</h3>\n<p>将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组</p>\n<h4 id=\"101-绑定html-class\"><a class=\"markdownIt-Anchor\" href=\"#101-绑定html-class\"></a> 10.1 绑定html class</h4>\n<h5 id=\"1011对象语法\"><a class=\"markdownIt-Anchor\" href=\"#1011对象语法\"></a> 10.1.1对象语法</h5>\n<p>方式一：内联</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">&quot;static&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">//data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  hasError: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方式二：绑定的数据对象不必内联定义在模板里</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">//vue data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  classObject: &#123;</span><br><span class=\"line\">    active: true,</span><br><span class=\"line\">    &#x27;text-danger&#x27;: false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方式三：绑定一个返回对象的计算属性（常用）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//vue data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  error: null</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  classObject: function () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      active: this.isActive &amp;&amp; !this.error,</span><br><span class=\"line\">      &#x27;text-danger&#x27;: this.error &amp;&amp; this.error.type === &#x27;fatal&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"1012-数组语法\"><a class=\"markdownIt-Anchor\" href=\"#1012-数组语法\"></a> 10.1.2 数组语法</h5>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>Object.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。</p>\n<h3 id=\"1-export\"><a class=\"markdownIt-Anchor\" href=\"#1-export\"></a> 1. export</h3>\n<hr>\n<p>用于规定模块的对外接口，export输出变量和方法、类</p>\n<ul>\n<li>\n<p>变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// profile.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> firstName = <span class=\"string\">&#x27;Michael&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> lastName = <span class=\"string\">&#x27;Jackson&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> year = <span class=\"number\">1958</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简写--优先使用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;firstName, lastName, year&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果想为输入的变量重新命名， 可以使用AS 关键字重新命名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; buildMenus <span class=\"keyword\">as</span> buildMenus&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/menu&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-export-default\"><a class=\"markdownIt-Anchor\" href=\"#2-export-default\"></a> 2. export default</h3>\n<p>为模块指定默认输出， 使用import命令的时候，用户需要知道所要加载的变量名和函数名，否则无法加载；了解模块有哪些方法和属性比较麻烦，使用export default命令，为模块指定默认输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码是一个模块文件export-default.js。默认输出1个函数；</p>\n<p>与export命令的区别：其他模块加载该模块是，import命令可以为该匿名函数指定任意名字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import-default.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> customName <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./export-default&#x27;</span>;</span><br><span class=\"line\">customName(); <span class=\"comment\">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>上面代码的<code>import</code>命令，可以用任意名称指向<code>export-default.js</code>输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时<code>import</code>命令后面，不使用大括号。</p>\n<p>本质上，<code>export default</code>就是输出一个叫做<code>default</code>的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// modules.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;add <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"comment\">// export default add;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> foo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;modules&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"comment\">// import foo from &#x27;modules&#x27;;</span></span><br></pre></td></tr></table></figure>\n<p>正是因为<code>export default</code>命令其实只是输出一个叫做<code>default</code>的变量，所以它后面不能跟变量声明语句。</p>\n<p><strong>总结：</strong></p>\n<ul>\n<li>\n<p>export命令对外接口是有名称的且<code>import</code>命令从模块导入的变量名与被导入模块对外接口的名称相同，而export default命令对外输出的变量名可以是任意的，这时<code>import</code>命令后面，不使用大括号。</p>\n</li>\n<li>\n<p><code>export default</code>命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此<code>export default</code>命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应<code>export default</code>命令。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//menu.js</span></span><br><span class=\"line\"><span class=\"comment\">//get请求获取所有的菜单信息</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildMenus</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus/build&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;get&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//post 请求保存数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//delete 请求删除数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">del</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus/&#x27;</span> + id,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;delete&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//put请求修改数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">edit</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;api/menus&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;put&#x27;</span>,</span><br><span class=\"line\">    data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//app.vue</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; buildMenus &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/menu&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-const-var-let\"><a class=\"markdownIt-Anchor\" href=\"#3-const-var-let\"></a> 3. Const、var、let</h3>\n<p>ES5 中作用域有：全局作用域、函数作用域。没有块作用域的概念。</p>\n<p>ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 通过var定义的变量可以跨块作用域访问到。</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// console.log(b); // 报错，</span></span><br><span class=\"line\"><span class=\"comment\">// 可见，通过var定义的变量不能跨函数作用域访问到</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i ++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 4   (循环结束i已经是4，所以此处i为4)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"comment\">// if语句和for语句中用var定义的变量可以在外面访问到，</span></span><br><span class=\"line\"><span class=\"comment\">// 可见，if语句和for语句属于块作用域，不属于函数作用域</span></span><br></pre></td></tr></table></figure>\n<p>三者的区别：</p>\n<ol>\n<li>var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。</li>\n<li>let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。</li>\n<li>const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 块作用域</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// c = 4; // 报错</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> aa;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> bb;</span><br><span class=\"line\">  <span class=\"comment\">// const cc; // 报错</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(aa); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(bb); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(b); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(c); // 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数作用域</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> e = <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f = <span class=\"number\">7</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 5</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// 6  </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f); <span class=\"comment\">// 7 </span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// console.log(d); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(e); // 报错</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(f); // 报错</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意：<strong>const定义的对象属性是否可以改变</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span> : <span class=\"string\">&#x27;jiuke&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.name = <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name)<span class=\"comment\">//person对象的name属性确实被修改了</span></span><br></pre></td></tr></table></figure>\n<p>因为对象是引用类型的，person中保存的仅是对象的指针，这就意味着，const仅保证指针不发生改变，修改对象的属性不会改变对象的指针，所以是被允许的。也就是说const定义的引用类型只要指针不发生改变，其他的不论如何改变都是允许的。</p>\n<p>然后我们试着修改一下指针，让person指向一个新对象，果然报错</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">&#x27;jiuke&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">&#x27;test&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">sex</span> : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-promise\"><a class=\"markdownIt-Anchor\" href=\"#4-promise\"></a> 4. promise</h3>\n<p>promise用途：异步编程的一种解决方案。</p>\n<p>优点：比传统的解决方案——回调函数和事件——更合理和更强大。</p>\n<p>三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基本用法：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    resolve(value);<span class=\"comment\">//表示异步操作成功</span></span><br><span class=\"line\">    reject(error);<span class=\"comment\">//表示异步操作失败</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//promise常用的几个方法</span></span><br><span class=\"line\"><span class=\"comment\">//1. 异步状态为成功时调用第一个函数，为失败时调用第二个函数。then方法的第二个参数可选。</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;&#125;,<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 异步状态为失败时调用。</span></span><br><span class=\"line\">promise.catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. promise异步状态为失败时或then方法中抛出错误都会执行catch方法。</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;&#125;,<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4. 不管状态如何都会执行的操作。</span></span><br><span class=\"line\">promise.finally(<span class=\"function\">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-生命周期\"><a class=\"markdownIt-Anchor\" href=\"#5-生命周期\"></a> 5. 生命周期</h3>\n<img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"img\" style=\"zoom:50%;\">\n<h3 id=\"6-模版语法\"><a class=\"markdownIt-Anchor\" href=\"#6-模版语法\"></a> 6. 模版语法</h3>\n<h4 id=\"v-once\"><a class=\"markdownIt-Anchor\" href=\"#v-once\"></a> v-once</h4>\n<p>执行一次性插值，当数据变化的时候，该内容不会更新；可能会影响该节点其他的数据绑定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>这个将不会改变: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"v-html\"><a class=\"markdownIt-Anchor\" href=\"#v-html\"></a> v-html</h4>\n<p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用v-html;</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var rawHtml = &quot;<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是个使用v-htmls<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using v-html directive: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">&quot;rawHtml&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"attribute\"><a class=\"markdownIt-Anchor\" href=\"#attribute\"></a> <a href=\"https://cn.vuejs.org/v2/guide/syntax.html#Attribute\">Attribute</a></h4>\n<p>Mustache ({}) 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 <a href=\"https://cn.vuejs.org/v2/api/#v-bind\"><code>v-bind</code> 指令</a>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;dynamicId&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> 元素中</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:disabled</span>=<span class=\"string\">&quot;isButtonDisabled&quot;</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"三元表达式\"><a class=\"markdownIt-Anchor\" href=\"#三元表达式\"></a> 三元表达式</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; number + 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-指令directives\"><a class=\"markdownIt-Anchor\" href=\"#7-指令directives\"></a> 7. 指令Directives</h3>\n<p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊 attribute。指令 attribute 的值预期是<strong>单个 JavaScript 表达式</strong> (<code>v-for</code> 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//v-if 指令将根据表达式 seen 的值的真假来插入/移除 <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 元素。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"参数\"><a class=\"markdownIt-Anchor\" href=\"#参数\"></a> 参数</h4>\n<p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，<code>v-bind</code> 指令可以用于响应式地更新 HTML attribute</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"动态参数\"><a class=\"markdownIt-Anchor\" href=\"#动态参数\"></a> 动态参数</h4>\n<p>2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:</span>[<span class=\"attr\">attributeName</span>] = <span class=\"string\">&quot;url&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t这里的attributeName会被作为一个javascript表达式进行动态赋值，求得的值会作为最终的参数来使用</span></span><br><span class=\"line\"><span class=\"comment\">如果VUE实例有一个data. property. attributeName， 其值为href， 那么绑定将等价于v-bind:href</span></span><br><span class=\"line\"><span class=\"comment\">---&gt;</span></span><br></pre></td></tr></table></figure>\n<p>绑定处理函数：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:</span>[<span class=\"attr\">eventName</span>]=<span class=\"string\">&quot;dosomething&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>对动态参数的值的约束</p>\n<p>动态参数预期会求出一个字符串，异常情况下值为 <code>null</code>。这个特殊的 <code>null</code> 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p>\n</li>\n<li>\n<p>对动态参数表达式的约束</p>\n<p>动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：</p>\n</li>\n</ul>\n<h4 id=\"修饰符\"><a class=\"markdownIt-Anchor\" href=\"#修饰符\"></a> 修饰符</h4>\n<p>修饰符（modifier）是以半角句号<code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定；例如<code>.prevent</code>修饰符告诉v-on指令对触发的事件调用event.preventDefault();</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span> = <span class=\"string\">&quot;onSubmit&quot;</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"缩写\"><a class=\"markdownIt-Anchor\" href=\"#缩写\"></a> 缩写</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:</span>[<span class=\"attr\">key</span>]=<span class=\"string\">&quot;url&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @[<span class=\"attr\">event</span>]=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>:</code> 与 <code>@</code> 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。</p>\n<h3 id=\"8-计算属性\"><a class=\"markdownIt-Anchor\" href=\"#8-计算属性\"></a> 8. 计算属性</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里是想要显示变量 <code>message</code> 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。</p>\n<p>所以，对于任何复杂逻辑，你都应当使用<strong>计算属性</strong></p>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Original message: &quot;&#123;&#123; message &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#example&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Hello&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 计算属性的 getter</span></span><br><span class=\"line\">    <span class=\"attr\">reversedMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// `this` 指向 vm 实例</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//页面显示：</span></span><br><span class=\"line\"><span class=\"comment\">//Original message: &quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//Computed reversed message: &quot;olleH&quot;</span></span><br></pre></td></tr></table></figure>\n<p>声明了一个计算属性<code>reversedMessage</code>；我们提供的函数将用作property <code>vm.reversedMessage</code>的getter函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// olleH</span></span><br><span class=\"line\">vm.message = <span class=\"string\">&#x27;Goodbye&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.reversedMessage) <span class=\"comment\">// =&gt; &#x27;eybdooG&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>你可以打开浏览器的控制台，自行修改例子中的 vm。<code>vm.reversedMessage</code> 的值始终取决于 <code>vm.message</code> 的值。</p>\n<p>你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 <code>vm.reversedMessage</code> 依赖于 <code>vm.message</code>，因此当 <code>vm.message</code> 发生改变时，所有依赖 <code>vm.reversedMessage</code> 的绑定也会更新。以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的。</p>\n<h4 id=\"计算属性-vs-方法\"><a class=\"markdownIt-Anchor\" href=\"#计算属性-vs-方法\"></a> 计算属性 VS 方法</h4>\n<p>使用表达式中调用方法同样可以达到上面的结果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Reversed message: &quot;&#123;&#123; reversedMessage() &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在组件中</span></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">reversedMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>\n<p>这也同样意味着下面的计算属性将不再更新，因为 <code>Date.now()</code> 不是响应式依赖：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  now: function () &#123;</span><br><span class=\"line\">    return Date.now()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比之下，每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数。</p>\n<p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <strong>A</strong>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong>。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 getter！如果你不希望有缓存，请用方法来替代。</p>\n<h4 id=\"计算属性-vs-侦听属性\"><a class=\"markdownIt-Anchor\" href=\"#计算属性-vs-侦听属性\"></a> 计算属性 VS 侦听属性</h4>\n<p>侦听属性：vue提供了一种更通用的方式来观察和响应vue实例上的数据变动；当有一些数据需要随着其他数据变动而变动时；很容易滥用watch;<strong>通常更好的做法是使用计算属性而不是命令式的watch回调</strong>；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#demo&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Foo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;Bar&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"string\">&#x27;Foo Bar&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//侦听属性watch </span></span><br><span class=\"line\">  <span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.fullName = val + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.fullName = <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//计算属性</span></span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">fullName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"计算属性的setter\"><a class=\"markdownIt-Anchor\" href=\"#计算属性的setter\"></a> 计算属性的setter</h4>\n<p>计算属性默认只有getter，自己可以提供一个setter</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  <span class=\"attr\">fullName</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// getter</span></span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// setter</span></span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在再运行 <code>vm.fullName = 'John Doe'</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。</p>\n<h3 id=\"9-侦听器\"><a class=\"markdownIt-Anchor\" href=\"#9-侦听器\"></a> 9. 侦听器</h3>\n<p>当需要在数据变化时执行异步或开销较大的操作时，watch是最有用的；同时也可以自定义侦听器；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;watch-example&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    Ask a yes/no question:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;question&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span><br><span class=\"line\">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">var</span> watchExampleVM = <span class=\"keyword\">new</span> Vue(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#watch-example&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">data</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">question</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">answer</span>: <span class=\"string\">&#x27;I cannot give you an answer until you ask a question!&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">watch</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 如果 `question` 发生改变，这个函数就会运行</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">question</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newQuestion, oldQuestion</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Waiting for you to stop typing...&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.debouncedGetAnswer()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 请参考：https://lodash.com/docs#debounce</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">this</span>.debouncedGetAnswer = _.debounce(<span class=\"built_in\">this</span>.getAnswer, <span class=\"number\">500</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">getAnswer</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.question.indexOf(<span class=\"string\">&#x27;?&#x27;</span>) === -<span class=\"number\">1</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Questions usually contain a question mark. ;-)&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">return</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.answer = <span class=\"string\">&#x27;Thinking...&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">var</span> vm = <span class=\"built_in\">this</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      axios.get(<span class=\"string\">&#x27;https://yesno.wtf/api&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          vm.answer = _.capitalize(response.data.answer)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"comment\">//异常捕获</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">          vm.answer = <span class=\"string\">&#x27;Error! Could not reach the API. &#x27;</span> + error</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>使用 <code>watch</code> 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的</p>\n<h3 id=\"10-class与style绑定\"><a class=\"markdownIt-Anchor\" href=\"#10-class与style绑定\"></a> 10. class与style绑定</h3>\n<p>将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组</p>\n<h4 id=\"101-绑定html-class\"><a class=\"markdownIt-Anchor\" href=\"#101-绑定html-class\"></a> 10.1 绑定html class</h4>\n<h5 id=\"1011对象语法\"><a class=\"markdownIt-Anchor\" href=\"#1011对象语法\"></a> 10.1.1对象语法</h5>\n<p>方式一：内联</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">&quot;static&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">//data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  hasError: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方式二：绑定的数据对象不必内联定义在模板里</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">//vue data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  classObject: &#123;</span><br><span class=\"line\">    active: true,</span><br><span class=\"line\">    &#x27;text-danger&#x27;: false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方式三：绑定一个返回对象的计算属性（常用）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//vue data</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  error: null</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  classObject: function () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      active: this.isActive &amp;&amp; !this.error,</span><br><span class=\"line\">      &#x27;text-danger&#x27;: this.error &amp;&amp; this.error.type === &#x27;fatal&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"1012-数组语法\"><a class=\"markdownIt-Anchor\" href=\"#1012-数组语法\"></a> 10.1.2 数组语法</h5>\n"}],"PostAsset":[{"_id":"source/_posts/ElasticSearch/image-20200806170145844.png","post":"ckslj4prr0003kw3qhkd99ih9","slug":"image-20200806170145844.png","modified":1,"renderable":1},{"_id":"source/_posts/ElasticSearch/image-20200807093208470.png","post":"ckslj4prr0003kw3qhkd99ih9","slug":"image-20200807093208470.png","modified":1,"renderable":1},{"_id":"source/_posts/ElasticSearch/image-20200807093309761.png","post":"ckslj4prr0003kw3qhkd99ih9","slug":"image-20200807093309761.png","modified":1,"renderable":1},{"_id":"source/_posts/ElasticSearch/image-20201211095101816.png","post":"ckslj4prr0003kw3qhkd99ih9","slug":"image-20201211095101816.png","modified":1,"renderable":1},{"_id":"source/_posts/ElasticSearch/image-20201211095258901.png","post":"ckslj4prr0003kw3qhkd99ih9","slug":"image-20201211095258901.png","modified":1,"renderable":1},{"_id":"source/_posts/ConcurrentHashMap/01.png","post":"ckslj4prg0001kw3qa9f4f3uc","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/ConcurrentHashMap/02.png","post":"ckslj4prg0001kw3qa9f4f3uc","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/bug-sprigCloud/01.png","post":"ckslj4prw0009kw3qbnjd86hl","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/bug-sprigCloud/02.png","post":"ckslj4prw0009kw3qbnjd86hl","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/classLoad/01.png","post":"ckslj4ps0000gkw3qhu5ehuff","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/classLoad/02.png","post":"ckslj4ps0000gkw3qhu5ehuff","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/classLoad/03.png","post":"ckslj4ps0000gkw3qhu5ehuff","slug":"03.png","modified":1,"renderable":1},{"_id":"source/_posts/interest/3_5_8.png","post":"ckslj4ps5000ikw3qbid0h0hm","slug":"3_5_8.png","modified":1,"renderable":1},{"_id":"source/_posts/mvcc/01.png","post":"ckslj4psd000tkw3q9l0641d6","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/mvcc/02.png","post":"ckslj4psd000tkw3q9l0641d6","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/mvcc/03.png","post":"ckslj4psd000tkw3q9l0641d6","slug":"03.png","modified":1,"renderable":1},{"_id":"source/_posts/mvcc/04.png","post":"ckslj4psd000tkw3q9l0641d6","slug":"04.png","modified":1,"renderable":1},{"_id":"source/_posts/lock01/read_writer_Lock1.png","post":"ckslj4ps9000rkw3q1em865f8","slug":"read_writer_Lock1.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-index/01.png","post":"ckslj4pse000xkw3qhjthetjp","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-index/02.png","post":"ckslj4pse000xkw3qhjthetjp","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-index/03.png","post":"ckslj4pse000xkw3qhjthetjp","slug":"03.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20200727224117281.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20200727224117281.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20200727231112059.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20200727231112059.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20201202210235089.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20201202210235089.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20201202210357906.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20201202210357906.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20201202210510525.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20201202210510525.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20201202210817094.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20201202210817094.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20201202211406282.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20201202211406282.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20201202211752764.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20201202211752764.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20201202212103393.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20201202212103393.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20201202213520136.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20201202213520136.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20201202213757692.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20201202213757692.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20201202214418001.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20201202214418001.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20201202214957559.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20201202214957559.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20201202215350319.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20201202215350319.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20201202215717524.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20201202215717524.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20201202222250939.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20201202222250939.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20201202222823984.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20201202222823984.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20201202222914087.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20201202222914087.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20201202223655445.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20201202223655445.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20201202224136052.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20201202224136052.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-transcation/image-20201202224412832.png","post":"ckslj4psf0010kw3qaibx2oze","slug":"image-20201202224412832.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql/image-20200727224117281.png","post":"ckslj4psf0012kw3q7ql6fyr8","slug":"image-20200727224117281.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql/image-20200727231112059.png","post":"ckslj4psf0012kw3q7ql6fyr8","slug":"image-20200727231112059.png","modified":1,"renderable":1},{"_id":"source/_posts/nginx/image-20201210100736952.png","post":"ckslj4psh0018kw3q2c2ucxas","slug":"image-20201210100736952.png","modified":1,"renderable":1},{"_id":"source/_posts/nginx/image-20201210103251475.png","post":"ckslj4psh0018kw3q2c2ucxas","slug":"image-20201210103251475.png","modified":1,"renderable":1},{"_id":"source/_posts/nginx/image-20210606160947369.png","post":"ckslj4psh0018kw3q2c2ucxas","slug":"image-20210606160947369.png","modified":1,"renderable":1},{"_id":"source/_posts/outOfMemoryError/01.png","post":"ckslj4psi001bkw3qb0p9de8k","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/outOfMemoryError/02.png","post":"ckslj4psi001bkw3qb0p9de8k","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/outOfMemoryError/03.png","post":"ckslj4psi001bkw3qb0p9de8k","slug":"03.png","modified":1,"renderable":1},{"_id":"source/_posts/outOfMemoryError/04.png","post":"ckslj4psi001bkw3qb0p9de8k","slug":"04.png","modified":1,"renderable":1},{"_id":"source/_posts/outOfMemoryError/05.png","post":"ckslj4psi001bkw3qb0p9de8k","slug":"05.png","modified":1,"renderable":1},{"_id":"source/_posts/outOfMemoryError/06.png","post":"ckslj4psi001bkw3qb0p9de8k","slug":"06.png","modified":1,"renderable":1},{"_id":"source/_posts/redis-usage-scenario/01.png","post":"ckslj4psi001dkw3qd67uc7de","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/redis-usage-scenario/02.png","post":"ckslj4psi001dkw3qd67uc7de","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/redis-usage-scenario/03.png","post":"ckslj4psi001dkw3qd67uc7de","slug":"03.png","modified":1,"renderable":1},{"_id":"source/_posts/redis-usage-scenario/04.png","post":"ckslj4psi001dkw3qd67uc7de","slug":"04.png","modified":1,"renderable":1},{"_id":"source/_posts/redis-usage-scenario/05.png","post":"ckslj4psi001dkw3qd67uc7de","slug":"05.png","modified":1,"renderable":1},{"_id":"source/_posts/redis-usage-scenario/06.png","post":"ckslj4psi001dkw3qd67uc7de","slug":"06.png","modified":1,"renderable":1},{"_id":"source/_posts/redis_install/image-20201201155441018.png","post":"ckslj4pso001hkw3q54vt3o7s","slug":"image-20201201155441018.png","modified":1,"renderable":1},{"_id":"source/_posts/thread-status/01.jpg","post":"ckslj4pss001wkw3qdzp395va","slug":"01.jpg","modified":1,"renderable":1},{"_id":"source/_posts/volatile/01.png","post":"ckslj4pss0020kw3qchro7d6w","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201104204430049.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201104204430049.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201104204624925.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201104204624925.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201104204933409.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201104204933409.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201104205054233.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201104205054233.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201104205319372.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201104205319372.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201104205653611.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201104205653611.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201104205756827.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201104205756827.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201104210008624.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201104210008624.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201104210117373.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201104210117373.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201104210416994.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201104210416994.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201104213343204.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201104213343204.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201104215015366.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201104215015366.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201104221336437.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201104221336437.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201104221659540.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201104221659540.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201104222632963.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201104222632963.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201104223246735.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201104223246735.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201107201442912.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201107201442912.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201107205855474.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201107205855474.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201107212552852.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201107212552852.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201107213638624.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201107213638624.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201107213859155.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201107213859155.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201107215437139.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201107215437139.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201107215605251.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201107215605251.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201107220049532.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201107220049532.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201127094703483.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201127094703483.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201127103212598.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201127103212598.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201127104159580.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201127104159580.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201128135953635.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201128135953635.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201129110838590.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201129110838590.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201215152125176.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201215152125176.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201219102742172.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201219102742172.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201219103201836.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201219103201836.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201220170713526.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201220170713526.png","modified":1,"renderable":1},{"_id":"source/_posts/mycat/image-20201220172406074.png","post":"ckslj4pt4003ukw3q04a633v9","slug":"image-20201220172406074.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckslj4ps0000gkw3qhu5ehuff","category_id":"ckslj4prt0004kw3qg5cb297t","_id":"ckslj4ps9000okw3q5m8d1vpe"},{"post_id":"ckslj4ps7000lkw3qhua99mxz","category_id":"ckslj4prt0004kw3qg5cb297t","_id":"ckslj4psd000ukw3qay2g399j"},{"post_id":"ckslj4ps8000nkw3q61d0gfnh","category_id":"ckslj4prt0004kw3qg5cb297t","_id":"ckslj4pse000ykw3q8blg016b"},{"post_id":"ckslj4prg0001kw3qa9f4f3uc","category_id":"ckslj4prt0004kw3qg5cb297t","_id":"ckslj4psf0011kw3q72omh9f0"},{"post_id":"ckslj4prg0001kw3qa9f4f3uc","category_id":"ckslj4ps9000pkw3qfegbbrjj","_id":"ckslj4psg0015kw3q1t7wbe8g"},{"post_id":"ckslj4psg0017kw3q02wvdirp","category_id":"ckslj4prz000ckw3q6glrh82e","_id":"ckslj4psj001ekw3q0cmh5ecb"},{"post_id":"ckslj4psg0017kw3q02wvdirp","category_id":"ckslj4psg0013kw3q707kf403","_id":"ckslj4psp001ikw3q34foevwb"},{"post_id":"ckslj4pru0007kw3q23lrchpy","category_id":"ckslj4prz000ckw3q6glrh82e","_id":"ckslj4psq001lkw3qcqiz068n"},{"post_id":"ckslj4pru0007kw3q23lrchpy","category_id":"ckslj4psg0013kw3q707kf403","_id":"ckslj4psr001qkw3q1cg0h37g"},{"post_id":"ckslj4psi001bkw3qb0p9de8k","category_id":"ckslj4prt0004kw3qg5cb297t","_id":"ckslj4psr001tkw3qd1ctd996"},{"post_id":"ckslj4psi001bkw3qb0p9de8k","category_id":"ckslj4ps9000pkw3qfegbbrjj","_id":"ckslj4pss001ykw3qe9k3dnh5"},{"post_id":"ckslj4ps5000ikw3qbid0h0hm","category_id":"ckslj4psh0019kw3q30rq8ddl","_id":"ckslj4pst0021kw3qc02u1d60"},{"post_id":"ckslj4prw0009kw3qbnjd86hl","category_id":"ckslj4ps6000jkw3q296v5zn4","_id":"ckslj4psu0026kw3q7e0m3nx6"},{"post_id":"ckslj4prw0009kw3qbnjd86hl","category_id":"ckslj4psj001fkw3q3skad0oy","_id":"ckslj4psu0028kw3q6atm8653"},{"post_id":"ckslj4psd000tkw3q9l0641d6","category_id":"ckslj4prz000ckw3q6glrh82e","_id":"ckslj4psv002ckw3q3gfg1g9c"},{"post_id":"ckslj4psd000tkw3q9l0641d6","category_id":"ckslj4psq001okw3q5n2894mr","_id":"ckslj4psv002ekw3q83cy1vaj"},{"post_id":"ckslj4psr001skw3q2li17hqp","category_id":"ckslj4prz000ckw3q6glrh82e","_id":"ckslj4psv002hkw3q4sme0ipw"},{"post_id":"ckslj4psr001skw3q2li17hqp","category_id":"ckslj4psg0013kw3q707kf403","_id":"ckslj4psw002kkw3qg1v4fg4a"},{"post_id":"ckslj4pse000xkw3qhjthetjp","category_id":"ckslj4prz000ckw3q6glrh82e","_id":"ckslj4psw002mkw3q2v6h5yf1"},{"post_id":"ckslj4pse000xkw3qhjthetjp","category_id":"ckslj4psg0013kw3q707kf403","_id":"ckslj4psx002pkw3qbf23by1a"},{"post_id":"ckslj4pss0020kw3qchro7d6w","category_id":"ckslj4prt0004kw3qg5cb297t","_id":"ckslj4psx002rkw3qevxqhb59"},{"post_id":"ckslj4pss0020kw3qchro7d6w","category_id":"ckslj4ps9000pkw3qfegbbrjj","_id":"ckslj4psx002ukw3q2kdx19gu"},{"post_id":"ckslj4psf0010kw3qaibx2oze","category_id":"ckslj4prz000ckw3q6glrh82e","_id":"ckslj4psy002vkw3q2q178jfc"},{"post_id":"ckslj4psf0010kw3qaibx2oze","category_id":"ckslj4psg0013kw3q707kf403","_id":"ckslj4psy002zkw3qemep7whg"},{"post_id":"ckslj4prz000bkw3qf1g99bam","category_id":"ckslj4pse000vkw3qhtd45kw4","_id":"ckslj4psy0030kw3qeubof0d6"},{"post_id":"ckslj4prz000bkw3qf1g99bam","category_id":"ckslj4psv002akw3q94nf6d90","_id":"ckslj4psz0033kw3qa2xocijr"},{"post_id":"ckslj4psf0012kw3q7ql6fyr8","category_id":"ckslj4prz000ckw3q6glrh82e","_id":"ckslj4psz0035kw3qeum44kr7"},{"post_id":"ckslj4psf0012kw3q7ql6fyr8","category_id":"ckslj4psg0013kw3q707kf403","_id":"ckslj4psz0038kw3q4zb8ff04"},{"post_id":"ckslj4psi001dkw3qd67uc7de","category_id":"ckslj4pse000vkw3qhtd45kw4","_id":"ckslj4psz003akw3q4f3f9kg1"},{"post_id":"ckslj4psi001dkw3qd67uc7de","category_id":"ckslj4psv002akw3q94nf6d90","_id":"ckslj4pt0003dkw3q0kpm4tqi"},{"post_id":"ckslj4pso001hkw3q54vt3o7s","category_id":"ckslj4pse000vkw3qhtd45kw4","_id":"ckslj4pt0003fkw3q781efyzp"},{"post_id":"ckslj4pso001hkw3q54vt3o7s","category_id":"ckslj4psv002akw3q94nf6d90","_id":"ckslj4pt0003hkw3q02x1czx9"},{"post_id":"ckslj4psq001pkw3qdon07th5","category_id":"ckslj4prt0004kw3qg5cb297t","_id":"ckslj4pt1003jkw3q6yn9h2zs"},{"post_id":"ckslj4psq001pkw3qdon07th5","category_id":"ckslj4psz0036kw3q2vlrauui","_id":"ckslj4pt1003kkw3q2krjbbue"},{"post_id":"ckslj4pss001wkw3qdzp395va","category_id":"ckslj4prt0004kw3qg5cb297t","_id":"ckslj4pt1003mkw3q5fpb4brh"},{"post_id":"ckslj4pss001wkw3qdzp395va","category_id":"ckslj4psz0036kw3q2vlrauui","_id":"ckslj4pt1003nkw3qf6a33vcq"},{"post_id":"ckslj4pst0023kw3q2zycauzk","category_id":"ckslj4pt0003gkw3qge9a360r","_id":"ckslj4pt1003pkw3qgfyd114j"},{"post_id":"ckslj4psh0018kw3q2c2ucxas","category_id":"ckslj4psw002nkw3qggov4g2u","_id":"ckslj4pt1003qkw3qef4y4n5c"},{"post_id":"ckslj4psh0018kw3q2c2ucxas","category_id":"ckslj4pt1003lkw3q0tnlemat","_id":"ckslj4pt1003rkw3qfqbx9wqt"},{"post_id":"ckslj4psp001kkw3qerdngvwf","category_id":"ckslj4psy0031kw3qe5vq7maz","_id":"ckslj4pt2003skw3q7qlb0zf0"},{"post_id":"ckslj4psp001kkw3qerdngvwf","category_id":"ckslj4pt1003okw3qceke4s2r","_id":"ckslj4pt2003tkw3qbweo87al"},{"post_id":"ckslj4pt4003ukw3q04a633v9","category_id":"ckslj4pse000vkw3qhtd45kw4","_id":"ckslj4pt5003ykw3qdvgqhzt1"},{"post_id":"ckslj4pt4003vkw3qe8oihr1b","category_id":"ckslj4pt5003xkw3q5kfa8x8j","_id":"ckslj4pt60043kw3q1ou9hlkl"},{"post_id":"ckslj4pt4003vkw3qe8oihr1b","category_id":"ckslj4pt60041kw3q6zuug6rh","_id":"ckslj4pt60044kw3qb5f31rb1"}],"PostTag":[{"post_id":"ckslj4prg0001kw3qa9f4f3uc","tag_id":"ckslj4pru0005kw3q0elx45dz","_id":"ckslj4ps0000ekw3q0odx61vx"},{"post_id":"ckslj4prr0003kw3qhkd99ih9","tag_id":"ckslj4prz000dkw3qgfn1hxnt","_id":"ckslj4ps8000mkw3qhgwxeb7s"},{"post_id":"ckslj4pru0007kw3q23lrchpy","tag_id":"ckslj4ps7000kkw3qbfymbdzy","_id":"ckslj4psd000skw3q5dbbhi8d"},{"post_id":"ckslj4prw0009kw3qbnjd86hl","tag_id":"ckslj4ps9000qkw3q8a4cgbkd","_id":"ckslj4psf000zkw3q8m3f5vw8"},{"post_id":"ckslj4prz000bkw3qf1g99bam","tag_id":"ckslj4pse000wkw3q68lq0c0e","_id":"ckslj4psg0016kw3q3ovphqft"},{"post_id":"ckslj4ps0000gkw3qhu5ehuff","tag_id":"ckslj4psg0014kw3q7ge1bsoc","_id":"ckslj4psi001ckw3q7ou47xb3"},{"post_id":"ckslj4ps7000lkw3qhua99mxz","tag_id":"ckslj4psh001akw3q8e9sgipm","_id":"ckslj4psp001jkw3qetzce7sb"},{"post_id":"ckslj4psi001dkw3qd67uc7de","tag_id":"ckslj4pse000wkw3q68lq0c0e","_id":"ckslj4psq001mkw3qdkvpaa3g"},{"post_id":"ckslj4pso001hkw3q54vt3o7s","tag_id":"ckslj4pse000wkw3q68lq0c0e","_id":"ckslj4psr001rkw3q5elqh1v9"},{"post_id":"ckslj4ps8000nkw3q61d0gfnh","tag_id":"ckslj4psh001akw3q8e9sgipm","_id":"ckslj4psr001ukw3qfq6we6ty"},{"post_id":"ckslj4psq001pkw3qdon07th5","tag_id":"ckslj4psh001akw3q8e9sgipm","_id":"ckslj4pss001zkw3qcnlfhd1c"},{"post_id":"ckslj4ps9000rkw3q1em865f8","tag_id":"ckslj4psq001nkw3q3qknc8eu","_id":"ckslj4pst0022kw3qe4ii8mqg"},{"post_id":"ckslj4pss001wkw3qdzp395va","tag_id":"ckslj4psh001akw3q8e9sgipm","_id":"ckslj4psu0027kw3q4f9f9b7j"},{"post_id":"ckslj4pss0020kw3qchro7d6w","tag_id":"ckslj4pru0005kw3q0elx45dz","_id":"ckslj4psv0029kw3q1hv59vlr"},{"post_id":"ckslj4psd000tkw3q9l0641d6","tag_id":"ckslj4psr001vkw3qgl6cg4w6","_id":"ckslj4psv002dkw3q66m3eppr"},{"post_id":"ckslj4pse000xkw3qhjthetjp","tag_id":"ckslj4psr001vkw3qgl6cg4w6","_id":"ckslj4psv002fkw3qelkj54gn"},{"post_id":"ckslj4psf0010kw3qaibx2oze","tag_id":"ckslj4psr001vkw3qgl6cg4w6","_id":"ckslj4psw002jkw3q3nec2mce"},{"post_id":"ckslj4psf0012kw3q7ql6fyr8","tag_id":"ckslj4psr001vkw3qgl6cg4w6","_id":"ckslj4psw002okw3q6tgj5zno"},{"post_id":"ckslj4psg0017kw3q02wvdirp","tag_id":"ckslj4psr001vkw3qgl6cg4w6","_id":"ckslj4psx002tkw3qgycx0u6h"},{"post_id":"ckslj4psh0018kw3q2c2ucxas","tag_id":"ckslj4psx002qkw3q0wdz6mcm","_id":"ckslj4psy002ykw3qaflfd7fs"},{"post_id":"ckslj4psi001bkw3qb0p9de8k","tag_id":"ckslj4psy002wkw3q1pauhle1","_id":"ckslj4psz0034kw3q7qowaa2l"},{"post_id":"ckslj4psp001kkw3qerdngvwf","tag_id":"ckslj4psy0032kw3qd2k0ak0g","_id":"ckslj4psz0039kw3qgg8741io"},{"post_id":"ckslj4psr001skw3q2li17hqp","tag_id":"ckslj4psr001vkw3qgl6cg4w6","_id":"ckslj4pt0003ekw3qgxpv807m"},{"post_id":"ckslj4pst0023kw3q2zycauzk","tag_id":"ckslj4psz003bkw3qhbishi3l","_id":"ckslj4pt1003ikw3qc8i703jm"},{"post_id":"ckslj4pt4003ukw3q04a633v9","tag_id":"ckslj4pt5003wkw3q1zxz1388","_id":"ckslj4pt60040kw3qbtpjbrhe"},{"post_id":"ckslj4pt4003vkw3qe8oihr1b","tag_id":"ckslj4pt6003zkw3q4gn0hw7x","_id":"ckslj4pt60042kw3q4p63ansz"}],"Tag":[{"name":"面试","_id":"ckslj4pru0005kw3q0elx45dz"},{"name":"ELK","_id":"ckslj4prz000dkw3qgfn1hxnt"},{"name":"algorithm","_id":"ckslj4ps7000kkw3qbfymbdzy"},{"name":"问题点","_id":"ckslj4ps9000qkw3q8a4cgbkd"},{"name":"redis","_id":"ckslj4pse000wkw3q68lq0c0e"},{"name":"ClassLoader","_id":"ckslj4psg0014kw3q7ge1bsoc"},{"name":"java","_id":"ckslj4psh001akw3q8e9sgipm"},{"name":"lock","_id":"ckslj4psq001nkw3q3qknc8eu"},{"name":"mysql","_id":"ckslj4psr001vkw3qgl6cg4w6"},{"name":"nginx","_id":"ckslj4psx002qkw3q0wdz6mcm"},{"name":"内存溢出","_id":"ckslj4psy002wkw3q1pauhle1"},{"name":"springboot","_id":"ckslj4psy0032kw3qd2k0ak0g"},{"name":"工具","_id":"ckslj4psz003bkw3qhbishi3l"},{"name":"mycat","_id":"ckslj4pt5003wkw3q1zxz1388"},{"name":"vue","_id":"ckslj4pt6003zkw3q4gn0hw7x"}]}}